[
  {
    "soID": 111102,
    "parentID": null,
    "url": "https://stackoverflow.com/q/111102",
    "title": "How do JavaScript closures work?",
    "body": "<p>How would you explain JavaScript closures to someone with a knowledge of the concepts they consist of (for example functions, variables and the like), but does not understand closures themselves?</p>\n\n<p>I have seen <a href=\"http://en.wikipedia.org/wiki/Scheme_%28programming_language%29\" rel=\"noreferrer\">the Scheme example</a> given on Wikipedia, but unfortunately it did not help.</p>\n",
    "score": 7669,
    "tags": [
      "javascript",
      "function",
      "variables",
      "scope",
      "closures"
    ],
    "acceptedAnswerID": 111111,
    "user": null
  },
  {
    "soID": 503093,
    "parentID": null,
    "url": "https://stackoverflow.com/q/503093",
    "title": "How to redirect to another webpage in JavaScript/jQuery?",
    "body": "<p>How can I redirect the user from one page to another using JavaScript or jQuery?</p>\n",
    "score": 6868,
    "tags": [
      "javascript",
      "jquery",
      "redirect"
    ],
    "acceptedAnswerID": 506004,
    "user": {
      "soUserID": 44984,
      "name": "venkatachalam",
      "reputation": 43478
    }
  },
  {
    "soID": 1789945,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1789945",
    "title": "How to check whether a string contains a substring in JavaScript?",
    "body": "<p>Usually I would expect a <code>String.contains()</code> method but there doesn't seem to be one. What is a reasonable way to check for this?</p>\n",
    "score": 6510,
    "tags": [
      "javascript",
      "string",
      "substring",
      "contains",
      "string-matching"
    ],
    "acceptedAnswerID": 1789952,
    "user": null
  },
  {
    "soID": 1335851,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1335851",
    "title": "What does \"use strict\" do in JavaScript, and what is the reasoning behind it?",
    "body": "<p>Recently, I ran some of my JavaScript code through Crockford's <a href=\"http://www.jslint.com/\" rel=\"noreferrer\">JSLint</a>, and it gave the following error:</p>\n\n<blockquote>\n  <p>Problem at line 1 character 1: Missing \"use strict\" statement.</p>\n</blockquote>\n\n<p>Doing some searching, I realized that some people add <code>\"use strict\";</code> into their JavaScript code. Once I added the statement, the error stopped appearing. Unfortunately, Google did not reveal much of the history behind this string statement. Certainly it must have something to do with how the JavaScript is interpreted by the browser, but I have no idea what the effect would be.</p>\n\n<p>So what is <code>\"use strict\";</code> all about, what does it imply, and is it still relevant?</p>\n\n<p>Do any of the current browsers respond to the <code>\"use strict\";</code> string or is it for future use?</p>\n",
    "score": 5896,
    "tags": [
      "javascript",
      "syntax",
      "jslint",
      "use-strict"
    ],
    "acceptedAnswerID": 1335881,
    "user": {
      "soUserID": 25847,
      "name": "Mark Rogers",
      "reputation": 35454
    }
  },
  {
    "soID": 178325,
    "parentID": null,
    "url": "https://stackoverflow.com/q/178325",
    "title": "How do I check if an element is hidden in jQuery?",
    "body": "<p>It is possible to toggle the visibility of an element, using the functions <code>.hide()</code>, <code>.show()</code> or <code>.toggle()</code>.</p>\n\n<p>How would you test if an element is visible or hidden?</p>\n",
    "score": 5888,
    "tags": [
      "javascript",
      "jquery",
      "dom",
      "visibility"
    ],
    "acceptedAnswerID": 178450,
    "user": {
      "soUserID": 21709,
      "name": "Philip Morton",
      "reputation": 46915
    }
  },
  {
    "soID": 336859,
    "parentID": null,
    "url": "https://stackoverflow.com/q/336859",
    "title": "var functionName = function() {} vs function functionName() {}",
    "body": "<p>I've recently started maintaining someone else's JavaScript code. I'm fixing bugs, adding features and also trying to tidy up the code and make it more consistent.</p>\n\n<p>The previous developer uses two ways of declaring functions and I can't work out if there is a reason behind it or not.</p>\n\n<p>The two ways are:</p>\n\n<pre><code>var functionOne = function() {\n    // Some code\n};\n</code></pre>\n\n\n\n<pre><code>function functionTwo() {\n    // Some code\n}\n</code></pre>\n\n<p>What are the reasons for using these two different methods and what are the pros and cons of each? Is there anything that can be done with one method that can't be done with the other?</p>\n",
    "score": 5287,
    "tags": [
      "javascript",
      "function",
      "syntax",
      "idioms"
    ],
    "acceptedAnswerID": 336868,
    "user": {
      "soUserID": 31569,
      "name": "Richard Garside",
      "reputation": 34163
    }
  },
  {
    "soID": 359494,
    "parentID": null,
    "url": "https://stackoverflow.com/q/359494",
    "title": "Which equals operator (== vs ===) should be used in JavaScript comparisons?",
    "body": "<p>I'm using <a href=\"http://en.wikipedia.org/wiki/JSLint\" rel=\"noreferrer\">JSLint</a> to go through JavaScript, and it's returning many suggestions to replace <code>==</code> (two equals signs) with <code>===</code> (three equals signs) when doing things like comparing <code>idSele_UNVEHtype.value.length == 0</code> inside of an <code>if</code> statement.</p>\n\n<p>Is there a performance benefit to replacing <code>==</code> with <code>===</code>? </p>\n\n<p>Any performance improvement would be welcomed as many comparison operators exist.</p>\n\n<p>If no type conversion takes place, would there be a performance gain over <code>==</code>?</p>\n",
    "score": 4851,
    "tags": [
      "javascript",
      "operators",
      "equality",
      "equality-operator",
      "identity-operator"
    ],
    "acceptedAnswerID": 359509,
    "user": {
      "soUserID": 44990,
      "name": "bcasp",
      "reputation": 24621
    }
  },
  {
    "soID": 5767325,
    "parentID": null,
    "url": "https://stackoverflow.com/q/5767325",
    "title": "How do I remove a particular element from an array in JavaScript?",
    "body": "<p>I have an array of integers, which I'm using the <code>.push()</code> method to add to.</p>\n\n<p>Is there a simple way to remove a specific element from an array? The equivalent of something like <code>array.remove(int);</code>.</p>\n\n<p>I have to use <em>core</em> JavaScript - <em>no</em> frameworks are allowed.</p>\n",
    "score": 4679,
    "tags": [
      "javascript",
      "arrays"
    ],
    "acceptedAnswerID": 5767357,
    "user": {
      "soUserID": 364969,
      "name": "Walker",
      "reputation": 26009
    }
  },
  {
    "soID": 14994391,
    "parentID": null,
    "url": "https://stackoverflow.com/q/14994391",
    "title": "\"Thinking in AngularJS\" if I have a jQuery background?",
    "body": "<p>Suppose I'm familiar with developing client-side applications in <a href=\"http://jquery.com/\" rel=\"noreferrer\">jQuery</a>, but now I'd like to start using <a href=\"http://angularjs.org/\" rel=\"noreferrer\">AngularJS</a>. Can you describe the paradigm shift that is necessary? Here are a few questions that might help you frame an answer:</p>\n\n<ul>\n<li>How do I architect and design client-side web applications differently? What is the biggest difference?</li>\n<li>What should I stop doing/using; What should I start doing/using instead?</li>\n<li>Are there any server-side considerations/restrictions?</li>\n</ul>\n\n<p>I'm not looking for a detailed comparison between <code>jQuery</code> and <code>AngularJS</code>.</p>\n",
    "score": 4534,
    "tags": [
      "javascript",
      "jquery",
      "angularjs",
      "design"
    ],
    "acceptedAnswerID": 15012542,
    "user": {
      "soUserID": 215945,
      "name": "Mark Rajcok",
      "reputation": 248660
    }
  },
  {
    "soID": 208105,
    "parentID": null,
    "url": "https://stackoverflow.com/q/208105",
    "title": "How do I remove a property from a JavaScript object?",
    "body": "<p>Say I create an object as follows:</p>\n\n<pre><code>var myObject = {\n    \"ircEvent\": \"PRIVMSG\",\n    \"method\": \"newURI\",\n    \"regex\": \"^http://.*\"\n};\n</code></pre>\n\n<p>What is the best way to remove the property <code>regex</code> to end up with new <code>myObject</code> as follows?</p>\n\n<pre><code>var myObject = {\n    \"ircEvent\": \"PRIVMSG\",\n    \"method\": \"newURI\"\n};\n</code></pre>\n",
    "score": 4043,
    "tags": [
      "javascript",
      "javascript-objects",
      "object-properties"
    ],
    "acceptedAnswerID": 208106,
    "user": {
      "soUserID": 27929,
      "name": "johnstok",
      "reputation": 33585
    }
  },
  {
    "soID": 122102,
    "parentID": null,
    "url": "https://stackoverflow.com/q/122102",
    "title": "What is the most efficient way to deep clone an object in JavaScript?",
    "body": "<p>What is the most efficient way to clone a JavaScript object? I've seen <code>obj = eval(uneval(o));</code> being used, but <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/uneval\" rel=\"noreferrer\">that's non-standard and only supported by Firefox</a>.<br/><br/> I've done things like <code>obj = JSON.parse(JSON.stringify(o));</code> but question the efficiency. <br/><br/> I've also seen recursive copying functions with various flaws.\n<br />\nI'm surprised no canonical solution exists.</p>\n",
    "score": 3835,
    "tags": [
      "javascript",
      "object",
      "clone"
    ],
    "acceptedAnswerID": 122704,
    "user": null
  },
  {
    "soID": 950087,
    "parentID": null,
    "url": "https://stackoverflow.com/q/950087",
    "title": "How do I include a JavaScript file in another JavaScript file?",
    "body": "<p>Is there something in JavaScript similar to <code>@import</code> in CSS that allows you to include a JavaScript file inside another JavaScript file?</p>\n",
    "score": 3539,
    "tags": [
      "javascript",
      "node.js",
      "file",
      "import",
      "include"
    ],
    "acceptedAnswerID": 950146,
    "user": {
      "soUserID": 426996,
      "name": "Alec Smart",
      "reputation": 30835
    }
  },
  {
    "soID": 901712,
    "parentID": null,
    "url": "https://stackoverflow.com/q/901712",
    "title": "How to check whether a checkbox is checked in jQuery?",
    "body": "<p>I need to check the <code>checked</code> property of a checkbox and perform an action based on the checked property using jQuery.</p>\n\n<p>For example, if the age checkbox is checked, then I need to show a textbox to enter age, else hide the textbox.</p>\n\n<p>But the following code returns <code>false</code> by default:</p>\n\n<pre><code>if($('#isAgeSelected').attr('checked')) {\n    $(\"#txtAge\").show();\n} else {\n    $(\"#txtAge\").hide();\n}\n</code></pre>\n\n<p>How do I successfully query the <code>checked</code> property?</p>\n",
    "score": 3432,
    "tags": [
      "javascript",
      "jquery",
      "html",
      "dom",
      "checkbox"
    ],
    "acceptedAnswerID": 903152,
    "user": null
  },
  {
    "soID": 134845,
    "parentID": null,
    "url": "https://stackoverflow.com/q/134845",
    "title": "Which \"href\" value should I use for JavaScript links, \"#\" or \"javascript:void(0)\"?",
    "body": "<p>The following are two methods of building a link that has the sole purpose of running JavaScript code. Which is better, in terms of functionality, page load speed, validation purposes, etc.?</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function myJsFunc() {\r\n    alert(\"myJsFunc\");\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;a href=\"#\" onclick=\"myJsFunc();\"&gt;Run JavaScript Code&lt;/a&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>or</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function myJsFunc() {\r\n    alert(\"myJsFunc\");\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code> &lt;a href=\"javascript:void(0)\" onclick=\"myJsFunc();\"&gt;Run JavaScript Code&lt;/a&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 3322,
    "tags": [
      "javascript",
      "html",
      "performance",
      "optimization",
      "href"
    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 14220321,
    "parentID": null,
    "url": "https://stackoverflow.com/q/14220321",
    "title": "How do I return the response from an asynchronous call?",
    "body": "<p>I have a function <code>foo</code> which makes an Ajax request. How can I return the response from <code>foo</code>?</p>\n\n<p>I tried to return the value from the <code>success</code> callback as well as assigning the response to a local variable inside the function and return that one, but none of those ways actually return the response.</p>\n\n<pre><code>function foo() {\n    var result;\n\n    $.ajax({\n        url: '...',\n        success: function(response) {\n            result = response;\n            // return response; // &lt;- I tried that one as well\n        }\n    });\n\n    return result;\n}\n\nvar result = foo(); // It always ends up being `undefined`.\n</code></pre>\n",
    "score": 3250,
    "tags": [
      "javascript",
      "ajax",
      "asynchronous",
      "ecmascript-6",
      "ecmascript-2017"
    ],
    "acceptedAnswerID": 14220323,
    "user": {
      "soUserID": 218196,
      "name": "Felix Kling",
      "reputation": 450820
    }
  },
  {
    "soID": 9329446,
    "parentID": null,
    "url": "https://stackoverflow.com/q/9329446",
    "title": "For-each over an array in JavaScript?",
    "body": "<p>How can I loop through all the entries in an array using JavaScript?</p>\n\n<p>I thought it was something like this:</p>\n\n<pre><code>forEach(instance in theArray)\n</code></pre>\n\n<p>Where <code>theArray</code> is my array, but this seems to be incorrect.</p>\n",
    "score": 3177,
    "tags": [
      "javascript",
      "arrays",
      "loops",
      "foreach",
      "iteration"
    ],
    "acceptedAnswerID": 9329476,
    "user": {
      "soUserID": 1140876,
      "name": "Dante1986",
      "reputation": 16566
    }
  },
  {
    "soID": 426258,
    "parentID": null,
    "url": "https://stackoverflow.com/q/426258",
    "title": "Setting \"checked\" for a checkbox with jQuery?",
    "body": "<p>I'd like to do something like this to tick a <code>checkbox</code> using <strong>jQuery</strong>:</p>\n\n<pre><code>$(\".myCheckBox\").checked(true);\n</code></pre>\n\n<p>or </p>\n\n<pre><code>$(\".myCheckBox\").selected(true);\n</code></pre>\n\n<p>Does such a thing exist?</p>\n",
    "score": 3164,
    "tags": [
      "javascript",
      "jquery",
      "checkbox",
      "selected",
      "checked"
    ],
    "acceptedAnswerID": 426276,
    "user": {
      "soUserID": 18107,
      "name": "tpower",
      "reputation": 20279
    }
  },
  {
    "soID": 2669690,
    "parentID": null,
    "url": "https://stackoverflow.com/q/2669690",
    "title": "Why does Google prepend while(1); to their JSON responses?",
    "body": "<p>Why does Google prepend <code>while(1);</code> to their (private) JSON responses?</p>\n\n<p>For example, here's a response while turning a calendar on and off in <a href=\"http://en.wikipedia.org/wiki/Google_Calendar\" rel=\"noreferrer\">Google Calendar</a>:</p>\n\n<pre><code>while(1);[['u',[['smsSentFlag','false'],['hideInvitations','false'],\n  ['remindOnRespondedEventsOnly','true'],\n  ['hideInvitations_remindOnRespondedEventsOnly','false_true'],\n  ['Calendar ID stripped for privacy','false'],['smsVerifiedFlag','true']]]]\n</code></pre>\n\n<p>I would assume this is to prevent people from doing an <code>eval()</code> on it, but all you'd really have to do is replace the <code>while</code> and then you'd be set. I would assume the eval prevention is to make sure people write safe JSON parsing code.</p>\n\n<p>I've seen this used in a couple of other places, too, but a lot more so with Google (Mail, Calendar, Contacts, etc.) Strangely enough, <a href=\"http://en.wikipedia.org/wiki/Google_Docs\" rel=\"noreferrer\">Google Docs</a> starts with <code>&amp;&amp;&amp;START&amp;&amp;&amp;</code> instead, and Google Contacts seems to start with <code>while(1); &amp;&amp;&amp;START&amp;&amp;&amp;</code>.</p>\n\n<p>What's going on here?</p>\n",
    "score": 3080,
    "tags": [
      "javascript",
      "json",
      "ajax",
      "security"
    ],
    "acceptedAnswerID": 2669766,
    "user": {
      "soUserID": 151495,
      "name": "Andrew Koester",
      "reputation": 17526
    }
  },
  {
    "soID": 221294,
    "parentID": null,
    "url": "https://stackoverflow.com/q/221294",
    "title": "How do you get a timestamp in JavaScript?",
    "body": "<p>How can I get a timestamp in JavaScript?</p>\n\n<p>Something similar to Unix's timestamp, that is, a single number that represents the current time and date. Either as a number or a string.</p>\n",
    "score": 2884,
    "tags": [
      "javascript",
      "date",
      "datetime",
      "timestamp",
      "unix-timestamp"
    ],
    "acceptedAnswerID": 221297,
    "user": {
      "soUserID": 6068,
      "name": "Pablo",
      "reputation": 91556
    }
  },
  {
    "soID": 237104,
    "parentID": null,
    "url": "https://stackoverflow.com/q/237104",
    "title": "How do I check if an array includes an object in JavaScript?",
    "body": "<p>What is the most concise and efficient way to find out if a JavaScript array contains an object?</p>\n\n<p>This is the only way I know to do it:</p>\n\n<pre><code>function contains(a, obj) {\n    for (var i = 0; i &lt; a.length; i++) {\n        if (a[i] === obj) {\n            return true;\n        }\n    }\n    return false;\n}\n</code></pre>\n\n<p>Is there a better and more concise way to accomplish this?</p>\n\n<p>This is very closely related to Stack Overflow question <em><a href=\"https://stackoverflow.com/questions/143847/best-way-to-find-an-item-in-a-javascript-array\">Best way to find an item in a JavaScript Array?</a></em> which addresses finding objects in an array using <code>indexOf</code>.</p>\n",
    "score": 2761,
    "tags": [
      "javascript",
      "arrays",
      "browser"
    ],
    "acceptedAnswerID": 1473742,
    "user": {
      "soUserID": 208,
      "name": "brad",
      "reputation": 24923
    }
  },
  {
    "soID": 901115,
    "parentID": null,
    "url": "https://stackoverflow.com/q/901115",
    "title": "How can I get query string values in JavaScript?",
    "body": "<p>Is there a plugin-less way of retrieving <a href=\"http://en.wikipedia.org/wiki/Query_string\" rel=\"nofollow noreferrer\">query string</a> values via jQuery (or without)? </p>\n\n<p>If so, how? If not, is there a plugin which can do so?</p>\n",
    "score": 2706,
    "tags": [
      "javascript",
      "url",
      "plugins",
      "query-string"
    ],
    "acceptedAnswerID": 901144,
    "user": null
  },
  {
    "soID": 105034,
    "parentID": null,
    "url": "https://stackoverflow.com/q/105034",
    "title": "Create GUID / UUID in JavaScript?",
    "body": "<p>I'm trying to create globally-unique identifiers in JavaScript.  I'm not sure what routines are available on all browsers, how \"random\" and seeded the built-in random number generator is, etc..</p>\n\n<p>The GUID / UUID should be at least 32 characters and should stay in the ASCII range to avoid trouble when passing them around.</p>\n",
    "score": 2689,
    "tags": [
      "javascript",
      "guid",
      "uuid"
    ],
    "acceptedAnswerID": 105074,
    "user": null
  },
  {
    "soID": 46155,
    "parentID": null,
    "url": "https://stackoverflow.com/q/46155",
    "title": "How to validate email address in JavaScript?",
    "body": "<p>How can an email address be validated in JavaScript?</p>\n",
    "score": 2577,
    "tags": [
      "javascript",
      "regex",
      "validation",
      "email",
      "email-validation"
    ],
    "acceptedAnswerID": 46181,
    "user": null
  },
  {
    "soID": 1144783,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1144783",
    "title": "How to replace all occurrences of a string in JavaScript?",
    "body": "<p>I have this string:</p>\n\n<pre><code>\"Test abc test test abc test test test abc test test abc\"\n</code></pre>\n\n<p>Doing</p>\n\n<pre><code>str = str.replace('abc', '');\n</code></pre>\n\n<p>seems to only remove the first occurrence of <code>abc</code> in the string above. How can I replace <strong>all</strong> occurrences of it?</p>\n",
    "score": 2488,
    "tags": [
      "javascript",
      "replace"
    ],
    "acceptedAnswerID": 17606289,
    "user": {
      "soUserID": 49153,
      "name": "Click Upvote",
      "reputation": 78588
    }
  },
  {
    "soID": 1986896,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1986896",
    "title": "What is the difference between call and apply?",
    "body": "<p>What is the difference between using call and apply to invoke a function?</p>\n\n<pre><code>var func = function(){\n  alert('hello!');\n};\n</code></pre>\n\n<p><code>func.apply();</code></p>\n\n<p>vs</p>\n\n<pre><code>func.call();\n</code></pre>\n\n<p>Are there performance differences between the two methods? When is it best to use call over apply and vice versa?</p>\n",
    "score": 2457,
    "tags": [
      "javascript",
      "performance",
      "function",
      "dynamic"
    ],
    "acceptedAnswerID": 1986909,
    "user": {
      "soUserID": 3041,
      "name": "John Duff",
      "reputation": 14750
    }
  },
  {
    "soID": 1026069,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1026069",
    "title": "How do I make the first letter of a string uppercase in JavaScript?",
    "body": "<p>How do I make the first letter of a string uppercase, but not change the case of any of the other letters?</p>\n\n<p>For example:</p>\n\n<ul>\n<li><code>\"this is a test\"</code> -> <code>\"This is a test\"</code></li>\n<li><code>\"the Eiffel Tower\"</code> -> <code>\"The Eiffel Tower\"</code></li>\n<li><code>\"/index.html\"</code> -> <code>\"/index.html\"</code></li>\n</ul>\n",
    "score": 2457,
    "tags": [
      "javascript",
      "string",
      "capitalize",
      "letter"
    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 126778,
      "name": "Robert Wills",
      "reputation": 12528
    }
  },
  {
    "soID": 351409,
    "parentID": null,
    "url": "https://stackoverflow.com/q/351409",
    "title": "How to append something to an array?",
    "body": "<p>How do I append an object(such as a String or number) to an array in JavaScript?</p>\n",
    "score": 2410,
    "tags": [
      "javascript",
      "arrays",
      "append"
    ],
    "acceptedAnswerID": 351421,
    "user": null
  },
  {
    "soID": 1357118,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1357118",
    "title": "event.preventDefault() vs. return false",
    "body": "<p>When I want to prevent other event handlers from executing after a certain event is fired, I can use one of two techniques. I'll use jQuery in the examples, but this applies to plain-JS as well:</p>\n\n<h3>1. <code>event.preventDefault()</code></h3>\n\n<pre><code>$('a').click(function (e) {\n    // custom handling here\n    e.preventDefault();\n});\n</code></pre>\n\n<h3>2. <code>return false</code></h3>\n\n<pre><code>$('a').click(function () {\n    // custom handling here\n    return false;\n});\n</code></pre>\n\n<p>Is there any significant difference between those two methods of stopping event propagation?</p>\n\n<p>For me, <code>return false;</code> is simpler, shorter and probably less error prone than executing a method. With the method, you have to remember about correct casing, parenthesis, etc. </p>\n\n<p>Also, I have to define the first parameter in callback to be able to call the method. Perhaps, there are some reasons why I should avoid doing it like this and use <code>preventDefault</code> instead? What's the better way?</p>\n",
    "score": 2364,
    "tags": [
      "javascript",
      "jquery",
      "javascript-events",
      "event-handling",
      "event-propagation"
    ],
    "acceptedAnswerID": 1357151,
    "user": {
      "soUserID": 137467,
      "name": "RaYell",
      "reputation": 39971
    }
  },
  {
    "soID": 166221,
    "parentID": null,
    "url": "https://stackoverflow.com/q/166221",
    "title": "How can I upload files asynchronously?",
    "body": "<p>I would like to upload a file asynchronously with jQuery. This is my HTML:</p>\n\n<pre><code>&lt;span&gt;File&lt;/span&gt;\n&lt;input type=\"file\" id=\"file\" name=\"file\" size=\"10\"/&gt;\n&lt;input id=\"uploadbutton\" type=\"button\" value=\"Upload\"/&gt;\n</code></pre>\n\n<p>And here my <code>Jquery</code> code:</p>\n\n<pre><code>$(document).ready(function () {\n    $(\"#uploadbutton\").click(function () {\n        var filename = $(\"#file\").val();\n\n        $.ajax({\n            type: \"POST\",\n            url: \"addFile.do\",\n            enctype: 'multipart/form-data',\n            data: {\n                file: filename\n            },\n            success: function () {\n                alert(\"Data Uploaded: \");\n            }\n        });\n    });\n});\n</code></pre>\n\n<p>Instead of the file being uploaded, I am only getting the filename. What can I do to fix this problem?</p>\n\n<h3>Current Solution</h3>\n\n<p>I am using the <a href=\"http://malsup.com/jquery/form/#code-samples\" rel=\"noreferrer\">jQuery Form Plugin</a> to upload files.</p>\n",
    "score": 2334,
    "tags": [
      "javascript",
      "jquery",
      "ajax",
      "asynchronous",
      "upload"
    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2138,
      "name": "Sergio del Amo",
      "reputation": 27203
    }
  },
  {
    "soID": 762011,
    "parentID": null,
    "url": "https://stackoverflow.com/q/762011",
    "title": "What's the difference between using \"let\" and \"var\" to declare a variable?",
    "body": "<p>ECMAScript 6 introduced <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\" rel=\"noreferrer\">the <code>let</code> statement</a>. I've heard it described as a \"local\" variable, but I'm still not quite sure how it behaves differently than the <code>var</code> keyword.</p>\n\n<p>What are the differences? When should <code>let</code> be used over <code>var</code>?</p>\n",
    "score": 2274,
    "tags": [
      "javascript",
      "scope",
      "ecmascript-6",
      "var",
      "let"
    ],
    "acceptedAnswerID": 11444416,
    "user": {
      "soUserID": 12983,
      "name": "TM.",
      "reputation": 37936
    }
  },
  {
    "soID": 400212,
    "parentID": null,
    "url": "https://stackoverflow.com/q/400212",
    "title": "How do I copy to the clipboard in JavaScript?",
    "body": "<p>What is the best way to copy text to the clipboard? (multi-browser)</p>\n\n<p>I have tried: </p>\n\n<pre><code>function copyToClipboard(text) {\n    if (window.clipboardData) { // Internet Explorer\n        window.clipboardData.setData(\"Text\", text);\n    } else {  \n        unsafeWindow.netscape.security.PrivilegeManager.enablePrivilege(\"UniversalXPConnect\");  \n        const clipboardHelper = Components.classes[\"@mozilla.org/widget/clipboardhelper;1\"].getService(Components.interfaces.nsIClipboardHelper);  \n        clipboardHelper.copyString(text);\n    }\n}\n</code></pre>\n\n<p>but in Internet Explorer it gives a syntax error. In Firefox, it says <code>unsafeWindow is not defined</code>.</p>\n\n<p><strong>Edit</strong> A nice trick without flash: <a href=\"https://stackoverflow.com/questions/17527870/how-does-trello-access-the-users-clipboard\">How does Trello access the user&#39;s clipboard?</a></p>\n",
    "score": 2249,
    "tags": [
      "javascript",
      "clipboard",
      "copy-paste"
    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4264,
      "name": "Santiago Corredoira",
      "reputation": 13153
    }
  },
  {
    "soID": 5062614,
    "parentID": null,
    "url": "https://stackoverflow.com/q/5062614",
    "title": "How to decide when to use Node.js?",
    "body": "<p>I am new to this kind of stuff, but lately I've been hearing a lot about how good <a href=\"http://en.wikipedia.org/wiki/Node.js\" rel=\"nofollow noreferrer\">Node.js</a> is. Considering how much I love working with jQuery and JavaScript in general, I can't help but wonder how to decide when to use Node.js. The web application I have in mind is something like <a href=\"https://en.wikipedia.org/wiki/Bitly\" rel=\"nofollow noreferrer\">Bitly</a> - takes some content, archives it. </p>\n\n<p>From all the homework I have been doing in the last few days, I obtained the following information. Node.js </p>\n\n<ul>\n<li>is a command-line tool that can be run as a regular web server and lets one run JavaScript programs</li>\n<li>utilizes the great <a href=\"http://en.wikipedia.org/wiki/V8_%28JavaScript_engine%29\" rel=\"nofollow noreferrer\">V8 JavaScript engine</a></li>\n<li>is very good when you need to do several things at the same time</li>\n<li>is event-based so all the wonderful <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\" rel=\"nofollow noreferrer\">Ajax</a>-like stuff can be done on the server side</li>\n<li>lets us share code between the browser and the backend</li>\n<li>lets us talk with MySQL</li>\n</ul>\n\n<p>Some of the sources that I have come across are:</p>\n\n<ul>\n<li><a href=\"http://www.stoimen.com/blog/2010/11/16/diving-into-node-js-introduction-and-installation/\" rel=\"nofollow noreferrer\">Diving into Node.js – Introduction and Installation</a></li>\n<li><a href=\"http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb\" rel=\"nofollow noreferrer\">Understanding NodeJS</a></li>\n<li><a href=\"http://blog.osbutler.com/categories/node-by-example/?page=3\" rel=\"nofollow noreferrer\">Node by Example</a> (<a href=\"http://archive.is/exhaR\" rel=\"nofollow noreferrer\">Archive.is</a>)</li>\n<li><a href=\"http://dailyjs.com/2010/11/01/node-tutorial/\" rel=\"nofollow noreferrer\">Let’s Make a Web App: NodePad</a></li>\n</ul>\n\n<p>Considering that Node.js can be run almost out-of-the-box on <a href=\"http://en.wikipedia.org/wiki/Amazon_Elastic_Compute_Cloud\" rel=\"nofollow noreferrer\">Amazon's EC2</a> instances, I am trying to understand what type of problems require Node.js as opposed to any of the mighty kings out there like <a href=\"http://en.wikipedia.org/wiki/PHP\" rel=\"nofollow noreferrer\">PHP</a>, <a href=\"http://en.wikipedia.org/wiki/Python_%28programming_language%29\" rel=\"nofollow noreferrer\">Python</a> and <a href=\"http://en.wikipedia.org/wiki/Ruby_%28programming_language%29\" rel=\"nofollow noreferrer\">Ruby</a>. I understand that it really depends on the expertise one has on a language, but my question falls more into the general category of: When to use a particular framework and what type of problems is it particularly suited for?</p>\n",
    "score": 2201,
    "tags": [
      "javascript",
      "design",
      "web-applications",
      "node.js"
    ],
    "acceptedAnswerID": 5062670,
    "user": {
      "soUserID": 184046,
      "name": "Legend",
      "reputation": 49361
    }
  },
  {
    "soID": 1232040,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1232040",
    "title": "How do I empty an array in JavaScript?",
    "body": "<p>Is there a way to empty an array and if so possibly with <code>.remove()</code>?</p>\n\n<p>For instance, </p>\n\n<pre><code>A = [1,2,3,4];\n</code></pre>\n\n<p>How can I empty that?</p>\n",
    "score": 2174,
    "tags": [
      "javascript",
      "arrays"
    ],
    "acceptedAnswerID": 1232046,
    "user": {
      "soUserID": 149738,
      "name": "amir",
      "reputation": 13431
    }
  },
  {
    "soID": 27509,
    "parentID": null,
    "url": "https://stackoverflow.com/q/27509",
    "title": "Detecting an undefined object property",
    "body": "<p>What's the best way of checking if an object property in JavaScript is undefined?</p>\n",
    "score": 2150,
    "tags": [
      "javascript",
      "object",
      "undefined"
    ],
    "acceptedAnswerID": 416327,
    "user": {
      "soUserID": 797,
      "name": "Matt Sheppard",
      "reputation": 59441
    }
  },
  {
    "soID": 23569441,
    "parentID": null,
    "url": "https://stackoverflow.com/q/23569441",
    "title": "Is it possible to apply CSS to half of a character?",
    "body": "<p><strong>What I am looking for:</strong></p>\n\n<p>A way to style one <strong>HALF</strong> of a character. (In this case, half the letter being transparent)</p>\n\n<p><strong>What I have currently searched for and tried (With no luck):</strong></p>\n\n<ul>\n<li>Methods for styling half of a character/letter</li>\n<li>Styling part of a character with CSS or JavaScript</li>\n<li>Apply CSS to 50% of a character</li>\n</ul>\n\n<p>Below is an example of what I am trying to obtain.</p>\n\n<p><img src=\"https://i.stack.imgur.com/SaH8v.png\" alt=\"x\"></p>\n\n<p>Does a CSS or JavaScript solution exist for this, or am I going to have to resort to images? I would prefer not to go the image route as this text will end up being generated dynamically.</p>\n\n<hr>\n\n<p><strong>UPDATE:</strong></p>\n\n<p>Since many have asked why I would ever want to style half of a character, this is why. My city had recently spent $250,000 to define a new \"brand\" for itself. This <strong><a href=\"https://web.archive.org/web/20140428135239/http://halifaxdefined.ca/img/halifax_logo_new.png\" rel=\"noreferrer\">logo</a></strong> is what they came up with. Many people have complained about the simplicity and lack of creativity and continue to do so. My goal was to come up with this <strong><a href=\"http://gameovercancer.ca/tests/brandgenerator/\" rel=\"noreferrer\">website</a></strong> as a joke. Type in 'Halifax' and you will see what I mean. :)</p>\n",
    "score": 2137,
    "tags": [
      "javascript",
      "html",
      "css",
      "styling"
    ],
    "acceptedAnswerID": 23569891,
    "user": {
      "soUserID": 3009513,
      "name": "Mathew MacLean",
      "reputation": 8779
    }
  },
  {
    "soID": 3010840,
    "parentID": null,
    "url": "https://stackoverflow.com/q/3010840",
    "title": "Loop through an array in JavaScript",
    "body": "<p>In Java you can use a <code>for</code> loop to traverse objects in an array as follows:</p>\n\n<pre><code>String[] myStringArray = {\"Hello\", \"World\"};\nfor (String s : myStringArray)\n{\n    // Do something\n}\n</code></pre>\n\n<p>Can you do the same in JavaScript?</p>\n",
    "score": 1980,
    "tags": [
      "javascript",
      "arrays",
      "for-loop"
    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 304725,
      "name": "Mark Szymanski",
      "reputation": 15953
    }
  },
  {
    "soID": 596351,
    "parentID": null,
    "url": "https://stackoverflow.com/q/596351",
    "title": "How can I know which radio button is selected via jQuery?",
    "body": "<p>I have two radio buttons and want to post the value of the selected one.\nHow can I get the value with jQuery?</p>\n\n<p>I can get all of them like this:</p>\n\n<pre><code>$(\"form :radio\")\n</code></pre>\n\n<p>How do I know which one is selected?</p>\n",
    "score": 1979,
    "tags": [
      "javascript",
      "jquery",
      "html",
      "jquery-selectors",
      "radio-button"
    ],
    "acceptedAnswerID": 596369,
    "user": {
      "soUserID": 1782,
      "name": "juan",
      "reputation": 32364
    }
  },
  {
    "soID": 18082,
    "parentID": null,
    "url": "https://stackoverflow.com/q/18082",
    "title": "Validate decimal numbers in JavaScript - IsNumeric()",
    "body": "<p>What's the cleanest, most effective way to validate decimal numbers in JavaScript?</p>\n\n<p>Bonus points for:</p>\n\n<ol>\n<li>Clarity. Solution should be clean and simple.</li>\n<li>Cross-platform.</li>\n</ol>\n\n<p>Test cases:</p>\n\n<pre><code>01. IsNumeric('-1')      =&gt; true\n02. IsNumeric('-1.5')    =&gt; true\n03. IsNumeric('0')       =&gt; true\n04. IsNumeric('0.42')    =&gt; true\n05. IsNumeric('.42')     =&gt; true\n06. IsNumeric('99,999')  =&gt; false\n07. IsNumeric('0x89f')   =&gt; false\n08. IsNumeric('#abcdef') =&gt; false\n09. IsNumeric('1.2.3')   =&gt; false\n10. IsNumeric('')        =&gt; false\n11. IsNumeric('blah')    =&gt; false\n</code></pre>\n",
    "score": 1967,
    "tags": [
      "javascript",
      "validation",
      "numbers"
    ],
    "acceptedAnswerID": 1830844,
    "user": null
  },
  {
    "soID": 31044,
    "parentID": null,
    "url": "https://stackoverflow.com/q/31044",
    "title": "Is there an \"exists\" function for jQuery?",
    "body": "<p>How can I check the existence of an element in jQuery?</p>\n\n<p>The current code that I have is this:</p>\n\n<pre><code>if ($(selector).length &gt; 0) {\n    // Do something\n}\n</code></pre>\n\n<p>Is there is a more elegant way to approach this? Perhaps a plugin or a function?</p>\n",
    "score": 1959,
    "tags": [
      "javascript",
      "jquery"
    ],
    "acceptedAnswerID": 31047,
    "user": {
      "soUserID": 302,
      "name": "Jake McGraw",
      "reputation": 28182
    }
  },
  {
    "soID": 195951,
    "parentID": null,
    "url": "https://stackoverflow.com/q/195951",
    "title": "Change an element's class with JavaScript",
    "body": "<p>How can I change a class of an HTML element in response to an <code>onClick</code> event using JavaScript?</p>\n",
    "score": 1946,
    "tags": [
      "javascript",
      "html",
      "dom"
    ],
    "acceptedAnswerID": 196038,
    "user": {
      "soUserID": 4998,
      "name": "Nathan Smith",
      "reputation": 11309
    }
  },
  {
    "soID": 728360,
    "parentID": null,
    "url": "https://stackoverflow.com/q/728360",
    "title": "How do I correctly clone a JavaScript object?",
    "body": "<p>I have an object, <code>x</code>. I'd like to copy it as object <code>y</code>, such that changes to <code>y</code> do not modify <code>x</code>. I realized that copying objects derived from built-in JavaScript objects will result in extra, unwanted properties. This isn't a problem, since I'm copying one of my own, literal-constructed objects.</p>\n\n<p>How do I correctly clone a JavaScript object?</p>\n",
    "score": 1919,
    "tags": [
      "javascript"
    ],
    "acceptedAnswerID": 728694,
    "user": null
  },
  {
    "soID": 332872,
    "parentID": null,
    "url": "https://stackoverflow.com/q/332872",
    "title": "Encode URL in JavaScript?",
    "body": "<p>How do you safely encode a URL using JavaScript such that it can be put into a GET string?</p>\n\n<pre><code>var myUrl = \"http://example.com/index.html?param=1&amp;anotherParam=2\";\nvar myOtherUrl = \"http://example.com/index.html?url=\" + myUrl;\n</code></pre>\n\n<p>I assume that you need to encode the <code>myUrl</code> variable on that second line?</p>\n",
    "score": 1916,
    "tags": [
      "javascript",
      "url",
      "encoding"
    ],
    "acceptedAnswerID": 332888,
    "user": {
      "soUserID": 9021,
      "name": "nickf",
      "reputation": 321870
    }
  },
  {
    "soID": 750486,
    "parentID": null,
    "url": "https://stackoverflow.com/q/750486",
    "title": "JavaScript closure inside loops – simple practical example",
    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var funcs = [];\r\nfor (var i = 0; i &lt; 3; i++) {      // let's create 3 functions\r\n  funcs[i] = function() {          // and store them in funcs\r\n    console.log(\"My value: \" + i); // each should log its value.\r\n  };\r\n}\r\nfor (var j = 0; j &lt; 3; j++) {\r\n  funcs[j]();                      // and now let's run each one to see\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>It outputs this:</p>\n\n<blockquote>\n  <p>My value: 3<br>\n  My value: 3<br>\n  My value: 3</p>\n</blockquote>\n\n<p>Whereas I'd like it to output:</p>\n\n<blockquote>\n  <p>My value: 0<br>\n  My value: 1<br>\n  My value: 2</p>\n</blockquote>\n\n<p>What's the solution to this basic problem?</p>\n",
    "score": 1899,
    "tags": [
      "javascript",
      "loops",
      "closures"
    ],
    "acceptedAnswerID": 750506,
    "user": {
      "soUserID": 9021,
      "name": "nickf",
      "reputation": 321870
    }
  },
  {
    "soID": 306583,
    "parentID": null,
    "url": "https://stackoverflow.com/q/306583",
    "title": "How to get the children of the $(this) selector?",
    "body": "<p>I have a layout similar to this:</p>\n\n<pre><code>&lt;div id=\"...\"&gt;&lt;img src=\"...\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>and would like to use a jQuery selector to select the child <code>img</code> inside the <code>div</code> on click.</p>\n\n<p>To get the <code>div</code>, I've got this selector:</p>\n\n<pre><code>$(this)\n</code></pre>\n\n<p>How can I get the child <code>img</code> using a selector?</p>\n",
    "score": 1878,
    "tags": [
      "javascript",
      "jquery",
      "jquery-selectors",
      "this"
    ],
    "acceptedAnswerID": 306904,
    "user": {
      "soUserID": 16974,
      "name": "Alex",
      "reputation": 11202
    }
  },
  {
    "soID": 1098040,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1098040",
    "title": "Checking if a key exists in a JavaScript object?",
    "body": "<p>How do I check if a particular key exists in a JavaScript object or array?</p>\n\n<p>If a key doesn't exist, and I try to access it, will it return false? Or throw an error?</p>\n",
    "score": 1847,
    "tags": [
      "javascript",
      "arrays",
      "object"
    ],
    "acceptedAnswerID": 1098955,
    "user": {
      "soUserID": 79,
      "name": "Adam Ernst",
      "reputation": 15356
    }
  },
  {
    "soID": 784929,
    "parentID": null,
    "url": "https://stackoverflow.com/q/784929",
    "title": "What is the !! (not not) operator in JavaScript?",
    "body": "<p>I saw some code that seems to use an operator I don't recognize, in the form of two exclamation points, like so: <code>!!</code>. Can someone please tell me what this operator does?</p>\n\n<p>The context in which I saw this was,</p>\n\n<pre><code>this.vertical = vertical !== undefined ? !!vertical : this.vertical;\n</code></pre>\n",
    "score": 1812,
    "tags": [
      "javascript",
      "operators"
    ],
    "acceptedAnswerID": 784946,
    "user": {
      "soUserID": 59107,
      "name": "Hexagon Theory",
      "reputation": 10358
    }
  },
  {
    "soID": 171027,
    "parentID": null,
    "url": "https://stackoverflow.com/q/171027",
    "title": "Add table row in jQuery",
    "body": "<p>What is the best method in jQuery to add an additional row to a table as the last row?</p>\n\n<p>Is this acceptable?</p>\n\n<pre><code>$('#myTable').append('&lt;tr&gt;&lt;td&gt;my data&lt;/td&gt;&lt;td&gt;more data&lt;/td&gt;&lt;/tr&gt;');\n</code></pre>\n\n<p>Are there limitations to what you can add to a table like this (such as inputs, selects, number of rows)?</p>\n",
    "score": 1811,
    "tags": [
      "javascript",
      "jquery",
      "html-table"
    ],
    "acceptedAnswerID": 171049,
    "user": {
      "soUserID": 5441,
      "name": "Darryl Hein",
      "reputation": 59360
    }
  },
  {
    "soID": 5874652,
    "parentID": null,
    "url": "https://stackoverflow.com/q/5874652",
    "title": ".prop() vs .attr()",
    "body": "<p>So <a href=\"http://api.jquery.com/category/version/1.6/\" rel=\"noreferrer\">jQuery 1.6</a> has the new function <a href=\"http://api.jquery.com/prop/\" rel=\"noreferrer\"><code>prop()</code></a>.</p>\n\n<pre><code>$(selector).click(function(){\n    //instead of:\n    this.getAttribute('style');\n    //do i use:\n    $(this).prop('style');\n    //or:\n    $(this).attr('style');\n})\n</code></pre>\n\n<p>or in this case do they do the same thing?</p>\n\n<p>And if I <em>do</em> have to switch to using <code>prop()</code>, all the old <code>attr()</code> calls will break if i switch to 1.6?</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>selector = '#id'\r\n\r\n$(selector).click(function() {\r\n    //instead of:\r\n    var getAtt = this.getAttribute('style');\r\n    //do i use:\r\n    var thisProp = $(this).prop('style');\r\n    //or:\r\n    var thisAttr = $(this).attr('style');\r\n\r\n    console.log(getAtt, thisProp, thisAttr);\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.6.0/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;div id='id' style=\"color: red;background: orange;\"&gt;test&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>(see also this fiddle: <a href=\"http://jsfiddle.net/maniator/JpUF2/\" rel=\"noreferrer\">http://jsfiddle.net/maniator/JpUF2/</a>)</p>\n\n<p>The console logs the <code>getAttribute</code> as a string, and the <code>attr</code> as a string, but the <code>prop</code> as a <code>CSSStyleDeclaration</code>, Why? And how does that affect my coding in the future?</p>\n",
    "score": 1807,
    "tags": [
      "javascript",
      "jquery",
      "dom",
      "attr",
      "prop"
    ],
    "acceptedAnswerID": 5876747,
    "user": {
      "soUserID": 561731,
      "name": "Neal",
      "reputation": 100825
    }
  },
  {
    "soID": 154059,
    "parentID": null,
    "url": "https://stackoverflow.com/q/154059",
    "title": "How do you check for an empty string in JavaScript?",
    "body": "<p>I saw this <a href=\"https://stackoverflow.com/questions/10230/checking-for-string-contents-string-length-vs-empty-string\">thread</a>, but I didn't see a JavaScript specific example. Is there a simple <code>string.Empty</code> available in JavaScript, or is it just a case of checking for <code>\"\"</code>?</p>\n",
    "score": 1805,
    "tags": [
      "javascript",
      "null",
      "is-empty"
    ],
    "acceptedAnswerID": 154068,
    "user": {
      "soUserID": 5619,
      "name": "casademora",
      "reputation": 25623
    }
  },
  {
    "soID": 2010892,
    "parentID": null,
    "url": "https://stackoverflow.com/q/2010892",
    "title": "Storing Objects in HTML5 localStorage",
    "body": "<p>I'd like to store a JavaScript object in HTML5 <code>localStorage</code>, but my object is apparently being converted to a string.</p>\n\n<p>I can store and retrieve primitive JavaScript types and arrays using <code>localStorage</code>, but objects don't seem to work.  Should they? </p>\n\n<p>Here's my code:</p>\n\n<pre><code>var testObject = { 'one': 1, 'two': 2, 'three': 3 };\nconsole.log('typeof testObject: ' + typeof testObject);\nconsole.log('testObject properties:');\nfor (var prop in testObject) {\n    console.log('  ' + prop + ': ' + testObject[prop]);\n}\n\n// Put the object into storage\nlocalStorage.setItem('testObject', testObject);\n\n// Retrieve the object from storage\nvar retrievedObject = localStorage.getItem('testObject');\n\nconsole.log('typeof retrievedObject: ' + typeof retrievedObject);\nconsole.log('Value of retrievedObject: ' + retrievedObject);\n</code></pre>\n\n<p>The console output is</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>typeof testObject: object\ntestObject properties:\n  one: 1\n  two: 2\n  three: 3\ntypeof retrievedObject: string\nValue of retrievedObject: [object Object]\n</code></pre>\n\n<p>It looks to me like the <code>setItem</code> method is converting the input to a string before storing it.</p>\n\n<p>I see this behavior in Safari, Chrome, and Firefox, so I assume it's my misunderstanding of the <a href=\"http://www.w3.org/TR/webstorage/\" rel=\"noreferrer\">HTML5 Web Storage</a> spec, not a browser-specific bug or limitation.</p>\n\n<p>I've tried to make sense of the <em>structured clone</em> algorithm described in <a href=\"http://www.w3.org/TR/html5/infrastructure.html\" rel=\"noreferrer\">http://www.w3.org/TR/html5/infrastructure.html</a>.  I don't fully understand what it's saying, but maybe my problem has to do with my object's properties not being enumerable (???)  </p>\n\n<p>Is there an easy workaround?</p>\n\n<hr>\n\n<p>Update: The W3C eventually changed their minds about the structured-clone specification, and decided to change the spec to match the implementations.  See <a href=\"https://www.w3.org/Bugs/Public/show_bug.cgi?id=12111\" rel=\"noreferrer\">https://www.w3.org/Bugs/Public/show_bug.cgi?id=12111</a>. So this question is no longer 100% valid, but the answers still may be of interest.</p>\n",
    "score": 1759,
    "tags": [
      "javascript",
      "html5",
      "local-storage"
    ],
    "acceptedAnswerID": 2010948,
    "user": {
      "soUserID": 1175,
      "name": "Kristopher Johnson",
      "reputation": 46537
    }
  },
  {
    "soID": 4775722,
    "parentID": null,
    "url": "https://stackoverflow.com/q/4775722",
    "title": "Check if object is array?",
    "body": "<p>I'm trying to write a function that either accepts a list of strings, or a single string. If it's a string, then I want to convert it to an array with just the one item. Then I can loop over it without fear of an error. </p>\n\n<p>So how do I check if the variable is an array?</p>\n\n<hr>\n\n<p>I've rounded up the various solutions below and created a <a href=\"http://jsperf.com/js-isarray-comparison\" rel=\"noreferrer\">jsperf test</a>.</p>\n",
    "score": 1754,
    "tags": [
      "javascript",
      "arrays"
    ],
    "acceptedAnswerID": 4775737,
    "user": {
      "soUserID": 65387,
      "name": "mpen",
      "reputation": 98682
    }
  },
  {
    "soID": 5404839,
    "parentID": null,
    "url": "https://stackoverflow.com/q/5404839",
    "title": "How can I refresh a page with jQuery?",
    "body": "<p>How can I refresh a page with jQuery?</p>\n",
    "score": 1727,
    "tags": [
      "javascript",
      "jquery",
      "refresh",
      "reload"
    ],
    "acceptedAnswerID": 5404869,
    "user": {
      "soUserID": 505762,
      "name": "luca",
      "reputation": 12116
    }
  },
  {
    "soID": 894860,
    "parentID": null,
    "url": "https://stackoverflow.com/q/894860",
    "title": "Set a default parameter value for a JavaScript function",
    "body": "<p>I would like a JavaScript function to have optional arguments which I set a default on, which gets used if the value isn't defined.  In Ruby you can do it like this:</p>\n\n<pre><code>def read_file(file, delete_after = false)\n  # code\nend\n</code></pre>\n\n<p>Does this work in JavaScript?</p>\n\n<pre><code>function read_file(file, delete_after = false) {\n  // Code\n}\n</code></pre>\n",
    "score": 1722,
    "tags": [
      "javascript",
      "function",
      "parameters",
      "default-parameters"
    ],
    "acceptedAnswerID": 894877,
    "user": {
      "soUserID": 1470,
      "name": "Tilendor",
      "reputation": 19445
    }
  },
  {
    "soID": 152975,
    "parentID": null,
    "url": "https://stackoverflow.com/q/152975",
    "title": "How do I detect a click outside an element?",
    "body": "<p>I have some HTML menus, which I show completely when a user clicks on the head of these menus. I would like to hide these elements when the user clicks outside the menus' area.</p>\n\n<p>Is something like this possible with jQuery?</p>\n\n<pre><code>$(\"#menuscontainer\").clickOutsideThisElement(function() {\n    // Hide the menus\n});\n</code></pre>\n",
    "score": 1714,
    "tags": [
      "javascript",
      "jquery"
    ],
    "acceptedAnswerID": 153047,
    "user": null
  },
  {
    "soID": 1643227,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1643227",
    "title": "Get selected text from a drop-down list (select box) using jQuery",
    "body": "<p>How can I get a drop-down list selected text in jQuery, not using the selected value?</p>\n",
    "score": 1702,
    "tags": [
      "javascript",
      "jquery",
      "drop-down-menu",
      "jquery-selectors"
    ],
    "acceptedAnswerID": 1643247,
    "user": {
      "soUserID": 170231,
      "name": "haddar",
      "reputation": 8597
    }
  },
  {
    "soID": 572897,
    "parentID": null,
    "url": "https://stackoverflow.com/q/572897",
    "title": "How does JavaScript .prototype work?",
    "body": "<p>I'm not that into dynamic programming languages, but I've written my fair share of JavaScript code. I never really got my head around this prototype-based programming, does any one know how this works? </p>\n\n<pre><code>var obj = new Object(); // not a functional object\nobj.prototype.test = function() { alert('Hello?'); }; // this is wrong!\n\nfunction MyObject() {} // a first class functional object\nMyObject.prototype.test = function() { alert('OK'); } // OK\n</code></pre>\n\n<p>I remember a lot discussion I had with people a while back (I'm not exactly sure what I'm doing) but as I understand it, there's no concept of a class. It's just an object, and instances of those objects are clones of the original, right?</p>\n\n<p>But what is the exact purpose of this <code>.prototype</code> property in JavaScript? How does it relate to instantiating objects?</p>\n\n<hr>\n\n<h3>Edit</h3>\n\n<p>These <a href=\"http://ejohn.org/apps/learn/#64\" rel=\"noreferrer\">slides</a> really helped a lot to understand this topic.</p>\n",
    "score": 1670,
    "tags": [
      "javascript",
      "prototype-oriented"
    ],
    "acceptedAnswerID": 572996,
    "user": {
      "soUserID": 58961,
      "name": "John Leidegren",
      "reputation": 32404
    }
  },
  {
    "soID": 1414365,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1414365",
    "title": "Disable/enable an input with jQuery?",
    "body": "<pre><code>$input.disabled = true;\n</code></pre>\n\n<p>or </p>\n\n<pre><code>$input.disabled = \"disabled\";\n</code></pre>\n\n<p>Which is the standard way? And, conversely, how do you enable a disabled input?</p>\n",
    "score": 1664,
    "tags": [
      "javascript",
      "jquery",
      "html-input"
    ],
    "acceptedAnswerID": 1414366,
    "user": {
      "soUserID": 104015,
      "name": "omg",
      "reputation": 40609
    }
  },
  {
    "soID": 2067472,
    "parentID": null,
    "url": "https://stackoverflow.com/q/2067472",
    "title": "What is JSONP all about?",
    "body": "<p>I understand JSON, but not JSONP. <a href=\"http://en.wikipedia.org/wiki/JSON\" rel=\"noreferrer\">Wikipedia's document on JSON</a> is (was) the top search result for JSONP. It says this:</p>\n\n<blockquote>\n  <p>JSONP or \"JSON with padding\" is a JSON extension wherein a prefix is specified as an input argument of the call itself.</p>\n</blockquote>\n\n<p>Huh? What call? That doesn't make any sense to me. JSON is a data format. There's no call.</p>\n\n<p>The <a href=\"http://remysharp.com/2007/10/08/what-is-jsonp/\" rel=\"noreferrer\">2nd search result</a> is from some guy named <a href=\"https://stackoverflow.com/users/22617/remy-sharp\">Remy</a>, who writes this about JSONP:</p>\n\n<blockquote>\n  <p>JSONP is script tag injection, passing the response from the server in to a user specified function.</p>\n</blockquote>\n\n<p>I can sort of understand that, but it's still not making any sense.</p>\n\n<hr>\n\n<p>So what is JSONP? Why was it created (what problem does it solve)? And why would I use it? </p>\n\n<hr>\n\n<p><strong>Addendum</strong>: I've just created <a href=\"http://en.wikipedia.org/wiki/JSONP\" rel=\"noreferrer\">a new page for JSONP</a> on Wikipedia; it now has a clear and thorough description of JSONP, based on <a href=\"https://stackoverflow.com/users/25330/jvenema\">jvenema</a>'s answer.</p>\n",
    "score": 1663,
    "tags": [
      "javascript",
      "json",
      "jsonp"
    ],
    "acceptedAnswerID": 2067584,
    "user": {
      "soUserID": 48082,
      "name": "Cheeso",
      "reputation": 123310
    }
  },
  {
    "soID": 684672,
    "parentID": null,
    "url": "https://stackoverflow.com/q/684672",
    "title": "How do I loop through or enumerate a JavaScript object?",
    "body": "<p>I have a JavaScript object like the following:</p>\n\n<pre><code>var p = {\n    \"p1\": \"value1\",\n    \"p2\": \"value2\",\n    \"p3\": \"value3\"\n};\n</code></pre>\n\n<p>Now I want to loop through all <code>p</code> elements (<code>p1</code>,<code>p2</code>,<code>p3</code>...) and get their keys and values. How can I do that?</p>\n\n<p>I can modify the JavaScript object if necessary. My ultimate goal is to loop through some key value pairs and if possible I want to avoid using <code>eval</code>.</p>\n",
    "score": 1649,
    "tags": [
      "javascript",
      "loops",
      "each"
    ],
    "acceptedAnswerID": 684692,
    "user": {
      "soUserID": 1312208,
      "name": "Tanmoy",
      "reputation": 11417
    }
  },
  {
    "soID": 22343224,
    "parentID": null,
    "url": "https://stackoverflow.com/q/22343224",
    "title": "What's the difference between tilde(~) and caret(^) in package.json?",
    "body": "<p>After I upgraded to latest stable <code>node</code> and <code>npm</code>, I tried <code>npm install moment --save</code>. It saves the entry in the <code>package.json</code> with the <code>caret(^)</code> prefix. Previously, it was a <code>tilde(~)</code> prefix. </p>\n\n<ol>\n<li>Why are these changes made in <code>npm</code>? </li>\n<li>What is the difference between <code>tilde(~)</code> and <code>caret(^)</code>?</li>\n<li>What is the advantages over others?</li>\n</ol>\n",
    "score": 1641,
    "tags": [
      "javascript",
      "node.js",
      "npm"
    ],
    "acceptedAnswerID": 22345808,
    "user": {
      "soUserID": 1154350,
      "name": "Fizer Khan",
      "reputation": 24344
    }
  },
  {
    "soID": 9682092,
    "parentID": null,
    "url": "https://stackoverflow.com/q/9682092",
    "title": "How does data binding work in AngularJS?",
    "body": "<p>How does data binding work in the <code>AngularJS</code> framework?</p>\n\n<p>I haven't found technical details on <a href=\"http://angularjs.org\" rel=\"noreferrer\">their site</a>. It's more or less clear how it works when data is propagated from view to model. But how does AngularJS track changes of model properties without setters and getters?</p>\n\n<p>I found that there are <a href=\"https://stackoverflow.com/questions/1029241/javascript-object-watch-for-all-browsers\">JavaScript watchers</a> that may do this work. But they are not supported in <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_6\" rel=\"noreferrer\">Internet&nbsp;Explorer&nbsp;6</a> and <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_7\" rel=\"noreferrer\">Internet&nbsp;Explorer&nbsp;7</a>. So how does AngularJS know that I changed for example the following and reflected this change on a view?</p>\n\n<pre><code>myobject.myproperty=\"new value\";\n</code></pre>\n",
    "score": 1623,
    "tags": [
      "javascript",
      "angularjs",
      "data-binding"
    ],
    "acceptedAnswerID": 9693933,
    "user": {
      "soUserID": 168367,
      "name": "Pashec",
      "reputation": 9727
    }
  },
  {
    "soID": 586182,
    "parentID": null,
    "url": "https://stackoverflow.com/q/586182",
    "title": "How to insert an item into an array at a specific index?",
    "body": "<p>I am looking for a Javascript array insert method, in the style of:</p>\n\n<pre><code>arr.insert(index, item)\n</code></pre>\n\n<p>Preferably in jQuery, but any Javascript implementation will do at this point.</p>\n",
    "score": 1611,
    "tags": [
      "javascript",
      "arrays",
      "insert"
    ],
    "acceptedAnswerID": 586189,
    "user": {
      "soUserID": 192,
      "name": "tags2k",
      "reputation": 22670
    }
  },
  {
    "soID": 805107,
    "parentID": null,
    "url": "https://stackoverflow.com/q/805107",
    "title": "Creating multiline strings in JavaScript",
    "body": "<p>I have the following code in Ruby. I want to convert this code into JavaScript. what's the equivalent code in JS?</p>\n\n<pre><code>text = &lt;&lt;\"HERE\"\nThis\nIs\nA\nMultiline\nString\nHERE\n</code></pre>\n",
    "score": 1552,
    "tags": [
      "javascript",
      "string",
      "multiline",
      "heredoc"
    ],
    "acceptedAnswerID": 805113,
    "user": {
      "soUserID": 95956,
      "name": "Newy",
      "reputation": 9688
    }
  },
  {
    "soID": 5223,
    "parentID": null,
    "url": "https://stackoverflow.com/q/5223",
    "title": "Length of a JavaScript object",
    "body": "<p>If I have a JavaScript object, say</p>\n\n<pre><code>var myObject = new Object();\nmyObject[\"firstname\"] = \"Gareth\";\nmyObject[\"lastname\"] = \"Simpson\";\nmyObject[\"age\"] = 21;\n</code></pre>\n\n<p>is there a built-in or accepted best practice way to get the length of this object?</p>\n",
    "score": 1541,
    "tags": [
      "javascript",
      "javascript-objects"
    ],
    "acceptedAnswerID": 6700,
    "user": {
      "soUserID": 147,
      "name": "Gareth Simpson",
      "reputation": 11783
    }
  },
  {
    "soID": 3390396,
    "parentID": null,
    "url": "https://stackoverflow.com/q/3390396",
    "title": "How to check for \"undefined\" in JavaScript?",
    "body": "<p>What is the most appropriate way to test if a variable is undefined in JavaScript? I've seen several possible ways:</p>\n\n<pre><code>if (window.myVariable)\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>if (typeof(myVariable) != \"undefined\")\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>if (myVariable) //This throws an error if undefined. Should this be in Try/Catch?\n</code></pre>\n",
    "score": 1528,
    "tags": [
      "javascript",
      "undefined"
    ],
    "acceptedAnswerID": 3390426,
    "user": {
      "soUserID": 328397,
      "name": "LamonteCristo",
      "reputation": 17975
    }
  },
  {
    "soID": 824349,
    "parentID": null,
    "url": "https://stackoverflow.com/q/824349",
    "title": "Modify the URL without reloading the page",
    "body": "<p>Is there any way I can modify the URL of the current page without reloading the page?</p>\n\n<p>I would like to access the portion <strong>before</strong> the # hash if possible.</p>\n\n<p>I only need to change the portion <strong>after</strong> the domain, so its not like I'm violating cross-domain policies.</p>\n\n<pre><code> window.location.href = \"www.mysite.com/page2.php\";  // sadly this reloads\n</code></pre>\n",
    "score": 1514,
    "tags": [
      "javascript",
      "html",
      "url",
      "url-rewriting",
      "friendly-url"
    ],
    "acceptedAnswerID": 3354511,
    "user": {
      "soUserID": 41021,
      "name": "Jarvis",
      "reputation": 29587
    }
  },
  {
    "soID": 500431,
    "parentID": null,
    "url": "https://stackoverflow.com/q/500431",
    "title": "What is the scope of variables in JavaScript?",
    "body": "<p>What is the scope of variables in javascript? Do they have the same scope inside as opposed to outside a function? Or does it even matter? Also, where are the variables stored if they are defined globally?</p>\n",
    "score": 1497,
    "tags": [
      "javascript",
      "variables",
      "scope"
    ],
    "acceptedAnswerID": 500459,
    "user": {
      "soUserID": 60102,
      "name": "lYriCAlsSH",
      "reputation": 19430
    }
  },
  {
    "soID": 446594,
    "parentID": null,
    "url": "https://stackoverflow.com/q/446594",
    "title": "Abort Ajax requests using jQuery",
    "body": "<p>Using jQuery, how can I <strong>cancel/abort an Ajax request</strong> that I have not yet received the response from?</p>\n",
    "score": 1490,
    "tags": [
      "javascript",
      "jquery",
      "ajax"
    ],
    "acceptedAnswerID": 446626,
    "user": {
      "soUserID": 47831,
      "name": "lukewm",
      "reputation": 8027
    }
  },
  {
    "soID": 263965,
    "parentID": null,
    "url": "https://stackoverflow.com/q/263965",
    "title": "How can I convert a string to boolean in JavaScript?",
    "body": "<p>Can I convert a string representing a boolean value (e.g., 'true', 'false') into a intrinsic type in JavaScript?</p>\n\n<p>I have a hidden form in HTML that is updated based upon a user's selection within a list. This form contains some fields which represent boolean values and are dynamically populated with an intrinsic boolean value. However, once this value is placed into the hidden input field it becomes a string.</p>\n\n<p>The only way I could find to determine the field's boolean value, once it was converted into a string, was to depend upon the literal value of its string representation.</p>\n\n<pre><code>var myValue = document.myForm.IS_TRUE.value;\nvar isTrueSet = myValue == 'true';\n</code></pre>\n\n<p>Is there a better way to accomplish this?</p>\n",
    "score": 1459,
    "tags": [
      "javascript"
    ],
    "acceptedAnswerID": 264037,
    "user": null
  },
  {
    "soID": 171251,
    "parentID": null,
    "url": "https://stackoverflow.com/q/171251",
    "title": "How can I merge properties of two JavaScript objects dynamically?",
    "body": "<p>I need to be able to merge two (very simple) JavaScript objects at runtime.  For example I'd like to:</p>\n\n<pre><code>var obj1 = { food: 'pizza', car: 'ford' }\nvar obj2 = { animal: 'dog' }\n\nobj1.merge(obj2);\n\n//obj1 now has three properties: food, car, and animal\n</code></pre>\n\n<p>Does anyone have a script for this or know of a built in way to do this?  I do not need recursion, and I do not need to merge functions, just methods on flat objects.</p>\n",
    "score": 1459,
    "tags": [
      "javascript"
    ],
    "acceptedAnswerID": 171256,
    "user": null
  },
  {
    "soID": 242813,
    "parentID": null,
    "url": "https://stackoverflow.com/q/242813",
    "title": "When to use double or single quotes in JavaScript?",
    "body": "<p><code>console.log(\"double\");</code> vs <code>console.log('single');</code></p>\n\n<p>I see more and more JavaScript libraries out there using single quotes when handling strings. What are the reasons to use one over the other? I thought they're pretty much interchangeable.</p>\n",
    "score": 1447,
    "tags": [
      "javascript",
      "string",
      "conventions"
    ],
    "acceptedAnswerID": 242833,
    "user": null
  },
  {
    "soID": 18641899,
    "parentID": null,
    "url": "https://stackoverflow.com/q/18641899",
    "title": "What is the difference between Bower and npm?",
    "body": "<p>What is the fundamental difference between <code>bower</code> and <code>npm</code>? Just want something plain and simple. I've seen some of my colleagues use <code>bower</code> and <code>npm</code> interchangeably in their projects.</p>\n",
    "score": 1431,
    "tags": [
      "javascript",
      "npm",
      "bower"
    ],
    "acceptedAnswerID": 18652918,
    "user": {
      "soUserID": 1624921,
      "name": "Games Brainiac",
      "reputation": 32852
    }
  },
  {
    "soID": 1646698,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1646698",
    "title": "What is the 'new' keyword in JavaScript?",
    "body": "<p>The <code>new</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>\n\n<ul>\n<li>What is it?</li>\n<li>What problems does it solve?</li>\n<li>When is it appropriate and when not?</li>\n</ul>\n",
    "score": 1426,
    "tags": [
      "javascript",
      "new-operator"
    ],
    "acceptedAnswerID": 3658673,
    "user": {
      "soUserID": 140937,
      "name": "Alon Gubkin",
      "reputation": 24061
    }
  },
  {
    "soID": 11832914,
    "parentID": null,
    "url": "https://stackoverflow.com/q/11832914",
    "title": "Round to at most 2 decimal places (only if necessary)",
    "body": "<p>I'd like to round at most 2 decimal places, but <em>only if necessary</em>.</p>\n\n<p>Input:</p>\n\n<pre><code>10\n1.7777777\n9.1\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>10\n1.78\n9.1\n</code></pre>\n\n<p>How can I do this in JavaScript? </p>\n",
    "score": 1426,
    "tags": [
      "javascript",
      "decimal",
      "rounding",
      "decimal-point"
    ],
    "acceptedAnswerID": 11832950,
    "user": {
      "soUserID": 360705,
      "name": "stinkycheeseman",
      "reputation": 8784
    }
  },
  {
    "soID": 21692646,
    "parentID": null,
    "url": "https://stackoverflow.com/q/21692646",
    "title": "How does Facebook disable the browser's integrated Developer Tools?",
    "body": "<p>So apparently because of the recent scams, the developer tools is exploited by people to post spam and even used to \"hack\" accounts. Facebook has blocked the developer tools, and I can't even use the console.</p>\n\n<p><img src=\"https://i.stack.imgur.com/Wiatp.png\" alt=\"Enter image description here\"></p>\n\n<p>How did they do that?? <a href=\"https://stackoverflow.com/questions/7559409/disable-developer-tools\">One Stack Overflow post claimed that it is not possible</a>, but Facebook has proven them wrong.</p>\n\n<p>Just go to Facebook and open up the developer tools, type one character into the console, and this warning pops up. No matter what you put in, it will not get executed.</p>\n\n<p>How is this possible?</p>\n\n<p>They even blocked auto-complete in the console:</p>\n\n<p><img src=\"https://i.stack.imgur.com/j0Zmx.png\" alt=\"Enter image description here\"></p>\n",
    "score": 1425,
    "tags": [
      "javascript",
      "facebook",
      "google-chrome-devtools"
    ],
    "acceptedAnswerID": 21693931,
    "user": {
      "soUserID": 283863,
      "name": "Derek 朕會功夫",
      "reputation": 49102
    }
  },
  {
    "soID": 610406,
    "parentID": null,
    "url": "https://stackoverflow.com/q/610406",
    "title": "JavaScript equivalent to printf/string.format",
    "body": "<p>I'm looking for a good JavaScript equivalent of the C/PHP <code>printf()</code> or for C#/Java programmers, <code>String.Format()</code> (<code>IFormatProvider</code> for .NET).</p>\n\n<p>My basic requirement is a thousand separator format for numbers for now, but something that handles lots of combinations (including dates) would be good.</p>\n\n<p>I realize Microsoft's <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\" rel=\"noreferrer\">Ajax</a> library provides a version of <code>String.Format()</code>, but we don't want the entire overhead of that framework.</p>\n",
    "score": 1415,
    "tags": [
      "javascript",
      "printf",
      "string.format"
    ],
    "acceptedAnswerID": 610415,
    "user": null
  },
  {
    "soID": 406192,
    "parentID": null,
    "url": "https://stackoverflow.com/q/406192",
    "title": "Get current URL in JavaScript?",
    "body": "<p>I am using jQuery. How do I get the path of the current URL and assign it to a variable?</p>\n\n<p>Example URL:</p>\n\n<pre><code>http://localhost/menuname.de?foo=bar&amp;amp;number=0\n</code></pre>\n",
    "score": 1406,
    "tags": [
      "javascript",
      "jquery",
      "url",
      "path"
    ],
    "acceptedAnswerID": 406208,
    "user": {
      "soUserID": 44984,
      "name": "venkatachalam",
      "reputation": 43478
    }
  },
  {
    "soID": 20035101,
    "parentID": null,
    "url": "https://stackoverflow.com/q/20035101",
    "title": "\"No 'Access-Control-Allow-Origin' header is present on the requested resource\"",
    "body": "<p>I am trying to do authorization using <a href=\"http://en.wikipedia.org/wiki/JavaScript\" rel=\"noreferrer\">JavaScript</a> by connecting to the <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services\" rel=\"noreferrer\">RESTful</a> <a href=\"http://en.wikipedia.org/wiki/Application_programming_interface\" rel=\"noreferrer\">API</a> built in <a href=\"https://en.wikipedia.org/wiki/Flask_%28web_framework%29\" rel=\"noreferrer\">Flask</a>. However, when I make the request, I get the following error:</p>\n\n<blockquote>\n  <p>XMLHttpRequest cannot load <a href=\"http://myApiUrl/login\" rel=\"noreferrer\">http://myApiUrl/login</a>. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access.</p>\n</blockquote>\n\n<p>I know that the API or remote resource must set the header, but why did it work when I made the request via the Chrome extension <a href=\"https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop\" rel=\"noreferrer\">Postman</a>?</p>\n\n<p>This is the request code:</p>\n\n<pre><code>$.ajax({\n    type: \"POST\",\n    dataType: 'text',\n    url: api,\n    username: 'user',\n    password: 'pass',\n    crossDomain : true,\n    xhrFields: {\n        withCredentials: true\n    }\n})\n    .done(function( data ) {\n        console.log(\"done\");\n    })\n    .fail( function(xhr, textStatus, errorThrown) {\n        alert(xhr.responseText);\n        alert(textStatus);\n    });\n</code></pre>\n",
    "score": 1402,
    "tags": [
      "javascript",
      "cors",
      "restful-authentication",
      "same-origin-policy",
      "flask-restless"
    ],
    "acceptedAnswerID": 20035319,
    "user": {
      "soUserID": 2140160,
      "name": "Mr Jedi",
      "reputation": 7261
    }
  },
  {
    "soID": 287903,
    "parentID": null,
    "url": "https://stackoverflow.com/q/287903",
    "title": "Enums in JavaScript?",
    "body": "<p>What is the preferred syntax for defining enums in JavaScript? Something like:</p>\n\n<pre><code>my.namespace.ColorEnum = {\n    RED : 0,\n    GREEN : 1,\n    BLUE : 2\n}\n\n// later on\n\nif(currentColor == my.namespace.ColorEnum.RED) {\n   // whatever\n}\n</code></pre>\n\n<p>Or is there a more preferable idiom?</p>\n",
    "score": 1401,
    "tags": [
      "javascript",
      "enums"
    ],
    "acceptedAnswerID": 287917,
    "user": {
      "soUserID": 5309,
      "name": "David Citron",
      "reputation": 16976
    }
  },
  {
    "soID": 4351521,
    "parentID": null,
    "url": "https://stackoverflow.com/q/4351521",
    "title": "How do I pass command line arguments?",
    "body": "<p>I have a web server written in <a href=\"http://en.wikipedia.org/wiki/Node.js\" rel=\"noreferrer\">Node.js</a> that I would like to launch with a specific folder. I'm not sure how to access arguments in JavaScript. I'm running node like this:</p>\n\n<pre><code>$ node server.js folder\n</code></pre>\n\n<p>Where <code>server.js</code> is my code. Node.js help says this is possible:</p>\n\n<pre><code>$ node -h\nUsage: node [options] script.js [arguments]\n</code></pre>\n\n<p>How would I access those arguments in JavaScript? Somehow I was not able to find this information on the web.</p>\n",
    "score": 1396,
    "tags": [
      "javascript",
      "node.js",
      "arguments",
      "command-line-arguments"
    ],
    "acceptedAnswerID": 4351548,
    "user": {
      "soUserID": 245777,
      "name": "milkplus",
      "reputation": 8623
    }
  },
  {
    "soID": 1129216,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1129216",
    "title": "Sort array of objects by string property value in JavaScript",
    "body": "<p>I have an array of JavaScript objects:</p>\n\n<pre><code>var objs = [ \n    { first_nom: 'Lazslo', last_nom: 'Jamf'     },\n    { first_nom: 'Pig',    last_nom: 'Bodine'   },\n    { first_nom: 'Pirate', last_nom: 'Prentice' }\n];\n</code></pre>\n\n<p>How can I sort them by the value of <code>last_nom</code> in JavaScript?</p>\n\n<p>I know about <code>sort(a,b)</code>, but that only seems to work on strings and numbers. Do I need to add a toString method to my objects?</p>\n",
    "score": 1391,
    "tags": [
      "javascript",
      "arrays",
      "sorting",
      "properties"
    ],
    "acceptedAnswerID": 1129270,
    "user": {
      "soUserID": 138390,
      "name": "Tyrone Slothrop",
      "reputation": 7163
    }
  },
  {
    "soID": 1531093,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1531093",
    "title": "How do I get the current date in JavaScript?",
    "body": "<p>How do I get current date in JavaScript?</p>\n",
    "score": 1379,
    "tags": [
      "javascript",
      "date"
    ],
    "acceptedAnswerID": 4929629,
    "user": {
      "soUserID": 96180,
      "name": "Suresh",
      "reputation": 9664
    }
  },
  {
    "soID": 500504,
    "parentID": null,
    "url": "https://stackoverflow.com/q/500504",
    "title": "Why is using \"for...in\" with array iteration a bad idea?",
    "body": "<p>I've been told not to use <code>for...in</code> with arrays in JavaScript. Why not?</p>\n",
    "score": 1338,
    "tags": [
      "javascript",
      "arrays",
      "for-loop"
    ],
    "acceptedAnswerID": 500531,
    "user": {
      "soUserID": 60102,
      "name": "lYriCAlsSH",
      "reputation": 19430
    }
  },
  {
    "soID": 799981,
    "parentID": null,
    "url": "https://stackoverflow.com/q/799981",
    "title": "$(document).ready equivalent without jQuery",
    "body": "<p>I have a script that uses <code>$(document).ready</code>, but it doesn't use anything else from jQuery. I'd like to lighten it up by removing the jQuery dependency.</p>\n\n<p>How can I implement my own <code>$(document).ready</code> functionality without using jQuery? I know that  using <code>window.onload</code> will not be the same, as <code>window.onload</code> fires after all images, frames, etc. have been loaded.</p>\n",
    "score": 1333,
    "tags": [
      "javascript",
      "jquery"
    ],
    "acceptedAnswerID": 800010,
    "user": {
      "soUserID": 1965,
      "name": "FlySwat",
      "reputation": 98362
    }
  },
  {
    "soID": 203198,
    "parentID": null,
    "url": "https://stackoverflow.com/q/203198",
    "title": "Event binding on dynamically created elements?",
    "body": "<p>I have a bit of code where I am looping through all the select boxes on a page and binding a <code>.hover</code> event to them to do a bit of twiddling with their width on <code>mouse on/off</code>.</p>\n\n<p>This happens on page ready and works just fine.</p>\n\n<p>The problem I have is that any select boxes I add via Ajax or DOM after the initial loop won't have the event bound.</p>\n\n<p>I have found this plugin (<a href=\"http://brandonaaron.net/docs/livequery/#getting-started\" rel=\"noreferrer\">jQuery Live Query Plugin</a>), but before I add another 5k to my pages with a plugin, I want to see if anyone knows a way to do this, either with jQuery directly or by another option.</p>\n",
    "score": 1314,
    "tags": [
      "javascript",
      "jquery",
      "events",
      "unobtrusive-javascript"
    ],
    "acceptedAnswerID": 1207393,
    "user": {
      "soUserID": 27580,
      "name": "Eli",
      "reputation": 44668
    }
  },
  {
    "soID": 679915,
    "parentID": null,
    "url": "https://stackoverflow.com/q/679915",
    "title": "How do I test for an empty JavaScript object?",
    "body": "<p>After an AJAX request, sometimes my application may return an empty object, like:</p>\n\n<pre><code>var a = ({});\n</code></pre>\n\n<p>How can I check whether that's the case?</p>\n",
    "score": 1311,
    "tags": [
      "javascript",
      "json"
    ],
    "acceptedAnswerID": 32108184,
    "user": {
      "soUserID": 64784,
      "name": "falmp",
      "reputation": 6777
    }
  },
  {
    "soID": 2647867,
    "parentID": null,
    "url": "https://stackoverflow.com/q/2647867",
    "title": "How to determine if variable is 'undefined' or 'null'?",
    "body": "<p>How do I determine if variable is <code>undefined</code> or <code>null</code>?  My code is as follows:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var EmpName = $(\"div#esd-names div#name\").attr('class');\nif(EmpName == 'undefined'){\n  //DO SOMETHING\n};\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div id=\"esd-names\"&gt;\n  &lt;div id=\"name\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n\n\n<p>But if I do this, the JavaScript interpreter halts execution.</p>\n",
    "score": 1299,
    "tags": [
      "javascript",
      "jquery",
      "variables",
      "null",
      "undefined"
    ],
    "acceptedAnswerID": 2647888,
    "user": {
      "soUserID": 281488,
      "name": "sadmicrowave",
      "reputation": 11415
    }
  },
  {
    "soID": 4907843,
    "parentID": null,
    "url": "https://stackoverflow.com/q/4907843",
    "title": "Open a URL in a new tab (and not a new window) using JavaScript",
    "body": "<p>I'm trying to open a <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"noreferrer\">URL</a> in a new tab, as opposed to a popup window. I've seen related questions where the responses would look something like:</p>\n\n<pre><code>window.open(url,'_blank');\nwindow.open(url);\n</code></pre>\n\n<p>But none of them worked for me, the browser still tried to open a popup window.</p>\n",
    "score": 1296,
    "tags": [
      "javascript"
    ],
    "acceptedAnswerID": 4907854,
    "user": {
      "soUserID": 137100,
      "name": "Mark F",
      "reputation": 10254
    }
  },
  {
    "soID": 4810841,
    "parentID": null,
    "url": "https://stackoverflow.com/q/4810841",
    "title": "How can I pretty-print JSON using JavaScript?",
    "body": "<p>How can I display JSON in an easy-to-read (for human readers) format? I'm looking primarily for indentation and whitespace, with perhaps even colors / font-styles / etc.</p>\n",
    "score": 1286,
    "tags": [
      "javascript",
      "json",
      "pretty-print"
    ],
    "acceptedAnswerID": 7220510,
    "user": {
      "soUserID": 298406,
      "name": "Mark",
      "reputation": 16483
    }
  },
  {
    "soID": 7202157,
    "parentID": null,
    "url": "https://stackoverflow.com/q/7202157",
    "title": "Why does ++[[]][+[]]+[+[]] return the string \"10\"?",
    "body": "<p>This is valid and returns the string <code>\"10\"</code> in JavaScript (<a href=\"http://sla.ckers.org/forum/read.php?24,33349,33405\" rel=\"noreferrer\">more examples here</a>):</p>\n\n<pre><code>++[[]][+[]]+[+[]]\n</code></pre>\n\n<p>Why? What is happening here?</p>\n",
    "score": 1273,
    "tags": [
      "javascript",
      "syntax"
    ],
    "acceptedAnswerID": 7202287,
    "user": null
  },
  {
    "soID": 3437786,
    "parentID": null,
    "url": "https://stackoverflow.com/q/3437786",
    "title": "Get the size of the screen, current web page and browser window",
    "body": "<p>How can I get <code>windowWidth</code>, <code>windowHeight</code>, <code>pageWidth</code>, <code>pageHeight</code>, <code>screenWidth</code>, <code>screenHeight</code>, <code>pageX</code>, <code>pageY</code>, <code>screenX</code>, <code>screenY</code> which will work in all major browsers?</p>\n\n<p><img src=\"https://i.stack.imgur.com/6xPdH.png\" alt=\"screenshot describing which values are wanted\"></p>\n",
    "score": 1272,
    "tags": [
      "javascript",
      "jquery",
      "layout",
      "cross-browser"
    ],
    "acceptedAnswerID": 3437825,
    "user": {
      "soUserID": 408393,
      "name": "turtledove",
      "reputation": 7396
    }
  },
  {
    "soID": 2353818,
    "parentID": null,
    "url": "https://stackoverflow.com/q/2353818",
    "title": "How do I get started with Node.js",
    "body": "<p>Are there any good resources to get started with Node.JS? Any good tutorials, blogs or books?</p>\n\n<p>Of course, I have visited its official website <a href=\"http://nodejs.org/\" rel=\"noreferrer\">http://nodejs.org/</a>, but I didn't think the documentation they have is a good starting point.</p>\n",
    "score": 1267,
    "tags": [
      "javascript",
      "node.js"
    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1470488,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1470488",
    "title": "What is the purpose of the var keyword and when to use it (or omit it)?",
    "body": "<blockquote>\n  <p><strong><em>NOTE</strong>: This question was asked from the viewpoint of ECMAScript version 3 or 5. The answers might become outdated with the introduction of new features in the release of ECMAScript 6.</em></p>\n</blockquote>\n\n<p>What exactly is the function of the <code>var</code> keyword in Javascript, and what is the difference between:</p>\n\n<pre><code>var someNumber = 2;\nvar someFunction = function() { doSomething; }\nvar someObject = { }\nvar someObject.someProperty = 5;\n</code></pre>\n\n<p>and:</p>\n\n<pre><code>someNumber = 2;\nsomeFunction = function() { doSomething; }\nsomeObject = { }\nsomeObject.someProperty = 5;\n</code></pre>\n\n<p>When would you use either one, and why/what does it do?</p>\n",
    "score": 1266,
    "tags": [
      "javascript",
      "keyword",
      "ecmascript-5"
    ],
    "acceptedAnswerID": 1470494,
    "user": {
      "soUserID": 114916,
      "name": "Alex",
      "reputation": 28984
    }
  },
  {
    "soID": 1279957,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1279957",
    "title": "How to move an element into another element?",
    "body": "<p>I would like to move one DIV element inside another. For example, I want to move this (including all children):</p>\n\n<pre><code>&lt;div id=\"source\"&gt;\n...\n&lt;/div&gt;\n</code></pre>\n\n<p>into this:</p>\n\n<pre><code>&lt;div id=\"destination\"&gt;\n...\n&lt;/div&gt;\n</code></pre>\n\n<p>so that I have this:</p>\n\n<pre><code>&lt;div id=\"destination\"&gt;\n  &lt;div id=\"source\"&gt;\n    ...\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n",
    "score": 1248,
    "tags": [
      "javascript",
      "jquery",
      "html"
    ],
    "acceptedAnswerID": 1279963,
    "user": {
      "soUserID": 134484,
      "name": "Mark Richman",
      "reputation": 10087
    }
  },
  {
    "soID": 1911015,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1911015",
    "title": "How do I debug Node.js applications?",
    "body": "<p>How do I debug a Node.js server application?</p>\n\n<p>Right now I'm mostly using <em>alert debugging</em> with print statements like this:</p>\n\n<pre><code>sys.puts(sys.inspect(someVariable));\n</code></pre>\n\n<p>There must be a better way to debug. I know that <a href=\"http://en.wikipedia.org/wiki/Google_Chrome\" rel=\"noreferrer\">Google Chrome</a> has a command-line debugger. Is this debugger available for Node.js as well?</p>\n",
    "score": 1243,
    "tags": [
      "javascript",
      "node.js",
      "debugging",
      "google-chrome-devtools"
    ],
    "acceptedAnswerID": 2536734,
    "user": {
      "soUserID": 129322,
      "name": "Fabian Jakobs",
      "reputation": 13631
    }
  },
  {
    "soID": 767486,
    "parentID": null,
    "url": "https://stackoverflow.com/q/767486",
    "title": "How do you check if a variable is an array in JavaScript?",
    "body": "<p>I would like to check whether a variable is either an array or a single value in JavaScript.</p>\n\n<p>I have found a possible solution...</p>\n\n<pre><code>if (variable.constructor == Array)...\n</code></pre>\n\n<p>Is this the best way this can be done?</p>\n",
    "score": 1229,
    "tags": [
      "javascript",
      "arrays",
      "variables"
    ],
    "acceptedAnswerID": 26633883,
    "user": {
      "soUserID": 3362,
      "name": "Andy McCluggage",
      "reputation": 16566
    }
  },
  {
    "soID": 867916,
    "parentID": null,
    "url": "https://stackoverflow.com/q/867916",
    "title": "Creating a div element in jQuery",
    "body": "<p>How do I create a <code>div</code> element in <strong>jQuery</strong>?</p>\n",
    "score": 1218,
    "tags": [
      "javascript",
      "jquery",
      "html",
      "append",
      "jquery-append"
    ],
    "acceptedAnswerID": 867981,
    "user": {
      "soUserID": 79980,
      "name": "useranon",
      "reputation": 10910
    }
  },
  {
    "soID": 5515310,
    "parentID": null,
    "url": "https://stackoverflow.com/q/5515310",
    "title": "Is there a standard function to check for null, undefined, or blank variables in JavaScript?",
    "body": "<p>Is there a universal JavaScript function that checks that a variable has a value and ensures that it's not <code>undefined</code> or <code>null</code>? I've got this code, but I'm not sure if it covers all cases:</p>\n\n<pre><code>function isEmpty(val){\n    return (val === undefined || val == null || val.length &lt;= 0) ? true : false;\n}\n</code></pre>\n",
    "score": 1211,
    "tags": [
      "javascript",
      "null",
      "undefined"
    ],
    "acceptedAnswerID": 5515349,
    "user": {
      "soUserID": 177416,
      "name": "Alex",
      "reputation": 8030
    }
  },
  {
    "soID": 523643,
    "parentID": null,
    "url": "https://stackoverflow.com/q/523643",
    "title": "Difference between == and === in JavaScript",
    "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"https://stackoverflow.com/questions/359494/javascript-vs-does-it-matter-which-equal-operator-i-use\">Javascript === vs == : Does it matter which &ldquo;equal&rdquo; operator I use?</a>   </p>\n</blockquote>\n\n\n\n<p>What is the difference between <code>==</code> and <code>===</code> in JavaScript?  I have also seen <code>!=</code> and <code>!==</code> operators.  Are there more such operators?</p>\n",
    "score": 1205,
    "tags": [
      "javascript",
      "comparison-operators",
      "equality-operator",
      "identity-operator"
    ],
    "acceptedAnswerID": 523647,
    "user": {
      "soUserID": 51570,
      "name": "Shiva",
      "reputation": 6662
    }
  },
  {
    "soID": 1527803,
    "parentID": null,
    "url": "https://stackoverflow.com/q/1527803",
    "title": "Generating random whole numbers in JavaScript in a specific range?",
    "body": "<p>How can I generate a random whole number between two specified variables in Javascript, e.g. <code>x = 4</code> and <code>y = 8</code> would output any of 4, 5, 6, 7, 8?</p>\n",
    "score": 1205,
    "tags": [
      "javascript",
      "random",
      "integer"
    ],
    "acceptedAnswerID": 1527820,
    "user": {
      "soUserID": 133211,
      "name": "zacharyliu",
      "reputation": 6337
    }
  },
  {
    "soID": 5232,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/5232",
    "title": null,
    "body": "<p>I'm not a JavaScript expert, but it looks like you would have to loop through the elements and count them since Object doesn't have a length method:</p>\n\n<pre><code>var element_count = 0;\nfor (e in myArray) {  if (myArray.hasOwnProperty(e)) element_count++; }\n</code></pre>\n\n<p>@palmsey: In fairness to the OP, the JavaScript documentation actually explicitly refer to using variables of type Object in this manner as \"associative arrays\".</p>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 430,
      "name": "jj33",
      "reputation": 5090
    }
  },
  {
    "soID": 6280,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/6280",
    "title": null,
    "body": "<p>Here's how and don't forget to check that the property is not on the prototype chain:</p>\n\n<pre><code>var element_count = 0;\nfor(var e in myArray)\n    if(myArray.hasOwnProperty(e))\n        element_count++;\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 56,
      "name": "doekman",
      "reputation": 7967
    }
  },
  {
    "soID": 6444,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/6444",
    "title": null,
    "body": "<blockquote>\n  <blockquote>\n    <p>@palmsey: In fairness to the OP, the javascript docs actually explicitly refer to using variables of type Object in this manner as \"associative arrays\".</p>\n  </blockquote>\n</blockquote>\n\n<p>And in fairness to @palmsey he was quite correct, they aren't associative arrays, they're definitely objects :) - doing the job of an associative array. But as regards the wider point you definitely seem to have the right of it according to this rather fine article I found: </p>\n\n<p><a href=\"http://andrewdupont.net/2006/05/18/javascript-associative-arrays-considered-harmful/\" rel=\"nofollow noreferrer\">JavaScript “Associative Arrays” Considered Harmful</a></p>\n\n<p>But according to all this, isn't the <a href=\"https://stackoverflow.com/questions/5223/length-of-javascript-associative-array#5234\">accepted answer</a> itself bad practice?</p>\n\n<blockquote>\n  <blockquote>\n    <p>Specify a prototype size() function for Object</p>\n  </blockquote>\n</blockquote>\n\n<p>If anything else has been added to Object .prototype, then the suggested code will fail:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nObject.prototype.size = function () {\n  var len = this.length ? --this.length : -1;\n    for (var k in this)\n      len++;\n  return len;\n}\nObject.prototype.size2 = function () {\n  var len = this.length ? --this.length : -1;\n    for (var k in this)\n      len++;\n  return len;\n}\nvar myArray = new Object();\nmyArray[\"firstname\"] = \"Gareth\";\nmyArray[\"lastname\"] = \"Simpson\";\nmyArray[\"age\"] = 21;\nalert(\"age is \" + myArray[\"age\"]);\nalert(\"length is \" + myArray.size());\n&lt;/script&gt;\n</code></pre>\n\n<p>I don't think that answer should be the accepted one as it can't be trusted to work if you have any other code running in the same execution context. To do it in a robust fashion surely you would need to define the size method within myArray and check for the type of the members as you iterate through them.</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 137,
      "name": "Polsonby",
      "reputation": 15747
    }
  },
  {
    "soID": 5527037,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/5527037",
    "title": null,
    "body": "<p>If you know you don't have to worry about <code>hasOwnProperty</code> checks, you can do this very simply:</p>\n\n<pre><code>Object.keys(myArray).length\n</code></pre>\n",
    "score": 1211,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 131023,
      "name": "aeosynth",
      "reputation": 12383
    }
  },
  {
    "soID": 6316862,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/6316862",
    "title": null,
    "body": "<p>To not mess with the prototype or other code, you could build and extend your own object:</p>\n\n<pre><code>function Hash(){\n    var length=0;\n    this.add = function(key, val){\n         if(this[key] == undefined)\n         {\n           length++;\n         }\n         this[key]=val;\n    }; \n    this.length = function(){\n        return length;\n    };\n}\n\nmyArray = new Hash();\nmyArray.add(\"lastname\", \"Simpson\");\nmyArray.add(\"age\", 21);\nalert(myArray.length()); // will alert 2\n</code></pre>\n\n<p>If you always use the add method, the length property will be correct. If you're worried that you or others forget about using it, you could add the property counter which the others have posted to the length method, too.</p>\n\n<p>Of course, you could always overwrite the methods. But even if you do, your code would probably fail noticeably, making it easy to debug. ;)</p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 428241,
      "name": "DanMan",
      "reputation": 7088
    }
  },
  {
    "soID": 6874074,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/6874074",
    "title": null,
    "body": "<p>For some cases it is better to just store the size in a separate variable. Especially, if you're adding to the array by one element in one place and can easily increment the size. It would obviously work much faster if you need to check the size often.</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 99904,
      "name": "Jānis Elmeris",
      "reputation": 666
    }
  },
  {
    "soID": 7177140,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/7177140",
    "title": null,
    "body": "<p>What about something like this --</p>\n\n<pre><code>function keyValuePairs() {\n    this.length = 0;\n    function add(key, value) { this[key] = value; this.length++; }\n    function remove(key) { if (this.hasOwnProperty(key)) { delete this[key]; this.length--; }}\n}\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 909828,
      "name": "Jerry",
      "reputation": 81
    }
  },
  {
    "soID": 8186938,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/8186938",
    "title": null,
    "body": "<p>A variation on some of the above is:</p>\n\n<pre><code>var objLength = function(obj){    \n    var key,len=0;\n    for(key in obj){\n        len += Number( obj.hasOwnProperty(key) );\n    }\n    return len;\n};\n</code></pre>\n\n<p>It is a bit more elegant way to integrate hasOwnProp.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1054363,
      "name": "wade harrell",
      "reputation": 51
    }
  },
  {
    "soID": 11346637,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/11346637",
    "title": null,
    "body": "<p><strong>Updated</strong>: If you're using <a href=\"http://underscorejs.org/#size\">Underscore.js</a> (recommended, it's lightweight!), then you can just do</p>\n\n<pre><code>_.size({one : 1, two : 2, three : 3});\n=&gt; 3\n</code></pre>\n\n<p><strong>If not</strong>, and you don't want to mess around with Object properties for whatever reason, and are already using jQuery, a plugin is equally accessible:</p>\n\n<pre><code>$.assocArraySize = function(obj) {\n    // http://stackoverflow.com/a/6700/11236\n    var size = 0, key;\n    for (key in obj) {\n        if (obj.hasOwnProperty(key)) size++;\n    }\n    return size;\n};\n</code></pre>\n",
    "score": 236,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 11236,
      "name": "ripper234",
      "reputation": 76083
    }
  },
  {
    "soID": 15207568,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/15207568",
    "title": null,
    "body": "<p>Below is a version of James Coglan's answer in CoffeeScript for those who have abandoned straight JavaScript :)</p>\n\n<pre><code>Object.size = (obj) -&gt;\n  size = 0\n  size++ for own key of obj\n  size\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 120067,
      "name": "Eric Anderson",
      "reputation": 2199
    }
  },
  {
    "soID": 17332295,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/17332295",
    "title": null,
    "body": "<p>Here's a different version of James Cogan's answer. Instead of passing an argument, just prototype out the Object class and make the code cleaner.</p>\n\n<pre><code>Object.prototype.size = function () {\n    var size = 0,\n        key;\n    for (key in this) {\n        if (this.hasOwnProperty(key)) size++;\n    }\n    return size;\n};\n\nvar x = {\n    one: 1,\n    two: 2,\n    three: 3\n};\n\nx.size() === 3;\n</code></pre>\n\n<p>jsfiddle example: <a href=\"http://jsfiddle.net/qar4j/1/\" rel=\"nofollow\">http://jsfiddle.net/qar4j/1/</a></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 928001,
      "name": "shershams",
      "reputation": 2155
    }
  },
  {
    "soID": 18012581,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/18012581",
    "title": null,
    "body": "<p>Here is a completely different solution that will only work in more modern browsers (IE9+, Chrome, Firefox 4+, Opera 11.60+, Safari 5.1+)</p>\n\n<p>See <a href=\"http://jsfiddle.net/QHDt7/\" rel=\"noreferrer\" title=\"jsFiddle\">jsFiddle</a></p>\n\n<p>Setup your Associative Array class</p>\n\n<pre><code>/**\n * @constructor\n */\nAssociativeArray = function () {};\n\n// Make the length property work\nObject.defineProperty(AssociativeArray.prototype, \"length\", {\n    get: function () {\n        var count = 0;\n        for (var key in this) {\n            if (this.hasOwnProperty(key))\n                count++;\n        }\n        return count;\n    }\n});\n</code></pre>\n\n<p>Now you can use this code as follows...</p>\n\n<pre><code>var a1 = new AssociativeArray();\na1[\"prop1\"] = \"test\";\na1[\"prop2\"] = 1234;\na1[\"prop3\"] = \"something else\";\nalert(\"Length of array is \" + a1.length);\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 837649,
      "name": "Ally",
      "reputation": 2465
    }
  },
  {
    "soID": 18560314,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/18560314",
    "title": null,
    "body": "<p>Here's the most cross-browser solution.</p>\n\n<p>This is better than the accepted answer because it uses native Object.keys if exists.\nThus, it is the fastest for all modern browsers.</p>\n\n<pre><code>if (!Object.keys) {\n    Object.keys = function (obj) {\n        var arr = [],\n            key;\n        for (key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                arr.push(key);\n            }\n        }\n        return arr;\n    };\n}\n\nObject.keys(obj).length;\n</code></pre>\n",
    "score": 37,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 692528,
      "name": "Joon",
      "reputation": 2587
    }
  },
  {
    "soID": 21656259,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/21656259",
    "title": null,
    "body": "<p>If we have the hash </p>\n\n<blockquote>\n  <p>hash =  {\"a\" : \"b\", \"c\": \"d\"};</p>\n</blockquote>\n\n<p>we can get the length using the length of the keys which is the length of the hash:</p>\n\n<blockquote>\n  <p>keys(hash).length</p>\n</blockquote>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1846073,
      "name": "abo-elleef",
      "reputation": 896
    }
  },
  {
    "soID": 23571866,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/23571866",
    "title": null,
    "body": "<p>Like most JavaScript problems, there are many solutions.  You could extend the Object that for better or worse works like many other languages' Dictionary (+ first class citizens). Nothing wrong with that, but another option is to construct a new Object that meets your specific needs. </p>\n\n<pre><code>function uberject(obj){\n    this._count = 0;\n    for(var param in obj){\n        this[param] = obj[param];\n        this._count++;\n    }\n}\n\nuberject.prototype.getLength = function(){\n    return this._count;\n};\n\nvar foo = new uberject({bar:123,baz:456});\nalert(foo.getLength());\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1341417,
      "name": "Ron Sims II",
      "reputation": 338
    }
  },
  {
    "soID": 24446550,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/24446550",
    "title": null,
    "body": "<p>If you are using jQuery, just go with the object's <code>.length</code> method.</p>\n\n<p><code>$(object).length</code> will give you the length of the passed object.</p>\n\n<p><strong>UPDATE</strong> : This will always return 1 in case of object But works well with jQuery element.</p>\n",
    "score": -5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2578840,
      "name": "Piyush Balapure",
      "reputation": 192
    }
  },
  {
    "soID": 24510557,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/24510557",
    "title": null,
    "body": "<p>This method gets all your object's property names in an array, so you can get the length of that array which is equal to your object's keys' length.</p>\n\n<pre><code>Object.getOwnPropertyNames({\"hi\":\"Hi\",\"msg\":\"Message\"}).length; // =&gt; 2\n</code></pre>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2165104,
      "name": "venkat7668",
      "reputation": 1381
    }
  },
  {
    "soID": 26580920,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/26580920",
    "title": null,
    "body": "<p>Use something as simple as:</p>\n\n<pre><code>Object.keys(obj).length\n</code></pre>\n\n<p>It doesn't have to be difficult and definitely doesn't require another function to accomplish.</p>\n",
    "score": 128,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 911058,
      "name": "Michael",
      "reputation": 6436
    }
  },
  {
    "soID": 27805509,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/27805509",
    "title": null,
    "body": "<h2>Property</h2>\n\n<pre><code>Object.defineProperty(Object.prototype, 'length', {\n    get: function () {\n        var size = 0, key;\n        for (key in this)\n            if (this.hasOwnProperty(key))\n                size++;\n        return size;\n    }\n});\n</code></pre>\n\n<h2>Use</h2>\n\n<pre><code>var o = {a: 1, b: 2, c: 3};\nalert(o.length); // &lt;-- 3\no['foo'] = 123;\nalert(o.length); // &lt;-- 4\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 717267,
      "name": "Eduardo Cuomo",
      "reputation": 6626
    }
  },
  {
    "soID": 29579046,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/29579046",
    "title": null,
    "body": "<p><strong>Simple solution:</strong></p>\n\n<pre><code>  var myObject = {};      // ... your object goes here.\n\n  var length = 0;\n\n  for (var property in myObject) {\n    if (myObject.hasOwnProperty(property)){\n      length += 1;\n    }\n  };\n\n  console.log(length);    // logs 0 in my example.\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4132915,
      "name": "stylesenberg",
      "reputation": 369
    }
  },
  {
    "soID": 32593870,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/32593870",
    "title": null,
    "body": "<p>If you are using <a href=\"http://en.wikipedia.org/wiki/AngularJS\" rel=\"nofollow\">AngularJS</a> 1.x you can do things the AngularJS way by creating a filter and using the code from any of the other examples such as the following:</p>\n\n<pre><code>// Count the elements in an object\napp.filter('lengthOfObject', function() {\n  return function( obj ) {\n    var size = 0, key;\n    for (key in obj) {\n      if (obj.hasOwnProperty(key)) size++;\n    }\n   return size;\n }\n})\n</code></pre>\n\n<p><strong>Usage</strong></p>\n\n<p>In your controller:</p>\n\n<pre><code>$scope.filterResult = $filter('lengthOfObject')($scope.object)\n</code></pre>\n\n<p>Or in your view:</p>\n\n<pre><code>&lt;any ng-expression=\"object | lengthOfObject\"&gt;&lt;/any&gt;\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3851647,
      "name": "pcnate",
      "reputation": 838
    }
  },
  {
    "soID": 34734220,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/34734220",
    "title": null,
    "body": "<p>You can always do <code>Object.keys(myObject).length</code> to get the same result as <code>[].length</code> would give for normal array.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2156913,
      "name": "Pian0_M4n",
      "reputation": 1227
    }
  },
  {
    "soID": 35844733,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/35844733",
    "title": null,
    "body": "<p>If you don't care about supporting Internet Explorer 8 or lower, you can easily get the number of properties in an object by applying the following two steps:</p>\n\n<ol>\n<li>Run either <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" rel=\"nofollow noreferrer\"><strong><code>Object.keys()</code></strong></a> to get an array that contains the names of only those properties that are <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Enumerability_and_ownership_of_properties\" rel=\"nofollow noreferrer\"><strong>enumerable</strong></a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\" rel=\"nofollow noreferrer\"><strong><code>Object.getOwnPropertyNames()</code></strong></a> if you want to also include the names of properties that are not enumerable.</li>\n<li>Get the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/length\" rel=\"nofollow noreferrer\"><strong><code>.length</code></strong></a> property of that array.</li>\n</ol>\n\n<hr>\n\n<p>If you need to do this more than once, you could wrap this logic in a function:</p>\n\n<pre><code>function size(obj, enumerablesOnly) {\n    return enumerablesOnly === false ?\n        Object.getOwnPropertyNames(obj).length :\n        Object.keys(obj).length;\n}\n</code></pre>\n\n<p>How to use this particular function:</p>\n\n<pre><code>var myObj = Object.create({}, {\n    getFoo: {},\n    setFoo: {}\n});\nmyObj.Foo = 12;\n\nvar myArr = [1,2,5,4,8,15];\n\nconsole.log(size(myObj));        // Output : 1\nconsole.log(size(myObj, true));  // Output : 1\nconsole.log(size(myObj, false)); // Output : 3\nconsole.log(size(myArr));        // Output : 6\nconsole.log(size(myArr, true));  // Output : 6\nconsole.log(size(myArr, false)); // Output : 7\n</code></pre>\n\n<p>See also <a href=\"https://jsfiddle.net/0x11tv73/5/\" rel=\"nofollow noreferrer\"><strong>this Fiddle</strong></a> for a demo.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1946501,
      "name": "John Slegers",
      "reputation": 19424
    }
  },
  {
    "soID": 37307278,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/37307278",
    "title": null,
    "body": "<p>If you need an associative data structure that exposes its size, better use a map instead of an object.</p>\n\n<pre><code>var myMap = new Map();\nmyMap.set(\"firstname\", \"Gareth\");\nmyMap.set(\"lastname\", \"Simpson\");\nmyMap.set(\"age\", 21);\nmyMap.size; // 3\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1529630,
      "name": "Oriol",
      "reputation": 118791
    }
  },
  {
    "soID": 37537045,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/37537045",
    "title": null,
    "body": "<p>Use:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var myArray = new Object();\r\nmyArray[\"firstname\"] = \"Gareth\";\r\nmyArray[\"lastname\"] = \"Simpson\";\r\nmyArray[\"age\"] = 21;\r\nobj = Object.keys(myArray).length;\r\nconsole.log(obj)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6011619,
      "name": "Mahendra Kulkarni",
      "reputation": 682
    }
  },
  {
    "soID": 38816218,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/38816218",
    "title": null,
    "body": "<p>The solution work for many cases and cross browser:</p>\n\n<p><strong>Code</strong></p>\n\n<pre><code>var getTotal = function(collection) {\n\n    var length = collection['length'];\n    var isArrayObject =  typeof length == 'number' &amp;&amp; length &gt;= 0 &amp;&amp; length &lt;= Math.pow(2,53) - 1; // Number.MAX_SAFE_INTEGER\n\n    if(isArrayObject) {\n        return collection['length'];\n    }\n\n    i= 0;\n    for(var key in collection) {\n        if (collection.hasOwnProperty(key)) {\n            i++;\n        }\n    }\n\n    return i;\n};\n</code></pre>\n\n<p><strong>Data Examples:</strong></p>\n\n<pre><code>// case 1\nvar a = new Object();\na[\"firstname\"] = \"Gareth\";\na[\"lastname\"] = \"Simpson\";\na[\"age\"] = 21;\n\n//case 2\nvar b = [1,2,3];\n\n// case 3\nvar c = {};\nc[0] = 1;\nc.two = 2;\n</code></pre>\n\n<p><strong>Usage</strong></p>\n\n<pre><code>getLength(a); // 3\ngetLength(b); // 3\ngetLength(c); // 2\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4225143,
      "name": "virus",
      "reputation": 550
    }
  },
  {
    "soID": 39542137,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/39542137",
    "title": null,
    "body": "<p>You can simply use <code>Object.keys(obj).length</code> on any object to get its length. Object.keys returns an array containing all of the object <em>keys</em> (properties) which can come in handy for finding the length of that object using the length of the corresponding array. You can even write a <em>function</em> for this. Let's get <em>creative</em> and write a <strong>method</strong> for it as well (along with a more convienient getter property):</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function objLength(obj)\r\n{\r\n  return Object.keys(obj).length;\r\n}\r\n\r\nconsole.log(objLength({a:1, b:\"summit\", c:\"nonsense\"}));\r\n\r\n// Works perfectly fine\r\nvar obj = new Object();\r\nobj['fish'] = 30;\r\nobj['nullified content'] = null;\r\nconsole.log(objLength(obj));\r\n\r\n// It also works your way, which is creating it using the Object constructor\r\nObject.prototype.getLength = function() {\r\n   return Object.keys(this).length;\r\n}\r\nconsole.log(obj.getLength());\r\n\r\n// You can also write it as a method, which is more efficient as done so above\r\n\r\nObject.defineProperty(Object.prototype, \"length\", {get:function(){\r\n    return Object.keys(this).length;\r\n}});\r\nconsole.log(obj.length);\r\n\r\n// probably the most effictive approach is done so and demonstrated above which sets a getter property called \"length\" for objects which returns the equivalent value of getLength(this) or this.getLength()</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6368005,
      "name": "WEB_UI",
      "reputation": 249
    }
  },
  {
    "soID": 44114476,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/44114476",
    "title": null,
    "body": "<p>We can find the length of Object by using :</p>\n\n<pre><code>Object.values(myObject).length\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6390817,
      "name": "solanki...",
      "reputation": 512
    }
  },
  {
    "soID": 44909574,
    "parentID": 5223,
    "url": "https://stackoverflow.com/q/44909574",
    "title": null,
    "body": "<p>A bit late to the game, but a nice way to achieve this (IE9+ only) is to define a magic getter on the length property:</p>\n\n<pre><code>Object.defineProperty(Object.prototype, \"length\", {\n    get: function () {\n        return Object.keys(this).length;\n    }\n});\n</code></pre>\n\n<p>And you can just use it like so:</p>\n\n<pre><code>var myObj = { 'key': 'value' };\nmyObj.length;\n</code></pre>\n\n<p>Would give <code>1</code>.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1171032,
      "name": "MacroMan",
      "reputation": 716
    }
  },
  {
    "soID": 18085,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/18085",
    "title": null,
    "body": "<p>This way seems to work well:</p>\n\n<pre><code>function IsNumeric(input){\n    var RE = /^-{0,1}\\d*\\.{0,1}\\d+$/;\n    return (RE.test(input));\n}\n</code></pre>\n\n<p>And to test it:</p>\n\n<pre><code>// alert(TestIsNumeric());\n\nfunction TestIsNumeric(){\n    var results = ''\n    results += (IsNumeric('-1')?\"Pass\":\"Fail\") + \": IsNumeric('-1') =&gt; true\\n\";\n    results += (IsNumeric('-1.5')?\"Pass\":\"Fail\") + \": IsNumeric('-1.5') =&gt; true\\n\";\n    results += (IsNumeric('0')?\"Pass\":\"Fail\") + \": IsNumeric('0') =&gt; true\\n\";\n    results += (IsNumeric('0.42')?\"Pass\":\"Fail\") + \": IsNumeric('0.42') =&gt; true\\n\";\n    results += (IsNumeric('.42')?\"Pass\":\"Fail\") + \": IsNumeric('.42') =&gt; true\\n\";\n    results += (!IsNumeric('99,999')?\"Pass\":\"Fail\") + \": IsNumeric('99,999') =&gt; false\\n\";\n    results += (!IsNumeric('0x89f')?\"Pass\":\"Fail\") + \": IsNumeric('0x89f') =&gt; false\\n\";\n    results += (!IsNumeric('#abcdef')?\"Pass\":\"Fail\") + \": IsNumeric('#abcdef') =&gt; false\\n\";\n    results += (!IsNumeric('1.2.3')?\"Pass\":\"Fail\") + \": IsNumeric('1.2.3') =&gt; false\\n\";\n    results += (!IsNumeric('')?\"Pass\":\"Fail\") + \": IsNumeric('') =&gt; false\\n\";\n    results += (!IsNumeric('blah')?\"Pass\":\"Fail\") + \": IsNumeric('blah') =&gt; false\\n\";\n\n    return results;\n}\n</code></pre>\n\n<p>I borrowed that regex from <a href=\"http://www.codetoad.com/javascript/isnumeric.asp\" rel=\"noreferrer\">http://www.codetoad.com/javascript/isnumeric.asp</a>. Explanation:</p>\n\n<pre><code>/^ match beginning of string\n-{0,1} optional negative sign\n\\d* optional digits\n\\.{0,1} optional decimal point\n\\d+ at least one digit\n$/ match end of string\n</code></pre>\n",
    "score": 48,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 18148,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/18148",
    "title": null,
    "body": "<p>A couple of tests to add:</p>\n\n<pre><code>IsNumeric('01.05') =&gt; false\nIsNumeric('1.') =&gt; false\nIsNumeric('.') =&gt; false\n</code></pre>\n\n<p>I came up with this:</p>\n\n<pre><code>function IsNumeric(input) {\n    return /^-?(0|[1-9]\\d*|(?=\\.))(\\.\\d+)?$/.test(input);\n}\n</code></pre>\n\n<p>The solution covers:</p>\n\n<ul>\n<li>An optional negative sign at the beginning</li>\n<li>A single zero, or one or more digits not starting with 0, or nothing so long as a period follows</li>\n<li>A period that is followed by 1 or more numbers</li>\n</ul>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 18249,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/18249",
    "title": null,
    "body": "<p>I'd like to add the following:\n<pre><code>1. IsNumeric('0x89f') => true\n2. IsNumeric('075') => true\n</pre></code></p>\n\n<p>Positive hex numbers start with 0x and negative hex numbers start with -0x.\nPositive oct numbers start with 0 and negative oct numbers start with -0.\nThis one takes most of what has already been mentioned into consideration, but includes hex and octal numbers, negative scientific, Infinity and has removed decimal scientific (4e3.2 is not valid).</p>\n\n<pre><code>function IsNumeric(input){\n  var RE = /^-?(0|INF|(0[1-7][0-7]*)|(0x[0-9a-fA-F]+)|((0|[1-9][0-9]*|(?=[\\.,]))([\\.,][0-9]+)?([eE]-?\\d+)?))$/;\n  return (RE.test(input));\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19176,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/19176",
    "title": null,
    "body": "<p>Use the function <code>isNaN</code>. I believe if you test for <code>!isNaN(yourstringhere)</code> it works fine for any of these situations.</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19317,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/19317",
    "title": null,
    "body": "<p>Yeah, the built-in <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/isNaN\" rel=\"noreferrer\"><code>isNaN(object)</code></a> will be much faster than any regex parsing, because it's built-in and compiled, instead of interpreted on the fly.</p>\n\n<p>Although the results are somewhat different to what you're looking for (<a href=\"http://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_isnan\" rel=\"noreferrer\">try it</a>):</p>\n\n<pre><code>                                              // IS NUMERIC\ndocument.write(!isNaN('-1') + \"&lt;br /&gt;\");      // true\ndocument.write(!isNaN('-1.5') + \"&lt;br /&gt;\");    // true\ndocument.write(!isNaN('0') + \"&lt;br /&gt;\");       // true\ndocument.write(!isNaN('0.42') + \"&lt;br /&gt;\");    // true\ndocument.write(!isNaN('.42') + \"&lt;br /&gt;\");     // true\ndocument.write(!isNaN('99,999') + \"&lt;br /&gt;\");  // false\ndocument.write(!isNaN('0x89f') + \"&lt;br /&gt;\");   // true\ndocument.write(!isNaN('#abcdef') + \"&lt;br /&gt;\"); // false\ndocument.write(!isNaN('1.2.3') + \"&lt;br /&gt;\");   // false\ndocument.write(!isNaN('') + \"&lt;br /&gt;\");        // true\ndocument.write(!isNaN('blah') + \"&lt;br /&gt;\");    // false\n</code></pre>\n",
    "score": 29,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22604,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/22604",
    "title": null,
    "body": "<p>It can be done without RegExp as </p>\n\n<pre><code>function IsNumeric(data){\n    return parseFloat(data)==data;\n}\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 174921,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/174921",
    "title": null,
    "body": "<p>Arrrgh!  Don't listen to the regular expression answers.  RegEx is icky for this, and I'm not talking just performance.  It's so easy to make subtle, impossible to spot mistakes with your regular expression.  </p>\n\n<p>If you can't use <code>isNaN()</code>, this should work much better:</p>\n\n<pre><code>function IsNumeric(input)\n{\n    return (input - 0) == input &amp;&amp; (''+input).trim().length &gt; 0;\n}\n</code></pre>\n\n<p>Here's how it works:</p>\n\n<p>The <code>(input - 0)</code> expression forces JavaScript to do type coercion on your input value; it must first be interpreted as a number for the subtraction operation.  If that conversion to a number fails, the expression will result in <code>NaN</code>.  This <em>numeric</em> result is then compared to the original value you passed in.  Since the left hand side is now numeric, type coercion is again used.  Now that the input from both sides was coerced to the same type from the same original value, you would think they should always be the same (always true). However, there's a special rule that says <code>NaN</code> is never equal to <code>NaN</code>, and so a value that can't be converted to a number (and only values that cannot be converted to numbers) will result in false. </p>\n\n<p>The check on the length is for a special case involving empty strings. Also note that it falls down on your 0x89f test, but that's because in many environments that's an okay way to define a number literal.  If you want to catch that specific scenario you could add an additional check.  Even better, if that's your reason for not using <code>isNaN()</code> then just wrap your own function around <code>isNaN()</code> that can also do the additional check.</p>\n\n<p>In summary, <strong><em>if you want to know if a value can be converted to a number, actually try to convert it to a number.</em></strong></p>\n\n<hr>\n\n<p>I went back and did some research for <em>why</em> a whitespace string did not have the expected output, and I think I get it now: an empty string is coerced to <code>0</code> rather than <code>NaN</code>. Simply trimming the string before the length check will handle this case.</p>\n\n<p>Running the unit tests against the new code and it only fails on the infinity and boolean literals, and the only time that should be a problem is if you're generating code (really, who would type in a literal and check if it's numeric? You should <em>know</em>), and that would be some strange code to generate.</p>\n\n<p>But, again, <strong>the only reason ever to use this is if for some reason you have to avoid isNaN().</strong></p>\n",
    "score": 302,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1280236,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/1280236",
    "title": null,
    "body": "<p><a href=\"http://en.wikipedia.org/wiki/Yahoo!_UI_Library\" rel=\"noreferrer\">Yahoo! UI</a> uses this:</p>\n\n<pre><code>isNumber: function(o) {\n    return typeof o === 'number' &amp;&amp; isFinite(o);\n}\n</code></pre>\n",
    "score": 42,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1830844,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/1830844",
    "title": null,
    "body": "<p><a href=\"https://stackoverflow.com/questions/18082/validate-numbers-in-javascript-isnumeric/174921#174921\">@Joel's answer</a> is pretty close, but it will fail in the following cases:</p>\n\n<pre><code>// Whitespace strings:\nIsNumeric(' ') == true;\nIsNumeric('\\t\\t') == true;\nIsNumeric('\\n\\r') == true;\n\n// Number literals:\nIsNumeric(-1) == false;\nIsNumeric(0) == false;\nIsNumeric(1.1) == false;\nIsNumeric(8e5) == false;\n</code></pre>\n\n<p>Some time ago I had to implement an <code>IsNumeric</code> function, to find out if a variable contained a numeric value, <strong>regardless of its type</strong>, it could be a <code>String</code> containing a numeric value (I had to consider also exponential notation, etc.), a <code>Number</code> object, virtually anything could be passed to that function, I couldn't make any type assumptions,  taking care of type coercion (eg. <code>+true == 1;</code> but <code>true</code> shouldn't be considered as <code>\"numeric\"</code>).</p>\n\n<p>I think is worth sharing this set of <a href=\"http://run.plnkr.co/plunks/93FPpacuIcXqqKMecLdk/\" rel=\"nofollow noreferrer\"><strong>+30 unit tests</strong></a> (<a href=\"http://dl.getdropbox.com/u/35146/js/tests/isNumber.html\" rel=\"nofollow noreferrer\">old link</a>) made to numerous function implementations, and also share the one that passes all my tests:</p>\n\n<pre><code>function isNumeric(n) {\n  return !isNaN(parseFloat(n)) &amp;&amp; isFinite(n);\n}\n</code></pre>\n\n<p><strong>P.S.</strong> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN\" rel=\"nofollow noreferrer\">isNaN</a> &amp; <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite\" rel=\"nofollow noreferrer\">isFinite</a> have a confusing behavior due to forced conversion to number. In ES6, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\" rel=\"nofollow noreferrer\">Number.isNaN</a> &amp; <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\" rel=\"nofollow noreferrer\">Number.isFinite</a> would fix these issues. Keep that in mind when using them. </p>\n\n<hr>\n\n<p><strong>Update</strong> : \n<a href=\"https://github.com/jquery/jquery/blob/2.2-stable/src/core.js#L215\" rel=\"nofollow noreferrer\">Here's how jQuery does it now (2.2-stable)</a> : </p>\n\n<pre><code>isNumeric: function( obj ) {\n    var realStringObj = obj &amp;&amp; obj.toString();\n    return !jQuery.isArray( obj ) &amp;&amp; ( realStringObj - parseFloat( realStringObj ) + 1 ) &gt;= 0;\n}\n</code></pre>\n\n<p><strong>Update</strong> :\n<a href=\"https://github.com/angular/angular/blob/4.3.x/packages/common/src/pipes/number_pipe.ts#L172\" rel=\"nofollow noreferrer\">Angular 4.3</a> :</p>\n\n<pre><code>export function isNumeric(value: any): boolean {\n  return !isNaN(value - parseFloat(value));\n}\n</code></pre>\n",
    "score": 2617,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2928538,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/2928538",
    "title": null,
    "body": "<p>To me, this is the best way:</p>\n\n<pre><code>isNumber : function(v){\n   return typeof v === 'number' &amp;&amp; isFinite(v);\n}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4365908,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/4365908",
    "title": null,
    "body": "<p>This should work. Some of the functions provided here are flawed, also should be faster than any other function here.</p>\n\n<pre><code>        function isNumeric(n)\n        {\n            var n2 = n;\n            n = parseFloat(n);\n            return (n!='NaN' &amp;&amp; n2==n);\n        }\n</code></pre>\n\n<p>Explained:</p>\n\n<p>Create a copy of itself, then converts the number into float, then compares itself with the original number, if it is still a number, (whether integer or float) , and matches the original number, that means, it is indeed a number.</p>\n\n<p>It works with numeric strings as well as plain numbers. Does not work with hexadecimal numbers. </p>\n\n<p>Warning: use at your own risk, no guarantees.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4674364,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/4674364",
    "title": null,
    "body": "<p>The following may work as well.</p>\n\n<pre><code>function isNumeric(v) {\n         return v.length &gt; 0 &amp;&amp; !isNaN(v) &amp;&amp; v.search(/[A-Z]|[#]/ig) == -1;\n   };\n</code></pre>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4827657,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/4827657",
    "title": null,
    "body": "<pre><code>return (input - 0) == input &amp;&amp; input.length &gt; 0;\n</code></pre>\n\n<p>didn't work for me. When I put in an alert and tested, <code>input.length</code> was 'undefined'. I think there is no property to check integer length. So what I did was</p>\n\n<pre><code>var temp = '' + input;\nreturn (input - 0) == input &amp;&amp; temp.length &gt; 0;\n</code></pre>\n\n<p>It worked fine.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4975201,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/4975201",
    "title": null,
    "body": "<p>My solution,</p>\n\n<pre><code>function isNumeric(input) {\n    var number = /^\\-{0,1}(?:[0-9]+){0,1}(?:\\.[0-9]+){0,1}$/i;\n    var regex = RegExp(number);\n    return regex.test(input) &amp;&amp; input.length&gt;0;\n}\n</code></pre>\n\n<p>It appears to work in every situation, but I might be wrong.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6306344,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/6306344",
    "title": null,
    "body": "<p>An integer value can be verified by:</p>\n\n<pre><code>function isNumeric(value) {\n    var bool = isNaN(+value));\n    bool = bool || (value.indexOf('.') != -1);\n    bool = bool || (value.indexOf(\",\") != -1);\n    return !bool;\n};\n</code></pre>\n\n<p>This way is easier and faster! All tests are checked!</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 7349746,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/7349746",
    "title": null,
    "body": "<p>@Zoltan Lengyel 'other locales' comment (Apr 26 at 2:14) in @CMS Dec answer (2 '09 at 5:36):</p>\n\n<p>I would recommend testing for <code>typeof (n) === 'string'</code>:</p>\n\n<pre><code>    function isNumber(n) {\n        if (typeof (n) === 'string') {\n            n = n.replace(/,/, \".\");\n        }\n        return !isNaN(parseFloat(n)) &amp;&amp; isFinite(n);\n    }\n</code></pre>\n\n<p>This extends Zoltans recommendation to not only be able to test \"localized numbers\" like  <code>isNumber('12,50')</code> but also \"pure\" numbers like <code>isNumber(2011)</code>.</p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9776221,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/9776221",
    "title": null,
    "body": "<p>Well, I'm using this one I made...</p>\n\n<p>It's been working so far:</p>\n\n<pre><code>function checkNumber(value) {\n    if ( value % 1 == 0 )\n        return true;\n    else\n        return false;\n}\n</code></pre>\n\n<p>If you spot any problem with it, tell me, please.</p>\n\n<p>Like any numbers should be divisible by one with nothing left, I figured I could just use the module, and if you try dividing a string into a number the result wouldn't be that. So.</p>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10992737,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/10992737",
    "title": null,
    "body": "<p>If I'm not mistaken, this should match any valid JavaScript number value, excluding constants (<code>Infinity</code>, <code>NaN</code>) and the sign operators <code>+</code>/<code>-</code> (because they are not actually part of the number as far as I concerned, they are separate operators):</p>\n\n<p>I needed this for a tokenizer, where sending the number to JavaScript for evaluation wasn't an option... It's definitely not the shortest possible regular expression, but I believe it catches all the finer subtleties of JavaScript's number syntax.</p>\n\n<pre><code>/^(?:(?:(?:[1-9]\\d*|\\d)\\.\\d*|(?:[1-9]\\d*|\\d)?\\.\\d+|(?:[1-9]\\d*|\\d)) \n(?:[e]\\d+)?|0[0-7]+|0x[0-9a-f]+)$/i\n</code></pre>\n\n<p><strong>Valid numbers would include:</strong></p>\n\n<pre><code> - 0\n - 00\n - 01\n - 10\n - 0e1\n - 0e01\n - .0\n - 0.\n - .0e1\n - 0.e1\n - 0.e00\n - 0xf\n - 0Xf\n</code></pre>\n\n<p><strong>Invalid numbers would be</strong></p>\n\n<pre><code> - 00e1\n - 01e1\n - 00.0\n - 00x0\n - .\n - .e0\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11063402,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/11063402",
    "title": null,
    "body": "<p>I'm using simpler solution:</p>\n\n<pre><code>function isNumber(num) {\n    return parseFloat(num).toString() == num\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13618756,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/13618756",
    "title": null,
    "body": "<p>Here I've collected the \"good ones\" from this page and put them into a simple test pattern for you to evaluate on your own.</p>\n\n<p>For newbies, the <code>console.log</code> is a built in function (available in all modern browsers) that lets you output results to the JavaScript console (dig around, you'll find it) rather than having to output to your HTML page.</p>\n\n<pre><code>var isNumeric = function(val){\n    // --------------------------\n    // Recommended\n    // --------------------------\n\n    // jQuery - works rather well\n    // See CMS's unit test also: http://dl.getdropbox.com/u/35146/js/tests/isNumber.html\n    return !isNaN(parseFloat(val)) &amp;&amp; isFinite(val);\n\n    // Aquatic - good and fast, fails the \"0x89f\" test, but that test is questionable.\n    //return parseFloat(val)==val;\n\n    // --------------------------\n    // Other quirky options\n    // --------------------------\n    // Fails on \"\", null, newline, tab negative.\n    //return !isNaN(val);\n\n    // user532188 - fails on \"0x89f\"\n    //var n2 = val;\n    //val = parseFloat(val);\n    //return (val!='NaN' &amp;&amp; n2==val);\n\n    // Rafael - fails on negative + decimal numbers, may be good for isInt()?\n    // return ( val % 1 == 0 ) ? true : false;\n\n    // pottedmeat - good, but fails on stringy numbers, which may be a good thing for some folks?\n    //return /^-?(0|[1-9]\\d*|(?=\\.))(\\.\\d+)?$/.test(val);\n\n    // Haren - passes all\n    // borrowed from http://www.codetoad.com/javascript/isnumeric.asp\n    //var RE = /^-{0,1}\\d*\\.{0,1}\\d+$/;\n    //return RE.test(val);\n\n    // YUI - good for strict adherance to number type. Doesn't let stringy numbers through.\n    //return typeof val === 'number' &amp;&amp; isFinite(val);\n\n    // user189277 - fails on \"\" and \"\\n\"\n    //return ( val &gt;=0 || val &lt; 0);\n}\n\nvar tests = [0, 1, \"0\", 0x0, 0x000, \"0000\", \"0x89f\", 8e5, 0x23, -0, 0.0, \"1.0\", 1.0, -1.5, 0.42, '075', \"01\", '-01', \"0.\", \".0\", \"a\", \"a2\", true, false, \"#000\", '1.2.3', '#abcdef', '', \"\", \"\\n\", \"\\t\", '-', null, undefined];\n\nfor (var i=0; i&lt;tests.length; i++){\n    console.log( \"test \" + i + \":    \" + tests[i] + \"    \\t   \" + isNumeric(tests[i]) );\n}\n</code></pre>\n",
    "score": -4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 14932605,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/14932605",
    "title": null,
    "body": "<p>Since jQuery 1.7, you can use <a href=\"http://api.jquery.com/jQuery.isNumeric/\"><code>jQuery.isNumeric()</code></a>:</p>\n\n<pre><code>$.isNumeric('-1');      // true\n$.isNumeric('-1.5');    // true\n$.isNumeric('0');       // true\n$.isNumeric('0.42');    // true\n$.isNumeric('.42');     // true\n$.isNumeric('0x89f');   // true (valid hexa number)\n$.isNumeric('99,999');  // false\n$.isNumeric('#abcdef'); // false\n$.isNumeric('1.2.3');   // false\n$.isNumeric('');        // false\n$.isNumeric('blah');    // false\n</code></pre>\n\n<p>Just note that unlike what you said, <code>0x89f</code> is a valid number (hexa)</p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15043984,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/15043984",
    "title": null,
    "body": "<p>The accepted answer failed your test #7 and I guess it's because you changed your mind. So this is a response to the accepted answer, with which I had issues.</p>\n\n<p>During some projects I have needed to validate some data and be as certain as possible that it is a javascript numerical value that can be used in mathematical operations.</p>\n\n<p>jQuery, and some other javascript libraries already include such a function, usually called isNumeric. There is also a <a href=\"https://stackoverflow.com/a/1830844/592253\">post on stackoverflow</a> that has been widely accepted as the answer, the same general routine that the afore mentioned libraries are using.</p>\n\n<pre><code>function isNumber(n) {\n  return !isNaN(parseFloat(n)) &amp;&amp; isFinite(n);\n}\n</code></pre>\n\n<p>First, the code above would return true if the argument was an array of length 1, and that single element was of a type deemed as numeric by the above logic. In my opinion, if it's an array then its not numeric.</p>\n\n<p>To alleviate this problem, I added a check to discount arrays from the logic</p>\n\n<pre><code>function isNumber(n) {\n  return Object.prototype.toString.call(n) !== '[object Array]' &amp;&amp;!isNaN(parseFloat(n)) &amp;&amp; isFinite(n);\n}\n</code></pre>\n\n<p>Of course, you could also use <code>Array.isArray</code>, jquery <code>$.isArray</code> or prototype <code>Object.isArray</code> instead of <code>Object.prototype.toString.call(n) !== '[object Array]'</code></p>\n\n<p>My second issue was that Negative Hexadecimal integer literal strings (\"-0xA\" -> -10) were not being counted as numeric. However, Positive Hexadecimal integer literal strings (\"0xA\" -> 10) were treated as numeric.\nI needed both to be valid numeric.</p>\n\n<p>I then modified the logic to take this into account.</p>\n\n<pre><code>function isNumber(n) {\n  return Object.prototype.toString.call(n) !== '[object Array]' &amp;&amp;!isNaN(parseFloat(n)) &amp;&amp; isFinite(n.toString().replace(/^-/, ''));\n}\n</code></pre>\n\n<p>If you are worried about the creation of the regex each time the function is called then you could rewrite it within a closure, something like this</p>\n\n<pre><code>var isNumber = (function () {\n  var rx = /^-/;\n\n  return function (n) {\n      return Object.prototype.toString.call(n) !== '[object Array]' &amp;&amp;!isNaN(parseFloat(n)) &amp;&amp; isFinite(n.toString().replace(rx, ''));\n  };\n}());\n</code></pre>\n\n<p>I then took CMSs <a href=\"http://dl.getdropbox.com/u/35146/js/tests/isNumber.html\" rel=\"nofollow noreferrer\">+30 test cases</a> and cloned the <a href=\"http://jsfiddle.net/Xotic750/2q8pp/\" rel=\"nofollow noreferrer\">testing on jsfiddle</a> added my extra test cases and my above described solution.</p>\n\n<p>It may not replace the widely accepted/used answer but if this is more of what you are expecting as results from your isNumeric function then hopefully this will be of some help.</p>\n\n<p><strong>EDIT:</strong> As pointed out by <a href=\"https://stackoverflow.com/a/15230431/592253\">Bergi</a>, there are other possible objects that could be considered numeric and it would be better to whitelist than blacklist. With this in mind I would add to the criteria.</p>\n\n<p>I want my isNumeric function to consider only Numbers or Strings</p>\n\n<p>With this in mind, it would be better to use</p>\n\n<pre><code>function isNumber(n) {\n  return (Object.prototype.toString.call(n) === '[object Number]' || Object.prototype.toString.call(n) === '[object String]') &amp;&amp;!isNaN(parseFloat(n)) &amp;&amp; isFinite(n.toString().replace(/^-/, ''));\n}\n</code></pre>\n\n<p><strong>Test the solutions</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var testHelper = function() {\r\n\r\n  var testSuite = function() {\r\n    test(\"Integer Literals\", function() {\r\n      ok(isNumber(\"-10\"), \"Negative integer string\");\r\n      ok(isNumber(\"0\"), \"Zero string\");\r\n      ok(isNumber(\"5\"), \"Positive integer string\");\r\n      ok(isNumber(-16), \"Negative integer number\");\r\n      ok(isNumber(0), \"Zero integer number\");\r\n      ok(isNumber(32), \"Positive integer number\");\r\n      ok(isNumber(\"040\"), \"Octal integer literal string\");\r\n      ok(isNumber(0144), \"Octal integer literal\");\r\n      ok(isNumber(\"-040\"), \"Negative Octal integer literal string\");\r\n      ok(isNumber(-0144), \"Negative Octal integer literal\");\r\n      ok(isNumber(\"0xFF\"), \"Hexadecimal integer literal string\");\r\n      ok(isNumber(0xFFF), \"Hexadecimal integer literal\");\r\n      ok(isNumber(\"-0xFF\"), \"Negative Hexadecimal integer literal string\");\r\n      ok(isNumber(-0xFFF), \"Negative Hexadecimal integer literal\");\r\n    });\r\n\r\n    test(\"Foating-Point Literals\", function() {\r\n      ok(isNumber(\"-1.6\"), \"Negative floating point string\");\r\n      ok(isNumber(\"4.536\"), \"Positive floating point string\");\r\n      ok(isNumber(-2.6), \"Negative floating point number\");\r\n      ok(isNumber(3.1415), \"Positive floating point number\");\r\n      ok(isNumber(8e5), \"Exponential notation\");\r\n      ok(isNumber(\"123e-2\"), \"Exponential notation string\");\r\n    });\r\n\r\n    test(\"Non-Numeric values\", function() {\r\n      equals(isNumber(\"\"), false, \"Empty string\");\r\n      equals(isNumber(\"        \"), false, \"Whitespace characters string\");\r\n      equals(isNumber(\"\\t\\t\"), false, \"Tab characters string\");\r\n      equals(isNumber(\"abcdefghijklm1234567890\"), false, \"Alphanumeric character string\");\r\n      equals(isNumber(\"xabcdefx\"), false, \"Non-numeric character string\");\r\n      equals(isNumber(true), false, \"Boolean true literal\");\r\n      equals(isNumber(false), false, \"Boolean false literal\");\r\n      equals(isNumber(\"bcfed5.2\"), false, \"Number with preceding non-numeric characters\");\r\n      equals(isNumber(\"7.2acdgs\"), false, \"Number with trailling non-numeric characters\");\r\n      equals(isNumber(undefined), false, \"Undefined value\");\r\n      equals(isNumber(null), false, \"Null value\");\r\n      equals(isNumber(NaN), false, \"NaN value\");\r\n      equals(isNumber(Infinity), false, \"Infinity primitive\");\r\n      equals(isNumber(Number.POSITIVE_INFINITY), false, \"Positive Infinity\");\r\n      equals(isNumber(Number.NEGATIVE_INFINITY), false, \"Negative Infinity\");\r\n      equals(isNumber(new Date(2009, 1, 1)), false, \"Date object\");\r\n      equals(isNumber(new Object()), false, \"Empty object\");\r\n      equals(isNumber(function() {}), false, \"Instance of a function\");\r\n      equals(isNumber([]), false, \"Empty Array\");\r\n      equals(isNumber([\"-10\"]), false, \"Array Negative integer string\");\r\n      equals(isNumber([\"0\"]), false, \"Array Zero string\");\r\n      equals(isNumber([\"5\"]), false, \"Array Positive integer string\");\r\n      equals(isNumber([-16]), false, \"Array Negative integer number\");\r\n      equals(isNumber([0]), false, \"Array Zero integer number\");\r\n      equals(isNumber([32]), false, \"Array Positive integer number\");\r\n      equals(isNumber([\"040\"]), false, \"Array Octal integer literal string\");\r\n      equals(isNumber([0144]), false, \"Array Octal integer literal\");\r\n      equals(isNumber([\"-040\"]), false, \"Array Negative Octal integer literal string\");\r\n      equals(isNumber([-0144]), false, \"Array Negative Octal integer literal\");\r\n      equals(isNumber([\"0xFF\"]), false, \"Array Hexadecimal integer literal string\");\r\n      equals(isNumber([0xFFF]), false, \"Array Hexadecimal integer literal\");\r\n      equals(isNumber([\"-0xFF\"]), false, \"Array Negative Hexadecimal integer literal string\");\r\n      equals(isNumber([-0xFFF]), false, \"Array Negative Hexadecimal integer literal\");\r\n      equals(isNumber([1, 2]), false, \"Array with more than 1 Positive interger number\");\r\n      equals(isNumber([-1, -2]), false, \"Array with more than 1 Negative interger number\");\r\n    });\r\n  }\r\n\r\n  var functionsToTest = [\r\n\r\n    function(n) {\r\n      return !isNaN(parseFloat(n)) &amp;&amp; isFinite(n);\r\n    },\r\n\r\n    function(n) {\r\n      return !isNaN(n) &amp;&amp; !isNaN(parseFloat(n));\r\n    },\r\n\r\n    function(n) {\r\n      return !isNaN((n));\r\n    },\r\n\r\n    function(n) {\r\n      return !isNaN(parseFloat(n));\r\n    },\r\n\r\n    function(n) {\r\n      return typeof(n) != \"boolean\" &amp;&amp; !isNaN(n);\r\n    },\r\n\r\n    function(n) {\r\n      return parseFloat(n) === Number(n);\r\n    },\r\n\r\n    function(n) {\r\n      return parseInt(n) === Number(n);\r\n    },\r\n\r\n    function(n) {\r\n      return !isNaN(Number(String(n)));\r\n    },\r\n\r\n    function(n) {\r\n      return !isNaN(+('' + n));\r\n    },\r\n\r\n    function(n) {\r\n      return (+n) == n;\r\n    },\r\n\r\n    function(n) {\r\n      return n &amp;&amp; /^-?\\d+(\\.\\d+)?$/.test(n + '');\r\n    },\r\n\r\n    function(n) {\r\n      return isFinite(Number(String(n)));\r\n    },\r\n\r\n    function(n) {\r\n      return isFinite(String(n));\r\n    },\r\n\r\n    function(n) {\r\n      return !isNaN(n) &amp;&amp; !isNaN(parseFloat(n)) &amp;&amp; isFinite(n);\r\n    },\r\n\r\n    function(n) {\r\n      return parseFloat(n) == n;\r\n    },\r\n\r\n    function(n) {\r\n      return (n - 0) == n &amp;&amp; n.length &gt; 0;\r\n    },\r\n\r\n    function(n) {\r\n      return typeof n === 'number' &amp;&amp; isFinite(n);\r\n    },\r\n\r\n    function(n) {\r\n      return !Array.isArray(n) &amp;&amp; !isNaN(parseFloat(n)) &amp;&amp; isFinite(n.toString().replace(/^-/, ''));\r\n    }\r\n\r\n  ];\r\n\r\n\r\n  // Examines the functionsToTest array, extracts the return statement of each function\r\n  // and fills the toTest select element.\r\n  var fillToTestSelect = function() {\r\n    for (var i = 0; i &lt; functionsToTest.length; i++) {\r\n      var f = functionsToTest[i].toString();\r\n      var option = /[\\s\\S]*return ([\\s\\S]*);/.exec(f)[1];\r\n      $(\"#toTest\").append('&lt;option value=\"' + i + '\"&gt;' + (i + 1) + '. ' + option + '&lt;/option&gt;');\r\n    }\r\n  }\r\n\r\n  var performTest = function(functionNumber) {\r\n    reset(); // Reset previous test\r\n    $(\"#tests\").html(\"\"); //Clean test results\r\n    isNumber = functionsToTest[functionNumber]; // Override the isNumber global function with the one to test\r\n    testSuite(); // Run the test\r\n\r\n    // Get test results\r\n    var totalFail = 0;\r\n    var totalPass = 0;\r\n    $(\"b.fail\").each(function() {\r\n      totalFail += Number($(this).html());\r\n    });\r\n    $(\"b.pass\").each(function() {\r\n      totalPass += Number($(this).html());\r\n    });\r\n    $(\"#testresult\").html(totalFail + \" of \" + (totalFail + totalPass) + \" test failed.\");\r\n\r\n    $(\"#banner\").attr(\"class\", \"\").addClass(totalFail &gt; 0 ? \"fail\" : \"pass\");\r\n  }\r\n\r\n  return {\r\n    performTest: performTest,\r\n    fillToTestSelect: fillToTestSelect,\r\n    testSuite: testSuite\r\n  };\r\n}();\r\n\r\n\r\n$(document).ready(function() {\r\n  testHelper.fillToTestSelect();\r\n  testHelper.performTest(0);\r\n\r\n  $(\"#toTest\").change(function() {\r\n    testHelper.performTest($(this).children(\":selected\").val());\r\n  });\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\r\n&lt;script src=\"https://rawgit.com/Xotic750/testrunner-old/master/testrunner.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\r\n&lt;link href=\"https://rawgit.com/Xotic750/testrunner-old/master/testrunner.css\" rel=\"stylesheet\" type=\"text/css\"&gt;\r\n&lt;h1&gt;isNumber Test Cases&lt;/h1&gt;\r\n\r\n&lt;h2 id=\"banner\" class=\"pass\"&gt;&lt;/h2&gt;\r\n\r\n&lt;h2 id=\"userAgent\"&gt;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11&lt;/h2&gt;\r\n\r\n&lt;div id=\"currentFunction\"&gt;&lt;/div&gt;\r\n\r\n&lt;div id=\"selectFunction\"&gt;\r\n  &lt;label for=\"toTest\" style=\"font-weight:bold; font-size:Large;\"&gt;Select function to test:&lt;/label&gt;\r\n  &lt;select id=\"toTest\" name=\"toTest\"&gt;\r\n  &lt;/select&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div id=\"testCode\"&gt;&lt;/div&gt;\r\n\r\n&lt;ol id=\"tests\"&gt;\r\n  &lt;li class=\"pass\"&gt;\r\n    &lt;strong&gt;Integer Literals &lt;b style=\"color:black;\"&gt;(0, 10, 10)&lt;/b&gt;&lt;/strong&gt;\r\n\r\n    &lt;ol style=\"display: none;\"&gt;\r\n      &lt;li class=\"pass\"&gt;Negative integer string&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Zero string&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Positive integer string&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Negative integer number&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Zero integer number&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Positive integer number&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Octal integer literal string&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Octal integer literal&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Hexadecimal integer literal string&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Hexadecimal integer literal&lt;/li&gt;\r\n    &lt;/ol&gt;\r\n  &lt;/li&gt;\r\n\r\n  &lt;li class=\"pass\"&gt;\r\n    &lt;strong&gt;Foating-Point Literals &lt;b style=\"color:black;\"&gt;(0, 6, 6)&lt;/b&gt;&lt;/strong&gt;\r\n\r\n    &lt;ol style=\"display: none;\"&gt;\r\n      &lt;li class=\"pass\"&gt;Negative floating point string&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Positive floating point string&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Negative floating point number&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Positive floating point number&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Exponential notation&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Exponential notation string&lt;/li&gt;\r\n    &lt;/ol&gt;\r\n  &lt;/li&gt;\r\n\r\n  &lt;li class=\"pass\"&gt;\r\n    &lt;strong&gt;Non-Numeric values &lt;b style=\"color:black;\"&gt;(0, 18, 18)&lt;/b&gt;&lt;/strong&gt;\r\n\r\n    &lt;ol style=\"display: none;\"&gt;\r\n      &lt;li class=\"pass\"&gt;Empty string: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Whitespace characters string: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Tab characters string: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Alphanumeric character string: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Non-numeric character string: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Boolean true literal: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Boolean false literal: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Number with preceding non-numeric characters: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Number with trailling non-numeric characters: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Undefined value: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Null value: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;NaN value: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Infinity primitive: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Positive Infinity: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Negative Infinity: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Date object: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Empty object: false&lt;/li&gt;\r\n\r\n      &lt;li class=\"pass\"&gt;Instance of a function: false&lt;/li&gt;\r\n    &lt;/ol&gt;\r\n  &lt;/li&gt;\r\n&lt;/ol&gt;\r\n\r\n&lt;div id=\"main\"&gt;\r\n  This page contains tests for a set of isNumber functions. To see them, take a look at the source.\r\n&lt;/div&gt;\r\n\r\n&lt;div&gt;\r\n  &lt;p class=\"result\"&gt;Tests completed in 0 milliseconds.\r\n    &lt;br&gt;0 tests of 0 failed.&lt;/p&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 35,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15103743,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/15103743",
    "title": null,
    "body": "<p><strong>knockoutJs Inbuild library validation functions</strong> </p>\n\n<p>By extending it the field get validated</p>\n\n<p>1) number</p>\n\n<p><code>self.number = ko.observable(numberValue)</code><strong>.extend({ number: true})</strong>;</p>\n\n<p>TestCase</p>\n\n<pre><code>numberValue = '0.0'    --&gt; true\nnumberValue = '0'      --&gt; true\nnumberValue = '25'     --&gt; true\nnumberValue = '-1'     --&gt; true\nnumberValue = '-3.5'   --&gt; true\nnumberValue = '11.112' --&gt; true\nnumberValue = '0x89f'  --&gt; false\nnumberValue = ''       --&gt; false\nnumberValue = 'sfsd'   --&gt; false\nnumberValue = 'dg##$'  --&gt; false\n</code></pre>\n\n<p>2) digit</p>\n\n<p><code>self.number = ko.observable(numberValue)</code><strong>.extend({ digit: true})</strong>;</p>\n\n<p>TestCase</p>\n\n<pre><code>numberValue = '0'      --&gt; true\nnumberValue = '25'     --&gt; true\nnumberValue = '0.0'    --&gt; false\nnumberValue = '-1'     --&gt; false\nnumberValue = '-3.5'   --&gt; false\nnumberValue = '11.112' --&gt; false\nnumberValue = '0x89f'  --&gt; false\nnumberValue = ''       --&gt; false\nnumberValue = 'sfsd'   --&gt; false\nnumberValue = 'dg##$'  --&gt; false\n</code></pre>\n\n<p>3) min and max</p>\n\n<p><code>self.number = ko.observable(numberValue)</code><strong>.extend({ min: 5}).extend({ max: 10})</strong>;</p>\n\n<p>This field accept value between 5 and 10 only</p>\n\n<p>TestCase</p>\n\n<pre><code>numberValue = '5'    --&gt; true\nnumberValue = '6'    --&gt; true\nnumberValue = '6.5'  --&gt; true\nnumberValue = '9'    --&gt; true\nnumberValue = '11'   --&gt; false\nnumberValue = '0'    --&gt; false\nnumberValue = ''    --&gt; false\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15997937,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/15997937",
    "title": null,
    "body": "<p><a href=\"https://stackoverflow.com/questions/18082/validate-numbers-in-javascript-isnumeric/1839844#1839844\">@CMS' answer</a>: Your snippet failed on whitespace cases on my machine using nodejs. So I combined it with \n<a href=\"https://stackoverflow.com/questions/18082/validate-numbers-in-javascript-isnumeric/174921#174921\">@joel's answer</a> to the following:</p>\n\n<pre><code>is_float = function(v) {\n    return !isNaN(v) &amp;&amp; isFinite(v) &amp;&amp;\n        (typeof(v) == 'number' || v.replace(/^\\s+|\\s+$/g, '').length &gt; 0);\n}\n</code></pre>\n\n<p>I unittested it with those cases that are floats:</p>\n\n<pre><code>var t = [\n        0,\n        1.2123,\n        '0',\n        '2123.4',\n        -1,\n        '-1',\n        -123.423,\n        '-123.432',\n        07,\n        0xad,\n        '07',\n        '0xad'\n    ];\n</code></pre>\n\n<p>and those cases that are no floats (including empty whitespaces and objects / arrays):</p>\n\n<pre><code>    var t = [\n        'hallo',\n        [],\n        {},\n        'jklsd0',\n        '',\n        \"\\t\",\n        \"\\n\",\n        ' '\n    ];\n</code></pre>\n\n<p>Everything works as expected here. Maybe this helps.</p>\n\n<p>Full source code for this can be found <a href=\"https://github.com/philippkemmeter/philfw/blob/master/lib/ValueChecker.js\" rel=\"nofollow noreferrer\">here</a>.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16654296,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/16654296",
    "title": null,
    "body": "<p>Here's a lil bit improved version (probably the fastest way out there) that I use instead of exact jQuery's variant, I really don't know why don't they use this one:</p>\n\n<pre><code>function isNumeric(val) {\n    return !isNaN(+val) &amp;&amp; isFinite(val);\n}\n</code></pre>\n\n<p>The downside of jQuery's version is that if you pass a string with leading numerics and trailing letters like <code>\"123abc\"</code> the <code>parseFloat | parseInt</code> will extract the numeric fraction out and return 123, BUT, the second guard <code>isFinite</code> will fail it anyway.\nWith the unary <code>+</code> operator it will die on the very first guard since + throws NaN for such hybrids :)\nA little performance yet I think a solid semantic gain.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16973976,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/16973976",
    "title": null,
    "body": "<p>Only problem I had with @CMS's <a href=\"https://stackoverflow.com/a/1830844/623735\">answer</a> is the exclusion of NaN and Infinity, which are useful numbers for many situations. One way to check for NaN's is to check for numeric values that don't equal themselves, <code>NaN != NaN</code>!  So there are really 3 tests you'd like to deal with ...</p>\n\n<pre><code>function isNumber(n) {\n  n = parseFloat(n);\n  return !isNaN(n) || n != n;\n}\nfunction isFiniteNumber(n) {\n  n = parseFloat(n);\n  return !isNaN(n) &amp;&amp; isFinite(n);\n}    \nfunction isComparableNumber(n) {\n  n = parseFloat(n);\n  return (n &gt;=0 || n &lt; 0);\n}\n\nisFiniteNumber('NaN')\nfalse\nisFiniteNumber('OxFF')\ntrue\nisNumber('NaN')\ntrue\nisNumber(1/0-1/0)\ntrue\nisComparableNumber('NaN')\nfalse\nisComparableNumber('Infinity')\ntrue\n</code></pre>\n\n<p>My isComparableNumber is pretty close to another elegant <a href=\"https://stackoverflow.com/a/1561597/623735\">answer</a>, but handles hex and other string representations of numbers.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17559810,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/17559810",
    "title": null,
    "body": "<p>I found simple solution, probably not best but it's working fine :)</p>\n\n<p>So, what I do is next, I parse string to Int and check if length size of new variable which is now int type is same as length of original string variable. Logically if size is the same it means string is fully parsed to int and that is only possible if string is \"made\" only of numbers.</p>\n\n<pre><code>var val=1+$(e).val()+'';\nvar n=parseInt(val)+'';\nif(val.length == n.length )alert('Is int');\n</code></pre>\n\n<p>You can easily put that code in function and instead of alert use return true if int.\nRemember, if you use dot or comma in string you are checking it's still false cos you are parsing to int.</p>\n\n<p>Note: Adding 1+ on e.val so starting zero wouldn't be removed.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19056758,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/19056758",
    "title": null,
    "body": "<p>I have run the following below and it passes all the test cases...</p>\n\n<p>It makes use of the different way in which parseFloat and Number handle their inputs...</p>\n\n<pre><code>function IsNumeric(_in) {\n    return (parseFloat(_in) === Number(_in) &amp;&amp; Number(_in) !== NaN);\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 20712631,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/20712631",
    "title": null,
    "body": "<p>The following seems to works fine for many cases:</p>\n\n<pre><code>function isNumeric(num) {\n    return (num &gt; 0 || num === 0 || num === '0' || num &lt; 0) &amp;&amp; num !== true &amp;&amp; isFinite(num);\n}\n</code></pre>\n\n<p>This is built on top of this answer (which is for this answer too):\n<a href=\"https://stackoverflow.com/a/1561597/1985601\">https://stackoverflow.com/a/1561597/1985601</a></p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21096633,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/21096633",
    "title": null,
    "body": "<p>I realize the original question did not mention jQuery, but if you do use jQuery, you can do:</p>\n\n<pre><code>$.isNumeric(val)\n</code></pre>\n\n<p>Simple.</p>\n\n<p><a href=\"https://api.jquery.com/jQuery.isNumeric/\" rel=\"nofollow\">https://api.jquery.com/jQuery.isNumeric/</a> (as of jQuery 1.7)</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23049711,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/23049711",
    "title": null,
    "body": "<p>I realize this has been answered many times, but the following is a decent candidate which can be useful in some scenarios.</p>\n\n<p>it should be noted that it assumes that '.42' is NOT a number, and '4.' is NOT a number, so this should be taken into account.</p>\n\n<pre><code>function isDecimal(x) {\n  return '' + x === '' + +x;\n}\n\nfunction isInteger(x) {\n  return '' + x === '' + parseInt(x);\n}\n</code></pre>\n\n<p>The <code>isDecimal</code> passes the following test:</p>\n\n<pre><code>function testIsNumber(f) {\n  return f('-1') &amp;&amp; f('-1.5') &amp;&amp; f('0') &amp;&amp; f('0.42')\n    &amp;&amp; !f('.42') &amp;&amp; !f('99,999') &amp;&amp; !f('0x89f')\n    &amp;&amp; !f('#abcdef') &amp;&amp; !f('1.2.3') &amp;&amp; !f('') &amp;&amp; !f('blah');\n}\n</code></pre>\n\n<p>The idea here is that every number or integer has one \"canonical\" string representation, and every non-canonical representation should be rejected. So we cast to a number and back, and see if the result is the original string.</p>\n\n<p>Whether these functions are useful for you depends on the use case. One feature is that <em>distinct strings represent distinct numbers</em> (if both pass the <code>isNumber()</code> test).</p>\n\n<p>This is relevant e.g. for numbers as object property names.</p>\n\n<pre><code>var obj = {};\nobj['4'] = 'canonical 4';\nobj['04'] = 'alias of 4';\nobj[4];  // prints 'canonical 4' to the console.\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 25861284,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/25861284",
    "title": null,
    "body": "<p>I use this way to chack that varible is numeric:</p>\n\n<pre><code>v * 1 == v\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 27471814,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/27471814",
    "title": null,
    "body": "<pre><code>function isNumber(n) {\n    return (n===n+''||n===n-0) &amp;&amp; n*0==0 &amp;&amp; /\\S/.test(n);\n}\n</code></pre>\n\n<p><strong>Explanations:</strong></p>\n\n<p><code>(n===n-0||n===n+'')</code> verifies if n is a number or a string <em>(discards arrays, boolean, date, null, ...)</em>. You can replace <code>(n===n-0||n===n+'')</code> by <code>n!==undefined &amp;&amp; n!==null &amp;&amp; (n.constructor===Number||n.constructor===String)</code>: significantly faster but less concise.</p>\n\n<p><code>n*0==0</code> verifies if n is a finite number as <code>isFinite(n)</code> does. If you need to check strings that represent negative hexadecimal, just replace <code>n*0==0</code> by something like <code>n.toString().replace(/^\\s*-/,'')*0==0</code>.<br>\nIt costs a little of course, so if you don't need it, don't use it.</p>\n\n<p><code>/\\S/.test(n)</code> discards empty strings or strings, that contain only white-spaces <em>(necessary since <code>isFinite(n) or n*0==0</code> return a <code>false</code> positive in this case)</em>. You can reduce the number of call to <code>.test(n)</code> by using <code>(n!=0||/0/.test(n))</code> instead of <code>/\\S/.test(n)</code>, or you can use a slightly faster but less concise test such as <code>(n!=0||(n+'').indexOf('0')&gt;=0)</code>: tiny improvement.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 27622495,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/27622495",
    "title": null,
    "body": "<p>None of the answers return <code>false</code> for empty strings, a fix for that...</p>\n\n<pre><code>function is_numeric(n)\n{\n return (n != '' &amp;&amp; !isNaN(parseFloat(n)) &amp;&amp; isFinite(n));\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 34791974,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/34791974",
    "title": null,
    "body": "<p>One can use a type-check library like <a href=\"https://github.com/arasatasaygin/is.js\" rel=\"nofollow\">https://github.com/arasatasaygin/is.js</a> or just extract a check snippet from there (<a href=\"https://github.com/arasatasaygin/is.js/blob/master/is.js#L131\" rel=\"nofollow\">https://github.com/arasatasaygin/is.js/blob/master/is.js#L131</a>):</p>\n\n<pre><code>is.nan = function(value) {    // NaN is number :) \n  return value !== value;\n};\n // is a given value number?\nis.number = function(value) {\n    return !is.nan(value) &amp;&amp; Object.prototype.toString.call(value) === '[object Number]';\n};\n</code></pre>\n\n<p>In general if  you need it to validate parameter types (on entry point of function call), you can go with JSDOC-compliant contracts (<a href=\"https://www.npmjs.com/package/bycontract\" rel=\"nofollow\">https://www.npmjs.com/package/bycontract</a>):</p>\n\n<pre><code>/**\n * This is JSDOC syntax\n * @param {number|string} sum\n * @param {Object.&lt;string, string&gt;} payload\n * @param {function} cb\n */\nfunction foo( sum, payload, cb ) {\n  // Test if the contract is respected at entry point\n  byContract( arguments, [ \"number|string\", \"Object.&lt;string, string&gt;\", \"function\" ] );\n}\n// Test it\nfoo( 100, { foo: \"foo\" }, function(){}); // ok\nfoo( 100, { foo: 100 }, function(){}); // exception\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 35324436,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/35324436",
    "title": null,
    "body": "<p>If you need to validate a special set of decimals y\nyou can use this simple javascript:</p>\n\n<p><a href=\"http://codesheet.org/codesheet/x1kI7hAD\" rel=\"nofollow\">http://codesheet.org/codesheet/x1kI7hAD</a></p>\n\n<pre><code>&lt;input type=\"text\" name=\"date\" value=\"\" pattern=\"[0-9]){1,2}(\\.){1}([0-9]){2}\" maxlength=\"6\" placeholder=\"od npr.: 16.06\" onchange=\"date(this);\" /&gt;\n</code></pre>\n\n<p>The Javascript:</p>\n\n<pre><code>function date(inputField) {        \n  var isValid = /^([0-9]){1,2}(\\.){1}([0-9]){2}$/.test(inputField.value);   \n  if (isValid) {\n    inputField.style.backgroundColor = '#bfa';\n  } else {\n    inputField.style.backgroundColor = '#fba';\n  }\n  return isValid;\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 36318751,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/36318751",
    "title": null,
    "body": "<p><code>isNumeric=(el)=&gt;{return Boolean(parseFloat(el)) &amp;&amp; isFinite(el)}</code></p>\n\n<p>Nothing very different but we can use Boolean constructor</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 36533370,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/36533370",
    "title": null,
    "body": "<p>To check if a variable contains a valid number and not\njust a String which looks like a number,\n<code>Number.isFinite(value)</code> can be used.</p>\n\n<p>This is part of the language since\n<a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-number.isfinite\" rel=\"nofollow\">ES2015</a></p>\n\n<p>Examples:</p>\n\n<pre><code>Number.isFinite(Infinity)   // false\nNumber.isFinite(NaN)        // false\nNumber.isFinite(-Infinity)  // false\n\nNumber.isFinite(0)          // true\nNumber.isFinite(2e64)       // true\n\nNumber.isFinite('0')        // false\nNumber.isFinite(null)       // false\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 37331792,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/37331792",
    "title": null,
    "body": "<pre><code>function isNumeric(n) {\n    var isNumber = true;\n\n    $.each(n.replace(/ /g,'').toString(), function(i, v){\n        if(v!=',' &amp;&amp; v!='.' &amp;&amp; v!='-'){\n            if(isNaN(v)){\n               isNumber = false;\n               return false;\n            }\n         }\n     });\n\n    return isNumber;\n}\n\nisNumeric(-3,4567.89);   // true &lt;br&gt;\n\nisNumeric(3,4567.89);   // true &lt;br&gt;\n\nisNumeric(\"-3,4567.89\");   // true &lt;br&gt;\n\nisNumeric(3d,4567.89);   // false\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 37384296,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/37384296",
    "title": null,
    "body": "<p>Best way to do this is like this:</p>\n\n<pre><code>function isThisActuallyANumber(data){\n    return ( typeof data === \"number\" &amp;&amp; !isNaN(data) );\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 37975166,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/37975166",
    "title": null,
    "body": "<p>I think parseFloat function can do all the work here. The function below passes all the tests on this page including isNumeric(Infinity) == true:</p>\n\n<pre><code>function isNumeric(n)\n   {\n   return parseFloat(n) == n;\n   }\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 38882756,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/38882756",
    "title": null,
    "body": "<pre><code>function inNumeric(n){\n   return Number(n)+'' === n;\n}\n</code></pre>\n\n<p>If n is numeric <code>Number(n)</code> will return the numeric value and <code>+''</code> will turn it back to a string. But if n isn't numeric <code>Number(n)</code> will return <code>NaN</code> so it won't match the original <code>n</code></p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 41526723,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/41526723",
    "title": null,
    "body": "<p>I think my code is perfect ...</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>/**\r\n * @param {string} s\r\n * @return {boolean}\r\n */\r\nvar isNumber = function(s) {\r\n    return s.trim()!==\"\" &amp;&amp; !isNaN(Number(s));\r\n};</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 42018658,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/42018658",
    "title": null,
    "body": "<pre><code>$('.rsval').bind('keypress', function(e){  \n        var asciiCodeOfNumbers = [48,46, 49, 50, 51, 52, 53, 54, 54, 55, 56, 57];\n        var keynum = (!window.event) ? e.which : e.keyCode; \n        var splitn = this.value.split(\".\"); \n        var decimal = splitn.length;\n        var precision = splitn[1]; \n        if(decimal == 2 &amp;&amp; precision.length &gt;= 2  ) { console.log(precision , 'e');   e.preventDefault(); } \n        if( keynum == 46 ){  \n            if(decimal &gt; 2) { e.preventDefault(); }  \n        } \n        if ($.inArray(keynum, asciiCodeOfNumbers) == -1)\n            e.preventDefault();    \n  });\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 42419193,
    "parentID": 18082,
    "url": "https://stackoverflow.com/q/42419193",
    "title": null,
    "body": "<p>You can minimize this function in a lot of way, and you can also implement it with a custom regex for negative values or custom charts:</p>\n\n<pre><code>$('.number').on('input',function(){\n    var n=$(this).val().replace(/ /g,'').replace(/\\D/g,'');\n    if (!$.isNumeric(n))\n        $(this).val(n.slice(0, -1))\n    else\n        $(this).val(n)\n});\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 27510,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/27510",
    "title": null,
    "body": "<pre><code>if (somevariable == undefined) {\n  alert('the variable is not defined!');\n}\n</code></pre>\n\n<p>You can also make it into a function, as shown <a href=\"http://verens.com/archives/2005/07/25/isset-for-javascript/\" rel=\"nofollow noreferrer\">here</a>:</p>\n\n<pre><code>function isset(varname){\n  return(typeof(window[varname]) != 'undefined');\n}\n</code></pre>\n",
    "score": -15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1662,
      "name": "tslocum",
      "reputation": 1938
    }
  },
  {
    "soID": 27517,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/27517",
    "title": null,
    "body": "<p>In JavaScript there is <strong>null</strong> and there is <strong>undefined</strong>.  They have different meanings.</p>\n\n<ul>\n<li><strong>undefined</strong> means that the variable value has not been defined; it is not known what the value is.</li>\n<li><strong>null</strong> means that the variable value is defined and set to null (has no value).</li>\n</ul>\n\n<p>Marijn Haverbeke states, in his free, online book \"<a href=\"http://eloquentjavascript.net/\" rel=\"noreferrer\">Eloquent JavaScript</a>\" (emphasis mine):</p>\n\n<blockquote>\n  <p>There is also a similar value, null, whose meaning is 'this value is defined, but it does not have a value'. The difference in meaning between undefined and null is mostly academic, and usually not very interesting. <strong>In practical programs, it is often necessary to check whether something 'has a value'. In these cases, the expression something == undefined may be used, because, even though they are not exactly the same value, null == undefined will produce true.</strong></p>\n</blockquote>\n\n<p>So, I guess the best way to check if something was undefined would be:</p>\n\n<pre><code>if (something == undefined)\n</code></pre>\n\n<p>Hope this helps!</p>\n\n<p><strong>Edit:</strong> In response to your edit, object properties should work the same way.</p>\n\n<pre><code>var person = {\n    name: \"John\",\n    age: 28,\n    sex: \"male\"\n};\n\nalert(person.name); // \"John\"\nalert(person.fakeVariable); // undefined\n</code></pre>\n",
    "score": 115,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2273,
      "name": "Pandincus",
      "reputation": 7314
    }
  },
  {
    "soID": 27911,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/27911",
    "title": null,
    "body": "<p>The solution is incorrect. In JavaScript,</p>\n\n<pre><code>null == undefined\n</code></pre>\n\n<p>will return true, because they both are \"casted\" to a boolean and are false. The correct way would be to check</p>\n\n<pre><code>if (something === undefined)\n</code></pre>\n\n<p>which is the identity operator...</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 653,
      "name": "Ricky",
      "reputation": 4082
    }
  },
  {
    "soID": 3232194,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/3232194",
    "title": null,
    "body": "<pre><code>function isUnset(inp) {\n  return (typeof inp === 'undefined')\n}\n</code></pre>\n\n<p>Returns false if variable is set, and true if is undefined.</p>\n\n<p>Then use:</p>\n\n<pre><code>if (isUnset(var)) {\n  // initialize variable here\n}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 212307,
      "name": "Rixius",
      "reputation": 962
    }
  },
  {
    "soID": 3345556,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/3345556",
    "title": null,
    "body": "<pre><code>if ( typeof( something ) == \"undefined\") \n</code></pre>\n\n<p>This worked for me while the others didn't.</p>\n",
    "score": 36,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 403606,
      "name": "Kevin",
      "reputation": 361
    }
  },
  {
    "soID": 3550319,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/3550319",
    "title": null,
    "body": "<p>I believe there are a number of incorrect answers to this topic. Contrary to common belief, \"undefined\" is NOT a keyword in JavaScript and can in fact have a value assigned to it.</p>\n\n<pre><code>// Degenerate code. DO NOT USE.\nvar undefined = false;  // Shockingly, this is completely legal!\nif (myVar === undefined) {\n    alert(\"You have been misled. Run away!\");\n}\n</code></pre>\n\n<p>Additionally, <code>myVar === undefined</code> will raise an error in the situation where myVar is undeclared.</p>\n\n<p>The most robust way to perform this test is:</p>\n\n<pre><code>if (typeof myVar === \"undefined\")\n</code></pre>\n\n<p>This will always return the correct result, and even handles the situation where <code>myVar</code> is not declared.</p>\n",
    "score": 735,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 190371,
      "name": "MarkPflug",
      "reputation": 15065
    }
  },
  {
    "soID": 3770178,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/3770178",
    "title": null,
    "body": "<p>I'm not sure where the origin of using <code>===</code> with <code>typeof</code> came from, and as a convention I see it used in many libraries, but the typeof operator returns a string literal, and we know that up front, so why would you also want to type check it too?</p>\n\n<pre><code>typeof x;                      // some string literal \"string\", \"object\", \"undefined\"\nif (typeof x === \"string\") {   // === is redundant because we already know typeof returns a string literal\nif (typeof x == \"string\") {    // sufficient\n</code></pre>\n",
    "score": 31,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 455129,
      "name": "Eric",
      "reputation": 343
    }
  },
  {
    "soID": 6274093,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/6274093",
    "title": null,
    "body": "<p>The issue boils down to three cases:</p>\n\n<ol>\n<li>The object has the property and its value is not <code>undefined</code>.</li>\n<li>The object has the property and its value is <code>undefined</code>.</li>\n<li>The object does not have the property.</li>\n</ol>\n\n<p>This tells us something I consider important:</p>\n\n<p><strong>There is a difference between an undefined member and a defined member with an undefined value.</strong></p>\n\n<p>But unhappily <code>typeof obj.foo</code> does not tell us which of the three cases we have. However we can combine this with <code>\"foo\" in obj</code> to distinguish the cases.</p>\n\n<pre><code>                               |  typeof obj.x === 'undefined' | !(\"x\" in obj)\n1.                     { x:1 } |  false                        | false\n2.    { x : (function(){})() } |  true                         | false\n3.                          {} |  true                         | true\n</code></pre>\n\n<p>Its worth noting that these tests are the same for <code>null</code> entries too</p>\n\n<pre><code>                               |  typeof obj.x === 'undefined' | !(\"x\" in obj)\n                    { x:null } |  false                        | false\n</code></pre>\n\n<p>I'd argue that in some cases it makes more sense (and is clearer) to check whether the property is there, than checking whether it is undefined, and the only case where this check will be different is case 2, the rare case of an actual entry in the object with an undefined value.</p>\n\n<p>For example: I've just been refactoring a bunch of code that had a bunch of checks whether an object had a given property.</p>\n\n<pre><code>if( typeof blob.x != 'undefined' ) {  fn(blob.x); }\n</code></pre>\n\n<p>Which was clearer when written without a check for undefined.</p>\n\n<pre><code>if( \"x\" in blob ) { fn(blob.x); }\n</code></pre>\n\n<p>But as has been mentioned these are not exactly the same (but are more than good enough for my needs). </p>\n",
    "score": 54,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 221955,
      "name": "Michael Anderson",
      "reputation": 35562
    }
  },
  {
    "soID": 7041744,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/7041744",
    "title": null,
    "body": "<p>If you do</p>\n\n<pre><code>if (myvar == undefined )\n{ \n    alert('var does not exists or is not initialized');\n}\n</code></pre>\n\n<p>it will fail when the variable <code>myvar</code> does not exists, because myvar is not defined, so the script is broken and the test has no effect.</p>\n\n<p>Because the window object has a global scope (default object) outside a function, a declaration will be 'attached' to the window object.</p>\n\n<p>For example:</p>\n\n<pre><code>var myvar = 'test';\n</code></pre>\n\n<p>The global variable <em>myvar</em> is the same as <em>window.myvar</em> or <em>window['myvar']</em></p>\n\n<p>To avoid errors to test when a global variable exists, you better use:</p>\n\n<pre><code>if(window.myvar == undefined )\n{ \n    alert('var does not exists or is not initialized');\n}\n</code></pre>\n\n<p>The question if a variable really exists doesn't matter, its value is incorrect. Otherwise, it is silly to initialize variables with undefined, and it is better use the value false to initialize. When you know that all variables that you declare are initialized with false, you can simply check its type or rely on <code>!window.myvar</code> to check if it has a proper/valid value. So even when the variable is not defined then <code>!window.myvar</code> is the same for <code>myvar = undefined</code> or <code>myvar = false</code> or <code>myvar = 0</code>.</p>\n\n<p>When you expect a specific type, test the type of the variable. To speed up testing a condition you better do:</p>\n\n<pre><code>if( !window.myvar || typeof window.myvar != 'string' )\n{\n    alert('var does not exists or is not type of string');\n}\n</code></pre>\n\n<p>When the first and simple condition is true, the interpreter skips the next tests. </p>\n\n<p>It is always better to use the instance/object of the variable to check if it got a valid value. It is more stable and is a better way of programming.  </p>\n\n<p>(y)</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 565244,
      "name": "Erwinus",
      "reputation": 2980
    }
  },
  {
    "soID": 7793028,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/7793028",
    "title": null,
    "body": "<p>You can get an array all undefined with path using the following code.</p>\n\n<pre><code> function getAllUndefined(object) {\n\n        function convertPath(arr, key) {\n            var path = \"\";\n            for (var i = 1; i &lt; arr.length; i++) {\n\n                path += arr[i] + \"-&gt;\";\n            }\n            path += key;\n            return path;\n        }\n\n\n        var stack = [];\n        var saveUndefined= [];\n        function getUndefiend(obj, key) {\n\n            var t = typeof obj;\n            switch (t) {\n                case \"object\":\n                    if (t === null) {\n                        return false;\n                    }\n                    break;\n                case \"string\":\n                case \"number\":\n                case \"boolean\":\n                case \"null\":\n                    return false;\n                default:\n                    return true;\n            }\n            stack.push(key);\n            for (k in obj) {\n                if (obj.hasOwnProperty(k)) {\n                    v = getUndefiend(obj[k], k);\n                    if (v) {\n                        saveUndefined.push(convertPath(stack, k));\n                    }\n                }\n            }\n            stack.pop();\n\n        }\n\n        getUndefiend({\n            \"\": object\n        }, \"\");\n        return saveUndefined;\n    }\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/anoop26667/9XbEK/\" rel=\"noreferrer\">jsFiddle</a> link</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 460942,
      "name": "Anoop",
      "reputation": 17890
    }
  },
  {
    "soID": 9342877,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/9342877",
    "title": null,
    "body": "<p><code>Object.hasOwnProperty(o, 'propertyname');</code></p>\n\n<p>This doesn't look up through the prototype chain, however.</p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1419479,
      "name": "Corey Richardson",
      "reputation": 1626
    }
  },
  {
    "soID": 12589152,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/12589152",
    "title": null,
    "body": "<p>I didn't see (hope I didn't miss it) anyone checking the object before the property. So, this is the shortest and most effective (though not necessarily the most clear):</p>\n\n<pre><code>if (obj &amp;&amp; obj.prop) {\n  // Do something;\n}\n</code></pre>\n\n<p>If the obj or obj.prop is undefined, null, or \"falsy\", the if statement will not execute the code block. This is <em>usually</em> the desired behavior in most code block statements (in JavaScript).</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 836474,
      "name": "Joe Johnson",
      "reputation": 1443
    }
  },
  {
    "soID": 14306293,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/14306293",
    "title": null,
    "body": "<p>Crossposting my <a href=\"https://stackoverflow.com/a/14305002/1037948\">answer</a> from related question <a href=\"https://stackoverflow.com/questions/3390396/how-to-check-for-undefined-in-javascript/\">How to check for &quot;undefined&quot; in JavaScript?</a></p>\n\n<p><em>Specific to this question, see test cases with <code>someObject.&lt;whatever&gt;</code>.</em></p>\n\n<hr>\n\n<p>Some scenarios illustrating the results of the various answers:\n<a href=\"http://jsfiddle.net/drzaus/UVjM4/\" rel=\"nofollow noreferrer\">http://jsfiddle.net/drzaus/UVjM4/</a></p>\n\n<p><em>(Note that the use of <code>var</code> for <code>in</code> tests make a difference when in a scoped wrapper)</em></p>\n\n<p>Code for reference:</p>\n\n<pre><code>(function(undefined) {\n    var definedButNotInitialized;\n    definedAndInitialized = 3;\n    someObject = {\n        firstProp: \"1\"\n        , secondProp: false\n        // , undefinedProp not defined\n    }\n    // var notDefined;\n\n    var tests = [\n        'definedButNotInitialized in window',\n        'definedAndInitialized in window',\n        'someObject.firstProp in window',\n        'someObject.secondProp in window',\n        'someObject.undefinedProp in window',\n        'notDefined in window',\n\n        '\"definedButNotInitialized\" in window',\n        '\"definedAndInitialized\" in window',\n        '\"someObject.firstProp\" in window',\n        '\"someObject.secondProp\" in window',\n        '\"someObject.undefinedProp\" in window',\n        '\"notDefined\" in window',\n\n        'typeof definedButNotInitialized == \"undefined\"',\n        'typeof definedButNotInitialized === typeof undefined',\n        'definedButNotInitialized === undefined',\n        '! definedButNotInitialized',\n        '!! definedButNotInitialized',\n\n        'typeof definedAndInitialized == \"undefined\"',\n        'typeof definedAndInitialized === typeof undefined',\n        'definedAndInitialized === undefined',\n        '! definedAndInitialized',\n        '!! definedAndInitialized',\n\n        'typeof someObject.firstProp == \"undefined\"',\n        'typeof someObject.firstProp === typeof undefined',\n        'someObject.firstProp === undefined',\n        '! someObject.firstProp',\n        '!! someObject.firstProp',\n\n        'typeof someObject.secondProp == \"undefined\"',\n        'typeof someObject.secondProp === typeof undefined',\n        'someObject.secondProp === undefined',\n        '! someObject.secondProp',\n        '!! someObject.secondProp',\n\n        'typeof someObject.undefinedProp == \"undefined\"',\n        'typeof someObject.undefinedProp === typeof undefined',\n        'someObject.undefinedProp === undefined',\n        '! someObject.undefinedProp',\n        '!! someObject.undefinedProp',\n\n        'typeof notDefined == \"undefined\"',\n        'typeof notDefined === typeof undefined',\n        'notDefined === undefined',\n        '! notDefined',\n        '!! notDefined'\n    ];\n\n    var output = document.getElementById('results');\n    var result = '';\n    for(var t in tests) {\n        if( !tests.hasOwnProperty(t) ) continue; // bleh\n\n        try {\n            result = eval(tests[t]);\n        } catch(ex) {\n            result = 'Exception--' + ex;\n        }\n        console.log(tests[t], result);\n        output.innerHTML += \"\\n\" + tests[t] + \": \" + result;\n    }\n})();\n</code></pre>\n\n<p>And results:</p>\n\n<pre><code>definedButNotInitialized in window: true\ndefinedAndInitialized in window: false\nsomeObject.firstProp in window: false\nsomeObject.secondProp in window: false\nsomeObject.undefinedProp in window: true\nnotDefined in window: Exception--ReferenceError: notDefined is not defined\n\"definedButNotInitialized\" in window: false\n\"definedAndInitialized\" in window: true\n\"someObject.firstProp\" in window: false\n\"someObject.secondProp\" in window: false\n\"someObject.undefinedProp\" in window: false\n\"notDefined\" in window: false\ntypeof definedButNotInitialized == \"undefined\": true\ntypeof definedButNotInitialized === typeof undefined: true\ndefinedButNotInitialized === undefined: true\n! definedButNotInitialized: true\n!! definedButNotInitialized: false\ntypeof definedAndInitialized == \"undefined\": false\ntypeof definedAndInitialized === typeof undefined: false\ndefinedAndInitialized === undefined: false\n! definedAndInitialized: false\n!! definedAndInitialized: true\ntypeof someObject.firstProp == \"undefined\": false\ntypeof someObject.firstProp === typeof undefined: false\nsomeObject.firstProp === undefined: false\n! someObject.firstProp: false\n!! someObject.firstProp: true\ntypeof someObject.secondProp == \"undefined\": false\ntypeof someObject.secondProp === typeof undefined: false\nsomeObject.secondProp === undefined: false\n! someObject.secondProp: true\n!! someObject.secondProp: false\ntypeof someObject.undefinedProp == \"undefined\": true\ntypeof someObject.undefinedProp === typeof undefined: true\nsomeObject.undefinedProp === undefined: true\n! someObject.undefinedProp: true\n!! someObject.undefinedProp: false\ntypeof notDefined == \"undefined\": true\ntypeof notDefined === typeof undefined: true\nnotDefined === undefined: Exception--ReferenceError: notDefined is not defined\n! notDefined: Exception--ReferenceError: notDefined is not defined\n!! notDefined: Exception--ReferenceError: notDefined is not defined\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1037948,
      "name": "drzaus",
      "reputation": 12141
    }
  },
  {
    "soID": 18135509,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/18135509",
    "title": null,
    "body": "<p>What does this mean: <strong>\"undefined object property\"</strong>?</p>\n\n<p>Actually it can mean two quite different things! First, it can mean <em>the property that has never been defined</em> in the object and, second, it can mean the <em>property that has an undefined value</em>. Let's look at this code:</p>\n\n<pre><code>var o = { a: undefined }\n</code></pre>\n\n<p>Is <code>o.a</code> undefined? Yes! Its value is undefined. Is <code>o.b</code> undefined? Sure! There is no property 'b' at all! OK, see now how different approaches behave in both situations:</p>\n\n<pre><code>typeof o.a == 'undefined' // true\ntypeof o.b == 'undefined' // true\no.a === undefined // true\no.b === undefined // true\n'a' in o // true\n'b' in o // false\n</code></pre>\n\n<p>We can clearly see that <code>typeof obj.prop == 'undefined'</code> and <code>obj.prop === undefined</code> are equivalent, and they do not distinguish those different situations. And <code>'prop' in obj</code> can detect the situation when a property hasn't been defined at all and doesn't pay attention to the property value which may be undefined.</p>\n\n<h2>So what to do?</h2>\n\n<p>1) You want to know if a property is undefined by either the first or second meaning (the most typical situation).</p>\n\n<pre><code>obj.prop === undefined // IMHO, see \"final fight\" below\n</code></pre>\n\n<p>2) You want to just know if object has some property and don't care about its value.</p>\n\n<pre><code>'prop' in obj\n</code></pre>\n\n<h2>Notes:</h2>\n\n<ul>\n<li>You can't check an object and its property at the same time. For example, this <code>x.a === undefined</code> or this <code>typeof x.a == 'undefined'</code> raises <code>ReferenceError: x is not defined</code> if x is not defined.</li>\n<li>Variable <code>undefined</code> is a global variable (so actually it is <code>window.undefined</code> in browsers). It has been supported since ECMAScript 1st Edition and since ECMAScript 5 it is <strong>read only</strong>. So in modern browsers it can't be <em>redefined to true</em> as many authors love to frighten us with, but this is still a true for older browsers.</li>\n</ul>\n\n<h2>Final fight: <code>obj.prop === undefined</code> vs <code>typeof obj.prop == 'undefined'</code></h2>\n\n<p>Pluses of <code>obj.prop === undefined</code>:</p>\n\n<ul>\n<li>It's a bit shorter and looks a bit prettier</li>\n<li>The JavaScript engine will give you an error if you have misspelled <code>undefined</code></li>\n</ul>\n\n<p>Minuses of <code>obj.prop === undefined</code>:</p>\n\n<ul>\n<li><code>undefined</code> can be overridden in old browsers</li>\n</ul>\n\n<p>Pluses of <code>typeof obj.prop == 'undefined'</code>:</p>\n\n<ul>\n<li>It is really universal! It works in new and old browsers.</li>\n</ul>\n\n<p>Minuses of <code>typeof obj.prop == 'undefined'</code>:</p>\n\n<ul>\n<li><code>'undefned'</code> (<em>misspelled</em>) here is just a string constant, so the JavaScript engine can't help you if you have misspelled it like I just did.</li>\n</ul>\n\n<h2>Update (for server-side JavaScript):</h2>\n\n<p>Node.js supports the global variable <code>undefined</code> as <code>global.undefined</code> (it can also be used without the 'global' prefix). I don't know about other implementations of server-side JavaScript.</p>\n",
    "score": 85,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1823469,
      "name": "Konstantin Smolyanin",
      "reputation": 8927
    }
  },
  {
    "soID": 18254258,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/18254258",
    "title": null,
    "body": "<p>Here is my situation:</p>\n\n<p>I am using the result of a REST call.\nThe result should be parsed from JSON to a JavaScript object.</p>\n\n<p>There is one error I need to defend.\nIf the args to the rest call were incorrect as far as the user specifying the args wrong, the rest call comes back basically empty.</p>\n\n<p>While using this post to help me defend against this, I tried this.</p>\n\n<pre><code>if( typeof restResult.data[0] === \"undefined\" ) { throw  \"Some error\"; }\n</code></pre>\n\n<p>For my situation, if restResult.data[0] === \"object\", then I can safely start inspecting the rest of the members.  If undefined then throw the error as above.</p>\n\n<p>What I am saying is that for my situation, all the suggestions above in this post did not work.  I'm not saying I'm right and everyone is wrong.  I am not a JavaScript master at all, but hopefully this will help someone.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 352033,
      "name": "wayneseymour",
      "reputation": 124
    }
  },
  {
    "soID": 20679527,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/20679527",
    "title": null,
    "body": "<p>In the article <em><a href=\"http://flippinawesome.org/2013/12/09/exploring-the-abyss-of-null-and-undefined-in-javascript/\" rel=\"noreferrer\">Exploring the Abyss of Null and Undefined in JavaScript </a></em> I read that frameworks like <a href=\"https://en.wikipedia.org/wiki/Underscore.js\" rel=\"noreferrer\">Underscore.js</a> use this function:</p>\n\n<pre><code>function isUndefined(obj){\n    return obj === void 0;\n}\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 788840,
      "name": "Marthijn",
      "reputation": 2259
    }
  },
  {
    "soID": 20883574,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/20883574",
    "title": null,
    "body": "<p>Compare with <code>void 0</code>, for terseness.</p>\n\n<pre><code>if (foo !== void 0)\n</code></pre>\n\n<p>It's not as verbose as <code>if (typeof foo !== 'undefined')</code></p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 389745,
      "name": "bevacqua",
      "reputation": 23430
    }
  },
  {
    "soID": 21682564,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/21682564",
    "title": null,
    "body": "<h2>'<em>if (window.x) { }</em>' is error safe</h2>\n\n<p>Most likely you want <code>if (window.x)</code>. This check is safe even if x hasn't been declared (<code>var x;</code>) - browser doesn't throw an error. </p>\n\n<h2>Example: I want to know if my browser supports History API</h2>\n\n<pre><code>if (window.history) {\n    history.call_some_function();\n}\n</code></pre>\n\n<h2>How this works:</h2>\n\n<p><strong>window</strong> is an object which holds all global variables as its members, and it is legal to try to access a non-existing member. If <strong>x</strong> hasn't been declared or hasn't been set then <code>window.x</code> returns <strong>undefined</strong>. <strong>undefined</strong> leads to <strong>false</strong> when <strong>if()</strong> evaluates it.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2088061,
      "name": "DenisS",
      "reputation": 978
    }
  },
  {
    "soID": 22053469,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/22053469",
    "title": null,
    "body": "<p>Many of the existing answers are misleading at best.</p>\n\n<p><em>Never</em> use <code>typeof x === \"undefined\"</code>.  (Or <code>== \"undefined\"</code> for that matter.) As with all “never”s, there are a few exceptional cases, but the majority of the time? If you don’t know whether a real variable is defined in your current scope, you are doing something wrong, and may <a href=\"https://bugs.chromium.org/p/project-zero/issues/detail?id=1225&amp;desc=6\" rel=\"noreferrer\">put your users at risk</a>. The <code>typeof</code> check is really useful if you want to introduce a ton of potential for error by making a typo.</p>\n\n<p>Of course, this potential already exists in the case of object properties, which appears to be the topic of this question. Let’s just ignore the <code>typeof</code> check, then, because it’ll do more harm than good, and it’s a pain to read. You’re intuitively checking a value, not a type.</p>\n\n<pre><code>var hasFoo = obj.foo !== undefined;\n</code></pre>\n\n<p>The “default value” of a property on an object is <code>undefined</code>. <code>undefined</code> can also be set as the value on a property. This is the check you will want some of the time.</p>\n\n<pre><code>var hasFoo = 'foo' in obj;\n</code></pre>\n\n<p>This will check for the existence of the <code>foo</code> property somewhere along <code>obj</code>’s prototype chain, regardless of value (including <code>undefined</code>).</p>\n\n<pre><code>var hasFoo = obj.hasOwnProperty('foo');\n</code></pre>\n\n<p>This will check for the existence of the <code>foo</code> property at the end of <code>obj</code>’s prototype chain, i.e. for properties directly on <code>obj</code>.</p>\n\n<pre><code>var hasFoo = Object.prototype.hasOwnProperty.call(obj, 'foo');\n</code></pre>\n\n<p>This is the same as above, but will use the canonical <code>hasOwnProperty</code> in case <code>obj</code> also has a property named <code>hasOwnProperty</code> for some reason. In practice, if somebody overrode <code>hasOwnProperty</code>, they’d probably be a jerk in a bunch of other places and redefine <code>undefined</code> in scope, or alter <code>Object</code> or <code>Object.prototype</code> or <code>Object.prototype.hasOwnProperty.call</code>.</p>\n\n<pre><code>var hasFoo = obj.foo != undefined;\n</code></pre>\n\n<p>This one also checks for <code>null</code>. To make that clearer, I’d recommend using <code>!= null</code> instead.</p>\n\n<pre><code>var hasFoo = Boolean(obj.foo); // or !!obj.foo\n</code></pre>\n\n<p>This checks for the other falsy values (I hope that’s obvious) – <code>0</code>, <code>NaN</code>, <code>false</code>, and the empty string. Certainly practically useful for checking for function support:</p>\n\n<pre><code>if (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = …;\n}\n</code></pre>\n\n<p>To sum up: don’t use <code>typeof</code> to check for <code>undefined</code> values. It is prone to error. If you make a typo in the <code>\"undefined\"</code> part, you will get the wrong answer. If you make a typo in the testing variable (if you are testing a variable – which you shouldn’t be, ever, use the global object to do that kind of feature test), you will get the wrong answer.</p>\n\n<p>If you are paranoid about <code>undefined</code> being redefined, here’s why you shouldn’t be:</p>\n\n<ul>\n<li><p><code>undefined</code> is read-only in modern browsers. If you’re developing in strict mode as you should be, attempting to assign to it will throw an error. (Even if you don’t develop in strict mode, though, it won’t change.) It’s also a non-configurable property. You <em>will</em> have to worry if you go “safe mode” by passing <code>undefined</code> into your IIFE. Never do that, for the reason outlined in this bullet point, and for the fact that…</p></li>\n<li><p>Anybody who is redefining <code>undefined</code> is either an idiot or joking or something, and either wants to or deserves to have broken code. (In the “deserves to” case, note that their code is <em>already</em> quite broken.)</p></li>\n</ul>\n\n<p>Still paranoid? Compare against <code>void 0</code>. <code>void</code> <em>is</em> a keyword in JavaScript, and it always has been, and it will always give you a canonical <code>undefined</code>.</p>\n",
    "score": 81,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 707111,
      "name": "Ryan",
      "reputation": 142126
    }
  },
  {
    "soID": 23463075,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/23463075",
    "title": null,
    "body": "<pre><code>\"propertyName\" in obj //-&gt; true | false\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 822138,
      "name": "sam",
      "reputation": 13397
    }
  },
  {
    "soID": 24243518,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/24243518",
    "title": null,
    "body": "<p>Also same things can be written shorter:</p>\n\n<pre><code>if (!variable){\n    //do it if variable is Undefined\n}\n</code></pre>\n\n<p>or </p>\n\n<pre><code>if (variable){\n    //do it if variable is Defined\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1289868,
      "name": "raskalbass",
      "reputation": 680
    }
  },
  {
    "soID": 24277572,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/24277572",
    "title": null,
    "body": "<p>All the answers are incomplete. This is the right way of knowing that there is a property 'defined as undefined' :</p>\n\n<pre><code>var hasUndefinedProperty = function hasUndefinedProperty(obj, prop){\n  return ((prop in obj) &amp;&amp; (typeof obj[prop] == 'undefined')) ;\n} ;\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>var a = { b : 1, e : null } ;\na.c = a.d ;\n\nhasUndefinedProperty(a, 'b') ; // false : b is defined as 1\nhasUndefinedProperty(a, 'c') ; // true : c is defined as undefined\nhasUndefinedProperty(a, 'd') ; // false : d is undefined\nhasUndefinedProperty(a, 'e') ; // false : e is defined as null\n\n// And now...\ndelete a.c ;\nhasUndefinedProperty(a, 'c') ; // false : c is undefined\n</code></pre>\n\n<p>Too bad that this been the right answer is buried in wrong answers >_&lt;</p>\n\n<p>So, for anyone who pass by, I will give you undefineds for free!!</p>\n\n<pre><code>var undefined ; undefined ; // undefined\n({}).a ;                    // undefined\n[].a ;                      // undefined\n''.a ;                      // undefined\n(function(){}()) ;          // undefined\nvoid(0) ;                   // undefined\neval() ;                    // undefined\n1..a ;                      // undefined\n/a/.a ;                     // undefined\n(true).a ;                  // undefined\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1802325,
      "name": "Juan Garcia",
      "reputation": 481
    }
  },
  {
    "soID": 24626893,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/24626893",
    "title": null,
    "body": "<p>Going through the comments, for those who want to check both is it undefined or its value is null:</p>\n\n<pre><code>//Just in JavaScript\nvar s; // Undefined\nif (typeof s == \"undefined\" || s === null){\n    alert('either it is undefined or value is null')\n}\n</code></pre>\n\n<p>If you are using jQuery Library then <code>jQuery.isEmptyObject()</code> will suffice for both cases,</p>\n\n<pre><code>var s; // Undefined\njQuery.isEmptyObject(s); // Will return true;\n\ns = null; // Defined as null\njQuery.isEmptyObject(s); // Will return true;\n\n//Usage\nif (jQuery.isEmptyObject(s)) {\n    alert('Either variable:s is undefined or its value is null');\n} else {\n     alert('variable:s has value ' + s);\n}\n\ns = 'something'; // Defined with some value\njQuery.isEmptyObject(s); // Will return false;\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 412591,
      "name": "Angelin Nadar",
      "reputation": 4454
    }
  },
  {
    "soID": 26273383,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/26273383",
    "title": null,
    "body": "<p>I would like to show you something I'm using in order to protect the <code>undefined</code> variable:</p>\n\n<pre><code>Object.defineProperty(window, 'undefined', {});\n</code></pre>\n\n<p>This forbids anyone to change the <code>window.undefined</code> value therefore destroying the code based on that variable. If using <code>\"use strict\"</code>, anything trying to change its value will end in error, otherwise it would be silently ignored.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3535045,
      "name": "Seti",
      "reputation": 866
    }
  },
  {
    "soID": 27474938,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/27474938",
    "title": null,
    "body": "<p>If you are using Angular: </p>\n\n<pre><code>angular.isUndefined(obj)\nangular.isUndefined(obj.prop)\n</code></pre>\n\n<p>Underscore.js:</p>\n\n<pre><code>_.isUndefined(obj) \n_.isUndefined(obj.prop) \n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 288671,
      "name": "Vitalii Fedorenko",
      "reputation": 53218
    }
  },
  {
    "soID": 27549425,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/27549425",
    "title": null,
    "body": "<p>if simple typeof is not working try this one it will help:</p>\n\n<pre><code>if(jQuery.type(variable) === \"undefined\") {// do something}\n</code></pre>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 770704,
      "name": "Hassan Ali Shahzad",
      "reputation": 1038
    }
  },
  {
    "soID": 28522648,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/28522648",
    "title": null,
    "body": "<p>Reading through this, I'm amazed I didn't see this. I have found multiple algorithms that would work for this.</p>\n\n<h1>Never Defined</h1>\n\n<p>If the value of an object was never defined, this will prevent from returning <code>true</code> if it is defined as <code>null</code> or <code>undefined</code>. This is helpful if you want true to be returned for values set as <code>undefined</code></p>\n\n<pre><code>if(obj.prop === void 0) console.log(\"The value has never been defined\");\n</code></pre>\n\n<h1>Defined as undefined Or never Defined</h1>\n\n<p>If you want it to result as <code>true</code> for values defined with the value of <code>undefined</code>, or never defined, you can simply use <code>=== undefined</code></p>\n\n<pre><code>if(obj.prop === undefined) console.log(\"The value is defined as undefined, or never defined\");\n</code></pre>\n\n<h1>Defined as a falsy value, undefined,null, or never defined.</h1>\n\n<p>Commonly, people have asked me for an algorithm to figure out if a value is either falsy, <code>undefined</code>, or <code>null</code>. The following works.</p>\n\n<pre><code>if(obj.prop == false || obj.prop === null || obj.prop === undefined) {\n    console.log(\"The value is falsy, null, or undefined\");\n}\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4303905,
      "name": "Travis",
      "reputation": 516
    }
  },
  {
    "soID": 28902597,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/28902597",
    "title": null,
    "body": "<p>I use <code>if (this.variable)</code> to test if it is defined. Simple <code>if (variable)</code>, <a href=\"https://stackoverflow.com/a/12589152/4550451\">recommended above</a>, fails for me. It turns out that it works only when variable is a field of some object, <code>obj.someField</code> to check if it is defined in the dictionary. But we can use <code>this</code> or <code>window</code> as the dictionary object since any variable is a field in current window, as I understand it. Therefore here is a test</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>if (this.abc) alert(\"defined\"); else alert(\"undefined\");\r\n\r\nabc = \"abc\";\r\nif (this.abc) alert(\"defined\"); else alert(\"undefined\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>It first detects that variable <code>abc</code> is undefined and it is defined after initialization.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1083704,
      "name": "Val",
      "reputation": 1
    }
  },
  {
    "soID": 32009076,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/32009076",
    "title": null,
    "body": "<p>Use:</p>\n\n<p><strong>To check if property is undefined:</strong></p>\n\n<pre><code>if (typeof something === \"undefined\") {\n    alert(\"undefined\");\n}\n</code></pre>\n\n<p><strong>To check if property is not undefined:</strong></p>\n\n<pre><code>if (typeof something !== \"undefined\") {\n    alert(\"not undefined\");\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4261022,
      "name": "Mike Clark",
      "reputation": 1269
    }
  },
  {
    "soID": 34782448,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/34782448",
    "title": null,
    "body": "<p>From lodash.js.</p>\n\n<pre><code>var undefined;\nfunction isUndefined(value) {\n  return value === undefined;\n}\n</code></pre>\n\n<p>It creates an variable named <code>undefined</code> which is initialized with the default value -- the real <code>undefined</code>, then compares <code>value</code> with the variable <code>undefined</code>.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3127828,
      "name": "Moon",
      "reputation": 525
    }
  },
  {
    "soID": 35768990,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/35768990",
    "title": null,
    "body": "<p>There is a nice &amp; elegant way to assign a defined property to a new variable if it is defined or assign a default value to it as a fallback if it´s undefined.</p>\n\n<pre><code>var a = obj.prop || defaultValue;\n</code></pre>\n\n<p>It's suitable if you have a function, which receives an additional config property:</p>\n\n<pre><code>var yourFunction = function(config){\n\n   this.config = config || {};\n   this.yourConfigValue = config.yourConfigValue || 1;\n   console.log(this.yourConfigValue);\n\n}\n</code></pre>\n\n<p>Now executing</p>\n\n<pre><code>yourFunction({yourConfigValue:2});\n//=&gt; 2\n\nyourFunction();\n//=&gt; 1\n\nyourFunction({otherProperty:5});\n//=&gt; 1\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2324388,
      "name": "Marian Klühspies",
      "reputation": 4500
    }
  },
  {
    "soID": 38522901,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/38522901",
    "title": null,
    "body": "<p>Do you want to retrieve the value if it's defined? I'd use <a href=\"https://github.com/remy/undefsafe\" rel=\"nofollow noreferrer\">https://github.com/remy/undefsafe</a></p>\n\n<p>Taken from the website, it's a \"simple function for retrieving deep object properties without getting \"Cannot read property 'X' of undefined\"\n.</p>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1485447,
      "name": "martinedwards",
      "reputation": 2788
    }
  },
  {
    "soID": 43058440,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/43058440",
    "title": null,
    "body": "<p>I'm surprised I haven't seen this suggestion yet, but it gets even more specificity than testing with <code>typeof</code>. Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\" rel=\"nofollow noreferrer\"><code>Object.getOwnPropertyDescriptor()</code></a> if you need to know whether an object property was initialized with <code>undefined</code> or if it was never initialized:</p>\n\n<pre><code>// to test someObject.someProperty\nvar descriptor = Object.getOwnPropertyDescriptor(someObject, 'someProperty');\n\nif (typeof descriptor === 'undefined') {\n  // was never initialized\n} else if (typeof descriptor.value === 'undefined') {\n  if (descriptor.get || descriptor.set) {\n    // is an accessor property, defined via getter and setter\n  } else {\n    // is initialized with `undefined`\n  }\n} else {\n  // is initialized with some other value\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1541563,
      "name": "Patrick Roberts",
      "reputation": 10553
    }
  },
  {
    "soID": 43527813,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/43527813",
    "title": null,
    "body": "<p>This is probably the only explicit form of determining if the existing property-name has an explicit and intended value of <code>undefined</code>; which is, nonetheless, a JS type.</p>\n\n<pre><code>\"propertyName\" in containerObject &amp;&amp; \"\"+containerObject[\"propertyName\"] == \"undefined\";\n&gt;&gt; true \\ false\n</code></pre>\n\n<p>This expression will only return <code>true</code> if the property name of the given context exists (truly) and only if its intended value is explicitly <code>undefined</code>.</p>\n\n<p>There will be no false positives like with empty or blank strings zeros nulls or empty arrays and alike. This does exactly that. Checks i.e., makes sure  the property name exists (otherwise it would be a false positive), than it explicitly checks if its value is <code>undefined</code> e.g. of undefined JS type In it's string representation form (literally \"undefined\") therefore <code>==</code> instead of <code>===</code> because no further conversion is possible. And this expression will only return true if both, that is all conditions are met. e.g. if the property-name doesn't exist, - it will return false. Which is the only correct return since nonexistent properties can't have values, not even an undefined one.</p>\n\n<p>Example:</p>\n\n<pre><code>containerObject = { propertyName: void \"anything\" }\n&gt;&gt; Object { propertyName: undefined } \n\n// now the testing\n\n\"propertyName\" in containerObject &amp;&amp; \"\"+containerObject[\"propertyName\"] == \"undefined\";\n&gt;&gt; true\n\n/* which makes sure that nonexistent property will not return a false positive\n * unless it is previously defined  */\n\n\"foo\" in containerObject &amp;&amp; \"\"+containerObject[\"foo\"] == \"undefined\";\n&gt;&gt; false\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5896426,
      "name": "Bekim Bacaj",
      "reputation": 1510
    }
  },
  {
    "soID": 44161028,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/44161028",
    "title": null,
    "body": "<p>Simply anything not defined, is undefined in JavaScript, doesn't matter if it's a property inside an Object/Array or as just a simple variable...</p>\n\n<p>JavaScript has <code>typeof</code> which make it very easy to detect an undefined variable.</p>\n\n<p>Simply check if <code>typeof whatever === 'undefined'</code> and it will return a boolean.</p>\n\n<p>That's how the famous function <code>isUndefined()</code> in AngularJs v.1x is written:</p>\n\n<pre><code>function isUndefined(value) {return typeof value === 'undefined';} \n</code></pre>\n\n<p>So as you see the function receive a value, if that value is defined, it will return <code>false</code>, otherwise for undefined values, return <code>true</code>. </p>\n\n<p>So let's have a look what gonna be the results when we passing values, including object properties like below, this is the list of variables we have:</p>\n\n<pre><code>var stackoverflow = {};\nstackoverflow.javascipt = 'javascript';\nvar today;\nvar self = this;\nvar num = 8;\nvar list = [1, 2, 3, 4, 5];\nvar y = null;\n</code></pre>\n\n<p>and we check them as below, you can see the results in front of them as a comment:</p>\n\n<pre><code>isUndefined(stackoverflow); //false\nisUndefined(stackoverflow.javascipt); //false\nisUndefined(today); //true\nisUndefined(self); //false\nisUndefined(num); //false\nisUndefined(list); //false\nisUndefined(y); //false\nisUndefined(stackoverflow.java); //true\nisUndefined(stackoverflow.php); //true\nisUndefined(stackoverflow &amp;&amp; stackoverflow.css); //true\n</code></pre>\n\n<p>As you see we can check anything with using something like this in our code, as mentioned you can simply use typeof in your code, but if you are using it over and over, create a function like the angular sample which I share and keep reusing as following DRY code pattern.</p>\n\n<p>Also one more thing, for checking property on an object in real application which you not sure even the object exists or not, check if the object exist first.</p>\n\n<p>If you check a property on an object and the object doesn't exist, will throw an error and stop the whole application running.</p>\n\n<pre><code>isUndefined(x.css);\nVM808:2 Uncaught ReferenceError: x is not defined(…)\n</code></pre>\n\n<p>So simple you can wrap inside an if statement like below:</p>\n\n<pre><code>if(typeof x !== 'undefined') {\n  //do something\n}\n</code></pre>\n\n<p>Which also equal to isDefined in Angular 1.x...</p>\n\n<pre><code>function isDefined(value) {return typeof value !== 'undefined';}\n</code></pre>\n\n<p>Also other javascript frameworks like underscore has similar defining check, but I recommend you use <code>typeof</code> if you already not using any frameworks.</p>\n\n<p>I also add this section from MDN which has got useful information about typeof, undefined and void(0).</p>\n\n<blockquote>\n  <p><strong>Strict equality and undefined</strong> <br> You can use undefined and the strict equality and inequality operators to determine whether a variable has\n  a value. In the following code, the variable x is not defined, and the\n  if statement evaluates to true.</p>\n</blockquote>\n\n<pre><code>var x;\nif (x === undefined) {\n   // these statements execute\n}\nelse {\n   // these statements do not execute\n}\n</code></pre>\n\n<blockquote>\n  <p>Note: The strict equality operator rather than the standard equality\n  operator must be used here, because x == undefined also checks whether\n  x is null, while strict equality doesn't. null is not equivalent to\n  undefined. See comparison operators for details.</p>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <p><strong>Typeof operator and undefined</strong> <br>\n  Alternatively, typeof can be used:</p>\n</blockquote>\n\n<pre><code>var x;\nif (typeof x === 'undefined') {\n   // these statements execute\n}\n</code></pre>\n\n<blockquote>\n  <p>One reason to use typeof is that it does not throw an error if the\n  variable has not been declared.</p>\n</blockquote>\n\n<pre><code>// x has not been declared before\nif (typeof x === 'undefined') { // evaluates to true without errors\n   // these statements execute\n}\n\nif (x === undefined) { // throws a ReferenceError\n\n}\n</code></pre>\n\n<blockquote>\n  <p>However, this kind of technique should be avoided. JavaScript is a\n  statically scoped language, so knowing if a variable is declared can\n  be read by seeing whether it is declared in an enclosing context. The\n  only exception is the global scope, but the global scope is bound to\n  the global object, so checking the existence of a variable in the\n  global context can be done by checking the existence of a property on\n  the global object (using the in operator, for instance).</p>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <p><strong>Void operator and undefined</strong></p>\n  \n  <p>The void operator is a third alternative.</p>\n</blockquote>\n\n<pre><code>var x;\nif (x === void 0) {\n   // these statements execute\n}\n\n// y has not been declared before\nif (y === void 0) {\n   // throws a ReferenceError (in contrast to `typeof`)\n}\n</code></pre>\n\n<p>more > <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/undefined\" rel=\"nofollow noreferrer\">here</a></p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 44556602,
    "parentID": 27509,
    "url": "https://stackoverflow.com/q/44556602",
    "title": null,
    "body": "<p>I'm assuming your going to also want to check for it being <em>either</em> <code>undefined</code> or <code>null</code>. If so, I suggest:</p>\n\n<p><code>myVar == null</code></p>\n\n<p>This is one of the only times a <strong>double equals</strong> is very helpful as it will evaluate to <code>true</code> when <code>myVar</code> is <code>undefined</code> or <code>null</code>, but will evaluate to <code>false</code> when it is other falsey values such as <code>0</code>, <code>false</code>, <code>''</code>, and <code>NaN</code>.</p>\n\n<p>This the actual the <a href=\"https://github.com/lodash/lodash/blob/4.17.4/lodash.js#L11987\" rel=\"nofollow noreferrer\">source</a> code for Lodash's <a href=\"https://lodash.com/docs/4.17.4#isNil\" rel=\"nofollow noreferrer\"><code>isNil</code></a> method.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3015469,
      "name": "IliasT",
      "reputation": 690
    }
  },
  {
    "soID": 46170,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/46170",
    "title": null,
    "body": "<p>JavaScript can match a regular expression:</p>\n\n<pre><code>emailAddress.match( / some_regex /);\n</code></pre>\n\n<p>Here's an <a href=\"http://tools.ietf.org/html/rfc22\" rel=\"noreferrer\">RFC22</a> regular expression for emails:</p>\n\n<pre><code>^((?&gt;[a-zA-Z\\d!#$%&amp;'*+\\-/=?^_`{|}~]+\\x20*|\"((?=[\\x01-\\x7f])[^\"\\\\]|\\\\[\\x01-\\x7f])*\n\"\\x20*)*(?&lt;angle&gt;&lt;))?((?!\\.)(?&gt;\\.?[a-zA-Z\\d!#$%&amp;'*+\\-/=?^_`{|}~]+)+|\"((?=[\\x01-\\x\n7f])[^\"\\\\]|\\\\[\\x01-\\x7f])*\")@(((?!-)[a-zA-Z\\d\\-]+(?&lt;!-)\\.)+[a-zA-Z]{2,}|\\[(((?(?&lt;\n!\\[)\\.)(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)){4}|[a-zA-Z\\d\\-]*[a-zA-Z\\d]:((?=[\\x01-\\x7f])\n[^\\\\\\[\\]]|\\\\[\\x01-\\x7f])+)\\])(?(angle)&gt;)$\n</code></pre>\n",
    "score": 48,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 46181,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/46181",
    "title": null,
    "body": "<p>Using <a href=\"http://en.wikipedia.org/wiki/Regular_expression\" rel=\"noreferrer\">regular expressions</a> is probably the best way. You can see a bunch of tests <a href=\"http://jsfiddle.net/ghvj4gy9/embedded/result,js/\" rel=\"noreferrer\">here</a> (taken from <a href=\"https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/LayoutTests/fast/forms/resources/ValidityState-typeMismatch-email.js&amp;sq=package:chromium&amp;type=cs\" rel=\"noreferrer\">chromium</a>)</p>\n\n<pre><code>function validateEmail(email) {\n    var re = /^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n}\n</code></pre>\n\n<p>Here's the example of regular expresion that accepts unicode:</p>\n\n<pre><code>var re = /^(([^&lt;&gt;()\\[\\]\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^&lt;&gt;()[\\]\\.,;:\\s@\\\"]+\\.)+[^&lt;&gt;()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n</code></pre>\n\n<p>But keep in mind that one should not rely only upon JavaScript validation. JavaScript can  easily be disabled. This should be validated on the server side as well.</p>\n\n<p>Here's an example of the above in action:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function validateEmail(email) {\r\n  var re = /^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(email);\r\n}\r\n\r\nfunction validate() {\r\n  $(\"#result\").text(\"\");\r\n  var email = $(\"#email\").val();\r\n  if (validateEmail(email)) {\r\n    $(\"#result\").text(email + \" is valid :)\");\r\n    $(\"#result\").css(\"color\", \"green\");\r\n  } else {\r\n    $(\"#result\").text(email + \" is not valid :(\");\r\n    $(\"#result\").css(\"color\", \"red\");\r\n  }\r\n  return false;\r\n}\r\n\r\n$(\"#validate\").bind(\"click\", validate);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n\r\n&lt;form&gt;\r\n  &lt;p&gt;Enter an email address:&lt;/p&gt;\r\n  &lt;input id='email'&gt;\r\n  &lt;button type='submit' id='validate'&gt;Validate!&lt;/button&gt;\r\n&lt;/form&gt;\r\n\r\n&lt;h2 id='result'&gt;&lt;/h2&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 3069,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 48800,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/48800",
    "title": null,
    "body": "<p>Wow, there are lots of complexity here. If all you want to do is just catch the most obvious syntax errors, I would do something like this:</p>\n\n<pre><code>\\S+@\\S+\n</code></pre>\n\n<p>It usually catches the most obvious errors that the user makes and assures that the form is mostly right, which is what JavaScript validation is all about.</p>\n",
    "score": 238,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 815232,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/815232",
    "title": null,
    "body": "<p>There's something you have to understand the second you decide to use a regular expression to validate emails: <a href=\"http://ex-parrot.com/~pdw/Mail-RFC822-Address.html\" rel=\"noreferrer\">It's probably not a good idea</a>. Once you have come to terms with that, there are many implementations out there that can get you halfway there, <a href=\"http://www.regular-expressions.info/email.html\" rel=\"noreferrer\">this article sums them up nicely.</a></p>\n\n<p>In short, however, the only way to be absolutely, positively sure that what the user entered is in fact an email is to actually send an email and see what happens. Other than that it's all just guesses.</p>\n",
    "score": 258,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 815235,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/815235",
    "title": null,
    "body": "<p>This was stolen from <a href=\"http://codesnippets.joyent.com/posts/show/1917\" rel=\"noreferrer\">http://codesnippets.joyent.com/posts/show/1917</a></p>\n\n<pre><code>email = $('email');\nfilter = /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\nif (filter.test(email.value)) {\n  // Yay! valid\n  return true;\n}\nelse\n  {return false;}\n</code></pre>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 815237,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/815237",
    "title": null,
    "body": "<p>Following regular expression:</p>\n\n<pre><code>/^([\\w]+)(.[\\w]+)*@([\\w]+)(.[\\w]{2,3}){1,2}$/;\n</code></pre>\n",
    "score": -5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 815242,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/815242",
    "title": null,
    "body": "<p>It's hard to get an email validator 100% correct. The only really way to get it correct would be to send a test email to the account. That said, there are a few basic checks that can help make sure that you're getting something reasonable.</p>\n\n<p>Some things to improve:</p>\n\n<p>Instead of new RegExp, just try writing the regexp out like this:</p>\n\n<pre><code>if (reg.test(/@/))\n</code></pre>\n\n<p>Second, check to make sure that a period comes after the @ sign, and make sure that there are characters between the @s and periods. </p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1373724,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/1373724",
    "title": null,
    "body": "<p>Just for completeness, <a href=\"http://www.regular-expressions.info/email.html\" rel=\"noreferrer\">here you have another RFC 2822 compliant regex</a></p>\n\n<blockquote>\n  <p>The official standard is known as <a href=\"https://tools.ietf.org/html/rfc2822#section-3.4.1\" rel=\"noreferrer\">RFC 2822</a>. It describes the syntax that valid email addresses must adhere to. You can (<strong>but you shouldn't</strong> &mdash; <a href=\"http://www.regular-expressions.info/email.html\" rel=\"noreferrer\">read on</a>) implement it with this regular expression:</p>\n  \n  <p><code>(?:[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])</code></p>\n  \n  <p>(...) We get a more practical implementation of RFC 2822 if we omit the syntax using double quotes and square brackets. <strong>It will still match 99.99% of all email addresses in actual use today.</strong></p>\n  \n  <p><code>[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?</code></p>\n  \n  <p>A further change you could make is to allow any two-letter country code top level domain, and only specific generic top level domains. <strong>This regex filters dummy email addresses like <code>asdf@adsf.adsf</code></strong>. You <strong>will need to update it as new top-level domains are added</strong>.</p>\n  \n  <p><code>[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+(?:[A-Z]{2}|com|org|net|gov|mil|biz|info|mobi|name|aero|jobs|museum)\\b</code></p>\n  \n  <p>So even when following official standards, there are still trade-offs to be made. <strong><em>Don't blindly copy regular expressions from online libraries or discussion forums. Always test them on your own data and with your own applications.</em></strong></p>\n</blockquote>\n\n<p><sub>Emphasis mine</sub></p>\n",
    "score": 483,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2932827,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/2932827",
    "title": null,
    "body": "<p>Here is a very good discussion about using regular expressions to validate email addresses; \"<a href=\"http://fightingforalostcause.net/misc/2006/compare-email-regex.php\" rel=\"noreferrer\">Comparing E-mail Address Validating Regular Expressions</a>\"</p>\n\n<p>Here is the current top expression, that is JavaScript compatible, for reference purposes:</p>\n\n<pre><code>/^[-a-z0-9~!$%^&amp;*_=+}{\\'?]+(\\.[-a-z0-9~!$%^&amp;*_=+}{\\'?]+)*@([a-z0-9_][-a-z0-9_]*(\\.[-a-z0-9_]+)*\\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,5})?$/i\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3838001,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/3838001",
    "title": null,
    "body": "<p>Apparently, that's it:</p>\n\n<pre><code>/^([\\w\\!\\#$\\%\\&amp;\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+\\.)*[\\w\\!\\#$\\%\\&amp;\\'\\*\\+\\-\\/\\=\\?\\^\\`{\\|\\}\\~]+@((((([a-z0-9]{1}[a-z0-9\\-]{0,62}[a-z0-9]{1})|[a-z])\\.)+[a-z]{2,6})|(\\d{1,3}\\.){3}\\d{1,3}(\\:\\d{1,5})?)$/i\n</code></pre>\n\n<p>Taken from <a href=\"http://fightingforalostcause.net/misc/2006/compare-email-regex.php\" rel=\"noreferrer\">http://fightingforalostcause.net/misc/2006/compare-email-regex.php</a> on Oct 1 '10.</p>\n\n<p>But, of course, that's ignoring internationalization.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 5166806,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/5166806",
    "title": null,
    "body": "<p>Correct validation of email address in compliance with the RFCs is not something that can be achieved with a one-liner regular expression. An article with the best solution I've found in PHP is <em><a href=\"http://www.dominicsayers.com/isemail/\" rel=\"noreferrer\">What is a valid email address?</a></em>. Obviously, it has been ported to Java. I think the function is too complex to be ported and used in JavaScript.</p>\n\n<p>A good practice is to validate your data on the client, but double-check the validation on the server. With this in mind, you can simply check whether a string looks like a valid email address on the client and perform the strict check on the server.</p>\n\n<p>Here's the JavaScript function I use to check if a string looks like a valid mail address:</p>\n\n<pre><code>function looksLikeMail(str) {\n    var lastAtPos = str.lastIndexOf('@');\n    var lastDotPos = str.lastIndexOf('.');\n    return (lastAtPos &lt; lastDotPos &amp;&amp; lastAtPos &gt; 0 &amp;&amp; str.indexOf('@@') == -1 &amp;&amp; lastDotPos &gt; 2 &amp;&amp; (str.length - lastDotPos) &gt; 2);\n}\n</code></pre>\n\n<p>Explanation:</p>\n\n<ul>\n<li><p><code>lastAtPos &lt; lastDotPos</code>: Last <code>@</code> should be before last <code>.</code> since <code>@</code> cannot be part of server name (as far as I know).</p></li>\n<li><p><code>lastAtPos &gt; 0</code>: There should be something (the email username) before the last <code>@</code>.</p></li>\n<li><p><code>str.indexOf('@@') == -1</code>: There should be no <code>@@</code> in the address. Even if <code>@</code> appears as the last character in email username, it has to be quoted so <code>\"</code> would be between that <code>@</code> and the last <code>@</code> in the address.</p></li>\n<li><p><code>lastDotPos &gt; 2</code>: There should be at least three characters before the last dot, for example <code>a@b.com</code>.</p></li>\n<li><p><code>(str.length - lastDotPos) &gt; 2</code>: There should be enough characters after the last dot to form a two-character domain. I'm not sure if the brackets are necessary.</p></li>\n</ul>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 7791100,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/7791100",
    "title": null,
    "body": "<p>HTML5 itself has email validation. If your browser supports HTML5 then you can use the following code.</p>\n\n<pre><code>&lt;form&gt;&lt;input type=\"email\" placeholder=\"me@example.com\"&gt;\n    &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/edwinthomas25/z6wev5L0/\">jsFiddle</a> link</p>\n\n<p>From the <a href=\"http://www.w3.org/TR/html5/forms.html#valid-e-mail-address\">HTML5 spec</a>:</p>\n\n<blockquote>\n  <p>A <strong>valid e-mail address</strong> is a string that matches the <code>email</code> production of the following ABNF, the character set for which is Unicode.</p>\n\n<pre><code>email   = 1*( atext / \".\" ) \"@\" label *( \".\" label )\nlabel   = let-dig [ [ ldh-str ] let-dig ]  ; limited to a length of 63 characters by RFC 1034 section 3.5\natext   = &lt; as defined in RFC 5322 section 3.2.3 &gt;\nlet-dig = &lt; as defined in RFC 1034 section 3.5 &gt;\nldh-str = &lt; as defined in RFC 1034 section 3.5 &gt;\n</code></pre>\n  \n  <p>This requirement is a <a href=\"http://www.w3.org/TR/html5/introduction.html#willful-violation\">willful violation</a> of RFC 5322, which defines a syntax for e-mail addresses that is simultaneously too strict (before the \"@\" character), too vague (after the \"@\" character), and too lax (allowing comments, whitespace characters, and quoted strings in manners unfamiliar to most users) to be of practical use here.</p>\n  \n  <p>The following JavaScript- and Perl-compatible regular expression is an implementation of the above definition.</p>\n\n<pre><code>/^[a-zA-Z0-9.!#$%&amp;'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n</code></pre>\n</blockquote>\n",
    "score": 136,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8565823,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/8565823",
    "title": null,
    "body": "<p>You should not use regular expressions to validate an input string to check if it's an email. It's too complicated and would not cover all the cases.</p>\n\n<p>Now since you can only cover 90% of the cases, write something like:</p>\n\n<pre><code>function isPossiblyValidEmail(txt) {\n   return txt.length &gt; 5 &amp;&amp; txt.indexOf('@')&gt;0;\n}\n</code></pre>\n\n<p>You can refine it. For instance, 'aaa@' is valid. But overall you get the gist. And don't get carried away... A simple 90% solution is better than 100% solution that does not work. </p>\n\n<p>The world needs simpler code...</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9204568,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/9204568",
    "title": null,
    "body": "<p>I've slightly modified Jaymon's answer for people who want really simple validation in the form of:</p>\n\n<p>anystring@anystring.anystring</p>\n\n<p>The regular expression:</p>\n\n<pre><code>/\\S+@\\S+\\.\\S+/\n</code></pre>\n\n<p>Example JavaScript function:</p>\n\n<pre><code>function validateEmail(email) \n{\n    var re = /\\S+@\\S+\\.\\S+/;\n    return re.test(email);\n}\n</code></pre>\n",
    "score": 407,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10906478,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/10906478",
    "title": null,
    "body": "<p>In contrast to <em>squirtle</em>, here is a complex solution, but it does a mighty fine job of validating emails properly:</p>\n\n<pre><code>function isEmail(email) { \n    return /^((([a-z]|\\d|[!#\\$%&amp;'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&amp;'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i.test(email);\n} \n</code></pre>\n\n<p>Use like so:<br><br></p>\n\n<pre><code>if (isEmail('youremail@yourdomain.com')){ console.log('This is email is valid'); }\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12199843,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/12199843",
    "title": null,
    "body": "<p>Sectrean's solution works great, but it was failing my <a href=\"https://en.wikipedia.org/wiki/Lint_%28software%29\" rel=\"nofollow\">linter</a>. So I added some escapes:</p>\n\n<pre><code>function validateEmail(email){ \n     var re = /^(([^&lt;&gt;()[]\\\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()[]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([[0-9]{1,3}\\‌​.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; \n     return re.test(email); \n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12894223,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/12894223",
    "title": null,
    "body": "<pre><code>function validateEmail(elementValue){        \n    var emailPattern = /^[a-zA-Z0-9._]+[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z]{2,4}$/;  \n    return emailPattern.test(elementValue);   \n  }   \n</code></pre>\n\n<p>It returns true if the email address is valid. Otherwise, it will return false.</p>\n",
    "score": -7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13178771,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/13178771",
    "title": null,
    "body": "<p>Do this (case insensitive)</p>\n\n<pre><code>[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\n</code></pre>\n\n<p>Why?  It's based on RFC 2822, which is a standard ALL email addresses MUST adhere to.</p>\n\n<p>Here's an example of it being use in JavaScript</p>\n\n<pre><code>var emailCheck=/^[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i;\nconsole.log( emailCheck.test('some.body@domain.co.uk') );\n</code></pre>\n\n<p>Note: Technically some emails can include quotes in the section before the @ symbol with escape characters inside the quotes (so you're email user can be obnoxious and contain stuff like @ and \"... as long as it's written in quotes) NOBODY DOES THIS EVER. It's obsolete. But, it IS included in the true RFC 2822 standard, and omitted here.</p>\n\n<p>More info: <a href=\"http://www.regular-expressions.info/email.html\">http://www.regular-expressions.info/email.html</a></p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13975255,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/13975255",
    "title": null,
    "body": "<p>In modern browsers you can build on top of @Sushil's answer with pure JavaScript and the <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\" rel=\"nofollow noreferrer\">DOM</a>:</p>\n\n<pre><code>function validateEmail(value) {\n  var input = document.createElement('input');\n\n  input.type = 'email';\n  input.value = value;\n\n  return typeof input.checkValidity == 'function' ? input.checkValidity() : /\\S+@\\S+\\.\\S+/.test(value);\n}\n</code></pre>\n\n<p>I've put together an example in the fiddle <a href=\"http://jsfiddle.net/boldewyn/2b6d5/\" rel=\"nofollow noreferrer\">http://jsfiddle.net/boldewyn/2b6d5/</a>. Combined with feature detection and the bare-bones validation from <a href=\"https://stackoverflow.com/a/9204568/324094\">Squirtle's Answer</a>, it frees you from the regular expression massacre and does not bork on old browsers.</p>\n",
    "score": 60,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 14622590,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/14622590",
    "title": null,
    "body": "<pre><code>&lt;form name=\"validation\" onSubmit=\"return checkbae()\"&gt;\n    Please input a valid email address:&lt;br /&gt;\n\n    &lt;input type=\"text\" size=18 name=\"emailcheck\"&gt;\n    &lt;input type=\"submit\" value=\"Submit\"&gt;\n&lt;/form&gt;\n\n&lt;script language=\"JavaScript1.2\"&gt;\n    var testresults\n    function checkemail(){\n        var str = document.validation.emailcheck.value\n        var filter = /^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$/i\n        if (filter.test(str))\n            testresults = true\n        else {\n            alert(\"Please input a valid email address!\")\n            testresults = false\n        }\n        return (testresults)\n    }\n&lt;/script&gt;\n\n&lt;script&gt;\n    function checkbae(){\n        if (document.layers || document.getElementById || document.all)\n            return checkemail()\n        else\n            return true\n    }\n&lt;/script&gt;\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16014483,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/16014483",
    "title": null,
    "body": "<p>My knowledge of <a href=\"http://en.wikipedia.org/wiki/Regular_expression\" rel=\"nofollow\">regular expressions</a> is not that good. That's why I check the general syntax with a simple regular expression first and check more specific options with other functions afterwards. This may not be not the best technical solution, but this way I'm way more flexible and faster.</p>\n\n<p>The most common errors I've come across are spaces (especially at the beginning and end) and occasionally a double dot.</p>\n\n<pre><code>function check_email(val){\n    if(!val.match(/\\S+@\\S+\\.\\S+/)){ // Jaymon's / Squirtle's solution\n        // Do something\n        return false;\n    }\n    if( val.indexOf(' ')!=-1 || val.indexOf('..')!=-1){\n        // Do something\n        return false;\n    }\n    return true;\n}\n\ncheck_email('check@thiscom'); // Returns false\ncheck_email('check@this..com'); // Returns false\ncheck_email(' check@this.com'); // Returns false\ncheck_email('check@this.com'); // Returns true\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16016476,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/16016476",
    "title": null,
    "body": "<p>This is the correct RFC822 version.</p>\n\n<pre><code>function checkEmail(emailAddress) {\n  var sQtext = '[^\\\\x0d\\\\x22\\\\x5c\\\\x80-\\\\xff]';\n  var sDtext = '[^\\\\x0d\\\\x5b-\\\\x5d\\\\x80-\\\\xff]';\n  var sAtom = '[^\\\\x00-\\\\x20\\\\x22\\\\x28\\\\x29\\\\x2c\\\\x2e\\\\x3a-\\\\x3c\\\\x3e\\\\x40\\\\x5b-\\\\x5d\\\\x7f-\\\\xff]+';\n  var sQuotedPair = '\\\\x5c[\\\\x00-\\\\x7f]';\n  var sDomainLiteral = '\\\\x5b(' + sDtext + '|' + sQuotedPair + ')*\\\\x5d';\n  var sQuotedString = '\\\\x22(' + sQtext + '|' + sQuotedPair + ')*\\\\x22';\n  var sDomain_ref = sAtom;\n  var sSubDomain = '(' + sDomain_ref + '|' + sDomainLiteral + ')';\n  var sWord = '(' + sAtom + '|' + sQuotedString + ')';\n  var sDomain = sSubDomain + '(\\\\x2e' + sSubDomain + ')*';\n  var sLocalPart = sWord + '(\\\\x2e' + sWord + ')*';\n  var sAddrSpec = sLocalPart + '\\\\x40' + sDomain; // complete RFC822 email address spec\n  var sValidEmail = '^' + sAddrSpec + '$'; // as whole string\n\n  var reValidEmail = new RegExp(sValidEmail);\n\n  return reValidEmail.test(emailAddress);\n}\n</code></pre>\n",
    "score": 49,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17642237,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/17642237",
    "title": null,
    "body": "<p>All email addresses contain an 'at' symbol. Test that necessary condition</p>\n\n<pre><code>email.indexOf(\"@\") &gt; 0\n</code></pre>\n\n<p>Don't bother with anything more complicated. Even if you could perfectly determine whether an email is RFC-syntactically valid, that wouldn't tell you whether it belongs to the person who supplied it. That's what really matters.</p>\n\n<p>To test that, send a validation message.</p>\n",
    "score": 24,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 18719180,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/18719180",
    "title": null,
    "body": "<p>If you're using Closure you can use the built-in <code>goog.format.EmailAddress</code> type:</p>\n\n<blockquote>\n  <p><a href=\"http://web.archive.org/web/20140130083649/http://docs.closure-library.googlecode.com/git/class_goog_format_EmailAddress.html\" rel=\"nofollow\">http://docs.closure-library.googlecode.com/git/class_goog_format_EmailAddress.html</a></p>\n</blockquote>\n\n<p>For example:</p>\n\n<pre><code>goog.format.EmailAddress.isValidAddrSpec(\"blah@blah.com\")\n</code></pre>\n\n<p>Note that by reading the source (linked above) you can see the comments state that IDN are not supported and that it only aims to cover <em>most</em> addresses:</p>\n\n<pre><code>// This is a fairly naive implementation, but it covers 99% of use cases.\n// For more details, see http://en.wikipedia.org/wiki/Email_address#Syntax\n// TODO(mariakhomenko): we should also be handling i18n domain names as per\n// http://en.wikipedia.org/wiki/Internationalized_domain_name\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 18731676,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/18731676",
    "title": null,
    "body": "<p>This is how <a href=\"https://github.com/chriso/validator.js\" rel=\"noreferrer\">node-validator</a> do it:</p>\n\n<pre><code>/^(?:[\\w\\!\\#\\$\\%\\&amp;\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+\\.)*[\\w\\!\\#\\$\\%\\&amp;\\'\\*\\+\\-\\/\\=\\?\\^\\`\\{\\|\\}\\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!\\.)){0,61}[a-zA-Z0-9]?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\\[(?:(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\.){3}(?:[01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\]))$/\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19718337,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/19718337",
    "title": null,
    "body": "<p><a href=\"http://en.wikipedia.org/wiki/W3Schools\" rel=\"nofollow\">W3Schools</a> gives a good simple and efficient script to validate an email:  </p>\n\n<pre><code>function validateEmail(email) {\n    var atpos=email.indexOf(\"@\");\n    var dotpos=email.lastIndexOf(\".\");\n    if (atpos &lt; 1 || dotpos &lt; atpos+2 || dotpos+2 &gt;= email.length) {\n        alert(\"Not a valid e-mail address\");\n        return false;\n    }\n    return true;\n}\n</code></pre>\n\n<p>Note that you will have to remove spaces if there are any though, with something like this:</p>\n\n<pre><code>.replace(/ /g,'')\n</code></pre>\n\n<p>Source: <em><a href=\"http://www.w3schools.com/js/js_form_validation.asp\" rel=\"nofollow\">JavaScript Form Validation</a></em></p>\n",
    "score": -7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 20285787,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/20285787",
    "title": null,
    "body": "<p>Use this code inside your validator function:</p>\n\n<pre><code>var emailID = document.forms[\"formName\"][\"form element id\"].value;\n    atpos = emailID.indexOf(\"@\");\n    dotpos = emailID.lastIndexOf(\".\");\n    if (atpos &lt; 1 || ( dotpos - atpos &lt; 2 ))\n    {\n        alert(\"Please enter correct email ID\")\n        return false;\n    }\n</code></pre>\n\n<p>Else you can use <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"nofollow\">jQuery</a>. Inside rules define:</p>\n\n<pre><code>eMailId: {\n    required: true,\n    email: true\n}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 20373180,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/20373180",
    "title": null,
    "body": "<p>The regular expression provided by Microsoft within <a href=\"http://en.wikipedia.org/wiki/ASP.NET_MVC_Framework\" rel=\"nofollow\">ASP.NET MVC</a> is</p>\n\n<pre><code>/^[\\w-]+(\\.[\\w-]+)*@([a-z0-9-]+(\\.[a-z0-9-]+)*?\\.[a-z]{2,6}|(\\d{1,3}\\.){3}\\d{1,3})(:\\d{4})?$/\n</code></pre>\n\n<p>Which I post here in case it's flawed - though it's always been perfect for my needs.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21397719,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/21397719",
    "title": null,
    "body": "<pre><code>&lt;pre&gt;\n**The personal_info part contains the following ASCII characters.\n1.Uppercase (A-Z) and lowercase (a-z) English letters.\n2.Digits (0-9).\n3.Characters ! # $ % &amp; ' * + - / = ? ^ _ ` { | } ~\n4.Character . ( period, dot or fullstop) provided that it is not the first or last character and it will not come one after the other.**\n&lt;/pre&gt;\n*Example of valid email id*\n&lt;pre&gt;\nyoursite@ourearth.com\nmy.ownsite@ourearth.org\nmysite@you.me.net\nxxxx@gmail.com\nxxxxxx@yahoo.com\n&lt;/pre&gt;\n&lt;pre&gt;\nxxxx.ourearth.com [@ is not present] \nxxxx@.com.my [ tld (Top Level domain) can not start with dot \".\" ]\n@you.me.net [ No character before @ ]\nxxxx123@gmail.b [ \".b\" is not a valid tld ]\nxxxx@.org.org [ tld can not start with dot \".\" ]\n.xxxx@mysite.org [ an email should not be start with \".\" ]\nxxxxx()*@gmail.com [ here the regular expression only allows character, digit, underscore and dash ]\nxxxx..1234@yahoo.com [double dots are not allowed\n&lt;/pre&gt;\n**javascript mail code**\n\n    function ValidateEmail(inputText)\n    {\n    var mailformat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if(inputText.value.match(mailformat))\n    {\n    document.form1.text1.focus();\n    return true;\n    }\n    else\n    {\n    alert(\"You have entered an invalid email address!\");\n    document.form1.text1.focus();\n    return false;\n    }\n    }\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22039047,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/22039047",
    "title": null,
    "body": "<p>Very simple in <code>JavaScript</code>. follow this code.</p>\n\n<pre><code>function validate(){\n    var email = document.getElementById('Email');\n    var filter = /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\n\n    if (!filter.test(email.value))\n    {\n        alert('Please Enter the valid email address');\n        email.focus;\n        return false;\n    }\n    else\n{\n        return true;\n    }\n</code></pre>\n\n<p><code>HTML</code> code for this:</p>\n\n<pre><code>form name=\"form\"\n     enctype=\"multipart/form-data\"\n     name=\"form\"\n     action=\"register.php\"\n     method=\"POST\" onsubmit=\"return validate();\" &gt;\n    &lt;input type=\"text\" placeholder=\"Enter ur Email Id\" id=\"Email\" name=\"Email\" /&gt;\n    &lt;input type=\"submit\" id=\"submit\" value=\"save\" name=\"Like\" class=\"button\" /&gt;\n&lt;/form&gt;\n</code></pre>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24704328,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/24704328",
    "title": null,
    "body": "<p>One of my coworker shared this regex with me. I like it a lot.</p>\n\n<pre><code>function isValidEmailAddress (email) {\n    var validEmail = false;\n    if (email) {\n        email = email.trim().toLowerCase();\n        var pattern = /^[\\w-']+(\\.[\\w-']+)*@([a-zA-Z0-9]+[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*?\\.[a-zA-Z]{2,6}|(\\d{1,3}\\.){3}\\d{1,3})(:\\d{4})?$/;\n        validEmail = pattern.exec(email);\n    }\n\n    return validEmail;\n}\n\nif (typeof String.prototype.trim !== 'function') {\n    String.prototype.trim = function() {\n        return this.replace(/^\\s+|\\s+$/g, '');\n    };\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24806549,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/24806549",
    "title": null,
    "body": "<pre><code>function validatecontactEmail(email) { \n\n if (/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email))  \n  {  \n    return (true)  \n  }  \n\n    return (false)  \n\n}\n</code></pre>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 25125279,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/25125279",
    "title": null,
    "body": "<p>Here is a function I use for front end email validation. (The Regular Expression came from parsley.js)</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Our Company&lt;/title&gt;\n    &lt;style&gt;\n        .form-style {\n            color: #ccc;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Email Validation Form Example&lt;/h1&gt;\n    &lt;input type=\"text\" name=\"email\" id=\"emailInput\" class=\"form-style\"&gt;\n    &lt;script&gt;\n        function validateEmail(emailAddress) {\n            var regularExpression = /^((([a-z]|\\d|[!#\\$%&amp;'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&amp;'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))){2,6}$/i;\n             return regularExpression.test(emailAddress);\n        }\n\n        function showEmailValidationState(event) {\n            if (validateEmail(event.target.value)) {\n                document.getElementById(\"emailInput\").style.color = 'black';\n            }\n        }\n    document.getElementById(\"emailInput\").addEventListener(\"keyup\", showEmailValidationState);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 27476145,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/27476145",
    "title": null,
    "body": "<p>If you are using AngularJS, just add <code>type=\"email\"</code> to the input element: </p>\n\n<blockquote>\n  <p><a href=\"https://docs.angularjs.org/api/ng/input/input%5Bemail%5D\" rel=\"nofollow\">https://docs.angularjs.org/api/ng/input/input%5Bemail%5D</a></p>\n</blockquote>\n\n<p>In case there is no input element, it can be created dynamically:</p>\n\n<pre><code>var isEmail = $compile('&lt;input ng-model=\"m\" type=\"email\"&gt;')($rootScope.$new()).\n    controller('ngModel').$validators[\"email\"];\n\nif (isEmail('email@gmail.com')) {\n  console.log('valid');\n} \n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28057591,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/28057591",
    "title": null,
    "body": "<p>Validation regex for email:</p>\n\n<pre><code>var rex_email = /^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nif(email==\"\") {\n    window.plugins.toast.showShortBottom( \"Please enter the details. \", function(a) {\n        console.log('toast success: ' + a);\n    }, function(b) { });\n} else if(!rex_email.test(email)) {\n    window.plugins.toast.showShortBottom( \"Please enter the valid email id. \", function(a) {\n        console.log('toast success: ' + a);\n    }, function(b) { });\n}\n</code></pre>\n",
    "score": -5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28579110,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/28579110",
    "title": null,
    "body": "<p>I know its not regex but any way...</p>\n\n<p>This is example with node and npm package <a href=\"https://www.npmjs.com/package/email-existence\" rel=\"nofollow\">email-existence</a> this is ultimate checking if email exist and if its in the right form :)</p>\n\n<p>This will ping the email if its responding if it got no response it will return false or else true.</p>\n\n<pre><code>function doesEmailExist(email) {\n    var emailExistence = require('email-existence');\n    return emailExistence.check(email,function (err,status) {\n            if (status) {\n                return status;\n            }\n            else {\n                throw new Error('Email does not exist');\n            }\n        });\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28804496,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/28804496",
    "title": null,
    "body": "<p><strong><em>Following Regex validations:</em></strong></p>\n\n<ul>\n<li>No spacial characters before @ </li>\n<li>(-) and (.) should not be together\nafter @ No special characters after @ 2 characters must before @\nEmail length should be less 128 characters</li>\n</ul>\n\n\n\n<pre><code>function validateEmail(email) {\nvar chrbeforAt = email.substr(0, email.indexOf('@'));\nif (!($.trim(email).length &gt; 127)) {\n    if (chrbeforAt.length &gt;= 2) {\n        var re = /^(([^&lt;&gt;()[\\]{}'^?\\\\.,!|//#%*-+=&amp;;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        //var re = /[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        return re.test(email);\n    } else {\n        return false;\n    }\n} else {\n    return false;\n}\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28804516,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/28804516",
    "title": null,
    "body": "<p><strong><em>Following Regex validations:</em></strong></p>\n\n<ul>\n<li>No spacial characters before @ </li>\n<li>(-) and (.) should not be together after @ </li>\n<li>No special characters after @ 2 characters must before @</li>\n<li><p>Email length should be less 128 characters</p>\n\n<pre><code>function validateEmail(email) {\n    var chrbeforAt = email.substr(0, email.indexOf('@'));\n    if (!($.trim(email).length &gt; 127)) {\n        if (chrbeforAt.length &gt;= 2) {\n            var re = /^(([^&lt;&gt;()[\\]{}'^?\\\\.,!|//#%*-+=&amp;;:\\s@\\\"]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            return re.test(email);\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n</code></pre></li>\n</ul>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31311899,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/31311899",
    "title": null,
    "body": "<pre><code>\\b[a-z][\\w\\d_\\.]+@\\w+\\.[a-z]{2}[a-z]?\\.?[a-z]{,2}\\s\n</code></pre>\n\n<p>It allows:</p>\n\n<pre><code>abcxyz123@qwert.com    \nabc123xyz@asdf.co.in   \nabc1_xyz1@gmail1.com   \nabc.xyz@gmail.com.in\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31971270,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/31971270",
    "title": null,
    "body": "<p>the best one :D (RFC-friendly &amp; no error \"too complex\") :</p>\n\n<pre><code>function    isMail(mail)\n{\n    pattuser = /^([A-Z0-9_%+\\-!#$&amp;'*\\/=?^`{|}~]+\\.?)*[A-Z0-9_%+\\-!#$&amp;'*\\/=?^`{|}~]+$/i;\n    pattdomain = /^([A-Z0-9-]+\\.?)*[A-Z0-9-]+(\\.[A-Z]{2,9})+$/i;\n\n    tab = mail.split(\"@\");\n    if (tab.length != 2)\n        return false;\n    return (pattuser.test(tab[0]) &amp;&amp; pattdomain.test(tab[1]));\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 32206684,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/32206684",
    "title": null,
    "body": "<p>If you want to use Jquery and want to have modern approach then use JQuery input mask with validation. </p>\n\n<p><a href=\"http://bseth99.github.io/projects/jquery-ui/5-jquery-masks.html\" rel=\"nofollow\">http://bseth99.github.io/projects/jquery-ui/5-jquery-masks.html</a> </p>\n\n<p>Demo on how simple jquery input mask is here: <a href=\"http://codepen.io/anon/pen/gpRyBp\" rel=\"nofollow\">http://codepen.io/anon/pen/gpRyBp</a></p>\n\n<p><strong>Example of simple input mask for date forexample NOT full validation</strong></p>\n\n<pre><code> &lt;input id=\"date\" type=\"text\" placeholder=\"YYYY-MM-DD\"/&gt;\n</code></pre>\n\n<p>and the script:</p>\n\n<pre><code> $(\"#date\").mask(\"9999-99-99\",{placeholder:\"YYYY-MM-DD\"});\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 32420732,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/32420732",
    "title": null,
    "body": "<p>The best practice is to either use HTML5 built-in email tag.</p>\n\n<pre><code>&lt;input type=\"email\" name=\"email\"&gt;\n</code></pre>\n\n<p>or the common email syntax as recognizing @ and . from the string is given below. </p>\n\n<pre><code>^[a-zA-Z0-9_\\-.]+@[a-zA-Z0-9\\-]+\\.[a-zA-Z0-9\\-.]+$\n</code></pre>\n\n<blockquote>\n  <p>Note that this would still produce <strong>invalid email</strong> that will still match\n  the regex, its almost impossible to catch them all but this will\n  improve the situation a little.</p>\n</blockquote>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 32686261,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/32686261",
    "title": null,
    "body": "<p>I have found this to be the best solution:</p>\n\n<pre><code>/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n</code></pre>\n\n<p>It allows the following formats:</p>\n\n<pre>\n1.  prettyandsimple@example.com\n2.  very.common@example.com\n3.  disposable.style.email.with+symbol@example.com\n4.  other.email-with-dash@example.com\n9.  #!$%&'*+-/=?^_`{}|~@example.org\n6.  \"()[]:,;@\\\\\\\"!#$%&'*+-/=?^_`{}| ~.a\"@example.org\n7.  \" \"@example.org (space between the quotes)\n8.  üñîçøðé@example.com (Unicode characters in local part)\n9.  üñîçøðé@üñîçøðé.com (Unicode characters in domain part)\n10. Pelé@example.com (Latin)\n11. δοκιμή@παράδειγμα.δοκιμή (Greek)\n12. 我買@屋企.香港 (Chinese)\n13. 甲斐@黒川.日本 (Japanese)\n14. чебурашка@ящик-с-апельсинами.рф (Cyrillic)\n</pre>\n\n<p>It's clearly versatile and allows the all-important international characters, while still enforcing the basic anything@anything.anything format. It will block spaces which are technically allowed by RFC, but they are so rare that I'm happy to do this.</p>\n",
    "score": 52,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33493854,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/33493854",
    "title": null,
    "body": "<p>This regexp prevents duplicate domain names like abc@abc.com.com.com.com, it will allow only domain two time like abc@abc.co.in. It also does not allow statring from number like 123abc@abc.com  </p>\n\n<pre><code>regexp: /^([a-zA-Z])+([a-zA-Z0-9_.+-])+\\@(([a-zA-Z])+\\.+?(com|co|in|org|net|edu|info|gov|vekomy))\\.?(com|co|in|org|net|edu|info|gov)?$/,  \n</code></pre>\n\n<p>All The Best !!!!!</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 34531722,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/34531722",
    "title": null,
    "body": "<p>Simple regex for email-Id</p>\n\n<pre><code> String EMAIL_PATTERN =\"^(([^&lt;&gt;()\\[\\]\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^&lt;&gt;()[\\]\\.,;:\\s@\\\"]+\\.)+[^&lt;&gt;()[\\]\\.,;:\\s@\\\"]{2,})$\";\n</code></pre>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 37540637,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/37540637",
    "title": null,
    "body": "<p>Use the regular expression:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code> /^[a-z][a-zA-Z0-9_.]*(\\.[a-zA-Z][a-zA-Z0-9_.]*)?@[a-z][a-zA-Z-0-9]*\\.[a-z]+(\\.[a-z]+)?$/\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>function validateEmail(email) {\n    var re = /^[a-z][a-zA-Z0-9_.]*(\\.[a-zA-Z][a-zA-Z0-9_.]*)?@[a-z][a-zA-Z-0-9]*\\.[a-z]+(\\.[a-z]+)?$/;\n    return re.test(email);\n}\n</code></pre>\n\n<p>It should allow only  @ ,  . , _</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 38064836,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/38064836",
    "title": null,
    "body": "<p>I've mixed @mevius and @Boldewyn Code to Create this ultimate code for email verification using JavaScript.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function ValidateEmail(email){\r\n \r\n  var re = /^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n \r\n  var input = document.createElement('input');\r\n \r\n  input.type = 'email';\r\n  input.value = email;\r\n \r\n  return typeof input.checkValidity == 'function' ? input.checkValidity() : re.test(email);\r\n \r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>I have shared this code on my blog <a href=\"http://mycodingtricks.com/snippets/javascript/javascript-regex-email-validation/\" rel=\"nofollow\">here</a>.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 38137215,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/38137215",
    "title": null,
    "body": "<p>I'm really looking forward to solve this problem.\nSo I modified email validation regular expression above </p>\n\n<ul>\n<li><p>Original<br>\n<code>/^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/</code></p></li>\n<li><p>Modified<br>\n<code>/^(([^&lt;&gt;()\\[\\]\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^&lt;&gt;()\\.,;\\s@\\\"]+\\.{0,1})+[^&lt;&gt;()\\.,;:\\s@\\\"]{2,})$/</code></p></li>\n</ul>\n\n<p>to pass the examples in <a href=\"https://en.wikipedia.org/wiki/Email_address#cite_note-20/syntax\">Wikipedia Email Address</a>.</p>\n\n<p>And you can see the result in <a href=\"http://regexr.com/3dnsr\">here</a>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/m2YBr.png\"><img src=\"https://i.stack.imgur.com/m2YBr.png\" alt=\"enter image description here\"></a></p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 38544440,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/38544440",
    "title": null,
    "body": "<p>If you are using ng-pattern and material this does the job. </p>\n\n<pre><code>vm.validateEmail = '([a-zA-Z0-9_.]{1,})((@[a-zA-Z]{2,})[\\\\\\.]([a-zA-Z]{2}|[a-zA-Z]{3}))';\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 39772679,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/39772679",
    "title": null,
    "body": "<p>What you think about my solution here:\n<a href=\"https://stackoverflow.com/questions/22660753/how-to-use-angular-input-fields-email-validation-inside-controller/27557865#27557865\">How to use Angular input fields email validation inside controller?</a></p>\n\n<p>Basically you can create a hidden input field of type email and using javascript set the value to that input and check if it's valid. </p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 40474862,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/40474862",
    "title": null,
    "body": "<p>Whoever is using @pvl solution and wants it to pass <a href=\"http://eslint.org/docs/rules/prefer-template\" rel=\"nofollow noreferrer\">ESLint Prefer-template</a> then here's a version where I used template literals instead of string concatenation.</p>\n\n<pre><code>validateEmail(email) {\n    let sQtext = '[^\\\\x0d\\\\x22\\\\x5c\\\\x80-\\\\xff]';\n    let sDtext = '[^\\\\x0d\\\\x5b-\\\\x5d\\\\x80-\\\\xff]';\n    let sAtom = '[^\\\\x00-\\\\x20\\\\x22\\\\x28\\\\x29\\\\x2c\\\\x2e\\\\x3a-\\\\x3c\\\\x3e\\\\x40\\\\x5b-\\\\x5d\\\\x7f-\\\\xff]+';\n    let sQuotedPair = '\\\\x5c[\\\\x00-\\\\x7f]';\n    let sDomainLiteral = `\\\\x5b(${sDtext}|${sQuotedPair})*\\\\x5d`;\n    let sQuotedString = `\\\\x22(${sQtext}|${sQuotedPair})*\\\\x22`;\n    let sDomainRef = sAtom;\n    let sSubDomain = `(${sDomainRef}|${sDomainLiteral})`;\n    let sWord = `(${sAtom}|${sQuotedString})`;\n    let sDomain = `${sSubDomain}(\\\\x2e${sSubDomain})*`;\n    let sLocalPart = `${sWord}(\\\\x2e${sWord})*`;\n    let sAddrSpec = `${sLocalPart}\\\\x40${sDomain}`; // complete RFC822 email address spec\n    let sValidEmail = `^${sAddrSpec}$`; // as whole string\n\n    let reValidEmail = new RegExp(sValidEmail);\n\n    return reValidEmail.test(email);\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 41278091,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/41278091",
    "title": null,
    "body": "<p>best regex ever which confirm RFC5322</p>\n\n<p><code>\n[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])+\n</code></p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 41354731,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/41354731",
    "title": null,
    "body": "<h2>A solution that does not check the existence of the TLD is incomplete.</h2>\n\n<p>Almost all answers to this questions suggest using Regex to validate emails addresses. I think Regex is only good for a rudimentary validation. It seems that the checking validation of email addresses is actually two separate problems:</p>\n\n<p><strong>1- Validation of email format:</strong> Making sure if the email complies with the format and pattern of emails in RFC 5322 and if the TLD actually exists. A list of all valid TLDs can be found <a href=\"http://data.iana.org/TLD/tlds-alpha-by-domain.txt\" rel=\"noreferrer\">here</a>.</p>\n\n<p>For example, although the address <code>example@example.ccc</code> will pass the regex, it is not a valid email, because <code>ccc</code> is not a top-level domain by IANA.</p>\n\n<p><strong>2- Making sure the email actually exists:</strong> For doing this, you just need <a href=\"https://davidcel.is/posts/stop-validating-email-addresses-with-regex/#just-send-them-an-email-already\" rel=\"noreferrer\">to send the users an email</a>.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 41437076,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/41437076",
    "title": null,
    "body": "<p>I was looking for a Regex in JS that passes all Email Address test cases:</p>\n\n<ul>\n<li><p>email@domain.com  Valid email</p></li>\n<li><p>firstname.lastname@domain.com Email contains dot in the address field</p></li>\n<li><p>email@subdomain.domain.com    Email contains dot with subdomain</p></li>\n<li><p>firstname+lastname@domain.com Plus sign is considered valid character</p></li>\n<li><p>email@123.123.123.123 Domain is valid IP address</p></li>\n<li><p>email@[123.123.123.123]   Square bracket around IP address is considered valid</p></li>\n<li><p>“email”@domain.com    Quotes around email is considered valid</p></li>\n<li><p>1234567890@domain.com Digits in address are valid</p></li>\n<li><p>email@domain-one.com  Dash in domain name is valid</p></li>\n<li><p>_______@domain.com    Underscore in the address field is valid</p></li>\n<li><p>email@domain.name .name is valid Top Level Domain name</p></li>\n<li><p>email@domain.co.jp    Dot in Top Level Domain name also considered valid (use co.jp as example here)</p></li>\n<li><p>firstname-lastname@domain.com Dash in address field is valid</p></li>\n</ul>\n\n<p>Here we go :</p>\n\n<p><a href=\"http://regexr.com/3f07j\" rel=\"nofollow noreferrer\">http://regexr.com/3f07j</a></p>\n\n<p>OR regex:</p>\n\n<pre><code>Regex = /(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@[*[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+]*/\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 42197579,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/42197579",
    "title": null,
    "body": "<p>In nodeJS you can also use validator node module and simply use like that </p>\n\n<p>Install the library with npm install validator</p>\n\n<pre><code>var validator = require('validator');\n\nvalidator.isEmail('foo@bar.com'); //=&gt; true \n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 42871920,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/42871920",
    "title": null,
    "body": "<p>If you define your regular expression as a string then all backslashes need to be escaped, so instead of '\\w' you should have '\\w'.</p>\n\n<p>Alternatively, define it as a regular expression:</p>\n\n<pre><code>var pattern = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/; \n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43245721,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/43245721",
    "title": null,
    "body": "<p>There are some complex RegEx written here, that also works.</p>\n\n<p>I tested this one and it works too:</p>\n\n<pre><code>[a-zA-Z0-9._]+[@]+[a-zA-Z0-9]+[.]+[a-zA-Z]{2,6}\n</code></pre>\n\n<p>Please test this here : <a href=\"http://www.regextester.com/?fam=97334\" rel=\"nofollow noreferrer\">http://www.regextester.com/?fam=97334</a></p>\n\n<p>Hope this helps.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43491603,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/43491603",
    "title": null,
    "body": "<p>You can also use this reusable <a href=\"https://bitsrc.io/bit/utils/validator/is-email\" rel=\"nofollow noreferrer\">is-email component</a> which runs this regex and returns a boolean without duplicating it in multiple places.</p>\n\n<p>How it works:</p>\n\n<pre><code>function isEmail(email) {\n  const re = /^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n};\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44323593,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/44323593",
    "title": null,
    "body": "<p>I'd like to add a short note about non-ASCII characters. Rnevius's (and co.) solution is brilliant, but it allows to add Cyrillic, Japanese, Emoticons and other unicode symbols which may be restricted by some servers.</p>\n\n<p>The code below will print <code>true</code> though it contains UTF-8 character <code>Ё</code>.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log (/^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test ('Ё@example.org'))</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>In my case all non-ASCII symbols are prohibited so I have modified the original expression to exclude all characters above U+007F:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>/^(([^\\u0080-\\uffff&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+(\\.[^\\u0080-\\uffff&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Maybe this will help someone to prevent undesired behaviour.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44601723,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/44601723",
    "title": null,
    "body": "<p>How about creating a function which will test any string against emails' pattern using regular expression in JavaScript, as we know email addresses can be quite different in different regions, like in UK and Australia it usually ends up with <code>.co.uk</code> or <code>.com.au</code>, so I tried to cover those as well, also check if the string passed to the function, something like this:</p>\n\n<pre><code>var isEmail = function(str) {\n  return typeof str==='string' &amp;&amp; /^[\\w+\\d+._]+\\@[\\w+\\d+_+]+\\.[\\w+\\d+._]{2,8}$/.test(str);\n}\n</code></pre>\n\n<p>and check if it's email like below:</p>\n\n<pre><code>isEmail('alex@example.com'); //true\nisEmail('alireza@test.co.uk'); //true\nisEmail('peter.example@yahoo.com.au'); //true\nisEmail('alex@example.com'); //true\nisEmail('peter_123@news.com'); //true\nisEmail('hello7___@ca.com.pt'); //true\nisEmail('example@example.co'); //true\nisEmail('hallo@example.coassjj#sswzazaaaa'); //false\nisEmail('hallo2ww22@example....caaaao'); //false\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44671643,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/44671643",
    "title": null,
    "body": "<p><strong>Wikipedia standard mail syntax :</strong></p>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Email_address#Examples\" rel=\"nofollow noreferrer\">https://en.wikipedia.org/wiki/Email_address#Examples</a>\n<a href=\"https://fr.wikipedia.org/wiki/Adresse_%C3%A9lectronique#Syntaxe_exacte\" rel=\"nofollow noreferrer\">https://fr.wikipedia.org/wiki/Adresse_%C3%A9lectronique#Syntaxe_exacte</a></p>\n\n<pre><code>function validMail(mail)\n{\n    return /^(([^&lt;&gt;()\\[\\]\\.,;:\\s@\\\"]+(\\.[^&lt;&gt;()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^&lt;&gt;()\\.,;\\s@\\\"]+\\.{0,1})+([^&lt;&gt;()\\.,;:\\s@\\\"]{2,}|[\\d\\.]+))$/.test(mail);\n}\n\n// VALID MAILS\n\nvalidMail('Abc@example.com') // Return true\nvalidMail('Abc@example.com.') // Return true\nvalidMail('Abc@10.42.0.1') // Return true\nvalidMail('user@localserver') // Return true\nvalidMail('Abc.123@example.com') // Return true\nvalidMail('user+mailbox/department=shipping@example.com') // Return true\nvalidMail('\"very.(),:;&lt;&gt;[]\\\".VERY.\\\"very@\\\\ \\\"very\\\".unusual\"@strange.example.com') // Return true\nvalidMail('!#$%&amp;\\'*+-/=?^_`.{|}~@example.com') // Return true\nvalidMail('\"()&lt;&gt;[]:,;@\\\\\\\"!#$%&amp;\\'-/=?^_`{}| ~.a\"@example.org') // Return true\nvalidMail('\"Abc@def\"@example.com') // Return true\nvalidMail('\"Fred Bloggs\"@example.com') // Return true\nvalidMail('\"Joe.\\\\Blow\"@example.com') // Return true\nvalidMail('Loïc.Accentué@voilà.fr') // Return true\nvalidMail('\" \"@example.org') // Return true\nvalidMail('user@[IPv6:2001:DB8::1]') // Return true\n\n// INVALID MAILS\n\nvalidMail('Abc.example.com') // Return false\nvalidMail('A@b@c@example.com') // Return false\nvalidMail('a\"b(c)d,e:f;g&lt;h&gt;i[j\\k]l@example.com') // Return false\nvalidMail('just\"not\"right@example.com') // Return false\nvalidMail('this is\"not\\allowed@example.com') // Return false\nvalidMail('this\\ still\\\"not\\\\allowed@example.com') // Return false\nvalidMail('john..doe@example.com') // Return false\nvalidMail('john.doe@example..com') // Return false\n</code></pre>\n\n<p><strong>Show this test : <a href=\"https://regex101.com/r/LHJ9gU/1\" rel=\"nofollow noreferrer\">https://regex101.com/r/LHJ9gU/1</a></strong></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44996725,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/44996725",
    "title": null,
    "body": "<p>ES6 sample</p>\n\n<pre><code>const validateEmail=(email)=&gt; /^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email);\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 45077998,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/45077998",
    "title": null,
    "body": "<p>Now ReactNative Version 0.46 Use Below code for email Validation.</p>\n\n<pre><code> validateEmail = (email) =&gt; {\n     var re = /^(([^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+(\\.[^&lt;&gt;()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n     if (re.test(email)) {\n     } else {\n       alert('email: ' + \"Please enter valid emailID.\")\n     }\n }\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 45250371,
    "parentID": 46155,
    "url": "https://stackoverflow.com/q/45250371",
    "title": null,
    "body": "<p>You can also try</p>\n\n<pre><code>var string = \"hmharsh3@gmail.com\"\nvar exp = /(\\w+\\@{1}\\w+\\.{1}[a-zA-Z]{2,})/i\nalert(exp.test(string))\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 105074,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/105074",
    "title": null,
    "body": "<p>There have been a couple attempts at this. The question is: do you want actual GUIDs, or just random numbers that <em>look</em> like GUIDs? It's easy enough to generate random numbers.</p>\n\n<pre><code>function guid() {\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  }\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n    s4() + '-' + s4() + s4() + s4();\n}\n</code></pre>\n\n<p>However, note that such values <strong>are not genuine GUIDs</strong>.</p>\n\n<p><strike>\nThere's no way to generate real GUIDs in Javascript, because they depend on properties of the local computer that browsers do not expose. You'll need to use OS-specific services like ActiveX: <a href=\"http://p2p.wrox.com/topicindex/20339.htm\" rel=\"noreferrer\">http://p2p.wrox.com/topicindex/20339.htm</a>\n</strike></p>\n\n<p>Edit: not correct - RFC4122 allows random (\"version 4\") GUIDs.  See other answers for specifics.</p>\n\n<p><strong>Note</strong>: the provided code snippet does not follow RFC4122 which requires that the version (<code>4</code>) has to be integrated into the generated output string. <strong>Do not use this answer</strong> if you need compliant GUIDs.</p>\n\n<p>Use:</p>\n\n<pre><code>var uuid = guid();\n</code></pre>\n\n<h1>Demo:</h1>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function guid() {\r\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n    s4() + '-' + s4() + s4() + s4();\r\n}\r\n\r\nfunction s4() {\r\n  return Math.floor((1 + Math.random()) * 0x10000)\r\n    .toString(16)\r\n    .substring(1);\r\n}\r\n\r\ndocument.getElementById('jsGenId').addEventListener('click', function() {\r\n  document.getElementById('jsIdResult').value = guid();\r\n})</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>input { font-family: monospace; }</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;button id=\"jsGenId\" type=\"button\" onclick=\"runGuid\"&gt;Generate GUID&lt;/button&gt;\r\n&lt;br&gt;\r\n&lt;input id=\"jsIdResult\" type=\"text\" placeholder=\"Results will be placed here...\" readonly size=\"40\"/&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 1542,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 105078,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/105078",
    "title": null,
    "body": "<p>From <a href=\"http://blog.shkedy.com/2007/01/createing-guids-with-client-side.html\" rel=\"noreferrer\">sagi shkedy's technical blog</a>:</p>\n\n<pre><code>function generateGuid() {\n  var result, i, j;\n  result = '';\n  for(j=0; j&lt;32; j++) {\n    if( j == 8 || j == 12|| j == 16|| j == 20) \n      result = result + '-';\n    i = Math.floor(Math.random()*16).toString(16).toUpperCase();\n    result = result + i;\n  }\n  return result;\n}\n</code></pre>\n\n<p>There are other methods that involve using an ActiveX control, but stay away from these!</p>\n\n<p>EDIT:  I thought it was worth pointing out that no GUID generator can guarantee unique keys (check the <a href=\"http://en.wikipedia.org/wiki/Globally_Unique_Identifier\" rel=\"noreferrer\">wikipedia article</a>).  There is always a chance of collisions.  A GUID simply offers a large enough universe of keys to reduce the change of collisions to almost nil.</p>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 105219,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/105219",
    "title": null,
    "body": "<p>A web service would be useful.  </p>\n\n<p>Quick Google found: <a href=\"http://www.hoskinson.net/GuidGenerator/\" rel=\"noreferrer\">http://www.hoskinson.net/GuidGenerator/</a></p>\n\n<p>Can't vouch for this implementation, but SOMEONE must publish a bonafide GUID generator.</p>\n\n<p>With such a web service, you could develop a REST web interface that consumes the GUID web service, and serves it through AJAX to javascript in a browser.</p>\n",
    "score": 24,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 105327,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/105327",
    "title": null,
    "body": "<p>From <a href=\"http://en.wikipedia.org/wiki/Universally_Unique_Identifier\" rel=\"noreferrer\">good ol' wikipedia</a> there's a link to a javascript implementation of UUID.</p>\n\n<p>It looks fairly elegant, and could perhaps be improved by salting with a hash of the client's IP address. This hash could perhaps be inserted into the html document server-side for use by the client-side javascript.</p>\n\n<p>UPDATE : The original site has had a shuffle, here is the <a href=\"http://af-design.com/blog/2008/09/05/updated-javascript-uuid-generator-v03/\" rel=\"noreferrer\">updated version</a></p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 873856,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/873856",
    "title": null,
    "body": "<p>Here's some code based on <a href=\"http://www.ietf.org/rfc/rfc4122.txt\" rel=\"noreferrer\">RFC 4122</a>, section 4.4 (Algorithms for Creating a UUID from Truly Random or Pseudo-Random Number).</p>\n\n<pre><code>function createUUID() {\n    // http://www.ietf.org/rfc/rfc4122.txt\n    var s = [];\n    var hexDigits = \"0123456789abcdef\";\n    for (var i = 0; i &lt; 36; i++) {\n        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n    }\n    s[14] = \"4\";  // bits 12-15 of the time_hi_and_version field to 0010\n    s[19] = hexDigits.substr((s[19] &amp; 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01\n    s[8] = s[13] = s[18] = s[23] = \"-\";\n\n    var uuid = s.join(\"\");\n    return uuid;\n}\n</code></pre>\n",
    "score": 122,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1323308,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/1323308",
    "title": null,
    "body": "<p>This create version 4 UUID (created from pseudo random numbers) :</p>\n\n<pre><code>function uuid()\n{\n   var chars = '0123456789abcdef'.split('');\n\n   var uuid = [], rnd = Math.random, r;\n   uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n   uuid[14] = '4'; // version 4\n\n   for (var i = 0; i &lt; 36; i++)\n   {\n      if (!uuid[i])\n      {\n         r = 0 | rnd()*16;\n\n         uuid[i] = chars[(i == 19) ? (r &amp; 0x3) | 0x8 : r &amp; 0xf];\n      }\n   }\n\n   return uuid.join('');\n}\n</code></pre>\n\n<p>Here is a sample of the UUIDs generated :</p>\n\n<pre><code>682db637-0f31-4847-9cdf-25ba9613a75c\n97d19478-3ab2-4aa1-b8cc-a1c3540f54aa\n2eed04c9-2692-456d-a0fd-51012f947136\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2117523,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/2117523",
    "title": null,
    "body": "<p>For an <a href=\"https://www.ietf.org/rfc/rfc4122.txt\" rel=\"noreferrer\">RFC4122</a> version 4 compliant solution, this one-liner(ish) solution is the most compact I could come up with.:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function uuidv4() {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r &amp; 0x3 | 0x8);\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\nconsole.log(uuidv4())</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>Update, 2015-06-02</strong>:  Be aware that UUID uniqueness relies heavily on the underlying random number generator (RNG).  The solution above uses <code>Math.random()</code> for brevity, however <code>Math.random()</code> is <em>not</em> guaranteed to be a high-quality RNG.  See Adam Hyland's <a href=\"http://bocoup.com/weblog/random-numbers/\" rel=\"noreferrer\">excellent writeup on Math.random()</a> for details.  For a more robust solution, consider something like <a href=\"https://github.com/kelektiv/node-uuid\" rel=\"noreferrer\">the uuid module</a>[Disclaimer: I'm the author], which uses higher quality RNG APIs where available.</p>\n\n<p><strong>Update, 2015-08-26</strong>: As a side-note, this <a href=\"https://gist.githubusercontent.com/aristus/f0c311df98d92e367df0\" rel=\"noreferrer\">gist</a> describes how to determine how many IDs can be generated before reaching a certain probability of collision.  For example, with 3.26x10<sup>15</sup> version 4 RFC4122 UUIDs you have a 1-in-a-million chance of collision.</p>\n\n<p><strong>Update, 2017-06-28</strong>: A <a href=\"https://v8project.blogspot.com/2015/12/theres-mathrandom-and-then-theres.html\" rel=\"noreferrer\">good article from Chrome developers</a> discussing the state of Math.random PRNG quality in Chrome, Firefox, and Safari.  tl;dr - As of late-2015 it's \"pretty good\", but not cryptographic quality.  To address that issue, here's an updated version of the above solution that uses ES6, the <code>crypto</code> API, and <a href=\"https://gist.github.com/jed/982883\" rel=\"noreferrer\">a bit of JS wizardy I can't take credit for</a>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function uuidv4() {\r\n  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =&gt;\r\n    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] &amp; 15 &gt;&gt; c / 4).toString(16)\r\n  )\r\n}\r\n\r\nconsole.log(uuidv4());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 2635,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2204834,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/2204834",
    "title": null,
    "body": "<p>It's just a simple AJAX call...</p>\n\n<p>If anyone is still interested, here's my solution.</p>\n\n<p>On the server side:</p>\n\n<pre><code>[WebMethod()]\npublic static string GenerateGuid()\n{\n    return Guid.NewGuid().ToString();\n}\n</code></pre>\n\n<p>On the client side:</p>\n\n<pre><code>var myNewGuid = null;\nPageMethods.GenerateGuid(\n    function(result, userContext, methodName)\n    {\n        myNewGuid = result;\n    },\n    function()\n    {\n        alert(\"WebService call failed.\");\n    }\n);\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3251361,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/3251361",
    "title": null,
    "body": "<pre><code>  // RFC 4122\n  //\n  // A UUID is 128 bits long\n  //\n  // String representation is five fields of 4, 2, 2, 2, and 6 bytes.\n  // Fields represented as lowercase, zero-filled, hexadecimal strings, and\n  // are separated by dash characters\n  //\n  // A version 4 UUID is generated by setting all but six bits to randomly\n  // chosen values\n  var uuid = [\n    Math.random().toString(16).slice(2, 10),\n    Math.random().toString(16).slice(2, 6),\n\n    // Set the four most significant bits (bits 12 through 15) of the\n    // time_hi_and_version field to the 4-bit version number from Section\n    // 4.1.3\n    (Math.random() * .0625 /* 0x.1 */ + .25 /* 0x.4 */).toString(16).slice(2, 6),\n\n    // Set the two most significant bits (bits 6 and 7) of the\n    // clock_seq_hi_and_reserved to zero and one, respectively\n    (Math.random() * .25 /* 0x.4 */ + .5 /* 0x.8 */).toString(16).slice(2, 6),\n\n    Math.random().toString(16).slice(2, 14)].join('-');\n</code></pre>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4892910,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/4892910",
    "title": null,
    "body": "<p>I know this topic is old but if you really wanted to create a GUID you could obvioulsy do it without straight javascript.  You could cause a page expiration every load and create a GUID on the server side then populate that into a javascript variable at page run time.  Just an idea.</p>\n",
    "score": -8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 7061193,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/7061193",
    "title": null,
    "body": "<p>Here's a solution dated Oct. 9, 2011 from a comment by user <em>jed</em> at <a href=\"https://gist.github.com/982883\" rel=\"nofollow noreferrer\">https://gist.github.com/982883</a>:</p>\n\n<pre><code>UUIDv4 = function b(a){return a?(a^Math.random()*16&gt;&gt;a/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,b)}\n</code></pre>\n\n<p>This accomplishes the same goal as the <a href=\"https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\">current highest-rated answer</a>, but in 50+ fewer bytes by exploiting coercion, recursion, and exponential notation. For those curious how it works, here's the annotated form of an older version of the function:</p>\n\n<pre><code>UUIDv4 =\n\nfunction b(\n  a // placeholder\n){\n  return a // if the placeholder was passed, return\n    ? ( // a random number from 0 to 15\n      a ^ // unless b is 8,\n      Math.random() // in which case\n      * 16 // a random number from\n      &gt;&gt; a/4 // 8 to 11\n      ).toString(16) // in hexadecimal\n    : ( // or otherwise a concatenated string:\n      [1e7] + // 10000000 +\n      -1e3 + // -1000 +\n      -4e3 + // -4000 +\n      -8e3 + // -80000000 +\n      -1e11 // -100000000000,\n      ).replace( // replacing\n        /[018]/g, // zeroes, ones, and eights with\n        b // random hex digits\n      )\n}\n</code></pre>\n",
    "score": 45,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 7221797,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/7221797",
    "title": null,
    "body": "<pre><code>var uuid = function() {\n    var buf = new Uint32Array(4);\n    window.crypto.getRandomValues(buf);\n    var idx = -1;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        idx++;\n        var r = (buf[idx&gt;&gt;3] &gt;&gt; ((idx%8)*4))&amp;15;\n        var v = c == 'x' ? r : (r&amp;0x3|0x8);\n        return v.toString(16);\n    });\n};\n</code></pre>\n\n<p>EDIT:</p>\n\n<p>Revisited my project that was using this function and disliked the verbosity. - But needed proper randomness.</p>\n\n<p>A version based on Briguy37's answer and some bitwise operators to extract nibble sized windows from the buffer.</p>\n\n<p>Should adhere to the RFC Type 4 (random) schema, since I had Problems last time parsing non-compliant uuids with Java's UUID.</p>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 7892504,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/7892504",
    "title": null,
    "body": "<p>There is a jQuery plugin that handles Guid's nicely @ <a href=\"http://plugins.jquery.com/project/GUID_Helper\" rel=\"noreferrer\">http://plugins.jquery.com/project/GUID_Helper</a></p>\n\n<pre><code>jQuery.Guid.Value()\n</code></pre>\n\n<p>Returns value of internal Guid. If no guid has been specified, returns a new one (value is then stored internally).</p>\n\n<hr>\n\n<pre><code>jQuery.Guid.New()\n</code></pre>\n\n<p>Returns a new Guid and sets it's value internally.</p>\n\n<hr>\n\n<pre><code>jQuery.Guid.Empty()\n</code></pre>\n\n<p>Returns an empty Guid 00000000-0000-0000-0000-000000000000.</p>\n\n<hr>\n\n<pre><code>jQuery.Guid.IsEmpty()\n</code></pre>\n\n<p>Returns boolean. True if empty/undefined/blank/null.</p>\n\n<hr>\n\n<pre><code>jQuery.Guid.IsValid()\n</code></pre>\n\n<p>Returns boolean. True valid guid, false if not.</p>\n\n<hr>\n\n<pre><code>jQuery.Guid.Set()\n</code></pre>\n\n<p>Retrns Guid. Sets Guid to user specified Guid, if invalid, returns an empty guid.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8472700,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/8472700",
    "title": null,
    "body": "<p>Here is a combination of the <a href=\"https://stackoverflow.com/a/2117523/11236\">top voted answer</a>, with a workaround for <a href=\"https://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript\">Chrome's collisions</a>:</p>\n\n<pre><code>generateGUID = (typeof(window.crypto) != 'undefined' &amp;&amp; \n                typeof(window.crypto.getRandomValues) != 'undefined') ?\n    function() {\n        // If we have a cryptographically secure PRNG, use that\n        // https://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript\n        var buf = new Uint16Array(8);\n        window.crypto.getRandomValues(buf);\n        var S4 = function(num) {\n            var ret = num.toString(16);\n            while(ret.length &lt; 4){\n                ret = \"0\"+ret;\n            }\n            return ret;\n        };\n        return (S4(buf[0])+S4(buf[1])+\"-\"+S4(buf[2])+\"-\"+S4(buf[3])+\"-\"+S4(buf[4])+\"-\"+S4(buf[5])+S4(buf[6])+S4(buf[7]));\n    }\n\n    :\n\n    function() {\n        // Otherwise, just use Math.random\n        // https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random()*16|0, v = c == 'x' ? r : (r&amp;0x3|0x8);\n            return v.toString(16);\n        });\n    };\n</code></pre>\n\n<p><a href=\"http://jsbin.com/uqives/3\" rel=\"nofollow noreferrer\">On jsbin</a> if you want to test it.</p>\n",
    "score": 51,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8809472,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/8809472",
    "title": null,
    "body": "<p>I really like how clean <a href=\"https://stackoverflow.com/a/2117523/508537\">Broofa's answer</a> is, but it's unfortunate that poor implementations of <code>Math.random</code> leave the chance for collision.  </p>\n\n<p>Here's a similar <a href=\"http://www.ietf.org/rfc/rfc4122.txt\" rel=\"noreferrer\">RFC4122</a> version 4 compliant solution that solves that issue by offsetting the first 13 hex numbers by a hex portion of the timestamp.  That way, even if <code>Math.random</code> is on the same seed, both clients would have to generate the UUID at the exact same millisecond (or 10,000+ years later) to get the same UUID:   </p>\n\n<pre><code>function generateUUID () { // Public Domain/MIT\n    var d = new Date().getTime();\n    if (typeof performance !== 'undefined' &amp;&amp; typeof performance.now === 'function'){\n        d += performance.now(); //use high-precision timer if available\n    }\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c === 'x' ? r : (r &amp; 0x3 | 0x8)).toString(16);\n    });\n}\n</code></pre>\n\n<p><br/>\n<a href=\"https://jsfiddle.net/xg7tek9j/7/\" rel=\"noreferrer\">Here's a fiddle to test.</a></p>\n",
    "score": 585,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8857806,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/8857806",
    "title": null,
    "body": "<p>Adjusted my own UUID/GUID generator with some extras <a href=\"http://frugalcoder.us/post/2012/01/13/javascript-guid-uuid-generator.aspx\" rel=\"noreferrer\">here</a>.</p>\n\n<p>I'm using <a href=\"http://baagoe.com/en/RandomMusings/javascript/\" rel=\"noreferrer\">the following Kybos</a> random number generator to be a bit more cryptographically sound.</p>\n\n<p>Below is my script with the Mash and Kybos methods from baagoe.com excluded.</p>\n\n<pre><code>//UUID/Guid Generator\n// use: UUID.create() or UUID.createSequential()\n// convenience:  UUID.empty, UUID.tryParse(string)\n(function(w){\n  // From http://baagoe.com/en/RandomMusings/javascript/\n  // Johannes BaagÃ¸e &lt;baagoe@baagoe.com&gt;, 2010\n  //function Mash() {...};\n\n  // From http://baagoe.com/en/RandomMusings/javascript/\n  //function Kybos() {...};\n\n  var rnd = Kybos();\n\n  //UUID/GUID Implementation from http://frugalcoder.us/post/2012/01/13/javascript-guid-uuid-generator.aspx\n  var UUID = {\n    \"empty\": \"00000000-0000-0000-0000-000000000000\"\n    ,\"parse\": function(input) {\n      var ret = input.toString().trim().toLowerCase().replace(/^[\\s\\r\\n]+|[\\{\\}]|[\\s\\r\\n]+$/g, \"\");\n      if ((/[a-f0-9]{8}\\-[a-f0-9]{4}\\-[a-f0-9]{4}\\-[a-f0-9]{4}\\-[a-f0-9]{12}/).test(ret))\n        return ret;\n      else\n        throw new Error(\"Unable to parse UUID\");\n    }\n    ,\"createSequential\": function() {\n      var ret = new Date().valueOf().toString(16).replace(\"-\",\"\")\n      for (;ret.length &lt; 12; ret = \"0\" + ret);\n      ret = ret.substr(ret.length-12,12); //only least significant part\n      for (;ret.length &lt; 32;ret += Math.floor(rnd() * 0xffffffff).toString(16));\n      return [ret.substr(0,8), ret.substr(8,4), \"4\" + ret.substr(12,3), \"89AB\"[Math.floor(Math.random()*4)] + ret.substr(16,3),  ret.substr(20,12)].join(\"-\");\n    }\n    ,\"create\": function() {\n      var ret = \"\";\n      for (;ret.length &lt; 32;ret += Math.floor(rnd() * 0xffffffff).toString(16));\n      return [ret.substr(0,8), ret.substr(8,4), \"4\" + ret.substr(12,3), \"89AB\"[Math.floor(Math.random()*4)] + ret.substr(16,3),  ret.substr(20,12)].join(\"-\");\n    }\n    ,\"random\": function() {\n      return rnd();\n    }\n    ,\"tryParse\": function(input) {\n      try {\n        return UUID.parse(input);\n      } catch(ex) {\n        return UUID.empty;\n      }\n    }\n  };\n  UUID[\"new\"] = UUID.create;\n\n  w.UUID = w.Guid = UUID;\n}(window || this));</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10725965,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/10725965",
    "title": null,
    "body": "<p>The better way:</p>\n\n<pre><code>function(\n  a,b                // placeholders\n){\n  for(               // loop :)\n      b=a='';        // b - result , a - numeric variable\n      a++&lt;36;        // \n      b+=a*51&amp;52  // if \"a\" is not 9 or 14 or 19 or 24\n                  ?  //  return a random number or 4\n         (\n           a^15      // if \"a\" is not 15\n              ?      // genetate a random number from 0 to 15\n           8^Math.random()*\n           (a^20?16:4)  // unless \"a\" is 20, in which case a random number from 8 to 11\n              :\n           4            //  otherwise 4\n           ).toString(16)\n                  :\n         '-'            //  in other cases (if \"a\" is 9,14,19,24) insert \"-\"\n      );\n  return b\n }\n</code></pre>\n\n<p>Minimized:</p>\n\n<pre><code>function(a,b){for(b=a='';a++&lt;36;b+=a*51&amp;52?(a^15?8^Math.random()*(a^20?16:4):4).toString(16):'-');return b}\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11301105,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/11301105",
    "title": null,
    "body": "<p>JavaScript project on GitHub - <a href=\"https://github.com/LiosK/UUID.js\">https://github.com/LiosK/UUID.js</a></p>\n\n<blockquote>\n  <p><strong>UUID.js The RFC-compliant UUID generator for JavaScript.</strong></p>\n  \n  <p>See RFC 4122 <a href=\"http://www.ietf.org/rfc/rfc4122.txt\">http://www.ietf.org/rfc/rfc4122.txt</a>.</p>\n  \n  <p><strong>Features Generates RFC 4122 compliant UUIDs.</strong></p>\n  \n  <p>Version 4 UUIDs (UUIDs from random numbers) and version 1 UUIDs\n  (time-based UUIDs) are available.</p>\n  \n  <p>UUID object allows a variety of access to the UUID including access to\n  the UUID fields.</p>\n  \n  <p>Low timestamp resolution of JavaScript is compensated by random\n  numbers.</p>\n</blockquote>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13403498,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/13403498",
    "title": null,
    "body": "<p>Here is a totally non-compliant but very performant implementation to generate an ASCII-safe GUID-like unique identifier.</p>\n\n<pre><code>function generateQuickGuid() {\n    return Math.random().toString(36).substring(2, 15) +\n        Math.random().toString(36).substring(2, 15);\n}\n</code></pre>\n\n<p>Generates 26 [a-z0-9] characters, yielding a UID that is both shorter and more unique than RFC compliant GUIDs. Dashes can be trivially added if human-readability matters.</p>\n\n<p>Here are usage examples and timings for this function and several of this question's other answers. The timing was performed under Chrome m25, 10 million iterations each.</p>\n\n<pre><code>&gt;&gt;&gt; generateQuickGuid()\n\"nvcjf1hs7tf8yyk4lmlijqkuo9\"\n\"yq6gipxqta4kui8z05tgh9qeel\"\n\"36dh5sec7zdj90sk2rx7pjswi2\"\nruntime: 32.5s\n\n&gt;&gt;&gt; GUID() // John Millikin\n\"7a342ca2-e79f-528e-6302-8f901b0b6888\"\nruntime: 57.8s\n\n&gt;&gt;&gt; regexGuid() // broofa\n\"396e0c46-09e4-4b19-97db-bd423774a4b3\"\nruntime: 91.2s\n\n&gt;&gt;&gt; createUUID() // Kevin Hakanson\n\"403aa1ab-9f70-44ec-bc08-5d5ac56bd8a5\"\nruntime: 65.9s\n\n&gt;&gt;&gt; UUIDv4() // Jed Schmidt\n\"f4d7d31f-fa83-431a-b30c-3e6cc37cc6ee\"\nruntime: 282.4s\n\n&gt;&gt;&gt; Math.uuid() // broofa\n\"5BD52F55-E68F-40FC-93C2-90EE069CE545\"\nruntime: 225.8s\n\n&gt;&gt;&gt; Math.uuidFast() // broofa\n\"6CB97A68-23A2-473E-B75B-11263781BBE6\"\nruntime: 92.0s\n\n&gt;&gt;&gt; Math.uuidCompact() // broofa\n\"3d7b7a06-0a67-4b67-825c-e5c43ff8c1e8\"\nruntime: 229.0s\n\n&gt;&gt;&gt; bitwiseGUID() // jablko\n\"baeaa2f-7587-4ff1-af23-eeab3e92\"\nruntime: 79.6s\n\n&gt;&gt;&gt;&gt; betterWayGUID() // Andrea Turri\n\"383585b0-9753-498d-99c3-416582e9662c\"\nruntime: 60.0s\n\n&gt;&gt;&gt;&gt; UUID() // John Fowler\n\"855f997b-4369-4cdb-b7c9-7142ceaf39e8\"\nruntime: 62.2s\n</code></pre>\n\n<p>Here is the timing code.</p>\n\n<pre><code>var r;\nconsole.time('t'); \nfor (var i = 0; i &lt; 10000000; i++) { \n    r = FuncToTest(); \n};\nconsole.timeEnd('t');\n</code></pre>\n",
    "score": 41,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13423320,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/13423320",
    "title": null,
    "body": "<p>For those wanting an rfc4122 version 4 compliant solution with speed considerations (few calls to Math.random()):</p>\n\n<pre><code>function UUID() {\n    var nbr, randStr = \"\";\n    do {\n        randStr += (nbr = Math.random()).toString(16).substr(2);\n    } while (randStr.length &lt; 30);\n    return [\n        randStr.substr(0, 8), \"-\",\n        randStr.substr(8, 4), \"-4\",\n        randStr.substr(12, 3), \"-\",\n        ((nbr*4|0)+8).toString(16), // [89ab]\n        randStr.substr(15, 3), \"-\",\n        randStr.substr(18, 12)\n        ].join(\"\");\n}\n</code></pre>\n\n<p>The above function should have a decent balance between speed and randomness.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 14663381,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/14663381",
    "title": null,
    "body": "<p>Simple JavaScript module as a combination of best answers in this thread.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var crypto = window.crypto || window.msCrypto || null; // IE11 fix\r\n\r\nvar Guid = Guid || (function() {\r\n\r\n  var EMPTY = '00000000-0000-0000-0000-000000000000';\r\n\r\n  var _padLeft = function(paddingString, width, replacementChar) {\r\n    return paddingString.length &gt;= width ? paddingString : _padLeft(replacementChar + paddingString, width, replacementChar || ' ');\r\n  };\r\n\r\n  var _s4 = function(number) {\r\n    var hexadecimalResult = number.toString(16);\r\n    return _padLeft(hexadecimalResult, 4, '0');\r\n  };\r\n\r\n  var _cryptoGuid = function() {\r\n    var buffer = new window.Uint16Array(8);\r\n    window.crypto.getRandomValues(buffer);\r\n    return [_s4(buffer[0]) + _s4(buffer[1]), _s4(buffer[2]), _s4(buffer[3]), _s4(buffer[4]), _s4(buffer[5]) + _s4(buffer[6]) + _s4(buffer[7])].join('-');\r\n  };\r\n\r\n  var _guid = function() {\r\n    var currentDateMilliseconds = new Date().getTime();\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(currentChar) {\r\n      var randomChar = (currentDateMilliseconds + Math.random() * 16) % 16 | 0;\r\n      currentDateMilliseconds = Math.floor(currentDateMilliseconds / 16);\r\n      return (currentChar === 'x' ? randomChar : (randomChar &amp; 0x7 | 0x8)).toString(16);\r\n    });\r\n  };\r\n\r\n  var create = function() {\r\n    var hasCrypto = crypto != 'undefined' &amp;&amp; crypto !== null,\r\n      hasRandomValues = typeof(window.crypto.getRandomValues) != 'undefined';\r\n    return (hasCrypto &amp;&amp; hasRandomValues) ? _cryptoGuid() : _guid();\r\n  };\r\n\r\n  return {\r\n    newGuid: create,\r\n    empty: EMPTY\r\n  };\r\n})();\r\n\r\n// DEMO: Create and show GUID\r\nconsole.log(Guid.newGuid());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Usage: </p>\n\n<blockquote>\n  <blockquote>\n    <p><strong>Guid.newGuid()</strong></p>\n    \n    <p>\"c6c2d12f-d76b-5739-e551-07e6de5b0807\"</p>\n    \n    <p><strong>Guid.empty</strong></p>\n    \n    <p>\"00000000-0000-0000-0000-000000000000\"</p>\n  </blockquote>\n</blockquote>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16693578,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/16693578",
    "title": null,
    "body": "<p>Fastest GUID like string generator method in the format <code>XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX</code>. This does not generated standard-compliant GUID.</p>\n\n<p>Ten million executions of this implementation takes just 32.5 seconds, which is the fastest i've ever seen in a browser (the only solution without loops/iterations).</p>\n\n<p>The function is as simple as:</p>\n\n<pre><code>/**\n * Generates a GUID string.\n * @returns {String} The generated GUID.\n * @example af8a8416-6e18-a307-bd9c-f2c947bbb3aa\n * @author Slavik Meltser (slavik@meltser.info).\n * @link http://slavik.meltser.info/?p=142\n */\nfunction guid() {\n    function _p8(s) {\n        var p = (Math.random().toString(16)+\"000000000\").substr(2,8);\n        return s ? \"-\" + p.substr(0,4) + \"-\" + p.substr(4,4) : p ;\n    }\n    return _p8() + _p8(true) + _p8(true) + _p8();\n}\n</code></pre>\n\n<p>To test the performance, you can run this code:</p>\n\n<pre><code>console.time('t'); \nfor (var i = 0; i &lt; 10000000; i++) { \n    guid(); \n};\nconsole.timeEnd('t');\n</code></pre>\n\n<p>I'm sure most of you will understand what I did there, but maybe there is at least one person that will need an explanation:</p>\n\n<p><strong>The algorithm:</strong></p>\n\n<ul>\n<li>The <code>Math.random()</code> function returns a decimal number between 0 and 1 with 16 digits after the decimal fraction point (for\nexample <code>0.4363923368509859</code>).</li>\n<li>Then we take this number and convert\nit to a string with base 16 (from the example above we'll get\n<code>0.6fb7687f</code>).<br>\n<code>Math.random().toString(16)</code>.</li>\n<li>Then we cut off the <code>0.</code> prefix (<code>0.6fb7687f</code> =>\n<code>6fb7687f</code>) and get a string with eight hexadecimal\ncharacters long.<br>\n<code>(Math.random().toString(16).substr(2,8)</code>.</li>\n<li>Sometimes the <code>Math.random()</code> function will return\nshorter number (for example <code>0.4363</code>), due to zeros at the end (from the example above, actually the number is <code>0.4363000000000000</code>). That's why i'm appending to this string <code>\"000000000\"</code> (a string with nine zeros) and then cutting it off with <code>substr()</code> function to make it nine characters exactly (filling zeros to the right).</li>\n<li>The reason of adding exactly nine zeros is because of the worse case scenario, which is when the <code>Math.random()</code> function will return exactly 0 or 1 (probability of 1/10^16 for each one of them). That's why we needed to add nine zeros to it (<code>\"0\"+\"000000000\"</code> or <code>\"1\"+\"000000000\"</code>), and then cutting it off from the second index (3rd character) with a length of eight characters. For the rest of the cases, the addition of zeros will not harm the result because it is cutting it off anyway.<br>\n<code>Math.random().toString(16)+\"000000000\").substr(2,8)</code>.</li>\n</ul>\n\n<p><strong>The assembly:</strong></p>\n\n<ul>\n<li>The GUID is in the following format <code>XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX</code>.</li>\n<li>I divided the GUID into 4 pieces, each piece divided into 2 types (or formats): <code>XXXXXXXX</code> and <code>-XXXX-XXXX</code>.</li>\n<li>Now I'm building the GUID using these 2 types to assemble the GUID with call 4 pieces, as follows: <code>XXXXXXXX</code> <code>-XXXX-XXXX</code> <code>-XXXX-XXXX</code> <code>XXXXXXXX</code>.</li>\n<li>To differ between these two types, I added a flag parameter to a pair creator function <code>_p8(s)</code>, the <code>s</code> parameter tells the function whether to add dashes or not.</li>\n<li>Eventually we build the GUID with the following chaining: <code>_p8() + _p8(true) + _p8(true) + _p8()</code>, and return it.</li>\n</ul>\n\n<p><a href=\"http://slavik.meltser.info/the-efficient-way-to-create-guid-uuid-in-javascript/\" rel=\"noreferrer\">Link to this post on my blog</a></p>\n\n<p><strong>Enjoy! :-)</strong></p>\n",
    "score": 74,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17070116,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/17070116",
    "title": null,
    "body": "<p>I know, it is an old question. Just for completeness, if your environment is SharePoint, there is a utility function called <code>SP.Guid.newGuid</code> (<a href=\"http://msdn.microsoft.com/en-us/library/ee659495%28v=office.14%29.aspx\">msdn link</a>) which creates a new guid. This function is inside the sp.init.js file. If you rewrite this function (to remove some other dependencies from other private functions), it looks like this:</p>\n\n<pre><code>var newGuid = function () {\n    var result = '';\n    var hexcodes = \"0123456789abcdef\".split(\"\");\n\n    for (var index = 0; index &lt; 32; index++) {\n        var value = Math.floor(Math.random() * 16);\n\n        switch (index) {\n        case 8:\n            result += '-';\n            break;\n        case 12:\n            value = 4;\n            result += '-';\n            break;\n        case 16:\n            value = value &amp; 3 | 8;\n            result += '-';\n            break;\n        case 20:\n            result += '-';\n            break;\n        }\n        result += hexcodes[value];\n    }\n    return result;\n};\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 20318571,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/20318571",
    "title": null,
    "body": "<p>It is important that to use well tested code that is maintained by more than 1 contributors instead of whipping your own stuff for this. This is one of the places where you probably want to prefer most stable code than shortest possible clever version that works in X browser but doesn't take in to account idiosyncrasies of Y which would often lead to very hard to investigate bugs than manifests only randomly for some users. Personally I use uuid-js at <a href=\"https://github.com/aurigadl/uuid-js\">https://github.com/aurigadl/uuid-js</a> which bower enabled so I can take updates easily.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21531802,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/21531802",
    "title": null,
    "body": "<p>Weird that no one has mentioned this yet but for completeness, there's a plethora of <a href=\"https://npmjs.org/search?q=guid\">guid generators on npm</a> I'm willing to bet most of them work in browser too.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21963136,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/21963136",
    "title": null,
    "body": "<p>broofa's answer is pretty slick, indeed - impressively clever, really...  rfc4122 compliant, somewhat readable, and compact.  Awesome!</p>\n\n<p>But if you're looking at that regular expression, those many <code>replace()</code> callbacks, <code>toString()</code>'s and <code>Math.random()</code> function calls (where he's only using 4 bits of the result and wasting the rest), you may start to wonder about performance.  Indeed, joelpt even decided to toss out rfc for generic GUID speed with <code>generateQuickGUID</code>.</p>\n\n<p><strong>But, can we get speed <em>and</em> rfc compliance?  I say, YES!</strong>  Can we maintain readability?  Well...  Not really, but it's easy if you follow along.</p>\n\n<p>But first, my results, compared to broofa, <code>guid</code> (the accepted answer), and the non-rfc-compliant <code>generateQuickGuid</code>:</p>\n\n<pre><code>                  Desktop   Android\n           broofa: 1617ms   12869ms\n               e1:  636ms    5778ms\n               e2:  606ms    4754ms\n               e3:  364ms    3003ms\n               e4:  329ms    2015ms\n               e5:  147ms    1156ms\n               e6:  146ms    1035ms\n               e7:  105ms     726ms\n             guid:  962ms   10762ms\ngenerateQuickGuid:  292ms    2961ms\n  - Note that results will vary by browser/cpu.\n</code></pre>\n\n<p>So by my 6th iteration of optimizations, I beat the most popular answer by over <strong>12X</strong>, the accepted answer by over <strong>9X</strong>, and the fast-non-compliant answer by <strong>2-3X</strong>.  And I'm still rfc4122 compliant.</p>\n\n<p>Interested in how?  I've put the full source on <a href=\"http://jsfiddle.net/jcward/7hyaC/3/\">http://jsfiddle.net/jcward/7hyaC/3/</a> and on <a href=\"http://jsperf.com/uuid-generator-opt/4\">http://jsperf.com/uuid-generator-opt/4</a></p>\n\n<p>For an explanation, let's start with broofa's code:</p>\n\n<pre><code>'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n  var r = Math.random()*16|0, v = c == 'x' ? r : (r&amp;0x3|0x8);\n  return v.toString(16);\n});\n</code></pre>\n\n<p>So it replaces <code>x</code> with any random hex digit, <code>y</code> with random data (except forcing the top 2 bits to <code>10</code> per the rfc spec), and the regex doesn't match the <code>-</code> or <code>4</code> characters, so he doesn't have to deal with them.  Very, very slick.</p>\n\n<p>The first thing to know is that function calls are expensive, as are regular expressions (though he only uses 1, but it has 32 callbacks, one for each match, and in each of the 32 callbacks it calls Math.random() and v.toString(16)).</p>\n\n<p>The first step toward performance is to eliminate the RegEx and its callback functions, and use a simple loop instead.  This means we have to deal with the <code>-</code> and <code>4</code> characters whereas broofa did not.  Also note that we can use String Array indexing to keep his slick String template architecture:</p>\n\n<pre><code>function e1() {\n  var u='',i=0;\n  while(i++&lt;36) {\n    var c='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'[i-1],r=Math.random()*16|0,v=c=='x'?r:(r&amp;0x3|0x8);\n    u+=(c=='-'||c=='4')?c:v.toString(16)\n  }\n  return u;\n}\n</code></pre>\n\n<p>Basically the same inner logic, except we check for <code>-</code> or <code>4</code>, and the loop structure (instead of replace callbacks) gets us an almost 3X improvement!</p>\n\n<p>The next step is a small one on desktop, but makes a decent difference on mobile.  Lets make fewer Math.random() calls and utilize all those random bits instead of throwing 87% of them away with a random buffer that gets shifted out each iteration.  Let's also move that template definition out of the loop, just in case it helps:</p>\n\n<pre><code>function e2() {\n  var u='',m='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx',i=0,rb=Math.random()*0xffffffff|0;\n  while(i++&lt;36) {\n    var c=m[i-1],r=rb&amp;0xf,v=c=='x'?r:(r&amp;0x3|0x8);\n    u+=(c=='-'||c=='4')?c:v.toString(16);rb=i%8==0?Math.random()*0xffffffff|0:rb&gt;&gt;4\n  }\n  return u\n}\n</code></pre>\n\n<p>This saves us 10-30% depending on platform.  Not bad.  But the next big step gets rid of the toString function calls altogether with an optimization classic - the look-up table.  A simple 16-element lookup table will perform the job of toString(16) in much less time:</p>\n\n<pre><code>function e3() {\n  var h='0123456789abcdef';\n  var k='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n  /* same as e4() below */\n}\nfunction e4() {\n  var h=['0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'];\n  var k=['x','x','x','x','x','x','x','x','-','x','x','x','x','-','4','x','x','x','-','y','x','x','x','-','x','x','x','x','x','x','x','x','x','x','x','x'];\n  var u='',i=0,rb=Math.random()*0xffffffff|0;\n  while(i++&lt;36) {\n    var c=k[i-1],r=rb&amp;0xf,v=c=='x'?r:(r&amp;0x3|0x8);\n    u+=(c=='-'||c=='4')?c:h[v];rb=i%8==0?Math.random()*0xffffffff|0:rb&gt;&gt;4\n  }\n  return u\n}\n</code></pre>\n\n<p>The next optimization is another classic.  Since we're only handling 4-bits of output in each loop iteration, let's cut the number of loops in half and process 8-bits each iteration.  This is tricky since we still have to handle the rfc compliant bit positions, but it's not too hard.  We then have to make a larger lookup table (16x16, or 256) to store 0x00 - 0xff, and we build it only once, outside the e5() function.</p>\n\n<pre><code>var lut = []; for (var i=0; i&lt;256; i++) { lut[i] = (i&lt;16?'0':'')+(i).toString(16); }\nfunction e5() {\n  var k=['x','x','x','x','-','x','x','-','4','x','-','y','x','-','x','x','x','x','x','x'];\n  var u='',i=0,rb=Math.random()*0xffffffff|0;\n  while(i++&lt;20) {\n    var c=k[i-1],r=rb&amp;0xff,v=c=='x'?r:(c=='y'?(r&amp;0x3f|0x80):(r&amp;0xf|0x40));\n    u+=(c=='-')?c:lut[v];rb=i%4==0?Math.random()*0xffffffff|0:rb&gt;&gt;8\n  }\n  return u\n}\n</code></pre>\n\n<p>I tried an e6() that processes 16-bits at a time, still using the 256-element LUT, and it showed the diminishing returns of optimization.  Though it had fewer iterations, the inner logic was complicated by the increased processing, and it performed the same on desktop, and only ~10% faster on mobile.</p>\n\n<p>The final optimization technique to apply - unroll the loop.  Since we're looping a fixed number of times, we can technically write this all out by hand.  I tried this once with a single random variable r that I kept re-assigning, and performance tanked.  But with four variables assigned random data up front, then using the lookup table, and applying the proper rfc bits, this version smokes them all:</p>\n\n<pre><code>var lut = []; for (var i=0; i&lt;256; i++) { lut[i] = (i&lt;16?'0':'')+(i).toString(16); }\nfunction e7()\n{\n  var d0 = Math.random()*0xffffffff|0;\n  var d1 = Math.random()*0xffffffff|0;\n  var d2 = Math.random()*0xffffffff|0;\n  var d3 = Math.random()*0xffffffff|0;\n  return lut[d0&amp;0xff]+lut[d0&gt;&gt;8&amp;0xff]+lut[d0&gt;&gt;16&amp;0xff]+lut[d0&gt;&gt;24&amp;0xff]+'-'+\n    lut[d1&amp;0xff]+lut[d1&gt;&gt;8&amp;0xff]+'-'+lut[d1&gt;&gt;16&amp;0x0f|0x40]+lut[d1&gt;&gt;24&amp;0xff]+'-'+\n    lut[d2&amp;0x3f|0x80]+lut[d2&gt;&gt;8&amp;0xff]+'-'+lut[d2&gt;&gt;16&amp;0xff]+lut[d2&gt;&gt;24&amp;0xff]+\n    lut[d3&amp;0xff]+lut[d3&gt;&gt;8&amp;0xff]+lut[d3&gt;&gt;16&amp;0xff]+lut[d3&gt;&gt;24&amp;0xff];\n}\n</code></pre>\n\n<p>Modualized:  <a href=\"http://jcward.com/UUID.js\">http://jcward.com/UUID.js</a> - <code>UUID.generate()</code></p>\n\n<p>The funny thing is, generating 16 bytes of random data is the easy part.  The whole trick is expressing it in String format with RFC compliance, and it's most tightly accomplished with 16 bytes of random data, an unrolled loop and lookup table.</p>\n\n<p>I hope my logic is correct -- it's very easy to make a mistake in this kind of tedious bit-work.  But the outputs look good to me.  I hope you enjoyed this mad ride through code optimization!</p>\n\n<p><strong>Be advised:</strong> my primary goal was to show and teach potential optimization strategies.  Other answers cover important topics such as collisions and truly random numbers, which are important for generating good UUIDs.</p>\n",
    "score": 253,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22223296,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/22223296",
    "title": null,
    "body": "<p>This one is based on date, and add a random suffix to \"ensure\" uniqueness.\nWorks well for css identifiers.\nIt always returns something like and is easy to hack:</p>\n\n<p>uid-139410573297741</p>\n\n<pre><code>var getUniqueId = function (prefix) {\n            var d = new Date().getTime();\n            d += (parseInt(Math.random() * 100)).toString();\n            if (undefined === prefix) {\n                prefix = 'uid-';\n            }\n            d = prefix + d;\n            return d;\n        };\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22856022,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/22856022",
    "title": null,
    "body": "<p>I'm using this below function, hope it may be useful.</p>\n\n<pre><code>    function NewGuid()\n         {\n           var sGuid=\"\";\n           for (var i=0; i&lt;32; i++)\n            {\n              sGuid+=Math.floor(Math.random()*0xF).toString(0xF);\n            }\n           return sGuid;\n         }\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24106634,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/24106634",
    "title": null,
    "body": "<p>For my use-case, I required id generation that was guaranteed to be unique globally; without exception. I struggled with the problem for a while, and came up with a solution called tuid (Truly Unique ID). It generates an id with the first 32 characters being system-generated and the remaining digits representing milliseconds since epoch. In situations where I need to generate id's on client-side javascript, it works well. Have a look:</p>\n\n<p><a href=\"https://github.com/mongoh/tuid\" rel=\"nofollow\">https://github.com/mongoh/tuid</a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24891600,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/24891600",
    "title": null,
    "body": "<p>Well, this has a bunch of answers already, but unfortunately there's not a \"true\" random in the bunch. The version below is an adaptation of broofa's answer, but updated to include a \"true\" random function that uses crypto libraries where available, and the Alea() function as a fallback.</p>\n\n<pre><code>  Math.log2 = Math.log2 || function(n){ return Math.log(n) / Math.log(2); }\n  Math.trueRandom = (function() {\n  var crypt = window.crypto || window.msCrypto;\n\n  if (crypt &amp;&amp; crypt.getRandomValues) {\n      // if we have a crypto library, use it\n      var random = function(min, max) {\n          var rval = 0;\n          var range = max - min;\n          if (range &lt; 2) {\n              return min;\n          }\n\n          var bits_needed = Math.ceil(Math.log2(range));\n          if (bits_needed &gt; 53) {\n            throw new Exception(\"We cannot generate numbers larger than 53 bits.\");\n          }\n          var bytes_needed = Math.ceil(bits_needed / 8);\n          var mask = Math.pow(2, bits_needed) - 1;\n          // 7776 -&gt; (2^13 = 8192) -1 == 8191 or 0x00001111 11111111\n\n          // Create byte array and fill with N random numbers\n          var byteArray = new Uint8Array(bytes_needed);\n          crypt.getRandomValues(byteArray);\n\n          var p = (bytes_needed - 1) * 8;\n          for(var i = 0; i &lt; bytes_needed; i++ ) {\n              rval += byteArray[i] * Math.pow(2, p);\n              p -= 8;\n          }\n\n          // Use &amp; to apply the mask and reduce the number of recursive lookups\n          rval = rval &amp; mask;\n\n          if (rval &gt;= range) {\n              // Integer out of acceptable range\n              return random(min, max);\n          }\n          // Return an integer that falls within the range\n          return min + rval;\n      }\n      return function() {\n          var r = random(0, 1000000000) / 1000000000;\n          return r;\n      };\n  } else {\n      // From http://baagoe.com/en/RandomMusings/javascript/\n      // Johannes BaagÃ¸e &lt;baagoe@baagoe.com&gt;, 2010\n      function Mash() {\n          var n = 0xefc8249d;\n\n          var mash = function(data) {\n              data = data.toString();\n              for (var i = 0; i &lt; data.length; i++) {\n                  n += data.charCodeAt(i);\n                  var h = 0.02519603282416938 * n;\n                  n = h &gt;&gt;&gt; 0;\n                  h -= n;\n                  h *= n;\n                  n = h &gt;&gt;&gt; 0;\n                  h -= n;\n                  n += h * 0x100000000; // 2^32\n              }\n              return (n &gt;&gt;&gt; 0) * 2.3283064365386963e-10; // 2^-32\n          };\n\n          mash.version = 'Mash 0.9';\n          return mash;\n      }\n\n      // From http://baagoe.com/en/RandomMusings/javascript/\n      function Alea() {\n          return (function(args) {\n              // Johannes BaagÃ¸e &lt;baagoe@baagoe.com&gt;, 2010\n              var s0 = 0;\n              var s1 = 0;\n              var s2 = 0;\n              var c = 1;\n\n              if (args.length == 0) {\n                  args = [+new Date()];\n              }\n              var mash = Mash();\n              s0 = mash(' ');\n              s1 = mash(' ');\n              s2 = mash(' ');\n\n              for (var i = 0; i &lt; args.length; i++) {\n                  s0 -= mash(args[i]);\n                  if (s0 &lt; 0) {\n                      s0 += 1;\n                  }\n                  s1 -= mash(args[i]);\n                  if (s1 &lt; 0) {\n                      s1 += 1;\n                  }\n                  s2 -= mash(args[i]);\n                  if (s2 &lt; 0) {\n                      s2 += 1;\n                  }\n              }\n              mash = null;\n\n              var random = function() {\n                  var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n                  s0 = s1;\n                  s1 = s2;\n                  return s2 = t - (c = t | 0);\n              };\n              random.uint32 = function() {\n                  return random() * 0x100000000; // 2^32\n              };\n              random.fract53 = function() {\n                  return random() +\n                      (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n              };\n              random.version = 'Alea 0.9';\n              random.args = args;\n              return random;\n\n          }(Array.prototype.slice.call(arguments)));\n      };\n      return Alea();\n  }\n}());\n\nMath.guid = function() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c)    {\n      var r = Math.trueRandom() * 16 | 0,\n          v = c == 'x' ? r : (r &amp; 0x3 | 0x8);\n      return v.toString(16);\n  });\n};\n</code></pre>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28921801,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/28921801",
    "title": null,
    "body": "<p>I wanted to understand broofa's answer, so I expanded it and added comments:</p>\n\n<pre><code>var uuid = function () {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n        /[xy]/g,\n        function (match) {\n            /*\n            * Create a random nibble. The two clever bits of this code:\n            *\n            * - Bitwise operations will truncate floating point numbers\n            * - For a bitwise OR of any x, x | 0 = x\n            *\n            * So:\n            *\n            * Math.random * 16\n            *\n            * creates a random floating point number\n            * between 0 (inclusive) and 16 (exclusive) and\n            *\n            * | 0\n            *\n            * truncates the floating point number into an integer.\n            */\n            var randomNibble = Math.random() * 16 | 0;\n\n            /*\n            * Resolves the variant field. If the variant field (delineated\n            * as y in the initial string) is matched, the nibble must\n            * match the mask (where x is a do-not-care bit):\n            *\n            * 10xx\n            *\n            * This is achieved by performing the following operations in\n            * sequence (where x is an intermediate result):\n            *\n            * - x &amp; 0x3, which is equivalent to x % 3\n            * - x | 0x8, which is equivalent to x + 8\n            *\n            * This results in a nibble between 8 inclusive and 11 exclusive,\n            * (or 1000 and 1011 in binary), all of which satisfy the variant\n            * field mask above.\n            */\n            var nibble = (match == 'y') ?\n                (randomNibble &amp; 0x3 | 0x8) :\n                randomNibble;\n\n            /*\n            * Ensure the nibble integer is encoded as base 16 (hexadecimal).\n            */\n            return nibble.toString(16);\n        }\n    );\n};\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 30474286,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/30474286",
    "title": null,
    "body": "<p>A simple solution to generate unique identification is to use time token and add random number to it. I prefer to prefix it with \"uuid-\".<br /><br />\nBelow function will generate random string of type: <strong>uuid-14d93eb1b9b4533e6</strong>. One doesn't need to generate 32 chars random string. 16 char random string is more than sufficient in this case to provide the unique UUIDs in javascript.</p>\n\n<pre>\nvar createUUID = function() {\n  return\"uuid-\"+((new Date).getTime().toString(16)+Math.floor(1E7*Math.random()).toString(16));\n}\n</pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 30609091,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/30609091",
    "title": null,
    "body": "<p>Simple code that uses <code>crypto.getRandomValues(a)</code> on <a href=\"http://caniuse.com/#search=getRandomValues\" rel=\"nofollow noreferrer\">supported browsers</a> (IE11+, iOS7+, FF21+, Chrome, Android Chrome). Avoids using <code>Math.random()</code> because that can cause collisions (for example 20 collisions for 4000 generated uuids in a real situation by <a href=\"https://stackoverflow.com/questions/6906916/collisions-when-generating-uuids-in-javascript\">Muxa</a>).</p>\n\n<pre><code>function uuid() {\n    function randomDigit() {\n        if (crypto &amp;&amp; crypto.getRandomValues) {\n            var rands = new Uint8Array(1);\n            crypto.getRandomValues(rands);\n            return (rands[0] % 16).toString(16);\n        } else {\n            return ((Math.random() * 16) | 0).toString(16);\n        }\n    }\n    var crypto = window.crypto || window.msCrypto;\n    return 'xxxxxxxx-xxxx-4xxx-8xxx-xxxxxxxxxxxx'.replace(/x/g, randomDigit);\n}\n</code></pre>\n\n<p>Notes:</p>\n\n<ul>\n<li>Optimised for code readability not speed, so suitable for say a few hundred uuid's per second. Generates about 10000 uuid() per second in Chromium on my laptop using <a href=\"http://jsbin.com/fuwigo/1\" rel=\"nofollow noreferrer\">http://jsbin.com/fuwigo/1</a> to measure performance.</li>\n<li>Only uses 8 for \"y\" because that simplifies code readability (y is allowed to be 8, 9, A or B).</li>\n</ul>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 32005477,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/32005477",
    "title": null,
    "body": "<p>Just thought I'd post yet another way of doing the same thing.</p>\n\n<pre><code>function guid() {\n  var chars = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"];\n  var str = \"\";\n  for(var i=0;i&lt;36;i++) {\n    var str = str + ((i == 8 || i == 13 || i == 18 || i == 23) ? \"-\" : chars[Math.floor(Math.random()*chars.length)]);\n  };\n  return str;\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33092860,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/33092860",
    "title": null,
    "body": "<p>You can use node-uuid (<a href=\"https://github.com/kelektiv/node-uuid\" rel=\"nofollow noreferrer\">https://github.com/kelektiv/node-uuid</a>)</p>\n\n<p>Simple, fast generation of <a href=\"http://www.ietf.org/rfc/rfc4122.txt\" rel=\"nofollow noreferrer\">RFC4122</a> UUIDS.</p>\n\n<p>Features:</p>\n\n<ul>\n<li>Generate RFC4122 version 1 or version 4 UUIDs</li>\n<li>Runs in node.js and browsers.</li>\n<li>Cryptographically strong random # generation on supporting platforms.</li>\n<li>Small footprint (Want something smaller? <a href=\"https://gist.github.com/982883\" rel=\"nofollow noreferrer\">Check this out!</a>)</li>\n</ul>\n\n<hr>\n\n<p><strong>Install Using NPM:</strong></p>\n\n<pre><code>npm install uuid\n</code></pre>\n\n<hr>\n\n<p><strong>Or Using uuid via browser:</strong></p>\n\n<p>Download Raw File (uuid v1): <a href=\"https://raw.githubusercontent.com/kelektiv/node-uuid/master/v1.js\" rel=\"nofollow noreferrer\">https://raw.githubusercontent.com/kelektiv/node-uuid/master/v1.js</a>\nDownload Raw File (uuid v4): <a href=\"https://raw.githubusercontent.com/kelektiv/node-uuid/master/v4.js\" rel=\"nofollow noreferrer\">https://raw.githubusercontent.com/kelektiv/node-uuid/master/v4.js</a></p>\n\n<hr>\n\n<p>Want even smaller? Check this out: <a href=\"https://gist.github.com/jed/982883\" rel=\"nofollow noreferrer\">https://gist.github.com/jed/982883</a></p>\n\n<hr>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>// Generate a v1 UUID (time-based)\nconst uuidV1 = require('uuid/v1');\nuuidV1(); // -&gt; '6c84fb90-12c4-11e1-840d-7b25c5ee775a'\n\n// Generate a v4 UUID (random)\nconst uuidV4 = require('uuid/v4');\nuuidV4(); // -&gt; '110ec58a-a0f2-4ac4-8393-c866d813b8d1'\n\n// Generate a v5 UUID (namespace)\nconst uuidV5 = require('uuid/v5');\n\n// ... using predefined DNS namespace (for domain names)\nuuidV5('hello.example.com', v5.DNS)); // -&gt; 'fdda765f-fc57-5604-a269-52a7df8164ec'\n\n// ... using predefined URL namespace (for, well, URLs)\nuuidV5('http://example.com/hello', v5.URL); // -&gt; '3bbcee75-cecc-5b56-8031-b6641c1ed1f1'\n\n// ... using a custom namespace\nconst MY_NAMESPACE = '(previously generated unique uuid string)';\nuuidV5('hello', MY_NAMESPACE); // -&gt; '90123e1c-7512-523e-bb28-76fab9f2f73d'\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33363081,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/33363081",
    "title": null,
    "body": "<p>You could use the npm package <em>guid</em>, a guid generator and validator.</p>\n\n<p><a href=\"https://www.npmjs.com/package/guid\" rel=\"nofollow\">https://www.npmjs.com/package/guid</a></p>\n\n<p>Example:</p>\n\n<pre><code>Guid.raw();\n// -&gt; '6fdf6ffc-ed77-94fa-407e-a7b86ed9e59d'\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 35135400,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/35135400",
    "title": null,
    "body": "<p>Just in case anyone dropping by google is seeking a small utility library, ShortId (<a href=\"https://www.npmjs.com/package/shortid\" rel=\"nofollow\">https://www.npmjs.com/package/shortid</a>) meets all the requirements of this question. It allows specifying allowed characters and length, and guarantees non-sequential, non-repeating strings.</p>\n\n<p>To make this more of a real answer, the core of that library uses the following logic to produce its short ids:</p>\n\n<pre><code>function encode(lookup, number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + lookup( ( (number &gt;&gt; (4 * loopCounter)) &amp; 0x0f ) | randomByte() );\n        done = number &lt; (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\n/** Generates the short id */\nfunction generate() {\n\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + encode(alphabet.lookup, version);\n    str = str + encode(alphabet.lookup, clusterWorkerId);\n    if (counter &gt; 0) {\n        str = str + encode(alphabet.lookup, counter);\n    }\n    str = str + encode(alphabet.lookup, seconds);\n\n    return str;\n}\n</code></pre>\n\n<p>I have not edited this to reflect <em>only</em> the most basic parts of this approach, so the above code includes some additional logic from the library. If you are curious about everything it is doing, take a look at the source: <a href=\"https://github.com/dylang/shortid/tree/master/lib\" rel=\"nofollow\">https://github.com/dylang/shortid/tree/master/lib</a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 36147692,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/36147692",
    "title": null,
    "body": "<p>Hi here is an working example it generates 32-digit Unique UUID.   </p>\n\n<pre><code>function generateUUID() {\n      var d = new Date();\n      var k = d.getTime();\n     var str = k.toString(16).slice(1)\n    var UUID= 'xxxx-xxxx-4xxx-yxxx-xzx'.replace(/[xy]/g, function (c)\n      {\n        var r = Math.random() * 16 | 0;\n        v = c == 'x' ? r : (r &amp; 3 | 8);\n        return v.toString(16);\n      });\n      var newString = UUID.replace(/[z]/, str)\n      return newString;\n    }\n    var x = generateUUID()\n    console.log(x,x.length)\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 38903464,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/38903464",
    "title": null,
    "body": "<p>I found this script useful for creating GUIDs in JavaScript</p>\n\n<p><a href=\"https://github.com/addui/GUIDJS\" rel=\"nofollow\">https://github.com/addui/GUIDJS</a></p>\n\n<pre><code>var myGuid = GUID();\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 39254139,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/39254139",
    "title": null,
    "body": "<p>This may be of use to someone...</p>\n\n<pre><code>var d = new Date().valueOf();\nvar n = d.toString();\nvar result = '';\nvar length = 32;\nvar p = 0;\nvar chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\nfor (var i = length; i &gt; 0; --i){\n    result += ((i &amp; 1) &amp;&amp; n.charAt(p) ? '&lt;b&gt;' + n.charAt(p) + '&lt;/b&gt;' : chars[Math.floor(Math.random() * chars.length)]);\n    if(i &amp; 1) p++;\n};\n</code></pre>\n\n<p><a href=\"https://jsfiddle.net/j0evrdf1/1/\" rel=\"nofollow\">https://jsfiddle.net/j0evrdf1/1/</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 39365250,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/39365250",
    "title": null,
    "body": "<pre><code>function randomHex(length) {\n    var random_string = '';\n    if(!length){\n        length = 1;\n    }\n    for(var i=0; i&lt;length; i+=1){\n        random_string += Math.floor(Math.random() * 15).toString(16);\n    }\n    return random_string;\n}\n\nfunction guid() {\n    return randomHex(8);\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 40066925,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/40066925",
    "title": null,
    "body": "<p>Here you can find a very small function that generates uuids <a href=\"https://gist.github.com/jed/982883\" rel=\"nofollow\">https://gist.github.com/jed/982883</a></p>\n\n<p>One of the final versions is:</p>\n\n<pre><code>function b(\n  a                  // placeholder\n){\n  var cryptoObj = window.crypto || window.msCrypto; // for IE 11\n  return a           // if the placeholder was passed, return\n    ? (              // a random number from 0 to 15\n      a ^            // unless b is 8,\n      cryptoObj.getRandomValues(new Uint8Array(1))[0]  // in which case\n      % 16           // a random number from\n      &gt;&gt; a/4         // 8 to 11\n      ).toString(16) // in hexadecimal\n    : (              // or otherwise a concatenated string:\n      [1e7] +        // 10000000 +\n      -1e3 +         // -1000 +\n      -4e3 +         // -4000 +\n      -8e3 +         // -80000000 +\n      -1e11          // -100000000000,\n      ).replace(     // replacing\n        /[018]/g,    // zeroes, ones, and eights with\n        b            // random hex digits\n      )\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 40265174,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/40265174",
    "title": null,
    "body": "<p>it has dependency on mongodb of course, but I personally have it somewhere around anyways, so generating new id is simple as this:</p>\n\n<pre><code>const ObjectID = require('mongodb').ObjectID;\nlet id = new ObjectID().toString();\n</code></pre>\n",
    "score": -8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 42315603,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/42315603",
    "title": null,
    "body": "<p>The one I've been using lately:</p>\n\n<pre><code>const uuid = function b(a) {\n  return a ? (a ^ Math.random() * 16 &gt;&gt; a / 4).toString(16) :\n      ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, b);\n};\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 42520442,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/42520442",
    "title": null,
    "body": "<p>You can use some of the npm packages (directly if node.js, browserify if on UI side)</p>\n\n<p><a href=\"https://www.npmjs.com/package/uuid\" rel=\"nofollow noreferrer\" title=\"uuid\">uuid</a></p>\n\n<p><a href=\"https://www.npmjs.com/package/node-uuid\" rel=\"nofollow noreferrer\" title=\"node-uuid\">node-uuid</a></p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43901924,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/43901924",
    "title": null,
    "body": "<p>If you just need a random 128 bit string in no particular format you can use:</p>\n\n<pre><code>function uuid() {\n    return crypto.getRandomValues(new Uint32Array(4)).join('-');\n}\n</code></pre>\n\n<p>Which will return something like <code>2350143528-4164020887-938913176-2513998651</code>.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44078785,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/44078785",
    "title": null,
    "body": "<pre><code>var uniqueId = Math.random().toString(36).substring(2) \n               + (new Date()).getTime().toString(36);\n</code></pre>\n\n<p>If ID's are generated more than 1 milliseconds apart, they are 100% unique.</p>\n\n<p>If two ID's are generated at shorter intervals, and assuming that the random method is truly random, this would generate ID's that are 99.99999999999999% likely to be globally unique.</p>\n\n<p>You can increase this number by adding more digits, but to generate 100% unique ID's you will need to use a global counter.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>document.getElementById(\"unique\").innerHTML =\r\n  Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id=\"unique\"&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44996682,
    "parentID": 105034,
    "url": "https://stackoverflow.com/q/44996682",
    "title": null,
    "body": "<p>ES6 sample</p>\n\n<pre><code>const guid=()=&gt; {\n  const s4=()=&gt; Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);     \n  return `${s4() + s4()}-${s4()}-${s4()}-${s4()}-${s4() + s4() + s4()}`;\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 111111,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/111111",
    "title": null,
    "body": "<h1>JavaScript Closures for Beginners</h1>\n\n<blockquote>Submitted by Morris on Tue, 2006-02-21 10:19.  Community-edited since.</blockquote>\n\n<h2>Closures Are Not Magic</h2>\n\n<p>This page explains closures so that a programmer can understand them &mdash; using working JavaScript code. It is not for gurus or functional programmers.</p>\n\n<p>Closures are <em>not hard</em> to understand once the core concept is grokked. However, they are impossible to understand by reading any academic papers or academically oriented information about them!</p>\n\n<p>This article is intended for programmers with some programming experience in a mainstream language, and who can read the following JavaScript function:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function sayHello(name) {\r\n  var text = 'Hello ' + name;\r\n  var say = function() { console.log(text); }\r\n  say();\r\n}\r\nsayHello('Joe');</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h2>An Example of a Closure</h2>\n\n<p>Two one sentence summaries:</p>\n\n<ul>\n<li><p>A closure is one way of supporting <a href=\"https://en.wikipedia.org/wiki/First-class_function\" rel=\"noreferrer\">first-class functions</a>; it is an expression that can reference variables within its scope (when it was first declared), be assigned to a variable, be passed as an argument to a function, or be returned as a function result. </p></li>\n<li><p>Or, a closure is a stack frame which is allocated when a function starts its execution, and <em>not freed</em> after the function returns (as if a 'stack frame' were allocated on the heap rather than the stack!).</p></li>\n</ul>\n\n<p>The following code returns a reference to a function:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function sayHello2(name) {\r\n  var text = 'Hello ' + name; // Local variable\r\n  var say = function() { console.log(text); }\r\n  return say;\r\n}\r\nvar say2 = sayHello2('Bob');\r\nsay2(); // logs \"Hello Bob\"</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Most JavaScript programmers will understand how a reference to a function is returned to a variable (<code>say2</code>) in the above code. If you don't, then you need to look at that before you can learn closures. A programmer using C would think of the function as returning a pointer to a function, and that the variables <code>say</code> and <code>say2</code> were each a pointer to a function.</p>\n\n<p>There is a critical difference between a C pointer to a function and a JavaScript reference to a function. In JavaScript, you can think of a function reference variable as having both a pointer to a function <em>as well</em> as a hidden pointer to a closure.</p>\n\n<p>The above code has a closure because the anonymous function <code>function() { console.log(text); }</code> is declared <em>inside</em> another function, <code>sayHello2()</code> in this example. In JavaScript, if you use the <code>function</code> keyword inside another function, you are creating a closure.</p>\n\n<p>In C and most other common languages, <em>after</em> a function returns, all the local variables are no longer accessible because the stack-frame is destroyed.</p>\n\n<p>In JavaScript, if you declare a function within another function, then the local variables can remain accessible after returning from the function you called. This is demonstrated above, because we call the function <code>say2()</code> after we have returned from <code>sayHello2()</code>. Notice that the code that we call references the variable <code>text</code>, which was a <em>local variable</em> of the function <code>sayHello2()</code>.</p>\n\n<pre><code>function() { console.log(text); } // Output of say2.toString();\n</code></pre>\n\n<p>Looking at the output of <code>say2.toString()</code>, we can see that the code refers to the variable <code>text</code>. The anonymous function can reference <code>text</code> which holds the value <code>'Hello Bob'</code> because the local variables of <code>sayHello2()</code> are kept in a closure.</p>\n\n<p>The magic is that in JavaScript a function reference also has a secret reference to the closure it was created in &mdash; similar to how delegates are a method pointer plus a secret reference to an object.</p>\n\n<h2>More examples</h2>\n\n<p>For some reason, closures seem really hard to understand when you read about them, but when you see some examples it becomes clear how they work (it took me a while).\nI recommend working through the examples carefully until you understand how they work. If you start using closures without fully understanding how they work, you would soon create some very weird bugs!</p>\n\n<h3>Example 3</h3>\n\n<p>This example shows that the local variables are not copied &mdash; they are kept by reference. It is kind of like keeping a stack-frame in memory when the outer function exits!</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function say667() {\r\n  // Local variable that ends up within closure\r\n  var num = 42;\r\n  var say = function() { console.log(num); }\r\n  num++;\r\n  return say;\r\n}\r\nvar sayNumber = say667();\r\nsayNumber(); // logs 43</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h3>Example 4</h3>\n\n<p>All three global functions have a common reference to the <em>same</em> closure because they are all declared within a single call to <code>setupSomeGlobals()</code>.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var gLogNumber, gIncreaseNumber, gSetNumber;\r\nfunction setupSomeGlobals() {\r\n  // Local variable that ends up within closure\r\n  var num = 42;\r\n  // Store some references to functions as global variables\r\n  gLogNumber = function() { console.log(num); }\r\n  gIncreaseNumber = function() { num++; }\r\n  gSetNumber = function(x) { num = x; }\r\n}\r\n\r\nsetupSomeGlobals();\r\ngIncreaseNumber();\r\ngLogNumber(); // 43\r\ngSetNumber(5);\r\ngLogNumber(); // 5\r\n\r\nvar oldLog = gLogNumber;\r\n\r\nsetupSomeGlobals();\r\ngLogNumber(); // 42\r\n\r\noldLog() // 5</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The three functions have shared access to the same closure &mdash; the local variables of <code>setupSomeGlobals()</code> when the three functions were defined.</p>\n\n<p>Note that in the above example, if you call <code>setupSomeGlobals()</code> again, then a new closure (stack-frame!) is created. The old <code>gLogNumber</code>, <code>gIncreaseNumber</code>, <code>gSetNumber</code> variables are overwritten with <em>new</em> functions that have the new closure. (In JavaScript, whenever you declare a function inside another function, the inside function(s) is/are recreated again <em>each</em> time the outside function is called.)</p>\n\n<h3>Example 5</h3>\n\n<p>This one is a real gotcha for many people, so you need to understand it. Be very careful if you are defining a function within a loop: the local variables from the closure do not act as you might first think.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function buildList(list) {\r\n    var result = [];\r\n    for (var i = 0; i &lt; list.length; i++) {\r\n        var item = 'item' + i;\r\n        result.push( function() {console.log(item + ' ' + list[i])} );\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction testList() {\r\n    var fnlist = buildList([1,2,3]);\r\n    // Using j only to help prevent confusion -- could use i.\r\n    for (var j = 0; j &lt; fnlist.length; j++) {\r\n        fnlist[j]();\r\n    }\r\n}\r\n\r\n testList() //logs \"item2 undefined\" 3 times</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The line <code>result.push( function() {console.log(item + ' ' + list[i])}</code> adds a reference to an anonymous function three times to the result array. If you are not so familiar with anonymous functions think of it like:</p>\n\n<pre><code>pointer = function() {console.log(item + ' ' + list[i])};\nresult.push(pointer);\n</code></pre>\n\n<p>Note that when you run the example, <code>\"item2 undefined\"</code> is alerted three times! This is because just like previous examples, there is only one closure for the local variables for <code>buildList</code>. When the anonymous functions are called on the line <code>fnlist[j]()</code>; they all use the same single closure, and they use the current value for <code>i</code> and <code>item</code> within that one closure (where <code>i</code> has a value of <code>3</code> because the loop had completed, and <code>item</code> has a value of <code>'item2'</code>). Note we are indexing from 0 hence <code>item</code> has a value of <code>item2</code>. And the i++ will increment <code>i</code> to the value <code>3</code>.</p>\n\n<h3>Example 6</h3>\n\n<p>This example shows that the closure contains any local variables that were declared inside the outer function before it exited. Note that the variable <code>alice</code> is actually declared after the anonymous function. The anonymous function is declared first; and when that function is called it can access the <code>alice</code> variable because <code>alice</code> is in the same scope (JavaScript does <a href=\"https://stackoverflow.com/a/3725763/1269037\">variable hoisting</a>).\nAlso <code>sayAlice()()</code> just directly calls the function reference returned from <code>sayAlice()</code> &mdash; it is exactly the same as what was done previously, but without the temporary variable.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function sayAlice() {\r\n    var say = function() { console.log(alice); }\r\n    // Local variable that ends up within closure\r\n    var alice = 'Hello Alice';\r\n    return say;\r\n}\r\nsayAlice()();// logs \"Hello Alice\"</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Tricky: note also that the <code>say</code> variable is also inside the closure, and could be accessed by any other function that might be declared within <code>sayAlice()</code>, or it could be accessed recursively within the inside function.</p>\n\n<h3>Example 7</h3>\n\n<p>This final example shows that each call creates a separate closure for the local variables. There is <em>not</em> a single closure per function declaration. There is a closure for <em>each call</em> to a function.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function newClosure(someNum, someRef) {\r\n    // Local variables that end up within closure\r\n    var num = someNum;\r\n    var anArray = [1,2,3];\r\n    var ref = someRef;\r\n    return function(x) {\r\n        num += x;\r\n        anArray.push(num);\r\n        console.log('num: ' + num +\r\n            '; anArray: ' + anArray.toString() +\r\n            '; ref.someVar: ' + ref.someVar + ';');\r\n      }\r\n}\r\nobj = {someVar: 4};\r\nfn1 = newClosure(4, obj);\r\nfn2 = newClosure(5, obj);\r\nfn1(1); // num: 5; anArray: 1,2,3,5; ref.someVar: 4;\r\nfn2(1); // num: 6; anArray: 1,2,3,6; ref.someVar: 4;\r\nobj.someVar++;\r\nfn1(2); // num: 7; anArray: 1,2,3,5,7; ref.someVar: 5;\r\nfn2(2); // num: 8; anArray: 1,2,3,6,8; ref.someVar: 5;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h2>Summary</h2>\n\n<p>If everything seems completely unclear then the best thing to do is to play with the examples. Reading an explanation is much harder than understanding examples.\nMy explanations of closures and stack-frames, etc. are not technically correct &mdash; they are gross simplifications intended to help understanding. Once the basic idea is grokked, you can pick up the details later.</p>\n\n<h2>Final points:</h2>\n\n<ul>\n<li>Whenever you use <code>function</code> inside another function, a closure is used.</li>\n<li>Whenever you use <code>eval()</code> inside a function, a closure is used. The text you <code>eval</code> can reference local variables of the function, and within <code>eval</code> you can even create new local variables by using <code>eval('var foo = …')</code></li>\n<li>When you use <code>new Function(…)</code> (the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" rel=\"noreferrer\">Function constructor</a>) inside a function, it does not create a closure. (The new function cannot reference the local variables of the outer function.)</li>\n<li>A closure in JavaScript is like keeping a copy of all the local variables, just as they were when a function exited.</li>\n<li>It is probably best to think that a closure is always created just an entry to a function, and the local variables are added to that closure.</li>\n<li>A new set of local variables is kept every time a function with a closure is called (given that the function contains a function declaration inside it, and a reference to that inside function is either returned or an external reference is kept for it in some way).</li>\n<li>Two functions might look like they have the same source text, but have completely different behaviour because of their 'hidden' closure. I don't think JavaScript code can actually find out if a function reference has a closure or not.</li>\n<li>If you are trying to do any dynamic source code modifications (for example: <code>myFunction = Function(myFunction.toString().replace(/Hello/,'Hola'));</code>), it won't work if <code>myFunction</code> is a closure (of course, you would never even think of doing source code string substitution at runtime, but...).</li>\n<li>It is possible to get function declarations within function declarations within functions &mdash; and you can get closures at more than one level.</li>\n<li>I think normally a closure is the term for both the function along with the variables that are captured. Note that I do not use that definition in this article!</li>\n<li>I suspect that closures in JavaScript differ from those normally found in functional languages.</li>\n</ul>\n\n<h2>Links</h2>\n\n<ul>\n<li>Douglas Crockford's simulated <a href=\"http://www.crockford.com/javascript/private.html\" rel=\"noreferrer\">private attributes and private methods</a> for an object, using closures.</li>\n<li>A great explanation of how closures can <a href=\"https://www.codeproject.com/Articles/12231/Memory-Leakage-in-Internet-Explorer-revisited\" rel=\"noreferrer\">cause memory leaks in IE</a> if you are not careful.</li>\n</ul>\n\n<h2>Thanks</h2>\n\n<p>If you have <em>just</em> learned closures (here or elsewhere!), then I am interested in any feedback from you about any changes you might suggest that could make this article clearer. Send an email to morrisjohns.com (morris_closure @). Please note that I am not a guru on JavaScript &mdash; nor on closures.</p>\n\n<hr>\n\n<p>Original post by Morris can be found in the <a href=\"http://web.archive.org/web/20080209105120/http:/blog.morrisjohns.com/javascript_closures_for_dummies\" rel=\"noreferrer\">Internet Archive</a>.</p>\n",
    "score": 5002,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 111114,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/111114",
    "title": null,
    "body": "<p>A <em>closure</em> is much like an object. It gets instantiated whenever you call a function. </p>\n\n<p>The scope of a <em>closure</em> in JavaScript is lexical, which means that everything that is contained within the function the <em>closure</em> belongs to, has access to any variable that is in it.</p>\n\n<p>A variable is contained in the <em>closure</em> if you</p>\n\n<ol>\n<li>assign it with <code>var foo=1;</code> or</li>\n<li>just write <code>var foo;</code></li>\n</ol>\n\n<p>If an inner function (a function contained inside another function) accesses such a variable without defining it in its own scope with var, it modifies the content of the variable in the outer <em>closure</em>.</p>\n\n<p>A <em>closure</em> outlives the runtime of the function that spawned it. If other functions make it out of the <em>closure/scope</em> in which they are defined (for instance as return values), those will continue to reference that <em>closure</em>.</p>\n\n<h2>Example</h2>\n\n<pre><code> function example(closure) {\n   // define somevariable to live in the closure of example\n   var somevariable = 'unchanged';\n\n   return {\n     change_to: function(value) {\n       somevariable = value;\n     },\n     log: function(value) {\n       console.log('somevariable of closure %s is: %s',\n         closure, somevariable);\n     }\n   }\n }\n\n closure_one = example('one');\n closure_two = example('two');\n\n closure_one.log();\n closure_two.log();\n closure_one.change_to('some new value');\n closure_one.log();\n closure_two.log();\n</code></pre>\n\n<h2>Output</h2>\n\n<pre><code>somevariable of closure one is: unchanged\nsomevariable of closure two is: unchanged\nsomevariable of closure one is: some new value\nsomevariable of closure two is: unchanged\n</code></pre>\n",
    "score": 274,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 111119,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/111119",
    "title": null,
    "body": "<p>Closures are hard to explain because they are used to make some behaviour work that everybody intuitively expects to work anyway. I find the best way to explain them (and the way that <em>I</em> learned what they do) is to imagine the situation without them:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>    var bind = function(x) {\r\n        return function(y) { return x + y; };\r\n    }\r\n    \r\n    var plus5 = bind(5);\r\n    console.log(plus5(3));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>What would happen here if JavaScript <em>didn't</em> know closures? Just replace the call in the last line by its method body (which is basically what function calls do) and you get:</p>\n\n<pre><code>console.log(x + 3);\n</code></pre>\n\n<p>Now, where's the definition of <code>x</code>? We didn't define it in the current scope. The only solution is to let <code>plus5</code> <em>carry</em> its scope (or rather, its parent's scope) around. This way, <code>x</code> is well-defined and it is bound to the value 5.</p>\n",
    "score": 377,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 111200,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/111200",
    "title": null,
    "body": "<p>Whenever you see the function keyword within another function, the inner function has access to variables in the outer function.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo(x) {\r\n  var tmp = 3;\r\n\r\n  function bar(y) {\r\n    console.log(x + y + (++tmp)); // will log 16\r\n  }\r\n\r\n  bar(10);\r\n}\r\n\r\nfoo(2);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>This will always log 16, because <code>bar</code> can access the <code>x</code> which was defined as an argument to <code>foo</code>, and it can also access <code>tmp</code> from <code>foo</code>.</p>\n\n<p>That <strong><em>is</em></strong> a closure. A function doesn't have to <em>return</em> in order to be called a closure. <strong><em>Simply accessing variables outside of your immediate lexical scope creates a closure</em></strong>.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo(x) {\r\n  var tmp = 3;\r\n\r\n  return function (y) {\r\n    console.log(x + y + (++tmp)); // will also log 16\r\n  }\r\n}\r\n\r\nvar bar = foo(2); // bar is now a closure.\r\nbar(10);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The above function will also log 16, because <code>bar</code> can still refer to <code>x</code> and <code>tmp</code>, even though it is no longer directly inside the scope.</p>\n\n<p>However, since <code>tmp</code> is still hanging around inside <code>bar</code>'s closure, it is also being incremented. It will be incremented each time you call <code>bar</code>.</p>\n\n<p>The simplest example of a closure is this:</p>\n\n<pre><code>var a = 10;\nfunction test() {\n  console.log(a); // will output 10\n  console.log(b); // will output 6\n}\nvar b = 6;\ntest();\n</code></pre>\n\n<p>When a JavaScript function is invoked, a new execution context is created. Together with the function arguments and the parent object, this execution context also receives all the variables declared outside of it (in the above example, both 'a' and 'b').</p>\n\n<p>It is possible to create more than one closure function, either by returning a list of them or by setting them to global variables. All of these will refer to the <strong>same</strong> <code>x</code> and the same <code>tmp</code>, they don't make their own copies.</p>\n\n<p>Here the number <code>x</code> is a literal number. As with other literals in JavaScript, when <code>foo</code> is called, the number <code>x</code> is <strong>copied</strong> into <code>foo</code> as its argument <code>x</code>.</p>\n\n<p>On the other hand, JavaScript always uses references when dealing with objects. If say, you called <code>foo</code> with an object, the closure it returns will <strong>reference</strong> that original object!</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo(x) {\r\n  var tmp = 3;\r\n\r\n  return function (y) {\r\n    console.log(x + y + tmp);\r\n    x.memb = x.memb ? x.memb + 1 : 1;\r\n    console.log(x.memb);\r\n  }\r\n}\r\n\r\nvar age = new Number(2);\r\nvar bar = foo(age); // bar is now a closure referencing age.\r\nbar(10);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>As expected, each call to <code>bar(10)</code> will increment <code>x.memb</code>. What might not be expected, is that <code>x</code> is simply referring to the same object as the <code>age</code> variable! After a couple of calls to <code>bar</code>, <code>age.memb</code> will be 2! This referencing is the basis for memory leaks with HTML objects.</p>\n",
    "score": 3642,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 112252,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/112252",
    "title": null,
    "body": "<p>A closure is where an inner function has access to variables in its outer function. That's probably the simplest one-line explanation you can get for closures.</p>\n",
    "score": 64,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2600408,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/2600408",
    "title": null,
    "body": "<p>This is an attempt to clear up several (possible) misunderstandings about closures that appear in some of the other answers.</p>\n\n<ul>\n<li><strong>A closure is not only created when you return an inner function.</strong> In fact, the enclosing function <em>does not need to return at all</em> in order for its closure to be created. You might instead assign your inner function to a variable in an outer scope, or pass it as an argument to another function where it could be called immediately or any time later. Therefore, the closure of the enclosing function is probably created <em>as soon as the enclosing function is called</em> since any inner function has access to that closure whenever the inner function is called, before or after the enclosing function returns. </li>\n<li><strong>A closure does not reference a copy of the <em>old values</em> of variables in its scope.</strong> The variables themselves are part of the closure, and so the value seen when accessing one of those variables is the latest value at the time it is accessed. This is why inner functions created inside of loops can be tricky, since each one has access to the same outer variables rather than grabbing a copy of the variables at the time the function is created or called.</li>\n<li><strong>The \"variables\" in a closure include any named functions</strong> declared within the function. They also include arguments of the function. A closure also has access to its containing closure's variables, all the way up to the global scope.</li>\n<li><strong>Closures use memory, but they don't cause memory leaks</strong> since JavaScript by itself cleans up its own circular structures that are not referenced. Internet&nbsp;Explorer memory leaks involving closures are created when it fails to disconnect DOM attribute values that reference closures, thus maintaining references to possibly circular structures.</li>\n</ul>\n",
    "score": 295,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2673546,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/2673546",
    "title": null,
    "body": "<p>Example for the first point by dlaliberte:</p>\n\n<blockquote>\n  <p>A closure is not only created when you return an inner function. In fact, the enclosing function does not need to return at all. You might instead assign your inner function to a variable in an outer scope, or pass it as an argument to another function where it could be used immediately. Therefore, the closure of the enclosing function probably already exists at the time that enclosing function was called since any inner function has access to it as soon as it is called.</p>\n</blockquote>\n\n<pre><code>var i;\nfunction foo(x) {\n    var tmp = 3;\n    i = function (y) {\n        console.log(x + y + (++tmp));\n    }\n}\nfoo(2);\ni(3);\n</code></pre>\n",
    "score": 73,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2673583,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/2673583",
    "title": null,
    "body": "<h2><a href=\"https://stackoverflow.com/questions/1700514/how-do-you-explain-closure-to-a-5-year-old/1700627#1700627\">Can you explain closures to a 5-year-old?*</a></h2>\n\n<p>I still think <a href=\"http://code.google.com/apis/ajax/playground/?exp=maps#closure_simple\" rel=\"noreferrer\">Google's explanation</a> works very well and is concise:</p>\n\n<pre><code>/*\n*    When a function is defined in another function and it\n*    has access to the outer function's context even after\n*    the outer function returns.\n*\n* An important concept to learn in JavaScript.\n*/\n\nfunction outerFunction(someNum) {\n    var someString = 'Hey!';\n    var content = document.getElementById('content');\n    function innerFunction() {\n        content.innerHTML = someNum + ': ' + someString;\n        content = null; // Internet Explorer memory leak for DOM reference\n    }\n    innerFunction();\n}\n\nouterFunction(1);​\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/N0mn0.png\" alt=\"Proof that this example creates a closure even if the inner function doesn&#39;t return\"></p>\n\n<p><sub>*A C# question</sub></p>\n",
    "score": 157,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4926486,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/4926486",
    "title": null,
    "body": "<p>I wrote a blog post a while back explaining closures. Here's what I said about closures in terms of <strong>why</strong> you'd want one.</p>\n\n<blockquote>\n  <p>Closures are a way to let a function\n  have <strong>persistent, private variables</strong> -\n  that is, variables that only one\n  function knows about, where it can\n  keep track of info from previous times\n  that it was run.</p>\n</blockquote>\n\n<p>In that sense, they let a function act a bit like an object with private attributes.</p>\n\n<p>Full post:</p>\n\n<p><a href=\"http://sleeplessgeek.blogspot.com/2009/12/so-what-are-these-closure-thingys.html\" rel=\"noreferrer\">So what are these closure thingys?</a></p>\n",
    "score": 179,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 5099447,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/5099447",
    "title": null,
    "body": "<p>JavaScript functions can access their:</p>\n\n<ol>\n<li>Arguments</li>\n<li>Locals (that is, their local variables and local functions)</li>\n<li>Environment, which includes:\n\n<ul>\n<li>globals, including the DOM</li>\n<li>anything in outer functions</li>\n</ul></li>\n</ol>\n\n<p>If a function accesses its environment, then the function is a closure.</p>\n\n<p>Note that outer functions are not required, though they do offer benefits I don't discuss here. By accessing data in its environment, a closure keeps that data alive. In the subcase of outer/inner functions, an outer function can create local data and eventually exit, and yet, if any inner function(s) survive after the outer function exits, then the inner function(s) keep the outer function's local data alive.</p>\n\n<p>Example of a closure that uses the global environment:</p>\n\n<p>Imagine that the Stack Overflow Vote-Up and Vote-Down button events are implemented as closures, voteUp_click and voteDown_click, that have access to external variables isVotedUp and isVotedDown, which are defined globally. (For simplicity's sake, I am referring to StackOverflow's Question Vote buttons, not the array of Answer Vote buttons.)</p>\n\n<p>When the user clicks the VoteUp button, the voteUp_click function checks whether isVotedDown == true to determine whether to vote up or merely cancel a down vote. Function voteUp_click is a closure because it is accessing its environment.</p>\n\n<pre><code>var isVotedUp = false;\nvar isVotedDown = false;\n\nfunction voteUp_click() {\n  if (isVotedUp)\n    return;\n  else if (isVotedDown)\n    SetDownVote(false);\n  else\n    SetUpVote(true);\n}\n\nfunction voteDown_click() {\n  if (isVotedDown)\n    return;\n  else if (isVotedUp)\n    SetUpVote(false);\n  else\n    SetDownVote(true);\n}\n\nfunction SetUpVote(status) {\n  isVotedUp = status;\n  // Do some CSS stuff to Vote-Up button\n}\n\nfunction SetDownVote(status) {\n  isVotedDown = status;\n  // Do some CSS stuff to Vote-Down button\n}\n</code></pre>\n\n<p>All four of these functions are closures as they all access their environment.</p>\n",
    "score": 57,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6472397,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/6472397",
    "title": null,
    "body": "<p>I'm a big fan of analogy and metaphor when explaining difficult concepts, so let me try my hand with a story.</p>\n\n<p><strong>Once upon a time:</strong></p>\n\n<p>There was a princess...</p>\n\n<pre><code>function princess() {\n</code></pre>\n\n<p>She lived in a wonderful world full of adventures. She met her Prince Charming, rode around her world on a unicorn, battled dragons, encountered talking animals, and many other fantastical things.</p>\n\n<pre><code>    var adventures = [];\n\n    function princeCharming() { /* ... */ }\n\n    var unicorn = { /* ... */ },\n        dragons = [ /* ... */ ],\n        squirrel = \"Hello!\";\n</code></pre>\n\n<p>But she would always have to return back to her dull world of chores and grown-ups.</p>\n\n<pre><code>    return {\n</code></pre>\n\n<p>And she would often tell them of her latest amazing adventure as a princess.</p>\n\n<pre><code>        story: function() {\n            return adventures[adventures.length - 1];\n        }\n    };\n}\n</code></pre>\n\n<p>But all they would see is a little girl...</p>\n\n<pre><code>var littleGirl = princess();\n</code></pre>\n\n<p>...telling stories about magic and fantasy.</p>\n\n<pre><code>littleGirl.story();\n</code></pre>\n\n<p>And even though the grown-ups knew of real princesses, they would never believe in the unicorns or dragons because they could never see them. The grown-ups said that they only existed inside the little girl's imagination.</p>\n\n<p>But we know the real truth; that the little girl with the princess inside...</p>\n\n<p>is really a princess with a little girl inside.</p>\n",
    "score": 2028,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6756814,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/6756814",
    "title": null,
    "body": "<p>You're having a sleep over and you invite Dan.\nYou tell Dan to bring one XBox controller.</p>\n\n<p>Dan invites Paul.\nDan asks Paul to bring one controller. How many controllers were brought to the party?</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function sleepOver(howManyControllersToBring) {\n\n    var numberOfDansControllers = howManyControllersToBring;\n\n    return function danInvitedPaul(numberOfPaulsControllers) {\n        var totalControllers = numberOfDansControllers + numberOfPaulsControllers;\n        return totalControllers;\n    }\n}\n\nvar howManyControllersToBring = 1;\n\nvar inviteDan = sleepOver(howManyControllersToBring);\n\n// The only reason Paul was invited is because Dan was invited. \n// So we set Paul's invitation = Dan's invitation.\n\nvar danInvitedPaul = inviteDan(howManyControllersToBring);\n\nalert(\"There were \" + danInvitedPaul + \" controllers brought to the party.\");\n</code></pre>\n",
    "score": 66,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6825315,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/6825315",
    "title": null,
    "body": "<p>I put together an interactive JavaScript tutorial to explain how closures work.\n<a href=\"http://nathansjslessons.appspot.com\" rel=\"noreferrer\">What's a Closure?</a></p>\n\n<p>Here's one of the examples:</p>\n\n<pre><code>var create = function (x) {\n    var f = function () {\n        return x; // We can refer to x here!\n    };\n    return f;\n};\n// 'create' takes one argument, creates a function\n\nvar g = create(42);\n// g is a function that takes no arguments now\n\nvar y = g();\n// y is 42 here\n</code></pre>\n",
    "score": 106,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6883759,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/6883759",
    "title": null,
    "body": "<p><a href=\"http://en.wikipedia.org/wiki/Closure_(computer_science)\" rel=\"noreferrer\">Wikipedia on closures</a>:</p>\n\n<blockquote>\n  <p>In computer science, a closure is a function together with a referencing environment for the nonlocal names (free variables) of that function.</p>\n</blockquote>\n\n<p>Technically, in <a href=\"http://en.wikipedia.org/wiki/JavaScript\" rel=\"noreferrer\">JavaScript</a>, <strong>every function is a closure</strong>. It always has an access to variables defined in the surrounding scope.</p>\n\n<p>Since <strong>scope-defining construction in JavaScript is a function</strong>, not a code block like in many other languages, <strong>what we usually mean by <em>closure</em> in JavaScript</strong> is a <strong>function working with nonlocal variables defined in already executed surrounding function</strong>.</p>\n\n<p>Closures are often used for creating functions with some hidden private data (but it's not always the case).</p>\n\n<pre><code>var db = (function() {\n    // Create a hidden object, which will hold the data\n    // it's inaccessible from the outside.\n    var data = {};\n\n    // Make a function, which will provide some access to the data.\n    return function(key, val) {\n        if (val === undefined) { return data[key] } // Get\n        else { return data[key] = val } // Set\n    }\n    // We are calling the anonymous surrounding function,\n    // returning the above inner function, which is a closure.\n})();\n\ndb('x')    // -&gt; undefined\ndb('x', 1) // Set x to 1\ndb('x')    // -&gt; 1\n// It's impossible to access the data object itself.\n// We are able to get or set individual it.\n</code></pre>\n\n<p>ems</p>\n\n<p>The example above is using an anonymous function, which was executed once. But it does not have to be. It can be named (e.g. <code>mkdb</code>) and executed later, generating a database function each time it is invoked. Every generated function will have its own hidden database object. Another usage example of closures is when we don't return a function, but an object containing multiple functions for different purposes, each of those function having access to the same data.</p>\n",
    "score": 127,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 7285658,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/7285658",
    "title": null,
    "body": "<p>Taking the question seriously, we should find out what a typical 6-year-old is capable of cognitively, though admittedly, one who is interested in JavaScript is not so typical.  </p>\n\n<p>On  <a href=\"http://www.howkidsdevelop.com/5-7years.html\">Childhood Development: 5 to 7 Years </a> it says:</p>\n\n<blockquote>\n  <p>Your child will be able to follow two-step directions. For example, if you say to your child, \"Go to the kitchen and get me a trash bag\" they will be able to remember that direction.</p>\n</blockquote>\n\n<p>We can use this example to explain closures, as follows:</p>\n\n<blockquote>\n  <p>The kitchen is a closure that has a local variable, called <code>trashBags</code>.  There is a function inside the kitchen called <code>getTrashBag</code> that gets one trash bag and returns it.</p>\n</blockquote>\n\n<p>We can code this in JavaScript like this:</p>\n\n<pre><code>function makeKitchen () {\n  var trashBags = ['A', 'B', 'C']; // only 3 at first\n\n  return {\n    getTrashBag: function() {\n      return trashBags.pop();\n    }\n  };\n}\n\nvar kitchen = makeKitchen();\n\nkitchen.getTrashBag(); // returns trash bag C\nkitchen.getTrashBag(); // returns trash bag B\nkitchen.getTrashBag(); // returns trash bag A\n</code></pre>\n\n<p>Further points that explain why closures are interesting:</p>\n\n<ul>\n<li>Each time <code>makeKitchen()</code> is called, a new closure is created with its own separate <code>trashBags</code>.</li>\n<li>The <code>trashBags</code> variable is local to the inside of each kitchen and is not accessible outside, but the inner function on the <code>getTrashBag</code> property does have access to it.  </li>\n<li>Every function call creates a closure, but there would be no need to keep the closure around unless an inner function, which has access to the inside of the closure, can be called from outside the closure.  Returning the object with the <code>getTrashBag</code> function does that here.</li>\n</ul>\n",
    "score": 612,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10437122,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/10437122",
    "title": null,
    "body": "<p>I know there are plenty of solutions already, but I guess that this small and simple script can be useful to demonstrate the concept:</p>\n\n<pre><code>// makeSequencer will return a \"sequencer\" function\nvar makeSequencer = function() {\n    var _count = 0; // not accessible outside this function\n    var sequencer = function () {\n        return _count++;\n    }\n    return sequencer;\n}\n\nvar fnext = makeSequencer();\nvar v0 = fnext();     // v0 = 0;\nvar v1 = fnext();     // v1 = 1;\nvar vz = fnext._count // vz = undefined\n</code></pre>\n",
    "score": 65,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11658891,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/11658891",
    "title": null,
    "body": "<p>After a function is invoked, it goes out of scope. If that function contains something like a callback function, then that callback function is still in scope. If the callback function references some local variable in the immediate environment of the parent function, then naturally you'd expect that variable to be inaccessible to the callback function and return undefined.</p>\n\n<p>Closures ensure that any property that is referenced by the callback function is available for use by that function, even when its parent function may have gone out of scope.</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12122448,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/12122448",
    "title": null,
    "body": "<p>From a personal <a href=\"http://tshikatshikaaa.blogspot.nl/2012/08/purpose-of-javascript-closure.html\" rel=\"noreferrer\">blog post</a>:</p>\n\n<p>By default, JavaScript knows two types of scopes: global and local.</p>\n\n<pre><code>var a = 1;\n\nfunction b(x) {\n    var c = 2;\n    return x * c;\n}\n</code></pre>\n\n<p>In the above code, variable a and function b are available from anywhere in the code (that is, globally). Variable <code>c</code> is only available within the <code>b</code> function scope (that is, local). Most software developers won't be happy with this lack of scope flexibility, especially in large programs.</p>\n\n<p>JavaScript closures help solving that issue by tying a function with a context:</p>\n\n<pre><code>function a(x) {\n    return function b(y) {\n        return x + y;\n    }\n}\n</code></pre>\n\n<p>Here, function <code>a</code> returns a function called <code>b</code>. Since <code>b</code> is defined within <code>a</code>, it automatically has access to whatever is defined in <code>a</code>, that is, <code>x</code> in this example. This is why <code>b</code> can return <code>x</code> + <code>y</code> without declaring <code>x</code>.</p>\n\n<pre><code>var c = a(3);\n</code></pre>\n\n<p>Variable <code>c</code> is assigned the result of a call to a with parameter 3. That is, an instance of function <code>b</code> where <code>x</code> = 3. In other words, <code>c</code> is now a function equivalent to:</p>\n\n<pre><code>var c = function b(y) {\n    return 3 + y;\n}\n</code></pre>\n\n<p>Function <code>b</code> remembers that <code>x</code> = 3 in its context. Therefore:</p>\n\n<pre><code>var d = c(4);\n</code></pre>\n\n<p>will assign the value 3 + 4 to <code>d</code>, that is 7.</p>\n\n<p><strong>Remark</strong>: If someone modifies the value of <code>x</code> (say <code>x</code> = 22) after the instance of function <code>b</code> has been created, this will be reflected in <code>b</code> too. Hence a later call to <code>c</code>(4) would return 22 + 4, that is 26.</p>\n\n<p>Closures can also be used to limit the scope of variables and methods declared globally:</p>\n\n<pre><code>(function () {\n    var f = \"Some message\";\n    alert(f);\n})();\n</code></pre>\n\n<p>The above is a closure where the function has no name, no argument and is called immediately. The highlighted code, which declares a global variable <code>f</code>, limits the scopes of <code>f</code> to the closure.</p>\n\n<p>Now, there is a common JavaScript caveat where closures can help:</p>\n\n<pre><code>var a = new Array();\n\nfor (var i=0; i&lt;2; i++) {\n    a[i]= function(x) { return x + i ; }\n}\n</code></pre>\n\n<p>From the above, most would assume that array <code>a</code> would be initialized as follows:</p>\n\n<pre><code>a[0] = function (x) { return x + 0 ; }\na[1] = function (x) { return x + 1 ; }\na[2] = function (x) { return x + 2 ; }\n</code></pre>\n\n<p>In reality, this is how a is initialized, since the last value of <code>i</code> in the context is 2:</p>\n\n<pre><code>a[0] = function (x) { return x + 2 ; }\na[1] = function (x) { return x + 2 ; }\na[2] = function (x) { return x + 2 ; }\n</code></pre>\n\n<p>The solution is:</p>\n\n<pre><code>var a = new Array();\n\nfor (var i=0; i&lt;2; i++) {\n    a[i]= function(tmp) {\n        return function (x) { return x + tmp ; }\n    } (i);\n}\n</code></pre>\n\n<p>The argument/variable <code>tmp</code> holds a local copy of the changing value of <code>i</code> when creating function instances.</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13074647,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/13074647",
    "title": null,
    "body": "<p>A function in JavaScript is not just a reference to a set of instructions (as in C language), but it also includes a hidden data structure which is composed of references to all nonlocal variables it uses (captured variables). Such two-piece functions are called closures. Every function in JavaScript can be considered a closure.</p>\n\n<p>Closures are functions with a state. It is somewhat similar to \"this\" in the sense that \"this\" also provides state for a function but function and \"this\" are separate objects (\"this\" is just a fancy parameter, and the only way to bind it permanently to a function is to create a closure). While \"this\" and function always live separately, a function cannot be separated from its closure and the language provides no means to access captured variables.</p>\n\n<p>Because all these external variables referenced by a lexically nested function are actually local variables in the chain of its lexically enclosing functions (global variables can be assumed to be local variables of some root function), and every single execution of a function creates new instances of its local variables, it follows that every execution of a function returning (or otherwise transferring it out, such as registering it as a callback) a nested function creates a new closure (with its own potentially unique set of referenced nonlocal variables which represent its execution context).</p>\n\n<p>Also, it must be understood that local variables in JavaScript are created not on the stack frame, but on the heap and destroyed only when no one is referencing them. When a function returns, references to its local variables are decremented, but they can still be non-null if during the current execution they became part of a closure and are still referenced by its lexically nested functions (which can happen only if the references to these nested functions were returned or otherwise transferred to some external code).</p>\n\n<p>An example:</p>\n\n<pre><code>function foo (initValue) {\n   //This variable is not destroyed when the foo function exits.\n   //It is 'captured' by the two nested functions returned below.\n   var value = initValue;\n\n   //Note that the two returned functions are created right now.\n   //If the foo function is called again, it will return\n   //new functions referencing a different 'value' variable.\n   return {\n       getValue: function () { return value; },\n       setValue: function (newValue) { value = newValue; }\n   }\n}\n\nfunction bar () {\n    //foo sets its local variable 'value' to 5 and returns an object with\n    //two functions still referencing that local variable\n    var obj = foo(5);\n\n    //Extracting functions just to show that no 'this' is involved here\n    var getValue = obj.getValue;\n    var setValue = obj.setValue;\n\n    alert(getValue()); //Displays 5\n    setValue(10);\n    alert(getValue()); //Displays 10\n\n    //At this point getValue and setValue functions are destroyed\n    //(in reality they are destroyed at the next iteration of the garbage collector).\n    //The local variable 'value' in the foo is no longer referenced by\n    //anything and is destroyed too.\n}\n\nbar();\n</code></pre>\n",
    "score": 38,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13658697,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/13658697",
    "title": null,
    "body": "<p>Closures are a means through which inner functions can refer to the variables present in their outer enclosing function after their parent functions have already terminated.</p>\n\n<pre><code>// A function that generates a new function for adding numbers.\nfunction addGenerator( num ) {\n    // Return a simple function for adding two numbers\n    // with the first number borrowed from the generator\n    return function( toAdd ) {\n        return num + toAdd\n    };\n}\n\n// addFive now contains a function that takes one argument,\n// adds five to it, and returns the resulting number.\nvar addFive = addGenerator( 5 );\n// We can see here that the result of the addFive function is 9,\n// when passed an argument of 4.\nalert( addFive( 4 ) == 9 );\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15097817,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/15097817",
    "title": null,
    "body": "<h1>The Straw Man</h1>\n\n<p>I need to know how many times a button has been clicked, and do something on every third click...</p>\n\n<h2>Fairly Obvious Solution</h2>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Declare counter outside event handler's scope\r\nvar counter = 0;\r\nvar element = document.getElementById('button');\r\n\r\nelement.addEventListener(\"click\", function() {\r\n  // Increment outside counter\r\n  counter++;\r\n\r\n  if (counter === 3) {\r\n    // Do something every third time\r\n    console.log(\"Third time's the charm!\");\r\n\r\n    // Reset counter\r\n    counter = 0;\r\n  }\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;button id=\"button\"&gt;Click Me!&lt;/button&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Now this will work, but it does encroach into the outer scope by adding a variable, whose sole purpose is to keep track of the count. In some situations this would be preferable as your outer application might need access to this information. But in this case we are only changing every third click's behavior, so it is preferable to <strong>enclose this functionality inside the event handler</strong>.</p>\n\n<h2>Consider this option</h2>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var element = document.getElementById('button');\r\n\r\nelement.addEventListener(\"click\", (function() {\r\n  // init the count to 0\r\n  var count = 0;\r\n\r\n  return function(e) { // &lt;- This function becomes the click handler\r\n    count++; //    and will retain access to the above `count`\r\n\r\n    if (count === 3) {\r\n      // Do something every third time\r\n      console.log(\"Third time's the charm!\");\r\n\r\n      //Reset counter\r\n      count = 0;\r\n    }\r\n  };\r\n})());</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;button id=\"button\"&gt;Click Me!&lt;/button&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Notice a few things here.</p>\n\n<p>In the above example I am using the closure behavior of JavaScript. <strong>This behavior allows any function to have access to the scope in which it was created, indefinitely.</strong> To practically apply this, I immediately invoke a function that returns another function, and because the function I'm returning has access to the internal count variable (because of the closure behavior explained above) this results in a private scope for usage by the resulting function... Not so simple? Let's dilute it down...</p>\n\n<p><strong>A simple one-line closure</strong></p>\n\n<pre><code>//          _______________________Immediately invoked______________________\n//         |                                                                |\n//         |        Scope retained for use      ___Returned as the____      |\n//         |       only by returned function   |    value of func     |     |\n//         |             |            |        |                      |     |\n//         v             v            v        v                      v     v\nvar func = (function() { var a = 'val'; return function() { alert(a); }; })();\n</code></pre>\n\n<p>All variables outside the returned function are available to the returned function, but they are not directly available to the returned function object...</p>\n\n<pre><code>func();  // Alerts \"val\"\nfunc.a;  // Undefined\n</code></pre>\n\n<p>Get it? So in our primary example, the count variable is contained within the closure and always available to the event handler, so it retains its state from click to click.</p>\n\n<p>Also this private variable state is <strong>fully</strong> accessible, for both reading and assigning to its private scoped variables.</p>\n\n<p>There you go; you're now fully encapsulating this behavior.</p>\n\n<p><strong><a href=\"http://jondavidjohn.com/javascript-closure-explained-using-events/\" rel=\"noreferrer\">Full Blog Post</a></strong> (including jQuery considerations)</p>\n",
    "score": 444,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15208427,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/15208427",
    "title": null,
    "body": "<p>Okay, talking with a 6-year old child, I would possibly use following associations.</p>\n\n<blockquote>\n  <p>Imagine - you are playing with your little brothers and sisters in the entire house, and you are moving around with your toys and brought some of them into your older brother's room. After a while your brother returned from the school and went to his room, and he locked inside it, so now you could not access toys left there anymore in a direct way. But you could knock the door and ask your brother for that toys. This is called toy's <em>closure</em>; your brother made it up for you, and he is now into outer <em>scope</em>.</p>\n</blockquote>\n\n<p>Compare with a situation when a door was locked by draft and nobody inside (general function execution), and then some local fire occur and burn down the room (garbage collector:D), and then a new room was build and now you may leave another toys there (new function instance), but never get the same toys which were left in the first room instance.</p>\n\n<p>For an advanced child I would put something like the following. It is not perfect, but it makes you feel about what it is:</p>\n\n<pre><code>function playingInBrothersRoom (withToys) {\n  // We closure toys which we played in the brother's room. When he come back and lock the door\n  // your brother is supposed to be into the outer [[scope]] object now. Thanks god you could communicate with him.\n  var closureToys = withToys || [],\n      returnToy, countIt, toy; // Just another closure helpers, for brother's inner use.\n\n  var brotherGivesToyBack = function (toy) {\n    // New request. There is not yet closureToys on brother's hand yet. Give him a time.\n    returnToy = null;\n    if (toy &amp;&amp; closureToys.length &gt; 0) { // If we ask for a specific toy, the brother is going to search for it.\n\n      for ( countIt = closureToys.length; countIt; countIt--) {\n        if (closureToys[countIt - 1] == toy) {\n          returnToy = 'Take your ' + closureToys.splice(countIt - 1, 1) + ', little boy!';\n          break;\n        }\n      }\n      returnToy = returnToy || 'Hey, I could not find any ' + toy + ' here. Look for it in another room.';\n    }\n    else if (closureToys.length &gt; 0) { // Otherwise, just give back everything he has in the room.\n      returnToy = 'Behold! ' + closureToys.join(', ') + '.';\n      closureToys = [];\n    }\n    else {\n      returnToy = 'Hey, lil shrimp, I gave you everything!';\n    }\n    console.log(returnToy);\n  }\n  return brotherGivesToyBack;\n}\n// You are playing in the house, including the brother's room.\nvar toys = ['teddybear', 'car', 'jumpingrope'],\n    askBrotherForClosuredToy = playingInBrothersRoom(toys);\n\n// The door is locked, and the brother came from the school. You could not cheat and take it out directly.\nconsole.log(askBrotherForClosuredToy.closureToys); // Undefined\n\n// But you could ask your brother politely, to give it back.\naskBrotherForClosuredToy('teddybear'); // Hooray, here it is, teddybear\naskBrotherForClosuredToy('ball'); // The brother would not be able to find it.\naskBrotherForClosuredToy(); // The brother gives you all the rest\naskBrotherForClosuredToy(); // Nothing left in there\n</code></pre>\n\n<p>As you can see, the toys left in the room are still accessible via the brother and no matter if the room is locked. Here is <a href=\"http://jsbin.com/ubakor/9/edit\" rel=\"noreferrer\">a jsbin</a> to play around with it.</p>\n",
    "score": 41,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15306767,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/15306767",
    "title": null,
    "body": "<p>I'd simply point them to the <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Closures\">Mozilla Closures page</a>. It's the best, most <strong>concise and simple explanation</strong> of closure basics and practical usage that I've found. It is highly recommended to anyone learning JavaScript.</p>\n\n<p>And yes, I'd even recommend it to a 6-year old -- if the 6-year old is learning about closures, then it's logical they're ready to comprehend the <em>concise and simple explanation</em> provided in the article.</p>\n",
    "score": 36,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15340037,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/15340037",
    "title": null,
    "body": "<p>If you want to explain it to a six-year old child then you must find something very much simpler and NO code.</p>\n\n<p>Just tell the child that he is \"open\", which says that he is able to have relations with some others, his friends. At some point in time, he has determined friends (we can know the names of his friends), that is a closure. If you take a picture of him and his friends then he is \"closed\" relatively to his friendship ability. But in general, he is \"open\". During his whole life he will have many different sets of friends. One of these sets is a closure.</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16205049,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/16205049",
    "title": null,
    "body": "<p>I found very clear chapter 8 section 6, \"Closures,\" of <em>JavaScript: The Definitive Guide</em> by David Flanagan, 6th edition, O'Reilly, 2011. I'll try to paraphrase.  </p>\n\n<ol>\n<li><p>When a function is invoked, a new object is created to hold the local variables for that invocation.  </p></li>\n<li><p>A function's scope depends on its declaration location, not its execution location.</p></li>\n</ol>\n\n<p>Now, assume an inner function declared within an outer function and referring to variables of that outer function. Further assume the outer function returns the inner function, as a function. Now there is an external reference to whatever values were in the inner function's scope (which, by our assumptions, includes values from the outer function).</p>\n\n<p>JavaScript will preserve those values, as they have remained in scope of the current execution thanks to being passed out of the completed outer function. All functions are closures, but the closures of interest are the inner functions which, in our assumed scenario, preserve outer function values within their \"enclosure\" (I hope I'm using language correctly here) when they (the inner functions) are returned from outer functions. I know this doesn't meet the six-year-old requirement, but hopefully it is still helpful.</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16376253,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/16376253",
    "title": null,
    "body": "<p>A function is executed in the scope of the object/function in which it is defined. The said function can access the variables defined in the object/function where it has been defined while it is executing.</p>\n\n<p>And just take it literally.... as the code is written :P</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16463983,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/16463983",
    "title": null,
    "body": "<p>For a six-year-old?</p>\n\n<p>You and your family live in the mythical town of Ann Ville. You have a friend who lives next door, so you call them and ask them to come out and play. You dial:</p>\n\n<blockquote>\n  <p>000001 (jamiesHouse)</p>\n</blockquote>\n\n<p>After a month, you and your family move out of Ann Ville to the next town, but you and your friend still keep in touch, so now you have to dial the area code for the town that your friend lives in, before dialling their 'proper' number:</p>\n\n<blockquote>\n  <p>001 000001 (annVille.jamiesHouse)</p>\n</blockquote>\n\n<p>A year after that, your parents move to a whole new country, but you and your friend still keep in touch, so after bugging your parents to let you make international rate calls, you now dial:</p>\n\n<blockquote>\n  <p>01 001 000001 (myOldCountry.annVille.jamiesHouse)</p>\n</blockquote>\n\n<p>Strangely though, after moving to your new country, you and your family just so happen to move to a new town called Ann Ville... and you just so happen to make friends with some new person called Jamie... You give them a call...</p>\n\n<blockquote>\n  <p>000001 (jamiesHouse)</p>\n</blockquote>\n\n<p>Spooky...</p>\n\n<p>So spooky in fact, that you tell Jamie from your old country about it... You have a good laugh about it. So one day, you and your family take a holiday back to the old country. You visit your old town (Ann Ville), and go to visit Jamie...</p>\n\n<ul>\n<li>\"Really? Another Jamie? In Ann Ville? In your new country!!?\"</li>\n<li>\"Yeah... Let's call them...\"</li>\n</ul>\n\n<blockquote>\n  <p>02 001 000001 (myNewCountry.annVille.jamiesHouse)</p>\n</blockquote>\n\n<p>Opinions?</p>\n\n<p><em>What's more, I have a load of questions about the patience of a modern six-year-old...</em></p>\n",
    "score": 27,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16597261,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/16597261",
    "title": null,
    "body": "<p>An answer for a six-year-old (assuming he knows what a function is and what a variable is, and what data is):</p>\n\n<p>Functions can return data. One kind of data you can return from a function is another function. When that new function gets returned, all the variables and arguments used in the function that created it don't go away. Instead, that parent function \"closes.\" In other words, nothing can look inside of it and see the variables it used except for the function it returned. That new function has a special ability to look back inside the function that created it and see the data inside of it.</p>\n\n<pre><code>function the_closure() {\n  var x = 4;\n  return function () {\n    return x; // Here, we look back inside the_closure for the value of x\n  }\n}\n\nvar myFn = the_closure();\nmyFn(); //=&gt; 4\n</code></pre>\n\n<p>Another really simple way to explain it is in terms of scope:</p>\n\n<p>Any time you create a smaller scope inside of a larger scope, the smaller scope will always be able to see what is in the larger scope.</p>\n",
    "score": 37,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16945392,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/16945392",
    "title": null,
    "body": "<p>I'm sure, <a href=\"https://en.wikipedia.org/wiki/Albert_Einstein\" rel=\"nofollow\">Einstein</a> didn't say it with a direct expectation for us to pick any esoteric brainstormer thing and run over six-year-olds with futile attempts to get those 'crazy' (and what is even worse for them-boring) things to their childish minds :) If I were six years old I wouldn't like to have such parents or wouldn't make friendship with such boring philanthropists, sorry :)</p>\n\n<p>Anyway, for babies, <strong>closure</strong> is simply a <strong>hug</strong>, I guess, whatever way you try to explain :) And when you hug a friend of yours then you both kind of share anything you guys have at the moment. It's a rite of passage, once you've hugged somebody you're showing her trust and willingness to let her do with you a lot of things you don't allow and would hide from others. It's an act of friendship :).</p>\n\n<p>I really don't know how to explain it to 5-6 years old babies. I neither think they will appreciate any JavaScript code snippets like:</p>\n\n<pre><code>function Baby(){\n    this.iTrustYou = true;\n}\n\nBaby.prototype.hug = function (baby) {\n    var smiles = 0;\n\n    if (baby.iTrustYou) {\n        return function() {\n            smiles++;\n            alert(smiles);\n        };\n    }\n};\n\nvar\n   arman = new Baby(\"Arman\"),\n   morgan = new Baby(\"Morgana\");\n\nvar hug = arman.hug(morgan);\nhug();\nhug();\n</code></pre>\n\n<p>For children only:</p>\n\n<p><strong>Closure</strong> is <strong>hug</strong></p>\n\n<p><strong>Bug</strong> is <strong>fly</strong></p>\n\n<p><strong>KISS</strong> is <strong>smooch!</strong> :)</p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16959645,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/16959645",
    "title": null,
    "body": "<p>OK, 6-year-old closures fan. Do you want to hear the simplest example of closure?</p>\n\n<p>Let's imagine the next situation: a driver is sitting in a car. That car is inside a plane. Plane is in the airport. The ability of driver to access things outside his car, but inside the plane, even if that plane leaves an airport, is a closure. That's it. When you turn 27, look at the <a href=\"https://stackoverflow.com/a/111200/1393791\">more detailed explanation</a> or at the example below.</p>\n\n<p>Here is how I can convert my plane story into the code.</p>\n\n<pre><code>var plane = function (defaultAirport) {\n\n    var lastAirportLeft = defaultAirport;\n\n    var car = {\n        driver: {\n            startAccessPlaneInfo: function () {\n                setInterval(function () {\n                    console.log(\"Last airport was \" + lastAirportLeft);\n                }, 2000);\n            }\n        }\n    };\n    car.driver.startAccessPlaneInfo();\n\n    return {\n        leaveTheAirport: function (airPortName) {\n            lastAirportLeft = airPortName;\n        }\n    }\n}(\"Boryspil International Airport\");\n\nplane.leaveTheAirport(\"John F. Kennedy\");\n</code></pre>\n",
    "score": 279,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17200991,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/17200991",
    "title": null,
    "body": "<p>I tend to learn better by GOOD/BAD comparisons. I like to see working code followed by non-working code that someone is likely to encounter. I put together <a href=\"http://jsfiddle.net/KMQZK/\" rel=\"noreferrer\">a jsFiddle</a> that does a comparison and tries to boil down the differences to the simplest explanations I could come up with.</p>\n\n<h2>Closures done right:</h2>\n\n<pre><code>console.log('CLOSURES DONE RIGHT');\n\nvar arr = [];\n\nfunction createClosure(n) {\n    return function () {\n        return 'n = ' + n;\n    }\n}\n\nfor (var index = 0; index &lt; 10; index++) {\n    arr[index] = createClosure(index);\n}\n\nfor (var index in arr) {\n    console.log(arr[index]());\n}\n</code></pre>\n\n<ul>\n<li><p>In the above code <code>createClosure(n)</code> is invoked in every iteration of the loop. Note that I named the variable <code>n</code> to highlight that it is a <strong>new</strong> variable created in a new function scope and is not the same variable as <code>index</code> which is bound to the outer scope.</p></li>\n<li><p>This creates a new scope and <code>n</code> is bound to that scope; this means we have 10 separate scopes, one for each iteration.</p></li>\n<li><p><code>createClosure(n)</code> returns a function that returns the n within that scope.</p></li>\n<li><p>Within each scope <code>n</code> is bound to whatever value it had when <code>createClosure(n)</code> was invoked so the nested function that gets returned will always return the value of <code>n</code> that it had when <code>createClosure(n)</code> was invoked.</p></li>\n</ul>\n\n<h2>Closures done wrong:</h2>\n\n<pre><code>console.log('CLOSURES DONE WRONG');\n\nfunction createClosureArray() {\n    var badArr = [];\n\n    for (var index = 0; index &lt; 10; index++) {\n        badArr[index] = function () {\n            return 'n = ' + index;\n        };\n    }\n    return badArr;\n}\n\nvar badArr = createClosureArray();\n\nfor (var index in badArr) {\n    console.log(badArr[index]());\n}\n</code></pre>\n\n<ul>\n<li><p>In the above code the loop was moved within the <code>createClosureArray()</code> function and the function now just returns the completed array, which at first glance seems more intuitive.</p></li>\n<li><p>What might not be obvious is that since <code>createClosureArray()</code> is only invoked once only one scope is created for this function instead of one for every iteration of the loop.</p></li>\n<li><p>Within this function a variable named <code>index</code> is defined. The loop runs and adds functions to the array that return <code>index</code>. Note that <code>index</code> is defined within the <code>createClosureArray</code> function which only ever gets invoked one time.</p></li>\n<li><p>Because there was only one scope within the <code>createClosureArray()</code> function, <code>index</code> is only bound to a value within that scope. In other words, each time the loop changes the value of <code>index</code>, it changes it for everything that references it within that scope.</p></li>\n<li><p>All of the functions added to the array return the SAME <code>index</code> variable from the parent scope where it was defined instead of 10 different ones from 10 different scopes like the first example. The end result is that all 10 functions return the same variable from the same scope.</p></li>\n<li><p>After the loop finished and <code>index</code> was done being modified the end value was 10, therefore every function added to the array returns the value of the single <code>index</code> variable which is now set to 10.</p></li>\n</ul>\n\n<h2>Result</h2>\n\n<blockquote>\n  <p>CLOSURES DONE RIGHT<br>\n  n = 0<br>\n  n = 1<br>\n  n = 2<br>\n  n = 3<br>\n  n = 4<br>\n  n = 5<br>\n  n = 6<br>\n  n = 7<br>\n  n = 8<br>\n  n = 9  </p>\n  \n  <p>CLOSURES DONE WRONG<br>\n  n = 10<br>\n  n = 10<br>\n  n = 10<br>\n  n = 10<br>\n  n = 10<br>\n  n = 10<br>\n  n = 10<br>\n  n = 10<br>\n  n = 10<br>\n  n = 10  </p>\n</blockquote>\n",
    "score": 125,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17254359,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/17254359",
    "title": null,
    "body": "<h2>Given the following function</h2>\n\n<pre><code>function person(name, age){\n\n    var name = name;\n    var age = age;\n\n    function introduce(){\n        alert(\"My name is \"+name+\", and I'm \"+age);\n    }\n\n    return introduce;\n}\n\nvar a = person(\"Jack\",12);\nvar b = person(\"Matt\",14);\n</code></pre>\n\n<p>Everytime the function <code>person</code> is called a new closure is created. While variables <code>a</code> and <code>b</code> have the same <code>introduce</code> function, it is linked to different closures. And that closure will still exist even after the function <code>person</code> finishes execution.</p>\n\n<p><img src=\"https://i.stack.imgur.com/LDEhE.png\" alt=\"Enter image description here\"></p>\n\n<pre><code>a(); //My name is Jack, and I'm 12\nb(); //My name is Matt, and I'm 14\n</code></pre>\n\n<p>An abstract closures could be represented to something like this:</p>\n\n<pre><code>closure a = {\n    name: \"Jack\",\n    age: 12,\n    call: function introduce(){\n        alert(\"My name is \"+name+\", and I'm \"+age);\n    }\n}\n\nclosure b = {\n    name: \"Matt\",\n    age: 14,\n    call: function introduce(){\n        alert(\"My name is \"+name+\", and I'm \"+age);\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>Assuming you know how a <code>class</code> in another language work, I will make an analogy.</p>\n\n<p>Think like</p>\n\n<ul>\n<li>JavaScript <code>function</code> as a <code>constructor</code></li>\n<li><code>local variables</code> as <code>instance properties</code></li>\n<li>these <code>properties</code> are private</li>\n<li><code>inner functions</code> as <code>instance methods</code></li>\n</ul>\n\n<p>Everytime a <code>function</code> is called</p>\n\n<ul>\n<li>A new <code>object</code> containing all local variables will be created.</li>\n<li>Methods of this object have access to <code>\"properties\"</code> of that instance object.</li>\n</ul>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17256320,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/17256320",
    "title": null,
    "body": "<p>Considering the question is about explaining it simply as if to a <strong>6-year-old</strong>, my answer would be:</p>\n\n<p><strong>\"When you declare a function in JavaScript it has forever access to all the variables and functions that were available in the line before that function declaration. The function and all the outer variables and functions that it has access to is what we call a closure.\"</strong></p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17308587,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/17308587",
    "title": null,
    "body": "<h2><strong>Closures are simple:</strong></h2>\n\n<p>The following simple example covers all the main points of JavaScript closures.<sup>*</sup>\n&nbsp;</p>\n\n<p>Here is a factory that produces calculators that can add and multiply:</p>\n\n<pre><code>function make_calculator() {\n  var n = 0; // this calculator stores a single number n\n  return {\n    add: function(a) {\n      n += a;\n      return n;\n    },\n    multiply: function(a) {\n      n *= a;\n      return n;\n    }\n  };\n}\n\nfirst_calculator = make_calculator();\nsecond_calculator = make_calculator();\n\nfirst_calculator.add(3); // returns 3\nsecond_calculator.add(400); // returns 400\n\nfirst_calculator.multiply(11); // returns 33\nsecond_calculator.multiply(10); // returns 4000\n</code></pre>\n\n<p><strong>The key point:</strong> Each call to <code>make_calculator</code> creates a new local variable <code>n</code>, which continues to be usable by that calculator's <code>add</code> and <code>multiply</code> functions long after <code>make_calculator</code> returns.</p>\n\n<p><em>If you are familiar with stack frames, these calculators seem strange: How can they keep accessing <code>n</code> after <code>make_calculator</code> returns?  The answer is to imagine that JavaScript doesn't use \"stack frames\", but instead uses \"heap frames\", which can persist after the function call that made them returns.</em></p>\n\n<p>Inner functions like <code>add</code> and <code>multiply</code>, which access variables declared in an outer function<sup>**</sup>, are called <em>closures</em>.</p>\n\n<p><strong>That is pretty much all there is to closures.</strong></p>\n\n<p><br></p>\n\n<hr>\n\n<p><sup><sup>*</sup> For example, it covers all the points in the \"Closures for Dummies\" article given in <a href=\"https://stackoverflow.com/a/111111/706054\">another answer</a>, except example 6, which simply shows that variables can be used before they are declared, a nice fact to know but completely unrelated to closures. It also covers all the points in <a href=\"https://stackoverflow.com/a/111200/706054\">the accepted answer</a>, except for the points (1) that functions copy their arguments into local variables (the named function arguments), and (2) that copying numbers creates a new number, but copying an object reference gives you another reference to the same object. These are also good to know but again completely unrelated to closures. It is also very similar to the example in <a href=\"https://stackoverflow.com/a/111114/706054\">this answer</a> but a bit shorter and less abstract. It does not cover the point of <a href=\"https://stackoverflow.com/a/17200991/706054\">this answer</a> or <a href=\"https://stackoverflow.com/questions/111102/how-do-javascript-closures-work/17308587?noredirect=1#comment26377355_111111\">this comment</a>, which is that JavaScript makes it difficult to plug the <em>current</em> value of a loop variable into your inner function: The \"plugging in\" step can only be done with a helper function that encloses your inner function and is invoked on each loop iteration. (Strictly speaking, the inner function accesses the helper function's copy of the variable, rather than having anything plugged in.) Again, very useful when creating closures, but not part of what a closure is or how it works. There is additional confusion due to closures working differently in functional languages like ML, where variables are bound to values rather than to storage space, providing a constant stream of people who understand closures in a way (namely the \"plugging in\" way) that is simply incorrect for JavaScript, where variables are always bound to storage space, and never to values. </sup></p>\n\n<p><sup><sup>**</sup> Any outer function, if several are nested, or even in the global context, as <a href=\"https://stackoverflow.com/a/5099447/706054\">this answer</a> points out clearly.</sup></p>\n",
    "score": 164,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 18277558,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/18277558",
    "title": null,
    "body": "<p>A closure is basically creating two things :\n- a function\n- a private scope that only that function can access</p>\n\n<p>It is like putting some coating around a function.</p>\n\n<p>So to a 6-years-old, it could be explained by giving an analogy. Let's say I build a robot. That robot can do many things. Among those things, I programmed it to count the number of birds he sees in the sky. Each time he has seen 25 birds, he should tell me how many birds he has seen since the beginning.</p>\n\n<p>I don't know how many birds he has seen unless he has told me. Only he knows. That's the private scope. That's basically the robot's memory. Let's say I gave him 4&nbsp;GB.</p>\n\n<p>Telling me how many birds he has seen is the returned function. I also created that.</p>\n\n<p>That analogy is a bit sucky, but someone could improve it I guess.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19496348,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/19496348",
    "title": null,
    "body": "<p>The word <em>closure</em> simply refers to being able to access <em>objects</em> (six-year-old: things) that are <em>closed</em> (six-year-old: private) within a <em>function</em> (six-year-old: box). Even if the <em>function</em> (six-year-old: box) is out of <em>scope</em> (six-year-old: sent far away).</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21353238,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/21353238",
    "title": null,
    "body": "<p>The more I think about closure the more I see it as a 2-step process: <strong>init - action</strong></p>\n\n<pre><code>init: pass first what's needed...\naction: in order to achieve something for later execution.\n</code></pre>\n\n<p>To a 6-year old, I'd emphasize on the <em>practical aspect</em> of closure:</p>\n\n<pre><code>Daddy: Listen. Could you bring mum some milk (2).\nTom: No problem.\nDaddy: Take a look at the map that Daddy has just made: mum is there and daddy is here.\nDaddy: But get ready first. And bring the map with you (1), it may come in handy\nDaddy: Then off you go (3). Ok?\nTom: A piece of cake!\n</code></pre>\n\n<p><strong>Example</strong>: <em>Bring some milk to mum (=action). First get ready and bring the map (=init).</em></p>\n\n<pre><code>function getReady(map) {\n    var cleverBoy = 'I examine the ' + map;\n    return function(what, who) {\n        return 'I bring ' + what + ' to ' + who + 'because + ' cleverBoy; //I can access the map\n    }\n}\nvar offYouGo = getReady('daddy-map');\noffYouGo('milk', 'mum');\n</code></pre>\n\n<p>Because if you bring with you a very important piece of information (the map), you're knowledgeable enough to execute other similar actions:</p>\n\n<pre><code>offYouGo('potatoes', 'great mum');\n</code></pre>\n\n<p>To a developer I'd make a parallel between closures and <a href=\"http://en.wikipedia.org/wiki/Object-oriented_programming\" rel=\"nofollow noreferrer\">OOP</a>.\nThe <strong>init phase</strong> is similar to passing arguments to a constructor in a traditional OO language; the <strong>action phase</strong> is ultimately the method you call to achieve what you want. And the method has access these init arguments using a mechanism called <em>closure</em>.</p>\n\n<p>See my another answer illustrating the parallelism between OO and closures:</p>\n\n<p><em><a href=\"https://stackoverflow.com/questions/1595611/how-to-properly-create-a-custom-object-in-javascript/21352366#21352366\">How to &quot;properly&quot; create a custom object in JavaScript?</a></em></p>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21839381,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/21839381",
    "title": null,
    "body": "<p>How I'd explain it to a six-year-old:</p>\n\n<p>You know how grown-ups can own a house, and they call it home? When a mom has a child, the child doesn't really own anything, right? But its parents own a house, so whenever someone asks the child \"Where's your home?\", he/she can answer \"that house!\", and point to the house of its parents. A \"Closure\" is the ability of the child to always (even if abroad) be able to say it has a home, even though it's really the parent's who own the house.</p>\n",
    "score": 164,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22365177,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/22365177",
    "title": null,
    "body": "<h1>The simplest, shortest, most-easy-to-understand answer:</h1>\n\n<p>A closure is a block of code where each line can reference the same set of variables with the same variable names. </p>\n\n<p>If \"this\" means something different than it does somewhere else, then you know it is two different closures.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22508288,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/22508288",
    "title": null,
    "body": "<p>If you understand it well you can explain it simple. And the simplest way is abstracting it from the context. Code aside, even programming aside. A metaphor example will do it better.</p>\n\n<p>Let's imagine that a function is a room whose walls are of glass, but they are special glass, like the ones in an interrogation room. From outside they are opaque, from inside they are transparent. It can be rooms inside other rooms, and the only way of contact is a phone.</p>\n\n<p>If you call from the outside, you don't know what is in it, but you know that the people inside will do a task if you give them certain information. They can see outside, so they can ask you for stuff that are outside and make changes to that stuff, but you can't change what it is inside from the outside, you don't even see (know) what it is inside. The people inside that room you are calling see what it is outside, but not what it is inside the rooms in that room, so they interact with them the way you are doing from outside. The people inside the most inner rooms can see many things, but the people of the most outer room  don't even know about the most inner rooms' existence.</p>\n\n<p>For each call to an inner room, the people in that room keeps a record of the information about that specific call, and they are so good doing that that they never mistake one call stuff with other call stuff.</p>\n\n<p>Rooms are functions, visibility is scope, people doing task is statements, stuff are objects, phone calls are function calls, phone call information is arguments, call records are scope instances, the most outer room is the global object.</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22533155,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/22533155",
    "title": null,
    "body": "<p>Even though many beautiful definitions of JavaScript closures exists on the Internet, I am trying to start explaining my six-year-old friend with my favourite definitions of closure which helped me to understand the closure much better.</p>\n\n<p><strong>What is a Closure?</strong></p>\n\n<p>A closure is an inner function that has access to the outer (enclosing) function’s variables—scope chain. The closure has three scope chains: it has access to its own scope (variables defined between its curly brackets), it has access to the outer function’s variables, and it has access to the global variables.</p>\n\n<p>A closure is the local variables for a function - kept alive after the function has returned.</p>\n\n<p>Closures are functions that refer to independent (free) variables. In other words, the function defined in the closure 'remembers' the environment in which it was created in.</p>\n\n<p>Closures are an extension of the concept of scope. With closures, functions have access to variables that were available in the scope where the function was created.</p>\n\n<p>A closure is a stack-frame which is not deallocated when the function returns. (As if a 'stack-frame' were malloc'ed instead of being on the stack!)</p>\n\n<p>Languages such as Java provide the ability to declare methods private, meaning that they can only be called by other methods in the same class. JavaScript does not provide a native way of doing this, but it is possible to emulate private methods using closures.</p>\n\n<p>A \"closure\" is an expression (typically a function) that can have free variables together with an environment that binds those variables (that \"closes\" the expression).</p>\n\n<p>Closures are an abstraction mechanism that allow you to separate concerns very cleanly.</p>\n\n<p><strong>Uses of Closures:</strong></p>\n\n<p>Closures are useful in hiding the implementation of functionality while still revealing the interface.</p>\n\n<p>You can emulate the encapsulation concept in JavaScript using closures.</p>\n\n<p>Closures are used extensively in <a href=\"http://en.wikipedia.org/wiki/JQuery\">jQuery</a> and <a href=\"http://en.wikipedia.org/wiki/Node.js\">Node.js</a>.</p>\n\n<p>While object literals are certainly easy to create and convenient for storing data, closures are often a better choice for creating static singleton namespaces in a large web application.</p>\n\n<p><strong>Example of Closures:</strong></p>\n\n<p>Assuming my 6-year-old friend get to know addition very recently in his primary school, I felt this example of adding the two numbers would be the simplest and apt for the six-year-old to learn the closure.</p>\n\n<p><strong>Example 1: Closure is achieved here by returning a function.</strong></p>\n\n<pre><code>function makeAdder(x) {\n    return function(y) {\n        return x + y;\n    };\n}\n\nvar add5 = makeAdder(5);\nvar add10 = makeAdder(10);\n\nconsole.log(add5(2));  // 7\nconsole.log(add10(2)); // 12\n</code></pre>\n\n<p><strong>Example 2: Closure is achieved here by returning an object literal.</strong></p>\n\n<pre><code>function makeAdder(x) {\n    return {\n        add: function(y){\n            return x + y;\n        }\n    }\n}\n\nvar add5 = makeAdder(5);\nconsole.log(add5.add(2));//7\n\nvar add10 = makeAdder(10);\nconsole.log(add10.add(2));//12\n</code></pre>\n\n<p><strong>Example 3: Closures in jQuery</strong></p>\n\n<pre><code>$(function(){\n    var name=\"Closure is easy\";\n    $('div').click(function(){\n        $('p').text(name);\n    });\n});\n</code></pre>\n\n<p><strong>Useful Links:</strong></p>\n\n<ul>\n<li><em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures\">Closures</a></em> (Mozilla Developer Network)</li>\n<li><em><a href=\"http://javascriptissexy.com/understand-javascript-closures-with-ease/\">Understand JavaScript Closures With Ease</a></em></li>\n</ul>\n\n<p>Thanks to the above links which helps me to understand and explain closure better.</p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22721884,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/22721884",
    "title": null,
    "body": "<p>I have read all of these before in the past, and they are all very informative. Some come very close to getting the simple explanation and then get complex or remain abstract, defeating the purpose and failing to show a very simple real world use. </p>\n\n<p>Though combing through all the examples and explanations you get a good idea of what closures are and aren't via comments and code, I was still unsatisfied with a very simple illustration that helped me get a closures usefulness without getting so complex. My wife wants to learn coding and I figured I needed to be able to show here not only what, but why, and and how.</p>\n\n<p>I am not sure a six year old will get this, but I think it might be a little closer to demonstrating a simple case in a real world way that might acually be useful and that is easily understandable.</p>\n\n<p>One of the best (or closest to simplest) is the retelling of Morris' Closures for Dummies example.</p>\n\n<p>Taking the \"SayHi2Bob\" concept just one step further demonstrates the two basic things you can glean from reading all the answers:</p>\n\n<ol>\n<li>Closures have access to the containing function's variables.</li>\n<li>Closures persist in their own memory space (and thus are useful for all kinds of oop-y instantiation stuff)</li>\n</ol>\n\n<p>Proving and demonstrating this to myself, I made a little fiddle:</p>\n\n<p><a href=\"http://jsfiddle.net/9ZMyr/2/\">http://jsfiddle.net/9ZMyr/2/</a></p>\n\n<pre><code>function sayHello(name) {\n  var text = 'Hello ' + name; // Local variable\n  console.log(text);\n  var sayAlert = function () {\n      alert(text);\n  }\n  return sayAlert;\n}\n\nsayHello(); \n/* This will write 'Hello undefined' to the console (in Chrome anyway), \nbut will not alert though since it returns a function handle to nothing). \nSince no handle or reference is created, I imagine a good js engine would \ndestroy/dispose of the internal sayAlert function once it completes. */\n\n// Create a handle/reference/instance of sayHello() using the name 'Bob'\nsayHelloBob = sayHello('Bob');\nsayHelloBob();\n\n// Create another handle or reference to sayHello with a different name\nsayHelloGerry = sayHello('Gerry');\nsayHelloGerry();\n\n/* Now calling them again demonstrates that each handle or reference contains its own \nunique local variable memory space. They remain in memory 'forever' \n(or until your computer/browser explode) */\nsayHelloBob();\nsayHelloGerry();\n</code></pre>\n\n<p>This demonstrates both of the basic concepts you should get about closures. </p>\n\n<p>In simple terms to explain the why this is useful, I have a base function to which I can make references or handles that contain unique data which persists within that memory reference. I don't have to rewrite the function for each time I want to say someone's name. I have encapsulated that routine and made it reusable.</p>\n\n<p>To me this leads to at least the basic concepts of constructors, oop practices, singletons vs instantiated instances with their own data, etc. etc.</p>\n\n<p>If you start a neophyte with this, then you can move on to more complex object property/member based calls, and hopefully the concepts carry.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22832931,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/22832931",
    "title": null,
    "body": "<p>A closure is created when the inner function is somehow made available to any scope outside the outer function.</p>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>var outer = function(params){ //Outer function defines a variable called params\n    var inner = function(){ // Inner function has access to the params variable of the outer function\n        return params;\n    }\n    return inner; //Return inner function exposing it to outer scope\n},\nmyFunc = outer(\"myParams\");\nmyFunc(); //Returns \"myParams\"\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23711357,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/23711357",
    "title": null,
    "body": "<p>Closure is when a function is <strong>closed</strong> in a way that it was defined in a namespace which is immutable by the time the function is called.</p>\n\n<p>In JavaScript, it happens when you:</p>\n\n<ul>\n<li>Define one function inside the other function</li>\n<li>The inner function is called after the outer function returned</li>\n</ul>\n\n\n\n<pre><code>// 'name' is resolved in the namespace created for one invocation of bindMessage\n// the processor cannot enter this namespace by the time displayMessage is called\nfunction bindMessage(name, div) {\n\n    function displayMessage() {\n        alert('This is ' + name);\n    }\n\n    $(div).click(displayMessage);\n}\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23984252,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/23984252",
    "title": null,
    "body": "<p>I think it is valuable to take a step back, and examine a more general notion of a \"closure\" -- the so-called \"join operator\".</p>\n\n<p>In mathematics, a \"join\" operator is a function on a partially ordered set which returns the smallest object greater than or equal to its arguments.  In symbols, join [a,b] = d such that d >= a and d >= b, but there does not exist an e such that d > e >= a or d > e >= b.</p>\n\n<p>So the join gives you the smallest thing \"bigger\" than the parts.</p>\n\n<p>Now, note that JavaScript scopes are a partially ordered structure.  So that there is a sensible notion of a join.  In particular, a join of scopes is the smallest scope bigger than the original scopes.  That scope is called the <strong>closure</strong>.</p>\n\n<p>So a closure for the variables a, b, c is the smallest scope (in the lattice of scopes for your program!) that brings a, b, and c into scope.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24123501,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/24123501",
    "title": null,
    "body": "<p>A closure is a block of code which meets three criteria:</p>\n\n<ul>\n<li><p>It can be passed around as a value and</p></li>\n<li><p>executed on demand by anyone who has that value, at which time</p></li>\n<li><p>it can refer to variables from the context in which it was created\n(that is, it is closed with respect to variable access, in the\nmathematical sense of the word \"closed\").</p></li>\n</ul>\n\n<p>(The word \"closure\" actually has an imprecise meaning, and some people don't think that criterion #1 is part of the definition. I think it is.)</p>\n\n<p>Closures are a mainstay of functional languages, but they are present in many other languages as well (for example, Java's anonymous inner classes). You can do cool stuff with them: they allow deferred execution and some elegant tricks of style.</p>\n\n<p>By: Paul Cantrell, @ <a href=\"http://innig.net/software/ruby/closures-in-ruby\">http://innig.net/software/ruby/closures-in-ruby</a></p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24944994,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/24944994",
    "title": null,
    "body": "<p>Imagine there is a very large park in your town where you see a magician called Mr. Coder starting baseball games in different corners of the park using his magic wand, called JavaScript.</p>\n\n<p>Naturally each baseball game has the exact same rules and each game has its own score board.</p>\n\n<p>Naturally, the scores of one baseball game are completely separate from the other games.</p>\n\n<p>A closure is the special way Mr.Coder keeps the scoring of all his magical baseball games separate.</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 26602035,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/26602035",
    "title": null,
    "body": "<p>Here is a simple real-time scenario. Just read it through, and you will understand how we have used closure here (see how seat number is changing).</p>\n\n<p>All other examples explained previously are also very good to understand the concept.</p>\n\n<pre><code>function movieBooking(movieName) {\n    var bookedSeatCount = 0;\n    return function(name) {\n        ++bookedSeatCount ;\n        alert( name + \" - \" + movieName + \", Seat - \" + bookedSeatCount )\n    };\n};\n\nvar MI1 = movieBooking(\"Mission Impossible 1 \");\nvar MI2 = movieBooking(\"Mission Impossible 2 \");\n\nMI1(\"Mayur\");\n// alert\n// Mayur - Mission Impossible 1, Seat - 1\n\nMI1(\"Raju\");\n// alert\n// Raju - Mission Impossible 1, Seat - 2\n\nMI2(\"Priyanka\");\n// alert\n// Raja - Mission Impossible 2, Seat - 1\n</code></pre>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 26620526,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/26620526",
    "title": null,
    "body": "<p>As a father of a 6-year-old, currently teaching young children (and a relative novice to coding with no formal education so corrections will be required), I think the lesson would stick best through hands-on play. If the 6-year-old is ready to understand what a closure is, then they are old enough to have a go themselves. I'd suggest pasting the code into jsfiddle.net, explaining a bit, and leaving them alone to concoct a unique song. The explanatory text below is probably more appropriate for a 10 year old.</p>\n\n<pre><code>function sing(person) {\n\n    var firstPart = \"There was \" + person + \" who swallowed \";\n\n    var fly = function() {\n        var creature = \"a fly\";\n        var result = \"Perhaps she'll die\";\n        alert(firstPart + creature + \"\\n\" + result);\n    };\n\n    var spider = function() {\n        var creature = \"a spider\";\n        var result = \"that wiggled and jiggled and tickled inside her\";\n        alert(firstPart + creature + \"\\n\" + result);\n    };\n\n    var bird = function() {\n        var creature = \"a bird\";\n        var result = \"How absurd!\";\n        alert(firstPart + creature + \"\\n\" + result);\n    };\n\n    var cat = function() {\n        var creature = \"a cat\";\n        var result = \"Imagine That!\";\n        alert(firstPart + creature + \"\\n\" + result);\n    };\n\n    fly();\n    spider();\n    bird();\n    cat();\n}\n\nvar person=\"an old lady\";\n\nsing(person);\n</code></pre>\n\n<p><strong>INSTRUCTIONS</strong></p>\n\n<p>DATA: Data is a collection of facts. It can be numbers, words, measurements, observations or even just descriptions of things. You can't touch it, smell it or taste it. You can write it down, speak it and hear it. You could use it to <em>create</em> touch smell and taste using a computer. It can be made useful by a computer using code.</p>\n\n<p>CODE: All the writing above is called <em>code</em>. It is written in JavaScript.</p>\n\n<p>JAVASCRIPT: JavaScript is a language. Like English or French or Chinese are languages. There are lots of languages that are understood by computers and other electronic processors. For JavaScript to be understood by a computer it needs an interpreter. Imagine if a teacher who only speaks Russian comes to teach your class at school. When the teacher says \"все садятся\", the class would not understand. But luckily you have a Russian pupil in your class who tells everyone this means \"everybody sit down\" - so you all do. The class is like a computer and the Russian pupil is the interpreter. For JavaScript the most common interpreter is called a browser.</p>\n\n<p>BROWSER: When you connect to the Internet on a computer, tablet or phone to visit a website, you use a browser. Examples you may know are Internet Explorer, Chrome, Firefox and Safari. The browser can understand JavaScript and tell the computer what it needs to do. The JavaScript instructions are called functions.</p>\n\n<p>FUNCTION: A function in JavaScript is like a factory. It might be a little factory with only one machine inside. Or it might contain many other little factories, each with many machines doing different jobs. In a real life clothes factory you might have reams of cloth and bobbins of thread going in and T-shirts and jeans coming out. Our JavaScript factory only processes data, it can't sew, drill a hole or melt metal. In our JavaScript factory data goes in and data comes out.</p>\n\n<p>All this data stuff sounds a bit boring, but it is really very cool; we might have a function that tells a robot what to make for dinner. Let's say I invite you and your friend to my house. You like chicken legs best, I like sausages, your friend always wants what you want and my friend does not eat meat.</p>\n\n<p>I haven't got time to go shopping, so the function needs to know what we have in the fridge to make decisions. Each ingredient has a different cooking time and we want everything to be served hot by the robot at the same time. We need to provide the function with the data about what we like, the function could 'talk' to the fridge, and the function could control the robot.</p>\n\n<p>A function normally has a name, parentheses and braces. Like this:</p>\n\n<pre><code>function cookMeal() {  /*  STUFF INSIDE THE FUNCTION  */  }\n</code></pre>\n\n<p><em>Note that <code>/*...*/</code> and <code>//</code> stop code being read by the browser.</em></p>\n\n<p>NAME: You can call a function just about whatever word you want. The example \"cookMeal\" is typical in joining two words together and giving the second one a capital letter at the beginning - but this is not necessary. It can't have a space in it, and it can't be a number on its own.</p>\n\n<p>PARENTHESES: \"Parentheses\" or <code>()</code> are the letter box on the JavaScript function factory's door or a post box in the street for sending packets of information to the factory. Sometimes the postbox might be marked <em>for example</em> <code>cookMeal(you, me, yourFriend, myFriend, fridge, dinnerTime)</code>, in which case you know what data you have to give it.</p>\n\n<p>BRACES: \"Braces\" which look like this <code>{}</code> are the tinted windows of our factory. From inside the factory you can see out, but from the outside you can't see in.</p>\n\n<p><strong>THE LONG CODE EXAMPLE ABOVE</strong></p>\n\n<p>Our code begins with the word <em>function</em>, so we know that it is one! Then the name of the function <em>sing</em> - that's my own description of what the function is about. Then parentheses <em>()</em>. The parentheses are always there for a function. Sometimes they are empty, and sometimes they have something in. This one has a word in: <code>(person)</code>. After this there is a brace like this <code>{</code> . This marks the start of the function <em>sing()</em>. It has a partner which marks the end of <em>sing()</em> like this <code>}</code></p>\n\n<pre><code>function sing(person) {  /* STUFF INSIDE THE FUNCTION */  }\n</code></pre>\n\n<p>So this function might have something to do with singing, and might need some data about a person. It has instructions inside to do something with that data.</p>\n\n<p>Now, after the function <em>sing()</em>, near the end of the code is the line</p>\n\n<pre><code>var person=\"an old lady\";\n</code></pre>\n\n<p>VARIABLE: The letters <em>var</em> stand for \"variable\". A variable is like an envelope. On the outside this envelope is marked \"person\". On the inside it contains a slip of paper with the information our function needs, some letters and spaces joined together like a piece of string (it's called a string) that make a phrase reading \"an old lady\". Our envelope could contain other kinds of things like numbers (called integers), instructions (called functions), lists (called <em>arrays</em>). Because this variable is written outside of all the braces <code>{}</code>, and because you can see out through the tinted windows when you are inside the braces, this variable can be seen from anywhere in the code. We call this a 'global variable'.</p>\n\n<p>GLOBAL VARIABLE: <em>person</em> is a global variable, meaning that if you change its value from \"an old lady\" to \"a young man\", the <em>person</em> will keep being a young man until you decide to change it again and that any other function in the code can see that it's a young man. Press the <kbd>F12</kbd> button or look at the Options settings to open the developer console of a browser and type \"person\" to see what this value is. Type <code>person=\"a young man\"</code> to change it and then type \"person\" again to see that it has changed.</p>\n\n<p>After this we have the line</p>\n\n<pre><code>sing(person);\n</code></pre>\n\n<p>This line is calling the function, as if it were calling a dog</p>\n\n<blockquote>\n  <p>\"Come on <em>sing</em>, Come and get <em>person</em>!\"</p>\n</blockquote>\n\n<p>When the browser has loaded the JavaScript code an reached this line, it will start the function. I put the line at the end to make sure that the browser has all the information it needs to run it.</p>\n\n<p>Functions define actions  - the main function is about singing. It contains a variable called <em>firstPart</em> which applies to the singing about the person that applies to each of the verses of the song: \"There was \" + person + \" who swallowed\". If you type <em>firstPart</em> into the console, you won't get an answer because the variable is locked up in a function - the browser can't see inside the tinted windows of the braces.</p>\n\n<p>CLOSURES: The closures are the smaller functions that are inside the big <em>sing()</em> function. The little factories inside the big factory. They each have their own braces which mean that the variables inside them can't be seen from the outside. That's why the names of the variables (<em>creature</em> and <em>result</em>) can be repeated in the closures but with different values. If you type these variable names in the console window, you won't get its value because it's hidden by two layers of tinted windows.</p>\n\n<p>The closures all know what the <em>sing()</em> function's variable called <em>firstPart</em> is, because they can see out from their tinted windows.</p>\n\n<p>After the closures come the lines</p>\n\n<pre><code>fly();\nspider();\nbird();\ncat();\n</code></pre>\n\n<p>The sing() function will call each of these functions in the order they are given. Then the sing() function's work will be done.</p>\n",
    "score": 46,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 26860224,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/26860224",
    "title": null,
    "body": "<p><em>In JavaScript closures are awesome, where variables or arguments are available to inner functions, and they will be alive even after the outer function has returned.</em></p>\n\n<pre><code>  function getFullName(a, b) {\n  return a + b;\n}\n\nfunction makeFullName(fn) {\n\n  return function(firstName) {\n\n    return function(secondName) {\n\n      return fn(firstName, secondName);\n    }\n  }\n}\n\nmakeFullName(getFullName)(\"stack\")(\"overflow\"); // Stackoverflow\n</code></pre>\n",
    "score": 26,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28442157,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/28442157",
    "title": null,
    "body": "<p>Maybe you should consider an object-oriented structure instead of inner functions. For example:</p>\n\n<pre><code>var calculate = {\n    number: 0,\n    init: function (num) {\n        this.number = num;\n    },\n    add: function (val) {\n        this.number += val;\n    },\n    rem: function (val) {\n        this.number -= val;\n    }\n};\n</code></pre>\n\n<p>And read the result from the calculate.number variable, who needs \"return\" anyway.</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28507451,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/28507451",
    "title": null,
    "body": "<p><strong>I do not understand why the answers are so complex here.</strong></p>\n\n<p>Here is a closure:</p>\n\n<pre><code>var a = 42;\n\nfunction b() { return a; }\n</code></pre>\n\n<p>Yes. You probably use that many times a day.</p>\n\n<p><br></p>\n\n<blockquote>\n  <p>There is no reason to believe closures are a complex design hack to address specific problems. No, closures are just about using a variable that comes from a higher scope <strong>from the perspective of where the function was declared (not run)</strong>.</p>\n  \n  <p>Now what it <em>allows</em> you to do can be more spectacular, see other answers.</p>\n</blockquote>\n",
    "score": 82,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28816564,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/28816564",
    "title": null,
    "body": "<p>Perhaps a little beyond all but the most precocious of six-year-olds, but a few examples that helped make the concept of closure in JavaScript click for me.</p>\n\n<p>A closure is a function that has access to another function's scope (its variables and functions). The easiest way to create a closure is with a function within a function; the reason being that in JavaScript a function always has access to its containing function’s scope.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function outerFunction() {\r\n    var outerVar = \"monkey\";\r\n    \r\n    function innerFunction() {\r\n        alert(outerVar);\r\n    }\r\n    \r\n    innerFunction();\r\n}\r\n\r\nouterFunction();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>ALERT: monkey</p>\n\n<p>In the above example, outerFunction is called which in turn calls innerFunction. Note how outerVar is available to innerFunction, evidenced by its correctly alerting the value of outerVar.</p>\n\n<p>Now consider the following:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function outerFunction() {\r\n    var outerVar = \"monkey\";\r\n    \r\n    function innerFunction() {\r\n        return outerVar;\r\n    }\r\n    \r\n    return innerFunction;\r\n}\r\n\r\nvar referenceToInnerFunction = outerFunction();\r\nalert(referenceToInnerFunction());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>ALERT: monkey</p>\n\n<p>referenceToInnerFunction is set to outerFunction(), which simply returns a reference to innerFunction. When referenceToInnerFunction is called, it returns outerVar. Again, as above, this demonstrates that innerFunction has access to outerVar, a variable of outerFunction. Furthermore, it is interesting to note that it retains this access even after outerFunction has finished executing.</p>\n\n<p>And here is where things get really interesting. If we were to get rid of outerFunction, say set it to null, you might think that referenceToInnerFunction would loose its access to the value of outerVar. But this is not the case. </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function outerFunction() {\r\n    var outerVar = \"monkey\";\r\n    \r\n    function innerFunction() {\r\n        return outerVar;\r\n    }\r\n    \r\n    return innerFunction;\r\n}\r\n\r\nvar referenceToInnerFunction = outerFunction();\r\nalert(referenceToInnerFunction());\r\n\r\nouterFunction = null;\r\nalert(referenceToInnerFunction());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>ALERT: monkey\nALERT: monkey</p>\n\n<p>But how is this so? How can referenceToInnerFunction still know the value of outerVar now that outerFunction has been set to null?</p>\n\n<p>The reason that referenceToInnerFunction can still access the value of outerVar is because when the closure was first created by placing innerFunction inside of outerFunction, innerFunction added a reference to outerFunction’s scope (its variables and functions) to its scope chain. What this means is that innerFunction has a pointer or reference to all of outerFunction’s variables, including outerVar. So even when outerFunction has finished executing, or even if it is deleted or set to null, the variables in its scope, like outerVar, stick around in memory because of the outstanding reference to them on the part of the innerFunction that has been returned to referenceToInnerFunction. To truly release outerVar and the rest of outerFunction’s variables from memory you would have to get rid of this outstanding reference to them, say by setting referenceToInnerFunction to null as well.</p>\n\n<p>//////////</p>\n\n<p>Two other things about closures to note. First, the closure will always have access to the last values of its containing function.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function outerFunction() {\r\n    var outerVar = \"monkey\";\r\n    \r\n    function innerFunction() {\r\n        alert(outerVar);\r\n    }\r\n    \r\n    outerVar = \"gorilla\";\r\n\r\n    innerFunction();\r\n}\r\n\r\nouterFunction();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>ALERT: gorilla</p>\n\n<p>Second, when a closure is created, it retains a reference to all of its enclosing function’s variables and functions; it doesn’t get to pick and choose. And but so, closures should be used sparingly, or at least carefully, as they can be memory intensive; a lot of variables can be kept in memory long after a containing function has finished executing.</p>\n",
    "score": 38,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 29525677,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/29525677",
    "title": null,
    "body": "<p>(I am not taking the 6-years-old thing into account.)</p>\n\n<p>In a language like JavaScript, where you can pass functions as parameters to other functions (languages where functions are <em>first class citizens</em>), you will often find yourself doing something like:</p>\n\n<pre><code>var name = 'Rafael';\n\nvar sayName = function() {\n  console.log(name);\n};\n</code></pre>\n\n<p>You see, <code>sayName</code> doesn't have the definition for the <code>name</code> variable, but it does use the value of <code>name</code> that was defined outside of <code>sayName</code> (in a parent scope).</p>\n\n<p>Let's say you pass <code>sayName</code> as a parameter to another function, that will call <code>sayName</code> as a callback:</p>\n\n<pre><code>functionThatTakesACallback(sayName);\n</code></pre>\n\n<p>Note that:</p>\n\n<ol>\n<li><code>sayName</code> will be called from inside <code>functionThatTakesACallback</code> (assume that, since I haven't implemented <code>functionThatTakesACallback</code> in this example).</li>\n<li>When <code>sayName</code> is called, it will log the value of the <code>name</code> variable.</li>\n<li><code>functionThatTakesACallback</code> doesn't define a <code>name</code> variable (well, it could, but it wouldn't matter, so assume it doesn't).</li>\n</ol>\n\n<p>So we have <code>sayName</code> being called inside <code>functionThatTakesACallback</code> and referring to a <code>name</code> variable that is not defined inside <code>functionThatTakesACallback</code>.</p>\n\n<p>What happens then? A <code>ReferenceError: name is not defined</code>?</p>\n\n<p>No! The value of <code>name</code> is captured inside a <strong>closure</strong>. You can think of this closure as <strong>context associated to a function</strong>, that holds the values that were available where that function was defined.</p>\n\n<p>So: Even though <code>name</code> is not in scope where the function <code>sayName</code> will be called (inside <code>functionThatTakesACallback</code>), <code>sayName</code> can access the value for <code>name</code> that is captured in the closure associated with <code>sayName</code>.</p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 29639524,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/29639524",
    "title": null,
    "body": "<p>Here's the most Zen answer I can give:</p>\n\n<p>What would you expect this code to do? Tell me in a comment before you run it. I'm curious!</p>\n\n<pre><code>function foo() {\n  var i = 1;\n  return function() {\n    console.log(i++);\n  }\n}\n\nvar bar = foo();\nbar();\nbar();\nbar();\n\nvar baz = foo();\nbaz();\nbaz();\nbaz();\n</code></pre>\n\n<p>Now open the console in your browser (<kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>I</kbd> or <kbd>F12</kbd>, hopefully) and paste the code in and hit <kbd>Enter</kbd>.</p>\n\n<p>If this code printed what you expect (JavaScript newbies - ignore the \"undefined\" at the end), then you already have <em>wordless understanding</em>.  <em>In words</em>, the variable <code>i</code> is part of the inner function <em>instance's</em> closure.</p>\n\n<p>I put it this way because, once I understood that this code is putting instances of <code>foo()</code>'s inner function in <code>bar</code> and <code>baz</code> and then calling them via those variables, nothing else surprised me.</p>\n\n<p>But if I'm wrong and the console output surprised you, let me know!</p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 29693176,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/29693176",
    "title": null,
    "body": "<p>I believe in shorter explanations, so see the below image.</p>\n\n<p><img src=\"https://i.stack.imgur.com/qbv6M.jpg\" alt=\"Enter image description here\"></p>\n\n<p><code>function f1()</code> ..>  Light Red Box</p>\n\n<p><code>function f2()</code> ..>  Red Small Box</p>\n\n<p>Here we have two functions, <code>f1()</code> and <code>f2()</code>. f2() is inner to f1().\nf1() has a variable, <code>var x = 10</code>.</p>\n\n<p>When invoking the function <code>f1()</code>, <code>f2()</code> can access the value of <code>var x = 10</code>.</p>\n\n<p>Here is the code:</p>\n\n<pre><code>function f1() {\n    var x=10;\n\n    function f2() {\n        console.log(x)\n    }\n\n    return f2\n\n}\nf1()\n</code></pre>\n\n<p><code>f1()</code> invoking here:</p>\n\n<p><img src=\"https://i.stack.imgur.com/zg4UT.jpg\" alt=\"Enter image description here\"></p>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 29932159,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/29932159",
    "title": null,
    "body": "<p>The easiest use case I can think of to explain <strong>JavaScript closures</strong> is the Module Pattern. In the Module Pattern you define a function and call it immediately afterwards in what is called an Immediately Invoked Function Expression (IIFE). <strong>Everything that you write inside that function has private scope because it's defined inside the closure</strong>, thus allowing you to \"simulate\" privacy in JavaScript. Like so:</p>\n\n<pre><code> var Closure = (function () {\n    // This is a closure\n    // Any methods, variables and properties you define here are \"private\"\n    // and can't be accessed from outside the function.\n\n    //This is a private variable\n    var foo = \"\";\n\n    //This is a private method\n    var method = function(){\n\n    }\n})();\n</code></pre>\n\n<p>If, on the other hand, you'd like to make one or multiple variables or methods visible outside  the closure, you can return them inside an object literal. Like so:</p>\n\n<pre><code>var Closure = (function () {\n  // This is a closure\n  // Any methods, variables and properties you define here are \"private\"\n  // and can't be accessed from outside the function.\n\n  //This is a private variable\n  var foo = \"\";\n\n  //This is a private method\n  var method = function(){\n\n  }\n\n  //The method will be accessible from outside the closure\n  return {\n    method: method\n  }\n\n})();\n\nClosure.method();\n</code></pre>\n\n<p>Hope it helps.\nRegards,</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 29932217,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/29932217",
    "title": null,
    "body": "<p><em>Also...</em>  Perhaps we should cut your 27-year-old friend a little <em>slack,</em> because the entire concept of \"closures\" really <strong>is(!)</strong> ... <em>voodoo!</em> </p>\n\n<p>By that I mean: <em>(a)</em> you do not, intuitively, expect it ...AND... <em>(b)</em> when someone takes the time to explain it to you, you certainly do not expect it to <em>work!</em></p>\n\n<p>Intuition tells you that \"this must be nonsense... <em>surely</em> it must result in some kind of syntax-error or something!\"  <em>How on earth(!)</em> could you, in effect, \"pull a function from 'the middle of' wherever-it's-at,\" such that you could [still!] actually have read/write access to the context of \"wherever-it-<em>was</em>-at?!\"</p>\n\n<p>When you finally realize that such a thing is <em>possible,</em> then ... sure ... anyone's <em>after-the-fact</em> reaction would be: \"whoa-a-a-a(!)... kew-el-l-l-l...(!!!)\"</p>\n\n<p>But there will be a \"big counter-intuitive hurdle\" to overcome, first.  Intuition gives you plenty of utterly-plausible expectations that such a thing would be \"of <em>course,</em> absolutely nonsensical and therefore quite impossible.\"</p>\n\n<p>Like I said: \"it's voodoo.\"</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 29945428,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/29945428",
    "title": null,
    "body": "<p>A closure is <strong><em>a function within a function</em></strong> that has access to its \"parent\" function's variables and parameters.</p>\n\n<p>Example:</p>\n\n<pre><code>function showPostCard(Sender, Receiver) {\n\n    var PostCardMessage = \" Happy Spring!!! Love, \";\n\n    function PreparePostCard() {\n        return \"Dear \" + Receiver + PostCardMessage + Sender;\n    }\n\n    return PreparePostCard();\n}\nshowPostCard(\"Granny\", \"Olivia\");\n</code></pre>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 30173047,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/30173047",
    "title": null,
    "body": "<blockquote>\n  <p>The children will always remember the secrets they have shared with their parents, even after their parents are\n  gone. This is what closures are for functions.</p>\n</blockquote>\n\n<p>The secrets for JavaScript functions are the private variables</p>\n\n<pre><code>var parent = function() {\n var name = \"Mary\"; // secret\n}\n</code></pre>\n\n<p>Every time you call it, local variable \"name\" is created and given name \"Mary\". And every time the function exits the variable is lost and the name is forgotten.</p>\n\n<p>As you may guess, because the variables are re-created every time the function is called, and nobody else will know them, there must be a secret place where they are stored. It could be called <strong>Chamber of Secrets</strong> or <strong>stack</strong> or <strong>local scope</strong> but it doesn't really matter. We know they are there, somewhere, hidden in the memory.</p>\n\n<p>But, in JavaScript there is this very special thing that functions which are created inside other functions, can also know the local variables of their parents and keep them as long as they live.</p>\n\n<pre><code>var parent = function() {\n  var name = \"Mary\";\n  var child = function(childName) {\n    // I can also see that \"name\" is \"Mary\"\n  }\n}\n</code></pre>\n\n<p>So, as long as we are in the parent -function, it can create one or more child functions which do share the secret variables from the secret place.</p>\n\n<p>But the sad thing is, if the child is also a private variable of its parent function, it would also die when the parent ends, and the secrets would die with them.</p>\n\n<p>So to live, the child has to leave before it's too late</p>\n\n<pre><code>var parent = function() {\n  var name = \"Mary\";\n  var child = function(childName) {\n    return \"My name is \" + childName  +\", child of \" + name; \n  }\n  return child; // child leaves the parent -&gt;\n}\nvar child = parent(); // &lt; - and here it is outside \n</code></pre>\n\n<p>And now, even though Mary is \"no longer running\", the memory of her is not lost and her child will always remember her name and other secrets they shared during their time together.</p>\n\n<p>So, if you call the child \"Alice\", she will respond</p>\n\n<pre><code>child(\"Alice\") =&gt; \"My name is Alice, child of Mary\"\n</code></pre>\n\n<p>That's all there is to tell.</p>\n",
    "score": 78,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 30519095,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/30519095",
    "title": null,
    "body": "<p>A closure is something many JavaScript developers use all the time, but we take it for granted. How it works is not that complicated. Understanding how to use it purposefully <em>is</em> complex.</p>\n\n<p>At its simplest definition (as other answers have pointed out), a closure is basically a function defined inside another function. And that inner function has access to variables defined in the scope of the outer function. The most common practice that you'll see using closures is defining variables and functions in the global scope, and having access to those variables in the function scope of that function.</p>\n\n<pre><code>var x = 1;\nfunction myFN() {\n  alert(x); //1, as opposed to undefined.\n}\n// Or\nfunction a() {\n   var x = 1;\n   function b() {\n       alert(x); //1, as opposed to undefined.\n   }\n   b();\n}\n</code></pre>\n\n<p>So what?</p>\n\n<p>A closure isn't that special to a JavaScript user until you think about what life would be like without them. In other languages, variables used in a function get cleaned up when that function returns. In the above, x would have been a \"null pointer\", and you'd need to establish a getter and setter and start passing references. Doesn't sound like JavaScript right? Thank the mighty closure.</p>\n\n<p>Why should I care?</p>\n\n<p>You don't really have to be aware of closures to use them. But as others have also pointed out, they can be <strong>leveraged</strong> to create faux private variables. Until you get to needing private variables, just use them like you always have.</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31374952,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/31374952",
    "title": null,
    "body": "<p>I like Kyle Simpson's definition of a closure:  </p>\n\n<blockquote>\n  <p>Closure is when a function is able to remember and access its lexical\n  scope even when that function is executing outside its lexical scope.</p>\n</blockquote>\n\n<p>Lexical scope is when an inner scope can access its outer scope.</p>\n\n<p>Here is a modified example he provides in his book series 'You Don't Know JS: Scopes &amp; Closures'. </p>\n\n<pre><code>function foo() {\n  var a = 2;\n\n  function bar() {\n    console.log( a );\n  }\n  return bar;\n}\n\nfunction test() {\n  var bz = foo();\n  bz();\n}\n\n// prints 2. Here function bar referred by var bz is outside \n// its lexical scope but it can still access it\ntest(); \n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31608312,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/31608312",
    "title": null,
    "body": "<p>The following example is a simple illustration of a JavaScript closure.\nThis is the closure function, which returns a function, with access to its local variable x,</p>\n\n<pre><code>function outer(x){\n     return function inner(y){\n         return x+y;\n     }\n}\n</code></pre>\n\n<p>Invoke the function like this:</p>\n\n<pre><code>var add10 = outer(10);\nadd10(20); // The result will be 30\nadd10(40); // The result will be 50\n\nvar add20 = outer(20);\nadd20(20); // The result will be 40\nadd20(40); // The result will be 60\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 32025281,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/32025281",
    "title": null,
    "body": "<p>The author of <em><a href=\"http://javascript.info/tutorial/closures\" rel=\"nofollow noreferrer\">Closures</a></em> has explained closures pretty well, explaining the reason why we need them and also explaining LexicalEnvironment which is necessary to understanding closures. <br/>\nHere is the summary:</p>\n\n<p>What if a variable is accessed, but it isn’t local? Like here:</p>\n\n<p><a href=\"https://i.stack.imgur.com/SLlVB.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/SLlVB.png\" alt=\"Enter image description here\"></a></p>\n\n<p>In this case, the interpreter finds the variable in the\nouter <a href=\"http://javascript.info/tutorial/initialization\" rel=\"nofollow noreferrer\"><code>LexicalEnvironment</code></a> object.</p>\n\n<p>The process consists of two steps:</p>\n\n<ol>\n<li>First, when a function f is created, it is not created in an empty\nspace. There is a current LexicalEnvironment object. In the case\nabove, it’s window (a is undefined at the time of function\ncreation).</li>\n</ol>\n\n<p><a href=\"https://i.stack.imgur.com/0KBin.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/0KBin.png\" alt=\"Enter image description here\"></a></p>\n\n<p>When a function is created, it gets a hidden property, named [[Scope]], which references the current LexicalEnvironment.</p>\n\n<p><a href=\"https://i.stack.imgur.com/U3yt7.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/U3yt7.png\" alt=\"Enter image description here\"></a></p>\n\n<p>If a variable is read, but can not be found anywhere, an error is generated.</p>\n\n<p><strong>Nested functions</strong></p>\n\n<p>Functions can be nested one inside another, forming a chain of LexicalEnvironments which can also be called a scope chain.</p>\n\n<p><a href=\"https://i.stack.imgur.com/2hUwr.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/2hUwr.png\" alt=\"Enter image description here\"></a></p>\n\n<p>So, function g has access to g, a and f.</p>\n\n<p><strong>Closures</strong></p>\n\n<p>A nested function may continue to live after the outer function has finished:</p>\n\n<p><a href=\"https://i.stack.imgur.com/S1mlB.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/S1mlB.png\" alt=\"Enter image description here\"></a></p>\n\n<p>Marking up LexicalEnvironments:</p>\n\n<p><a href=\"https://i.stack.imgur.com/BzUNi.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/BzUNi.png\" alt=\"Enter image description here\"></a></p>\n\n<p>As we see, <code>this.say</code> is a property in the user object, so it continues to live after User completed.</p>\n\n<p>And if you remember, when <code>this.say</code> is created, it (as every function) gets an internal reference <code>this.say.[[Scope]]</code> to the current LexicalEnvironment. So, the LexicalEnvironment of the current User execution stays in memory. All variables of User also are its properties, so they are also carefully kept, not junked as usually.</p>\n\n<p><strong>The whole point is to ensure that if the inner function wants to access an outer variable in the future, it is able to do so.</strong></p>\n\n<p>To summarize:</p>\n\n<ol>\n<li>The inner function keeps a reference to the outer\nLexicalEnvironment.</li>\n<li>The inner function may access variables from it\nany time even if the outer function is finished.</li>\n<li>The browser keeps the LexicalEnvironment and all its properties (variables) in memory until there is an inner function which references it.</li>\n</ol>\n\n<p>This is called a closure.</p>\n\n<p>(You may also want to read <a href=\"https://stackoverflow.com/questions/2728278/what-is-a-practical-use-for-a-closure-in-javascript\">What is a practical use for a closure in JavaScript?</a>)</p>\n",
    "score": 47,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 32348248,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/32348248",
    "title": null,
    "body": "<p>Meet the <strong>illustrated explanation</strong>: <em><a href=\"http://dmitryfrank.com/articles/js_closures\">How do JavaScript closures work behind the scenes</a></em>.</p>\n\n<p>The article explains how the scope objects (or <code>LexicalEnvironment</code>s) are allocated and used in an intuitive way. Like, for this simple script:</p>\n\n<pre><code>\"use strict\";\n\nvar foo = 1;\nvar bar = 2;\n\nfunction myFunc() {\n  //-- Define local-to-function variables\n  var a = 1;\n  var b = 2;\n  var foo = 3;\n}\n\n//-- And then, call it:\nmyFunc();\n</code></pre>\n\n<p>When executing the top-level code, we have the following arrangement of scope objects:</p>\n\n<p><a href=\"https://i.stack.imgur.com/bwjyg.png\"><img src=\"https://i.stack.imgur.com/bwjyg.png\" alt=\"Enter image description here\"></a></p>\n\n<p>And when <code>myFunc()</code> is called, we have the following scope chain:</p>\n\n<p><a href=\"https://i.stack.imgur.com/zRu5Z.png\"><img src=\"https://i.stack.imgur.com/zRu5Z.png\" alt=\"Enter image description here\"></a></p>\n\n<p>Understanding of how scope objects are created, used and deleted is a key to having a big picture and to understand how do closures work under the hood.</p>\n\n<p>See the aforementioned article for all the details.</p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33072285,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/33072285",
    "title": null,
    "body": "<p>The best way is to explain these concepts incrementally:</p>\n\n<p><strong>Variables</strong></p>\n\n<pre><code>console.log(x);\n// undefined\n</code></pre>\n\n<p>Here, <code>undefined</code> is JavaScript's way of saying \"I have no idea what <code>x</code> means.\"</p>\n\n<blockquote>\n  <p>Variables are like tags.</p>\n</blockquote>\n\n<p>You can say, tag <code>x</code> points to value <code>42</code>:</p>\n\n<pre><code>var x = 42;\nconsole.log(x);\n// 42\n</code></pre>\n\n<p>Now JavaScript knows what <code>x</code> means.</p>\n\n<blockquote>\n  <p>You can also re-assign a variable.</p>\n</blockquote>\n\n<p>Make tag <code>x</code> point to a different value:</p>\n\n<pre><code>x = 43;\nconsole.log(x);\n// 43\n</code></pre>\n\n<p>Now <code>x</code> means something else.</p>\n\n<p><strong>Scope</strong></p>\n\n<blockquote>\n  <p>When you make a function, the function has its own \"box\" for variables.</p>\n</blockquote>\n\n<pre><code>function A() {\n  var x = 42;\n}\n\nconsole.log(x);\n\n// undefined\n</code></pre>\n\n<p>From outside the box, you cannot see what's inside the box.</p>\n\n<p>But from inside the box, you can see what's outside that box:</p>\n\n<pre><code>var x = 42;\n\nfunction A() {\n  console.log(x);\n}\n\n// 42\n</code></pre>\n\n<blockquote>\n  <p>Inside function <code>A</code>, you have \"scope access\" to <code>x</code>.</p>\n</blockquote>\n\n<p>Now if you have two boxes side-by-side:</p>\n\n<pre><code>function A() {\n  var x = 42;\n}\n\nfunction B() {\n  console.log(x);\n}\n\n// undefined\n</code></pre>\n\n<blockquote>\n  <p>Inside function <code>B</code>, you have no access to variables inside function <code>A</code>.</p>\n</blockquote>\n\n<p>But if you put define function <code>B</code> inside function <code>A</code>:</p>\n\n<pre><code>function A() {\n\n  var x = 42;\n\n  function B() {\n    console.log(x);\n  }\n\n}\n\n// 42\n</code></pre>\n\n<p>You now have \"scope access\".</p>\n\n<p><strong>Functions</strong></p>\n\n<p>In JavaScript, you run a function by calling it:</p>\n\n<pre><code>function A() {\n  console.log(42);\n}\n</code></pre>\n\n<p>Like this:</p>\n\n<pre><code>A();\n\n// 42\n</code></pre>\n\n<p><strong>Functions as Values</strong></p>\n\n<p>In JavaScript, you can point a tag to a function, just like pointing to a number:</p>\n\n<pre><code>var a = function() {\n  console.log(42);\n};\n</code></pre>\n\n<blockquote>\n  <p>Variable <code>a</code> now means a function, you can run it.</p>\n</blockquote>\n\n<pre><code>a();\n// 42\n</code></pre>\n\n<p>You can also pass this variable around:</p>\n\n<pre><code>setTimeout(a, 1000);\n</code></pre>\n\n<p>In a second (1000 milliseconds), the function <code>a</code> points to is called:</p>\n\n<pre><code>// 42\n</code></pre>\n\n<p><strong>Closure Scope</strong></p>\n\n<p>Now when you define functions, those functions have access to their outer scopes.</p>\n\n<p>When you pass functions around as values, it would be troublesome if that access is lost.</p>\n\n<blockquote>\n  <p>In JavaScript, functions keep their access to outer scope variables.\n  Even when they are passed around to be run somewhere else.</p>\n</blockquote>\n\n<pre><code>var a = function() {\n\n  var text = 'Hello!'\n\n  var b = function() {\n    console.log(text);\n    // inside function `b`, you have access to `text`\n  };\n\n  // but you want to run `b` later, rather than right away\n  setTimeout(b, 1000);\n\n}\n</code></pre>\n\n<p>What happens now?</p>\n\n<pre><code>// 'Hello!'\n</code></pre>\n\n<p>Or consider this:</p>\n\n<pre><code>var c;\n\nvar a = function() {\n\n  var text = 'Hello!'\n\n  var b = function() {\n    console.log(text);\n    // inside function `b`, you have access to `text`\n  };\n\n  c = b;\n\n}\n\n// now we are out side of function `a`\n// call `a` so the code inside `a` runs\na(); \n\n// now `c` has a value that is a function\n// because what happened when `a` ran\n\n// when you run `c`\nc();\n\n// 'Hello!'\n</code></pre>\n\n<blockquote>\n  <p>You can still access variables in the closure scope.</p>\n</blockquote>\n\n<p>Even though <code>a</code> has finished running, and now you are running <code>c</code> outside of <code>a</code>.</p>\n\n<p>What just happened here is called '<strong><em>closure</em></strong>' in JavaScript.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33279345,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/33279345",
    "title": null,
    "body": "<p><strong>Pinocchio: Closures in 1883 (over a century before JavaScript)</strong></p>\n\n<p>I think it can best be explained to a 6-year-old with a nice adventure... The part of the <a href=\"https://en.wikipedia.org/wiki/The_Adventures_of_Pinocchio\" rel=\"noreferrer\">Adventures of Pinocchio</a> where Pinocchio is being swallowed by an oversized dogfish...</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var tellStoryOfPinocchio = function(original) {\r\n\r\n  // Prepare for exciting things to happen\r\n  var pinocchioFindsMisterGeppetto;\r\n  var happyEnding;\r\n\r\n  // The story starts where Pinocchio searches for his 'father'\r\n  var pinocchio = {\r\n    name: 'Pinocchio',\r\n    location: 'in the sea',\r\n    noseLength: 2\r\n  };\r\n\r\n  // Is it a dog... is it a fish...\r\n  // The dogfish appears, however there is no such concept as the belly\r\n  // of the monster, there is just a monster...\r\n  var terribleDogfish = {\r\n    swallowWhole: function(snack) {\r\n      // The swallowing of Pinocchio introduces a new environment (for the\r\n      // things happening inside it)...\r\n      // The BELLY closure... with all of its guts and attributes\r\n      var mysteriousLightLocation = 'at Gepetto\\'s ship';\r\n\r\n      // Yes: in my version of the story the monsters mouth is directly\r\n      // connected to its belly... This might explain the low ratings\r\n      // I had for biology...\r\n      var mouthLocation = 'in the monsters mouth and then outside';\r\n\r\n      var puppet = snack;\r\n\r\n\r\n      puppet.location = 'inside the belly';\r\n      alert(snack.name + ' is swallowed by the terrible dogfish...');\r\n\r\n      // Being inside the belly, Pinocchio can now experience new adventures inside it\r\n      pinocchioFindsMisterGeppetto = function() {\r\n        // The event of Pinocchio finding Mister Geppetto happens inside the\r\n        // belly and so it makes sence that it refers to the things inside\r\n        // the belly (closure) like the mysterious light and of course the\r\n        // hero Pinocchio himself!\r\n        alert(puppet.name + ' sees a mysterious light (also in the belly of the dogfish) in the distance and swims to it to find Mister Geppetto! He survived on ship supplies for two years after being swallowed himself. ');\r\n        puppet.location = mysteriousLightLocation;\r\n\r\n        alert(puppet.name + ' tells Mister Geppetto he missed him every single day! ');\r\n        puppet.noseLength++;\r\n      }\r\n\r\n      happyEnding = function() {\r\n        // The escape of Pinocchio and Mister Geppetto happens inside the belly:\r\n        // it refers to Pinocchio and the mouth of the beast.\r\n        alert('After finding Mister Gepetto, ' + puppet.name + ' and Mister Gepetto travel to the mouth of the monster.');\r\n        alert('The monster sleeps with its mouth open above the surface of the water. They escape through its mouth. ');\r\n        puppet.location = mouthLocation;\r\n        if (original) {\r\n          alert(puppet.name + ' is eventually hanged for his innumerable faults. ');\r\n        } else {\r\n          alert(puppet.name + ' is eventually turned into a real boy and they all lived happily ever after...');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  alert('Once upon a time...');\r\n  alert('Fast forward to the moment that Pinocchio is searching for his \\'father\\'...');\r\n  alert('Pinocchio is ' + pinocchio.location + '.');\r\n  terribleDogfish.swallowWhole(pinocchio);\r\n  alert('Pinocchio is ' + pinocchio.location + '.');\r\n  pinocchioFindsMisterGeppetto();\r\n  alert('Pinocchio is ' + pinocchio.location + '.');\r\n  happyEnding();\r\n  alert('Pinocchio is ' + pinocchio.location + '.');\r\n\r\n  if (pinocchio.noseLength &gt; 2)\r\n    console.log('Hmmm... apparently a little white lie was told. ');\r\n}\r\n\r\ntellStoryOfPinocchio(false);\r\n\r\n </code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33525748,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/33525748",
    "title": null,
    "body": "<h1>Closures are simple</h1>\n\n<p>You probably shouldn't tell a six-year old about closures, but if you do, you might say that closure gives an ability to gain access to a variable declared in some other function scope.</p>\n\n<p><a href=\"https://i.stack.imgur.com/OX92v.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/OX92v.png\" alt=\"enter image description here\"></a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function getA() {\r\n  var a = [];\r\n\r\n  // this action happens later,\r\n  // after the function returned\r\n  // the `a` value\r\n  setTimeout(function() {\r\n    a.splice(0, 0, 1, 2, 3, 4, 5);\r\n  });\r\n\r\n  return a;\r\n}\r\n\r\nvar a = getA();\r\nout('What is `a` length?');\r\nout('`a` length is ' + a.length);\r\n\r\nsetTimeout(function() {\r\n  out('No wait...');\r\n  out('`a` length is ' + a.length);\r\n  out('OK :|')\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;pre id=\"output\"&gt;&lt;/pre&gt;\r\n\r\n&lt;script&gt;\r\n  function out(k) {\r\n    document.getElementById('output').innerHTML += '&gt; ' + k + '\\n';\r\n  }\r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33531512,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/33531512",
    "title": null,
    "body": "<p>A closure is a function that has access to information from the environment it was defined in.</p>\n\n<p>For some, the information is the <em>value</em> in the environment at the time of creation.  For others, the information is the variables in the environment at the time of creation.</p>\n\n<p>If the lexical environment that the closure refers to belongs to a function that has exited, then (in the case of a closure referring to the variables in the environment) those lexical variables will continue to exist for reference by the closure.</p>\n\n<p>A closure can be thought of a special case of global variables -- with a private copy created just for the function.</p>\n\n<p>Or it can be thought of as a method where the environment is a specific instance of an object whose properties are the variables in the environment.</p>\n\n<p>The former (closure as environment) similar to the latter where the environment copy is a context variable passed to each function in the former, and the instance variables form a context variable in the latter.</p>\n\n<p>So a closure is a way to call a function without having to specify the context explicitly as a parameter or as the object in a method invocation.</p>\n\n<pre><code>var closure = createclosure(varForClosure);\nclosure(param1);  // closure has access to whatever createclosure gave it access to,\n                  // including the parameter storing varForClosure.\n</code></pre>\n\n<p>vs</p>\n\n<pre><code>var contextvar = varForClosure; // use a struct for storing more than one..\ncontextclosure(contextvar, param1);\n</code></pre>\n\n<p>vs</p>\n\n<pre><code>var contextobj = new contextclass(varForClosure);\ncontextobj-&gt;objclosure(param1);\n</code></pre>\n\n<p>For maintainable code, I recommend the object oriented way.  However for a quick and easy set of tasks (for example creating a callback), a closure can become natural and more clear, especially in the context of lamda or anonymous functions.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33544287,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/33544287",
    "title": null,
    "body": "<blockquote>\n  <p>A closure is a function having access to the parent scope, even after the parent function has closed.</p>\n</blockquote>\n\n<pre><code>var add = (function() {\n  var counter = 0;\n  return function() {\n    return counter += 1;\n  }\n})();\n\nadd();\nadd();\nadd();\n// The counter is now 3\n</code></pre>\n\n<p>Example explained:</p>\n\n<ul>\n<li>The variable <code>add</code> is assigned the return value of a self-invoking function.</li>\n<li>The self-invoking function only runs once. It sets the counter to zero (0), and returns a function expression.</li>\n<li>This way add becomes a function. The \"wonderful\" part is that it can access the counter in the parent scope.</li>\n<li>This is called a JavaScript closure. It makes it possible for a function to have \"private\" variables.</li>\n<li>The counter is protected by the scope of the anonymous function, and can only be changed using the add function.</li>\n</ul>\n\n<p><a href=\"http://www.w3schools.com/js/js_function_closures.asp\" rel=\"noreferrer\">Source</a></p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33570436,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/33570436",
    "title": null,
    "body": "<p>For a six-year-old ...</p>\n\n<p>Do you know what objects are?</p>\n\n<p>Objects are things that have properties and do stuff.</p>\n\n<p>One of the most important things about closures is that they let you make objects in JavaScript. Objects in JavaScript are just functions and closures that lets JavaScript store the value of the property for the object once it has been created.</p>\n\n<p>Objects are very useful and keep everything nice and organised. Different objects can do different jobs and working together objects can do complicated things.</p>\n\n<p>It's lucky that JavaScript has closures for making objects, otherwise everything would become a messy nightmare.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33611878,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/33611878",
    "title": null,
    "body": "<p>Whatever facility we use to transport an inner function outside of its lexical scope, it will maintain a scope reference to where it was originally declared, and wherever we execute it, that closure will be exercised.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33904070,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/33904070",
    "title": null,
    "body": "<p>There once was a caveman </p>\n\n<pre><code>function caveman {\n</code></pre>\n\n<p>who had a very special rock,</p>\n\n<pre><code>var rock = \"diamond\";\n</code></pre>\n\n<p>You could not get the rock yourself because it was in the caveman's private cave. Only the caveman knew how to find and get the rock.</p>\n\n<pre><code>return {\n    getRock: function() {\n        return rock;\n    }\n};\n}\n</code></pre>\n\n<p>Luckily, he was a friendly caveman, and if you were willing to wait for his return, he would gladly get it for you.</p>\n\n<pre><code>var friend = caveman();\nvar rock = friend.getRock();\n</code></pre>\n\n<p>Pretty smart caveman.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33961224,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/33961224",
    "title": null,
    "body": "<p>Closure can be private and public variables or functions.</p>\n\n<pre><code>var ClusureDemo = function() {\n    //privare variables\n    var localVa1, localVa2;\n\n    //private functions\n    var setVaOne = function(newVa) {\n        localVa1 = newVa;\n    },\n    setVaTwo = function(newVa) {\n        localVa2 = newVa;\n    },\n    getVaOne = function() {\n        return localVa1;\n    },\n    getVaTwo = function() {\n        return localVa2;\n    };\n\n    return {\n        //public variables and functions\n        outVaOne : localVa1,\n        outVaTwo : localVa2,\n        setVaOne : setVaOne,\n        setVaTwo : setVaTwo,\n        getVaOne : getVaOne,\n        getVaTwo : getVaTwo\n    };\n};\n\n//Test Demo\nvar app = new ClusureDemo();\napp.outVaOne = 'Hello Variable One';\napp.outVaTwo = 'Hello Variable Two';\napp.setVaOne(app.outVaOne);\napp.setVaTwo(app.outVaTwo);\n\nalert(app.getVaOne());\nalert(app.getVaTwo());\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/paoim/8o2ejzdq/\" rel=\"nofollow\">Demo</a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 34531380,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/34531380",
    "title": null,
    "body": "<p>To understand closures you have to get down to the program and literally execute as if you are the run time. Let's look at this simple piece of code:</p>\n\n<p><a href=\"https://i.stack.imgur.com/kWR82.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/kWR82.png\" alt=\"Enter image description here\"></a></p>\n\n<p>JavaScript runs the code in two phases:</p>\n\n<ul>\n<li>Compilation Phase    // JavaScript is not a pure interpreted language</li>\n<li>Execution Phase</li>\n</ul>\n\n<p>When JavaScript goes through the compilation phase it extract out the declarations of variables and functions. This is called hoisting. Functions encountered in this phase are saved as text blobs in memory also known as lambda. After compilation JavaScript enters the execution phase where it assigns all the values and runs the function. To run the function it prepares the execution context by assigning memory from the heap and repeating the compilation and execution phase for the function. This memory area is called scope of the function. There is a global scope when execution starts. Scopes are the key in understanding closures.</p>\n\n<p>In this example, in first go, variable <code>a</code> is defined and then <code>f</code> is defined in the compilation phase. All undeclared variables are saved in the global scope. In the execution phase <code>f</code> is called with an argument. <code>f</code>'s scope is assigned and the compilation and execution phase is repeated for it.</p>\n\n<p>Arguments are also saved in this local scope for <code>f</code>. Whenever a local execution context or scope is created it contain a reference pointer to its parent scope. All variable access follows this lexical scope chain to find its value. If a variable is not found in the local scope it follows the chain and find it in its parent scope. This is also why a local variable overrides variables in the parent scope. The parent scope is called the \"Closure\" for local a scope or function.</p>\n\n<p>Here when <code>g</code>'s scope is being set up it got a lexical pointer to its parents scope of <code>f</code>. The scope of <code>f</code> is the closure for <code>g</code>. In JavaScript, if there is some reference to functions, objects or scopes if you can reach them somehow, it will not get garbage collected. So when myG is running, it has a pointer to scope of <code>f</code> which is its closure. This area of memory will not get garbage collected even <code>f</code> has returned. This is a closure as far as the runtime is concerned.</p>\n\n<h2>SO WHAT IS A CLOSURE?</h2>\n\n<ul>\n<li>It is an implicit, permanent link between a function and its scope chain...</li>\n<li>A function definition's (lambda) hidden <code>[[scope]]</code> reference.</li>\n<li>Holds the scope chain (preventing garbage collection).</li>\n<li>It is used and copied as the \"outer environment reference\" anytime the function is run.</li>\n</ul>\n\n<h2>IMPLICIT CLOSURE</h2>\n\n<pre><code>var data = \"My Data!\";\nsetTimeout(function() {\n  console.log(data); // Prints \"My Data!\"\n}, 3000);\n</code></pre>\n\n<h2>EXPLICIT CLOSURES</h2>\n\n<pre><code>function makeAdder(n) {\n  var inc = n;\n  var sum = 0;\n  return function add() {\n    sum = sum + inc;\n    return sum;\n  };\n}\n\nvar adder3 = makeAdder(3);\n</code></pre>\n\n<p>A very interesting talk on closures and more is <em><a href=\"https://www.youtube.com/watch?v=QyUFheng6J0\" rel=\"noreferrer\">Arindam Paul - JavaScript VM internals, EventLoop, Async and ScopeChains</a></em>.</p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 34831990,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/34831990",
    "title": null,
    "body": "<p>This is how a beginner wrapped one's head around Closures like a function is wrapped inside of a functions body also known as <strong>Closures</strong>.</p>\n\n<p>Definition from the book Speaking JavaScript \"A closure is a function plus the connection to the scope in which the function was created\" -<em>Dr.Axel Rauschmayer</em></p>\n\n<p>So what could that look like? Here is an example</p>\n\n<pre><code>function newCounter() {\n  var counter = 0;\n   return function increment() {\n    counter += 1;\n   }\n}\n\nvar counter1 = newCounter();\nvar counter2 = newCounter();\n\ncounter1(); // Number of events: 1\ncounter1(); // Number of events: 2\ncounter2(); // Number of events: 1\ncounter1(); // Number of events: 3\n</code></pre>\n\n<p><em>newCounter</em> closes over <em>increment</em>, <em>counter</em> can be referenced to and accessed by <em>increment</em>.</p>\n\n<p><em>counter1</em> and <em>counter2</em> will keep track of their own value.</p>\n\n<p>Simple but hopefully a clear perspective of what a closure is around all these great and advanced answers.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 35250157,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/35250157",
    "title": null,
    "body": "<h2>Functions containing no free variables are called pure functions.</h2>\n\n<h2>Functions containing one or more free variables are called closures.</h2>\n\n<pre><code>var pure = function pure(x){\n  return x \n  // only own environment is used\n}\n\nvar foo = \"bar\"\n\nvar closure = function closure(){\n  return foo\n  // foo is free variable from the outer environment\n}\n</code></pre>\n\n<p><sup>src: <a href=\"https://leanpub.com/javascriptallongesix/read#leanpub-auto-if-functions-without-free-variables-are-pure-are-closures-impure\">https://leanpub.com/javascriptallongesix/read#leanpub-auto-if-functions-without-free-variables-are-pure-are-closures-impure</a></sup></p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 36017683,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/36017683",
    "title": null,
    "body": "<p>MDN explains it best I think:</p>\n\n<blockquote>\n  <p>Closures are functions that refer to independent (free) variables. In other words, the function defined in the closure 'remembers' the environment in which it was created.</p>\n</blockquote>\n\n<p>A closure always has an outer function and an inner function. The inner function is where all the work happens, and the outer function is just the environment that preserves the scope where the inner function was created. In this way, the inner function of a closure 'remembers' the environment/scope in which it was created. The most classic example is a counter function:</p>\n\n<pre><code>var closure = function() {\n  var count = 0;\n  return function() {\n    count++;\n    console.log(count);\n  };\n};\n\nvar counter = closure();\n\ncounter() // returns 1\ncounter() // returns 2\ncounter() // returns 3\n</code></pre>\n\n<p>In the above code, <code>count</code> is preserved by the outer function (environment function), so that every time you call <code>counter()</code>, the inner function (work function) can increment it.</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 36424854,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/36424854",
    "title": null,
    "body": "<p>Closures allow JavaScript programmers to write better code. Creative, expressive, and concise. We frequently use closures in JavaScript, and, no matter our JavaScript experience, we undoubtedly encounter them time and again. Closures might appear complex but hopefully, after you read this, closures will be much more easily understood and thus more appealing for your everyday JavaScript programming tasks.</p>\n\n<p>You should be familiar with <a href=\"http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/\"><strong><em>JavaScript variable scope</em></strong></a> before you read further because to understand closures you must understand JavaScript’s variable scope.</p>\n\n<h2>What is a closure?</h2>\n\n<p>A closure is an inner function that has access to the outer (enclosing) function’s variables—scope chain. The closure has three scope chains: it has access to its own scope (variables defined between its curly brackets), it has access to the outer function’s variables, and it has access to the global variables.</p>\n\n<p>The inner function has access not only to the outer function’s variables, but also to the outer function’s parameters. Note that the inner function cannot call the outer function’s arguments object, however, even though it can call the outer function’s parameters directly.</p>\n\n<p>You create a closure by adding a function inside another function.</p>\n\n<p><strong>A Basic Example of Closures in JavaScript:</strong> </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function showName (firstName, lastName) { \r\n  var nameIntro = \"Your name is \";\r\n  // this inner function has access to the outer function's variables, including the parameter\r\n  ​function makeFullName () {             \r\n​    return nameIntro + firstName + \" \" + lastName;         \r\n  }\r\n​\r\n​  return makeFullName (); \r\n} \r\n​\r\nshowName (\"Michael\", \"Jackson\"); // Your name is Michael Jackson </code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Closures are used extensively in Node.js; they are workhorses in Node.js’ asynchronous, non-blocking architecture. Closures are also frequently used in jQuery and just about every piece of JavaScript code you read.</p>\n\n<p><strong>A Classic jQuery Example of Closures:</strong> </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(function() {\r\n​\r\n​  var selections = []; \r\n  $(\".niners\").click(function() { // this closure has access to the selections variable​\r\n    selections.push (this.prop(\"name\")); // update the selections variable in the outer function's scope​\r\n  });\r\n​});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h2>Closures’ Rules and Side Effects</h2>\n\n<p><strong>1. Closures have access to the outer function’s variable even after the outer function returns:</strong></p>\n\n<p>One of the most important and ticklish features with closures is that the inner function still has access to the outer function’s variables even after the outer function has returned. Yep, you read that correctly. When functions in JavaScript execute, they use the same scope chain that was in effect when they were created. This means that even after the outer function has returned, the inner function still has access to the outer function’s variables. Therefore, you can call the inner function later in your program. This example demonstrates:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function celebrityName (firstName) {\r\n    var nameIntro = \"This celebrity is \";\r\n    // this inner function has access to the outer function's variables, including the parameter​\r\n   function lastName (theLastName) {\r\n        return nameIntro + firstName + \" \" + theLastName;\r\n    }\r\n    return lastName;\r\n}\r\n​\r\n​var mjName = celebrityName (\"Michael\"); // At this juncture, the celebrityName outer function has returned.​\r\n​\r\n​// The closure (lastName) is called here after the outer function has returned above​\r\n​// Yet, the closure still has access to the outer function's variables and parameter​\r\nmjName (\"Jackson\"); // This celebrity is Michael Jackson </code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>2. Closures store references to the outer function’s variables:</strong></p>\n\n<p>They do not store the actual value.  Closures get more interesting when the value of the outer function’s variable changes before the closure is called. And this powerful feature can be harnessed in creative ways, such as this private variables example first demonstrated by Douglas Crockford: </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function celebrityID () {\r\n    var celebrityID = 999;\r\n    // We are returning an object with some inner functions​\r\n    // All the inner functions have access to the outer function's variables​\r\n    return {\r\n        getID: function ()  {\r\n            // This inner function will return the UPDATED celebrityID variable​\r\n            // It will return the current value of celebrityID, even after the changeTheID function changes it​\r\n          return celebrityID;\r\n        },\r\n        setID: function (theNewID)  {\r\n            // This inner function will change the outer function's variable anytime​\r\n            celebrityID = theNewID;\r\n        }\r\n    }\r\n​\r\n}\r\n​\r\n​var mjID = celebrityID (); // At this juncture, the celebrityID outer function has returned.​\r\nmjID.getID(); // 999​\r\nmjID.setID(567); // Changes the outer function's variable​\r\nmjID.getID(); // 567: It returns the updated celebrityId variable </code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>3. Closures Gone Awry</strong></p>\n\n<p>Because closures have access to the updated values of the outer function’s variables, they can also lead to bugs when the outer function’s variable changes with a for loop. Thus:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// This example is explained in detail below (just after this code box).​\r\n​function celebrityIDCreator (theCelebrities) {\r\n    var i;\r\n    var uniqueID = 100;\r\n    for (i = 0; i &lt; theCelebrities.length; i++) {\r\n      theCelebrities[i][\"id\"] = function ()  {\r\n        return uniqueID + i;\r\n      }\r\n    }\r\n    \r\n    return theCelebrities;\r\n}\r\n​\r\n​var actionCelebs = [{name:\"Stallone\", id:0}, {name:\"Cruise\", id:0}, {name:\"Willis\", id:0}];\r\n​\r\n​var createIdForActionCelebs = celebrityIDCreator (actionCelebs);\r\n​\r\n​var stalloneID = createIdForActionCelebs [0];      console.log(stalloneID.id()); // 103</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<hr>\n\n<h2>More can be found here-</h2>\n\n<ol>\n<li><p><a href=\"http://javascript.info/tutorial/closures\">http://javascript.info/tutorial/closures</a></p></li>\n<li><p><a href=\"http://www.javascriptkit.com/javatutors/closures.shtml\">http://www.javascriptkit.com/javatutors/closures.shtml</a></p></li>\n</ol>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 38686313,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/38686313",
    "title": null,
    "body": "<p>Version picture for this answer: <strong>[Resolved]</strong></p>\n\n<p>Just forget about scope every thing and remember: When a variable needed somewhere, javascript will not destroy it. The variable always point to newest value.</p>\n\n<p><strong>Example 1:</strong></p>\n\n<p><a href=\"https://i.stack.imgur.com/ckxN9.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/ckxN9.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>Example 2:</strong></p>\n\n<p><a href=\"https://i.stack.imgur.com/dAmCA.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/dAmCA.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>Example 3:</strong>\n<a href=\"https://i.stack.imgur.com/HRXgp.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/HRXgp.png\" alt=\"enter image description here\"></a></p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 39012806,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/39012806",
    "title": null,
    "body": "<p>Closure are not difficult to understand. It depends only from the point of view.</p>\n\n<p>I personally like to use them in cases of daily life.</p>\n\n<pre><code>function createCar()\n{\n    var rawMaterial = [/* lots of object */];\n    function transformation(rawMaterials)\n    {\n       /* lots of changement here */\n       return transformedMaterial;\n    }\n    var transformedMaterial = transformation(rawMaterial);\n    function assemblage(transformedMaterial)\n    {\n        /*Assemblage of parts*/\n        return car;\n    }\n    return assemblage(transformedMaterial);\n}\n</code></pre>\n\n<p>We only need to go through certain steps in particular cases. As for the transformation of materials is only useful when you have the parts.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 39589063,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/39589063",
    "title": null,
    "body": "<p><strong>Closures</strong> are a somewhat advanced, and often misunderstood feature of the JavaScript language. Simply put, closures are objects that contain a function and a reference to the environment in which the function was created. However, in order to fully understand closures, there are two other features of the JavaScript language that must first be understood―first-class functions and inner functions.</p>\n\n<p><strong>First-Class Functions</strong></p>\n\n<p>In programming languages, functions are considered to be first-class citizens if they can be manipulated like any other data type. For example, first-class functions can be constructed at runtime and assigned to variables.  They can also be passed to, and returned by other functions. In addition to meeting the previously mentioned criteria, JavaScript functions also have their own properties and methods. The following example shows some of the capabilities of first-class functions. In the example, two functions are created and assigned to the variables “foo” and “bar”. The function stored in “foo” displays a dialog box, while “bar” simply returns whatever argument is passed to it. The last line of the example does several things. First, the function stored in “bar” is called with “foo” as its argument. “bar” then returns the “foo” function reference. Finally, the returned “foo” reference is called, causing “Hello World!” to be displayed.</p>\n\n<pre><code>var foo = function() {\n  alert(\"Hello World!\");\n};\n\nvar bar = function(arg) {\n  return arg;\n};\n\nbar(foo)();\n</code></pre>\n\n<p><strong>Inner Functions</strong></p>\n\n<p>Inner functions, also referred to as nested functions, are functions that are defined inside of another function (referred to as the outer function). Each time the outer function is called, an instance of the inner function is created. The following example shows how inner functions are used. In this case, add() is the outer function. Inside of add(), the doAdd() inner function is defined and called.</p>\n\n<pre><code>function add(value1, value2) {\n  function doAdd(operand1, operand2) {\n    return operand1 + operand2;\n  }\n\n  return doAdd(value1, value2);\n}\n\nvar foo = add(1, 2);\n// foo equals 3\n</code></pre>\n\n<p>One important characteristic of inner functions is that they have implicit access to the outer function’s scope. This means that the inner function can use the variables, arguments, etc. of the outer function. In the previous example, the “<em>value1</em>” and “<em>value2</em>” arguments of add() were passed to <em>doAdd()</em> as the “<em>operand1</em>” and “operand2” arguments. However, this is unnecessary because <em>doAdd()</em> has direct access to “<em>value1</em>” and “<em>value2</em>”. The previous example has been rewritten below to show how <em>doAdd()</em> can use “<em>value1</em>” and “<em>value2</em>”.</p>\n\n<pre><code>function add(value1, value2) {\n  function doAdd() {\n    return value1 + value2;\n  }\n\n  return doAdd();\n}\n\nvar foo = add(1, 2);\n// foo equals 3\n</code></pre>\n\n<blockquote>\n  <p><strong>Creating Closures</strong></p>\n  \n  <p>A closure is created when an inner function is made accessible from\n  outside of the function that created it. This typically occurs when an\n  outer function returns an inner function.  When this happens, the\n  inner function maintains a reference to the environment in which it\n  was created.  This means that it remembers all of the variables (and\n  their values) that were in scope at the time. The following example\n  shows how a closure is created and used.</p>\n</blockquote>\n\n<pre><code>function add(value1) {\n  return function doAdd(value2) {\n    return value1 + value2;\n  };\n}\n\nvar increment = add(1);\nvar foo = increment(2);\n// foo equals 3\n</code></pre>\n\n<p>There are a number of things to note about this example.</p>\n\n<p>The add() function returns its inner function doAdd(). By returning a reference to an inner function, a closure is created.\n“value1” is a local variable of add(), and a non-local variable of doAdd(). Non-local variables refer to variables that are neither in the local nor the global scope.  “value2” is a local variable of doAdd().\nWhen add(1) is called, a closure is created and stored in “increment”. In the closure’s referencing environment, “value1” is bound to the value one.  Variables that are bound are also said to be closed over. This is where the name closure comes from.\nWhen increment(2) is called, the closure is entered. This means that doAdd() is called, with the “value1” variable holding the value one. The closure can essentially be thought of as creating the following function.</p>\n\n<pre><code>function increment(value2) {\n  return 1 + value2;\n}\n</code></pre>\n\n<blockquote>\n  <p><strong>When to Use Closures</strong></p>\n  \n  <p>Closures can be used to accomplish many things. They are very useful\n  for things like configuring callback functions with parameters. This\n  section covers two scenarios where closures can make your life as a\n  developer much simpler.</p>\n</blockquote>\n\n<p><strong>Working With Timers</strong></p>\n\n<p>Closures are useful when used in conjunction with the <em>setTimeout()</em> and <em>setInterval()</em> functions. To be more specific, closures allow you to pass arguments to the callback functions of <em>setTimeout()</em> and <em>setInterval()</em>. For example, the following code prints the string “some message” once per second by calling <em>showMessage()</em>.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;title&gt;Closures&lt;/title&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;script&gt;\n    window.addEventListener(\"load\", function() {\n      window.setInterval(showMessage, 1000, \"some message&lt;br /&gt;\");\n    });\n\n    function showMessage(message) {\n      document.getElementById(\"message\").innerHTML += message;\n    }\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;span id=\"message\"&gt;&lt;/span&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Unfortunately, Internet Explorer does not support passing callback arguments via setInterval(). Instead of displaying “some message”, Internet Explorer displays “undefined” (since no value is actually passed to showMessage()). To work around this issue, a closure can be created which binds the “message” argument to the desired value. The closure can then be used as the callback function for setInterval(). To illustrate this concept, the JavaScript code from the previous example has been rewritten below to use a closure.</p>\n\n<pre><code>window.addEventListener(\"load\", function() {\n  var showMessage = getClosure(\"some message&lt;br /&gt;\");\n\n  window.setInterval(showMessage, 1000);\n});\n\nfunction getClosure(message) {\n  function showMessage() {\n    document.getElementById(\"message\").innerHTML += message;\n  }\n\n  return showMessage;\n}\n</code></pre>\n\n<p><strong>Emulating Private Data</strong></p>\n\n<p>Many object-oriented languages support the concept of private member data. However, JavaScript is not a pure object-oriented language and does not support private data. But, it is possible to emulate private data using closures. Recall that a closure contains a reference to the environment in which it was originally created―which is now out of scope. Since the variables in the referencing environment are only accessible from the closure function, they are essentially private data.</p>\n\n<p>The following example shows a constructor for a simple Person class. When each Person is created, it is given a name via the “<em>name</em>” argument.  Internally, the Person stores its name in the “<em>_name</em>” variable. Following good object-oriented programming practices, the method <em>getName()</em> is also provided for retrieving the name.</p>\n\n<pre><code>function Person(name) {\n  this._name = name;\n\n  this.getName = function() {\n    return this._name;\n  };\n}\n</code></pre>\n\n<p>There is still one major problem with the Person class. Because JavaScript does not support private data, there is nothing stopping somebody else from coming along and changing the name. For example, the following code creates a Person named Colin, and then changes its name to Tom.</p>\n\n<pre><code>var person = new Person(\"Colin\");\n\nperson._name = \"Tom\";\n// person.getName() now returns \"Tom\"\n</code></pre>\n\n<p>Personally, I wouldn’t like it if just anyone could come along and legally change my name. In order to stop this from happening, a closure can be used to make the “_name” variable private. The Person constructor has been rewritten below using a closure. Note that “_name” is now a local variable of the Person constructor instead of an object property. A closure is formed because the outer function, <em>Person()</em> exposes an inner function by creating the public <em>getName()</em> method.</p>\n\n<pre><code>function Person(name) {\n  var _name = name;\n\n  this.getName = function() {\n    return _name;\n  };\n}\n</code></pre>\n\n<p>Now, when getName() is called, it is guaranteed to return the value that was originally passed to the constructor. It is still possible for someone to add a new “_name” property to the object, but the internal workings of the object will not be affected as long as they refer to the variable bound by the closure.  The following code shows that the “_name” variable is, indeed, private.</p>\n\n<pre><code>var person = new Person(\"Colin\");\n\nperson._name = \"Tom\";\n// person._name is \"Tom\" but person.getName() returns \"Colin\"\n</code></pre>\n\n<blockquote>\n  <p><strong>When Not to Use Closures</strong></p>\n  \n  <p>It is important to understand how closures work and when to use them.\n  It is equally important to understand when they are not the right tool\n  for the job at hand. Overusing closures can cause scripts to execute\n  slowly and consume unnecessary memory. And because closures are so\n  simple to create, it is possible to misuse them without even knowing\n  it.  This section covers several scenarios where closures should be\n  used with caution.</p>\n</blockquote>\n\n<p><strong>In Loops</strong></p>\n\n<p>Creating closures within loops can have misleading results. An example of this is shown below. In this example, three buttons are created. When “button1” is clicked, an alert should be displayed that says “Clicked button 1”.  Similar messages should be shown for “button2” and “button3”.  However, when this code is run, all of the buttons show “Clicked button 4”. This is because, by the time one of the buttons is clicked, the loop has finished executing, and the loop variable has reached its final value of four.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;title&gt;Closures&lt;/title&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;script&gt;\n    window.addEventListener(\"load\", function() {\n      for (var i = 1; i &lt; 4; i++) {\n        var button = document.getElementById(\"button\" + i);\n\n        button.addEventListener(\"click\", function() {\n          alert(\"Clicked button \" + i);\n        });\n      }\n    });\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;input type=\"button\" id=\"button1\" value=\"One\" /&gt;\n  &lt;input type=\"button\" id=\"button2\" value=\"Two\" /&gt;\n  &lt;input type=\"button\" id=\"button3\" value=\"Three\" /&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>To solve this problem, the closure must be decoupled from the actual loop variable. This can be done by calling a new function, which in turn creates a new referencing environment. The following example shows how this is done. The loop variable is passed to the getHandler() function. getHandler() then returns a closure that is independent of the original “for” loop.</p>\n\n<pre><code>function getHandler(i) {\n  return function handler() {\n    alert(\"Clicked button \" + i);\n  };\n}\nwindow.addEventListener(\"load\", function() {\n  for (var i = 1; i &lt; 4; i++) {\n    var button = document.getElementById(\"button\" + i);\n    button.addEventListener(\"click\", getHandler(i));\n  }\n});\n</code></pre>\n\n<blockquote>\n  <p><strong>Unnecessary Use in Constructors</strong></p>\n  \n  <p>Constructor functions are another common source of closure misuse.\n  We’ve seen how closures can be used to emulate private data. However,\n  it is overkill to implement methods as closures if they don’t actually\n  access the private data. The following example revisits the Person\n  class, but this time adds a sayHello() method which doesn’t use the\n  private data.</p>\n</blockquote>\n\n<pre><code>function Person(name) {\n  var _name = name;\n\n  this.getName = function() {\n    return _name;\n  };\n\n  this.sayHello = function() {\n    alert(\"Hello!\");\n  };\n}\n</code></pre>\n\n<blockquote>\n  <p>Each time a Person is instantiated, time is spent creating the\n  sayHello() method. If many Person objects are created, this becomes a\n  waste of time.  A better approach would be to add sayHello() to the\n  Person prototype. By adding to the prototype, all Person objects can\n  share the same method.  This saves time in the constructor by not\n  having to create a closure for each instance. The previous example is\n  rewritten below with the extraneous closure moved into the prototype.</p>\n</blockquote>\n\n<pre><code>function Person(name) {\n  var _name = name;\n\n  this.getName = function() {\n    return _name;\n  };\n}\n\nPerson.prototype.sayHello = function() {\n  alert(\"Hello!\");\n};\n</code></pre>\n\n<p><strong>Things to Remember</strong></p>\n\n<ul>\n<li>Closures contain a function and a reference to the environment in\nwhich the function was created.</li>\n<li>A closure is formed when an outer function exposes an inner function.\nClosures can be used to easily pass parameters to callback functions.</li>\n<li>Private data can be emulated by using closures.  This is common in\nobject-oriented programming and namespace design.</li>\n<li>Closures should be not overused in constructors.  Adding to the\nprototype is a better idea.</li>\n</ul>\n\n<p><a href=\"https://www.sitepoint.com/javascript-closures-demystified/\">Link</a></p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 41773215,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/41773215",
    "title": null,
    "body": "<p>My perspective of Closures:</p>\n\n<p><strong><em>Closures can be compared to a book, with a bookmark, on a bookshelf.</em></strong></p>\n\n<p>Suppose you have read a book, and you like some page in the book.  You put in a bookmark at that page to track it.</p>\n\n<p>Now once you finish reading the book, you do not need the book anymore, except, you want to have access to that page.  You could have just cut out the page, but then you would loose the context on the story.  So you put the book back in your bookshelf with the bookmark.</p>\n\n<p>This is similar to a closure.  The book is the outer function, and the page is your inner function, which gets returned, from the outer function.  The bookmark is the reference to your page, and the context of the story is the lexical scope, which you need to retain.  The bookshelf is the function stack, which cannot be cleaned up of the old books, till you hold onto the page.</p>\n\n<p><strong><em>Code Example:</em></strong></p>\n\n<pre><code>function book() {\n   var pages = [....]; //array of pages in your book\n   var bookMarkedPage = 20; //bookmarked page number\n   function getPage(){\n       return pages[bookMarkedPage];\n   }\n   return getPage;\n}\n\nvar myBook = book(),\n    myPage = myBook.getPage();\n</code></pre>\n\n<p>When you run the <code>book()</code> function, you are allocating memory in the stack for the function to run in.  But since it returns a function, the memory cannot be released, as the inner function has access to the variables from the context outside it, in this case 'pages' and 'bookMarkedPage'.</p>\n\n<p>So effectively calling <code>book()</code> returns a reference to a closure, i.e not only a function, but a reference to the book and it's context, i.e. a reference to the function <em>getPage</em>, state of <em>pages</em> and <em>bookMarkedPage</em> variables.</p>\n\n<p><strong><em>Some points to consider:</em></strong></p>\n\n<p><strong>Point 1:</strong>\nThe bookshelf, just like the function stack has limited space, so use it wisely.</p>\n\n<p><strong>Point 2:</strong>\nThink about the fact, whether you need to hold onto the entire book when you just want to track a single page.  You can release part of the memory, by not storing all the pages in the book when the closure is returned.</p>\n\n<p><em>This is my perspective of Closures.  Hope it helps, and if anyone thinks that this is not correct, please do let me know, as I am very interested to understand even more about scopes and closures!</em>  </p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 41909054,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/41909054",
    "title": null,
    "body": "<p><strong>Closures Understanding Starts With Scope Chain</strong></p>\n\n<p>To really understand what a closure is you need to understand what is the scope chain of a function. That totally helped me when I was struggling with closures. Stick to ready until the end and I am sure you'll master closures</p>\n\n<p>The scope chain :</p>\n\n<p>Every chunk of JavaScript code (global code or functions) has a scope chain associated with it. This scope\nchain is a list or chain of objects that defines the variables that are “in scope” for that\ncode. When JavaScript needs to look up the value of a variable <code>x</code> (a process called\n<strong>variable resolution</strong>), it starts by looking at the first object in the chain. If that object has\na property named <code>x</code> , the value of that property is used. If the first object does not have\na property named <code>x</code> , JavaScript continues the search with the next object in the chain.\nIf the second object does not have a property named <code>x</code> , the search moves on to the next\nobject, and so on. If <code>x</code> is not a property of any of the objects in the scope chain, then\n<code>x</code> is not in scope for that code, and a ReferenceError occurs.\nIn top-level JavaScript code (i.e., code not contained within any function definitions),\nthe scope chain consists of a single object, the global object. In a non-nested function,\nthe scope chain consists of two objects. The first is the object that defines the function’s\nparameters and local variables, and the second is the global object. In a nested function,\nthe scope chain has three or more objects. It is important to understand how this chain\nof objects is created. When a function is <strong>DEFINED</strong>, it stores the scope chain then in effect.\nWhen that function is <strong>INVOKED</strong>, it creates a new object to store its local variables, and\nadds that new object to the stored scope chain to create a new, longer, chain that\nrepresents the scope for that function invocation. This becomes more interesting for\nnested functions because each time the outer function is called, the inner function is\ndefined again. Since the scope chain differs on each invocation of the outer function,\nthe inner function will be subtly different each time it is defined—the code of <strong>the inner\nfunction will be identical on each invocation of the outer function, but the scope chain\nassociated with that code will be different</strong>.\nThis notion of a scope chain is crucial for understanding closures .</p>\n\n<p>Closures :</p>\n\n<p>Technically, all JavaScript functions are closures: they are objects, and they have a scope\nchain associated with them. Most functions are invoked using the same scope chain\nthat was in effect when the function was defined, and it doesn’t really matter that there\nis a closure involved. Closures become interesting when they are invoked under a different scope chain than the one that was in effect when they were defined. This\nhappens most commonly when a nested function object is returned from the function\nwithin which it was defined. There are a number of powerful programming techniques\nthat involve this kind of nested function closures, and their use has become relatively\ncommon in JavaScript programming. Closures may seem confusing when you first en-\ncounter them, but it is important that you understand them well enough to use them\ncomfortably.</p>\n\n<p>Example :</p>\n\n<pre><code>var scope = \"global scope\"; // A global variable\nfunction checkscope() {\n  var scope = \"local scope\"; // A local variable\n  function f() {\n    return scope;\n  } // Return the value in scope here\n  return f();\n}\ncheckscope(); // =&gt; \"local scope\"\n</code></pre>\n\n<p>The checkscope() function declares a local variable and then defines and invokes a\nfunction that returns the value of that variable. It should be clear to you why the call\nto checkscope() returns “local scope”. Now let’s change the code just slightly. Can you\ntell what this code will return?</p>\n\n<p>In this code, a pair of parentheses has moved from inside <code>checkscope()</code> to outside of it.\nInstead of invoking the nested function and returning its result, <code>checkscope()</code> now just\nreturns the nested function object itself. What happens when we invoke that nested\nfunction (with the second pair of parentheses in the last line of code) outside of the\nfunction in which it was defined?\nRemember the fundamental rule of lexical scoping: JavaScript functions are executed\nusing the scope chain that was in effect when they were defined. The nested function\n<code>f()</code> was defined under a scope chain in which the variable scope was bound to the value\n“local scope”. That binding is still in effect when f is executed, wherever it is executed\nfrom. So the last line of code above returns “local scope”, not “global scope”. This, in\na nutshell, is the surprising and powerful nature of closures: they capture the local\nvariable (and parameter) bindings of the outer function within which they are defined.</p>\n\n<p>Here is a concrete example of closure :</p>\n\n<p>var uniqueInteger = (function() {\n  // Define and invoke\n  var counter = 0; // Private state of function below\n  return function() {\n    return counter++;\n  };\n})();</p>\n\n<p>In order to understand this code, you have to read it carefully. At first glance, the first\nline of code looks like it is assigning a function to the variable <code>uniqueInteger</code> . In fact,\nthe code is defining and invoking (as hinted by the open parenthesis on the first line)\na function, so it is the return value of the function that is being assigned to\n<code>uniqueInteger</code> . Now, if we study the body of the function, we see that its return value\nis another function. It is this nested function object that gets assigned to\n<code>uniqueInteger</code> . The nested function has access to the variables in scope, and can use\nthe counter variable defined in the outer function. Once that outer function returns,\nno other code can see the counter variable: the inner function has exclusive access to it.</p>\n\n<p>Private variables like counter need not be exclusive to a single closure: it is perfectly\npossible for two or more nested functions to be defined within the same outer function\nand share the same scope chain. Consider the following code:</p>\n\n<p>function counter() {\n  var n = 0;\n  return {\n    count: function() {\n      return n++;\n    },\n    reset: function() {\n      n = 0;\n    }\n  };\n}\nvar c = counter(), d = counter(); // Create two counters\nc.count(); // => 0\nd.count(); // => 0: they count independently\nc.reset(); // reset() and count() methods share state\nc.count(); // => 0: because we reset c\nd.count(); // => 1: d was not reset</p>\n\n<p>The <code>counter()</code> function returns a “counter” object. This object has two methods:\n<code>count()</code> returns the next integer, and <code>reset()</code> resets the internal state. The first thing to\nunderstand is that the two methods share access to the private variable n . The second\nthing to understand is that each invocation of <code>counter()</code> creates a new scope chain and\na new private variable. So if you call <code>counter()</code> twice, you get two counter objects with\ndifferent private variables. Calling <code>count()</code> or <code>reset()</code> on one counter object has no\neffect on the other.</p>\n\n<p>Closures are easy to understand if you simply accept the lexical scoping rule: functions\nare executed using the scope chain that was in effect when they were defined. Some\nprogrammers find closures confusing, however, because they get caught up in imple-\nmentation details. Surely, they think, the local variables defined in the outer function\ncease to exist when the outer function returns, so how can the nested function execute\nusing a scope chain that does not exist anymore? If you’re wondering about this your-\nself, then you have probably been exposed to low-level programming languages like C\nand to stack-based CPU architectures: if a function’s local variables are defined on a\nCPU stack, then they would indeed cease to exist when the function returned.\nBut remember our definition of scope chain. We described it as a list of\nobjects, not a stack of bindings. Each time a JavaScript function is invoked, a new object\nis created to hold the local variables for that invocation, and that object is added to the\nscope chain. When the function returns, that variable binding object is removed from\nthe scope chain. If there were no nested functions, there are no more references to the\nbinding object and it gets garbage collected. If there were nested functions defined,\nthen each of those functions has a reference to the scope chain, and that scope chain\nrefers to the variable binding object. If those nested functions objects remained within\ntheir outer function, however, then they themselves will be garbage collected, along\nwith the variable binding object they referred to. But if the function defines a nested\nfunction and returns it or stores it into a property somewhere, then there will be an\nexternal reference to the nested function. It won’t be garbage collected, and the variable\nbinding object it refers to won’t be garbage collected either.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 42947217,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/42947217",
    "title": null,
    "body": "<p>A closure is simply when a function have access to its outside scope even after the scope's function has finished executing. \nExample: </p>\n\n<pre><code>function multiplier(n) {\n    function multiply(x) {\n          return n*x;\n    }\n    return mutliply;\n}\n\nvar 10xmultiplier = multiplier(10);\nvar x = 10xmultiplier(5); // x= 50\n</code></pre>\n\n<p>we can see that even after multiplier has finished executing, the inner function multiply gets still access to the value of x which is 10 in this example.</p>\n\n<p>A very common use of closures is currying (the same example above) where we spice our function progressively with parameters instead of supplying all of the arguments at once.</p>\n\n<p>We can achieve this because Javascript (in addition to the prototypal OOP) allows as to program in a functional fashion where higher order functions can take other functions as arguments (fisrt class functions).\n<a href=\"https://www.google.ae/url?sa=t&amp;source=web&amp;rct=j&amp;url=https://en.m.wikipedia.org/wiki/Functional_programming&amp;ved=0ahUKEwjaqeyM5enSAhUF7BQKHYyCBCUQFggZMAA&amp;usg=AFQjCNHcEMds9EmEfJfjtHIvLZhAivGFFQ&amp;sig2=rXB-1kc0AEVYLNy4fhGSmw\" rel=\"nofollow noreferrer\">functional programming in wikipedia</a></p>\n\n<p>I highly recommend you to read this book by Kyle Simpson: <a href=\"https://github.com/getify/You-Dont-Know-JS\" rel=\"nofollow noreferrer\">2</a> one part of the book series is dedicated to closures and it is called scope and closures.\n<a href=\"https://github.com/getify/You-Dont-Know-JS\" rel=\"nofollow noreferrer\">you don't know js: free reading on github</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43321420,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/43321420",
    "title": null,
    "body": "<p>Let's start from here, As defined on MDN: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\" rel=\"nofollow noreferrer\"><strong>Closures</strong></a> are functions that refer to independent (free) variables (variables that are used locally, but defined in an enclosing scope). In other words, these functions 'remember' the environment in which they were created.</p>\n\n<p><strong>Lexical scoping</strong><br>\nConsider the following:</p>\n\n<pre><code>function init() {\n  var name = 'Mozilla'; // name is a local variable created by init\n  function displayName() { // displayName() is the inner function, a closure\n    alert(name); // use variable declared in the parent function    \n  }\n  displayName();    \n}\ninit();\n</code></pre>\n\n<p>init() creates a local variable called name and a function called displayName(). The displayName() function is an inner function that is defined inside init() and is only available within the body of the  init() function. The displayName() function has no local variables of its own. However, because inner functions have access to the variables of outer functions, displayName() can access the variable name declared in the parent function, init().</p>\n\n<pre><code>function init() {\n    var name = \"Mozilla\"; // name is a local variable created by init\n    function displayName() { // displayName() is the inner function, a closure\n        alert (name); // displayName() uses variable declared in the parent function    \n    }\n    displayName();    \n}\ninit();\n</code></pre>\n\n<p>Run the code and notice that the alert() statement within the displayName() function successfully displays the value of the name variable, which is declared in its parent function. This is an example of lexical scoping, which describes how a parser resolves variable names when functions are nested. The word \"lexical\" refers to the fact that lexical scoping uses the location where a variable is declared within the source code to determine where that variable is available. Nested functions have access to variables declared in their outer scope.</p>\n\n<p><strong>Closure</strong><br>\nNow consider the following example:</p>\n\n<pre><code>function makeFunc() {\n  var name = 'Mozilla';\n  function displayName() {\n    alert(name);\n  }\n  return displayName;\n}\n\nvar myFunc = makeFunc();\nmyFunc();\n</code></pre>\n\n<p>Running this code has exactly the same effect as the previous example of the init() function above: this time, the string \"Mozilla\" will be displayed in a JavaScript alert box. What's different — and interesting — is that the displayName() inner function is returned from the outer function before being executed.</p>\n\n<p>At first glance, it may seem unintuitive that this code still works. In some programming languages, the local variables within a function exist only for the duration of that function's execution. Once makeFunc() has finished executing, you might expect that the name variable would no longer be accessible. However, because the code still works as expected, this is obviously not the case in JavaScript.</p>\n\n<p>The reason is that functions in JavaScript form closures. A closure is the combination of a function and the lexical environment within which that function was declared. This environment consists of any local variables that were in-scope at the time that the closure was created. In this case, myFunc is a reference to the instance of the function displayName created when makeFunc is run. The instance of displayName maintains a reference to its lexical environment, within which the variable name exists. For this reason, when myFunc is invoked, the variable name remains available for use and \"Mozilla\" is passed to alert.</p>\n\n<p>Here's a slightly more interesting example — a makeAdder function:</p>\n\n<pre><code>function makeAdder(x) {\n  return function(y) {\n    return x + y;\n  };\n}\n\nvar add5 = makeAdder(5);\nvar add10 = makeAdder(10);\n\nconsole.log(add5(2));  // 7\nconsole.log(add10(2)); // 12\n</code></pre>\n\n<p>In this example, we have defined a function makeAdder(x), which takes a single argument, x, and returns a new function. The function it returns takes a single argument, y, and returns the sum of x and y.</p>\n\n<p>In essence, makeAdder is a function factory — it creates functions which can add a specific value to their argument. In the above example we use our function factory to create two new functions — one that adds 5 to its argument, and one that adds 10.</p>\n\n<p>add5 and add10 are both closures. They share the same function body definition, but store different lexical environments. In add5's lexical environment, x is 5, while in the lexical environment for add10, x is 10.</p>\n\n<p><strong>Practical closures</strong></p>\n\n<p>Closures are useful because they let you associate some data (the lexical environment) with a function that operates on that data. This has obvious parallels to object oriented programming, where objects allow us to associate some data (the object's properties) with one or more methods.</p>\n\n<p>Consequently, you can use a closure anywhere that you might normally use an object with only a single method.</p>\n\n<p>Situations where you might want to do this are particularly common on the web. Much of the code we write in front-end JavaScript is event-based — we define some behavior, then attach it to an event that is triggered by the user (such as a click or a keypress). Our code is generally attached as a callback: a single function which is executed in response to the event.</p>\n\n<p>For instance, suppose we wish to add some buttons to a page that adjust the text size. One way of doing this is to specify the font-size of the body element in pixels, then set the size of the other elements on the page (such as headers) using the relative em unit:</p>\n\n<pre><code>body {\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 12px;\n}\n\nh1 {\n  font-size: 1.5em;\n}\n\nh2 {\n  font-size: 1.2em;\n}\n</code></pre>\n\n<p>Our interactive text size buttons can change the font-size property of the body element, and the adjustments will be picked up by other elements on the page thanks to the relative units.\nHere's the JavaScript:</p>\n\n<pre><code>function makeSizer(size) {\n  return function() {\n    document.body.style.fontSize = size + 'px';\n  };\n}\n\nvar size12 = makeSizer(12);\nvar size14 = makeSizer(14);\nvar size16 = makeSizer(16);\n</code></pre>\n\n<p>size12, size14, and size16 are now functions which will resize the body text to 12, 14, and 16 pixels, respectively. We can attach them to buttons (in this case links) as follows:</p>\n\n<pre><code>document.getElementById('size-12').onclick = size12;\ndocument.getElementById('size-14').onclick = size14;\ndocument.getElementById('size-16').onclick = size16;\n\n&lt;a href=\"#\" id=\"size-12\"&gt;12&lt;/a&gt;\n&lt;a href=\"#\" id=\"size-14\"&gt;14&lt;/a&gt;\n&lt;a href=\"#\" id=\"size-16\"&gt;16&lt;/a&gt;\n\n\nfunction makeSizer(size) {\n  return function() {\n    document.body.style.fontSize = size + 'px';\n  };\n}\n\nvar size12 = makeSizer(12);\nvar size14 = makeSizer(14);\nvar size16 = makeSizer(16);\n\ndocument.getElementById('size-12').onclick = size12;\ndocument.getElementById('size-14').onclick = size14;\ndocument.getElementById('size-16').onclick = size16;\n</code></pre>\n\n<p>for reading more about closures, visit the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\" rel=\"nofollow noreferrer\">link on MDN</a></p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43554849,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/43554849",
    "title": null,
    "body": "<p>This answer is a summary of this youtube video <a href=\"https://www.youtube.com/watch?v=FYrtnS3X_Lw\" rel=\"noreferrer\">Javascript Closures</a>. So full credits to that video.</p>\n\n<p><em>Closures are nothing but Stateful functions which maintain states of their private variables.</em> </p>\n\n<p>Normally when you make a call to a function as shown in the below figure. The variables are created on a stack ( running RAM memory) used and then disallocated.</p>\n\n<p><a href=\"https://i.stack.imgur.com/QVZg5.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/QVZg5.png\" alt=\"enter image description here\"></a></p>\n\n<p>But now there are situations where we want to maintain this state of the function thats where Javascript closures comes to use. A closure is a function inside function with a return call as shown in the below code.</p>\n\n<p><a href=\"https://i.stack.imgur.com/u8UIi.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/u8UIi.png\" alt=\"enter image description here\"></a></p>\n\n<p>So the closure code for the counter function above looks something as shown below.Its a function inside function with a return statement.</p>\n\n<pre><code>function Counter() {\n           var counter = 0;\n\n           var Increment = function () {\n               counter++;\n               alert(counter);\n           }\n           return {\n               Increment\n           }\n       }\n</code></pre>\n\n<p>So now if you make a call the counter will increment in other words the function call maintains states.</p>\n\n<pre><code>var x = Counter(); // get the reference of the closure\nx.Increment(); // Displays 1\nx.Increment(); // Display 2 ( Maintains the private variables)\n</code></pre>\n\n<p>But now the biggest question whats the use of such stateful function. Stateful functions are building blocks to implement OOP concept like abstraction ,encapsulation and creating self contained modules.</p>\n\n<p>So whatever you want encapsulated you can put it as private and things to be exposed to public should be put in return statement. Also these components are self contained isolated objects so they do not pollute global variables.</p>\n\n<p>A object which follows OOP principles is self contained , follows abstraction , follows encapsulation and so. With out closures in Javascript this is difficult to implement.</p>\n\n<p><a href=\"https://i.stack.imgur.com/tJ5Mm.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/tJ5Mm.png\" alt=\"enter image description here\"></a></p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43634757,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/43634757",
    "title": null,
    "body": "<blockquote>\n  <p>A closure is a function having access to the parent scope, even after the parent function has closed.</p>\n</blockquote>\n\n<p>So basically a closure is a function inside another function.</p>\n\n<blockquote>\n  <p>A closure is an inner function that has access to the outer\n  (enclosing) function’s variables—scope chain. The closure has three\n  scope chains: it has access to its own scope (variables defined\n  between its curly brackets), it has access to the outer function’s\n  variables, and it has access to the global variables.</p>\n  \n  <p>The inner function has access not only to the outer function’s\n  variables, but also to the outer function’s parameters. Note that the\n  inner function cannot call the outer function’s arguments object,\n  however, even though it can call the outer function’s parameters\n  directly.</p>\n  \n  <p>You create a closure by adding a function inside another function.</p>\n</blockquote>\n\n<p>Also it's very useful method which is used in many famous frameworks including: <code>Angular</code>, <code>Node.js</code> and <code>jQuery</code>:</p>\n\n<blockquote>\n  <p>Closures are used extensively in Node.js; they are workhorses in\n  Node.js’ asynchronous, non-blocking architecture. Closures are also\n  frequently used in jQuery and just about every piece of JavaScript\n  code you read.</p>\n</blockquote>\n\n<p>But how the closures looks like in a real life coding?\nLook at this simple sample code:</p>\n\n<pre><code>function showName(firstName, lastName) {\n      var nameIntro = \"Your name is \";\n      // this inner function has access to the outer function's variables, including the parameter\n      function makeFullName() {\n          return nameIntro + firstName + \" \" + lastName;\n      }\n      return makeFullName();\n  }\n\n  console.log(showName(\"Michael\", \"Jackson\")); // Your name is Michael Jackson\n</code></pre>\n\n<p>Also this is classic closure way in jQuery which every javascript and jQuery developers used it a lot:</p>\n\n<pre><code>$(function() {​​\n    var selections = [];\n    $(\".niners\").click(function() { // this closure has access to the selections variable​\n        selections.push(this.prop(\"name\")); // update the selections variable in the outer function's scope​\n    });​\n});\n</code></pre>\n\n<p>But why we use closures? when we use it in an actual programming?\nwhat are the practical use of closures? the below is a good explanation and example by MDN:</p>\n\n<p><strong>Practical closures</strong></p>\n\n<blockquote>\n  <p>Closures are useful because they let you associate some data (the\n  lexical environment) with a function that operates on that data. This\n  has obvious parallels to object oriented programming, where objects\n  allow us to associate some data (the object's properties) with one or\n  more methods.</p>\n  \n  <p>Consequently, you can use a closure anywhere that you might normally\n  use an object with only a single method.</p>\n  \n  <p>Situations where you might want to do this are particularly common on\n  the web. Much of the code we write in front-end JavaScript is\n  event-based — we define some behavior, then attach it to an event that\n  is triggered by the user (such as a click or a keypress). Our code is\n  generally attached as a callback: a single function which is executed\n  in response to the event.</p>\n  \n  <p>For instance, suppose we wish to add some buttons to a page that\n  adjust the text size. One way of doing this is to specify the\n  font-size of the body element in pixels, then set the size of the\n  other elements on the page (such as headers) using the relative em\n  unit:</p>\n</blockquote>\n\n<p>Read the code below and run the code to see how closure help us here to easily make separate functions for each sections:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>//javascript\r\nfunction makeSizer(size) {\r\n  return function() {\r\n    document.body.style.fontSize = size + 'px';\r\n  };\r\n}\r\n\r\nvar size12 = makeSizer(12);\r\nvar size14 = makeSizer(14);\r\nvar size16 = makeSizer(16);\r\n\r\ndocument.getElementById('size-12').onclick = size12;\r\ndocument.getElementById('size-14').onclick = size14;\r\ndocument.getElementById('size-16').onclick = size16;</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>/*css*/\r\nbody {\r\n  font-family: Helvetica, Arial, sans-serif;\r\n  font-size: 12px;\r\n}\r\n\r\nh1 {\r\n  font-size: 1.5em;\r\n}\r\n\r\nh2 {\r\n  font-size: 1.2em;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!--html&gt;&lt;!--&gt;\r\n&lt;p&gt;Some paragraph text&lt;/p&gt;\r\n&lt;h1&gt;some heading 1 text&lt;/h1&gt;\r\n&lt;h2&gt;some heading 2 text&lt;/h2&gt;\r\n\r\n&lt;a href=\"#\" id=\"size-12\"&gt;12&lt;/a&gt;\r\n&lt;a href=\"#\" id=\"size-14\"&gt;14&lt;/a&gt;\r\n&lt;a href=\"#\" id=\"size-16\"&gt;16&lt;/a&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>For further study about closures, I recommend you to visit this page by MDN:\n<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Closures\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en/docs/Web/JavaScript/Closures</a></p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43941748,
    "parentID": 111102,
    "url": "https://stackoverflow.com/q/43941748",
    "title": null,
    "body": "<p>An example of Invoking Function .</p>\n\n<pre><code> var clicked  = false;\n for(var i=0;i&lt;temp.length;i++){\n   (function(index){\n     if(clicked) return false;\n     $(temp[index]).click(function(){\n     if($(temp[index]).text()==\"\" &amp;&amp; !$(\".cell1\").val()){\n       $(this).text(player1Val);\n       $(\".cell1\").val(true);\n       console.log(\"first player clicked \");\n       clicked = true;\n       return false;\n    }\n});\n})(i);\n}\n</code></pre>\n",
    "score": -4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 122130,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/122130",
    "title": null,
    "body": "<p>In <a href=\"http://en.wikipedia.org/wiki/Prototype_JavaScript_Framework\" rel=\"noreferrer\">Prototype</a> you would do something like</p>\n\n<pre><code>newObject = Object.clone(myObject);\n</code></pre>\n\n<p>The <a href=\"http://prototypejs.org/doc/latest/language/Object/clone/\" rel=\"noreferrer\">Prototype documentation</a> notes that this makes a shallow copy.</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 122190,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/122190",
    "title": null,
    "body": "<p>If there wasn't any builtin one, you could try:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>    function clone(obj) {\r\n      if (obj === null || typeof(obj) !== 'object' || 'isActiveClone' in obj)\r\n        return obj;\r\n\r\n      if (obj instanceof Date)\r\n        var temp = new obj.constructor(); //or new Date(obj);\r\n      else\r\n        var temp = obj.constructor();\r\n\r\n      for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n          obj['isActiveClone'] = null;\r\n          temp[key] = clone(obj[key]);\r\n          delete obj['isActiveClone'];\r\n        }\r\n      }\r\n\r\n      return temp;\r\n    }</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 241,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 122232,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/122232",
    "title": null,
    "body": "<pre><code>function clone(obj)\n { var clone = {};\n   clone.prototype = obj.prototype;\n   for (property in obj) clone[property] = obj[property];\n   return clone;\n }\n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 122704,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/122704",
    "title": null,
    "body": "<blockquote>\n  <p><strong>Note:</strong> This is a reply to another answer, not a proper response to this question. If you wish to have fast object cloning please follow <a href=\"https://stackoverflow.com/a/5344074/1438393\">Corban's advice in their answer</a> to this question.</p>\n</blockquote>\n\n<hr>\n\n<p>I want to note that the <a href=\"http://api.jquery.com/clone/\" rel=\"noreferrer\"><code>.clone()</code></a> method in <strong>jQuery</strong> only clones DOM elements. In order to clone JavaScript objects, you would do:</p>\n\n<pre><code>// Shallow copy\nvar newObject = jQuery.extend({}, oldObject);\n\n// Deep copy\nvar newObject = jQuery.extend(true, {}, oldObject);\n</code></pre>\n\n<p>More information can be found in the <a href=\"http://api.jquery.com/jQuery.extend/\" rel=\"noreferrer\">jQuery documentation</a>.</p>\n\n<p>I also want to note that the deep copy is actually much smarter than what is shown above – it's able to avoid many traps (trying to deep extend a DOM element, for example). It's used frequently in jQuery core and in plugins to great effect.</p>\n",
    "score": 3752,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1042676,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/1042676",
    "title": null,
    "body": "<p>Code:</p>\n\n<pre><code>// extends 'from' object with members from 'to'. If 'to' is null, a deep clone of 'from' is returned\nfunction extend(from, to)\n{\n    if (from == null || typeof from != \"object\") return from;\n    if (from.constructor != Object &amp;&amp; from.constructor != Array) return from;\n    if (from.constructor == Date || from.constructor == RegExp || from.constructor == Function ||\n        from.constructor == String || from.constructor == Number || from.constructor == Boolean)\n        return new from.constructor(from);\n\n    to = to || new from.constructor();\n\n    for (var name in from)\n    {\n        to[name] = typeof to[name] == \"undefined\" ? extend(from[name], null) : to[name];\n    }\n\n    return to;\n}\n</code></pre>\n\n<p>Test:</p>\n\n<pre><code>var obj =\n{\n    date: new Date(),\n    func: function(q) { return 1 + q; },\n    num: 123,\n    text: \"asdasd\",\n    array: [1, \"asd\"],\n    regex: new RegExp(/aaa/i),\n    subobj:\n    {\n        num: 234,\n        text: \"asdsaD\"\n    }\n}\n\nvar clone = extend(obj);\n</code></pre>\n",
    "score": 73,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1891377,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/1891377",
    "title": null,
    "body": "<p>This is what I'm using:</p>\n\n<pre><code>function cloneObject(obj) {\n    var clone = {};\n    for(var i in obj) {\n        if(typeof(obj[i])==\"object\" &amp;&amp; obj[i] != null)\n            clone[i] = cloneObject(obj[i]);\n        else\n            clone[i] = obj[i];\n    }\n    return clone;\n}\n</code></pre>\n",
    "score": 71,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1963559,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/1963559",
    "title": null,
    "body": "<pre><code>var clone = function() {\n    var newObj = (this instanceof Array) ? [] : {};\n    for (var i in this) {\n        if (this[i] &amp;&amp; typeof this[i] == \"object\") {\n            newObj[i] = this[i].clone();\n        }\n        else\n        {\n            newObj[i] = this[i];\n        }\n    }\n    return newObj;\n}; \n\nObject.defineProperty( Object.prototype, \"clone\", {value: clone, enumerable: false});\n</code></pre>\n",
    "score": 49,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2728898,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/2728898",
    "title": null,
    "body": "<p>// obj target object, vals source object</p>\n\n<pre><code>var setVals = function (obj, vals) {\nif (obj &amp;&amp; vals) {\n      for (var x in vals) {\n        if (vals.hasOwnProperty(x)) {\n          if (obj[x] &amp;&amp; typeof vals[x] === 'object') {\n            obj[x] = setVals(obj[x], vals[x]);\n          } else {\n            obj[x] = vals[x];\n          }\n        }\n      }\n    }\n    return obj;\n  };\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3873968,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/3873968",
    "title": null,
    "body": "<p>Crockford suggests (and I prefer) using this function:</p>\n\n<pre><code>function object(o) {\n    function F() {}\n    F.prototype = o;\n    return new F();\n}\n\nvar newObject = object(oldObject);\n</code></pre>\n\n<p>It's terse, works as expected and you don't need a library.</p>\n\n<hr>\n\n<p><strong>EDIT:</strong></p>\n\n<p>This is a polyfill for <code>Object.create</code>, so you also can use this.</p>\n\n<pre><code>var newObject = Object.create(oldObject);\n</code></pre>\n\n<p><strong>NOTE:</strong>  If you use some of this, you may have problems with some iteration who use <code>hasOwnProperty</code>. Because, <code>create</code> create new empty object who inherits <code>oldObject</code>. But it is still useful and practical for cloning objects.</p>\n\n<p>For exemple if  <code>oldObject.a = 5;</code></p>\n\n<pre><code>newObject.a; // is 5\n</code></pre>\n\n<p>but:</p>\n\n<pre><code>oldObject.hasOwnProperty(a); // is true\nnewObject.hasOwnProperty(a); // is false\n</code></pre>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3951975,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/3951975",
    "title": null,
    "body": "<p>There seems to be no ideal deep clone operator yet for array-like objects.  As the code below illustrates, John Resig's jQuery cloner turns arrays with non-numeric properties into objects that are not arrays, and RegDwight's JSON cloner drops the non-numeric properties. The following tests illustrate these points on multiple browsers:</p>\n\n<pre><code>function jQueryClone(obj) {\n   return jQuery.extend(true, {}, obj)\n}\n\nfunction JSONClone(obj) {\n   return JSON.parse(JSON.stringify(obj))\n}\n\nvar arrayLikeObj = [[1, \"a\", \"b\"], [2, \"b\", \"a\"]];\narrayLikeObj.names = [\"m\", \"n\", \"o\"];\nvar JSONCopy = JSONClone(arrayLikeObj);\nvar jQueryCopy = jQueryClone(arrayLikeObj);\n\nalert(\"Is arrayLikeObj an array instance?\" + (arrayLikeObj instanceof Array) +\n      \"\\nIs the jQueryClone an array instance? \" + (jQueryCopy instanceof Array) +\n      \"\\nWhat are the arrayLikeObj names? \" + arrayLikeObj.names +\n      \"\\nAnd what are the JSONClone names? \" + JSONCopy.names)\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4591639,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/4591639",
    "title": null,
    "body": "<p>Assuming that you have only variables and not any functions in your object, you can  just use:</p>\n\n<pre><code>var newObject = JSON.parse(JSON.stringify(oldObject));\n</code></pre>\n",
    "score": 332,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 5344074,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/5344074",
    "title": null,
    "body": "<p>Checkout this benchmark: <a href=\"http://jsben.ch/#/bWfk9\" rel=\"noreferrer\">http://jsben.ch/#/bWfk9</a></p>\n\n<p>In my previous tests where speed was a main concern I found </p>\n\n<pre><code>JSON.parse(JSON.stringify(obj))\n</code></pre>\n\n<p>to be the fastest way to deep clone an object (it beats out <a href=\"https://api.jquery.com/jQuery.extend/\" rel=\"noreferrer\">jQuery.extend</a> with deep flag set true by 10-20%).</p>\n\n<p>jQuery.extend is pretty fast when the deep flag is set to false (shallow clone). It is a good option, because it includes some extra logic for type validation and doesn't copy over undefined properties, etc., but this will also slow you down a little.</p>\n\n<p>If you know the structure of the objects you are trying to clone or can avoid deep nested arrays you can write a simple <code>for (var i in obj)</code> loop to clone your object while checking hasOwnProperty and it will be much much faster than jQuery.</p>\n\n<p>Lastly if you are attempting to clone a known object structure in a hot loop you can get MUCH MUCH MORE PERFORMANCE by simply in-lining the clone procedure and manually constructing the object.</p>\n\n<p>JavaScript trace engines suck at optimizing <code>for..in</code> loops and checking hasOwnProperty will slow you down as well. Manual clone when speed is an absolute must.</p>\n\n<pre><code>var clonedObject = {\n  knownProp: obj.knownProp,\n  ..\n}\n</code></pre>\n\n<p>Beware using the <code>JSON.parse(JSON.stringify(obj))</code> method on <code>Date</code> objects - <code>JSON.stringify(new Date())</code> returns a string representation of the date in ISO format, which <code>JSON.parse()</code> <strong>doesn't</strong> convert back to a <code>Date</code> object. <a href=\"https://stackoverflow.com/questions/11491938/issues-with-date-when-using-json-stringify-and-json-parse/11491993#11491993\">See this answer for more details</a>.</p>\n",
    "score": 1438,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 5452191,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/5452191",
    "title": null,
    "body": "<p>I think that this is the best solution  if you want to generalize your object cloning algorithm.<br>\nIt can be used with or without jQuery, although I recommend leaving jQuery's extend method out if you want you the cloned object to have the same \"class\" as the original one.</p>\n\n<pre><code>function clone(obj){\n    if(typeof(obj) == 'function')//it's a simple function\n        return obj;\n    //of it's not an object (but could be an array...even if in javascript arrays are objects)\n    if(typeof(obj) !=  'object' || obj.constructor.toString().indexOf('Array')!=-1)\n        if(JSON != undefined)//if we have the JSON obj\n            try{\n                return JSON.parse(JSON.stringify(obj));\n            }catch(err){\n                return JSON.parse('\"'+JSON.stringify(obj)+'\"');\n            }\n        else\n            try{\n                return eval(uneval(obj));\n            }catch(err){\n                return eval('\"'+uneval(obj)+'\"');\n            }\n    // I used to rely on jQuery for this, but the \"extend\" function returns\n    //an object similar to the one cloned,\n    //but that was not an instance (instanceof) of the cloned class\n    /*\n    if(jQuery != undefined)//if we use the jQuery plugin\n        return jQuery.extend(true,{},obj);\n    else//we recursivley clone the object\n    */\n    return (function _clone(obj){\n        if(obj == null || typeof(obj) != 'object')\n            return obj;\n        function temp () {};\n        temp.prototype = obj;\n        var F = new temp;\n        for(var key in obj)\n            F[key] = clone(obj[key]);\n        return F;\n    })(obj);            \n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 5527124,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/5527124",
    "title": null,
    "body": "<p>This isn't generally the most efficient solution, but it does what I need. Simple test cases below...</p>\n\n<pre><code>function clone(obj, clones) {\n    // Makes a deep copy of 'obj'. Handles cyclic structures by\n    // tracking cloned obj's in the 'clones' parameter. Functions \n    // are included, but not cloned. Functions members are cloned.\n    var new_obj,\n        already_cloned,\n        t = typeof obj,\n        i = 0,\n        l,\n        pair; \n\n    clones = clones || [];\n\n    if (obj === null) {\n        return obj;\n    }\n\n    if (t === \"object\" || t === \"function\") {\n\n        // check to see if we've already cloned obj\n        for (i = 0, l = clones.length; i &lt; l; i++) {\n            pair = clones[i];\n            if (pair[0] === obj) {\n                already_cloned = pair[1];\n                break;\n            }\n        }\n\n        if (already_cloned) {\n            return already_cloned; \n        } else {\n            if (t === \"object\") { // create new object\n                new_obj = new obj.constructor();\n            } else { // Just use functions as is\n                new_obj = obj;\n            }\n\n            clones.push([obj, new_obj]); // keep track of objects we've cloned\n\n            for (key in obj) { // clone object members\n                if (obj.hasOwnProperty(key)) {\n                    new_obj[key] = clone(obj[key], clones);\n                }\n            }\n        }\n    }\n    return new_obj || obj;\n}\n</code></pre>\n\n<p>Cyclic array test...</p>\n\n<pre><code>a = []\na.push(\"b\", \"c\", a)\naa = clone(a)\naa === a //=&gt; false\naa[2] === a //=&gt; false\naa[2] === a[2] //=&gt; false\naa[2] === aa //=&gt; true\n</code></pre>\n\n<p>Function test...</p>\n\n<pre><code>f = new Function\nf.a = a\nff = clone(f)\nff === f //=&gt; true\nff.a === a //=&gt; false\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6466050,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/6466050",
    "title": null,
    "body": "<p>This is the fastest method I have created that doesn't use the prototype, so it will maintain hasOwnProperty in the new object.</p>\n\n<p>The solution is to iterate the top level properties of the original object, make two copies, delete each property from the original and then reset the original object and return the new copy. It only has to iterate as many times as top level properties. This saves all the <code>if</code> conditions to check if each property is a function, object, string, etc., and doesn't have to iterate each descendant property.</p>\n\n<p>The only drawback is that the original object must be supplied with its original created namespace, in order to reset it.</p>\n\n<pre><code>copyDeleteAndReset:function(namespace,strObjName){\n    var obj = namespace[strObjName],\n    objNew = {},objOrig = {};\n    for(i in obj){\n        if(obj.hasOwnProperty(i)){\n            objNew[i] = objOrig[i] = obj[i];\n            delete obj[i];\n        }\n    }\n    namespace[strObjName] = objOrig;\n    return objNew;\n}\n\nvar namespace = {};\nnamespace.objOrig = {\n    '0':{\n        innerObj:{a:0,b:1,c:2}\n    }\n}\n\nvar objNew = copyDeleteAndReset(namespace,'objOrig');\nobjNew['0'] = 'NEW VALUE';\n\nconsole.log(objNew['0']) === 'NEW VALUE';\nconsole.log(namespace.objOrig['0']) === innerObj:{a:0,b:1,c:2};\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 7541349,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/7541349",
    "title": null,
    "body": "<p>I know this is an old post, but I thought this may be of some help to the next person who stumbles along.</p>\n\n<p>As long as you don't assign an object to anything it maintains no reference in memory.  So to make an object that you want to share among other objects, you'll have to create a factory like so:</p>\n\n<pre><code>var a = function(){\n    return {\n        father:'zacharias'\n    };\n},\nb = a(),\nc = a();\nc.father = 'johndoe';\nalert(b.father);\n</code></pre>\n",
    "score": 42,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8522874,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/8522874",
    "title": null,
    "body": "<p>If you're using it, the <a href=\"http://documentcloud.github.com/underscore/\" rel=\"noreferrer\">Underscore.js</a> library has a <a href=\"http://documentcloud.github.com/underscore/#clone\" rel=\"noreferrer\">clone</a> method.</p>\n\n<pre><code>var newObject = _.clone(oldObject);\n</code></pre>\n",
    "score": 39,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10916838,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/10916838",
    "title": null,
    "body": "<h1>Structured Clones</h1>\n\n<p>HTML5 defines a method for creating deep clones of objects. It only works for certain built-in types, but is considerably more flexible than using JSON. <a href=\"http://www.w3.org/TR/2012/CR-html5-20121217/infrastructure.html#safe-passing-of-structured-data\" rel=\"noreferrer\"><strong>The internal structured cloning algorithm</strong></a> also supports an increasing number of types including Dates, RegExps, Maps, Sets, Blobs, FileLists, ImageDatas, sparse Arrays, and <a href=\"https://www.khronos.org/registry/typedarray/specs/latest/#9\" rel=\"noreferrer\">Typed Arrays</a>, and supports cyclical/recursive structures.</p>\n\n<h2>Asynchronous Cloning</h2>\n\n<p>There's no public API specifically for creating structured clones, but posting messages through <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel\" rel=\"noreferrer\">MessageChannels</a> is a pretty direct approach for asynchronous cloning. Here's one possible ES6 <code>structuredClone(obj)</code> function returning a <code>Promise</code> with a structured clone of <code>obj</code>.</p>\n\n<pre><code>class StructuredCloner {\n  constructor() {\n    this.pendingClones_ = new Map();\n    this.nextKey_ = 0;\n\n    const channel = new MessageChannel();\n    this.inPort_ = channel.port1;\n    this.outPort_ = channel.port2;\n\n    this.outPort_.onmessage = ({data: {key, value}}) =&gt; {\n      const resolve = this.pendingClones_.get(key);\n      resolve(value);\n      this.pendingClones_.delete(key);\n    };\n    this.outPort_.start();\n  }\n\n  clone(value) {\n    return new Promise(resolve =&gt; {\n      const key = this.nextKey_++;\n      this.pendingClones_.set(key, resolve);\n      this.inPort_.postMessage({key, value});\n    });\n  }\n}\n\nconst structuredClone = window.structuredClone =\n    StructuredCloner.prototype.clone.bind(new StructuredCloner);\n</code></pre>\n\n<h3>Example Use:</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>'use strict';\r\n\r\nconst main = () =&gt; {\r\n  const original = { date: new Date(), number: Math.random() };\r\n  original.self = original;\r\n\r\n  structuredClone(original).then(clone =&gt; {\r\n    // They're different objects:\r\n    console.assert(original !== clone);\r\n    console.assert(original.date !== clone.date);\r\n\r\n    // They're cyclical:\r\n    console.assert(original.self === original);\r\n    console.assert(clone.self === clone);\r\n\r\n    // They contain equivalent values:\r\n    console.assert(original.number === clone.number);\r\n    console.assert(Number(original.date) === Number(clone.date));\r\n  \r\n    console.log(\"Assertions complete.\");\r\n  });\r\n};\r\n\r\nclass StructuredCloner {\r\n  constructor() {\r\n    this.pendingClones_ = new Map();\r\n    this.nextKey_ = 0;\r\n\r\n    const channel = new MessageChannel();\r\n    this.inPort_ = channel.port1;\r\n    this.outPort_ = channel.port2;\r\n\r\n    this.outPort_.onmessage = ({data: {key, value}}) =&gt; {\r\n      const resolve = this.pendingClones_.get(key);\r\n      resolve(value);\r\n      this.pendingClones_.delete(key);\r\n    };\r\n    this.outPort_.start();\r\n  }\r\n\r\n  clone(value) {\r\n    return new Promise(resolve =&gt; {\r\n      const key = this.nextKey_++;\r\n      this.pendingClones_.set(key, resolve);\r\n      this.inPort_.postMessage({key, value});\r\n    });\r\n  }\r\n}\r\n\r\nconst structuredClone = window.structuredClone =\r\n      StructuredCloner.prototype.clone.bind(new StructuredCloner);\r\n\r\nmain();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h2>Impractical Synchronous Cloning</h2>\n\n<p>Unfortunately, there are no good options for creating structured clones synchronously. The idea of adding a built-in <code>structuredClone(...)</code> function has been discussed several times and <a href=\"https://github.com/whatwg/html/issues/793\" rel=\"noreferrer\">proposed here</a>, but no browser vendors have taken action. Here are a couple of impractical hacks instead.</p>\n\n<p><code>history.pushState()</code> and <code>history.replaceState()</code> both create a structured clone of their first argument, and assign that value to <code>history.state</code>. You can use this to create a structured clone of any object like this:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>const structuredClone = obj =&gt; {\n  const oldState = history.state;\n  history.replaceState(obj, null);\n  const clonedObj = history.state;\n  history.replaceState(oldState, null);\n  return clonedObj;\n};\n</code></pre>\n\n<h3>Example Use:</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>'use strict';\r\n\r\nconst main = () =&gt; {\r\n  const original = { date: new Date(), number: Math.random() };\r\n  original.self = original;\r\n\r\n  const clone = structuredClone(original);\r\n  \r\n  // They're different objects:\r\n  console.assert(original !== clone);\r\n  console.assert(original.date !== clone.date);\r\n\r\n  // They're cyclical:\r\n  console.assert(original.self === original);\r\n  console.assert(clone.self === clone);\r\n\r\n  // They contain equivalent values:\r\n  console.assert(original.number === clone.number);\r\n  console.assert(Number(original.date) === Number(clone.date));\r\n  \r\n  console.log(\"Assertions complete.\");\r\n};\r\n\r\nconst structuredClone = obj =&gt; {\r\n  const oldState = history.state;\r\n  history.replaceState(obj, null);\r\n  const clonedObj = history.state;\r\n  history.replaceState(oldState, null);\r\n  return clonedObj;\r\n};\r\n\r\nmain();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Though synchronous, this can be extremely slow. It incurs all of the overhead associated with manipulating the browser history. Calling this method repeatedly can cause Chrome to become temporarily unresponsive.</p>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification\" rel=\"noreferrer\"><code>Notification</code> constructor</a> creates a structured clone of its associated data. It also attempts to display a browser notification to the user, but this will silently fail unless you have requested notification permission. In case you have the permission for other purposes, we'll immediately close the notification we've created.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>const structuredClone = obj =&gt; {\n  const n = new Notification('', {data: obj, silent: true});\n  n.close();\n  return n.data;\n};\n</code></pre>\n\n<h3>Example Use:</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>'use strict';\r\n\r\nconst main = () =&gt; {\r\n  const original = { date: new Date(), number: Math.random() };\r\n  original.self = original;\r\n\r\n  const clone = structuredClone(original);\r\n  \r\n  // They're different objects:\r\n  console.assert(original !== clone);\r\n  console.assert(original.date !== clone.date);\r\n\r\n  // They're cyclical:\r\n  console.assert(original.self === original);\r\n  console.assert(clone.self === clone);\r\n\r\n  // They contain equivalent values:\r\n  console.assert(original.number === clone.number);\r\n  console.assert(Number(original.date) === Number(clone.date));\r\n  \r\n  console.log(\"Assertions complete.\");\r\n};\r\n\r\nconst structuredClone = obj =&gt; {\r\n  const n = new Notification('', {data: obj, silent: true});\r\n  n.close();\r\n  return n.data;\r\n};\r\n\r\nmain();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 212,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1114,
      "name": "Jeremy Banks",
      "reputation": 62288
    }
  },
  {
    "soID": 11335725,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/11335725",
    "title": null,
    "body": "<p>Shallow copy one-liner (<a href=\"https://en.wikipedia.org/wiki/ECMAScript#5th_Edition\" rel=\"nofollow\">ECMAScript 5th edition</a>):</p>\n\n<pre><code>var origin = { foo : {} };\nvar copy = Object.keys(origin).reduce(function(c,k){c[k]=origin[k];return c;},{});\n\nconsole.log(origin, copy);\nconsole.log(origin == copy); // false\nconsole.log(origin.foo == copy.foo); // true\n</code></pre>\n\n<p>And shallow copy one-liner (<a href=\"https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015\" rel=\"nofollow\">ECMAScript 6th edition</a>, 2015):</p>\n\n<pre><code>var origin = { foo : {} };\nvar copy = Object.assign({}, origin);\n\nconsole.log(origin, copy);\nconsole.log(origin == copy); // false\nconsole.log(origin.foo == copy.foo); // true\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11620938,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/11620938",
    "title": null,
    "body": "<p>Here is a comprehensive clone() method that can clone any JavaScript object. It handles almost all the cases:</p>\n\n<pre><code>function clone(src, deep) {\n\n    var toString = Object.prototype.toString;\n    if (!src &amp;&amp; typeof src != \"object\") {\n        // Any non-object (Boolean, String, Number), null, undefined, NaN\n        return src;\n    }\n\n    // Honor native/custom clone methods\n    if (src.clone &amp;&amp; toString.call(src.clone) == \"[object Function]\") {\n        return src.clone(deep);\n    }\n\n    // DOM elements\n    if (src.nodeType &amp;&amp; toString.call(src.cloneNode) == \"[object Function]\") {\n        return src.cloneNode(deep);\n    }\n\n    // Date\n    if (toString.call(src) == \"[object Date]\") {\n        return new Date(src.getTime());\n    }\n\n    // RegExp\n    if (toString.call(src) == \"[object RegExp]\") {\n        return new RegExp(src);\n    }\n\n    // Function\n    if (toString.call(src) == \"[object Function]\") {\n\n        //Wrap in another method to make sure == is not true;\n        //Note: Huge performance issue due to closures, comment this :)\n        return (function(){\n            src.apply(this, arguments);\n        });\n    }\n\n    var ret, index;\n    //Array\n    if (toString.call(src) == \"[object Array]\") {\n        //[].slice(0) would soft clone\n        ret = src.slice();\n        if (deep) {\n            index = ret.length;\n            while (index--) {\n                ret[index] = clone(ret[index], true);\n            }\n        }\n    }\n    //Object\n    else {\n        ret = src.constructor ? new src.constructor() : {};\n        for (var prop in src) {\n            ret[prop] = deep\n                ? clone(src[prop], true)\n                : src[prop];\n        }\n    }\n    return ret;\n};\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12941013,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/12941013",
    "title": null,
    "body": "<p>There’s a <a href=\"https://github.com/pvorb/node-clone\" rel=\"noreferrer\">library (called “clone”)</a>, that does this quite well. It provides the most complete recursive cloning/copying of arbitrary objects that I know of. It also supports circular references, which is not covered by the other answers, yet.</p>\n\n<p>You can <a href=\"https://npmjs.org/package/clone\" rel=\"noreferrer\">find it on npm</a>, too. It can be used for the browser as well as Node.js.</p>\n\n<p>Here is an example on how to use it:</p>\n\n<p>Install it with</p>\n\n<pre><code>npm install clone\n</code></pre>\n\n<p>or package it with <a href=\"https://github.com/ender-js/Ender\" rel=\"noreferrer\">Ender</a>.</p>\n\n<pre><code>ender build clone [...]\n</code></pre>\n\n<p>You can also download the source code manually.</p>\n\n<p>Then you can use it in your source code.</p>\n\n<pre><code>var clone = require('clone');\n\nvar a = { foo: { bar: 'baz' } };  // inital value of a\nvar b = clone(a);                 // clone a -&gt; b\na.foo.bar = 'foo';                // change a\n\nconsole.log(a);                   // { foo: { bar: 'foo' } }\nconsole.log(b);                   // { foo: { bar: 'baz' } }\n</code></pre>\n\n<p>(Disclaimer: I’m the author of the library.)</p>\n",
    "score": 41,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13333781,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/13333781",
    "title": null,
    "body": "<p>Here's a version of ConroyP's answer above that works even if the constructor has required parameters:</p>\n\n<pre><code>//If Object.create isn't already defined, we just do the simple shim,\n//without the second argument, since that's all we need here\nvar object_create = Object.create;\nif (typeof object_create !== 'function') {\n    object_create = function(o) {\n        function F() {}\n        F.prototype = o;\n        return new F();\n    };\n}\n\nfunction deepCopy(obj) {\n    if(obj == null || typeof(obj) !== 'object'){\n        return obj;\n    }\n    //make sure the returned object has the same prototype as the original\n    var ret = object_create(obj.constructor.prototype);\n    for(var key in obj){\n        ret[key] = deepCopy(obj[key]);\n    }\n    return ret;\n}\n</code></pre>\n\n<p>This function is also available in my <a href=\"https://github.com/mbrowne/simpleoo.js\" rel=\"nofollow noreferrer\">simpleoo</a> library.</p>\n\n<p><strong>Edit:</strong></p>\n\n<p>Here's a more robust version (thanks to Justin McCandless this now supports cyclic references as well):</p>\n\n<pre><code>/**\n * Deep copy an object (make copies of all its object properties, sub-properties, etc.)\n * An improved version of http://keithdevens.com/weblog/archive/2007/Jun/07/javascript.clone\n * that doesn't break if the constructor has required parameters\n * \n * It also borrows some code from http://stackoverflow.com/a/11621004/560114\n */ \nfunction deepCopy(src, /* INTERNAL */ _visited, _copiesVisited) {\n    if(src === null || typeof(src) !== 'object'){\n        return src;\n    }\n\n    //Honor native/custom clone methods\n    if(typeof src.clone == 'function'){\n        return src.clone(true);\n    }\n\n    //Special cases:\n    //Date\n    if(src instanceof Date){\n        return new Date(src.getTime());\n    }\n    //RegExp\n    if(src instanceof RegExp){\n        return new RegExp(src);\n    }\n    //DOM Element\n    if(src.nodeType &amp;&amp; typeof src.cloneNode == 'function'){\n        return src.cloneNode(true);\n    }\n\n    // Initialize the visited objects arrays if needed.\n    // This is used to detect cyclic references.\n    if (_visited === undefined){\n        _visited = [];\n        _copiesVisited = [];\n    }\n\n    // Check if this object has already been visited\n    var i, len = _visited.length;\n    for (i = 0; i &lt; len; i++) {\n        // If so, get the copy we already made\n        if (src === _visited[i]) {\n            return _copiesVisited[i];\n        }\n    }\n\n    //Array\n    if (Object.prototype.toString.call(src) == '[object Array]') {\n        //[].slice() by itself would soft clone\n        var ret = src.slice();\n\n        //add it to the visited array\n        _visited.push(src);\n        _copiesVisited.push(ret);\n\n        var i = ret.length;\n        while (i--) {\n            ret[i] = deepCopy(ret[i], _visited, _copiesVisited);\n        }\n        return ret;\n    }\n\n    //If we've reached here, we have a regular object\n\n    //make sure the returned object has the same prototype as the original\n    var proto = (Object.getPrototypeOf ? Object.getPrototypeOf(src): src.__proto__);\n    if (!proto) {\n        proto = src.constructor.prototype; //this line would probably only be reached by very old browsers \n    }\n    var dest = object_create(proto);\n\n    //add this object to the visited array\n    _visited.push(src);\n    _copiesVisited.push(dest);\n\n    for (var key in src) {\n        //Note: this does NOT preserve ES5 property attributes like 'writable', 'enumerable', etc.\n        //For an example of how this could be modified to do so, see the singleMixin() function\n        dest[key] = deepCopy(src[key], _visited, _copiesVisited);\n    }\n    return dest;\n}\n\n//If Object.create isn't already defined, we just do the simple shim,\n//without the second argument, since that's all we need here\nvar object_create = Object.create;\nif (typeof object_create !== 'function') {\n    object_create = function(o) {\n        function F() {}\n        F.prototype = o;\n        return new F();\n    };\n}\n</code></pre>\n",
    "score": 26,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16406986,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/16406986",
    "title": null,
    "body": "<p>I have two good answers depending on whether your objective is to clone a \"plain old JavaScript object\" or not.</p>\n\n<p>Let's also assume that your intention is to create a complete clone with no prototype references back to the source object. If you're not interested in a complete clone, then you can use many of the Object.clone() routines provided in some of the other answers (Crockford's pattern).</p>\n\n<p>For plain old JavaScript objects, a tried and true good way to clone an object in modern runtimes is quite simply:</p>\n\n<pre><code>var clone = JSON.parse(JSON.stringify(obj));\n</code></pre>\n\n<p>Note that the source object must be a pure JSON object. This is to say, all of its nested properties must be scalars (like boolean, string, array, object, etc). Any functions or special objects like RegExp or Date will not be cloned.</p>\n\n<p>Is it efficient? Heck yes. We've tried all kinds of cloning methods and this works best. I'm sure some ninja could conjure up a faster method. But I suspect we're talking about marginal gains.</p>\n\n<p>This approach is just simple and easy to implement. Wrap it into a convenience function and if you really need to squeeze out some gain, go for at a later time.</p>\n\n<p>Now, for non-plain JavaScript objects, there isn't a really simple answer.  In fact, there can't be because of the dynamic nature of JavaScript functions and inner object state. Deep cloning a JSON structure with functions inside requires you recreate those functions and their inner context. And JavaScript simply doesn't have a standardized way of doing that.</p>\n\n<p>The correct way to do this, once again, is via a convenience method that you declare and reuse within your code. The convenience method can be endowed with some understanding of your own objects so you can make sure to properly recreate the graph within the new object.</p>\n\n<p>We're written our own, but the best general approach I've seen is covered here:</p>\n\n<p><a href=\"http://davidwalsh.name/javascript-clone\" rel=\"nofollow\">http://davidwalsh.name/javascript-clone</a></p>\n\n<p>This is the right idea. The author (David Walsh) has commented out the cloning of generalized functions. This is something you might choose to do, depending on your use case.</p>\n\n<p>The main idea is that you need to special handle the instantiation of your functions (or prototypal classes, so to speak) on a per-type basis. Here, he's provided a few examples for RegExp and Date.</p>\n\n<p>Not only is this code brief, but it's also very readable. It's pretty easy to extend.</p>\n\n<p>Is this efficient? Heck yes. Given that the goal is to produce a true deep-copy clone, then you're going to have to walk the members of the source object graph. With this approach, you can tweak exactly which child members to treat and how to manually handle custom types.</p>\n\n<p>So there you go. Two approaches. Both are efficient in my view.</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 134853,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/134853",
    "title": null,
    "body": "<p><code>'#'</code> will take the user back to the top of the page, so I usually go with <code>void(0)</code>.</p>\n\n<p><code>javascript:;</code> also behaves like <code>javascript:void(0);</code></p>\n",
    "score": 238,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 134865,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/134865",
    "title": null,
    "body": "<p>The first one, ideally with a real link to follow in case the user has JavaScript disabled. Just make sure to return false to prevent the click event from firing if the JavaScript executes.</p>\n\n<pre><code>&lt;a href=\"#\" onclick=\"myJsFunc(); return false;\"&gt;Link&lt;/a&gt;\n</code></pre>\n",
    "score": 107,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 134870,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/134870",
    "title": null,
    "body": "<p>Don't lose sight of the fact that your URL may be necessary -- onclick is fired before the reference is followed, so sometimes you will need to process something clientside before navigating off the page.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 134910,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/134910",
    "title": null,
    "body": "<p>Unless you're writing out the link using JavaScript (so that you know it's enabled in the browser), you should ideally be providing a proper link for people who are browsing with JavaScript disabled and then prevent the default action of the link in your onclick event handler. This way those with JavaScript enabled will run the function and those with JavaScript disabled will jump to an appropriate page (or location within the same page) rather than just clicking on the link and having nothing happen.</p>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 134957,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/134957",
    "title": null,
    "body": "<p>Neither.  </p>\n\n<p>If you can have an actual URL that makes sense use that as the HREF.  The onclick won't fire if someone middle-clicks on your link to open a new tab or if they have JavaScript disabled.</p>\n\n<p>If that is not possible, then you should at least inject the anchor tag into the document with JavaScript and the appropriate click event handlers.  </p>\n\n<p>I realize this isn't always possible, but in my opinion it should be striven for in developing any public website.</p>\n\n<p>Check out <em><a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\" rel=\"noreferrer\">Unobtrusive JavaScript</a></em> and <em><a href=\"http://en.wikipedia.org/wiki/Progressive_enhancement\" rel=\"noreferrer\">Progressive enhancement</a></em> (both Wikipedia).</p>\n",
    "score": 1093,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 135120,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/135120",
    "title": null,
    "body": "<p>Ideally you'd do this:</p>\n\n<pre><code>&lt;a href=\"javascriptlessDestination.html\" onclick=\"myJSFunc(); return false;\"&gt;Link text&lt;/a&gt;\n</code></pre>\n\n<p>Or, even better, you'd have the default action link in the HTML, and you'd add the onclick event to the element unobtrusively via JavaScript after the DOM renders, thus ensuring that if JavaScript is not present/utilized you don't have useless event handlers riddling your code and potentially obfuscating (or at least distracting from) your actual content.</p>\n",
    "score": 84,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 135139,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/135139",
    "title": null,
    "body": "<p>It's nice to have your site be accessible by users with JavaScript disabled, in which case the href points to a page that performs the same action as the JavaScript being executed. Otherwise I use \"<strong>#</strong>\" with a \"<code>return false;</code>\" to prevent the default action (scroll to top of the page) as others have mentioned.</p>\n\n<p>Googling for \"<code>javascript:void(0)</code>\" provides a lot of information on this topic. Some of them, like <a href=\"http://blog.reindel.com/2006/08/11/a-hrefjavascriptvoid0-avoid-the-void/\" rel=\"noreferrer\">this one</a> mention reasons to <strong>NOT use void(0)</strong>.</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 135200,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/135200",
    "title": null,
    "body": "<p>Ideally you should have a real URL as fallback for non-JavaScript users.</p>\n\n<p>If this doesn't make sense, use <code>#</code> as the <code>href</code> attribute.  I don't like using the <code>onclick</code> attribute since it embeds JavaScript directly in the HTML.  A better idea would be to use an external JS file and then add the event handler to that link.  You can then prevent the default event so that the URL doesn't change to append the <code>#</code> after the user clicks it.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 135248,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/135248",
    "title": null,
    "body": "<p>Neither if you ask me;</p>\n\n<p>If your \"link\" has the sole purpose of running some JavaScript code it doesn't qualify as a link; rather a piece of text with a JavaScript function coupled to it. I would recommend to use a <code>&lt;span&gt;</code> tag with an <code>onclick handler</code> attached to it and some basic CSS to immitate a link. Links are made for navigation, and if your JavaScript code isn't for navigation it should not be an <code>&lt;a&gt;</code> tag.</p>\n\n<p>Example:</p>\n\n<pre><code>&lt;style type=\"text/css\"&gt;\n    .jsAction {\n        cursor: pointer;\n        color: #00f;\n        text-decoration: underline;\n    }\n&lt;/style&gt;\n\n&lt;p&gt;I want to call a JavaScript function &lt;span class=\"jsAction\" onclick=\"callFunction();\"&gt;here&lt;/span&gt;.&lt;/p&gt;\n</code></pre>\n",
    "score": 69,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 136103,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/136103",
    "title": null,
    "body": "<p>Depending on what you want to accomplish, you could forget the onclick and just use the href:</p>\n\n<pre><code>&lt;a href=\"javascript:myJsFunc()\"&gt;Link Text&lt;/a&gt;\n</code></pre>\n\n<p>It gets around the need to return false. I don't like the <code>#</code> option because, as mentioned, it will take the user to the top of the page. If you have somewhere else to send the user if they don't have JavaScript enabled (which is rare where I work, but a very good idea), then Steve's proposed method works great. </p>\n\n<pre><code>&lt;a href=\"javascriptlessDestination.html\" onclick=\"myJSFunc(); return false;\"&gt;Link text&lt;/a&gt;\n</code></pre>\n\n<p>Lastly, you can use <code>javascript:void(0)</code> if you do not want anyone to go anywhere and if you don't want to call a JavaScript function. It works great if you have an image you want a mouseover event to happen with, but there's not anything for the user to click on.</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 136225,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/136225",
    "title": null,
    "body": "<p>I believe you are presenting a false dichotomy. These are not the only two options. </p>\n\n<p>I agree with Mr. D4V360 who suggested that, even though you are using the anchor tag, you do not truly have an anchor here. All you have is a special section of a document that should behave slightly different. A <code>&lt;span&gt;</code> tag is far more appropriate.</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 136340,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/136340",
    "title": null,
    "body": "<p><strong>If</strong> you use a link as a way to <strong>just</strong> execute some JavaScript code (instead of using a span like D4V360 greatly suggested), just do:</p>\n\n<pre><code>&lt;a href=\"javascript:(function()%7Balert(%22test%22)%3B%7D)()%3B\"&gt;test&lt;/a&gt;\n</code></pre>\n\n<p>If you're using a link with onclick for navigation, don't use href=\"#\" as the fallback when JavaScript is off. It's usually very annoying when the user clicks on the link. Instead, provide the same link the onclick handler would provide if possible. If you can't do that, skip the onclick and just use a JavaScript URI in the href.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 138233,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/138233",
    "title": null,
    "body": "<p>I use <code>javascript:void(0)</code>.</p>\n\n<p>Three reasons. Encouraging the use of <code>#</code> amongst a team of developers inevitably leads to some using the return value of the function called like this:</p>\n\n<pre><code>function doSomething() {\n    //Some code\n    return false;\n}\n</code></pre>\n\n<p>But then they forget to use <code>return doSomething()</code> in the onclick and just use <code>doSomething()</code>.</p>\n\n<p>A second reason for avoiding <code>#</code> is that the final <code>return false;</code> will not execute if the called function throws an error. Hence the developers have to also remember to handle any error appropriately in the called function.</p>\n\n<p>A third reason is that there are cases where the <code>onclick</code> event property is assigned dynamically.  I prefer to be able to call a function or assign it dynamically without having to code the function specifically for one method of attachment or another. Hence my <code>onclick</code> (or on anything) in HTML markup look like this:</p>\n\n<pre><code>onclick=\"someFunc.call(this)\"\n</code></pre>\n\n<p>OR</p>\n\n<pre><code>onclick=\"someFunc.apply(this, arguments)\"\n</code></pre>\n\n<p>Using <code>javascript:void(0)</code> avoids all of the above headaches, and I haven't found any examples of a downside.</p>\n\n<p>So if you're a lone developer then you can clearly make your own choice, but if you work as a team you have to either state:</p>\n\n<p>Use <code>href=\"#\"</code>, make sure <code>onclick</code> always contains <code>return false;</code> at the end, that any called function does not throw an error and if you attach a function dynamically to the <code>onclick</code> property make sure that as well as not throwing an error it returns <code>false</code>.</p>\n\n<p>OR</p>\n\n<p>Use <code>href=\"javascript:void(0)\"</code></p>\n\n<p>The second is clearly much easier to communicate.</p>\n",
    "score": 1841,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 138934,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/138934",
    "title": null,
    "body": "<p>If you are using an <code>&lt;a&gt;</code> element, just use this:</p>\n\n<pre><code>&lt;a href=\"javascript:myJSFunc();\" /&gt;myLink&lt;/a&gt;\n</code></pre>\n\n<p>Personally I'd attach an event handler with JavaScript later on instead (using <code>attachEvent</code> or <code>addEventListener</code> or maybe &lt;put your favorite JavaScript framework here &gt; also).</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 143410,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/143410",
    "title": null,
    "body": "<p>I agree with suggestions elsewhere stating that you should use regular URL in <code>href</code> attribute, then call some JavaScript function in onclick. The flaw is, that they automaticaly add <code>return false</code> after the call.</p>\n\n<p>The problem with this approach is, that if the function will not work or if there will be any problem, the link will become unclickable. Onclick event will always return <code>false</code>, so the normal URL will not be called.</p>\n\n<p>There's very simple solution. Let function return <code>true</code> if it works correctly. Then use the returned value to determine if the click should be cancelled or not:</p>\n\n<p><strong>JavaScript</strong></p>\n\n<pre><code>function doSomething() {\n    alert( 'you clicked on the link' );\n    return true;\n}\n</code></pre>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;a href=\"path/to/some/url\" onclick=\"return !doSomething();\"&gt;link text&lt;/a&gt;\n</code></pre>\n\n<hr>\n\n<p>Note, that I negate the result of the <code>doSomething()</code> function. If it works, it will return <code>true</code>, so it will be negated (<code>false</code>) and the <code>path/to/some/URL</code> will not be called. If the function will return <code>false</code> (for example, the browser doesn't support something used within the function or anything else goes wrong), it is negated to <code>true</code> and the <code>path/to/some/URL</code> is called.</p>\n",
    "score": 48,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 152992,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/152992",
    "title": null,
    "body": "<p>Check the window click event target (it should propagate to the window, as long as it's not captured anywhere else), and ensure that it's not any of the menu elements.  If it's not, then you're outside your menu.</p>\n\n<p>Or check the position of the click, and see if it's contained within the menu area.</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 153047,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/153047",
    "title": null,
    "body": "<blockquote>\n  <p>NOTE: Using <code>stopEventPropagation()</code> is something that should be avoided as it breaks normal event flow in the DOM. See <a href=\"https://css-tricks.com/dangers-stopping-event-propagation/\" rel=\"noreferrer\">this article</a> for more information. Consider using <a href=\"https://stackoverflow.com/a/3028037/561309\">this method</a> instead.</p>\n</blockquote>\n\n<p>Attach a click event to the document body which closes the window. Attach a separate click event to the window which stops propagation to the document body.</p>\n\n<pre><code>$(window).click(function() {\n//Hide the menus if visible\n});\n\n$('#menucontainer').click(function(event){\n    event.stopPropagation();\n});\n</code></pre>\n",
    "score": 1482,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 154068,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/154068",
    "title": null,
    "body": "<p>If you just want to check whether there's any value, you can do </p>\n\n<pre><code>if (strValue) {\n    //do something\n}\n</code></pre>\n\n<p>If you need to check specifically for an empty string over null, I would think checking against <code>\"\"</code> is your best bet, using <a href=\"http://www.webreference.com/js/column26/stricteq.html\" rel=\"noreferrer\">the <code>===</code> operator</a> (so that you know that it is, in fact, a string you're comparing against).</p>\n",
    "score": 2321,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2688,
      "name": "bdukes",
      "reputation": 96310
    }
  },
  {
    "soID": 154073,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/154073",
    "title": null,
    "body": "<p>I would not worry too much about the most <strong>efficient</strong> method. Use what is most clear to your intention. For me that's usually <code>strVar == \"\"</code>.</p>\n\n<p>EDIT: per comment from <a href=\"https://stackoverflow.com/users/20310/constantin\">Constantin</a>, if strVar could some how end up containing an integer 0 value, then that would indeed be one of those intention-clarifying situations.</p>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 14749,
      "name": "Chris Noe",
      "reputation": 15610
    }
  },
  {
    "soID": 154161,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/154161",
    "title": null,
    "body": "<pre><code>var s; // undefined\nvar s = \"\"; // \"\"\ns.length // 0\n</code></pre>\n\n<p>There's nothing representing an empty string in JavaScript. Do a check against either <code>length</code> (if you know that the var will always be a string) or against <code>\"\"</code></p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 20946,
      "name": "roosteronacid",
      "reputation": 12429
    }
  },
  {
    "soID": 154268,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/154268",
    "title": null,
    "body": "<p>I have an application that works similarly to Eran's example, except I attach the click event to the body when I open the menu... Kinda like this:</p>\n\n<pre><code>$('#menucontainer').click(function(event) {\n  $('html').one('click',function() {\n    // Hide the menus\n  });\n\n  event.stopPropagation();\n});\n</code></pre>\n\n<p>More information on <a href=\"http://docs.jquery.com/Events/one\" rel=\"noreferrer\">jQuery's <code>one()</code> function</a></p>\n",
    "score": 110,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 154520,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/154520",
    "title": null,
    "body": "<p>The closest thing you can get to str.Empty (with the precondition that str is a String) is:</p>\n\n<pre><code>if (!str.length) { ...\n</code></pre>\n",
    "score": 64,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 23501,
      "name": "Ates Goral",
      "reputation": 85309
    }
  },
  {
    "soID": 155525,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/155525",
    "title": null,
    "body": "<p>If you need to make sure that the string is not just a bunch of empty spaces (I'm assuming this is for form validation) you need to do a replace on the spaces.</p>\n\n<pre><code>if(str.replace(/\\s/g,\"\") == \"\"){\n}\n</code></pre>\n",
    "score": 78,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 22466,
      "name": "Sugendran",
      "reputation": 1687
    }
  },
  {
    "soID": 166267,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/166267",
    "title": null,
    "body": "<p>You cannot upload files using <a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\" rel=\"noreferrer\">XMLHttpRequest</a> (Ajax). You can simulate the effect using an iframe or Flash. Try the SWF (Flash) uploader <em><a href=\"http://demo.swfupload.org/Documentation/\" rel=\"noreferrer\">SWFUpload</a></em>.</p>\n\n<p>Or the excellent <a href=\"http://malsup.com/jquery/form/\" rel=\"noreferrer\">jQuery Form Plugin</a> that posts your files through an iframe to get the effect.</p>\n",
    "score": 73,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 261,
      "name": "Mattias",
      "reputation": 1775
    }
  },
  {
    "soID": 166284,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/166284",
    "title": null,
    "body": "<h2>2017 Update: It still depends on the browsers <em>your</em> demographic uses.</h2>\n\n<p>An important thing to understand with the \"new\" HTML5 <code>file</code> API is that is <a href=\"http://caniuse.com/fileapi\" rel=\"noreferrer\">wasn't supported until IE 10</a>. If the specific market you're aiming at has a higher-than-average prepensity toward older versions of Windows, you might not have access to it.</p>\n\n<p>Going into 2017, about 5% of browsers are one of IE 6, 7, 8 or 9. If you head into a big corporation (eg this is a B2B tool, or something you're delivering for training) that number can rocket. Just a few months ago —in 2016— I dealt with a company using IE8 on over 60% of their machines.</p>\n\n<p>So before you do anything: <strong>check what browser <em>your</em> users use</strong>. If you don't, you'll learn a quick and painful lesson in why \"works for me\" isn't good enough in a deliverable to a client.</p>\n\n<p>My answer from 2008 follows.</p>\n\n<hr>\n\n<p>However, there are viable non-JS methods of file uploads. You can create an iframe on the page (that you hide with CSS) and then target your form to post to that iframe. The main page doesn't need to move.</p>\n\n<p>It's a \"real\" post so it's not wholly interactive. If you need status you need something server-side to process that. This varies massively depending on your server. <a href=\"http://en.wikipedia.org/wiki/ASP.NET\" rel=\"noreferrer\">ASP.NET</a> has nicer mechanisms. PHP plain fails, but you can use <a href=\"http://en.wikipedia.org/wiki/Perl\" rel=\"noreferrer\">Perl</a> or Apache modifications to get around it.</p>\n\n<p>If you need multiple file-uploads, it's best to do each file one at a time (to overcome maximum file upload limits). Post the first form to the iframe, monitor its progress using the above and when it has finished, post the second form to the iframe, and so on.</p>\n\n<p>Or use a Java/Flash solution. They're a lot more flexible in what they can do with their posts...</p>\n",
    "score": 209,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 12870,
      "name": "Oli",
      "reputation": 101985
    }
  },
  {
    "soID": 178344,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/178344",
    "title": null,
    "body": "<pre><code>if ( $(element).css('display') == 'none' ){\n    // element is hidden\n}\n</code></pre>\n\n<p>Functions don't work with the visibility attribute.</p>\n",
    "score": 675,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 24789,
      "name": "Mote",
      "reputation": 6957
    }
  },
  {
    "soID": 178386,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/178386",
    "title": null,
    "body": "<p>You can use the <a href=\"http://docs.jquery.com/Selectors/hidden\" rel=\"noreferrer\"><code>hidden</code></a> selector:</p>\n\n<pre><code>// Matches all elements that are hidden\n$('element:hidden')\n</code></pre>\n\n<p>And the <a href=\"http://docs.jquery.com/Selectors/visible\" rel=\"noreferrer\"><code>visible</code></a> selector:</p>\n\n<pre><code>// Matches all elements that are visible\n$('element:visible')\n</code></pre>\n",
    "score": 1085,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 18846,
      "name": "twernt",
      "reputation": 13953
    }
  },
  {
    "soID": 178450,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/178450",
    "title": null,
    "body": "<p>Since the question refers to a single element, this code might be more suitable:</p>\n\n<pre><code>// Checks for display:[none|block], ignores visible:[true|false]\n$(element).is(\":visible\"); \n</code></pre>\n\n<p>Same as <a href=\"https://stackoverflow.com/questions/178325/how-do-you-test-if-something-is-hidden-in-jquery/178386#178386\">twernt's suggestion</a>, but applied to a single element; and it <a href=\"https://stackoverflow.com/a/4685330/49942\">matches the algorithm recommended in the jQuery FAQ</a></p>\n",
    "score": 7338,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 25449,
      "name": "Tsvetomir Tsonev",
      "reputation": 76764
    }
  },
  {
    "soID": 204271,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/204271",
    "title": null,
    "body": "<p>There are various ready-made plugins on doing file upload for jQuery.</p>\n\n<p>Doing this kind of uploading hacks is not an enjoyable experience, so people enjoy using ready-made solutions.</p>\n\n<p>Here's few:</p>\n\n<ul>\n<li><a href=\"https://github.com/danielm/uploader/\" rel=\"noreferrer\">JQuery File Uploader</a></li>\n<li><a href=\"http://www.fyneworks.com/jquery/multiple-file-upload/\" rel=\"noreferrer\">Multiple File Upload Plugin</a></li>\n<li><a href=\"http://demo.tutorialzine.com/2013/05/mini-ajax-file-upload-form/\" rel=\"noreferrer\">Mini Multiple File Upload</a></li>\n<li><a href=\"http://blueimp.github.io/jQuery-File-Upload/\" rel=\"noreferrer\">jQuery File Upload</a></li>\n</ul>\n\n<p>You can search for more projects on NPM (using \"jquery-plugin\" as the keyword) or on Github.</p>\n",
    "score": 307,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 21711,
      "name": "Cheery",
      "reputation": 10939
    }
  },
  {
    "soID": 208106,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/208106",
    "title": null,
    "body": "<p>Like this:</p>\n\n<pre><code>delete myObject.regex;\n// or,\ndelete myObject['regex'];\n// or,\nvar prop = \"regex\";\ndelete myObject[prop];\n</code></pre>\n\n<p>For anyone interested in reading more about it, Stack Overflow user <a href=\"https://stackoverflow.com/users/130652/kangax\">kangax</a> has written an incredibly in-depth blog post about the <code>delete</code> statement on their blog, <em><a href=\"http://perfectionkills.com/understanding-delete/\" rel=\"noreferrer\">Understanding delete</a></em>. It is highly recommended.</p>\n",
    "score": 5747,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 9021,
      "name": "nickf",
      "reputation": 321870
    }
  },
  {
    "soID": 208117,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/208117",
    "title": null,
    "body": "<pre><code>var myJSONObject = {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\n\ndelete myJSONObject.regex;\n\nalert ( myJSONObject.regex); // alerts: undefined\n</code></pre>\n\n<p>This works in Firefox and Internet&nbsp;Explorer, and I think it works in all others.</p>\n",
    "score": 151,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6440,
      "name": "redsquare",
      "reputation": 64311
    }
  },
  {
    "soID": 209580,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/209580",
    "title": null,
    "body": "<p>I recommend using a <code>&lt;button&gt;</code> element instead, <em>especially</em> if the control is supposed to produce a change in the data. (Something like a POST.)</p>\n\n<p>It's even better if you inject the elements unobtrusively, a type of progressive enhancement. (See <a href=\"https://stackoverflow.com/questions/134845/href-for-javascript-links-or-javascriptvoid0#134957\">this comment</a>.)</p>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 209618,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/209618",
    "title": null,
    "body": "<p>Usually, you should always have a fall back link to make sure that clients with JavaScript disabled still has some functionality. This concept is called unobtrusive JavaScript. </p>\n\n<p>Example... Let's say you have the following search link:</p>\n\n<pre><code>&lt;a href=\"search.php\" id=\"searchLink\"&gt;Search&lt;/a&gt;\n</code></pre>\n\n<p>You can always do the following:</p>\n\n<pre><code>var link = document.getElementById('searchLink');\n\nlink.onclick = function() {\n    try {\n        // Do Stuff Here        \n    } finally {\n        return false;\n    }\n};\n</code></pre>\n\n<p>That way, people with JavaScript disabled are directed to <code>search.php</code> while your viewers with JavaScript view your enhanced functionality.</p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 215476,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/215476",
    "title": null,
    "body": "<p>A solution I found was to have the <code>&lt;form&gt;</code> target a hidden iFrame. The iFrame can then run JS to display to the user that it's complete (on page load).</p>\n",
    "score": 29,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5441,
      "name": "Darryl Hein",
      "reputation": 59360
    }
  },
  {
    "soID": 221297,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/221297",
    "title": null,
    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var timeStampInMs = window.performance &amp;&amp; window.performance.now &amp;&amp; window.performance.timing &amp;&amp; window.performance.timing.navigationStart ? window.performance.now() + window.performance.timing.navigationStart : Date.now();\r\n\r\nconsole.log(timeStampInMs, Date.now());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>Short &amp; Snazzy:</strong></p>\n\n<pre><code>+ new Date()\n</code></pre>\n\n<p>A unary operator like <code>plus</code> triggers the <code>valueOf</code> method in the <code>Date</code> object and it returns the timestamp (without any alteration).</p>\n\n<p><strong>Details:</strong></p>\n\n<p>On almost all current browsers you can use <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.4\" rel=\"noreferrer\"><code>Date.now()</code></a> to get the UTC timestamp in <strong>milliseconds</strong>; a notable exception to this is IE8 and earlier (see <a href=\"http://kangax.github.io/compat-table/es5/#Date.now\" rel=\"noreferrer\">compatibility table</a>).</p>\n\n<p>You can easily make a shim for this, though:</p>\n\n<pre><code>if (!Date.now) {\n    Date.now = function() { return new Date().getTime(); }\n}\n</code></pre>\n\n<p>To get the timestamp in <strong>seconds</strong>, you can use:</p>\n\n<pre><code>Math.floor(Date.now() / 1000)\n</code></pre>\n\n<p>Or alternatively you could use:</p>\n\n<pre><code>Date.now() / 1000 | 0\n</code></pre>\n\n<p>Which should be slightly faster, but also less readable (also <a href=\"https://stackoverflow.com/questions/7487977/using-bitwise-or-0-to-floor-a-number\">see this answer</a>).</p>\n\n<p>I would recommend using <code>Date.now()</code> (with compatibility shim). It's slightly better because it's shorter &amp; doesn't create a new <code>Date</code> object. However, if you don't want a shim &amp; maximum compatibility, you could use the \"old\" method to get the timestamp in <strong>milliseconds</strong>:</p>\n\n<pre><code>new Date().getTime()\n</code></pre>\n\n<p>Which you can then convert to seconds like this:</p>\n\n<pre><code>Math.round(new Date().getTime()/1000)\n</code></pre>\n\n<p>And you can also use the <code>valueOf</code> method which we showed above:</p>\n\n<pre><code>new Date().valueOf()\n</code></pre>\n",
    "score": 3655,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 11858,
      "name": "daveb",
      "reputation": 47551
    }
  },
  {
    "soID": 221357,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/221357",
    "title": null,
    "body": "<pre><code>var time = Date.now || function() {\n  return +new Date;\n};\n\ntime();\n</code></pre>\n",
    "score": 108,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3355,
      "name": "Staale",
      "reputation": 14653
    }
  },
  {
    "soID": 221771,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/221771",
    "title": null,
    "body": "<pre><code>var timestamp = Number(new Date()); // current time as number\n</code></pre>\n",
    "score": 53,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 28150,
      "name": "aemkei",
      "reputation": 6131
    }
  },
  {
    "soID": 229157,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/229157",
    "title": null,
    "body": "<p>It would be better to use jQuery,</p>\n\n<pre><code>$(document).ready(function() {\n    $(\"a\").css(\"cursor\", \"pointer\");\n});\n</code></pre>\n\n<p>and omit both <code>href=\"#\"</code> and <code>href=\"javascript:void(0)\"</code>.</p>\n\n<p>The anchor tag markup will be like </p>\n\n<pre><code>&lt;a onclick=\"hello()\"&gt;Hello&lt;/a&gt;\n</code></pre>\n\n<p>Simple enough!</p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 229926,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/229926",
    "title": null,
    "body": "<p>Just to pick up the point some of the other have mentioned.</p>\n\n<p>It's much better to bind the event 'onload'a or $('document').ready{}; then to put JavaScript directly into the click event.</p>\n\n<p>In the case that JavaScript isn't available, I would use a href to the current URL, and perhaps an anchor to the position of the link. The page is still be usable for the people without JavaScript those who have won't notice any difference.</p>\n\n<p>As I have it to hand, here is some jQuery which might help:</p>\n\n<pre><code>var [functionName] = function() {\n};\n\njQuery(\"[link id or other selector]\").bind(\"click\", [functionName]);\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 237142,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/237142",
    "title": null,
    "body": "<p>If you are using JavaScript 1.6 or later (Firefox 1.5 or later) you can use <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf\" rel=\"noreferrer\">Array.indexOf</a>.  Otherwise, I think you are going to end up with something similar to your original code.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5922,
      "name": "Glomek",
      "reputation": 17221
    }
  },
  {
    "soID": 237148,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/237148",
    "title": null,
    "body": "<p><a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/indexOf\" rel=\"noreferrer\"><code>indexOf</code></a> maybe, but it's a \"JavaScript extension to the ECMA-262 standard; as such it may not be present in other implementations of the standard.\"</p>\n\n<p>Example:</p>\n\n<pre><code>[1, 2, 3].indexOf(1) =&gt; 0\n[\"foo\", \"bar\", \"baz\"].indexOf(\"bar\") =&gt; 1\n[1, 2, 3].indexOf(4) =&gt; -1\n</code></pre>\n\n<p>AFAICS <a href=\"http://msdn.microsoft.com/en-us/library/k4h76zbx%5C%28VS.85%5C%29.aspx\" rel=\"noreferrer\">Microsoft does <em>not</em> offer some kind of alternative</a> to this, but you can add similar functionality to arrays in Internet Explorer (and other browsers that don't support <code>indexOf</code>) if you want to, as a <a href=\"http://google.com/search?q=indexof%20internet%20explorer\" rel=\"noreferrer\">quick Google search reveals</a> (for example, <a href=\"http://soledadpenades.com/2007/05/17/arrayindexof-in-internet-explorer/\" rel=\"noreferrer\">this one</a>).</p>\n",
    "score": 124,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4771,
      "name": "cic",
      "reputation": 4761
    }
  },
  {
    "soID": 237176,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/237176",
    "title": null,
    "body": "<p><strong>Update: As @orip mentions in comments, the linked benchmark was done in 2008, so results may not be relevant for modern browsers. However, you probably need this to support non-modern browsers anyway and they probably haven't been updated since. Always test for yourself.</strong></p>\n\n<p>As others have said, the iteration through the array is probably the best way, but it <a href=\"http://blogs.oracle.com/greimer/entry/best_way_to_code_a\" rel=\"noreferrer\">has been proven</a> that a decreasing <code>while</code> loop is the fastest way to iterate in JavaScript. So you may want to rewrite your code as follows:</p>\n\n<pre><code>function contains(a, obj) {\n    var i = a.length;\n    while (i--) {\n       if (a[i] === obj) {\n           return true;\n       }\n    }\n    return false;\n}\n</code></pre>\n\n<p>Of course, you may as well extend Array prototype:</p>\n\n<pre><code>Array.prototype.contains = function(obj) {\n    var i = this.length;\n    while (i--) {\n        if (this[i] === obj) {\n            return true;\n        }\n    }\n    return false;\n}\n</code></pre>\n\n<p>And now you can simply use the following:</p>\n\n<pre><code>alert([1, 2, 3].contains(2)); // =&gt; true\nalert([1, 2, 3].contains('2')); // =&gt; false\n</code></pre>\n",
    "score": 322,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 401510,
      "name": "Damir Zekić",
      "reputation": 10854
    }
  },
  {
    "soID": 238862,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/238862",
    "title": null,
    "body": "<p>Here's a <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/indexOf\" rel=\"noreferrer\">JavaScript 1.6 compatible</a> implementation of <code>Array.indexOf</code>:</p>\n\n<pre><code>if (!Array.indexOf)\n{\n  Array.indexOf = [].indexOf ?\n      function (arr, obj, from) { return arr.indexOf(obj, from); }:\n      function (arr, obj, from) { // (for IE6)\n        var l = arr.length,\n            i = from ? parseInt( (1*from) + (from&lt;0 ? l:0), 10) : 0;\n        i = i&lt;0 ? 0 : i;\n        for (; i&lt;l; i++) {\n          if (i in arr  &amp;&amp;  arr[i] === obj) { return i; }\n        }\n        return -1;\n      };\n}\n</code></pre>\n",
    "score": 54,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 16271,
      "name": "Már Örlygsson",
      "reputation": 10600
    }
  },
  {
    "soID": 242833,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/242833",
    "title": null,
    "body": "<p>The most likely reason for use of single vs double in different libraries is programmer preference and/or API consistency.</p>\n\n<p>Other than being consistent, use whichever best suits the string:.</p>\n\n<p>Using the other type of quote as a literal:</p>\n\n<pre><code>alert('Say \"Hello\"');\nalert(\"Say 'Hello'\");\n</code></pre>\n\n<p>…but this can get complicated…</p>\n\n<pre><code>alert(\"It's \\\"game\\\" time.\");\nalert('It\\'s \"game\" time.');\n</code></pre>\n\n<p>Another option, new in ES6, are <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\" rel=\"noreferrer\">Template literals</a> which use the <code>back-tick</code> character:</p>\n\n<pre><code>alert(`Use \"double\" and 'single' quotes in the same string`);\nalert(`The escape the \\` back-tick character in a string`);\n</code></pre>\n\n<p>Template literals offer a clean syntax for: variable interpolation, multi-line strings, and more.</p>\n",
    "score": 882,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 242843,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/242843",
    "title": null,
    "body": "<p>There are people that claim to see performance differences: <a href=\"http://lists.evolt.org/pipermail/javascript/2003-November/006168.html\" rel=\"nofollow noreferrer\">old mailing list thread</a>. But I couldn't find any of them to be confirmed.</p>\n\n<p>The main thing is to look at what kind of quotes (double or single) you are using inside your string. It helps to keep the number of escapes low. For instance when you are working with html inside your strings, it is easier to use single quotes so that you don't have to escape all double quotes around the attributes.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 243148,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/243148",
    "title": null,
    "body": "<p>There is strictly no difference, so it is mostly a matter of taste and of what is in the string (or if the JS code itself is in a string), to keep number of escapes low.</p>\n\n<p>The speed difference legend might come from PHP world, where the two quotes have different behavior.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22675800,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/22675800",
    "title": null,
    "body": "<p>Here is a handy comparison table that shows the conversions that happen and the differences between <code>==</code> and <code>===</code>.</p>\n\n<p>As the conclusion states:</p>\n\n<blockquote>\n  <p>\"Use three equals unless you fully understand the conversions that take\n  place for two-equals.\"</p>\n</blockquote>\n\n<p><a href=\"http://dorey.github.io/JavaScript-Equality-Table/\" rel=\"noreferrer\">http://dorey.github.io/JavaScript-Equality-Table/</a></p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 202,
      "name": "Christian Hagelid",
      "reputation": 6497
    }
  },
  {
    "soID": 351421,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/351421",
    "title": null,
    "body": "<p>Use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\" rel=\"noreferrer\"><code>push()</code></a> function to append to an array:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// initialize array\r\nvar arr = [\r\n    \"Hi\",\r\n    \"Hello\",\r\n    \"Bonjour\"\r\n];\r\n\r\n// append new value to the array\r\narr.push(\"Hola\");\r\n\r\nconsole.log(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Will print</p>\n\n<pre><code>[\"Hi\", \"Hello\", \"Bonjour\", \"Hola\"]\n</code></pre>\n\n<hr>\n\n<p>You can use the <code>push()</code> function to append more than one value to an array in a single call:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// initialize array\r\nvar arr = [ \"Hi\", \"Hello\", \"Bonjour\", \"Hola\" ];\r\n\r\n// append multiple values to the array\r\narr.push(\"Salut\", \"Hey\");\r\n\r\n// display all values\r\nfor (var i = 0; i &lt; arr.length; i++) {\r\n    console.log(arr[i]);\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Will print</p>\n\n<pre><code>Hi\nHello\nBonjour\nHola \nSalut\nHey\n</code></pre>\n\n<hr>\n\n<p><strong>Update</strong></p>\n\n<p>If you want to add the items of one array to another array, you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\" rel=\"noreferrer\"><code>Array.concat()</code></a>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = [\r\n    \"apple\",\r\n    \"banana\",\r\n    \"cherry\"\r\n];\r\n\r\narr = arr.concat([\r\n    \"dragonfruit\",\r\n    \"elderberry\",\r\n    \"fig\"\r\n]);\r\n\r\nconsole.log(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Will print</p>\n\n<pre><code>[\"apple\", \"banana\", \"cherry\", \"dragonfruit\", \"elderberry\", \"fig\"]\n</code></pre>\n",
    "score": 2846,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 762297,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/762297",
    "title": null,
    "body": "<p>There are some subtle differences -- <code>let</code> scoping behaves more like variable scoping does in more or less any other languages. </p>\n\n<p>e.g. It scopes to the enclosing block, They don't exist before they're declared, etc.</p>\n\n<p>However it's worth noting that <code>let</code> is only a part of newer Javascript implementations and has varying degrees of <a href=\"http://caniuse.com/#search=let\" rel=\"noreferrer\">browser support</a>.</p>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 784,
      "name": "olliej",
      "reputation": 24942
    }
  },
  {
    "soID": 406208,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/406208",
    "title": null,
    "body": "<p>To get the path, you can use:</p>\n\n<pre><code>var pathname = window.location.pathname; // Returns path only\nvar url      = window.location.href;     // Returns full URL\n</code></pre>\n",
    "score": 1877,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 956,
      "name": "Ryan Doherty",
      "reputation": 27505
    }
  },
  {
    "soID": 359509,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/359509",
    "title": null,
    "body": "<p>The identity (<code>===</code>) operator behaves identically to the equality (<code>==</code>) operator except no type conversion is done, and the types must be the same to be considered equal.</p>\n\n<p>Reference: <a href=\"http://www.c-point.com/javascript_tutorial/jsgrpComparison.htm\" rel=\"noreferrer\">Javascript Tutorial: Comparison Operators</a></p>\n\n<p>The <code>==</code> operator will compare for equality <em>after doing any necessary type conversions</em>.  The <code>===</code> operator will <strong>not</strong> do the conversion, so if two values are not the same type <code>===</code> will simply return <code>false</code>. Both are equally quick.</p>\n\n<p>To quote Douglas Crockford's excellent <a href=\"http://rads.stackoverflow.com/amzn/click/0596517742\" rel=\"noreferrer\">JavaScript: The Good Parts</a>,</p>\n\n<blockquote>\n  <p>JavaScript has two sets of equality operators: <code>===</code> and <code>!==</code>, and their evil twins <code>==</code> and <code>!=</code>.  The good ones work the way you would expect.  If the two operands are of the same type and have the same value, then <code>===</code> produces <code>true</code> and <code>!==</code> produces <code>false</code>.  The evil twins do the right thing when the operands are of the same type, but if they are of different types, they attempt to coerce the values.  the rules by which they do that are complicated and unmemorable.  These are some of the interesting cases:</p>\n\n<pre><code>'' == '0'           // false\n0 == ''             // true\n0 == '0'            // true\n\nfalse == 'false'    // false\nfalse == '0'        // true\n\nfalse == undefined  // false\nfalse == null       // false\nnull == undefined   // true\n\n' \\t\\r\\n ' == 0     // true\n</code></pre>\n  \n  <p>The lack of transitivity is alarming.  My advice is to never use the evil twins.  Instead, always use <code>===</code> and <code>!==</code>.  All of the comparisons just shown produce <code>false</code> with the <code>===</code> operator.</p>\n</blockquote>\n\n<hr>\n\n<h3>Update:</h3>\n\n<p>A good point was brought up by <a href=\"https://stackoverflow.com/users/165495/casebash\">@Casebash</a> in the comments and in <a href=\"https://stackoverflow.com/users/113570/philippe-leybaert\">@Phillipe Laybaert's</a> <a href=\"https://stackoverflow.com/a/957602/1288\">answer</a> concerning reference types.  For reference types <code>==</code> and <code>===</code> act consistently with one another (except in a special case).</p>\n\n<pre><code>var a = [1,2,3];\nvar b = [1,2,3];\n\nvar c = { x: 1, y: 2 };\nvar d = { x: 1, y: 2 };\n\nvar e = \"text\";\nvar f = \"te\" + \"xt\";\n\na == b            // false\na === b           // false\n\nc == d            // false\nc === d           // false\n\ne == f            // true\ne === f           // true\n</code></pre>\n\n<p>The special case is when you compare a literal with an object that evaluates to the same literal, due to its <code>toString</code> or <code>valueOf</code> method. For example, consider the comparison of a string literal with a string object created by the <code>String</code> constructor.</p>\n\n<pre><code>\"abc\" == new String(\"abc\")    // true\n\"abc\" === new String(\"abc\")   // false\n</code></pre>\n\n<p>Here the <code>==</code> operator is checking the values of the two objects and returning <code>true</code>, but the <code>===</code> is seeing that they're not the same type and returning <code>false</code>.  Which one is correct?  That really depends on what you're trying to compare.  My advice is to bypass the question entirely and just don't use the <code>String</code> constructor to create string objects.</p>\n\n<p><strong>Reference</strong><br>\n<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\" rel=\"noreferrer\">http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3</a></p>\n",
    "score": 4883,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1288,
      "name": "Bill the Lizard",
      "reputation": 250037
    }
  },
  {
    "soID": 1406619,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/1406619",
    "title": null,
    "body": "<p>It's a double <code>not</code> operation.  The first <code>!</code> converts the value to boolean and inverts its logical value.  The second <code>!</code> inverts the logical value back.</p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1288,
      "name": "Bill the Lizard",
      "reputation": 250037
    }
  },
  {
    "soID": 1098067,
    "parentID": 1098040,
    "url": "https://stackoverflow.com/q/1098067",
    "title": null,
    "body": "<p>It will return <code>undefined</code>.</p>\n\n<pre><code>var aa = {hello: \"world\"};\nalert( aa[\"hello\"] );      // popup box with \"world\"\nalert( aa[\"goodbye\"] );    // popup box with \"undefined\"\n</code></pre>\n\n<p><code>undefined</code> is a special constant value.  So you can say, e.g.</p>\n\n<pre><code>// note the three equal signs so that null won't be equal to undefined\nif( aa[\"goodbye\"] === undefined ) {\n    // do something\n}\n</code></pre>\n\n<p>This is probably the best way to check for missing keys.  However, as is pointed out in a comment below, it's theoretically possible that you'd want to have the actual value be <code>undefined</code>.  I've never needed to do this and can't think of a reason offhand why I'd ever want to, but just for the sake of completeness, you can use the <code>in</code> operator</p>\n\n<pre><code>// this works even if you have {\"goodbye\": undefined}\nif( \"goodbye\" in aa ) {\n    // do something\n}\n</code></pre>\n",
    "score": 101,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1694,
      "name": "Eli Courtwright",
      "reputation": 97039
    }
  },
  {
    "soID": 264180,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/264180",
    "title": null,
    "body": "<pre><code>String.prototype.bool = function() {\n    return (/^true$/i).test(this);\n};\nalert(\"true\".bool());\n</code></pre>\n\n<p>For those (see the comments) that would like to extend the String object to get this but are worried about enumerability and are worried about clashing with other code that extends the String object:</p>\n\n<pre><code>Object.defineProperty(String.prototype, \"com_example_bool\", {\n    get : function() {\n        return (/^(true|1)$/i).test(this);\n    }\n});\nalert(\"true\".com_example_bool);\n</code></pre>\n\n<p>(Won't work in older browsers of course and Firefox shows false while Opera, Chrome, Safari and IE show true. <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=720760\" rel=\"noreferrer\">Bug 720760</a>)    </p>\n",
    "score": 100,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 894871,
    "parentID": 894860,
    "url": "https://stackoverflow.com/q/894871",
    "title": null,
    "body": "<pre><code>function read_file(file, delete_after) {\n    delete_after = delete_after || \"my default here\";\n    //rest of code\n}\n</code></pre>\n\n<p>This assigns to <code>delete_after</code> the value of <code>delete_after</code> if it is not a <em>falsey</em> value otherwise it assigns the string <code>\"my default here\"</code>. For more detail, check out <a href=\"http://javascript.crockford.com/survey.html\" rel=\"noreferrer\">Doug Crockford's survey of the language and check out the section on Operators</a>.</p>\n\n<p>This approach does not work if you want to pass in a <em>falsey</em> value i.e. <code>false</code>, <code>null</code>, <code>undefined</code>, <code>0</code> or <code>\"\"</code>. If you require <em>falsey</em> values to be passed in you would need to use the method in <a href=\"https://stackoverflow.com/questions/894860/how-do-i-make-a-default-value-for-a-parameter-to-a-javascript-function/894877#894877\">Tom Ritter's answer</a>.</p>\n\n<p>When dealing with a number of parameters to a function, it is often useful to allow the consumer to pass the parameter arguments in an object and then <em>merge</em> these values with an object that contains the default values for the function</p>\n\n<pre><code>function read_file(values) {\n    values = merge({ \n        delete_after : \"my default here\"\n    }, values || {});\n\n    // rest of code\n}\n\n// simple implementation based on $.extend() from jQuery\nfunction merge() {\n    var obj, name, copy,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length;\n\n    for (; i &lt; length; i++) {\n        if ((obj = arguments[i]) != null) {\n            for (name in obj) {\n                copy = obj[name];\n\n                if (target === copy) {\n                    continue;\n                }\n                else if (copy !== undefined) {\n                    target[name] = copy;\n                }\n            }\n        }\n    }\n\n    return target;\n};\n</code></pre>\n\n<p>to use</p>\n\n<pre><code>// will use the default delete_after value\nread_file({ file: \"my file\" }); \n\n// will override default delete_after value\nread_file({ file: \"my file\", delete_after: \"my value\" }); \n</code></pre>\n",
    "score": 513,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1831,
      "name": "Russ Cam",
      "reputation": 90444
    }
  },
  {
    "soID": 868004,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/868004",
    "title": null,
    "body": "<p>Technically <code>$('&lt;div&gt;&lt;/div&gt;')</code> will 'create' a <code>div</code> element (or more specifically a DIV DOM element) but wont add it to your HTML document. You will then need to use that in combination with the other answers to actually do anything useful with it (such as using the <code>append()</code> method or such like).</p>\n\n<p>The <a href=\"http://docs.jquery.com/Manipulation\" rel=\"noreferrer\">manipulation documentation</a> gives you all the various options on how to add new elements.</p>\n",
    "score": 209,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1908,
      "name": "samjudson",
      "reputation": 42697
    }
  },
  {
    "soID": 263969,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/263969",
    "title": null,
    "body": "<pre><code> var myBool = Boolean.parse(\"true\");\n</code></pre>\n\n<p>or</p>\n\n<pre><code>var myBool = Boolean(\"true\");\n</code></pre>\n\n<p>or </p>\n\n<pre><code>var myBool = !!\"true\";\n</code></pre>\n\n<p>Not sure if the first one is IE specific.</p>\n",
    "score": -15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 400244,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/400244",
    "title": null,
    "body": "<p>As far as I know that only works in Internet&nbsp;Explorer.</p>\n\n<p>See also <em><a href=\"http://www.dynamic-tools.net/toolbox/copyToClipboard/\" rel=\"nofollow noreferrer\">Dynamic Tools - JavaScript Copy To Clipboard</a></em>, but it requires the user to change the configuration first and even then it doesn't seems to work.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2090,
      "name": "Stormenet",
      "reputation": 13550
    }
  },
  {
    "soID": 1145525,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/1145525",
    "title": null,
    "body": "<p><strong>Note: Don't use this in real code.</strong></p>\n\n<p>As an alternative to regular expressions for a simple literal string, you could use</p>\n\n<pre><code>str = \"Test abc test test abc test...\".split(\"abc\").join(\"\");\n</code></pre>\n\n<p>The general pattern is</p>\n\n<pre><code>str.split(search).join(replacement)\n</code></pre>\n\n<p>This used to be faster in some cases than using <code>replaceAll</code> and a regular expression, but that doesn't seem to be the case anymore in modern browsers. So, this should really only be used as a quick hack to avoid needing to escape the regular expression, not in real code.</p>\n",
    "score": 1107,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2214,
      "name": "Matthew Crumley",
      "reputation": 73472
    }
  },
  {
    "soID": 1234337,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/1234337",
    "title": null,
    "body": "<p>If you need to keep the original array because you have other references to it that should be updated too, you can clear it without creating a new array by setting its length to zero:</p>\n\n<pre><code>A.length = 0;\n</code></pre>\n",
    "score": 2101,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2214,
      "name": "Matthew Crumley",
      "reputation": 73472
    }
  },
  {
    "soID": 1987244,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/1987244",
    "title": null,
    "body": "<p>To answer the part about when to use each function, use <code>apply</code> if you don't know the number of arguments you will be passing, or if they are already in an array or array-like object (like the <code>arguments</code> object to forward your own arguments. Use <code>call</code> otherwise, since there's no need to wrap the arguments in an array.</p>\n\n<pre><code>f.call(thisObject, a, b, c); // Fixed number of arguments\n\nf.apply(thisObject, arguments); // Forward this function's arguments\n\nvar args = [];\nwhile (...) {\n    args.push(some_value());\n}\nf.apply(thisObject, args); // Unknown number of arguments\n</code></pre>\n\n<p>When I'm not passing any arguments (like your example), I prefer <code>call</code> since I'm <em>calling</em> the function. <code>apply</code> would imply you are <em>applying</em> the function to the (non-existent) arguments.</p>\n\n<p>There shouldn't be any performance differences, except maybe if you use <code>apply</code> and wrap the arguments in an array (e.g. <code>f.apply(thisObject, [a, b, c])</code> instead of <code>f.call(thisObject, a, b, c)</code>). I haven't tested it, so there could be differences, but it would be very browser specific. It's likely that <code>call</code> is faster if you don't already have the arguments in an array and <code>apply</code> is faster if you do.</p>\n",
    "score": 142,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2214,
      "name": "Matthew Crumley",
      "reputation": 73472
    }
  },
  {
    "soID": 610480,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/610480",
    "title": null,
    "body": "<p>If you are looking to handle the thousands separator, you should really use toLocaleString() from the JavaScript <a href=\"http://www.hunlock.com/blogs/The_Complete_Javascript_Number_Reference\" rel=\"nofollow noreferrer\">Number</a> class since it will format the string for the user's region.</p>\n\n<p>The JavaScript <a href=\"http://www.hunlock.com/blogs/Javascript_Dates-The_Complete_Reference\" rel=\"nofollow noreferrer\">Date</a> class can format localized dates and times.</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 762015,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/762015",
    "title": null,
    "body": "<p>Right now you should almost never use <code>let</code>, because you usually can't count on it being fully supported yet in the wild.</p>\n\n<p>I know that's not the kind of answer you were looking for, but it's probably the most important consideration.  If you have a limited deployment where you know everyone gets 1.7, then you're a lucky fellow.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3043,
      "name": "Joel Coehoorn",
      "reputation": 270269
    }
  },
  {
    "soID": 767651,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/767651",
    "title": null,
    "body": "<p>I noticed someone mentioned jQuery, but I didn't know there was an <a href=\"http://api.jquery.com/jQuery.isArray/\" rel=\"noreferrer\"><code>isArray()</code></a> function. It turns out it was added in version 1.3.</p>\n\n<p>jQuery implements it as Peter suggests:</p>\n\n<pre><code>isArray: function( obj ) {\n    return toString.call(obj) === \"[object Array]\";\n},\n</code></pre>\n\n<p>Having put a lot of faith in jQuery already (especially their techniques for cross-browser compatibility) I will either upgrade to version 1.3 and use their function (providing that upgrading doesn’t cause too many problems) or use this suggested method directly in my code.</p>\n\n<p>Many thanks for the suggestions.</p>\n",
    "score": 69,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3362,
      "name": "Andy McCluggage",
      "reputation": 16566
    }
  },
  {
    "soID": 6925930,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/6925930",
    "title": null,
    "body": "<p>If <code>arr</code> is an array, and <code>val</code> is the value you wish to add use:</p>\n\n<pre><code>arr.push(val);\n</code></pre>\n\n<p>E.g.</p>\n\n<pre><code>arr = ['a', 'b', 'c'];\narr.push('d');\nconsole.log(arr);\n</code></pre>\n\n<p>will log:</p>\n\n<pre><code>['a', 'b', 'c', 'd']\n</code></pre>\n",
    "score": 30,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 523650,
    "parentID": 523643,
    "url": "https://stackoverflow.com/q/523650",
    "title": null,
    "body": "<p>Take a look here: <a href=\"http://longgoldenears.blogspot.com/2007/09/triple-equals-in-javascript.html\" rel=\"noreferrer\">http://longgoldenears.blogspot.com/2007/09/triple-equals-in-javascript.html</a></p>\n\n<p>The 3 equal signs mean \"equality without type coercion\". Using the triple equals, the values must be equal in type as well.</p>\n\n<pre><code>0 == false   // true\n0 === false  // false, because they are of a different type\n1 == \"1\"     // true, automatic type conversion for value only\n1 === \"1\"    // false, because they are of a different type\nnull == undefined // true\nnull === undefined // false\n'0' == false // true\n'0' === false // false\n</code></pre>\n",
    "score": 1526,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3445,
      "name": "sdfx",
      "reputation": 16165
    }
  },
  {
    "soID": 1473742,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/1473742",
    "title": null,
    "body": "<p>Modern browsers have <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf\" rel=\"noreferrer\"><code>Array#indexOf</code></a>, which can do that. Even newer browsers have <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Browser_compatibility\" rel=\"noreferrer\"><code>Array#includes</code></a>, which does <em>exactly</em> that, but unfortunately <a href=\"http://kangax.github.io/compat-table/esnext/#test-Array.prototype.includes\" rel=\"noreferrer\">it's not widely supported</a>. Older browsers can be supported using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill\" rel=\"noreferrer\">this polyfill</a>.</p>\n\n<p>jQuery offers <a href=\"http://api.jquery.com/jquery.inarray/\" rel=\"noreferrer\"><code>$.inArray</code></a>, which is functionally equivalent to <code>Array#indexOf</code>.</p>\n\n<p><a href=\"http://underscorejs.org/#\" rel=\"noreferrer\">underscore.js</a>, a JavaScript utility library, offers <a href=\"http://underscorejs.org/#contains\" rel=\"noreferrer\"><code>_.contains(list, value)</code></a>, alias <code>_.include(list, value)</code>, both of which use <a href=\"http://underscorejs.org/#indexOf\" rel=\"noreferrer\">indexOf</a> internally if passed a JavaScript array.</p>\n\n<p>Some other frameworks offer similar methods:</p>\n\n<ul>\n<li>Dojo Toolkit: <a href=\"http://dojotoolkit.org/reference-guide/dojo/indexOf.html\" rel=\"noreferrer\"><code>dojo.indexOf(array, value, [fromIndex, findLast])</code></a></li>\n<li>Prototype: <a href=\"http://api.prototypejs.org/language/Array/prototype/indexOf/\" rel=\"noreferrer\"><code>array.indexOf(value)</code></a></li>\n<li>MooTools: <a href=\"http://mootools.net/docs/core/Native/Array#Array:indexOf\" rel=\"noreferrer\"><code>array.indexOf(value)</code></a></li>\n<li>MochiKit: <a href=\"http://mochi.github.io/mochikit/doc/html/MochiKit/Base.html#fn-findvalue\" rel=\"noreferrer\"><code>findValue(array, value)</code></a></li>\n<li>MS Ajax: <a href=\"http://www.asp.net/ajaxlibrary/Reference.Array-indexOf-Function.ashx\" rel=\"noreferrer\"><code>array.indexOf(value)</code></a></li>\n<li>Ext: <a href=\"http://docs.sencha.com/extjs/4.0.0/#/api/Ext.Array-method-contains\" rel=\"noreferrer\"><code>Ext.Array.contains(array, value)</code></a></li>\n<li>Lodash: <a href=\"https://lodash.com/docs#includes\" rel=\"noreferrer\"><code>_.includes(array, value, [from])</code></a> (is <code>_.contains</code> prior 4.0.0)</li>\n</ul>\n\n<p>Notice that some frameworks implement this as a function, while others add the function to the array prototype.</p>\n\n<h2>Languages that compile to JavaScript</h2>\n\n<p>In <a href=\"http://coffeescript.org/#try:a%20%3D%20[1%2C%202%2C%203%2C%204]%0Aalert%282%20in%20a%29\" rel=\"noreferrer\">CoffeeScript</a>, the <code>in</code> operator is the equivalent of <code>contains</code>:</p>\n\n<pre><code>a = [1, 2, 3, 4]\nalert(2 in a)\n</code></pre>\n\n<p><a href=\"http://www.dartlang.org/docs/dart-up-and-running/ch03.html#ch03-collections\" rel=\"noreferrer\">Dart</a>:</p>\n\n<pre><code>var mylist = [1, 2, 3];\nassert(mylist.contains(1));\nassert(mylist.indexOf(1) == 0);\n</code></pre>\n",
    "score": 3288,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 767496,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/767496",
    "title": null,
    "body": "<p>Via <a href=\"http://javascript.crockford.com/remedial.html\" rel=\"noreferrer\">Crockford</a>:</p>\n\n<pre><code>function typeOf(value) {\n    var s = typeof value;\n    if (s === 'object') {\n        if (value) {\n            if (value instanceof Array) {\n                s = 'array';\n            }\n        } else {\n            s = 'null';\n        }\n    }\n    return s;\n}\n</code></pre>\n\n<p>The main failing Crockford mentions is an inability to correctly determine arrays that were created in a different context, e.g., <code>window</code>.\nThat page has a much more sophisticated version if this is insufficient.</p>\n",
    "score": 44,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4203,
      "name": "Hank Gay",
      "reputation": 48031
    }
  },
  {
    "soID": 264109,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/264109",
    "title": null,
    "body": "<p>If there's some other code that's converting the boolean value to a string, you need to know exactly how that code stores true/false values. Either that or you need to have access to a function that reverses that conversion.</p>\n\n<p>There are infinitely many ways to represent boolean values in strings (\"true\", \"Y\", \"1\", etc.). So you shouldn't rely on some general-purpose string-to-boolean converter, like Boolean(myValue). You need to use a routine that reverses the original boolean-to-string conversion, whatever that is.</p>\n\n<p>If you know that it converts true booleans to \"true\" strings, then your sample code is fine. Except that you should use === instead of ==, so there's no automatic type conversion.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 684692,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/684692",
    "title": null,
    "body": "<p>You can use the for-in loop as shown by others. However, you also want to make sure that the key you get is an actual property of an object, and doesn't come from the prototype:</p>\n\n<pre><code>for (var key in p) {\n  if (p.hasOwnProperty(key)) {\n    console.log(key + \" -&gt; \" + p[key]);\n  }\n}\n</code></pre>\n",
    "score": 2871,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4465,
      "name": "levik",
      "reputation": 55607
    }
  },
  {
    "soID": 426276,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/426276",
    "title": null,
    "body": "<h2>jQuery 1.6+</h2>\n\n<p>Use the new <a href=\"https://api.jquery.com/prop\" rel=\"noreferrer\"><code>.prop()</code></a> method:</p>\n\n<pre><code>$('.myCheckbox').prop('checked', true);\n$('.myCheckbox').prop('checked', false);\n</code></pre>\n\n<h2>jQuery 1.5.x and below</h2>\n\n<p>The <code>.prop()</code> method is not available, so you need to use <a href=\"https://api.jquery.com/attr\" rel=\"noreferrer\"><code>.attr()</code></a>.</p>\n\n<pre><code>$('.myCheckbox').attr('checked', true);\n$('.myCheckbox').attr('checked', false);\n</code></pre>\n\n<p>Note that this is <a href=\"https://github.com/jquery/jquery/blob/1.5.2/test/unit/attributes.js#L157\" rel=\"noreferrer\">the approach used by jQuery's unit tests prior to version 1.6</a> and is preferable to using</p>\n\n<pre><code>$('.myCheckbox').removeAttr('checked');\n</code></pre>\n\n<p>since the latter will, if the box was initially checked, change the behaviour of a call to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement.reset\" rel=\"noreferrer\"><code>.reset()</code></a> on any form that contains it - a subtle but probably unwelcome behaviour change.</p>\n\n<p>For more context, some incomplete discussion of the changes to the handling of the <code>checked</code> attribute/property in the transition from 1.5.x to 1.6 can be found in the <a href=\"https://blog.jquery.com/2011/05/03/jquery-16-released/\" rel=\"noreferrer\">version 1.6 release notes</a> and the <strong>Attributes vs. Properties</strong> section of the <a href=\"https://api.jquery.com/prop/\" rel=\"noreferrer\"><code>.prop()</code> documentation</a>.</p>\n\n<h2>Any version of jQuery</h2>\n\n<p>If you're working with just one element, you can always just modify the <a href=\"https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement\" rel=\"noreferrer\"><code>HTMLInputElement</code></a>'s <code>.checked</code> property:</p>\n\n<pre><code>$('.myCheckbox')[0].checked = true;\n$('.myCheckbox')[0].checked = false;\n</code></pre>\n\n<p>The benefit to using the <code>.prop()</code> and <code>.attr()</code> methods instead of this is that they will operate on all matched elements.</p>\n",
    "score": 4857,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4642,
      "name": "Xian",
      "reputation": 58034
    }
  },
  {
    "soID": 2818955,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/2818955",
    "title": null,
    "body": "<p>It means <strong>equality without type coercion</strong>\ntype coercion means JavaScript do not automatically convert any other data types to string data types </p>\n\n<pre><code>0==false   // true,although they are different types\n\n0===false  // false,as they are different types\n\n2=='2'    //true,different types,one is string and another is integer but \n            javaScript convert 2 to string by using == operator \n\n2==='2'  //false because by using === operator ,javaScript do not convert \n           integer to string \n\n2===2   //true because both have same value and same types \n</code></pre>\n",
    "score": 33,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4685,
      "name": "Pop Catalin",
      "reputation": 37020
    }
  },
  {
    "soID": 3435763,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/3435763",
    "title": null,
    "body": "<p>Speaking about the global context, both, the <code>var</code> statement and a <code>FunctionDeclaration</code> at the end will create a <em>non-deleteable</em> property on the global object, but the value of both <em>can be overwritten</em>.</p>\n\n<p>The subtle difference between the two ways is that when the <a href=\"http://bclary.com/2004/11/07/#a-10.1.3\" rel=\"noreferrer\">Variable Instantiation</a> process runs (before the actual code execution) all identifiers declared with <code>var</code> will be initialized with <code>undefined</code>, and the ones used by the <code>FunctionDeclaration</code>'s will be available since that moment, for example:</p>\n\n<pre><code> alert(typeof foo); // 'function', it's already available\n alert(typeof bar); // 'undefined'\n function foo () {}\n var bar = function () {};\n alert(typeof bar); // 'function'\n</code></pre>\n\n<p>The assignment of the <code>bar</code> <code>FunctionExpression</code> takes place until runtime.</p>\n\n<p>A global property created by a <code>FunctionDeclaration</code> can be overwritten without any problems just like a variable value, e.g.:</p>\n\n<pre><code> function test () {}\n test = null;\n</code></pre>\n\n<p>Another obvious difference between your two examples is that the first function doesn't have a name, but the second has it, which can be really useful when debugging (i.e. inspecting a call stack).</p>\n\n<p>About your edited first example (<code>foo = function() { alert('hello!'); };</code>), it is an undeclared assignment, I would highly encourage you to always use the <code>var</code> keyword.</p>\n\n<p>With an assignment, without the <code>var</code> statement, if the referenced identifier is not found in the scope chain, it will become a <em>deleteable</em> property of the global object.</p>\n\n<p>Also, undeclared assignments throw a <code>ReferenceError</code> on ECMAScript 5 under <a href=\"http://dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode/\" rel=\"noreferrer\">Strict Mode</a>.</p>\n\n<p>A must read:</p>\n\n<ul>\n<li><a href=\"http://kangax.github.com/nfe/\" rel=\"noreferrer\">Named function expressions demystified</a></li>\n</ul>\n\n<p><strong>Note</strong>: This answer has been merged from <a href=\"https://stackoverflow.com/questions/3435709/why-are-functions-in-javascript-set-to-global-variables-instead-of-plain-function\">another question</a>, in which the major doubt and misconception from the OP was that identifiers declared with a <code>FunctionDeclaration</code>, couldn't be overwritten which is not the case.</p>\n",
    "score": 115,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5445,
      "name": "CMS",
      "reputation": 505315
    }
  },
  {
    "soID": 332897,
    "parentID": 332872,
    "url": "https://stackoverflow.com/q/332897",
    "title": null,
    "body": "<p>You have three options:</p>\n\n<ul>\n<li><p><code>escape()</code> will not encode: <code>@*/+</code></p></li>\n<li><p><code>encodeURI()</code> will not encode: <code>~!@#$&amp;*()=:/,;?+'</code></p></li>\n<li><p><code>encodeURIComponent()</code> will not encode: <code>~!*()'</code></p></li>\n</ul>\n\n<p>But in your case, if you want to pass a <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"noreferrer\">URL</a> into a <code>GET</code> parameter of other page, you should use <code>escape</code> or <code>encodeURIComponent</code>, but not <code>encodeURI</code>.</p>\n\n<p>See Stack Overflow question <em><a href=\"https://stackoverflow.com/questions/75980/best-practice-escape-or-encodeuri-encodeuricomponent\">Best practice: escape, or encodeURI / encodeURIComponent</a></em> for further discussion.</p>\n",
    "score": 1261,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5445,
      "name": "CMS",
      "reputation": 505315
    }
  },
  {
    "soID": 2010948,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/2010948",
    "title": null,
    "body": "<p>Looking at the <a href=\"http://developer.apple.com/safari/library/documentation/iPhone/Conceptual/SafariJSDatabaseGuide/Name-ValueStorage/Name-ValueStorage.html#//apple_ref/doc/uid/TP40007256-CH6-SW1\" rel=\"noreferrer\">Apple</a>, <a href=\"https://developer.mozilla.org/en/DOM/Storage\" rel=\"noreferrer\">Mozilla</a> and <a href=\"http://msdn.microsoft.com/en-us/library/cc197050(VS.85).aspx\" rel=\"noreferrer\">Microsoft</a> documentation, the functionality seems to be limited to handle only string key/value pairs.</p>\n\n<p>A workaround can be to <a href=\"http://www.json.org/js.html\" rel=\"noreferrer\"><em>stringify</em></a> your object before storing it, and later parse it when you retrieve it:</p>\n\n<pre><code>var testObject = { 'one': 1, 'two': 2, 'three': 3 };\n\n// Put the object into storage\nlocalStorage.setItem('testObject', JSON.stringify(testObject));\n\n// Retrieve the object from storage\nvar retrievedObject = localStorage.getItem('testObject');\n\nconsole.log('retrievedObject: ', JSON.parse(retrievedObject));\n</code></pre>\n",
    "score": 2300,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5445,
      "name": "CMS",
      "reputation": 505315
    }
  },
  {
    "soID": 447256,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/447256",
    "title": null,
    "body": "<p><a href=\"https://stackoverflow.com/questions/446594/kill-ajax-requests-using-javascript-using-jquery/446626#446626\">meouw's solution</a> is correct, but if you're are interested in more control then you could try the <a href=\"http://archive.plugins.jquery.com/project/AjaxManager\" rel=\"nofollow noreferrer\">Ajax Manager plugin</a> for jQuery.</p>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5628,
      "name": "Prestaul",
      "reputation": 56637
    }
  },
  {
    "soID": 24744599,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/24744599",
    "title": null,
    "body": "<pre><code>var falsy = /^(?:f(?:alse)?|no?|0+)$/i;\nBoolean.parse = function(val) { \n    return !falsy.test(val) &amp;&amp; !!val;\n};\n</code></pre>\n\n<p>This returns <code>false</code> for every falsy value and <code>true</code> for every truthy value except for <code>'false'</code>, <code>'f'</code>, <code>'no'</code>, <code>'n'</code>, and <code>'0'</code> (case-insensitive).</p>\n\n<pre><code>// False\nBoolean.parse(false);\nBoolean.parse('false');\nBoolean.parse('False');\nBoolean.parse('FALSE');\nBoolean.parse('f');\nBoolean.parse('F');\nBoolean.parse('no');\nBoolean.parse('No');\nBoolean.parse('NO');\nBoolean.parse('n');\nBoolean.parse('N');\nBoolean.parse('0');\nBoolean.parse('');\nBoolean.parse(0);\nBoolean.parse(null);\nBoolean.parse(undefined);\nBoolean.parse(NaN);\nBoolean.parse();\n\n//True\nBoolean.parse(true);\nBoolean.parse('true');\nBoolean.parse('True');\nBoolean.parse('t');\nBoolean.parse('yes');\nBoolean.parse('YES');\nBoolean.parse('y');\nBoolean.parse('1');\nBoolean.parse('foo');\nBoolean.parse({});\nBoolean.parse(1);\nBoolean.parse(-1);\nBoolean.parse(new Date());\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 500509,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/500509",
    "title": null,
    "body": "<p>Because it enumerates through object fields, not indexes. You can get value with index \"length\" and I doubt you want this.</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6258,
      "name": "vava",
      "reputation": 15710
    }
  },
  {
    "soID": 264097,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/264097",
    "title": null,
    "body": "<p>Your solution is fine.</p>\n\n<p>Using <code>===</code> would just be silly in this case, as the field's <code>value</code> will always be a <code>String</code>.</p>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1978419,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/1978419",
    "title": null,
    "body": "<p>You can easily add a <code>contains</code> method to String with this statement:</p>\n\n<pre><code>String.prototype.contains = function(it) { return this.indexOf(it) != -1; };\n</code></pre>\n\n<p><em>Note:</em> see the comments below for a valid argument for not using this. My advice: use your own judgement.</p>\n\n<p>Alternatively:</p>\n\n<pre><code>if (typeof String.prototype.contains === 'undefined') { String.prototype.contains = function(it) { return this.indexOf(it) != -1; }; }\n</code></pre>\n",
    "score": 700,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 7012,
      "name": "Avi Flax",
      "reputation": 31741
    }
  },
  {
    "soID": 500565,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/500565",
    "title": null,
    "body": "<p>In isolation, there is nothing wrong with using for-in on arrays. For-in iterates over the property names of an object, and in the case of an \"out-of-the-box\" array, the properties corresponds to the array indexes. (The built-in propertes like <code>length</code>, <code>toString</code> and so on are not included in the iteration.)</p>\n\n<p>However, if your code (or the framework you are using) add custom properties to arrays or to the array prototype, then these properties will be included in the iteration, which is probably not what you want.</p>\n\n<p>Some  JS frameworks, like Prototype modifies the Array prototype. Other frameworks like JQuery doesn't, so with JQuery you can safely use for-in.</p>\n\n<p>If you are in doubt, you probably shouldn't use for-in. </p>\n\n<p>An alternative way of iterating through an array is using a for-loop:</p>\n\n<pre><code>for (var ix=0;ix&lt;arr.length;ix++) alert(ix);\n</code></pre>\n\n<p>However, this have a different issue. The issue is that a JavaScript array can have \"holes\". If you define <code>arr</code> as:</p>\n\n<pre><code>var arr = [\"hello\"];\narr[100] = \"goodbye\";\n</code></pre>\n\n<p>Then the array have two items, but a length of 101. Using for-in will yield two indexes, while the for-loop will yield 101 indexes, where the 99 has a value of <code>undefined</code>.</p>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 7488,
      "name": "JacquesB",
      "reputation": 30832
    }
  },
  {
    "soID": 1406621,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/1406621",
    "title": null,
    "body": "<p>! is \"boolean not\", which essentially typecasts the value of \"enable\" to its boolean opposite. The second ! flips this value. So, <code>!!enable</code> means \"not not enable,\" giving you the value of <code>enable</code> as a boolean.</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 7675,
      "name": "Annika Backstrom",
      "reputation": 10645
    }
  },
  {
    "soID": 400403,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/400403",
    "title": null,
    "body": "<p>The other methods will copy plain text to the clipboard. To copy HTML (ie, you can paste results into a WSIWYG editor), you can do the following in <strong>IE ONLY</strong>. This is is fundamentally different from the other methods, as the browser actually visibly selects the content.</p>\n\n<pre><code>// create an editable DIV and append the HTML content you want copied\nvar editableDiv = document.createElement(\"div\");\nwith (editableDiv) {\n    contentEditable = true;\n}     \neditableDiv.appendChild(someContentElement);          \n\n// select the editable content and copy it to the clipboard\nvar r = document.body.createTextRange();\nr.moveToElementText(editableDiv);\nr.select();  \nr.execCommand(\"Copy\");\n\n// deselect, so the browser doesn't leave the element visibly selected\nr.moveToElementText(someHiddenDiv);\nr.select();   \n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 7679,
      "name": "Chase Seibert",
      "reputation": 11189
    }
  },
  {
    "soID": 1953622,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/1953622",
    "title": null,
    "body": "<p>Thinking out of the box for a second, if you are in making this call many many times, it is vastly more efficient to use <strike>an associative array</strike> a Map to do lookups using a hash function.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\" rel=\"noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map</a></p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 8136,
      "name": "MattMcKnight",
      "reputation": 6432
    }
  },
  {
    "soID": 894877,
    "parentID": 894860,
    "url": "https://stackoverflow.com/q/894877",
    "title": null,
    "body": "<p>From ES6/ES2015, default parameters is in the language specification.</p>\n\n<pre><code>function read_file(file, delete_after = false) {\n  // Code\n}\n</code></pre>\n\n<p>just works.</p>\n\n<p>Reference: <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/default_parameters\" rel=\"noreferrer\">Default Parameters - MDN</a></p>\n\n<blockquote>\n  <p>Default function parameters allow formal parameters to be initialized with default values if <strong>no value</strong> or <strong>undefined</strong> is passed.</p>\n</blockquote>\n\n<p>You can also <a href=\"http://exploringjs.com/es6/ch_parameter-handling.html#sec_named-parameters\" rel=\"noreferrer\">simulate default <em>named</em> parameters via destructuring</a>:</p>\n\n<pre><code>// the `= {}` below lets you call the function without any parameters\nfunction myFor({ start = 5, end = 1, step = -1 } = {}) { // (A)\n    // Use the variables `start`, `end` and `step` here\n    ···\n}\n</code></pre>\n\n<p><strong>Pre ES2015</strong>,</p>\n\n<p>There are a lot of ways, but this is my preferred method - it lets you pass in anything you want, including false or null. (<code>typeof null == \"object\"</code>)</p>\n\n<pre><code>function foo(a, b)\n{\n  a = typeof a !== 'undefined' ? a : 42;\n  b = typeof b !== 'undefined' ? b : 'default_b';\n  ...\n}\n</code></pre>\n",
    "score": 2613,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 8435,
      "name": "Tom Ritter",
      "reputation": 73144
    }
  },
  {
    "soID": 1406618,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/1406618",
    "title": null,
    "body": "<p>It's a horribly obscure way to do a type conversion.</p>\n\n<p><code>!</code> is <em>NOT</em>.  So <code>!true</code> is <code>false</code>, and <code>!false</code> is <code>true</code>. <code>!0</code> is <code>true</code>, and <code>!1</code> is <code>false</code>.</p>\n\n<p>So you're converting a value to a boolean, then inverting it, then inverting it again.</p>\n\n<pre><code>// Maximum Obscurity:\nval.enabled = !!userId;\n\n// Partial Obscurity:\nval.enabled = (userId != 0) ? true : false;\n\n// And finally, much easier to understand:\nval.enabled = (userId != 0);\n</code></pre>\n",
    "score": 641,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 8435,
      "name": "Tom Ritter",
      "reputation": 73144
    }
  },
  {
    "soID": 681238,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/681238",
    "title": null,
    "body": "<ol>\n<li><p>Just a workaround. Can your server generate some special property in case of no data?</p>\n\n<p>For example:</p>\n\n<pre><code>var a = {empty:true};\n</code></pre>\n\n<p>Then you can easily check it in your AJAX callback code.</p></li>\n<li><p>Another way to check it:</p>\n\n<pre><code>if (a.toSource() === \"({})\")  // then 'a' is empty\n</code></pre></li>\n</ol>\n\n<p><strong>EDIT</strong>:\nIf you use any JSON library (f.e. JSON.js) then you may try JSON.encode() function and test the result against empty value string.</p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 8559,
      "name": "Thevs",
      "reputation": 2451
    }
  },
  {
    "soID": 506004,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/506004",
    "title": null,
    "body": "<h2>One does not simply redirect using jQuery</h2>\n\n<p>jQuery is not necessary, and <strong><code>window.location.replace(...)</code></strong> will best simulate an HTTP redirect.  </p>\n\n<p><code>window.location.replace(...)</code> is better than using <code>window.location.href</code>, because <code>replace()</code> does not keep the originating page in the session history, meaning the user won't get stuck in a never-ending back-button fiasco.</p>\n\n<blockquote>\n  <p>If you want to simulate someone clicking on a link, use\n  <strong><code>location.href</code></strong></p>\n  \n  <p>If you want to simulate an HTTP redirect, use <strong><code>location.replace</code></strong></p>\n</blockquote>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>// similar behavior as an HTTP redirect\nwindow.location.replace(\"http://stackoverflow.com\");\n\n// similar behavior as clicking on a link\nwindow.location.href = \"http://stackoverflow.com\";\n</code></pre>\n",
    "score": 11159,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 8985,
      "name": "Ryan McGeary",
      "reputation": 156833
    }
  },
  {
    "soID": 426314,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/426314",
    "title": null,
    "body": "<pre><code>$(\"#mycheckbox\")[0].checked = true;\n$(\"#mycheckbox\").attr('checked', true);\n$(\"#mycheckbox\").click();\n</code></pre>\n\n<p>The last one will fire the click event for the checkbox, the others will not.\nSo if you have custom code in the onclick event for the checkbox that you want to fire, use the last one.</p>\n",
    "score": 50,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 9443,
      "name": "Chris Brandsma",
      "reputation": 9492
    }
  },
  {
    "soID": 950146,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/950146",
    "title": null,
    "body": "<p>The old versions of JavaScript had no import, include, or require, so many different approaches to this problem have been developed.</p>\n\n<p>But recent versions of JavaScript have standards like <a href=\"http://exploringjs.com/es6/ch_modules.html\" rel=\"noreferrer\">ES6 modules</a> to import modules, although this is not supported yet by most browsers.  Many people using modules with browser applications use <a href=\"https://webpack.github.io/\" rel=\"noreferrer\">build</a> and/or <a href=\"https://babeljs.io/\" rel=\"noreferrer\">transpilation</a> tools to make it practical to use new syntax with features like modules.</p>\n\n<h3>ES6 Imports</h3>\n\n<p>Note that currently (unless you are using the latest MS Edge) this will require the use of build and/or transpilation tools.</p>\n\n<pre><code>// module.js\nexport function hello() {\n  return \"Hello\";\n}\n\n// main.js\nimport {hello} from 'module'; // or './module'\nlet val = hello(); // val is \"Hello\";\n</code></pre>\n\n<h3>Node.js require</h3>\n\n<p>Node.js is currently using a <a href=\"https://nodejs.org/api/modules.html\" rel=\"noreferrer\">module.exports/require</a> system.  You can use <code>babel</code> to transpile if you want the <code>import</code> syntax.    </p>\n\n<pre><code>// mymodule.js\nexports.hello = function() {\n  return \"Hello\";\n}\n\n// server.js\nconst myModule = require('./mymodule');\nlet val = myModule.hello(); // val is \"Hello\"   \n</code></pre>\n\n<p>There are other ways for JavaScript to include external JavaScript contents in browsers that do not require preprocessing.</p>\n\n<h3>Ajax Loading</h3>\n\n<p>Load an additional script with an Ajax call and then use <code>eval</code>. This is the most straightforward way, but it is limited to your domain because of the JavaScript sandbox security model. Using <code>eval</code> also opens the door to bugs and hacks.</p>\n\n<h3>jQuery Loading</h3>\n\n<p>The <a href=\"http://jquery.com/\" rel=\"noreferrer\">jQuery</a> library provides loading functionality <a href=\"http://api.jquery.com/jQuery.getScript/\" rel=\"noreferrer\">in one line</a>:</p>\n\n<pre><code>$.getScript(\"my_lovely_script.js\", function(){\n\n   alert(\"Script loaded but not necessarily executed.\");\n\n});\n</code></pre>\n\n<h3>Dynamic Script Loading</h3>\n\n<p>Add a script tag with the script URL in the HTML. To avoid the overhead of jQuery, this is an ideal solution.</p>\n\n<p>The script can even reside on a different server. Furthermore, the browser evaluates the code. The <code>&lt;script&gt;</code> tag can be injected into either the web page <code>&lt;head&gt;</code>, or inserted just before the closing <code>&lt;/body&gt;</code> tag.</p>\n\n<p>Both of these solutions are discussed and illustrated in <em><a href=\"http://unixpapa.com/js/dyna.html\" rel=\"noreferrer\">JavaScript Madness: Dynamic Script Loading</a></em>.</p>\n\n<h2>Detecting when the script has been executed</h2>\n\n<p>Now, there is a big issue you must know about. Doing that implies that <em>you remotely load the code</em>. Modern web browsers will load the file and keep executing your current script because they load everything asynchronously to improve performance. (This applies to both the jQuery method and the manual dynamic script loading method.)</p>\n\n<p>It means that if you use these tricks directly, <em>you won't be able to use your newly loaded code the next line after you asked it to be loaded</em>, because it will be still loading.</p>\n\n<p>For example: <code>my_lovely_script.js</code> contains <code>MySuperObject</code>:</p>\n\n<pre><code>var js = document.createElement(\"script\");\n\njs.type = \"text/javascript\";\njs.src = jsFilePath;\n\ndocument.body.appendChild(js);\n\nvar s = new MySuperObject();\n\nError : MySuperObject is undefined\n</code></pre>\n\n<p>Then you reload the page hitting <kbd>F5</kbd>. And it works! Confusing...</p>\n\n<p><strong>So what to do about it ?</strong></p>\n\n<p>Well, you can use the hack the author suggests in the link I gave you. In summary, for people in a hurry, he uses an event to run a callback function when the script is loaded. So you can put all the code using the remote library in the callback function. For example:</p>\n\n<pre><code>function loadScript(url, callback)\n{\n    // Adding the script tag to the head as suggested before\n    var head = document.getElementsByTagName('head')[0];\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = url;\n\n    // Then bind the event to the callback function.\n    // There are several events for cross browser compatibility.\n    script.onreadystatechange = callback;\n    script.onload = callback;\n\n    // Fire the loading\n    head.appendChild(script);\n}\n</code></pre>\n\n<p>Then you write the code you want to use AFTER the script is loaded in a <a href=\"http://en.wikipedia.org/wiki/Anonymous_function\" rel=\"noreferrer\">lambda function</a>:</p>\n\n<pre><code>var myPrettyCode = function() {\n\n   // Here, do what ever you want\n};\n</code></pre>\n\n<p>Then you run all that:</p>\n\n<pre><code>loadScript(\"my_lovely_script.js\", myPrettyCode);\n</code></pre>\n\n<p>Note that the script may execute after the DOM has loaded, or before, depending on the browser and whether you included the line <code>script.async = false;</code>. There's a <a href=\"http://www.html5rocks.com/en/tutorials/speed/script-loading/\" rel=\"noreferrer\">great article on Javascript loading in general</a> which discusses this.</p>\n\n<h3>Source Code Merge/Preprocessing</h3>\n\n<p>As mentioned at the top of this answer, many developers now use build/transpilation tool(s) like WebPack, Babel, or Gulp in their projects, allowing them to use new syntax and support modules better, combine files, minify, etc.</p>\n",
    "score": 3042,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 9951,
      "name": "e-satis",
      "reputation": 289819
    }
  },
  {
    "soID": 243687,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/243687",
    "title": null,
    "body": "<p>Strictly speaking, there is no difference in meaning; so the choice comes down to convenience.</p>\n\n<p>Here are several factors that could influence your choise:</p>\n\n<ul>\n<li>House style: Some groups of developers already use one convention or the other.</li>\n<li>Client-side requirements: Will you be using quotes within the strings? (See Ady's answer).</li>\n<li>Server-side language: VB.Net people might choose to use single quotes for java-script so that the scripts can be built server-side (VB.Net uses double-quotes for strings, so the java-script strings are easy to distinguished if they use single quotes).</li>\n<li>Library code: If you're using a library that uses a particular style, you might consider using the same style yourself.</li>\n<li>Personal preference: You might thing one or other style looks better.</li>\n</ul>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 244824,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/244824",
    "title": null,
    "body": "<p>The difference is purely stylistic. I used to be a double-quote Nazi. Now I use single quotes in nearly all cases. There's no practical difference beyond how your editor highlights the syntax.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 446626,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/446626",
    "title": null,
    "body": "<p>Most of the jQuery Ajax methods return an XMLHttpRequest (or the equivalent) object, so you can just use <code>abort()</code>.</p>\n\n<p>See the documentation:</p>\n\n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ms535920%28VS.85%29.aspx\" rel=\"noreferrer\">abort Method</a> (<a href=\"http://en.wikipedia.org/wiki/Microsoft_Developer_Network\" rel=\"noreferrer\">MSDN</a>). Cancels the current HTTP request.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort\" rel=\"noreferrer\">abort()</a> (<a href=\"http://en.wikipedia.org/wiki/Mozilla_Developer_Network\" rel=\"noreferrer\">MDN</a>). If the request has been sent already, this method will abort the request.</li>\n</ul>\n\n\n\n<pre><code>var xhr = $.ajax({\n    type: \"POST\",\n    url: \"some.php\",\n    data: \"name=John&amp;location=Boston\",\n    success: function(msg){\n       alert( \"Data Saved: \" + msg );\n    }\n});\n\n//kill the request\nxhr.abort()\n</code></pre>\n\n<p><strong>UPDATE:</strong>\nAs of jQuery 1.5 the returned object is a wrapper for the native XMLHttpRequest object called jqXHR. This object appears to expose all of the native properties and methods so the above example still works. See <em><a href=\"http://api.jquery.com/jQuery.ajax/#jqXHR\" rel=\"noreferrer\">The jqXHR Object</a></em> (jQuery API documentation).</p>\n\n<p><strong>UPDATE 2:</strong>\nAs of jQuery 3, the ajax method returns a promise without extra methods (like abort), so this will no longer work. See the <a href=\"http://blog.jquery.com/2016/01/14/jquery-3-0-beta-released/\" rel=\"noreferrer\">3.0 blog here</a>. One way around this is to control the xhr object through the <code>xhr</code> property. Here is a crude example:</p>\n\n<pre><code>var xhr = new window.XMLHttpRequest();\nvar request = $.ajax({\n    url : url,\n    xhr : function(){\n        return xhr;\n    }\n});\nxhr.abort();\n</code></pre>\n",
    "score": 1467,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 12161,
      "name": "meouw",
      "reputation": 32782
    }
  },
  {
    "soID": 894929,
    "parentID": 894860,
    "url": "https://stackoverflow.com/q/894929",
    "title": null,
    "body": "<p>I find something simple like this to be much more concise and readable personally.</p>\n\n<pre><code>function pick(arg, def) {\n   return (typeof arg == 'undefined' ? def : arg);\n}\n\nfunction myFunc(x) {\n  x = pick(x, 'my default');\n} \n</code></pre>\n",
    "score": 123,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 12605,
      "name": "tj111",
      "reputation": 16554
    }
  },
  {
    "soID": 1314191,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/1314191",
    "title": null,
    "body": "<p>Bottom line: You can't. </p>\n\n<p>You can fake it, but you won't get type safety. Typically this is done by creating a simple dictionary of string values mapped to integer values. For example:</p>\n\n<pre><code>var DaysEnum = {\"monday\":1, \"tuesday\":2, \"wednesday\":3, ...}\n\nDocument.Write(\"Enumerant: \" + DaysEnum.tuesday);\n</code></pre>\n\n<p>The problem with this approach? You can accidentally redefine your enumerant, or accidentally have duplicate enumerant values. For example:</p>\n\n<pre><code>DaysEnum.monday = 4; // whoops, monday is now thursday, too\n</code></pre>\n\n<p><strong>Edit</strong>  </p>\n\n<blockquote>\n  <p>What about Artur Czajka's Object.freeze? Wouldn't that work to prevent you from setting monday to thursday? – Fry Quad </p>\n</blockquote>\n\n<p>Absolutely, <a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/ff806186%28v=vs.94%29.aspx\" rel=\"noreferrer\"><code>Object.freeze</code></a> would totally fix the problem I complained about. I would like to remind everyone that when I wrote the above, <code>Object.freeze</code> didn't really exist. </p>\n\n<p>Now.... now it opens up some <em>very</em> interesting possibilities. </p>\n\n<p><strong>Edit 2</strong><br>\nHere's a very good library for creating enums. </p>\n\n<p><a href=\"http://www.2ality.com/2011/10/enums.html\" rel=\"noreferrer\">http://www.2ality.com/2011/10/enums.html</a></p>\n\n<p>While it probably doesn't fit every valid use of enums, it goes a very long way. </p>\n",
    "score": 77,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 12716,
      "name": "Randolpho",
      "reputation": 44672
    }
  },
  {
    "soID": 503178,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/503178",
    "title": null,
    "body": "<p>It would help if you were a little more descriptive in what you are trying to do.  If you are trying to generate paged data, there are some options in how you do this.  You can generate separate links for each page that you want to be able to get directly to.</p>\n\n<pre><code>&lt;a href='/path-to-page?page=1' class='pager-link'&gt;1&lt;/a&gt;\n&lt;a href='/path-to-page?page=2' class='pager-link'&gt;2&lt;/a&gt;\n&lt;span class='pager-link current-page'&gt;3&lt;/a&gt;\n...\n</code></pre>\n\n<p>Note that the current page in the example is handled differently in the code and with CSS.</p>\n\n<p>If you want the paged data to be changed via AJAX, this is where jQuery would come in.  What you would do is add a click handler to each of the anchor tags corresponding to a different page.  This click handler would invoke some jQuery code that goes and fetches the next page via AJAX and updates the table with the new data.  The example below assumes that you have a web service that returns the new page data.</p>\n\n<pre><code>$(document).ready( function() {\n    $('a.pager-link').click( function() {\n        var page = $(this).attr('href').split(/\\?/)[1];\n        $.ajax({\n            type: 'POST',\n            url: '/path-to-service',\n            data: page,\n            success: function(content) {\n               $('#myTable').html(content);  // replace\n            }\n        });\n        return false; // to stop link\n    });\n});\n</code></pre>\n",
    "score": 190,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 12950,
      "name": "tvanfosson",
      "reputation": 381756
    }
  },
  {
    "soID": 586189,
    "parentID": 586182,
    "url": "https://stackoverflow.com/q/586189",
    "title": null,
    "body": "<p>What you want is the <strong><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice\" rel=\"noreferrer\"><code>splice</code></a></strong> function on the native array object.</p>\n\n<p><code>arr.splice(index, 0, item);</code> will insert <code>item</code> into <code>arr</code> at the specified index (deleting <code>0</code> items first, that is, it's just an insert).</p>\n\n<p>In this example we will create an array and add an element to it into index 2:</p>\n\n<pre><code>var arr = [];\narr[0] = \"Jani\";\narr[1] = \"Hege\";\narr[2] = \"Stale\";\narr[3] = \"Kai Jim\";\narr[4] = \"Borge\";\n\nconsole.log(arr.join());\narr.splice(2, 0, \"Lene\");\nconsole.log(arr.join());\n</code></pre>\n\n<p>The output of the code above will be:</p>\n\n<pre><code>Jani,Hege,Stale,Kai Jim,Borge\nJani,Hege,Lene,Stale,Kai Jim,Borge\n</code></pre>\n",
    "score": 2694,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 12950,
      "name": "tvanfosson",
      "reputation": 381756
    }
  },
  {
    "soID": 596380,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/596380",
    "title": null,
    "body": "<p>You can use the :checked selector along with the radio selector.</p>\n\n<pre><code> $(\"form:radio:checked\").val();\n</code></pre>\n",
    "score": 62,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 12950,
      "name": "tvanfosson",
      "reputation": 381756
    }
  },
  {
    "soID": 446622,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/446622",
    "title": null,
    "body": "<p>You can't recall the request but you can set a timeout value after which the response will be ignored.  See this <a href=\"http://docs.jquery.com/Ajax/jQuery.ajax#options\" rel=\"noreferrer\">page</a> for jquery AJAX options.  I believe that your error callback will be called if the timeout period is exceeded.  There is already a default timeout on every AJAX request.</p>\n\n<p>You can also use the <a href=\"https://developer.mozilla.org/en/DOM/XMLHttpRequest#abort%28%29\" rel=\"noreferrer\">abort()</a> method on the request object but, while it will cause the client to stop listening for the event, it <strike>may</strike> probably will not stop the server from processing it.</p>\n",
    "score": 88,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 12950,
      "name": "tvanfosson",
      "reputation": 381756
    }
  },
  {
    "soID": 1790364,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/1790364",
    "title": null,
    "body": "<p>The problem with your code is that JavaScript is case sensitive. Your method call</p>\n\n<pre><code>indexof()\n</code></pre>\n\n<p>should actually be</p>\n\n<pre><code>indexOf()\n</code></pre>\n\n<p>Try fixing it and see if that helps:</p>\n\n<pre><code>if (test.indexOf(\"title\") !=-1) {\n    alert(elm);\n    foundLinks++;\n}\n</code></pre>\n",
    "score": 352,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 14514,
      "name": "Victor",
      "reputation": 7199
    }
  },
  {
    "soID": 306608,
    "parentID": 306583,
    "url": "https://stackoverflow.com/q/306608",
    "title": null,
    "body": "<p>Try this code:</p>\n\n<pre><code>$(this).children()[0]\n</code></pre>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 15310,
      "name": "Maxam",
      "reputation": 3337
    }
  },
  {
    "soID": 400437,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/400437",
    "title": null,
    "body": "<p>Looks like you took the code from <a href=\"https://stackoverflow.com/questions/316508/greasemonkey-javascript-copy-to-clipboard-button\" title=\"Greasemonkey\\JavaScript Copy to Clipboard button\">Greasemonkey\\JavaScript Copy to Clipboard button</a> or the original source of this snippet...</p>\n\n<p>This code was for Greasemonkey, hence the unsafeWindow. And I guess the syntax error in IE comes from the <code>const</code> keyword which is specific to Firefox (replace it with <code>var</code>).</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 15459,
      "name": "PhiLho",
      "reputation": 31960
    }
  },
  {
    "soID": 400262,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/400262",
    "title": null,
    "body": "<p>In browsers other than IE you need to use a small flash object to manipulate the clipboard, e.g.</p>\n\n<ul>\n<li><a href=\"http://ajaxian.com/archives/auto-copy-to-clipboard\" rel=\"nofollow noreferrer\">Auto copy to clipboard</a></li>\n</ul>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 15531,
      "name": "Quog",
      "reputation": 424
    }
  },
  {
    "soID": 807980,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/807980",
    "title": null,
    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(new Date().valueOf()); // returns the number of milliseconds since the epoch</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 27,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 15890,
      "name": "Tom Viner",
      "reputation": 3715
    }
  },
  {
    "soID": 1181809,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/1181809",
    "title": null,
    "body": "<p>Often when checking if something is visible or not, you are going to go right ahead immediately and do something else with it. jQuery chaining makes this easy.</p>\n\n<p>So if you have a selector and you want to perform some action on it only if is visible or hidden, you can use <code>filter(\":visible\")</code> or <code>filter(\":hidden\")</code> followed by chaining it with the action you want to take.</p>\n\n<p>So instead of an <code>if</code> statement, like this:</p>\n\n<pre><code>if ($('#btnUpdate').is(\":visible\"))\n{\n     $('#btnUpdate').animate({ width: \"toggle\" });   // Hide button\n}\n</code></pre>\n\n<p>Or more efficient, but even uglier:</p>\n\n<pre><code>var button = $('#btnUpdate');\nif (button.is(\":visible\"))\n{\n     button.animate({ width: \"toggle\" });   // Hide button\n}\n</code></pre>\n\n<p>You can do it all in one line:</p>\n\n<pre><code>$('#btnUpdate').filter(\":visible\").animate({ width: \"toggle\" });\n</code></pre>\n",
    "score": 199,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 16940,
      "name": "Simon_Weaver",
      "reputation": 58352
    }
  },
  {
    "soID": 15354149,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/15354149",
    "title": null,
    "body": "<p>As others have mentioned you can use <code>Array.indexOf</code>, but it isn't available in all browsers. Here's the code from <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf</a> to make it work the same in older browsers.</p>\n\n<blockquote>\n  <p>indexOf is a recent addition to the ECMA-262 standard; as such it may\n  not be present in all browsers. You can work around this by inserting\n  the following code at the beginning of your scripts, allowing use of\n  indexOf in implementations which do not natively support it. This\n  algorithm is exactly the one specified in ECMA-262, 5th edition,\n  assuming Object, TypeError, Number, Math.floor, Math.abs, and Math.max\n  have their original value.</p>\n</blockquote>\n\n<pre><code>if (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {\n        \"use strict\";\n        if (this == null) {\n            throw new TypeError();\n        }\n        var t = Object(this);\n        var len = t.length &gt;&gt;&gt; 0;\n        if (len === 0) {\n            return -1;\n        }\n        var n = 0;\n        if (arguments.length &gt; 1) {\n            n = Number(arguments[1]);\n            if (n != n) { // shortcut for verifying if it's NaN\n                n = 0;\n            } else if (n != 0 &amp;&amp; n != Infinity &amp;&amp; n != -Infinity) {\n                n = (n &gt; 0 || -1) * Math.floor(Math.abs(n));\n            }\n        }\n        if (n &gt;= len) {\n            return -1;\n        }\n        var k = n &gt;= 0 ? n : Math.max(len - Math.abs(n), 0);\n        for (; k &lt; len; k++) {\n            if (k in t &amp;&amp; t[k] === searchElement) {\n                return k;\n            }\n        }\n        return -1;\n    }\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 16940,
      "name": "Simon_Weaver",
      "reputation": 58352
    }
  },
  {
    "soID": 426273,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/426273",
    "title": null,
    "body": "<p>You can do</p>\n\n<pre><code>$('.myCheckbox').attr('checked',true) //Standards compliant\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(\"form #mycheckbox\").attr('checked', true)\n</code></pre>\n\n<p>If you have custom code in the onclick event for the checkbox that you want to fire, use this one instead:</p>\n\n<pre><code>$(\"#mycheckbox\").click();\n</code></pre>\n\n<p>You can uncheck by removing the attribute entirely:</p>\n\n<pre><code>$('.myCheckbox').removeAttr('checked')\n</code></pre>\n\n<p>You can check all checkboxes like this:</p>\n\n<pre><code>$(\".myCheckbox\").each(function(){\n    $(\"#mycheckbox\").click()\n});\n</code></pre>\n",
    "score": 119,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 17744,
      "name": "Micah",
      "reputation": 47973
    }
  },
  {
    "soID": 332888,
    "parentID": 332872,
    "url": "https://stackoverflow.com/q/332888",
    "title": null,
    "body": "<p>Check out the built-in function <code>encodeURIComponent(str)</code> and <code>encodeURI(str)</code>.<br>\nIn your case, this should work:</p>\n\n<pre><code>var myOtherUrl = \n       \"http://example.com/index.html?url=\" + encodeURIComponent(myUrl);\n</code></pre>\n",
    "score": 2285,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 17815,
      "name": "Buu Nguyen",
      "reputation": 37438
    }
  },
  {
    "soID": 1646727,
    "parentID": 1646698,
    "url": "https://stackoverflow.com/q/1646727",
    "title": null,
    "body": "<p>The <code>new</code> keyword creates instances of objects using functions as a constructor. For instance:</p>\n\n<pre><code>var Foo = function() {};\nFoo.prototype.bar = 'bar';\n\nvar foo = new Foo();\nfoo instanceof Foo; // true\n</code></pre>\n\n<p>Instances inherit from the <code>prototype</code> of the constructor function. So given the example above...</p>\n\n<pre><code>foo.bar; // 'bar'\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 17964,
      "name": "eyelidlessness",
      "reputation": 44792
    }
  },
  {
    "soID": 17961343,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/17961343",
    "title": null,
    "body": "<p>I use the following:</p>\n\n<pre><code>function parseBool(b) {\n    return !(/^(false|0)$/i).test(b) &amp;&amp; !!b;\n}\n</code></pre>\n\n<p>This function performs the usual Boolean coercion with the exception of the strings \"false\" (case insensitive) and \"0\".</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16253116,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/16253116",
    "title": null,
    "body": "<p>As a rule of thumb, I would generally use <code>===</code> instead of <code>==</code> (and <code>!==</code> instead of <code>!=</code>).</p>\n\n<p>Reasons are explained in in the answers above and also Douglas Crockford is pretty clear about it (<a href=\"http://rads.stackoverflow.com/amzn/click/0596517742\" rel=\"noreferrer\">JavaScript: The Good Parts</a>).</p>\n\n<p>However there is <strong>one single exception</strong>:\n<code>== null</code> is an efficient way to check for 'is null or undefined':</p>\n\n<pre><code>if( value == null ){\n    // value is either null or undefined\n}\n</code></pre>\n\n<p>For example jQuery 1.9.1 uses this pattern 43 times, and  the <a href=\"http://www.jshint.com/docs/#options\" rel=\"noreferrer\">JSHint syntax checker</a> even provides the <code>eqnull</code> relaxing option for this reason.</p>\n\n<p>From the <a href=\"http://contribute.jquery.org/style-guide/js/\" rel=\"noreferrer\">jQuery style guide</a>:</p>\n\n<blockquote>\n  <p>Strict equality checks (===) should be used in favor of ==. The only\n  exception is when checking for undefined and null by way of null.</p>\n\n<pre><code>// Check for both undefined and null values, for some important reason. \nundefOrNull == null;\n</code></pre>\n</blockquote>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 19166,
      "name": "mar10",
      "reputation": 6872
    }
  },
  {
    "soID": 41492479,
    "parentID": 332872,
    "url": "https://stackoverflow.com/q/41492479",
    "title": null,
    "body": "<p>To prevent double encoding it's a good idea to decode the url before encoding (if you are dealing with user entered urls for example, which might be already encoded).</p>\n\n<p>Lets say we have <code>abc%20xyz 123</code> as input (one space is already encoded):</p>\n\n<pre><code>encodeURI(\"abc%20xyz 123\")            //   wrong: \"abc%2520xyz%20123\"\nencodeURI(decodeURI(\"abc%20xyz 123\")) // correct: \"abc%20xyz%20123\"\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 20128,
      "name": "serg",
      "reputation": 69049
    }
  },
  {
    "soID": 371472,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/371472",
    "title": null,
    "body": "<p>In a typical script there will be no performance difference. More important may be the fact that thousand \"===\" is 1&nbsp;KB heavier than thousand \"==\" :) <a href=\"https://stackoverflow.com/questions/tagged/javascript+performance\">JavaScript profilers</a> can tell you if there is a performance difference in your case.</p>\n\n<p>But personally I would do what JSLint suggests. This recommendation is there not because of performance issues, but because type coercion means <code>('\\t\\r\\n' == 0)</code> is true.</p>\n",
    "score": 40,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 20310,
      "name": "Constantin",
      "reputation": 18721
    }
  },
  {
    "soID": 10605984,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/10605984",
    "title": null,
    "body": "<p>The key, as I understand it, is that Javascript has function level scoping vs the more common C block scoping.</p>\n\n<p><a href=\"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting\">Here is a good article on the subject.</a></p>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 20774,
      "name": "James McMahon",
      "reputation": 26046
    }
  },
  {
    "soID": 1986909,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/1986909",
    "title": null,
    "body": "<p>The difference is that <code>apply</code> lets you invoke the function with <code>arguments</code> as an array; <code>call</code> requires the parameters be listed explicitly. A useful mnemonic is <em>\"<strong>A</strong> for <strong>a</strong>rray and <strong>C</strong> for <strong>c</strong>omma.\"</em></p>\n\n<p>See MDN's documentation on <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply\" rel=\"noreferrer\">apply</a> and <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/call\" rel=\"noreferrer\">call</a>.</p>\n\n<p>Pseudo syntax:</p>\n\n<p><code>theFunction.apply(valueForThis, arrayOfArgs)</code></p>\n\n<p><code>theFunction.call(valueForThis, arg1, arg2, ...)</code></p>\n\n<p>There is also, as of ES6, the possibility to <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator\" rel=\"noreferrer\"><code>spread</code></a> the array for use with the <code>call</code> function, you can see the compatibilities <a href=\"http://kangax.github.io/compat-table/es6/\" rel=\"noreferrer\">here</a>.</p>\n\n<p>Sample code:</p>\n\n<pre><code>function theFunction(name, profession) {\n    console.log(\"My name is \" + name + \" and I am a \" + profession + \".\");\n}\ntheFunction(\"John\", \"fireman\");\ntheFunction.apply(undefined, [\"Susan\", \"school teacher\"]);\ntheFunction.call(undefined, \"Claude\", \"mathematician\");\ntheFunction.call(undefined, ...[\"Matthew\", \"physicist\"]); // used with the spread operator\n\n// Output: \n\n// My name is John and I am a fireman.\n// My name is Susan and I am a school teacher.\n// My name is Claude and I am a mathematician.\n// My name is Matthew and I am a physicist.\n</code></pre>\n",
    "score": 2986,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 20846,
      "name": "flatline",
      "reputation": 30857
    }
  },
  {
    "soID": 11177092,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/11177092",
    "title": null,
    "body": "<p>I'm missing the solution. I'll always use:</p>\n\n<pre><code>if ($('#myCheckBox:checked').val() !== undefined)\n{\n    //Checked\n}\nelse\n{\n    //Not checked\n}\n</code></pre>\n",
    "score": 36,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 21238,
      "name": "Overbeeke",
      "reputation": 1029
    }
  },
  {
    "soID": 610452,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/610452",
    "title": null,
    "body": "<p>I'll add my own discoveries which I've found since I asked:</p>\n\n<ul>\n<li><a href=\"http://locutus.io/php/strings/number_format/index.html\" rel=\"nofollow noreferrer\">number_format (for thousand separator/currency formatting)</a></li>\n<li><a href=\"http://locutus.io/php/strings/sprintf/index.html\" rel=\"nofollow noreferrer\">sprintf (same author as above)</a></li>\n</ul>\n\n<p>Sadly it seems sprintf doesn't handle thousand separator formatting like .NET's string format.</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1144788,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/1144788",
    "title": null,
    "body": "<pre class=\"lang-js prettyprint-override\"><code>str = str.replace(/abc/g, '');\n</code></pre>\n\n<p>In response to comment:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var find = 'abc';\nvar re = new RegExp(find, 'g');\n\nstr = str.replace(re, '');\n</code></pre>\n\n<p>In response to <a href=\"https://stackoverflow.com/users/49153/click-upvote\">Click Upvote</a>'s comment, you could simplify it even more:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function replaceAll(str, find, replace) {\n    return str.replace(new RegExp(find, 'g'), replace);\n}\n</code></pre>\n\n<p><strong>Note:</strong> Regular expressions contain special (meta) characters, and as such it is dangerous to blindly pass an argument in the <code>find</code> function above without pre-processing it to escape those characters.  This is covered in the <a href=\"https://developer.mozilla.org/en-US/\" rel=\"noreferrer\">Mozilla Developer Network</a>'s <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\" rel=\"noreferrer\">JavaScript Guide on Regular Expressions</a>, where they present the following utility function:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function escapeRegExp(str) {\n    return str.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n</code></pre>\n\n<p>So in order to make the <code>replaceAll()</code> function above safer, it could be modified to the following if you also include <code>escapeRegExp</code>:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function replaceAll(str, find, replace) {\n    return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);\n}\n</code></pre>\n",
    "score": 3104,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 21926,
      "name": "Sean Bright",
      "reputation": 79334
    }
  },
  {
    "soID": 500435,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/500435",
    "title": null,
    "body": "<p>Variables declared globally have a global scope. Variables declared within a function are scoped to that function, and shadow global variables of the same name.</p>\n\n<p>(I'm sure there are many subtleties that real JavaScript programmers will be able to point out in other answers. In particular I came across <a href=\"http://www.digital-web.com/articles/scope_in_javascript/\" rel=\"noreferrer\">this page</a> about what exactly <code>this</code> means at any time. Hopefully <a href=\"http://bowles.byethost3.com/javascript/section6/lesson6.htm#part4\" rel=\"noreferrer\">this more introductory link</a> is enough to get you started though.)</p>\n",
    "score": 82,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 22656,
      "name": "Jon Skeet",
      "reputation": 966331
    }
  },
  {
    "soID": 832276,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/832276",
    "title": null,
    "body": "<p>Match against a global regular expression:</p>\n\n<pre><code>anotherString = someString.replace(/cat/g, 'dog');\n</code></pre>\n",
    "score": 36,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 22844,
      "name": "scronide",
      "reputation": 8375
    }
  },
  {
    "soID": 1098955,
    "parentID": 1098040,
    "url": "https://stackoverflow.com/q/1098955",
    "title": null,
    "body": "<p>Checking for undefined-ness is not an accurate way of testing whether a key exists. What if the key exists but the value is actually <code>undefined</code>?</p>\n\n<pre><code>var obj = { key: undefined };\nobj[\"key\"] != undefined // false, but the key exists!\n</code></pre>\n\n<p>You should instead use the <code>in</code> operator:</p>\n\n<pre><code>\"key\" in obj // true, regardless of the actual value\n</code></pre>\n\n<p>If you want to check if a key doesn't exist, remember to use parenthesis:</p>\n\n<pre><code>!(\"key\" in obj) // true if \"key\" doesn't exist in object\n!\"key\" in obj   // ERROR!  Equivalent to \"false in obj\"\n</code></pre>\n\n<p>Or, if you want to particularly test for properties of the object instance (and not inherited properties), use <code>hasOwnProperty</code>:</p>\n\n<pre><code>obj.hasOwnProperty(\"key\") // true\n</code></pre>\n\n<p><strong>EDIT:</strong> For performance comparison between the methods that are <code>in</code>, <code>hasOwnProperty</code> and key is <code>undefined</code>, see this <a href=\"http://jsben.ch/#/WqlIl\" rel=\"noreferrer\"><strong>benchmark</strong></a></p>\n",
    "score": 2542,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 23501,
      "name": "Ates Goral",
      "reputation": 85309
    }
  },
  {
    "soID": 500438,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/500438",
    "title": null,
    "body": "<p>Javascript uses scope chains to establish the scope for a given function. There is typically one global scope, and each function defined has its own nested scope. Any function defined within another function has a local scope which is linked to the outer function. It's always the position in the source that defines the scope.</p>\n\n<p>An element in the scope chain is basically a Map with a pointer to its parent scope.</p>\n\n<p>When resolving a variable, javascript starts at the innermost scope and searches outwards.</p>\n",
    "score": 203,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 23691,
      "name": "krosenvold",
      "reputation": 47653
    }
  },
  {
    "soID": 1643241,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/1643241",
    "title": null,
    "body": "<p>Try this:</p>\n\n<pre><code>$(\"#myselect :selected\").text();\n</code></pre>\n\n<p>For an ASP.NET dropdown you can use the following selector:</p>\n\n<pre><code>$(\"[id*='MyDropDownId'] :selected\")\n</code></pre>\n",
    "score": 204,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 24054,
      "name": "kgiannakakis",
      "reputation": 81126
    }
  },
  {
    "soID": 1646724,
    "parentID": 1646698,
    "url": "https://stackoverflow.com/q/1646724",
    "title": null,
    "body": "<p>Javascript is a dynamic programming language which supports the object oriented programming paradigm, and it use used for creating new instances of object.</p>\n\n<p>Classes are not necessary for objects - Javascript is a <a href=\"http://en.wikipedia.org/wiki/Prototype-based_programming\" rel=\"nofollow noreferrer\">prototype based</a> language.</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 24181,
      "name": "Greg",
      "reputation": 222524
    }
  },
  {
    "soID": 784950,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/784950",
    "title": null,
    "body": "<p>It's just the logical NOT operator, twice - it's used to convert something to boolean, e.g.:</p>\n\n<pre><code>true === !!10\n\nfalse === !!0\n</code></pre>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 24181,
      "name": "Greg",
      "reputation": 222524
    }
  },
  {
    "soID": 336868,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/336868",
    "title": null,
    "body": "<p>The difference is that <code>functionOne</code> is a function expression and so only defined when that line is reached, whereas <code>functionTwo</code> is a function declaration and is defined as soon as its surrounding function or script is executed (due to <a href=\"http://adripofjavascript.com/blog/drips/variable-and-function-hoisting\" rel=\"noreferrer\">hoisting</a>).  </p>\n\n<p>For example, a function expression:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// TypeError: undefined is not a function\r\nfunctionOne();\r\n\r\nvar functionOne = function() {\r\n  console.log(\"Hello!\");\r\n};</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>And, a function declaration:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Outputs: \"Hello!\"\r\nfunctionTwo();\r\n\r\nfunction functionTwo() {\r\n  console.log(\"Hello!\");\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>This also means you can't conditionally define functions using function declarations:</p>\n\n<pre><code>if (test) {\n   // Error or misbehavior\n   function functionThree() { doSomething(); }\n}\n</code></pre>\n\n<p>The above actually defines <code>functionThree</code> irrespective of <code>test</code>'s value &mdash; unless <code>use strict</code> is in effect, in which case it simply raises an error.</p>\n",
    "score": 3951,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 24181,
      "name": "Greg",
      "reputation": 222524
    }
  },
  {
    "soID": 446625,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/446625",
    "title": null,
    "body": "<p>It's an <strong>asynchronous</strong> request, meaning once it's sent it's out there.</p>\n\n<p>In case your server is starting a very expensive operation due to the AJAX request, the best you can do is open your server to listen for cancel requests, and send a separate AJAX request notifying the server to stop whatever it's doing.</p>\n\n<p>Otherwise, simply ignore the AJAX response.</p>\n",
    "score": 60,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 24545,
      "name": "Yuval Adam",
      "reputation": 95218
    }
  },
  {
    "soID": 572913,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/572913",
    "title": null,
    "body": "<p>Javascript doesn't have inheritance in the usual sense, but it has the prototype chain.</p>\n\n<h2>prototype chain</h2>\n\n<p>If a member of an object can't be found in the object it looks for it in the prototype chain. The chain consists of other objects. The prototype of a given instance can be accessed with the <code>__proto__</code> variable. Every object has one, as there is no difference between classes and instances in javascript.</p>\n\n<p>The advantage of adding a function / variable to the prototype is that it has to be in the memory only once, not for every instance.</p>\n\n<p>It's also useful for inheritance, because the prototype chain can consist of many other objects.</p>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 24587,
      "name": "Georg Schölly",
      "reputation": 89149
    }
  },
  {
    "soID": 4333616,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/4333616",
    "title": null,
    "body": "<p>I've had success with something like this:</p>\n\n<pre><code>var $menuscontainer = ...;\n\n$('#trigger').click(function() {\n  $menuscontainer.show();\n\n  $('body').click(function(event) {\n    var $target = $(event.target);\n\n    if ($target.parents('#menuscontainer').length == 0) {\n      $menuscontainer.hide();\n    }\n  });\n});\n</code></pre>\n\n<p>The logic is: when #menuscontainer is shown, bind a click handler to body that hides #menuscontainer only if the target (of the click) isn't a child of #menuscontainer.</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 338053,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/338053",
    "title": null,
    "body": "<p>First I want to correct Greg: <code>function abc(){}</code> is scoped too &mdash; the name <code>abc</code> is defined in the scope where this definition is encountered. Example:</p>\n\n<pre><code>function xyz(){\n  function abc(){};\n  // abc is defined here...\n}\n// ...but not here\n</code></pre>\n\n<p>Secondly, it is possible to combine both styles:</p>\n\n<pre><code>var xyz = function abc(){};\n</code></pre>\n\n<p><code>xyz</code> is going to be defined as usual, <code>abc</code> is undefined in all browsers but Internet&nbsp;Explorer &mdash; do not rely on it being defined. But it will be defined inside its body:</p>\n\n<pre><code>var xyz = function abc(){\n  // xyz is visible here\n  // abc is visible here\n}\n// xyz is visible here\n// abc is undefined here\n</code></pre>\n\n<p>If you want to alias functions on all browsers, use this kind of declaration:</p>\n\n<pre><code>function abc(){};\nvar xyz = abc;\n</code></pre>\n\n<p>In this case, both <code>xyz</code> and <code>abc</code> are aliases of the same object:</p>\n\n<pre><code>console.log(xyz === abc); // prints \"true\"\n</code></pre>\n\n<p>One compelling reason to use the combined style is the \"name\" attribute of function objects (<strong>not supported by Internet&nbsp;Explorer</strong>). Basically when you define a function like</p>\n\n<pre><code>function abc(){};\nconsole.log(abc.name); // prints \"abc\"\n</code></pre>\n\n<p>its name is automatically assigned. But when you define it like</p>\n\n<pre><code>var abc = function(){};\nconsole.log(abc.name); // prints \"\"\n</code></pre>\n\n<p>its name is empty &mdash; we created an anonymous function and assigned it to some variable.</p>\n\n<p>Another good reason to use the combined style is to use a short internal name to refer to itself, while providing a long non-conflicting name for external users:</p>\n\n<pre><code>// Assume really.long.external.scoped is {}\nreally.long.external.scoped.name = function shortcut(n){\n  // Let it call itself recursively:\n  shortcut(n - 1);\n  // ...\n  // Let it pass itself as a callback:\n  someFunction(shortcut);\n  // ...\n}\n</code></pre>\n\n<p>In the example above we can do the same with an external name, but it'll be too unwieldy (and slower).</p>\n\n<p><em>(Another way to refer to itself is to use <code>arguments.callee</code>, which is still relatively long, and not supported in the strict mode.)</em></p>\n\n<p>Deep down, JavaScript treats both statements differently. This is a function declaration:</p>\n\n<pre><code>function abc(){}\n</code></pre>\n\n<p><code>abc</code> here is defined everywhere in the current scope:</p>\n\n<pre><code>// We can call it here\nabc(); // Works\n\n// Yet, it is defined down there.\nfunction abc(){}\n\n// We can call it again\nabc(); // Works\n</code></pre>\n\n<p>Also, it hoisted through a <code>return</code> statement:</p>\n\n<pre><code>// We can call it here\nabc(); // Works\nreturn;\nfunction abc(){}\n</code></pre>\n\n<p>This is a function expression:</p>\n\n<pre><code>var xyz = function(){};\n</code></pre>\n\n<p><code>xyz</code> here is defined from the point of assignment:</p>\n\n<pre><code>// We can't call it here\nxyz(); // UNDEFINED!!!\n\n// Now it is defined\nxyz = function(){}\n\n// We can call it here\nxyz(); // works\n</code></pre>\n\n<p>Function declaration vs. function expression is the real reason why there is a difference demonstrated by Greg.</p>\n\n<p>Fun fact:</p>\n\n<pre><code>var xyz = function abc(){};\nconsole.log(xyz.name); // Prints \"abc\"\n</code></pre>\n\n<p>Personally, I prefer the \"function expression\" declaration because this way I can control the visibility. When I define the function like</p>\n\n<pre><code>var abc = function(){};\n</code></pre>\n\n<p>I know that I defined the function locally. When I define the function like</p>\n\n<pre><code>abc = function(){};\n</code></pre>\n\n<p>I know that I defined it globally providing that I didn't define <code>abc</code> anywhere in the chain of scopes. This style of definition is resilient even when used inside <code>eval()</code>. While the definition</p>\n\n<pre><code>function abc(){};\n</code></pre>\n\n<p>depends on the context and may leave you guessing where it is actually defined, especially in the case of <code>eval()</code> &mdash; the answer is: It depends on the browser.</p>\n",
    "score": 1649,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 26394,
      "name": "Eugene Lazutkin",
      "reputation": 35254
    }
  },
  {
    "soID": 1179473,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/1179473",
    "title": null,
    "body": "<p>If you're doing inline JavaScript (arguably a \"bad\" thing, but avoiding that discussion) <strong>single</strong> quotes are your only option for string literals, I believe.</p>\n\n<p>e.g., this works fine:</p>\n\n<pre><code>&lt;a onclick=\"alert('hi');\"&gt;hi&lt;/a&gt;\n</code></pre>\n\n<p>But you can't wrap the \"hi\" in double quotes, via any escaping method I'm aware of.  Even <b><code>&amp;quot;</code></b> which would have been my best guess (since you're escaping quotes in an attribute value of HTML) doesn't work for me in Firefox.  <b><code>\\\"</code></b> won't work either because at this point you're escaping for HTML, not JavaScript.</p>\n\n<p>So, if the name of the game is consistency, and you're going to do some inline JavaScript in parts of your app, I think single quotes are the winner.  Someone please correct me if I'm wrong though.</p>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 264037,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/264037",
    "title": null,
    "body": "<h1>Do:</h1>\n\n<pre><code>var isTrueSet = (myValue == 'true');\n</code></pre>\n\n<hr>\n\n<h2>Unnecessary:</h2>\n\n<p>You could make it stricter by using the identity operator (<code>===</code>), which doesn't make any implicit type conversions when the compared variables have different types, instead of the equality operator (<code>==</code>), which does:</p>\n\n<pre><code>var isTrueSet = (myValue === 'true');\n</code></pre>\n\n<hr>\n\n<h2>Don't:</h2>\n\n<p>You should probably <strong>be cautious about using these two methods</strong> for your specific needs:</p>\n\n<pre><code>var myBool = Boolean(\"false\");  // == true\n\nvar myBool = !!\"false\";  // == true\n</code></pre>\n\n<p>Any string which isn't the empty string will evaluate to <code>true</code> by using them. Although they're the cleanest methods I can think of concerning to boolean conversion, I think they're not what you're looking for.</p>\n",
    "score": 1901,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 306892,
    "parentID": 306583,
    "url": "https://stackoverflow.com/q/306892",
    "title": null,
    "body": "<p>You could also use</p>\n\n<pre><code>$(this).find('img');\n</code></pre>\n\n<p>which would return all <code>img</code>s that are descendants of the <code>div</code></p>\n",
    "score": 420,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 28376,
      "name": "philnash",
      "reputation": 25610
    }
  },
  {
    "soID": 264105,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/264105",
    "title": null,
    "body": "<p>You need to separate (in your thinking) the value of your selections and the representation of that value. </p>\n\n<p>Pick a point in the JavaScript logic where they need to transition from string sentinels to native type and do a comparison there, preferably where it only gets done once for each value that needs to be converted. Remember to address what needs to happen if the string sentinel is not one the script knows (i.e. do you default to true or to false?)</p>\n\n<p>In other words, yes, you need to depend on the string's value. :-)</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1527834,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/1527834",
    "title": null,
    "body": "<pre><code>var randomnumber = Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\n</code></pre>\n",
    "score": 370,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 29407,
      "name": "Darin Dimitrov",
      "reputation": 748619
    }
  },
  {
    "soID": 397583,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/397583",
    "title": null,
    "body": "<p>The problem is that you might easily get into trouble since JavaScript have a lot of implicit conversions meaning...</p>\n\n<pre><code>var x = 0;\nvar isTrue = x == null;\nvar isFalse = x === null;\n</code></pre>\n\n<p>Which pretty soon becomes a problem. The best sample of why implicit conversion is \"evil\" can be taken from this code in <a href=\"http://en.wikipedia.org/wiki/Microsoft_Foundation_Class_Library\" rel=\"noreferrer\">MFC</a> / C++ which actually will compile due to an implicit conversion from CString to HANDLE which is a pointer typedef type...</p>\n\n<pre><code>CString x;\ndelete x;\n</code></pre>\n\n<p>Which obviously during runtime does <em>very</em> undefined things...</p>\n\n<p>Google for implicit conversions in C++ and <a href=\"http://en.wikipedia.org/wiki/Standard_Template_Library\" rel=\"noreferrer\">STL</a> to get some of the arguments against it...</p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 29746,
      "name": "Thomas Hansen",
      "reputation": 4241
    }
  },
  {
    "soID": 14734001,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/14734001",
    "title": null,
    "body": "<p>A function declaration and a function expression assigned to a variable behave the same once the binding is established.</p>\n\n<p>There is a difference however at <em>how</em> and <em>when</em> the function object is actually associated with its variable. This difference is due to the mechanism called <em>variable hoisting</em> in JavaScript.</p>\n\n<p>Basically, all function declarations and variable declarations are hoisted to the top of the <em>function</em> in which the declaration occurs (this is why we say that JavaScript has <em>function scope</em>).</p>\n\n<ul>\n<li><p>When a function declaration is hoisted, the function body \"follows\"\nso when the function body is evaluated, the variable will immediately\nbe bound to a function object.</p></li>\n<li><p>When a variable declaration is hoisted, the initialization does <em>not</em>\nfollow, but is \"left behind\". The variable is initialized to\n<code>undefined</code> at the start of the function body, and will be <em>assigned</em>\na value at its original location in the code. (Actually, it will be assigned a value at <em>every</em> location where a declaration of a variable with the same name occurs.)</p></li>\n</ul>\n\n<p>The order of hoisting is also important: function declarations take precedence over variable declarations with the same name, and the last function declaration takes precedence over previous function declarations with the same name.</p>\n\n<p>Some examples...</p>\n\n<pre><code>var foo = 1;\nfunction bar() {\n  if (!foo) {\n    var foo = 10 }\n  return foo; }\nbar() // 10\n</code></pre>\n\n<p>Variable <code>foo</code> is hoisted to the top of the function, initialized to <code>undefined</code>, so that <code>!foo</code> is <code>true</code>, so <code>foo</code> is assigned <code>10</code>. The <code>foo</code> outside of <code>bar</code>'s scope plays no role and is untouched. </p>\n\n<pre><code>function f() {\n  return a; \n  function a() {return 1}; \n  var a = 4;\n  function a() {return 2}}\nf()() // 2\n\nfunction f() {\n  return a;\n  var a = 4;\n  function a() {return 1};\n  function a() {return 2}}\nf()() // 2\n</code></pre>\n\n<p>Function declarations take precedence over variable declarations, and the last function declaration \"sticks\".</p>\n\n<pre><code>function f() {\n  var a = 4;\n  function a() {return 1}; \n  function a() {return 2}; \n  return a; }\nf() // 4\n</code></pre>\n\n<p>In this example <code>a</code> is initialized with the function object resulting from evaluating the second function declaration, and then is assigned <code>4</code>.</p>\n\n<pre><code>var a = 1;\nfunction b() {\n  a = 10;\n  return;\n  function a() {}}\nb();\na // 1\n</code></pre>\n\n<p>Here the function declaration is hoisted first, declaring and initializing variable <code>a</code>. Next, this variable is assigned <code>10</code>. In other words: the assignment does not assign to outer variable <code>a</code>.</p>\n",
    "score": 27,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 30316,
      "name": "eljenso",
      "reputation": 10787
    }
  },
  {
    "soID": 572904,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/572904",
    "title": null,
    "body": "<p><code>prototype</code> allows you to make classes. if you do not use <code>prototype</code> then it becomes a static.</p>\n\n<p>Here is a short example.</p>\n\n<pre><code>var obj = new Object();\nobj.test = function() { alert('Hello?'); };\n</code></pre>\n\n<p>In the above case, you have static funcation call test. This function can be accessed only by obj.test where you can imagine obj to be a class.</p>\n\n<p>where as in the below code</p>\n\n<pre><code>function obj()\n{\n}\n\nobj.prototype.test = function() { alert('Hello?'); };\nvar obj2 = new obj();\nobj2.test();\n</code></pre>\n\n<p>The obj has become a class which can now be instantiated. Multiple instances of obj can exist and they all have the <code>test</code> function.</p>\n\n<p>The above is my understanding. I am making it a community wiki, so people can correct me if I am wrong.</p>\n",
    "score": 60,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 37220122,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/37220122",
    "title": null,
    "body": "<p>Just because I didn't see <a href=\"http://en.wikipedia.org/wiki/AngularJS\" rel=\"noreferrer\">AngularJS</a> mentioned and thought that people might want to know...</p>\n\n<p><a href=\"https://docs.angularjs.org/api/ng/function/angular.copy\" rel=\"noreferrer\"><code>angular.copy</code></a> also provides a method of deep copying objects and arrays.</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 244842,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/244842",
    "title": null,
    "body": "<p>The <strong>only</strong> difference is demonstrated in the following:</p>\n\n<pre><code>'A string that\\'s single quoted'\n\n\"A string that's double quoted\"\n</code></pre>\n\n<p>So, it's only down to how much quote escaping you want to do. Obviously the same applies to double quotes in double quoted strings.</p>\n",
    "score": 103,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 287917,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/287917",
    "title": null,
    "body": "<p>This isn't much of an answer, but I'd say that works just fine, personally</p>\n\n<p>Having said that, since it doesn't matter what the values are (you've used 0, 1, 2), I'd use a meaningful string in case you ever wanted to output the current value.</p>\n",
    "score": 528,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 31582,
      "name": "Gareth",
      "reputation": 74159
    }
  },
  {
    "soID": 805111,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/805111",
    "title": null,
    "body": "<p>You can do this...</p>\n\n<pre><code>var string = 'This is\\n' +\n'a multiline\\n' + \n'string';\n</code></pre>\n",
    "score": 171,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 901119,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/901119",
    "title": null,
    "body": "<p>If you're using jQuery, you can use a library, such as <a href=\"http://benalman.com/projects/jquery-bbq-plugin/\" rel=\"noreferrer\">jQuery BBQ: Back Button &amp; Query Library</a>.</p>\n\n<blockquote>\n  <p>...jQuery BBQ provides a full <code>.deparam()</code> method, along with both hash state management, and fragment / query string parse and merge utility methods.</p>\n</blockquote>\n\n<p>Edit: Adding Deparam Example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code> var DeparamExample = function() {\r\n            var params = $.deparam.querystring();\r\n\r\n            //nameofparam is the name of a param from url\r\n            //code below will get param if ajax refresh with hash\r\n            if (typeof params.nameofparam == 'undefined') {\r\n                params = jQuery.deparam.fragment(window.location.href);\r\n            }\r\n            \r\n            if (typeof params.nameofparam != 'undefined') {\r\n                var paramValue = params.nameofparam.toString();\r\n                  \r\n            }\r\n        };</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>If you want to just use plain JavaScript, you could use...</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var getParamValue = (function() {\n    var params;\n    var resetParams = function() {\n            var query = window.location.search;\n            var regex = /[?&amp;;](.+?)=([^&amp;;]+)/g;\n            var match;\n\n            params = {};\n\n            if (query) {\n                while (match = regex.exec(query)) {\n                    params[match[1]] = decodeURIComponent(match[2]);\n                }\n            }    \n        };\n\n    window.addEventListener\n    &amp;&amp; window.addEventListener('popstate', resetParams);\n\n    resetParams();\n\n    return function(param) {\n        return params.hasOwnProperty(param) ? params[param] : null;\n    }\n\n})();​\n</code></pre>\n\n<p>Because of the new HTML History API and specifically <code>history.pushState()</code> and <code>history.replaceState()</code>, the URL can change which will invalidate the cache of parameters and their values.</p>\n\n<p>This version will update its internal cache of parameters each time the history changes.</p>\n",
    "score": 160,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 728400,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/728400",
    "title": null,
    "body": "<p>Here is a function you can use. </p>\n\n<pre><code>function clone(obj) {\n    if(obj == null || typeof(obj) != 'object')\n        return obj;    \n    var temp = new obj.constructor(); \n    for(var key in obj)\n        temp[key] = clone(obj[key]);    \n    return temp;\n}\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 306904,
    "parentID": 306583,
    "url": "https://stackoverflow.com/q/306904",
    "title": null,
    "body": "<p>The jQuery constructor accepts a 2nd parameter called <a href=\"http://api.jquery.com/jQuery/#jQuery-selector-context\" rel=\"noreferrer\"><code>context</code></a> which can be used to override the context of the selection. </p>\n\n<pre><code>jQuery(\"img\", this);\n</code></pre>\n\n<p>Which is the same as using <a href=\"http://api.jquery.com/find\" rel=\"noreferrer\"><code>.find()</code></a> like this:</p>\n\n<pre><code>jQuery(this).find(\"img\");\n</code></pre>\n\n<p>If the imgs you desire are <strong>only</strong> direct descendants of the clicked element, you can also use <a href=\"http://api.jquery.com/children\" rel=\"noreferrer\"><code>.children()</code></a>:</p>\n\n<pre><code>jQuery(this).children(\"img\");\n</code></pre>\n",
    "score": 2555,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 33036,
      "name": "Simon",
      "reputation": 32190
    }
  },
  {
    "soID": 1279963,
    "parentID": 1279957,
    "url": "https://stackoverflow.com/q/1279963",
    "title": null,
    "body": "<p>You may want to use the <a href=\"http://api.jquery.com/appendTo/\" rel=\"noreferrer\"><code>appendTo</code></a> function (which adds to the end of the element):</p>\n\n<pre><code>$(\"#source\").appendTo(\"#destination\");\n</code></pre>\n\n<p>Alternatively you could use the <a href=\"http://api.jquery.com/prependTo/\" rel=\"noreferrer\"><code>prependTo</code></a> function (which adds to the beginning of the element):</p>\n\n<pre><code>$(\"#source\").prependTo(\"#destination\");\n</code></pre>\n",
    "score": 1423,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 34211,
      "name": "Andrew Hare",
      "reputation": 238627
    }
  },
  {
    "soID": 500532,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/500532",
    "title": null,
    "body": "<p>Because for...in enumerates through the object that holds the array, not the array itself. If I add a function to the arrays prototype chain, that will also be included. I.e.</p>\n\n<pre><code>Array.prototype.myOwnFunction = function() { alert(this); }\na = new Array();\na[0] = 'foo';\na[1] = 'bar';\nfor(x in a){\n document.write(x + ' = ' + a[x]);\n}\n</code></pre>\n\n<p>This will write:</p>\n\n<pre>\n0 = foo\n1 = bar\nmyOwnFunction = function() { alert(this); }\n</pre>\n\n<p>And since you can never be sure that nothing will be added to the prototype chain just use a for loop to enumerate the array:</p>\n\n<pre><code>for(i=0,x=a.length;i&lt;x;i++){\n document.write(i + ' = ' + a[i]);\n}\n</code></pre>\n\n<p>This will write:</p>\n\n<pre>\n0 = foo\n1 = bar\n</pre>\n",
    "score": 44,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 35197,
      "name": "Pim Jager",
      "reputation": 24937
    }
  },
  {
    "soID": 728694,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/728694",
    "title": null,
    "body": "<p>To do this for any object in JavaScript will not be simple or straightforward. You will run into the problem of erroneously picking up attributes from the object's prototype that should be left in the prototype and not copied to the new instance. If, for instance, you are adding a <code>clone</code> method to <code>Object.prototype</code>, as some answers depict, you will need to explicitly skip that attribute. But what if there are other additional methods added to <code>Object.prototype</code>, or other intermediate prototypes, that you don't know about? In that case, you will copy attributes you shouldn't, so you need to detect unforeseen, non-local attributes with the <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Object/hasOwnProperty\" rel=\"noreferrer\" title=\"Mozilla JavaScript Reference: Object.hasOwnProperty\"><code>hasOwnProperty</code></a> method.</p>\n\n<p>In addition to non-enumerable attributes, you'll encounter a tougher problem when you try to copy objects that have hidden properties. For example, <code>prototype</code> is a hidden property of a function. Also, an object's prototype is referenced with the attribute <code>__proto__</code>, which is also hidden, and will not be copied by a for/in loop iterating over the source object's attributes. I think <code>__proto__</code> might be specific to Firefox's JavaScript interpreter and it may be something different in other browsers, but you get the picture. Not everything is enumerable. You can copy a hidden attribute if you know its name, but I don't know of any way to discover it automatically.</p>\n\n<p>Yet another snag in the quest for an elegant solution is the problem of setting up the prototype inheritance correctly. If your source object's prototype is <code>Object</code>, then simply creating a new general object with <code>{}</code> will work, but if the source's prototype is some descendant of <code>Object</code>, then you are going to be missing the additional members from that prototype which you skipped using the <code>hasOwnProperty</code> filter, or which were in the prototype, but weren't enumerable in the first place. One solution might be to call the source object's <code>constructor</code> property to get the initial copy object and then copy over the attributes, but then you still will not get non-enumerable attributes. For example, a <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Date\" rel=\"noreferrer\" title=\"Mozilla JavaScript Reference: Date\"><code>Date</code></a> object stores its data as a hidden member:</p>\n\n<pre><code>function clone(obj) {\n    if (null == obj || \"object\" != typeof obj) return obj;\n    var copy = obj.constructor();\n    for (var attr in obj) {\n        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n    }\n    return copy;\n}\n\nvar d1 = new Date();\n\n/* Executes function after 5 seconds. */\nsetTimeout(function(){\n    var d2 = clone(d1);\n    alert(\"d1 = \" + d1.toString() + \"\\nd2 = \" + d2.toString());\n}, 5000);\n</code></pre>\n\n<p>The date string for <code>d1</code> will be 5 seconds behind that of <code>d2</code>. A way to make one <code>Date</code> the same as another is by calling the <code>setTime</code> method, but that is specific to the <code>Date</code> class. I don't think there is a bullet-proof general solution to this problem, though I would be happy to be wrong!</p>\n\n<p>When I had to implement general deep copying I ended up compromising by assuming that I would only need to copy a plain <code>Object</code>, <code>Array</code>, <code>Date</code>, <code>String</code>, <code>Number</code>, or <code>Boolean</code>. The last 3 types are immutable, so I could perform a shallow copy and not worry about it changing. I further assumed that any elements contained in <code>Object</code> or <code>Array</code> would also be one of the 6 simple types in that list. This can be accomplished with code like the following:</p>\n\n<pre><code>function clone(obj) {\n    var copy;\n\n    // Handle the 3 simple types, and null or undefined\n    if (null == obj || \"object\" != typeof obj) return obj;\n\n    // Handle Date\n    if (obj instanceof Date) {\n        copy = new Date();\n        copy.setTime(obj.getTime());\n        return copy;\n    }\n\n    // Handle Array\n    if (obj instanceof Array) {\n        copy = [];\n        for (var i = 0, len = obj.length; i &lt; len; i++) {\n            copy[i] = clone(obj[i]);\n        }\n        return copy;\n    }\n\n    // Handle Object\n    if (obj instanceof Object) {\n        copy = {};\n        for (var attr in obj) {\n            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);\n        }\n        return copy;\n    }\n\n    throw new Error(\"Unable to copy obj! Its type isn't supported.\");\n}\n</code></pre>\n\n<p>The above function will work adequately for the 6 simple types I mentioned, as long as the data in the objects and arrays form a tree structure. That is, there isn't more than one reference to the same data in the object. For example:</p>\n\n<pre><code>// This would be cloneable:\nvar tree = {\n    \"left\"  : { \"left\" : null, \"right\" : null, \"data\" : 3 },\n    \"right\" : null,\n    \"data\"  : 8\n};\n\n// This would kind-of work, but you would get 2 copies of the \n// inner node instead of 2 references to the same copy\nvar directedAcylicGraph = {\n    \"left\"  : { \"left\" : null, \"right\" : null, \"data\" : 3 },\n    \"data\"  : 8\n};\ndirectedAcyclicGraph[\"right\"] = directedAcyclicGraph[\"left\"];\n\n// Cloning this would cause a stack overflow due to infinite recursion:\nvar cylicGraph = {\n    \"left\"  : { \"left\" : null, \"right\" : null, \"data\" : 3 },\n    \"data\"  : 8\n};\ncylicGraph[\"right\"] = cylicGraph;\n</code></pre>\n\n<p>It will not be able to handle any JavaScript object, but it may be sufficient for many purposes as long as you don't assume that it will just work for anything you throw at it.</p>\n",
    "score": 1063,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 306632,
    "parentID": 306583,
    "url": "https://stackoverflow.com/q/306632",
    "title": null,
    "body": "<p>Without knowing the ID of the DIV I think you could select the IMG like this:</p>\n\n<pre><code>$(\"#\"+$(this).attr(\"id\")+\" img:first\")\n</code></pre>\n",
    "score": 26,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 36324,
      "name": "Adam",
      "reputation": 331
    }
  },
  {
    "soID": 871508,
    "parentID": 2669690,
    "url": "https://stackoverflow.com/q/871508",
    "title": null,
    "body": "<p>This is to ensure some other site can't do nasty tricks to try to steal your data. For example, by <a href=\"http://ejohn.org/blog/re-securing-json/\" rel=\"noreferrer\">replacing the array constructor</a>, then including this JSON URL via a <code>&lt;script&gt;</code> tag, a malicious third-party site could steal the data from the JSON response. By putting a <code>while(1);</code> at the start, the script will hang instead.</p>\n\n<p>A same-site request using XHR and a separate JSON parser, on the other hand, can easily ignore the <code>while(1);</code> prefix.</p>\n",
    "score": 327,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 36723,
      "name": "bdonlan",
      "reputation": 151127
    }
  },
  {
    "soID": 684676,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/684676",
    "title": null,
    "body": "<pre><code>for(key in p) {\n  alert( p[key] );\n}\n</code></pre>\n\n<p>Note: you can do this over arrays, but you'll iterate over the <code>length</code> and other properties, too.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 36805,
      "name": "Richard Levasseur",
      "reputation": 8302
    }
  },
  {
    "soID": 832262,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/832262",
    "title": null,
    "body": "<p>Using a regular expression with the <code>g</code> flag set will replace all:</p>\n\n<pre><code>someString = 'the cat looks like a cat';\nanotherString = someString.replace(/cat/g, 'dog');\n// anotherString now contains \"the dog looks like a dog\"\n</code></pre>\n\n<h3><a href=\"http://www.tizag.com/javascriptT/javascript-string-replace.php\" rel=\"noreferrer\">See here also</a></h3>\n",
    "score": 411,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 37685,
      "name": "Adam A",
      "reputation": 9733
    }
  },
  {
    "soID": 359629,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/359629",
    "title": null,
    "body": "<p>The <strong>===</strong> operator is called a strict comparison operator, it <strong>does</strong> differ from the <strong>==</strong> operator.</p>\n\n<p>Lets take 2 vars a and b.</p>\n\n<p>For <strong>\"a == b\"</strong> to evaluate to true a and b need to be the <strong>same value</strong>.</p>\n\n<p>In the case of <strong>\"a === b\"</strong> a and b must be the <strong>same value</strong> and also the <strong>same type</strong> for it to evaluate to true.  </p>\n\n<p>Take the following example</p>\n\n<pre><code>var a = 1;\nvar b = \"1\";\n\nif (a == b) //evaluates to true as a and b are both 1\n{\n    alert(\"a == b\");\n}\n\nif (a === b) //evaluates to false as a is not the same type as b\n{\n    alert(\"a === b\");\n}\n</code></pre>\n\n<p><strong>In summary</strong>; using the <strong>==</strong> operator might evaluate to true in situations where you do not want it to so using the <strong>===</strong> operator would be safer.  </p>\n\n<p>In the 90% usage scenario it won't matter which one you use, but it is handy to know the difference when you get some unexpected behaviour one day.</p>\n",
    "score": 58,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 39277,
      "name": "Doctor Jones",
      "reputation": 15602
    }
  },
  {
    "soID": 392748,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/392748",
    "title": null,
    "body": "<p>I tested this in Firefox with <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\" rel=\"noreferrer\">Firebug</a> using code like this:</p>\n\n<pre><code>console.time(\"testEquality\");\nvar n = 0;\nwhile(true) {\n    n++;\n    if(n==100000) \n        break;\n}\nconsole.timeEnd(\"testEquality\");\n</code></pre>\n\n<p>and</p>\n\n<pre><code>console.time(\"testTypeEquality\");\nvar n = 0;\nwhile(true) {\n    n++;\n    if(n===100000) \n        break;\n}\nconsole.timeEnd(\"testTypeEquality\");\n</code></pre>\n\n<p>My results (tested five times each and averaged):</p>\n\n<pre><code>==: 115.2\n===: 114.4\n</code></pre>\n\n<p>So I'd say that the miniscule difference (this is over 100000 iterations, remember) is negligible. Performance <strong><em>isn't</em></strong> a reason to do <code>===</code>. Type safety (well, as safe as you're going to get in JavaScript), and code quality is.</p>\n",
    "score": 75,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 39353,
      "name": "Simon Scarfe",
      "reputation": 5829
    }
  },
  {
    "soID": 523647,
    "parentID": 523643,
    "url": "https://stackoverflow.com/q/523647",
    "title": null,
    "body": "<p><code>===</code> and <code>!==</code> are strict comparison operators:</p>\n\n<blockquote>\n  <p>JavaScript has both strict and\n  type-converting equality comparison.\n  For strict equality the objects being\n  compared must have the same type and:</p>\n  \n  <ul>\n  <li>Two strings are strictly equal when they have the same sequence of\n  characters, same length, and same\n  characters in corresponding positions.</li>\n  <li>Two numbers are strictly equal when they are numerically equal (have\n  the same number value). NaN is not\n  equal to anything, including NaN.\n  Positive and negative zeros are equal\n  to one another.</li>\n  <li>Two Boolean operands are strictly equal if both are true or\n  both are false.</li>\n  <li>Two objects are strictly equal if they refer to the same Object.</li>\n  <li>Null and Undefined types are == (but not ===). [I.e. (Null==Undefined) is true but (Null===Undefined) is false]</li>\n  </ul>\n</blockquote>\n\n<p><a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Operators/Comparison_Operators\" rel=\"noreferrer\">Comparison Operators - MDC</a></p>\n",
    "score": 934,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 39428,
      "name": "Jack Sleight",
      "reputation": 12469
    }
  },
  {
    "soID": 351444,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/351444",
    "title": null,
    "body": "<p>If you're only appending a single variable, then <code>push()</code> works just fine. If you need to append another array, use <code>concat()</code>:</p>\n\n<pre><code>var ar1 = [1, 2, 3];\nvar ar2 = [4, 5, 6];\n\nvar ar3 = ar1.concat(ar2);\n\nalert(ar1);\nalert(ar2);\nalert(ar3);\n</code></pre>\n\n<p>Will spit out:</p>\n\n<pre><code>\"1,2,3\"\n\"4,5,6\"\n\"1,2,3,4,5,6\"\n</code></pre>\n\n<p>The concat does not affect <code>ar1</code> and <code>ar2</code> unless reassigned, for example:</p>\n\n<pre><code>ar1 = ar1.concat(ar2);\nalert(ar1);\n</code></pre>\n\n<p>Will display:</p>\n\n<pre><code>\"1,2,3,4,5,6\"\n</code></pre>\n\n<p>Lots of great info <a href=\"http://www.javascriptkit.com/jsref/\" rel=\"noreferrer\">here</a></p>\n",
    "score": 906,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 824356,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/824356",
    "title": null,
    "body": "<p><strong>NOTE: If you are working with an HTML5 browser then you should ignore this answer. This is now possible as can be seen in the other answers.</strong></p>\n\n<p>There is no way to modify the URL in the browser without reloading the page. The URL represents what the last loaded page was. If you change it (document.location) then it will reload the page.</p>\n\n<p>One obvious reason being, you write a site on www.mysite.com that looks like a bank login page. Then you change the browser url bar to say www.mybank.com. The user will be totally unaware that they are really looking at www.mysite.com.</p>\n",
    "score": 84,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 40655,
      "name": "Robin Day",
      "reputation": 67519
    }
  },
  {
    "soID": 500459,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/500459",
    "title": null,
    "body": "<p>I think about the best I can do is give you a bunch of examples to study.\nJavascript programmers are practically ranked by how well they understand scope.\nIt can at times be quite counter-intuitive.</p>\n\n<ol>\n<li><p><strong>A globally-scoped variable</strong></p>\n\n<pre><code>var a = 1;\n\n// global scope\nfunction one() {\n  alert(a); // alerts '1'\n}\n</code></pre></li>\n<li><p><strong>Local scope</strong></p>\n\n<pre><code>var a = 1;\n\nfunction two(a) {\n  alert(a); // alerts the given argument, not the global value of '1'\n}\n\n// local scope again\nfunction three() {\n  var a = 3;\n  alert(a); // alerts '3'\n}\n</code></pre></li>\n<li><p><strong>Intermediate</strong>: <em>No such thing as block scope in JavaScript</em> (ES5; ES6 introduces <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\" rel=\"noreferrer\"><code>let</code></a>)</p>\n\n<p>a.</p>\n\n<pre><code>var a = 1;\n\nfunction four() {\n  if (true) {\n    var a = 4;\n  }\n\n  alert(a); // alerts '4', not the global value of '1'\n}\n</code></pre>\n\n<p>b.</p>\n\n<pre><code>var a = 1;\n\nfunction one() {\n  if (true) {\n    let a = 4;\n  }\n\n  alert(a); // alerts '1' because the 'let' keyword uses block scoping\n}\n</code></pre></li>\n<li><p><strong>Intermediate</strong>: <em>Object properties</em></p>\n\n<pre><code>var a = 1;\n\nfunction five() {\n  this.a = 5;\n}\n\nalert(new five().a); // alerts '5'\n</code></pre></li>\n<li><p><strong>Advanced</strong>: <em>Closure</em></p>\n\n<pre><code>var a = 1;\n\nvar six = (function() {\n  var a = 6;\n\n  return function() {\n    // JavaScript \"closure\" means I have access to 'a' in here,\n    // because it is defined in the function in which I was defined.\n    alert(a); // alerts '6'\n  };\n})();\n</code></pre></li>\n<li><p><strong>Advanced</strong>: <em>Prototype-based scope resolution</em></p>\n\n<pre><code>var a = 1;\n\nfunction seven() {\n  this.a = 7;\n}\n\n// [object].prototype.property loses to\n// [object].property in the lookup chain. For example...\n\n// Won't get reached, because 'a' is set in the constructor above.\nseven.prototype.a = -1;\n\n// Will get reached, even though 'b' is NOT set in the constructor.\nseven.prototype.b = 8;\n\nalert(new seven().a); // alerts '7'\nalert(new seven().b); // alerts '8'\n</code></pre>\n\n<hr></li>\n<li><p><strong>Global+Local</strong>: <em>An extra complex Case</em></p>\n\n<pre><code>var x = 5;\n\n(function () {\n    console.log(x);\n    var x = 10;\n    console.log(x); \n})();\n</code></pre>\n\n<p>This will print out <code>undefined</code> and <code>10</code> rather than <code>5</code> and <code>10</code> since JavaScript always moves variable declarations (not initializations) to the top of the scope, making the code equivalent to:</p>\n\n<pre><code>var x = 5;\n\n(function () {\n    var x;\n    console.log(x);\n    x = 10;\n    console.log(x); \n})();\n</code></pre></li>\n<li><p><strong>Catch clause-scoped variable</strong></p>\n\n<pre><code>var e = 5;\nconsole.log(e);\ntry {\n    throw 6;\n} catch (e) {\n    console.log(e);\n}\nconsole.log(e);\n</code></pre>\n\n<p>This will print out <code>5</code>, <code>6</code>, <code>5</code>. Inside the catch clause <code>e</code> shadows global and local variables. But this special scope is only for the caught variable. If you write <code>var f;</code> inside the catch clause, then it's exactly the same as if you had defined it before or after the try-catch block.</p></li>\n</ol>\n",
    "score": 2051,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 43089,
      "name": "Triptych",
      "reputation": 128690
    }
  },
  {
    "soID": 500531,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/500531",
    "title": null,
    "body": "<p>The reason is that one construct:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var a = []; // Create a new empty array.\r\na[5] = 5;   // Perfectly legal JavaScript that resizes the array.\r\n\r\nfor (var i = 0; i &lt; a.length; i++) {\r\n    // Iterate over numeric indexes from 0 to 5, as everyone expects.\r\n    console.log(a[i]);\r\n}\r\n\r\n/* Will display:\r\n   undefined\r\n   undefined\r\n   undefined\r\n   undefined\r\n   5\r\n*/</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>can sometimes be totally different from the other:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var a = [];\r\na[5] = 5;\r\nfor (var x in a) {\r\n    // Shows only the explicitly set index of \"5\", and ignores 0-4\r\n    console.log(x);\r\n}\r\n\r\n/* Will display:\r\n   5\r\n*/</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Also consider that <a href=\"http://en.wikipedia.org/wiki/JavaScript\" rel=\"noreferrer\">JavaScript</a> libraries might do things like this, which will affect any array you create:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Somewhere deep in your JavaScript library...\r\nArray.prototype.foo = 1;\r\n\r\n// Now you have no idea what the below code will do.\r\nvar a = [1, 2, 3, 4, 5];\r\nfor (var x in a){\r\n    // Now foo is a part of EVERY array and \r\n    // will show up here as a value of 'x'.\r\n    console.log(x);\r\n}\r\n\r\n/* Will display:\r\n   0\r\n   1\r\n   2\r\n   3\r\n   4\r\n   foo\r\n*/</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 1177,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 43089,
      "name": "Triptych",
      "reputation": 128690
    }
  },
  {
    "soID": 8525002,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/8525002",
    "title": null,
    "body": "<p>I would honestly suggest neither.  I would use a stylized <code>&lt;button&gt;&lt;/button&gt;</code> for that behavior.</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>button.link {\n    display:inline-block;\n    position:relative;\n    background-color: transparent;\n    cursor: pointer;\n    border:0;\n    padding:0;\n    color:#00f;\n    text-decoration:underline;\n}\n</code></pre>\n\n<p>This way you can assign your onclick.  I also suggest binding via script, not using the <code>onclick</code> attribute on the element tag.  The only gotcha is the psuedo 3d text effect in older IEs that cannot be disabled.</p>\n\n<hr>\n\n<p>If you <em>MUST</em> use an A element, use <code>javascript:void(0);</code> for reasons already mentioned.</p>\n\n<ul>\n<li>Will always intercept in case your onclick event fails.</li>\n<li>Will not have errant load calls happen, or trigger other events based on a hash change</li>\n<li>The hash tag can cause unexpected behavior if the click falls through (onclick throws), avoid it unless it's an appropriate fall-through behavior, and you want to change the navigation history.</li>\n</ul>\n\n<p>NOTE: You can replace the <code>0</code> with a string such as <code>javascript:void('Delete record 123')</code> which can serve as an extra indicator that will show what the click will actually do.</p>\n",
    "score": 149,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 359547,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/359547",
    "title": null,
    "body": "<p>Using the <code>==</code> operator (<em>Equality</em>)</p>\n\n<pre><code>true == 1; //true, because 'true' is converted to 1 and then compared\n\"2\" == 2;  //true, because \"2\" is converted to 2 and then compared\n</code></pre>\n\n<p>Using the <code>===</code> operator (<em>Identity</em>)</p>\n\n<pre><code>true === 1; //false\n\"2\" === 2;  //false\n</code></pre>\n\n<p>This is because the <strong>equality operator <code>==</code> does type coercion</strong>, meaning that the interpreter implicitly tries to convert the values before comparing.</p>\n\n<p>On the other hand, the <strong>identity operator <code>===</code> does not do type coercion</strong>, and thus does not convert the values when comparing.</p>\n",
    "score": 842,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 684693,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/684693",
    "title": null,
    "body": "<p>You have to use the <strong>for-in loop</strong></p>\n\n<p>But be very careful when using this kind of loop, because this will <strong>loop all the properties along the prototype chain</strong>.</p>\n\n<p>Therefore, when using for-in loops, always make use of the <code>hasOwnProperty</code> method to determine if the current property in iteration is really a property of the object you're checking on:</p>\n\n<pre><code>for (var prop in p) {\n    if (!p.hasOwnProperty(prop)) {\n        //The current property is not a direct property of p\n        continue;\n    }\n    //Do your logic with the property here\n}\n</code></pre>\n",
    "score": 276,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 44084,
      "name": "Andreas Grech",
      "reputation": 56697
    }
  },
  {
    "soID": 359588,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/359588",
    "title": null,
    "body": "<p>There is unlikely to be any performance difference between the two operations in your usage. There is no type-conversion to be done because both parameters are already the same type. Both operations will have a type comparison followed by a value comparison.</p>\n",
    "score": 26,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 45364,
      "name": "Sean",
      "reputation": 952
    }
  },
  {
    "soID": 1406609,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/1406609",
    "title": null,
    "body": "<p><code>!!</code> converts the value to the right of it to its equivalent boolean value. (Think poor man's way of \"type-casting\"). Its <em>intent</em> is usually to convey to the reader that the code does not care <em>what</em> value is in the variable, but what it's <a href=\"http://11heavens.com/falsy-and-truthy-in-javascript\" rel=\"noreferrer\">\"truth\" value</a> is.</p>\n",
    "score": 79,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 45433,
      "name": "Crescent Fresh",
      "reputation": 83320
    }
  },
  {
    "soID": 378934,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/378934",
    "title": null,
    "body": "<p>In computer science terms, we talk about anonymous functions and named functions. I think the most important difference is that an anonymous function is not bound to an name, hence the name anonymous function. In JavaScript it is a first class object dynamically declared at runtime.</p>\n\n<p>For more information on anonymous functions and lambda calculus, Wikipedia is a good start (<a href=\"http://en.wikipedia.org/wiki/Anonymous_function\" rel=\"noreferrer\">http://en.wikipedia.org/wiki/Anonymous_function</a>).</p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 45957,
      "name": "Kafka",
      "reputation": 332
    }
  },
  {
    "soID": 406200,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/406200",
    "title": null,
    "body": "<p>You'll want to use JavaScript's built-in <a href=\"http://www.devguru.com/Technologies/ecmascript/quickref/location.html\" rel=\"noreferrer\"><code>window.location</code></a> object.</p>\n",
    "score": 46,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 46201,
      "name": "clawr",
      "reputation": 6761
    }
  },
  {
    "soID": 5036460,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/5036460",
    "title": null,
    "body": "<p>I like this, because it is small:</p>\n\n<pre><code>+new Date\n</code></pre>\n\n<p>I also like this, because it is just as short and is compatible with modern browsers, and over 357 people voted that it's better: </p>\n\n<pre><code>Date.now()\n</code></pre>\n",
    "score": 371,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 47604,
      "name": "xer0x",
      "reputation": 7671
    }
  },
  {
    "soID": 17252104,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/17252104",
    "title": null,
    "body": "<p>Lodash has a nice _.cloneDeep method: <a href=\"http://lodash.com/docs#cloneDeep\" rel=\"noreferrer\">http://lodash.com/docs#cloneDeep</a></p>\n\n<p>The usual _.clone method also accepts a second parameter to make a deep copy instead of the shallow one: <a href=\"http://lodash.com/docs#clone\" rel=\"noreferrer\">http://lodash.com/docs#clone</a></p>\n\n<pre><code>_.clone(value [, deep=false, callback, thisArg])\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1357146,
    "parentID": 1357118,
    "url": "https://stackoverflow.com/q/1357146",
    "title": null,
    "body": "<p>I think</p>\n\n<p><code>event.preventDefault()</code></p>\n\n<p>is the w3c specified way of canceling events.</p>\n\n<p>You can read this in the W3C spec on <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-cancelation\" rel=\"noreferrer\">Event cancelation</a>.</p>\n\n<p>Also you can't use return false in every situation. When giving a javascript function in the href attribute and if you return false then the user will be redirected to a page with false string written.</p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 47738,
      "name": "rahul",
      "reputation": 131838
    }
  },
  {
    "soID": 1789980,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/1789980",
    "title": null,
    "body": "<p>Use a regular expression:</p>\n\n<p><a href=\"http://www.javascriptkit.com/javatutors/redev3.shtml\" rel=\"noreferrer\"><code>RegExp.test(string)</code></a></p>\n",
    "score": 42,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 47738,
      "name": "rahul",
      "reputation": 131838
    }
  },
  {
    "soID": 1643247,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/1643247",
    "title": null,
    "body": "<pre><code>$(\"#yourdropdownid option:selected\").text();\n</code></pre>\n",
    "score": 2927,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 47738,
      "name": "rahul",
      "reputation": 131838
    }
  },
  {
    "soID": 1407769,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/1407769",
    "title": null,
    "body": "<p><code>!!foo</code> applies the unary not operator twice and is used to cast to boolean type similar to the use of unary plus <code>+foo</code> to cast to number and concatenating an empty string <code>''+foo</code> to cast to string.</p>\n\n<p>Instead of these hacks, you can also use the constructor functions corresponding to the primitive types (<em>without</em> using <code>new</code>) to explicitly cast values, ie</p>\n\n<pre><code>Boolean(foo) === !!foo\nNumber(foo)  === +foo\nString(foo)  === ''+foo\n</code></pre>\n",
    "score": 54,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 48015,
      "name": "Christoph",
      "reputation": 111851
    }
  },
  {
    "soID": 1129893,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/1129893",
    "title": null,
    "body": "<p>Instead of using a custom comparison function, you could also create an object type with custom <code>toString()</code> method (which is invoked by the default comparison function):</p>\n\n<pre><code>function Person(firstName, lastName) {\n    this.firtName = firstName;\n    this.lastName = lastName;\n}\n\nPerson.prototype.toString = function() {\n    return this.lastName + ', ' + this.firstName;\n}\n\nvar persons = [ new Person('Lazslo', 'Jamf'), ...]\npersons.sort();\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 48015,
      "name": "Christoph",
      "reputation": 111851
    }
  },
  {
    "soID": 679937,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/679937",
    "title": null,
    "body": "<p>There's no easy way to do this. You'll have to loop over the properties explicitly:</p>\n\n<pre><code>function isEmpty(obj) {\n    for(var prop in obj) {\n        if(obj.hasOwnProperty(prop))\n            return false;\n    }\n\n    return true;\n}\n</code></pre>\n\n<p>If <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#Browser_compatibility\" rel=\"noreferrer\">ECMAScript 5 support</a> is available, you can use <code>Object.keys()</code> instead:</p>\n\n<pre><code>function isEmpty(obj) {\n    return Object.keys(obj).length === 0;\n}\n</code></pre>\n",
    "score": 684,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 48015,
      "name": "Christoph",
      "reputation": 111851
    }
  },
  {
    "soID": 572996,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/572996",
    "title": null,
    "body": "<p>Every JavaScript object has an internal property called <em>[[Prototype]]</em>. If you look up a property via <code>obj.propName</code> or <code>obj['propName']</code> and the object does not have such a property - which can be checked via <code>obj.hasOwnProperty('propName')</code> - the runtime looks up the property in the object referenced by [[Prototype]] instead. If the prototype-object also doesn't have such a property, its prototype is checked in turn, thus walking the original object's <em>prototype-chain</em> until a match is found or its end is reached.</p>\n\n<p>Some JavaScript implementations allow direct access to the [[Prototype]] property, eg via a non-standard property named <code>__proto__</code>. In general, it's only possible to set an object's prototype during object creation: If you create a new object via <code>new Func()</code>, the object's [[Prototype]] property will be set to the object referenced by <code>Func.prototype</code>.</p>\n\n<p>This allows to simulate classes in JavaScript, although JavaScript's inheritance system is - as we have seen - prototypical, and not class-based:</p>\n\n<p>Just think of constructor functions as classes and the properties of the prototype (ie of the object referenced by the constructor function's <code>prototype</code> property) as shared members, ie members which are the same for each instance. In class-based systems, methods are implemented the same way for each instance, so methods are normally added to the prototype, whereas an object's fields are instance-specific and therefore added to the object itself during construction.</p>\n",
    "score": 839,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 48015,
      "name": "Christoph",
      "reputation": 111851
    }
  },
  {
    "soID": 500878,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/500878",
    "title": null,
    "body": "<p>There are three reasons why you shouldn't use <code>for..in</code> to iterate over array elements:</p>\n\n<ul>\n<li><p><code>for..in</code> will loop over all own and inherited properties of the array object which aren't <code>DontEnum</code>; that means if someone adds properties to the specific array object (there are valid reasons for this - I've done so myself) or changed <code>Array.prototype</code> (which is considered bad practice in code which is supposed to work well with other scripts), these properties will be iterated over as well; inherited properties can be excluded by checking <code>hasOwnProperty()</code>, but that won't help you with properties set in the array object itself</p></li>\n<li><p><code>for..in</code> isn't guaranteed to preserve element ordering</p></li>\n<li><p>it's slow because you have to walk all properties of the array object and its whole prototype chain and will still only get the property's name, ie to get the value, an additional lookup will be required</p></li>\n</ul>\n",
    "score": 91,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 48015,
      "name": "Christoph",
      "reputation": 111851
    }
  },
  {
    "soID": 728469,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/728469",
    "title": null,
    "body": "<p>From the <a href=\"http://developer.apple.com/DOCUMENTATION/ScriptingAutomation/Conceptual/JSCodingGuide/OOJavaScript/OOJavaScript.html#//apple_ref/doc/uid/TP40006539-SW3\" rel=\"nofollow noreferrer\">Apple JavaScript Coding Guidelines</a>:</p>\n\n<pre><code>// Create an inner object with a variable x whose default\n// value is 3.\nfunction innerObj()\n{\n        this.x = 3;\n}\ninnerObj.prototype.clone = function() {\n    var temp = new innerObj();\n    for (myvar in this) {\n        // this object does not contain any objects, so\n        // use the lightweight copy code.\n        temp[myvar] = this[myvar];\n    }\n    return temp;\n}\n\n// Create an outer object with a variable y whose default\n// value is 77.\nfunction outerObj()\n{\n        // The outer object contains an inner object.  Allocate it here.\n        this.inner = new innerObj();\n        this.y = 77;\n}\nouterObj.prototype.clone = function() {\n    var temp = new outerObj();\n    for (myvar in this) {\n        if (this[myvar].clone) {\n            // This variable contains an object with a\n            // clone operator.  Call it to create a copy.\n            temp[myvar] = this[myvar].clone();\n        } else {\n            // This variable contains a scalar value,\n            // a string value, or an object with no\n            // clone function.  Assign it directly.\n            temp[myvar] = this[myvar];\n        }\n    }\n    return temp;\n}\n\n// Allocate an outer object and assign non-default values to variables in\n// both the outer and inner objects.\nouter = new outerObj;\nouter.inner.x = 4;\nouter.y = 16;\n\n// Clone the outer object (which, in turn, clones the inner object).\nnewouter = outer.clone();\n\n// Verify that both values were copied.\nalert('inner x is '+newouter.inner.x); // prints 4\nalert('y is '+newouter.y); // prints 16\n</code></pre>\n\n<p>Steve</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 784956,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/784956",
    "title": null,
    "body": "<p>It seems that the <code>!!</code> operator results in a double negation.</p>\n\n<pre><code>var foo = \"Hello World!\";\n\n!foo // Result: false\n!!foo // Result: true\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 48492,
      "name": "Steve Harrison",
      "reputation": 64545
    }
  },
  {
    "soID": 1026087,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/1026087",
    "title": null,
    "body": "<p>Another solution:</p>\n\n<pre><code>function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n</code></pre>\n\n<p>Some other answers modify <code>String.prototype</code> (this answer used to as well), but I would advise against this now due to maintainability (hard to find out where the function is being added to the <code>prototype</code> and could cause conflicts if other code uses the same name / a browser adds a native function with that same name in future).</p>\n",
    "score": 3891,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 48492,
      "name": "Steve Harrison",
      "reputation": 64545
    }
  },
  {
    "soID": 426277,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/426277",
    "title": null,
    "body": "<p>Use:</p>\n\n<pre><code>$(\".myCheckbox\").attr('checked', true); // Deprecated\n$(\".myCheckbox\").prop('checked', true);\n</code></pre>\n\n<p>And if you want to check if a checkbox is checked or not:</p>\n\n<pre><code>$('.myCheckbox').is(':checked');\n</code></pre>\n",
    "score": 570,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 48500,
      "name": "bchhun",
      "reputation": 12254
    }
  },
  {
    "soID": 400252,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/400252",
    "title": null,
    "body": "<p>Reading and modifying the clipboard from a webpage raises security and privacy concerns. However, in Internet&nbsp;Explorer, it is possible to do it. I found this <a href=\"http://www.sajithmr.com/onclick-select-all-and-copy-to-clipboard-javascript/\" rel=\"noreferrer\">example snippet</a>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>    &lt;script type=\"text/javascript\"&gt;\r\n        function select_all(obj) {\r\n            var text_val=eval(obj);\r\n            text_val.focus();\r\n            text_val.select();\r\n            if (!r.execCommand) return; // feature detection\r\n            r = text_val.createTextRange();\r\n            r.execCommand('copy');\r\n        }\r\n    &lt;/script&gt;\r\n    &lt;input value=\"http://www.sajithmr.com\"\r\n     onclick=\"select_all(this)\" name=\"url\" type=\"text\" /&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 73,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 49388,
      "name": "bandi",
      "reputation": 3369
    }
  },
  {
    "soID": 500446,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/500446",
    "title": null,
    "body": "<p>Here's an example:</p>\n\n<pre><code>&lt;script&gt;\n\nvar globalVariable = 7; //==window.globalVariable\n\nfunction aGlobal( param ) { //==window.aGlobal(); \n                            //param is only accessible in this function\n  var scopedToFunction = {\n    //can't be accessed outside of this function\n\n    nested : 3 //accessible by: scopedToFunction.nested\n  };\n\n  anotherGlobal = {\n    //global because there's no `var`\n  }; \n\n}\n\n&lt;/script&gt;\n</code></pre>\n\n<p>You'll want to investigate closures, and how to use them to make <a href=\"http://www.crockford.com/javascript/private.html\" rel=\"noreferrer\">private members</a>.</p>\n",
    "score": 30,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 50214,
      "name": "geowa4",
      "reputation": 24239
    }
  },
  {
    "soID": 867935,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/867935",
    "title": null,
    "body": "<pre><code>$(\"&lt;div/&gt;\").appendTo(\"div#main\");\n</code></pre>\n\n<p>will append a blank div to <code>&lt;div id=\"main\"&gt;&lt;/div&gt;</code></p>\n",
    "score": 53,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 50708,
      "name": "Caius",
      "reputation": 574
    }
  },
  {
    "soID": 824362,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/824362",
    "title": null,
    "body": "<p>Any changes of the loction (either <code>window.location</code> or <code>document.location</code>) will cause a request on that new URL, if you’re not just changing the URL fragment. If you change the URL, you change the URL.</p>\n\n<p>Use server-side URL rewrite techniques like <a href=\"http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html\" rel=\"noreferrer\">Apache’s mod_rewrite</a> if you don’t like the URLs you are currently using.</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 53114,
      "name": "Gumbo",
      "reputation": 439474
    }
  },
  {
    "soID": 610415,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/610415",
    "title": null,
    "body": "<p>Try <a href=\"https://github.com/alexei/sprintf.js\" rel=\"noreferrer\">sprintf() for JavaScript</a>.</p>\n\n<hr>\n\n<p><strong>Update</strong>    Ok, if you really want to do a simple format method on your own, don’t do the replacements successively but do them simultaneously.</p>\n\n<p>Because most of the other proposals that are mentioned fail when a replace string of previous replacement does also contain a format sequence like this:</p>\n\n<pre><code>\"{0}{1}\".format(\"{1}\", \"{0}\")\n</code></pre>\n\n<p>Normally you would expect the output to be <code>{1}{0}</code> but the actual output is <code>{1}{1}</code>. So do a simultaneously replacement instead like in <a href=\"https://stackoverflow.com/questions/610406/javascript-printf-string-format/4673436#4673436\">fearphage’s suggestion</a>.</p>\n",
    "score": 609,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1179507,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/1179507",
    "title": null,
    "body": "<p>I would use double quotes when single quotes cannot be used and vice versa:</p>\n\n<pre><code>\"'\" + singleQuotedValue + \"'\"\n'\"' + doubleQuotedValue + '\"'\n</code></pre>\n\n<p>Instead of:</p>\n\n<pre><code>'\\'' + singleQuotedValue + '\\''\n\"\\\"\" + doubleQuotedValue + \"\\\"\"\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2672637,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/2672637",
    "title": null,
    "body": "<p>The two code snippets you've posted there will, for almost all purposes, behave the same way.</p>\n\n<p>However, the difference in behaviour is that with the first variant (<code>var functionOne = function() {}</code>), that function can only be called after that point in the code.</p>\n\n<p>With the second variant (<code>function functionTwo()</code>), the function is available to code that runs above where the function is declared.</p>\n\n<p>This is because with the first variant, the function is assigned to the variable <code>foo</code> at run time. In the second, the function is assigned to that identifier, <code>foo</code>, at parse time.</p>\n\n<p><strong>More technical information</strong></p>\n\n<p>JavaScript has three ways of defining functions.</p>\n\n<ol>\n<li>Your first snippet shows a <strong>function expression</strong>. This involves using the <em>\"function\" operator</em> to create a function - the result of that operator can be stored in any variable or object property. The function expression is powerful that way. The function expression is often called an \"anonymous function\", because it does not have to have a name,</li>\n<li>Your second example is a <strong>function declaration</strong>. This uses the <em>\"function\" statement</em> to create a function. The function is made available at parse time and can be called anywhere in that scope. You can still store it in a variable or object property later.</li>\n<li>The third way of defining a function is the <strong>\"Function()\" constructor</strong>, which is not shown in your original post. It's not recommended to use this as it works the same way as <code>eval()</code>, which has its problems.</li>\n</ol>\n",
    "score": 100,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 53212,
      "name": "thomasrutter",
      "reputation": 76655
    }
  },
  {
    "soID": 1789955,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/1789955",
    "title": null,
    "body": "<pre><code>var index = haystack.indexOf(needle);\n</code></pre>\n",
    "score": 284,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 53960,
      "name": "pixeline",
      "reputation": 13716
    }
  },
  {
    "soID": 20136762,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/20136762",
    "title": null,
    "body": "<p>One (silly) reason to use single quotes would be that they don't require you to hit the shift key to type them, whereas a double quote do.  (I'm assuming that the average string doesn't require escaping, which is a reasonable assumption.)  Now, let's suppose every day I code 200 lines of code.  Maybe in those 200 lines I have 30 quotes.  Maybe typing a double quote takes 0.1 seconds more time than typing a single quote (because I have to hit the shift key).  Then on any given day, I waste 3 seconds.  If I code in this manner for 200 days a year for 40 years, then I've wasted 6.7 hours of my life.  Food for thought.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 596369,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/596369",
    "title": null,
    "body": "<p>To get the value of the <strong>selected</strong> <code>radioName</code> item of a form with id <code>myForm</code>:</p>\n\n<pre><code>$('input[name=radioName]:checked', '#myForm').val()\n</code></pre>\n\n<p>Here's an example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$('#myForm input').on('change', function() {\r\n   alert($('input[name=radioName]:checked', '#myForm').val()); \r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;form id=\"myForm\"&gt;\r\n&lt;input type=\"radio\" name=\"radioName\" value=\"1\" /&gt; 1 &lt;br /&gt;\r\n&lt;input type=\"radio\" name=\"radioName\" value=\"2\" /&gt; 2 &lt;br /&gt;\r\n&lt;input type=\"radio\" name=\"radioName\" value=\"3\" /&gt; 3 &lt;br /&gt;\r\n&lt;/form&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 3180,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 56018,
      "name": "Peter J",
      "reputation": 43791
    }
  },
  {
    "soID": 867933,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/867933",
    "title": null,
    "body": "<p>Check <em><a href=\"http://blogs.microsoft.co.il/blogs/basil/archive/2008/08/21/jquery-create-jquery-plug-in-to-create-elements.aspx\" rel=\"nofollow noreferrer\">jQuery.create() - jQuery plugin to create HTML elements</a></em>.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 57024,
      "name": "Priyan R",
      "reputation": 884
    }
  },
  {
    "soID": 3826423,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/3826423",
    "title": null,
    "body": "<p>Some quick benchmarking (each test = 500k appended elements and the results are averages of multiple runs) showed the following:</p>\n\n<p>Firefox 3.6 (Mac):</p>\n\n<ul>\n<li>Small arrays: <strong><code>arr[arr.length] = b</code> is faster</strong> (300ms vs. 800ms)</li>\n<li>Large arrays: <strong><code>arr.push(b)</code> is faster</strong> (500ms vs. 900ms)</li>\n</ul>\n\n<p>Safari 5.0 (Mac):</p>\n\n<ul>\n<li>Small arrays: <strong><code>arr[arr.length] = b</code> is faster</strong> (90ms vs. 115ms)</li>\n<li>Large arrays: <strong><code>arr[arr.length] = b</code> is faster</strong> (160ms vs. 185ms)</li>\n</ul>\n\n<p>Google Chrome 6.0 (Mac):</p>\n\n<ul>\n<li>Small arrays: <strong>No significant difference</strong> (and Chrome is FAST! Only ~38ms !!)</li>\n<li>Large arrays: <strong>No significant difference</strong> (160ms)</li>\n</ul>\n\n<p>I like the <code>arr.push()</code> syntax better, but I think for my use I'd be better off with the <code>arr[arr.length]</code> version, at least in raw speed. I'd love to see the results of an IE run though.</p>\n\n<hr>\n\n<p>My benchmarking loops:</p>\n\n<pre><code>function arrpush_small() {\n    var arr1 = [];\n    for (a = 0; a &lt; 100; a++)\n    {\n        arr1 = [];\n        for (i = 0; i &lt; 5000; i++)\n        {\n            arr1.push('elem' + i);\n        }\n    }\n}\n\nfunction arrlen_small() {\n    var arr2 = [];\n    for (b = 0; b &lt; 100; b++)\n    {\n        arr2 = [];\n        for (j = 0; j &lt; 5000; j++)\n        {\n            arr2[arr2.length] = 'elem' + j;\n        }\n    }\n}\n\n\nfunction arrpush_large() {\n    var arr1 = [];\n    for (i = 0; i &lt; 500000; i++)\n    {\n        arr1.push('elem' + i);\n    }\n}\n\nfunction arrlen_large() {\n    var arr2 = [];\n    for (j = 0; j &lt; 500000; j++)\n    {\n        arr2[arr2.length] = 'elem' + j;\n    }\n}\n</code></pre>\n",
    "score": 342,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 805755,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/805755",
    "title": null,
    "body": "<p>the pattern <code>text = &lt;&lt;\"HERE\" This Is A Multiline String HERE</code> is not available in js (I remember using it much in my good old Perl days).</p>\n\n<p>To keep oversight with complex or long multiline strings I sometimes use an array pattern:</p>\n\n<pre><code>var myString = \n   ['&lt;div id=\"someId\"&gt;',\n    'some content&lt;br /&gt;',\n    '&lt;a href=\"#someRef\"&gt;someRefTxt&lt;/a&gt;',\n    '&lt;/div&gt;'\n   ].join('\\n');\n</code></pre>\n\n<p>or the pattern anonymous already showed (escape newline), which can be an ugly block in your code:</p>\n\n<pre><code>    var myString = \n       '&lt;div id=\"someId\"&gt; \\\nsome content&lt;br /&gt; \\\n&lt;a href=\"#someRef\"&gt;someRefTxt&lt;/a&gt; \\\n&lt;/div&gt;';\n</code></pre>\n\n<p>Here's another weird but working 'trick'<sup><b>1</b></sup>:</p>\n\n<pre><code>var myString = (function () {/*\n   &lt;div id=\"someId\"&gt;\n     some content&lt;br /&gt;\n     &lt;a href=\"#someRef\"&gt;someRefTxt&lt;/a&gt;\n    &lt;/div&gt;        \n*/}).toString().match(/[^]*\\/\\*([^]*)\\*\\/\\}$/)[1];\n</code></pre>\n\n<p><em>external edit: <a href=\"http://jsfiddle.net/orwellophile/hna15vLw/2/\" rel=\"noreferrer\">jsfiddle</a></em></p>\n\n<p>[<b>addition 2015</b>]<br>\nES6 supports spanning strings over multiple lines using <a href=\"http://www.2ality.com/2011/09/quasi-literals.html\" rel=\"noreferrer\">template strings</a>:</p>\n\n<pre><code>let str = `This is a text\n    with multiple lines.\n    Escapes are interpreted,\n    \\n is a newline.`;\nlet str = String.raw`This is a text\n    with multiple lines.\n    Escapes are not interpreted,\n    \\n is not a newline.`;\n</code></pre>\n\n<p><sup><b>1</b></sup> Note: this will be lost after minifying/obfuscating your code</p>\n",
    "score": 605,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 58186,
      "name": "KooiInc",
      "reputation": 68196
    }
  },
  {
    "soID": 1527820,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/1527820",
    "title": null,
    "body": "<p>There are some examples on the <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Math/random\" rel=\"noreferrer\">Mozilla Developer Network</a> page:</p>\n\n<pre><code>/**\n * Returns a random number between min (inclusive) and max (exclusive)\n */\nfunction getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\n/**\n * Returns a random integer between min (inclusive) and max (inclusive)\n * Using Math.round() will give you a non-uniform distribution!\n */\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n</code></pre>\n\n<hr>\n\n<p>Here's the logic behind it. It's a simple rule of three:</p>\n\n<p><code>Math.random()</code> returns a <code>Number</code> between 0 (inclusive) and 1 (exclusive). So we have an interval like this:</p>\n\n<pre><code>[0 .................................... 1)\n</code></pre>\n\n<p>Now, we'd like a number between <code>min</code> (inclusive) and <code>max</code> (exclusive):</p>\n\n<pre><code>[0 .................................... 1)\n[min .................................. max)\n</code></pre>\n\n<p>We can use the <code>Math.random</code> to get the correspondent in the [min, max) interval. But, first we should factor a little bit the problem by subtracting <code>min</code> from the second interval:</p>\n\n<pre><code>[0 .................................... 1)\n[min - min ............................ max - min)\n</code></pre>\n\n<p>This gives:</p>\n\n<pre><code>[0 .................................... 1)\n[0 .................................... max - min)\n</code></pre>\n\n<p>We may now apply <code>Math.random</code> and then calculate the correspondent. Let's choose a random number:</p>\n\n<pre><code>                Math.random()\n                    |\n[0 .................................... 1)\n[0 .................................... max - min)\n                    |\n                    x (what we need)\n</code></pre>\n\n<p>So, in order to find <code>x</code>, we would do:</p>\n\n<pre><code>x = Math.random() * (max - min);\n</code></pre>\n\n<p>Don't forget to add <code>min</code> back, so that we get a number in the [min, max) interval:</p>\n\n<pre><code>x = Math.random() * (max - min) + min;\n</code></pre>\n\n<p>That was the first function from MDN. The second one, returns an integer between <code>min</code> and <code>max</code>, both inclusive.</p>\n\n<p>Now for getting integers, you could use <code>round</code>, <code>ceil</code> or <code>floor</code>.</p>\n\n<p>You could use <code>Math.round(Math.random() * (max - min)) + min</code>, this however gives a non-even distribution. Both, <code>min</code> and <code>max</code> only have approximately half the chance to roll:</p>\n\n<pre><code>min...min+0.5...min+1...min+1.5   ...    max-0.5....max\n└───┬───┘└────────┬───────┘└───── ... ─────┘└───┬──┘   ← Math.round()\n   min          min+1                          max\n</code></pre>\n\n<p>With <code>max</code> excluded from the interval, it has an even less chance to roll than <code>min</code>.</p>\n\n<p>With <code>Math.floor(Math.random() * (max - min +1)) + min</code> you have a perfectly even distribution.</p>\n\n<pre><code>min.... min+1... min+2 ... max-1... max.... max+1 (is excluded from interval)\n|        |        |         |        |        |\n└───┬───┘└───┬───┘└─── ... ┘└───┬───┘└───┬───┘   ← Math.floor()\n   min     min+1               max-1    max\n</code></pre>\n\n<p>You can't use <code>ceil()</code> and <code>-1</code> in that equation because <code>max</code> now had a slightly less chance to roll, but you can roll the (unwanted) <code>min-1</code> result too.</p>\n",
    "score": 2555,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 58808,
      "name": "Ionuț G. Stan",
      "reputation": 111991
    }
  },
  {
    "soID": 824629,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/824629",
    "title": null,
    "body": "<p>Assuming you're not trying to do something malicious, anything you'd like to do to your own URLs can be magicked into being with <a href=\"http://corz.org/serv/tricks/htaccess2.php\" rel=\"nofollow noreferrer\">htaccess</a>.</p>\n",
    "score": -10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 59107,
      "name": "Hexagon Theory",
      "reputation": 10358
    }
  },
  {
    "soID": 728401,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/728401",
    "title": null,
    "body": "<p>If there are no circular dependencies in your object, I suggest using one of the other answers or <a href=\"https://stackoverflow.com/questions/122102/what-is-the-most-efficent-way-to-clone-a-javascript-object/122704#122704\">jQuery's copy methods</a>, as they all seem quite effective.</p>\n\n<p>If there are circular dependencies (i.e., two sub-objects link to each other), you are kind of screwed as there is (from a theoretical perspective) <a href=\"https://stackoverflow.com/questions/597588/how-do-you-clone-an-array-of-objects-in-javascript/597726#597726\">no way to solve this issue elegantly</a>.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6781092,
    "parentID": 306583,
    "url": "https://stackoverflow.com/q/6781092",
    "title": null,
    "body": "<p>If you need to get the first <code>img</code> that's down exactly one level, you can do </p>\n\n<pre><code>$(this).children(\"img:first\")\n</code></pre>\n",
    "score": 116,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 60422,
      "name": "rakslice",
      "reputation": 4658
    }
  },
  {
    "soID": 2865546,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/2865546",
    "title": null,
    "body": "<p>In pure jQuery style:</p>\n\n<pre><code>$(location).attr('href');\n</code></pre>\n\n<p>The location object also has other properties, like host, hash, protocol, and pathname.</p>\n",
    "score": 751,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 61337,
      "name": "Boris Guéry",
      "reputation": 36178
    }
  },
  {
    "soID": 1638449,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/1638449",
    "title": null,
    "body": "<blockquote>\n  <p><strong>WARNING:</strong> This answer has merely been provided as a possible solution; it is obviously <em>not</em> the best solution, as it requires jQuery. Instead, prefer the pure JavaScript solution.</p>\n</blockquote>\n\n<pre class=\"lang-js prettyprint-override\"><code>$(location).attr('href', 'http://stackoverflow.com')\n</code></pre>\n",
    "score": 1247,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 61337,
      "name": "Boris Guéry",
      "reputation": 36178
    }
  },
  {
    "soID": 1646957,
    "parentID": 1646698,
    "url": "https://stackoverflow.com/q/1646957",
    "title": null,
    "body": "<p>Suppose you have this function:</p>\n\n<pre><code>var Foo = function(){\n  this.A = 1;\n  this.B = 2;\n};\n</code></pre>\n\n<p>If you call this as a standalone function like so:</p>\n\n<pre><code>Foo();\n</code></pre>\n\n<p>Executing this function will add two properties to the <code>window</code> object (<code>A</code> and <code>B</code>). It adds it to the <code>window</code> because <code>window</code> is the object that called the function when you execute it like that, and <code>this</code> in a function is the object that called the function. In Javascript at least. </p>\n\n<p>Now, call it like this with <code>new</code>:</p>\n\n<pre><code>var bar = new Foo();\n</code></pre>\n\n<p>What happens when you add <code>new</code> to a function call is that a new object is created (just <code>var bar = new Object()</code>) and that the <code>this</code> within the function points to the new <code>Object</code> you just created, instead of to the object that called the function. So <code>bar</code> is now an object with the properties <code>A</code> and <code>B</code>. Any function can be a constructor, it just doesn't always make sense. </p>\n",
    "score": 326,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 61632,
      "name": "JulianR",
      "reputation": 11016
    }
  },
  {
    "soID": 3028037,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/3028037",
    "title": null,
    "body": "<p>You can listen for a <strong>click</strong> event on <code>document</code> and then make sure <code>#menucontainer</code> is not an ancestor or the target of the clicked element by using  <a href=\"http://api.jquery.com/closest/\" rel=\"noreferrer\"><code>.closest()</code></a>.</p>\n\n<p>If it is not, then the clicked element is outside of the <code>#menucontainer</code> and you can safely hide it.</p>\n\n<pre><code>$(document).click(function(event) { \n    if(!$(event.target).closest('#menucontainer').length) {\n        if($('#menucontainer').is(\":visible\")) {\n            $('#menucontainer').hide();\n        }\n    }        \n});\n</code></pre>\n\n<h3>Edit – 2017-06-23</h3>\n\n<p>You can also clean up after the event listener if you plan to dismiss the menu and want to stop listening for events. This function will clean up only the newly created listener, preserving any other click listeners on <code>document</code>. With ES2015 syntax:</p>\n\n<pre><code>export function hideOnClickOutside(selector) {\n  const outsideClickListener = (event) =&gt; {\n    if (!$(event.target).closest(selector).length) {\n      if ($(selector).is(':visible')) {\n        $(selector).hide()\n        removeClickListener()\n      }\n    }\n  }\n\n  const removeClickListener = () =&gt; {\n    document.removeEventListener('click', outsideClickListener)\n  }\n\n  document.addEventListener('click', outsideClickListener)\n}\n</code></pre>\n",
    "score": 940,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28890441,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/28890441",
    "title": null,
    "body": "<p><a href=\"http://momentjs.com\" rel=\"nofollow\">Moment.js</a> can abstract away a lot of the pain in dealing with Javascript Dates. </p>\n\n<p>See: <a href=\"http://momentjs.com/docs/#/displaying/unix-timestamp/\" rel=\"nofollow\">http://momentjs.com/docs/#/displaying/unix-timestamp/</a></p>\n\n<pre><code>moment().unix();\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 63810,
      "name": "Rimian",
      "reputation": 16672
    }
  },
  {
    "soID": 784989,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/784989",
    "title": null,
    "body": "<p>I suspect this is a leftover from C++ where people override the ! operator but not the bool operator.</p>\n\n<p>So to get a negative(or positive) answer in that case you would first need to use the ! operator to get a boolean, but if you wanted to check the positive case would use !!.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 65307,
      "name": "Darren Clark",
      "reputation": 2079
    }
  },
  {
    "soID": 14919756,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/14919756",
    "title": null,
    "body": "<p>You can do it in vanilla JavaScript pretty easily. Here's a snippet from my current project:</p>\n\n<pre><code>var xhr = new XMLHttpRequest();\nxhr.upload.onprogress = function(e) {\n    var percent = (e.position/ e.totalSize);\n    // Render a pretty progress bar\n};\nxhr.onreadystatechange = function(e) {\n    if(this.readyState === 4) {\n        // Handle file upload complete\n    }\n};\nxhr.open('POST', '/upload', true);\nxhr.setRequestHeader('X-FileName',file.name); // Pass the filename along\nxhr.send(file);\n</code></pre>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 65387,
      "name": "mpen",
      "reputation": 98682
    }
  },
  {
    "soID": 572905,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/572905",
    "title": null,
    "body": "<blockquote>\n  <p>what is the exact purpose of this \".prototype\" property?</p>\n</blockquote>\n\n<p>The interface to standard classes become extensible. For example, you are using the <code>Array</code> class and you also need to add a custom serializer for all your array objects. Would you spend time coding up a subclass, or use composition or ... The prototype property solves this by letting the users control the exact set of members/methods available to a class.</p>\n\n<p>Think of prototypes as an extra vtable-pointer. When some members are missing from the original class, the prototype is looked up at runtime.</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 66692,
      "name": "dirkgently",
      "reputation": 81328
    }
  },
  {
    "soID": 14774496,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/14774496",
    "title": null,
    "body": "<p>You <strong>should not use</strong> inline <code>onclick=\"something();\"</code> in your HTML to not polluate it with meaningless code; all click bindings must be set in Javascript files (*.js).</p>\n\n<p>Set binding like this : <code>$('#myAnchor').click(function(){... **return false**;});</code>  or  <code>$('#myAnchor').bind('click', function(){... **return false**;});</code></p>\n\n<p>Then you have a clean HTML file easy to load (and seo friendly) without thousands of <code>href=\"javascript:void(0);\"</code> and just <code>href=\"#\"</code></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 762018,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/762018",
    "title": null,
    "body": "<p>Here's an <a href=\"https://developer.mozilla.org/en/New_in_JavaScript_1.7#Block_scope_with_let\" rel=\"noreferrer\">explanation of the <code>let</code> keyword</a> with some examples.</p>\n\n<blockquote>\n  <p>let works very much like var. The main difference is that the scope of a var variable is the entire enclosing function</p>\n</blockquote>\n\n<p><a href=\"http://en.wikipedia.org/wiki/JavaScript#Version_history\" rel=\"noreferrer\">This table</a> on Wikipedia shows which browsers support Javascript 1.7.</p>\n\n<p>Note that only Mozilla and Chrome browsers support it. IE, Safari, and potentially others don't.</p>\n",
    "score": 109,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 68507,
      "name": "Ben S",
      "reputation": 51815
    }
  },
  {
    "soID": 867941,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/867941",
    "title": null,
    "body": "<pre><code>div = $(\"&lt;div&gt;\").html(\"Loading......\");\n$(\"body\").prepend(div);    \n</code></pre>\n",
    "score": 65,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 69818,
      "name": "Ish",
      "reputation": 11787
    }
  },
  {
    "soID": 901727,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/901727",
    "title": null,
    "body": "<blockquote>\n  <p>How do I successfully query the checked property?</p>\n</blockquote>\n\n<p>The <code>checked</code> property of a checkbox DOM element will give you the <code>checked</code> state of the element.</p>\n\n<p>Given your existing code, you could therefore do this:</p>\n\n<pre><code>if(document.getElementById('isAgeSelected').checked) {\n    $(\"#txtAge\").show();\n} else {\n    $(\"#txtAge\").hide();\n}\n</code></pre>\n\n<p>However, there's a much prettier way to do this, using <a href=\"http://api.jquery.com/toggle/\" rel=\"noreferrer\"><code>toggle</code></a>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$('#isAgeSelected').click(function() {\r\n    $(\"#txtAge\").toggle(this.checked);\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;input type=\"checkbox\" id=\"isAgeSelected\"/&gt;\r\n&lt;div id=\"txtAge\" style=\"display:none\"&gt;Age is something&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 2788,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1357151,
    "parentID": 1357118,
    "url": "https://stackoverflow.com/q/1357151",
    "title": null,
    "body": "<p><code>return false</code> from <em>within a jQuery event handler</em> is effectively the same as calling both  <code>e.preventDefault</code> and <code>e.stopPropagation</code> on the passed <a href=\"http://api.jquery.com/category/events/event-object/\" rel=\"noreferrer\">jQuery.Event object.</a></p>\n\n<p><code>e.preventDefault()</code> will prevent the default event from occuring, <code>e.stopPropagation()</code> will prevent the event from bubbling up and <code>return false</code> will do both. Note that this behaviour differs from <em>normal</em> (non-jQuery) event handlers, in which, notably, <code>return false</code> does <em>not</em> stop the event from bubbling up.</p>\n\n<p>Source: <a href=\"http://ejohn.org/\" rel=\"noreferrer\">John Resig</a></p>\n\n<p><a href=\"http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html\" rel=\"noreferrer\"><strong>Any benefit to using event.preventDefault() over \"return false\" to cancel out an href click?</strong></a></p>\n",
    "score": 2404,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 70393,
      "name": "karim79",
      "reputation": 264987
    }
  },
  {
    "soID": 684679,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/684679",
    "title": null,
    "body": "<p>You can just iterate over it like:</p>\n\n<pre><code>for (var key in p) {\n  alert(p[key]);\n}\n</code></pre>\n\n<p>Note that <code>key</code> will not take on the value of the property, it's just an index value.</p>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 72162,
      "name": "Bryan",
      "reputation": 1863
    }
  },
  {
    "soID": 610418,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/610418",
    "title": null,
    "body": "<p>There is \"sprintf\" for JavaScript which you can find at <a href=\"http://www.webtoolkit.info/javascript-sprintf.html\" rel=\"nofollow noreferrer\">http://www.webtoolkit.info/javascript-sprintf.html</a>.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21285901,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/21285901",
    "title": null,
    "body": "<p>Universal solution with JSON parse:</p>\n\n<pre><code>function getBool(val) {\n    return !!JSON.parse(String(val).toLowerCase());\n}\n\ngetBool(\"1\"); //true\ngetBool(\"0\"); //false\ngetBool(\"true\"); //true\ngetBool(\"false\"); //false\ngetBool(\"TRUE\"); //true\ngetBool(\"FALSE\"); //false\n</code></pre>\n\n<p>UPDATE (without JSON):</p>\n\n<pre><code>function getBool(val){ \n    var num = +val;\n    return !isNaN(num) ? !!num : !!String(val).toLowerCase().replace(!!0,'');\n}\n</code></pre>\n\n<p>I also created fiddle to test it <a href=\"http://jsfiddle.net/remunda/2GRhG/\">http://jsfiddle.net/remunda/2GRhG/</a></p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1129352,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/1129352",
    "title": null,
    "body": "<p>If you have duplicate last names you might sort those by first name-</p>\n\n<pre><code>obj.sort(function(a,b){\n  if(a.last_nom&lt; b.last_nom) return -1;\n  if(a.last_nom &gt;b.last_nom) return 1;\n  if(a.first_nom&lt; b.first_nom) return -1;\n  if(a.first_nom &gt;b.first_nom) return 1;\n  return 0;\n});\n</code></pre>\n",
    "score": 36,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 80860,
      "name": "kennebec",
      "reputation": 66894
    }
  },
  {
    "soID": 759284,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/759284",
    "title": null,
    "body": "<p>I use the following</p>\n\n<pre><code>&lt;a href=\"javascript:;\" onclick=\"myJsFunc();\"&gt;Link&lt;/a&gt;\n</code></pre>\n\n<p>instead</p>\n\n<pre><code>&lt;a href=\"javascript:void(0)\" onclick=\"myJsFunc();\"&gt;Link&lt;/a&gt;\n</code></pre>\n",
    "score": 53,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1089622,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/1089622",
    "title": null,
    "body": "<p>The other solutions here didn't work for me so I had to use:</p>\n\n<pre><code>if(!$(event.target).is('#foo'))\n{\n    // hide menu\n}\n</code></pre>\n",
    "score": 114,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 767499,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/767499",
    "title": null,
    "body": "<p>There are multiple solutions with all their own quirks. <a href=\"http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\" rel=\"noreferrer\">This page</a> gives a good overview. One possible solution is:</p>\n\n<pre><code>function isArray(o) {\n  return Object.prototype.toString.call(o) === '[object Array]'; \n}\n</code></pre>\n",
    "score": 68,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 85514,
      "name": "Peter Smit",
      "reputation": 9750
    }
  },
  {
    "soID": 728395,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/728395",
    "title": null,
    "body": "<p>From this article: <a href=\"http://my.opera.com/GreyWyvern/blog/show.dml/1725165\" rel=\"noreferrer\">How to copy arrays and objects in Javascript</a> by Brian Huisman:</p>\n\n<pre><code>Object.prototype.clone = function() {\n  var newObj = (this instanceof Array) ? [] : {};\n  for (var i in this) {\n    if (i == 'clone') continue;\n    if (this[i] &amp;&amp; typeof this[i] == \"object\") {\n      newObj[i] = this[i].clone();\n    } else newObj[i] = this[i]\n  } return newObj;\n};\n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10428184,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/10428184",
    "title": null,
    "body": "<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime\"><code>Date.getTime()</code></a> method can be used with a little tweak:</p>\n\n<blockquote>\n  <p>The value returned by the getTime method is the number of milliseconds\n  since 1 January 1970 00:00:00 UTC.</p>\n</blockquote>\n\n<p>Divide the result by 1000 to get the Unix timestamp, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\"><code>floor</code></a> if necessary:</p>\n\n<pre><code>(new Date).getTime() / 1000\n</code></pre>\n\n<hr>\n\n<p><sup>The <code>Date.valueOf()</code> method is functionally equivalent to <code>Date.getTime()</code>, which makes it possible to use arithmetic operators on date object to achieve identical results. In my opinion, this approach affects readability.</sup></p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 87015,
      "name": "Salman A",
      "reputation": 138954
    }
  },
  {
    "soID": 10428503,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/10428503",
    "title": null,
    "body": "<p>Hook a click event listener on the document. Inside the event listener, you can look at the <a href=\"http://api.jquery.com/category/events/event-object/\" rel=\"noreferrer\">event object</a>, in particular, the <a href=\"http://api.jquery.com/event.target/\" rel=\"noreferrer\">event.target</a> to see what element was clicked:</p>\n\n<pre><code>$(document).click(function(e){\n    if ($(e.target).closest(\"#menuscontainer\").length == 0) {\n        // .closest can help you determine if the element \n        // or one of its ancestors is #menuscontainer\n        console.log(\"hide\");\n    }\n});\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21204387,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/21204387",
    "title": null,
    "body": "<p>AJAX requests may not complete in the order they were started. Instead of aborting, you can choose to <em>ignore</em> all AJAX responses except for the most recent one:</p>\n\n<ul>\n<li>Create a counter</li>\n<li>Increment the counter when you initiate AJAX request</li>\n<li>Use the current value of counter to \"stamp\" the request</li>\n<li>In the success callback compare the stamp with the counter to check if it was the most recent request</li>\n</ul>\n\n<p>Rough outline of code:</p>\n\n<pre><code>var xhrCount = 0;\nfunction sendXHR() {\n    // sequence number for the current invocation of function\n    var seqNumber = ++xhrCount;\n    $.post(\"/echo/json/\", { delay: Math.floor(Math.random() * 5) }, function() {\n        // this works because of the way closures work\n        if (seqNumber === xhrCount) {\n            console.log(\"Process the response\");\n        } else {\n            console.log(\"Ignore the response\");\n        }\n    });\n}\nsendXHR();\nsendXHR();\nsendXHR();\n// AJAX requests complete in any order but only the last \n// one will trigger \"Process the response\" message\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/vyy3mn9x/\">Demo on jsFiddle</a></p>\n",
    "score": 33,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 87015,
      "name": "Salman A",
      "reputation": 138954
    }
  },
  {
    "soID": 784946,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/784946",
    "title": null,
    "body": "<p>Coerces <code>oObject</code> to boolean. If it was falsey (e.g. 0, <code>null</code>, <code>undefined</code>, etc.), it will be <code>false</code>, otherwise, <code>true</code>.</p>\n\n<pre><code>!oObject  //Inverted boolean\n!!oObject //Non inverted boolean so true boolean representation\n</code></pre>\n\n<p>So <code>!!</code> is not an operator, it's just the <code>!</code> operator twice.</p>\n\n<p>Real World Example \"Test IE version\":  </p>\n\n<pre><code>let isIE8 = false;  \nisIE8 = !! navigator.userAgent.match(/MSIE 8.0/);  \nconsole.log(isIE8); // returns true or false \n</code></pre>\n\n<p>If you =></p>\n\n<pre><code>console.log(navigator.userAgent.match(/MSIE 8.0/));  \n// returns null  \n</code></pre>\n\n<p>but if you =>  </p>\n\n<pre><code>console.log(!!navigator.userAgent.match(/MSIE 8.0/));  \n// returns true or false\n</code></pre>\n",
    "score": 1604,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 89075,
      "name": "Stevo3000",
      "reputation": 28975
    }
  },
  {
    "soID": 1527821,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/1527821",
    "title": null,
    "body": "<pre><code>function getRandomizer(bottom, top) {\n    return function() {\n        return Math.floor( Math.random() * ( 1 + top - bottom ) ) + bottom;\n    }\n}\n</code></pre>\n\n<p>usage:</p>\n\n<pre><code>var rollDie = getRandomizer( 1, 6 );\n\nvar results = \"\"\nfor ( var i = 0; i&lt;1000; i++ ) {\n    results += rollDie() + \" \";    //make a string filled with 1000 random numbers in the range 1-6.\n}\n</code></pre>\n\n<p>breakdown: </p>\n\n<p>We are returning a function (borrowing from functional programming) that when called, will return a random integer between the the values <code>bottom</code> and <code>top</code>, inclusive. We say 'inclusive' because we want to include both bottom and top in the range of numbers that can be returned. This way, <code>getRandomizer( 1, 6 )</code> will return either 1, 2, 3, 4, 5, or 6. </p>\n\n<p>(bottom is lower number, top is greater number)</p>\n\n<pre><code>Math.random() * ( 1 + top - bottom )\n</code></pre>\n\n<p><code>Math.random()</code> returns a random double between 0 and 1, and if we multiply it by one plus the difference between <code>top</code> and <code>bottom</code>, we'll get a double somewhere between <code>0</code> and <code>1+b-a</code>. </p>\n\n<pre><code>Math.floor( Math.random() * ( 1 + top - bottom ) )\n</code></pre>\n\n<p><code>Math.floor</code> rounds the number down to the nearest integer. So we now have all the integers between <code>0</code> and <code>top-bottom</code>. The 1 looks confusing, but it needs to be there because we are always rounding down, so the top number will never actually be reached without it. The random decimal we generate needs to be in the range <code>0</code> to <code>(1+top-bottom)</code> so we can round down and get an int in the range <code>0</code> to <code>top-bottom</code></p>\n\n<pre><code>Math.floor( Math.random() * ( 1 + top - bottom ) ) + bottom\n</code></pre>\n\n<p>The code in the previous example gave us an integer in the range <code>0</code> and <code>top-bottom</code>, so all we need to do now is add <code>bottom</code> to that result to get an integer in the range <code>bottom</code> and <code>top</code> inclusive. :D</p>\n\n<hr>\n\n<p>NOTE: If you pass in a non-integer value or the greater number first you'll get undesirable behavior, but unless anyone requests it I am not going to delve into the argument checking code as its rather far from the intent of the original question. </p>\n",
    "score": 42,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 89989,
      "name": "Gordon Gustafson",
      "reputation": 22483
    }
  },
  {
    "soID": 800021,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/800021",
    "title": null,
    "body": "<p>The ready function in jQuery does a number of things. Frankly, I don't see that point of replacing it unless you have amazingly small output from your website. jQuery is a pretty tiny library, and it handles all sorts of cross-browser things you'll need later.</p>\n\n<p>Anyway, there's little point in posting it here, just open up jQuery and look at the bindReady method.</p>\n\n<p>It starts by calling either document.addEventListener(\"DOMContentLoaded\") or document.attachEvent('onreadystatechange') depending on the event model, and goes on from there.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 91796,
      "name": "tnyfst",
      "reputation": 1450
    }
  },
  {
    "soID": 1414366,
    "parentID": 1414365,
    "url": "https://stackoverflow.com/q/1414366",
    "title": null,
    "body": "<h2>jQuery 1.6+</h2>\n\n<p>To change the <code>disabled</code> property you should use the <a href=\"http://api.jquery.com/prop\" rel=\"noreferrer\"><code>.prop()</code></a> function.</p>\n\n<pre><code>$(\"input\").prop('disabled', true);\n$(\"input\").prop('disabled', false);\n</code></pre>\n\n<h2>jQuery 1.5 and below</h2>\n\n<p>The <code>.prop()</code> function doesn't exist, but <a href=\"http://api.jquery.com/attr\" rel=\"noreferrer\"><code>.attr()</code></a> does similar:</p>\n\n<p>Set the disabled attribute.</p>\n\n<pre><code>$(\"input\").attr('disabled','disabled');\n</code></pre>\n\n<p>To enable again, the proper method is to use <a href=\"//api.jquery.com/removeAttr\" rel=\"noreferrer\"><code>.removeAttr()</code></a></p>\n\n<pre><code>$(\"input\").removeAttr('disabled');\n</code></pre>\n\n<h2>In any version of jQuery</h2>\n\n<p>You can always rely on the actual DOM object and is probably a little faster than the other two options if you are only dealing with one element:</p>\n\n<pre><code>// assuming an event handler thus 'this'\nthis.disabled = true;\n</code></pre>\n\n<p>The advantage to using the <code>.prop()</code> or <code>.attr()</code> methods is that you can set the property for a bunch of selected items.</p>\n\n<hr>\n\n<p><strong>Note:</strong> In 1.6 there is a <a href=\"//api.jquery.com/removeProp\" rel=\"noreferrer\"><code>.removeProp()</code></a> method that sounds a lot like <code>removeAttr()</code>, but it <strong>SHOULD NOT BE USED</strong> on native properties like <code>'disabled'</code>  Excerpt from the documentation:</p>\n\n<blockquote>\n  <p>Note: Do not use this method to remove native properties such as checked, disabled, or selected. This will remove the property completely and, once removed, cannot be added again to element. Use .prop() to set these properties to false instead.</p>\n</blockquote>\n\n<p>In fact, I doubt there are many legitimate uses for this method, boolean props are done in such a way that you should set them to false instead of \"removing\" them like their \"attribute\" counterparts in 1.5</p>\n",
    "score": 2922,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 91914,
      "name": "gnarf",
      "reputation": 80018
    }
  },
  {
    "soID": 1789952,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/1789952",
    "title": null,
    "body": "<p>Here is a list of current possibilities:</p>\n\n<p><strong>1. indexOf</strong></p>\n\n<pre><code>var string = \"foo\",\n    substring = \"oo\";\nstring.indexOf(substring) !== -1;\n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\" rel=\"noreferrer\"><code>String.prototype.indexOf</code></a> returns the position of the string in the other string. If not found, it will return <code>-1</code>.</p>\n\n<p><strong>2. (ES6) includes</strong> - <a href=\"https://stackoverflow.com/a/14193950/2689455\">go to answer</a>, or <a href=\"https://stackoverflow.com/a/2385801/2689455\">this answer</a></p>\n\n<pre><code>var string = \"foo\",\n    substring = \"oo\";\nstring.includes(substring);\n</code></pre>\n\n<p><strong>3. search</strong> - <a href=\"https://stackoverflow.com/a/2385801/2689455\">go to answer</a></p>\n\n<pre><code>var string = \"foo\",\n    expr = /oo/;\nstring.search(expr);\n</code></pre>\n\n<p><strong>4. lodash includes</strong> - <a href=\"https://stackoverflow.com/a/20575032/2689455\">go to answer</a></p>\n\n<pre><code>var string = \"foo\",\n    substring = \"oo\";\n_.includes(string, substring);\n</code></pre>\n\n<p><strong>5. RegExp</strong> - <a href=\"https://stackoverflow.com/a/1789980/2689455\">go to answer</a></p>\n\n<pre><code>var string = \"foo\",\n    expr = /oo/;  // no quotes here\nexpr.test(string);\n</code></pre>\n\n<p><strong>6. Match</strong> - <a href=\"https://stackoverflow.com/a/12652006/2689455\">go to answer</a></p>\n\n<pre><code>var string = \"foo\",\n    expr = /oo/;\nstring.match(expr);\n</code></pre>\n\n<hr>\n\n<p>Performance tests (<a href=\"http://jsben.ch/#/RVYk7\" rel=\"noreferrer\">http://jsben.ch/#/RVYk7</a>) are showing that indexOf might be the best choice, if it comes to a point where speed matters.</p>\n",
    "score": 9351,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 92315,
      "name": "Fabien Ménager",
      "reputation": 106669
    }
  },
  {
    "soID": 1144790,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/1144790",
    "title": null,
    "body": "<pre><code>str = str.replace(/abc/g, '');\n</code></pre>\n\n<p>Or try the replaceAll function from here:</p>\n\n<p><a href=\"https://stackoverflow.com/questions/1137436/useful-javascript-methods-that-extends-built-in-objects/1137579#1137579\">What are useful JavaScript methods that extends built-in objects?</a></p>\n\n<pre><code>str = str.replaceAll('abc', ''); OR\n\nvar search = 'abc';\nstr = str.replaceAll(search, '');\n</code></pre>\n\n<p><strong>EDIT:</strong> Clarification about replaceAll availability</p>\n\n<p>The 'replaceAll' method is added to String's prototype. This means it will be available for all string objects/literals.</p>\n\n<p>E.g.</p>\n\n<pre><code>var output = \"test this\".replaceAll('this', 'that');  //output is 'test that'.\noutput = output.replaceAll('that', 'this'); //output is 'test this'\n</code></pre>\n",
    "score": 31,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 92414,
      "name": "SolutionYogi",
      "reputation": 23103
    }
  },
  {
    "soID": 767492,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/767492",
    "title": null,
    "body": "<p>You could also use:</p>\n\n<pre><code>if (value instanceof Array) {\n  alert('value is Array!');\n} else {\n  alert('Not an array');\n}\n</code></pre>\n\n<p>This seems to me a pretty elegant solution, but to each his own.</p>\n\n<p>Edit: </p>\n\n<p>As of ES5 there is now also: </p>\n\n<pre><code>Array.isArray(value);\n</code></pre>\n\n<p>But this will break on older browsers, unless you are using polyfills (basically... IE8 or similar).</p>\n",
    "score": 932,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 92932,
      "name": "Brett Bender",
      "reputation": 16709
    }
  },
  {
    "soID": 34690541,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/34690541",
    "title": null,
    "body": "<p>By no means the best, but I was just getting creative and adding to the repertoire.</p>\n\n<h3>Do not use this</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>Object.defineProperty(Array.prototype, 'exists', {\r\n  value: function(element, index) {\r\n\r\n    var index = index || 0\r\n\r\n    return index === this.length ? -1 : this[index] === element ? index : this.exists(element, ++index)\r\n  }\r\n})\r\n\r\n\r\n// Outputs 1\r\nconsole.log(['one', 'two'].exists('two'));\r\n\r\n// Outputs -1\r\nconsole.log(['one', 'two'].exists('three'));\r\n\r\nconsole.log(['one', 'two', 'three', 'four'].exists('four'));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 93026,
      "name": "sqram",
      "reputation": 3643
    }
  },
  {
    "soID": 1357136,
    "parentID": 1357118,
    "url": "https://stackoverflow.com/q/1357136",
    "title": null,
    "body": "<p>You can hang a lot of functions on the <code>onClick</code> event for one element. How can you be sure the <code>false</code> one will be the last one to fire? <code>preventDefault</code> on the other hand will definitely prevent only the default behavior of the element.</p>\n",
    "score": 30,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 94428,
      "name": "Eldar Djafarov",
      "reputation": 9670
    }
  },
  {
    "soID": 2577818,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/2577818",
    "title": null,
    "body": "<p>Now there is a plugin for that: <a href=\"https://github.com/cowboy/jquery-outside-events\" rel=\"noreferrer\">outside events</a> (<a href=\"http://benalman.com/projects/jquery-outside-events-plugin/\" rel=\"noreferrer\">blog post</a>)</p>\n\n<p>The following happens when a <em>clickoutside</em> handler (WLOG) is bound to an element:</p>\n\n<ul>\n<li>the element is added to an array which holds all elements with <em>clickoutside</em> handlers</li>\n<li>a (<a href=\"http://docs.jquery.com/Namespaced_Events\" rel=\"noreferrer\">namespaced</a>) <em>click</em> handler is bound to the document (if not already there)</li>\n<li>on any <em>click</em> in the document, the <em>clickoutside</em> event is triggered for those elements in that array that are not equal to or a parent of the <em>click</em>-events target</li>\n<li>additionally, the event.target for the <em>clickoutside</em> event is set to the element the user clicked on (so you even know what the user clicked, not just that he clicked outside)</li>\n</ul>\n\n<p>So no events are stopped from propagation and additional <em>click</em> handlers may be used \"above\" the element with the outside-handler.</p>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 814376,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/814376",
    "title": null,
    "body": "<p>I'd like to say the difference is purely stylistic, but I'm really having my doubts. Consider the following example:</p>\n\n<pre><code>/*\n   Add trim() functionality to JavaScript...\n    1. By extending the String prototype\n    2. By creating a 'stand-alone' function\n   This is just to demonstrate results are the same in both cases.\n*/\n\n// Extend the String prototype with a trim() method\nString.prototype.trim = function() {\n return this.replace(/^\\s+|\\s+$/g, '');\n};\n\n// 'Stand-alone' trim() function\nfunction trim(str) {\n return str.replace(/^\\s+|\\s+$/g, '');\n};\n\ndocument.writeln(String.prototype.trim);\ndocument.writeln(trim);\n</code></pre>\n\n<p>In Safari, Chrome, Opera, and Internet Explorer (tested in IE7 and IE8), this will return the following:</p>\n\n<pre><code>function () {\n return this.replace(/^\\s+|\\s+$/g, '');\n}\nfunction trim(str) {\n return str.replace(/^\\s+|\\s+$/g, '');\n}\n</code></pre>\n\n<p>However, Firefox will yield a slightly different result:</p>\n\n<pre><code>function () {\n    return this.replace(/^\\s+|\\s+$/g, \"\");\n}\nfunction trim(str) {\n    return str.replace(/^\\s+|\\s+$/g, \"\");\n}\n</code></pre>\n\n<p>The single quotes have been replaced by double quotes. (Also note how the indenting space was replaced by four spaces.) This gives the impression that at least one browser parses JavaScript internally as if everything was written using double quotes. <em>One might think, it takes Firefox less time to parse JavaScript if everything is already written according to this 'standard'.</em></p>\n\n<p>Which, by the way, makes me a very sad panda, since I think single quotes look much nicer in code. Plus, in other programming languages, they're usually faster to use than double quotes, so it would only make sense if the same applied to JavaScript.</p>\n\n<p><strong>Conclusion:</strong> I think we need to do more research on this.</p>\n\n<p><strong>Edit:</strong> This might explain <a href=\"http://lists.evolt.org/pipermail/javascript/2003-November/006155.html\" rel=\"noreferrer\">Peter-Paul Koch's test results</a> from back in 2003.</p>\n\n<blockquote>\n  <p>It seems that single quotes are <em>sometimes</em> faster in Explorer Windows (roughly 1/3 of my tests did show a faster response time), but if Mozilla shows a difference at all, it handles double quotes slightly faster. I found no difference at all in Opera.</p>\n</blockquote>\n\n<p><strong>Edit 2014:</strong> Modern versions of Firefox/Spidermonkey don’t do this anymore.</p>\n",
    "score": 52,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10421803,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/10421803",
    "title": null,
    "body": "<p>Technically there's no difference, it's only matter of style and convention.</p>\n\n<p>Douglas Crockford recommends using single quotes for internal strings and double quotes for external (by external we mean those to be displayed to user of application, like messages or alerts).  </p>\n\n<p>I personally follow that.</p>\n\n<p><em>UPDATE: It appears that Mr. Crockford <a href=\"https://plus.google.com/+DouglasCrockfordEsq/posts/EBky2K9erKt\" rel=\"noreferrer\">changed his mind</a> and now recommends using double quotes throughout  :)</em></p>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 805113,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/805113",
    "title": null,
    "body": "<h3>Update:</h3>\n\n<p>ECMAScript 6 (ES6) introduces a new type of literal, namely <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings\" rel=\"noreferrer\"><strong>template literals</strong></a>. They have many features, variable interpolation among others, but most importantly for this question, they can be multiline.</p>\n\n<p>A template literal is delimited by <em>backticks</em>:</p>\n\n<pre><code>var html = `\n  &lt;div&gt;\n    &lt;span&gt;Some HTML here&lt;/span&gt;\n  &lt;/div&gt;\n`;\n</code></pre>\n\n<p>(Note: I'm not advocating to use HTML in strings)</p>\n\n<p><a href=\"https://kangax.github.io/compat-table/es6/#template_strings\" rel=\"noreferrer\">Browser support is OK</a>, but you can use <a href=\"https://babeljs.io/\" rel=\"noreferrer\">transpilers</a> to be more compatible.</p>\n\n<hr>\n\n<h3>Original ES5 answer:</h3>\n\n<p>Javascript doesn't have a here-document syntax. You can escape the literal newline, however, which comes close:</p>\n\n<pre><code>\"foo \\\nbar\"\n</code></pre>\n",
    "score": 1784,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 97408,
      "name": "Anonymous",
      "reputation": 21907
    }
  },
  {
    "soID": 814644,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/814644",
    "title": null,
    "body": "<p>I think it's important not to forget that while IE might have 0 extensions/toolbars installed, firefox might have some extensions installed (I'm just thinking of firebug for instance). Those extensions will have an influence on the benchmark result. </p>\n\n<p>Not that it really matters since browser X is faster in getting elementstyles, while browser Y might be faster in rendering a canvas element. (hence why a browser \"manufacturer\" always has the fastest javascript engine)</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 867932,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/867932",
    "title": null,
    "body": "<pre><code>&lt;div id=\"foo\"&gt;&lt;/div&gt;\n\n$('#foo').html('&lt;div&gt;&lt;/div&gt;');\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 103014,
      "name": "egaga",
      "reputation": 9740
    }
  },
  {
    "soID": 901144,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/901144",
    "title": null,
    "body": "<p>You don't need jQuery for that purpose. You can use just some pure JavaScript:</p>\n\n<pre><code>function getParameterByName(name, url) {\n    if (!url) url = window.location.href;\n    name = name.replace(/[\\[\\]]/g, \"\\\\$&amp;\");\n    var regex = new RegExp(\"[?&amp;]\" + name + \"(=([^&amp;#]*)|&amp;|#|$)\"),\n        results = regex.exec(url);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n</code></pre>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>// query string: ?foo=lorem&amp;bar=&amp;baz\nvar foo = getParameterByName('foo'); // \"lorem\"\nvar bar = getParameterByName('bar'); // \"\" (present with empty value)\nvar baz = getParameterByName('baz'); // \"\" (present with no value)\nvar qux = getParameterByName('qux'); // null (absent)\n</code></pre>\n\n<p><br>\nNote: If a parameter is present several times (<code>?foo=lorem&amp;foo=ipsum</code>), you will get the first value (<code>lorem</code>). There is no standard about this and usages vary, see for example this question: <a href=\"https://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys\">Authoritative position of duplicate HTTP GET query keys</a>.</p>\n",
    "score": 6196,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2818945,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/2818945",
    "title": null,
    "body": "<p>It checks if same sides are equal in <strong>type</strong> as well as <strong>value</strong>.</p>\n\n<p><em>Example:</em></p>\n\n<pre><code>'1' === 1 // will return \"false\" because `string` is not a `number`\n</code></pre>\n\n<p><em>Common Example:</em></p>\n\n<pre><code>0 == ''  // will be \"true\", but it's very common to want this check to be \"false\"\n</code></pre>\n",
    "score": 52,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 104380,
      "name": "vsync",
      "reputation": 33341
    }
  },
  {
    "soID": 867981,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/867981",
    "title": null,
    "body": "<p>First select the parent element with something like</p>\n\n<pre><code>$(\"#id\"), $(\"element\") or $(\".class\")\n</code></pre>\n\n<p>Then use the <code>.append(\"&lt;div&gt;foo&lt;/div&gt;\")</code> function. Alternatively, you can use the <code>.html()</code> as mentioned in a <a href=\"https://stackoverflow.com/a/867941/59087\">different answer</a>.</p>\n\n<pre><code>$(\"#foo\").append(\"&lt;div&gt;hello world&lt;/div&gt;\")\n</code></pre>\n\n\n",
    "score": 873,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 107618,
      "name": "cm2",
      "reputation": 9404
    }
  },
  {
    "soID": 13030634,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/13030634",
    "title": null,
    "body": "<p>I've been using this snippet to convert Numbers and Booleans:</p>\n\n<pre><code>var result = !isNaN(value) ? parseFloat(value) : /^\\s*(true|false)\\s*$/i.exec(value) ? RegExp.$1.toLowerCase() === \"true\" : value;\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 903152,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/903152",
    "title": null,
    "body": "<p>This worked for me:</p>\n\n<pre><code>$get(\"isAgeSelected \").checked == true\n</code></pre>\n\n<p>Where <code>isAgeSelected</code> is the id of the control.</p>\n\n<p>Also, @karim79's <a href=\"https://stackoverflow.com/questions/901712/check-checkbox-checked-property-using-jquery/901727#901727\">answer</a> works fine. I am not sure what I missed at the time I tested it.</p>\n\n<p><strong>Note, this is answer uses Microsoft Ajax, not jQuery</strong></p>\n",
    "score": 68,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1232046,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/1232046",
    "title": null,
    "body": "<p>Ways to clear an existing array <code>A</code>:</p>\n\n<p><strong>Method 1</strong></p>\n\n<p>(this was my original answer to the question)</p>\n\n<pre><code>A = [];\n</code></pre>\n\n<p>This code will set the variable <code>A</code> to a new empty array. This is perfect if you don't have <strong>references to the original array <code>A</code></strong> anywhere else because this actually creates a brand new (empty) array. You should be careful with this method because if you have referenced this array from another variable or property, the original array will remain unchanged. Only use this if you only reference the array by its original variable <code>A</code>.</p>\n\n<p>This is also the fastest solution.</p>\n\n<p>This code sample shows the issue you can encounter when using this method:</p>\n\n<pre><code>var arr1 = ['a','b','c','d','e','f'];\nvar arr2 = arr1;  // Reference arr1 by another variable \narr1 = [];\nconsole.log(arr2); // Output ['a','b','c','d','e','f']\n</code></pre>\n\n<p><strong>Method 2</strong> (as <a href=\"https://stackoverflow.com/a/1234337/113570\">suggested</a> by <a href=\"https://stackoverflow.com/users/2214/matthew-crumley\">Matthew Crumley</a>)</p>\n\n<pre><code>A.length = 0\n</code></pre>\n\n<p>This will clear the existing array by setting its length to 0. Some have argued that this may not work in all implementations of JavaScript, but it turns out that this is not the case. It also works when using \"strict mode\" in ECMAScript 5 because the length property of an array is a read/write property.</p>\n\n<p><strong>Method 3</strong> (as <a href=\"https://stackoverflow.com/a/8134354/113570\">suggested</a> by <a href=\"https://stackoverflow.com/users/1047275/anthony\">Anthony</a>)</p>\n\n<pre><code>A.splice(0,A.length)\n</code></pre>\n\n<p>Using <code>.splice()</code> will work perfectly, but since the <code>.splice()</code> function will return an array with all the removed items, it will actually return a copy of the original array. Benchmarks suggest that this has no effect on performance whatsoever.</p>\n\n<p><strong>Method 4</strong> (as <a href=\"https://stackoverflow.com/a/17306971/113570\">suggested</a> by <a href=\"https://stackoverflow.com/users/990356/tanguy-k\">tanguy_k</a>)</p>\n\n<pre><code>while(A.length &gt; 0) {\n    A.pop();\n}\n</code></pre>\n\n<p>This solution is not very succinct, and it is also the slowest solution, contrary to earlier benchmarks referenced in the original answer.</p>\n\n<p><strong>Performance</strong></p>\n\n<p>Of all the methods of clearing an <strong><em>existing array</em></strong>, methods 2 and 3 are very similar in performance and are a lot faster than method 4. See this <a href=\"http://jsben.ch/#/hyj65\" rel=\"noreferrer\">benchmark</a>.</p>\n\n<p>As pointed out by <a href=\"https://stackoverflow.com/users/47401/diadistis\">Diadistis</a> in their <a href=\"https://stackoverflow.com/a/28548360/113570\">answer</a> below, the original benchmarks that were used to determine the performance of the four methods described above were flawed. The original benchmark reused the cleared array so the second iteration was clearing an array that was already empty.</p>\n\n<p>The following benchmark fixes this flaw: <a href=\"http://jsben.ch/#/hyj65\" rel=\"noreferrer\">http://jsben.ch/#/hyj65</a>. It clearly shows that methods #2 (length property) and #3 (splice) are the fastest (not counting method #1 which doesn't change the original array).</p>\n\n<hr/>\n\n<p>This has been a hot topic and the cause of a lot of controversy. There are actually many correct answers and because this answer has been marked as the accepted answer for a very long time, I will include all of the methods here. If you vote for this answer, please upvote the other answers that I have referenced as well.</p>\n",
    "score": 2760,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 113570,
      "name": "Philippe Leybaert",
      "reputation": 111588
    }
  },
  {
    "soID": 957602,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/957602",
    "title": null,
    "body": "<p>In the answers here, I didn't read anything about what <strong>equal</strong> means. Some will say that <code>===</code> means <strong>equal and of the same type</strong>, but that's not really true. It actually means that <strong>both operands reference the same object</strong>, or in case of <strong>value types, have the same value</strong>.</p>\n\n<p>So, let's take the following code:</p>\n\n<pre><code>var a = [1,2,3];\nvar b = [1,2,3];\nvar c = a;\n\nvar ab_eq = (a === b); // false (even though a and b are the same type)\nvar ac_eq = (a === c); // true\n</code></pre>\n\n<p>The same here:</p>\n\n<pre><code>var a = { x: 1, y: 2 };\nvar b = { x: 1, y: 2 };\nvar c = a;\n\nvar ab_eq = (a === b); // false (even though a and b are the same type)\nvar ac_eq = (a === c); // true\n</code></pre>\n\n<p>Or even:</p>\n\n<pre><code>var a = { };\nvar b = { };\nvar c = a;\n\nvar ab_eq = (a === b); // false (even though a and b are the same type)\nvar ac_eq = (a === c); // true\n</code></pre>\n\n<p>This behavior is not always obvious. There's more to the story than being equal and being of the same type.</p>\n\n<p>The rule is:</p>\n\n<p><strong><em>For value types (numbers):</em></strong><br>\n   <code>a === b</code> returns true if <code>a</code> and <code>b</code> have the same value and are of the same type</p>\n\n<p><strong><em>For reference types:</em></strong><br>\n   <code>a === b</code> returns true if <code>a</code> and <code>b</code> reference the exact same object</p>\n\n<p><strong><em>For strings:</em></strong><br>\n   <code>a === b</code> returns true if <code>a</code> and <code>b</code> are both strings and contain the exact same characters</p>\n\n<hr>\n\n<h2>Strings: the special case...</h2>\n\n<p>Strings are not value types, but in Javascript they behave like value types, so they will be \"equal\" when the characters in the string are the same and when they are of the same length (as explained in the third rule)</p>\n\n<p>Now it becomes interesting:</p>\n\n<pre><code>var a = \"12\" + \"3\";\nvar b = \"123\";\n\nalert(a === b); // returns true, because strings behave like value types\n</code></pre>\n\n<p>But how about this?:</p>\n\n<pre><code>var a = new String(\"123\");\nvar b = \"123\";\n\nalert(a === b); // returns false !! (but they are equal and of the same type)\n</code></pre>\n\n<p>I thought strings behave like value types? Well, it depends who you ask... In this case a and b are not the same type. <code>a</code> is of type <code>Object</code>, while <code>b</code> is of type <code>string</code>. Just remember that creating a string object using the <code>String</code> constructor creates something of type <code>Object</code> that behaves as a string <em>most of the time</em>.</p>\n",
    "score": 470,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 113570,
      "name": "Philippe Leybaert",
      "reputation": 111588
    }
  },
  {
    "soID": 1527832,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/1527832",
    "title": null,
    "body": "<pre><code>function getRandomInt(lower, upper)\n{\n    //to create an even sample distribution\n    return Math.floor(lower + (Math.random() * (upper - lower + 1)));\n\n    //to produce an uneven sample distribution\n    //return Math.round(lower + (Math.random() * (upper - lower)));\n\n    //to exclude the max value from the possible values\n    //return Math.floor(lower + (Math.random() * (upper - lower)));\n}\n</code></pre>\n\n<p>To test this function, and variations of this function, save the below HTML/JavaScript to a file and open with a browser.  The code will produce a <em>graph</em> showing the distribution of one million function calls.  The code will also record the edge cases, so if the the function produces a value greater than the max, or less than the min, you.will.know.about.it.</p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script type=\"text/javascript\"&gt;\n        function getRandomInt(lower, upper)\n        {\n            //to create an even sample distribution\n            return Math.floor(lower + (Math.random() * (upper - lower + 1)));\n\n            //to produce an uneven sample distribution\n            //return Math.round(lower + (Math.random() * (upper - lower)));\n\n            //to exclude the max value from the possible values\n            //return Math.floor(lower + (Math.random() * (upper - lower)));\n        }\n\n        var min = -5;\n        var max = 5;\n\n        var array = new Array();\n\n        for(var i = 0; i &lt;= (max - min) + 2; i++) {\n          array.push(0);\n        }\n\n        for(var i = 0; i &lt; 1000000; i++) {\n            var random = getRandomInt(min, max);\n            array[random - min + 1]++;\n        }\n\n        var maxSample = 0;\n        for(var i = 0; i &lt; max - min; i++) {\n            maxSample = Math.max(maxSample, array[i]);\n        }\n\n        //create a bar graph to show the sample distribution\n        var maxHeight = 500;\n        for(var i = 0; i &lt;= (max - min) + 2; i++) {\n            var sampleHeight = (array[i]/maxSample) * maxHeight;\n\n            document.write('&lt;span style=\"display:inline-block;color:'+(sampleHeight == 0 ? 'black' : 'white')+';background-color:black;height:'+sampleHeight+'px\"&gt;&amp;nbsp;[' + (i + min - 1) + ']:&amp;nbsp;'+array[i]+'&lt;/span&gt;&amp;nbsp;&amp;nbsp;');\n        }\n        document.write('&lt;hr/&gt;');\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 114454,
      "name": "Chris",
      "reputation": 1643
    }
  },
  {
    "soID": 1406611,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/1406611",
    "title": null,
    "body": "<p>It converts the suffix to a Boolean value. </p>\n",
    "score": 24,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 114917,
      "name": "Paul McMillan",
      "reputation": 15065
    }
  },
  {
    "soID": 950098,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/950098",
    "title": null,
    "body": "<p>It is possible to dynamically generate a JavaScript tag and append it to HTML document from inside other JavaScript code. This will load targeted JavaScript file.</p>\n\n<pre><code>function includeJs(jsFilePath) {\n    var js = document.createElement(\"script\");\n\n    js.type = \"text/javascript\";\n    js.src = jsFilePath;\n\n    document.body.appendChild(js);\n}\n\nincludeJs(\"/path/to/some/file.js\");\n</code></pre>\n",
    "score": 53,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 115160,
      "name": "Svitlana Maksymchuk",
      "reputation": 2716
    }
  },
  {
    "soID": 1646731,
    "parentID": 1646698,
    "url": "https://stackoverflow.com/q/1646731",
    "title": null,
    "body": "<p>The <code>new</code> keyword is for creating new object instances. And yes, javascript is a dynamic programming language, which supports the object oriented programming paradigm. The convention about the object naming is, always use capital letter for objects that are supposed to be instantiated by the new keyword.</p>\n\n<pre><code>obj = new Element();\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 116273,
      "name": "erenon",
      "reputation": 13157
    }
  },
  {
    "soID": 950109,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/950109",
    "title": null,
    "body": "<p>Maybe you can use this function that I found on this page <em><a href=\"http://forums.digitalpoint.com/showthread.php?t=146094\" rel=\"noreferrer\">How do I include a JavaScript file in a JavaScript file?</a></em>:</p>\n\n<pre><code>function include(filename)\n{\n    var head = document.getElementsByTagName('head')[0];\n\n    var script = document.createElement('script');\n    script.src = filename;\n    script.type = 'text/javascript';\n\n    head.appendChild(script)\n}\n</code></pre>\n",
    "score": 39,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 117263,
      "name": "Arnaud Gouder de Beauregard",
      "reputation": 869
    }
  },
  {
    "soID": 5185403,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/5185403",
    "title": null,
    "body": "<p>Other commenters have already covered the semantic difference of the two variants above. I wanted to note a stylistic difference: Only the \"assignment\" variation can set a property of another object.</p>\n\n<p>I often build JavaScript modules with a pattern like this:</p>\n\n<pre><code>(function(){\n    var exports = {};\n\n    function privateUtil() {\n            ...\n    }\n\n    exports.publicUtil = function() {\n            ...\n    };\n\n    return exports;\n})();\n</code></pre>\n\n<p>With this pattern, your public functions will all use assignment, while your private functions use declaration.</p>\n\n<p>(Note also that assignment should require a semicolon after the statement, while declaration prohibits it.)</p>\n",
    "score": 73,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 117587,
      "name": "Sean McMillan",
      "reputation": 7149
    }
  },
  {
    "soID": 1342459,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/1342459",
    "title": null,
    "body": "<p>Here's how <a href=\"http://github.com/sstephenson/prototype/blob/f405b2c510e09b55d08c926a9e1a5c2e2d0a1834/src/lang/array.js#L286-302\" rel=\"nofollow noreferrer\">Prototype does it</a>:</p>\n\n<pre><code>/**\n *  Array#indexOf(item[, offset = 0]) -&gt; Number\n *  - item (?): A value that may or may not be in the array.\n *  - offset (Number): The number of initial items to skip before beginning the\n *      search.\n *\n *  Returns the position of the first occurrence of `item` within the array &amp;mdash; or\n *  `-1` if `item` doesn't exist in the array.\n**/\nfunction indexOf(item, i) {\n  i || (i = 0);\n  var length = this.length;\n  if (i &lt; 0) i = length + i;\n  for (; i &lt; length; i++)\n    if (this[i] === item) return i;\n  return -1;\n}\n</code></pre>\n\n<p>Also see <a href=\"http://github.com/sstephenson/prototype/blob/f405b2c510e09b55d08c926a9e1a5c2e2d0a1834/src/lang/array.js#L364-365\" rel=\"nofollow noreferrer\">here</a> for how they hook it up.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 121620,
      "name": "Ken",
      "reputation": 2535
    }
  },
  {
    "soID": 1986906,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/1986906",
    "title": null,
    "body": "<p>K. Scott Allen has <a href=\"http://odetocode.com/blogs/scott/archive/2007/07/04/function-apply-and-function-call-in-javascript.aspx\" rel=\"noreferrer\">a nice writeup</a> on the matter.</p>\n\n<p>Basically, they differ on how they handle function arguments.  </p>\n\n<blockquote>\n  <p>The apply() method is identical to call(), except apply() requires an array as the second parameter. The array represents the arguments for the target method.\"</p>\n</blockquote>\n\n<p>So:</p>\n\n<pre><code>// assuming you have f\nfunction f(message) { ... }\nf.call(receiver, \"test\");\nf.apply(receiver, [\"test\"]);\n</code></pre>\n",
    "score": 185,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 125844,
      "name": "notnoop",
      "reputation": 45336
    }
  },
  {
    "soID": 42220613,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/42220613",
    "title": null,
    "body": "<pre><code>var trueVals = [\"y\", \"t\", \"yes\", \"true\", \"gimme\"];\nvar isTrueSet = (trueVals.indexOf(myValue) &gt; -1) ? true : false;\n</code></pre>\n\n<p>or even just</p>\n\n<pre><code>var trueVals = [\"y\", \"t\", \"yes\", \"true\", \"gimme\"];\nvar isTrueSet = (trueVals.indexOf(myValue) &gt; -1);\n</code></pre>\n\n<p>Similar to some of the switch statements but more compact. The value returned will only be true if the string is one of the trueVals strings. Everything else is false. Of course, you might want to normalise the input string to make it lower case and trim any spaces.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1407785,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/1407785",
    "title": null,
    "body": "<p>It's not a single operator, it's two.  It's equivalent to the following and is a quick way to cast a value to boolean. </p>\n\n<pre><code>val.enabled = !(!enable);\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 126562,
      "name": "Justin Johnson",
      "reputation": 24129
    }
  },
  {
    "soID": 1785783,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/1785783",
    "title": null,
    "body": "<p><code>#</code> is better than <code>javascript:anything</code>, but the following is even better:</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;a href=\"/gracefully/degrading/url/with/same/functionality.ext\" class=\"some-selector\"&gt;For great justice&lt;/a&gt;\n</code></pre>\n\n<p>JavaScript:</p>\n\n<pre><code>$(function() {\n    $(\".some-selector\").click(myJsFunc);\n});\n</code></pre>\n\n<p>You should always strive for graceful degradation (in the event that the user doesn't have JavaScript enabled...and when it is with specs. and budget).  Also, it is considered bad form to use JavaScript attributes and protocol directly in HTML.</p>\n",
    "score": 46,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1026098,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/1026098",
    "title": null,
    "body": "<p>Here is a function called <strong>ucfirst()</strong> (short for \"upper case first letter\"):</p>\n\n<pre><code>function ucfirst(str) {\n    var firstLetter = str.substr(0, 1);\n    return firstLetter.toUpperCase() + str.substr(1);\n}\n</code></pre>\n\n<p>You can capitalise a string by calling <strong>ucfirst(\"some string\")</strong> -- for example,</p>\n\n<pre><code>ucfirst(\"this is a test\") --&gt; \"This is a test\"\n</code></pre>\n\n<p>It works by splitting the string into two pieces.  On the first line it pulls out <strong>firstLetter</strong> and then on the second line it capitalises <strong>firstLetter</strong> by calling <strong>firstLetter.toUpperCase()</strong> and joins it with the rest of the string, which is found by calling <strong>str.substr(1)</strong>.</p>\n\n<p>You might think this would fail for an empty string, and indeed in a language like C you would have to cater for this. However in JavaScript, when you take a substring of an empty string, you just get an empty string back.</p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 126778,
      "name": "Robert Wills",
      "reputation": 12528
    }
  },
  {
    "soID": 9440536,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/9440536",
    "title": null,
    "body": "<p>Doing <code>&lt;a href=\"#\" onclick=\"myJsFunc();\"&gt;Link&lt;/a&gt;</code> or <code>&lt;a href=\"javascript:void(0)\" onclick=\"myJsFunc();\"&gt;Link&lt;/a&gt;</code> or whatever else that contains an <code>onclick</code> attribute - was okay back five years ago, though now it can be a bad practice. Here's why:</p>\n\n<ol>\n<li><p>It promotes the practice of obtrusive JavaScript - which has turned out to be difficult to maintain and difficult to scale. More on this in <em><a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\" rel=\"noreferrer\">Unobtrusive JavaScript</a></em>.</p></li>\n<li><p>You're spending your time writing incredibly overly verbose code - which has very little (if any) benefit to your codebase.</p></li>\n<li><p>There are now better, easier, and more maintainable and scalable ways of accomplishing the desired result.</p></li>\n</ol>\n\n<h2>The unobtrusive JavaScript way</h2>\n\n<p>Just don't have a <code>href</code> attribute at all! Any good CSS reset would take care of the missing default cursor style, so that is a non-issue. Then attach your JavaScript functionality using graceful and unobtrusive  best practices - which are more maintainable as your JavaScript logic stays in JavaScript, instead of in your markup - which is essential when you start developing large scale JavaScript applications which require your logic to be split up into blackboxed components and templates. More on this in <em><a href=\"http://speakerdeck.com/u/addyosmani/p/large-scale-javascript-application-architecture\" rel=\"noreferrer\">Large-scale JavaScript Application Architecture</a></em></p>\n\n<h2>Simple code example</h2>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Cancel click event\r\n$('.cancel-action').click(function(){\r\n    alert('Cancel action occurs!');\r\n});\r\n\r\n// Hover shim for Internet Explorer 6 and Internet Explorer 7.\r\n$(document.body).on('hover','a',function(){\r\n    $(this).toggleClass('hover');\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>a { cursor: pointer; color: blue; }\r\na:hover,a.hover { text-decoration: underline; }</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;a class=\"cancel-action\"&gt;Cancel this action&lt;/a&gt;</code></pre>\r\n</div>\r\n</div>\r\n    </p>\n\n<h2>A blackboxed <em><a href=\"http://documentcloud.github.com/backbone/\" rel=\"noreferrer\">Backbone.js</a></em> example</h2>\n\n<p>For a scalable, blackboxed, Backbone.js component example - <em><a href=\"http://jsfiddle.net/balupton/sTzdD/\" rel=\"noreferrer\">see this working jsfiddle example here</a></em>. Notice how we utilize unobtrusive JavaScript practices, and in a tiny amount of code have a component that can be repeated across the page multiple times without side-effects or conflicts between the different component instances. Amazing!</p>\n\n<h2>Notes</h2>\n\n<ul>\n<li><p>Omitting the <code>href</code> attribute on the <code>a</code> element will cause the element to not be accessible using <code>tab</code> key navigation. If you wish for those elements to be accessible via the <code>tab</code> key, you can set the <code>tabindex</code> attribute, or use <code>button</code> elements instead. You can easily style button elements to look like normal links as mentioned in <em><a href=\"https://stackoverflow.com/a/8525002/130638\">Tracker1's answer</a></em>.</p></li>\n<li><p>Omitting the <code>href</code> attribute on the <code>a</code> element will cause <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_6\" rel=\"noreferrer\">Internet&nbsp;Explorer&nbsp;6</a> and <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_7\" rel=\"noreferrer\">Internet&nbsp;Explorer&nbsp;7</a> to not take on the <code>a:hover</code> styling, which is why we have added a simple JavaScript shim to accomplish this via <code>a.hover</code> instead. Which is perfectly okay, as if you don't have a href attribute and no graceful degradation then your link won't work anyway - and you'll have bigger issues to worry about.</p></li>\n<li><p>If you want your action to still work with JavaScript disabled, then using an <code>a</code> element with a <code>href</code> attribute that goes to some URL that will perform the action manually instead of via an Ajax request or whatever should be the way to go. If you are doing this, then you want to ensure you do an <code>event.preventDefault()</code> on your click call to make sure when the button is clicked it does not follow the link. This option is called graceful degradation.</p></li>\n</ul>\n",
    "score": 690,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1144794,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/1144794",
    "title": null,
    "body": "<p>Use a regular expression:</p>\n\n<pre><code>str.replace(/abc/g, '');\n</code></pre>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 131928,
      "name": "Donnie DeBoer",
      "reputation": 2070
    }
  },
  {
    "soID": 1129270,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/1129270",
    "title": null,
    "body": "<p>It's easy enough to write your own comparison function:</p>\n\n<pre><code>function compare(a,b) {\n  if (a.last_nom &lt; b.last_nom)\n    return -1;\n  if (a.last_nom &gt; b.last_nom)\n    return 1;\n  return 0;\n}\n\nobjs.sort(compare);\n</code></pre>\n\n<p>Or inline (c/o Marco Demaio): </p>\n\n<pre><code>objs.sort(function(a,b) {return (a.last_nom &gt; b.last_nom) ? 1 : ((b.last_nom &gt; a.last_nom) ? -1 : 0);} ); \n</code></pre>\n",
    "score": 2057,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 137902,
      "name": "Wogan",
      "reputation": 26730
    }
  },
  {
    "soID": 21735614,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/21735614",
    "title": null,
    "body": "<h2>Operator <code>delete</code> is unexpectedly slow!</h2>\n\n<p>Look at the <strong><a href=\"http://jsperf.com/delete-vs-undefined-vs-null/16\" rel=\"noreferrer\">benchmark</a></strong>.</p>\n\n<p>Delete is the only true way to remove object's properties without any leftovers, but it works <strong>~ 100 times slower</strong>, \ncompared to its \"alternative\", setting <code>object[key] = undefined</code>.</p>\n\n<p>This alternative is not the correct answer to this question! But, if you use it with care, you can dramatically speed up some algorithms. If you are using <code>delete</code> in loops and you have problems with performance, read the verbose explanation.</p>\n\n<h2>When should one use <code>delete</code> and when set value to <code>undefined</code> ?</h2>\n\n<p>An object may be seen as a set of key-value pairs. What I call a 'value' is a primitive or a reference to other object, connected to that 'key'. </p>\n\n<p><strong>Use <code>delete</code>,</strong> when you are passing the result object to the code on which you don't have control (or when you are not sure about your team or yourself).</p>\n\n<p>It <strong>deletes the key from the hashmap</strong>.</p>\n\n<pre><code> var obj = {\n     field: 1     \n };\n delete obj.field;\n</code></pre>\n\n<p><strong>Use setting to <code>undefined</code>,</strong> when you care about performance. It can give a serious boost to your code. </p>\n\n<p>The <strong>key remains on its place in the hashmap</strong>, only the value is replaced with <code>undefined</code>. Understand, that <code>for..in</code> loop will still iterate over that key.</p>\n\n<pre><code> var obj = {\n     field: 1     \n };\n obj.field = undefined;\n</code></pre>\n\n<p>Using this method, not all <a href=\"https://stackoverflow.com/questions/1894792/determining-if-a-javascript-object-has-a-given-property\">ways of determining property existence</a> will work as expected. </p>\n\n<p>However, this code:</p>\n\n<p><code>object.field === undefined</code></p>\n\n<p>will behave equivalently for both methods.</p>\n\n<h2>Tests</h2>\n\n<p>To summarize, differences are all about ways of determining the property existence, and about <code>for..in</code> loop.</p>\n\n<pre><code> console.log('* -&gt; \"Takes prototype inheritance into consideration, that means it lookups all over prototype chain too.\"');\n\n console.log(obj.field === undefined, 'obj.field === undefined', 'You get \"undefined\" value when querying for \"field\" in object-hashmap. *');\n\n console.log(obj[\"field\"] === undefined, 'obj[\"field\"] === undefined', 'Just another way to query (equivalent). *');\n\n console.log(typeof obj.field === \"undefined\", 'typeof obj.field === \"undefined\"', 'Get the value attached to \"field\" key, and check it\\'s type is \"undefined\". *');\n\n console.log(! (\"field\" in obj), '! (\"field\" in obj)', 'This statement returns true if \"field\" key exists in the hashmap. False otherwise. *');\n\n console.log(obj.hasOwnProperty(\"field\"), 'obj.hasOwnProperty(\"field\")', 'This statement returns true if \\'field\\' key exists in the hashmap. The ONLY way NOT to lookup for property in the prototype chain!');\n //Object.keys().indexOf() is an overkill :)\n\n var counter = 0,\n     key;\n for (key in obj) {\n     counter++;\n }\n console.assert(counter === 0, 'counter === 0', '\"field\" is not iterated using \"for .. in\" loop. *');\n</code></pre>\n",
    "score": 530,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 139361,
      "name": "Dan",
      "reputation": 24635
    }
  },
  {
    "soID": 1646706,
    "parentID": 1646698,
    "url": "https://stackoverflow.com/q/1646706",
    "title": null,
    "body": "<blockquote>\n  <p>so it's probably not for creating\n  instances of object</p>\n</blockquote>\n\n<p>It's used exactly for that. You define a function constructor like so:</p>\n\n<pre><code>function Person(name) {\n    this.name = name;\n}\n\nvar john = new Person('John');\n</code></pre>\n\n<p>However the extra benefit that ECMAScript has is you can extend with the <code>.prototype</code> property, so we can do something like...</p>\n\n<pre><code>Person.prototype.getName = function() { return this.name; }\n</code></pre>\n\n<p>All objects created from this constructor will now have a <code>getName</code> because of the prototype chain that they have access to.</p>\n",
    "score": 27,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 145190,
      "name": "meder omuraliev",
      "reputation": 120587
    }
  },
  {
    "soID": 2818957,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/2818957",
    "title": null,
    "body": "<p>From the <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Operators/Comparison_Operators\" rel=\"nofollow noreferrer\">core javascript reference</a></p>\n\n<blockquote>\n  <p><code>===</code> Returns <code>true</code> if the operands are strictly equal (see above)\n  with no type conversion.</p>\n</blockquote>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 150882,
      "name": "Paul Butcher",
      "reputation": 6219
    }
  },
  {
    "soID": 1275048,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/1275048",
    "title": null,
    "body": "<p><a href=\"http://www.williambharding.com/blog/rails/rails-ajax-image-uploading-made-simple-with-jquery/\" rel=\"noreferrer\">I've written this up in a Rails environment</a>.  It's only about five lines of JavaScript, if you use the lightweight jQuery-form plugin.</p>\n\n<p>The challenge is in getting AJAX upload working as the standard <code>remote_form_for</code> doesn't understand multi-part form submission. It's not going to send the file data Rails seeks back with the AJAX request.   </p>\n\n<p>That's where the jQuery-form plugin comes into play.  </p>\n\n<p>Here’s the Rails code for it:</p>\n\n<pre><code>&lt;% remote_form_for(:image_form, \n                   :url =&gt; { :controller =&gt; \"blogs\", :action =&gt; :create_asset }, \n                   :html =&gt; { :method =&gt; :post, \n                              :id =&gt; 'uploadForm', :multipart =&gt; true }) \n                                                                        do |f| %&gt;\n Upload a file: &lt;%= f.file_field :uploaded_data %&gt;\n&lt;% end %&gt;\n</code></pre>\n\n<p>Here’s the associated JavaScript:</p>\n\n<pre><code>$('#uploadForm input').change(function(){\n $(this).parent().ajaxSubmit({\n  beforeSubmit: function(a,f,o) {\n   o.dataType = 'json';\n  },\n  complete: function(XMLHttpRequest, textStatus) {\n   // XMLHttpRequest.responseText will contain the URL of the uploaded image.\n   // Put it in an image element you create, or do with it what you will.\n   // For example, if you have an image elemtn with id \"my_image\", then\n   //  $('#my_image').attr('src', XMLHttpRequest.responseText);\n   // Will set that image tag to display the uploaded image.\n  },\n });\n});\n</code></pre>\n\n<p>And here’s the Rails controller action, pretty vanilla:</p>\n\n<pre><code> @image = Image.new(params[:image_form])\n @image.save\n render :text =&gt; @image.public_filename\n</code></pre>\n\n<p>I’ve been using this for the past few weeks with Bloggity, and it’s worked like a champ.</p>\n",
    "score": 29,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 153610,
      "name": "wbharding",
      "reputation": 955
    }
  },
  {
    "soID": 22236564,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/22236564",
    "title": null,
    "body": "<p>Wood-eye be careful. \nAfter seeing the consequences after applying the the top answer with 500+ upvotes, I feel obligated to post something that is actually useful:</p>\n\n<p>Let's start with the shortest, but very strict way:</p>\n\n<pre><code>var str = \"true\";\nvar mybool = JSON.parse(str);\n</code></pre>\n\n<p>And end with a proper, more tolerant way:</p>\n\n<pre><code>var parseBool = function(str) \n{\n    // console.log(typeof str);\n    // strict: JSON.parse(str)\n\n    if(str == null)\n        return false;\n\n    if (typeof str === 'boolean')\n    {\n        return (str === true);\n    } \n\n    if(typeof str === 'string')\n    {\n        if(str == \"\")\n            return false;\n\n        str = str.replace(/^\\s+|\\s+$/g, '');\n        if(str.toLowerCase() == 'true' || str.toLowerCase() == 'yes')\n            return true;\n\n        str = str.replace(/,/g, '.');\n        str = str.replace(/^\\s*\\-\\s*/g, '-');\n    }\n\n    // var isNum = string.match(/^[0-9]+$/) != null;\n    // var isNum = /^\\d+$/.test(str);\n    if(!isNaN(str))\n        return (parseFloat(str) != 0);\n\n    return false;\n}\n</code></pre>\n\n<p>Testing:</p>\n\n<pre><code>var array_1 = new Array(true, 1, \"1\",-1, \"-1\", \" - 1\", \"true\", \"TrUe\", \"  true  \", \"  TrUe\", 1/0, \"1.5\", \"1,5\", 1.5, 5, -3, -0.1, 0.1, \" - 0.1\", Infinity, \"Infinity\", -Infinity, \"-Infinity\",\" - Infinity\", \" yEs\");\n\nvar array_2 = new Array(null, \"\", false, \"false\", \"   false   \", \" f alse\", \"FaLsE\", 0, \"00\", \"1/0\", 0.0, \"0.0\", \"0,0\", \"100a\", \"1 00\", \" 0 \", 0.0, \"0.0\", -0.0, \"-0.0\", \" -1a \", \"abc\");\n\n\nfor(var i =0; i &lt; array_1.length;++i){ console.log(\"array_1[\"+i+\"] (\"+array_1[i]+\"): \" + parseBool(array_1[i]));}\n\nfor(var i =0; i &lt; array_2.length;++i){ console.log(\"array_2[\"+i+\"] (\"+array_2[i]+\"): \" + parseBool(array_2[i]));}\n\nfor(var i =0; i &lt; array_1.length;++i){ console.log(parseBool(array_1[i]));}\nfor(var i =0; i &lt; array_2.length;++i){ console.log(parseBool(array_2[i]));}\n</code></pre>\n",
    "score": 39,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22173438,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/22173438",
    "title": null,
    "body": "<p>Here's the rundown on the standard forms that create functions: <em>(Originally written for another question, but adapted after being moved into the canonical question.)</em></p>\n\n<p>Terms:</p>\n\n<ul>\n<li><strong>ES5</strong>: <a href=\"http://ecma-international.org/ecma-262/5.1/\" rel=\"noreferrer\">ECMAScript 5th edition</a>, 2009</li>\n<li><strong>ES2015</strong>: <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html\" rel=\"noreferrer\">ECMAScript 2015</a> (also known as \"ES6\")</li>\n</ul>\n\n<p>The quick list:</p>\n\n<ul>\n<li><p>Function Declaration</p></li>\n<li><p>\"Anonymous\" <code>function</code> Expression <em>(which despite the term, sometimes get names)</em></p></li>\n<li><p>Named <code>function</code> Expression</p></li>\n<li><p>Accessor Function Initializer (ES5+)</p></li>\n<li><p>Arrow Function Expression (ES2015+) <em>(these are also anonymous in nature, and yet sometimes get names)</em></p></li>\n<li><p>Method Declaration in Object Initializer (ES2015+)</p></li>\n<li><p>Constructor and Method Declarations in <code>class</code> (ES2015+)</p></li>\n</ul>\n\n<h3>Function Declaration</h3>\n\n<p>The first form is a <em>function declaration</em>, which looks like this:</p>\n\n<pre><code>function x() {\n    console.log('x');\n}\n</code></pre>\n\n<p>A function declaration is a <em>declaration</em>; it's not a statement or expression. As such, you don't follow it with a <code>;</code> (although doing so is harmless).</p>\n\n<p>A function declaration is processed when execution enters the context in which it appears, <strong>before</strong> any step-by-step code is executed. The function it creates is given a proper name (<code>x</code> in the example above), and that name is put in the scope in which the declaration appears.</p>\n\n<p>Because it's processed before any step-by-step code in the same context, you can do things like this:</p>\n\n<pre><code>x(); // Works even though it's above the declaration\nfunction x() {\n    console.log('x');\n}\n</code></pre>\n\n<p>Until ES2015, the spec didn't cover what a JavaScript engine should do if you put a function declaration inside a control structure like <code>try</code>, <code>if</code>, <code>switch</code>, <code>while</code>, etc., like this:</p>\n\n<pre><code>if (someCondition) {\n    function foo() {    // &lt;===== HERE THERE\n    }                   // &lt;===== BE DRAGONS\n}\n</code></pre>\n\n<p>And since they're processed <em>before</em> step-by-step code is run, it's tricky to know what to do when they're in a control structure.</p>\n\n<p>Although doing this wasn't <em>specified</em> until ES2015, it was an <em>allowable extension</em> to support function declarations in blocks. Unfortunately (and inevitably), different engines did different things.</p>\n\n<p>As of ES2015, the specification says what to do. In fact, it gives three separate things to do:</p>\n\n<ol>\n<li>If in loose mode <em>not</em> on a web browser, the JavaScript engine is supposed to do one thing</li>\n<li>If in loose mode on a web browser, the JavaScript engine is supposed to do something else</li>\n<li>If in <em>strict</em> mode (browser or not), the JavaScript engine is supposed to do yet another thing</li>\n</ol>\n\n<p>The rules for the loose modes are tricky, but in <em>strict</em> mode, function declarations in blocks are easy: They're local to the block (they have <em>block scope</em>, which is also new in ES2015), and they're hoisted to the top of the block. So:</p>\n\n<pre><code>\"use strict\";\nif (someCondition) {\n    foo();               // Works just fine\n    function foo() {\n    }\n}\nconsole.log(typeof foo); // \"undefined\" (`foo` is not in scope here\n                         // because it's not in the same block)\n</code></pre>\n\n<h3>\"Anonymous\" <code>function</code> Expression</h3>\n\n<p>The second common form is called an <em>anonymous function expression</em>:</p>\n\n<pre><code>var y = function () {\n    console.log('y');\n};\n</code></pre>\n\n<p>Like all expressions, it's evaluated when it's reached in the step-by-step execution of the code.</p>\n\n<p>In ES5, the function this creates has no name (it's anonymous). In ES2015, the function is assigned a name if possible by inferring it from context. In the example above, the name would be <code>y</code>. Something similar is done when the function is the value of a property initializer. (For details on when this happens and the rules, search for <code>SetFunctionName</code> in the <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html\" rel=\"noreferrer\">ES2015 specification</a>&nbsp;&mdash; it appears <em>all over</em> the place.)</p>\n\n<h3>Named <code>function</code> Expression</h3>\n\n<p>The third form is a <em>named function expression</em> (\"NFE\"):</p>\n\n<pre><code>var z = function w() {\n    console.log('zw')\n};\n</code></pre>\n\n<p>The function this creates has a proper name (<code>w</code> in this case). Like all expressions, this is evaluated when it's reached in the step-by-step execution of the code. The name of the function is <em>not</em> added to the scope in which the expression appears; the name <em>is</em> in scope within the function itself:</p>\n\n<pre><code>var z = function w() {\n    console.log(typeof w); // \"function\"\n};\nconsole.log(typeof w);     // \"undefined\"\n</code></pre>\n\n<p>Note that NFEs have frequently been a source of bugs for JavaScript implementations. IE8 and earlier, for instance, handle NFEs <a href=\"http://blog.niftysnippets.org/2010/09/double-take.html\" rel=\"noreferrer\">completely incorrectly</a>, creating two different functions at two different times. Early versions of Safari had issues as well. The good news is that current versions of browsers (IE9 and up, current Safari) don't have those issues any more. (But as of this writing, sadly, IE8 remains in widespread use, and so using NFEs with code for the web in general is still problematic.)</p>\n\n<h3>Accessor Function Initializer (ES5+)</h3>\n\n<p>Sometimes functions can sneak in largely unnoticed; that's the case with <em>accessor functions</em>. Here's an example:</p>\n\n<pre><code>var obj = {\n    value: 0,\n    get f() {\n        return this.value;\n    },\n    set f(v) {\n        this.value = v;\n    }\n};\nconsole.log(obj.f);         // 0\nconsole.log(typeof obj.f);  // \"number\"\n</code></pre>\n\n<p>Note that when I used the function, I didn't use <code>()</code>! That's because it's an <em>accessor function</em> for a property. We get and set the property in the normal way, but behind the scenes, the function is called.</p>\n\n<p>You can also create accessor functions with <code>Object.defineProperty</code>, <code>Object.defineProperties</code>, and the lesser-known second argument to <code>Object.create</code>.</p>\n\n<h3>Arrow Function Expression (ES2015+)</h3>\n\n<p>ES2015 brings us the <em>arrow function</em>. Here's one example:</p>\n\n<pre><code>var a = [1, 2, 3];\nvar b = a.map(n =&gt; n * 2);\nconsole.log(b.join(\", \")); // 2, 4, 6\n</code></pre>\n\n<p>See that <code>n =&gt; n * 2</code> thing hiding in the <code>map()</code> call? That's a function.</p>\n\n<p>A couple of things about arrow functions:</p>\n\n<ol>\n<li><p>Their <code>this</code> is <em>lexically bound</em>, not determined when they're called. This means that the <code>this</code> within them is the same as the <code>this</code> where they're created.</p></li>\n<li><p>As you'll have noticed with the above, you don't use the keyword <code>function</code>; instead, you use <code>=&gt;</code>.</p></li>\n</ol>\n\n<p>The <code>n =&gt; n * 2</code> example above is one form of them. If you have multiple arguments to pass the function, you use parens:</p>\n\n<pre><code>var a = [1, 2, 3];\nvar b = a.map((n, i) =&gt; n * i);\nconsole.log(b.join(\", \")); // 0, 2, 6\n</code></pre>\n\n<p>(Remember that <code>Array#map</code> passes the entry as the first argument, and the index as the second.)</p>\n\n<p>If you're doing more than just a single expression, use <code>{}</code> as normal:</p>\n\n<pre><code>var a = [\n  {first: \"Joe\", last: \"Bloggs\"},\n  {first: \"Albert\", last: \"Bloggs\"},\n  {first: \"Mary\", last: \"Albright\"}\n];\na = a.sort((a, b) =&gt; {\n  var rv = a.last.localeCompare(b.last);\n  if (rv === 0) {\n    rv = a.first.localeCompare(b.first);\n  }\n  return rv;\n});\nconsole.log(JSON.stringify(a));\n</code></pre>\n\n<h3>Method Declaration in Object Initializer (ES2015+)</h3>\n\n<p>ES2015 allows a shorter form of declaring a property that references a function; it looks like this:</p>\n\n<pre><code>var o = {\n    foo() {\n    }\n};\n</code></pre>\n\n<p>the equivalent in ES5 and earlier would be:</p>\n\n<pre><code>var o = {\n    foo: function foo() {\n    }\n};\n</code></pre>\n\n<h3>Constructor and Method Declarations in <code>class</code> (ES2015+)</h3>\n\n<p>ES2015 brings us <code>class</code> syntax, including declared constructors and methods:</p>\n\n<pre><code>class Person {\n    constructor(firstName, lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    getFullName() {\n        return this.firstName + \" \" + this.lastName;\n    }\n}\n</code></pre>\n\n<p>There are two function declarations above: One for the constructor, which gets the name <code>Person</code>, and one for <code>getFullName</code>, which is a function assigned to <code>Person.prototype</code>.</p>\n",
    "score": 435,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 157247,
      "name": "T.J. Crowder",
      "reputation": 557106
    }
  },
  {
    "soID": 1646301,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/1646301",
    "title": null,
    "body": "<p>One particularly inelegant solution is to use JSON encoding to make deep copies of objects that do not have member methods. The methodology is to JSON encode your target object, then by decoding it, you get the copy you are looking for.  You can decode as many times as you want to make as many copies as you need.</p>\n\n<p>Of course, functions do not belong in JSON, so this only works for objects without member methods.</p>\n\n<p>This methodology was perfect for my use case, since I'm storing JSON blobs in a key-value store, and when they are exposed as objects in a JavaScript API, each object actually contains a copy of the original state of the object so we can calculate the delta after the caller has mutated the exposed object.</p>\n\n<pre><code>var object1 = {key:\"value\"};\nvar object2 = object1;\n\nobject2 = JSON.stringify(object1);\nobject2 = JSON.parse(object2);\n\nobject2.key = \"a change\";\nconsole.log(object1);// returns value\n</code></pre>\n",
    "score": 30,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1365581,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/1365581",
    "title": null,
    "body": "<p>In addition to the reasons given in other answers, you may not want to use the \"for...in\" structure if you need to do math with the counter variable because the loop iterates through the names of the object's properties and so the variable is a string.</p>\n\n<p>For example,</p>\n\n<pre><code>for (var i=0; i&lt;a.length; i++) {\n    document.write(i + ', ' + typeof i + ', ' + i+1);\n}\n</code></pre>\n\n<p>will write </p>\n\n<pre><code>0, number, 1\n1, number, 2\n...\n</code></pre>\n\n<p>whereas,</p>\n\n<pre><code>for (var ii in a) {\n    document.write(i + ', ' + typeof i + ', ' + i+1);\n}\n</code></pre>\n\n<p>will write</p>\n\n<pre><code>0, string, 01\n1, string, 11\n...\n</code></pre>\n\n<p>Of course, this can easily be overcome by including</p>\n\n<pre><code>ii = parseInt(ii);\n</code></pre>\n\n<p>in the loop, but the first structure is more direct.</p>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 166962,
      "name": "ctmiddle",
      "reputation": 251
    }
  },
  {
    "soID": 29989450,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/29989450",
    "title": null,
    "body": "<p>I'm adding my own answer just because everyone else has covered the hoisting part thoroughly.</p>\n\n<p>I've wondered about which way is better for a long while now, and thanks to <a href=\"http://jsperf.com\" rel=\"noreferrer\">http://jsperf.com</a> now I know :)</p>\n\n<p><img src=\"https://i.stack.imgur.com/bCrSm.png\" alt=\"enter image description here\"></p>\n\n<p><strong>Function declarations</strong> are faster, and that's what really matters in web dev right? ;)</p>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 168738,
      "name": "Leon Gaban",
      "reputation": 6643
    }
  },
  {
    "soID": 16514468,
    "parentID": 332872,
    "url": "https://stackoverflow.com/q/16514468",
    "title": null,
    "body": "<p>If you are using jQuery I would go for <a href=\"http://api.jquery.com/jquery.param/\"><code>$.param</code></a> method. It URL encodes an object mapping fields to values, which is easier to read than calling an escape method on each value.</p>\n\n<pre><code>$.param({a:\"1=2\", b:\"Test 1\"}) // gets a=1%3D2&amp;b=Test+1\n</code></pre>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 171847,
      "name": "Maksym Kozlenko",
      "reputation": 7961
    }
  },
  {
    "soID": 30531157,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/30531157",
    "title": null,
    "body": "<p>If want a basic way to generate a timestamp in Node.js this works well.</p>\n\n<pre><code>var time = process.hrtime();\nvar timestamp = Math.round( time[ 0 ] * 1e3 + time[ 1 ] / 1e6 );\n</code></pre>\n\n<p>Our team is using this to bust cache in a localhost environment. The output is <code>/dist/css/global.css?v=245521377</code> where <code>245521377</code> is the timestamp generated by <code>hrtime()</code>. </p>\n\n<p>Hopefully this helps, the methods above can work as well but I found this to be the simplest approach for our needs in Node.js.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 172870,
      "name": "Kevin Leary",
      "reputation": 2233
    }
  },
  {
    "soID": 9717217,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/9717217",
    "title": null,
    "body": "<p>Here is one more option for completeness sake, that prevents the link from doing anything even if JavaScript is disabled, and it's short :)</p>\n\n<pre><code>&lt;a href=\"#void\" onclick=\"myJsFunc()\"&gt;Run JavaScript function&lt;/a&gt;\n</code></pre>\n\n<p>If the id is not present on the page, then the link will do nothing.</p>\n\n<p>Generally, I agree with the Aaron Wagner's answer, the JavaScript link should be injected with JavaScript code into the document.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 37173398,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/37173398",
    "title": null,
    "body": "\n\n<pre class=\"lang-js prettyprint-override\"><code>$(document).on('click.menu.hide', function(e){\n  if ( !$(e.target).closest('#my_menu').length ) {\n    $('#my_menu').find('ul').toggleClass('active', false);\n  }\n});\n\n$(document).on('click.menu.show', '#my_menu li', function(e){\n  $(this).find('ul').toggleClass('active');\n});\n</code></pre>\n\n<pre class=\"lang-css prettyprint-override\"><code>div {\n  float: left;\n}\n\nul {\n  padding: 0;\n  position: relative;\n}\nul li {\n  padding: 5px 25px 5px 10px;\n  border: 1px solid silver;\n  cursor: pointer;\n  list-style: none;\n  margin-top: -1px;\n  white-space: nowrap;\n}\nul li ul:before {\n  margin-right: -20px;\n  position: absolute;\n  top: -17px;\n  right: 0;\n  content: \"\\25BC\";\n}\nul li ul li {\n  visibility: hidden;\n  height: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  border-width: 0 0 1px 0;\n}\nul li ul li:last-child {\n  border: none;\n}\nul li ul.active:before {\n  content: \"\\25B2\";\n}\nul li ul.active li {\n  display: list-item;\n  visibility: visible;\n  height: inherit;\n  padding: 5px 25px 5px 10px;\n}\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;script src=\"https://code.jquery.com/jquery-2.1.4.js\"&gt;&lt;/script&gt;\n&lt;div&gt;\n  &lt;ul id=\"my_menu\"&gt;\n    &lt;li&gt;Menu 1\n      &lt;ul&gt;\n        &lt;li&gt;subMenu 1&lt;/li&gt;\n        &lt;li&gt;subMenu 2&lt;/li&gt;\n        &lt;li&gt;subMenu 3&lt;/li&gt;\n        &lt;li&gt;subMenu 4&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/li&gt;\n    &lt;li&gt;Menu 2\n      &lt;ul&gt;\n        &lt;li&gt;subMenu 1&lt;/li&gt;\n        &lt;li&gt;subMenu 2&lt;/li&gt;\n        &lt;li&gt;subMenu 3&lt;/li&gt;\n        &lt;li&gt;subMenu 4&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/li&gt;\n    &lt;li&gt;Menu 3&lt;/li&gt;\n    &lt;li&gt;Menu 4&lt;/li&gt;\n    &lt;li&gt;Menu 5&lt;/li&gt;\n    &lt;li&gt;Menu 6&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>\n\n\n\n<p>Here is jsbin version <a href=\"http://jsbin.com/xopacadeni/edit?html,css,js,output\" rel=\"nofollow\">http://jsbin.com/xopacadeni/edit?html,css,js,output</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12193881,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/12193881",
    "title": null,
    "body": "<p>As stated by other replies, they are almost the same. But I will try to add more.</p>\n\n<ol>\n<li>Some efficient algorithms use character arrays to process strings. Those algorithms(browser compiler etc.) would see <code>\"</code> (#34) first before <code>'</code> (#39) therefore saving several cpu cycles depending on your data structure.</li>\n<li><code>\"</code> is escaped by anti-XSS engines</li>\n</ol>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12077178,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/12077178",
    "title": null,
    "body": "<p>You could use the href and remove all links that have only hashes:</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;a href=\"#\" onclick=\"run_foo()\"&gt; foo &lt;/a&gt;\n</code></pre>\n\n<p>JS:</p>\n\n<pre><code>$(document).ready(function(){         // on DOM ready or some other event\n\n   $('a[href=#]').attr('href','');    // set all reference handles to blank strings\n                                      //  for anchors that have only hashes\n\n});\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1646723,
    "parentID": 1646698,
    "url": "https://stackoverflow.com/q/1646723",
    "title": null,
    "body": "<p>JavaScript <em>is</em> an object-oriented programming language and it's used exactly for creating instances. It's prototype-based, rather than class-based, but that does not mean that it is not object-oriented.</p>\n",
    "score": 24,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 186971,
      "name": "Michael",
      "reputation": 6026
    }
  },
  {
    "soID": 3862517,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/3862517",
    "title": null,
    "body": "<p>For the host name only, use:</p>\n\n<pre><code>window.location.hostname\n</code></pre>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 188954,
      "name": "Mahmoud Farahat",
      "reputation": 2825
    }
  },
  {
    "soID": 40493600,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/40493600",
    "title": null,
    "body": "<p>Old question, modern answer. Using object destructuring, an <a href=\"https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015\">ECMAScript&nbsp;6</a> feature, it's as simple as:</p>\n\n<pre><code>const { a, ...rest } = { a: 1, b: 2, c: 3 };\n</code></pre>\n\n<p>Or with the questions sample:</p>\n\n<pre><code>const myObject = {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\nconst { regex, ...newObject } = myObject;\nconsole.log(newObject);\n</code></pre>\n\n<p><a href=\"https://babeljs.io/repl/#?babili=false&amp;evaluate=true&amp;lineWrap=true&amp;presets=es2015%2Cstage-0&amp;experimental=true&amp;loose=true&amp;spec=false&amp;code=const%20myObject%20%3D%20%7B%22ircEvent%22%3A%20%22PRIVMSG%22%2C%20%22method%22%3A%20%22newURI%22%2C%20%22regex%22%3A%20%22%5Ehttp%3A%2F%2F.*%22%7D%3B%0Aconst%20%7B%20regex%2C%20...newObject%20%7D%20%3D%20myObject%3B%0Aconsole.log(newObject)%3B\">You can see it in action in the Babel try-out editor.</a></p>\n\n<hr>\n\n<p><strong>Edit:</strong></p>\n\n<p>To reassign to the same variable, use a <code>let</code>:</p>\n\n<pre><code>let myObject = {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\n({ regex, ...myObject } = myObject);\nconsole.log(myObject);\n</code></pre>\n",
    "score": 36,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 189431,
      "name": "Koen.",
      "reputation": 11153
    }
  },
  {
    "soID": 8400851,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/8400851",
    "title": null,
    "body": "<p>I did it like this in <a href=\"http://en.wikipedia.org/wiki/Yahoo!_UI_Library\" rel=\"nofollow\">YUI</a>&nbsp;3:</p>\n\n<pre><code>// Detect the click anywhere other than the overlay element to close it.\nY.one(document).on('click', function (e) {\n    if (e.target.ancestor('#overlay') === null &amp;&amp; e.target.get('id') != 'show' &amp;&amp; overlay.get('visible') == true) {\n        overlay.hide();\n    }\n});\n</code></pre>\n\n<p>I am checking if ancestor is not the widget element container, <br/>\nif target is not which open the widget/element, <br/>\nif widget/element I want to close is already open (not that important).</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6465220,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/6465220",
    "title": null,
    "body": "<p>We can use <code>elementObject</code> with jQuery for getting the attribute checked:</p>\n\n<pre><code>$(objectElement).attr('checked');\n</code></pre>\n\n<p>We can use this for all jQuery versions without any error.</p>\n\n<p>Update: Jquery 1.6+ has the new prop method which replaces attr, e.g.:</p>\n\n<pre><code>$(objectElement).prop('checked');\n</code></pre>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 194503,
      "name": "Prasanth P",
      "reputation": 470
    }
  },
  {
    "soID": 24639060,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/24639060",
    "title": null,
    "body": "<p>In case you use <a href=\"http://en.wikipedia.org/wiki/ASP.NET_MVC_Framework\" rel=\"noreferrer\">ASP.NET MVC</a>, generate many checkboxes and later have <strong><em>to select/unselect all</em></strong> using JavaScript you can do the following.</p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>@foreach (var item in Model)\n{\n    @Html.CheckBox(string.Format(\"ProductId_{0}\", @item.Id), @item.IsSelected)\n}\n</code></pre>\n\n<p><strong>JavaScript</strong></p>\n\n<pre><code>function SelectAll() {       \n        $('input[id^=\"ProductId_\"]').each(function () {          \n            $(this).prop('checked', true);\n        });\n    }\n\n    function UnselectAll() {\n        $('input[id^=\"ProductId_\"]').each(function () {\n            $(this).prop('checked', false);\n        });\n    }\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 196919,
      "name": "Dimi",
      "reputation": 13723
    }
  },
  {
    "soID": 5598228,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/5598228",
    "title": null,
    "body": "<p>I've come across a few really powerful jQuery-based file upload libraries. Check these out:</p>\n\n<ol>\n<li><a href=\"http://www.plupload.com/\" rel=\"noreferrer\">Plupload</a>\n\n<ul>\n<li>docs: <a href=\"http://www.plupload.com/docs\" rel=\"noreferrer\">http://www.plupload.com/docs</a></li>\n</ul></li>\n<li><a href=\"https://blueimp.github.io/jQuery-File-Upload/\" rel=\"noreferrer\">jQuery File Upload</a>\n\n<ul>\n<li>docs: <a href=\"https://github.com/blueimp/jQuery-File-Upload\" rel=\"noreferrer\">https://github.com/blueimp/jQuery-File-Upload</a></li>\n</ul></li>\n<li><a href=\"http://fineuploader.com/\" rel=\"noreferrer\">FineUploader</a>\n\n<ul>\n<li>docs: <a href=\"http://docs.fineuploader.com/\" rel=\"noreferrer\">http://docs.fineuploader.com/</a></li>\n</ul></li>\n</ol>\n",
    "score": 52,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 196921,
      "name": "Hristo",
      "reputation": 20996
    }
  },
  {
    "soID": 14462838,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/14462838",
    "title": null,
    "body": "<p>The expression you're looking for simply is</p>\n\n<pre><code>/^true$/i.test(myValue)\n</code></pre>\n\n<p>as in</p>\n\n<pre><code>var isTrueSet = /^true$/i.test(myValue);\n</code></pre>\n\n<p>This tests <code>myValue</code> against a regular expression , case-insensitive, and doesn't modify the prototype.</p>\n\n<p>Examples:</p>\n\n<pre><code>/^true$/i.test(\"true\"); // true\n/^true$/i.test(\"TRUE\"); // true\n/^true$/i.test(\"tRuE\"); // true\n/^true$/i.test(\" tRuE\"); // false (notice the space at the beginning)\n/^true$/i.test(\"untrue\"); // false (some other solutions here will incorrectly return true\n/^true$/i.test(\"false\");// returns false\n/^true$/i.test(\"xyz\");  // returns false\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8512410,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/8512410",
    "title": null,
    "body": "<p>I'm basically paraphrasing from <a href=\"http://www.matthidinger.com/archive/2011/02/22/Progressive-enhancement-tutorial-with-ASP-NET-MVC-3-and-jQuery.aspx\" rel=\"noreferrer\">this practical article using progressive enhancement</a>. <strong>The short answer is that you never use <code>javascript:void(0);</code> or <code>#</code> unless your user interface has already inferred that JavaScript is enabled, in which case you should use <code>javascript:void(0);</code></strong>. Also, do not use span as links, since that is semantically false to begin with.</p>\n\n<p>Using <a href=\"http://en.wikipedia.org/wiki/Search_engine_optimization\" rel=\"noreferrer\">SEO</a> friendly URL routes in your application, such as /Home/Action/Parameters is a good practice as well. If you have a link to a page that works without JavaScript first, you can enhance the experience afterward. Use a real link to a working page, then add an onlick event to enhance the presentation.</p>\n\n<p>Here is a sample. Home/ChangePicture is a working link to a form on a page complete with user interface and standard HTML submit buttons, but it looks nicer injected into a modal dialog with jQueryUI buttons. Either way works, depending on the browser, which satisfies mobile first development.</p>\n\n<pre><code>&lt;p&gt;&lt;a href=\"Home/ChangePicture\" onclick=\"return ChangePicture_onClick();\" title=\"Change Picture\"&gt;Change Picture&lt;/a&gt;&lt;/p&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n    function ChangePicture_onClick() {\n        $.get('Home/ChangePicture',\n              function (htmlResult) {\n                  $(\"#ModalViewDiv\").remove(); //Prevent duplicate dialogs\n                  $(\"#modalContainer\").append(htmlResult);\n                  $(\"#ModalViewDiv\").dialog({\n                      width: 400,\n                      modal: true,\n                      buttons: {\n                          \"Upload\": function () {\n                              if(!ValidateUpload()) return false;\n                              $(\"#ModalViewDiv\").find(\"form\").submit();\n                          },\n                          Cancel: function () { $(this).dialog(\"close\"); }\n                      },\n                      close: function () { }\n                  });\n              }\n        );\n        return false;\n    }\n&lt;/script&gt;\n</code></pre>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6425986,
    "parentID": 306583,
    "url": "https://stackoverflow.com/q/6425986",
    "title": null,
    "body": "<p>If your DIV tag is immediately followed by the IMG tag, you can also use:</p>\n\n<pre><code>$(this).next();\n</code></pre>\n",
    "score": 67,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 201232,
      "name": "Roccivic",
      "reputation": 762
    }
  },
  {
    "soID": 42796026,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/42796026",
    "title": null,
    "body": "<p><strong>If you happen to be using Bootstrap (perhaps unawarely) ...</strong></p>\n\n<pre><code>$('#myCheckbox').bootstrapToggle('on')\n$('#myCheckbox').bootstrapToggle('off')\n</code></pre>\n\n<p><a href=\"http://www.bootstraptoggle.com/\" rel=\"nofollow noreferrer\">http://www.bootstraptoggle.com/</a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 202939,
      "name": "Kenmeister",
      "reputation": 164
    }
  },
  {
    "soID": 1691745,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/1691745",
    "title": null,
    "body": "<p>Definitely hash (<code>#</code>) is better because in JavaScript it is a pseudoscheme:</p>\n\n<ol>\n<li>pollutes history </li>\n<li>instantiates new copy of engine </li>\n<li>runs in global scope and doesn't respect event system. </li>\n</ol>\n\n<p>Of course \"#\" with an onclick handler which prevents default action is [much] better. Moreover, a link that has the sole purpose to run JavaScript is not really \"a link\" unless you are sending user to some sensible anchor on the page (just # will send to top) when something goes wrong. You can simply simulate look and feel of link with stylesheet and forget about href at all.</p>\n\n<p>In addition, regarding cowgod's suggestion, particularly this: <code>...href=\"javascript_required.html\" onclick=\"...</code> This is good approach, but it doesn't distinguish between \"JavaScript disabled\" and \"onclick fails\" scenarios.</p>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1714649,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/1714649",
    "title": null,
    "body": "<pre><code>time = Math.round(((new Date()).getTime()-Date.UTC(1970,0,1))/1000);\n</code></pre>\n",
    "score": -19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3406317,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/3406317",
    "title": null,
    "body": "<p>Just another option</p>\n\n<pre><code>// usage: if ( ['a','b','c','d'].contains('b') ) { ... }\nArray.prototype.contains = function(value){\n    for (var key in this)\n        if (this[key] === value) return true;\n    return false;\n}\n</code></pre>\n",
    "score": -4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 214691,
      "name": "Dennis Allen",
      "reputation": 305
    }
  },
  {
    "soID": 1790961,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/1790961",
    "title": null,
    "body": "<p>You need to call indexOf with a capital \"O\" as mentioned. It should also be noted, that in JavaScript class is a reserved word, you need to use className to get this data attribute. The reason it's probably failing is because it's returning a null value. You can do the following to get your class value...</p>\n\n<pre><code>var test = elm.getAttribute(\"className\");\n//or\nvar test = elm.className\n</code></pre>\n",
    "score": 40,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 217901,
      "name": "MillsJROSS",
      "reputation": 1069
    }
  },
  {
    "soID": 1813267,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/1813267",
    "title": null,
    "body": "<p>Let me add this counsel:</p>\n\n<p><strong><em>If in doubt, read the <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\" rel=\"noreferrer\">specification</a>!</em></strong> </p>\n\n<p>ECMA-262 is the specification for a scripting language of which JavaScript is a dialect. Of course in practice it matters more how the most important browsers behave than an esoteric definition of how something is supposed to be handled. But it is helpful to understand why <strong>new String(\"a\") !== \"a\"</strong>.</p>\n\n<p>Please let me explain how to read the specification to clarify this question. I see that in this very old topic nobody had an answer for the very strange effect. So, if you can read a specification, this will help you in your profession tremendously. It is an acquired skill. So, let's continue.</p>\n\n<p>Searching the PDF file for === brings me to page 56 of the specification: <strong>11.9.4. The Strict Equals Operator ( === )</strong>, and after wading through the specificationalese I find:</p>\n\n<blockquote>\n  <p><strong>11.9.6 The Strict Equality Comparison Algorithm</strong><br>\n  The comparison x === y, where x and y are values, produces <strong>true</strong> or <strong>false</strong>. Such a comparison is performed as follows:<br>\n  &nbsp;&nbsp;1. If Type(x) is different from Type(y), return <strong>false</strong>.<br>\n  &nbsp;&nbsp;2. If Type(x) is Undefined, return <strong>true</strong>.<br>\n  &nbsp;&nbsp;3. If Type(x) is Null, return <strong>true</strong>.<br>\n  &nbsp;&nbsp;4. If Type(x) is not Number, go to step 11.<br>\n  &nbsp;&nbsp;5. If x is <strong>NaN</strong>, return <strong>false</strong>.<br>\n  &nbsp;&nbsp;6. If y is <strong>NaN</strong>, return <strong>false</strong>.<br>\n  &nbsp;&nbsp;7. If x is the same number value as y, return <strong>true</strong>.<br>\n  &nbsp;&nbsp;8. If x is +0 and y is −0, return <strong>true</strong>.<br>\n  &nbsp;&nbsp;9. If x is −0 and y is +0, return <strong>true</strong>.<br>\n  &nbsp;&nbsp;10. Return <strong>false</strong>.<br>\n  &nbsp;&nbsp;11. If Type(x) is String, then return <strong>true</strong> if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions); otherwise, return <strong>false</strong>.<br>\n  &nbsp;&nbsp;12. If Type(x) is Boolean, return <strong>true</strong> if x and y are both <strong>true</strong> or both <strong>false</strong>; otherwise, return <strong>false</strong>.<br>\n  &nbsp;&nbsp;13. Return <strong>true</strong> if x and y refer to the same object or if they refer to objects joined to each other (see 13.1.2). Otherwise, return <strong>false</strong>.</p>\n</blockquote>\n\n<p>Interesting is step 11. Yes, strings are treated as value types. But this does not explain why <strong>new String(\"a\") !== \"a\"</strong>. Do we have a browser not conforming to ECMA-262?</p>\n\n<p>Not so fast!</p>\n\n<p>Let's check the types of the operands. Try it out for yourself by wrapping them in <strong>typeof()</strong>. I find that <strong>new String(\"a\")</strong> is an object, and step 1 is used: return <strong>false</strong> if the types are different.</p>\n\n<p>If you wonder why <strong>new String(\"a\")</strong> does not return a string, how about some exercise reading a specification? Have fun!</p>\n\n<hr>\n\n<p>Aidiakapi wrote this in a comment below:</p>\n\n<blockquote>\n  <p>From the specification </p>\n  \n  <p><strong>11.2.2 The new Operator</strong>:</p>\n  \n  <p>If Type(constructor) is not Object, throw a TypeError exception.</p>\n  \n  <p>With other words, if String wouldn't be of type Object it couldn't be used with the new operator. </p>\n</blockquote>\n\n<p><strong>new</strong> always returns an Object, even for <strong>String</strong> constructors, too. And alas! The value semantics for strings (see step 11) is lost.</p>\n\n<p>And this finally means: <strong>new String(\"a\") !== \"a\"</strong>.</p>\n",
    "score": 220,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 220060,
      "name": "nalply",
      "reputation": 7863
    }
  },
  {
    "soID": 19595198,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/19595198",
    "title": null,
    "body": "<p>If you would use those functions to create objects, you would get:</p>\n\n<pre><code>var objectOne = new functionOne();\nconsole.log(objectOne.__proto__); // prints \"Object {}\" because constructor is an anonymous function\n\nvar objectTwo = new functionTwo();\nconsole.log(objectTwo.__proto__); // prints \"functionTwo {}\" because constructor is a named function\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 221315,
      "name": "Pawel Furmaniak",
      "reputation": 2386
    }
  },
  {
    "soID": 24930263,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/24930263",
    "title": null,
    "body": "<p>As a variant:</p>\n\n<pre><code>var $menu = $('#menucontainer');\n$(document).on('click', function (e) {\n\n    // If element is opened and click target is outside it, hide it\n    if ($menu.is(':visible') &amp;&amp; !$menu.is(e.target) &amp;&amp; !$menu.has(e.target).length) {\n        $menu.hide();\n    }\n});\n</code></pre>\n\n<p>It has no problem with <a href=\"http://css-tricks.com/dangers-stopping-event-propagation/\" rel=\"nofollow\">stopping event propagation</a> and better supports multiple menus on the same page where clicking on a second menu while a first is open will leave the first open in the stopPropagation solution.</p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2584356,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/2584356",
    "title": null,
    "body": "<p>In \"Javascript 1.7\" (Mozilla's extension to Javascript) one can also declare block-scope variables with <a href=\"https://developer.mozilla.org/en/New_in_JavaScript_1.7#section_11\" rel=\"noreferrer\"><code>let</code> statement</a>:</p>\n\n<pre><code> var a = 4;\n let (a = 3) {\n   alert(a); // 3\n }\n alert(a);   // 4\n</code></pre>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 224671,
      "name": "kennytm",
      "reputation": 354821
    }
  },
  {
    "soID": 40357679,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/40357679",
    "title": null,
    "body": "<p>This might be a better fix for some people. </p>\n\n<pre><code>$(\".menu_link\").click(function(){\n    // show menu code\n});\n\n$(\".menu_link\").mouseleave(function(){\n    //hide menu code, you may add a timer for 3 seconds before code to be run\n});\n</code></pre>\n\n<p>I know mouseleave does not only mean a click outside, it also means leaving that element's area.</p>\n\n<p>Once the menu itself is inside the <code>menu_link</code> element then the menu itself should not be a problem to click on or move on.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1861233,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/1861233",
    "title": null,
    "body": "<p>Place your <code>&lt;script&gt;/*JavaScript code*/&lt;/script&gt;</code> right <strong>before the closing</strong> <code>&lt;/body&gt;</code> tag.</p>\n\n<p>Admittedly, this might not suit everyone's purposes since it requires changing the HTML file rather than just doing something in the JavaScript file a la <code>document.ready</code>, but still...</p>\n",
    "score": 73,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 226507,
      "name": "rob",
      "reputation": 5920
    }
  },
  {
    "soID": 1898107,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/1898107",
    "title": null,
    "body": "<p>You can add anchor tags.  I use this on my site <a href=\"http://www.piano-chords.net/\" rel=\"noreferrer\">http://www.piano-chords.net/</a> so that I can track with google analytics what people are visiting on the page.  I just add an anchor tag and then the part of the page I want to track.</p>\n\n<pre><code>var trackCode = \"/#\" + urlencode($(\"myDiv\").text());\nwindow.location.href = \"http://www.piano-chords.net\" + trackCode;\npageTracker._trackPageview(trackCode);\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 230865,
      "name": "Nate",
      "reputation": 71
    }
  },
  {
    "soID": 5407529,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/5407529",
    "title": null,
    "body": "<p>To check a checkbox you should use</p>\n\n<pre><code> $('.myCheckbox').attr('checked',true);\n</code></pre>\n\n<p>or</p>\n\n<pre><code> $('.myCheckbox').attr('checked','checked');\n</code></pre>\n\n<p>and to uncheck a check box you should always set it to false:</p>\n\n<pre><code> $('.myCheckbox').attr('checked',false);\n</code></pre>\n\n<p>If you do</p>\n\n<pre><code>  $('.myCheckbox').removeAttr('checked')\n</code></pre>\n\n<p>it removes the attribute all together and therefore you will not be able to reset the form.</p>\n\n<p><a href=\"http://jsfiddle.net/mcgrailm/34vhs/\" rel=\"noreferrer\">BAD DEMO jQuery 1.6</a>. I think this is broken. For 1.6 I am going to make a new post on that.</p>\n\n<p><a href=\"http://jsfiddle.net/mcgrailm/24FLg/\" rel=\"noreferrer\">NEW WORKING DEMO jQuery 1.5.2</a> works in Chrome.</p>\n\n<p>Both demos use</p>\n\n<pre><code>$('#tc').click(function() {\n    if ( $('#myCheckbox').attr('checked')) {\n        $('#myCheckbox').attr('checked', false);\n    } else {\n        $('#myCheckbox').attr('checked', 'checked');\n    }\n});\n</code></pre>\n",
    "score": 50,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 234670,
      "name": "mcgrailm",
      "reputation": 12054
    }
  },
  {
    "soID": 2818947,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/2818947",
    "title": null,
    "body": "<p>In JavaScript it means of the same value and type.</p>\n\n<p>For example,</p>\n\n<pre><code>4 == \"4\" // will return true\n</code></pre>\n\n<p>but</p>\n\n<pre><code>4 === \"4\" // will return false \n</code></pre>\n",
    "score": 71,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 236521,
      "name": "Dimitar",
      "reputation": 1833
    }
  },
  {
    "soID": 7047800,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/7047800",
    "title": null,
    "body": "<p>Use <code>concat</code>:</p>\n\n<pre><code>a = [1, 2, 3];\nb = [3, 4, 5];\na = a.concat(b);\n</code></pre>\n\n<p><code>a</code> now contains all the elements, <code>[1, 2, 3, 3, 4, 5]</code>.</p>\n\n<p>Reference: <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/concat\" rel=\"noreferrer\">https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/concat</a></p>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2114091,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/2114091",
    "title": null,
    "body": "<pre><code>Boolean.parse = function (str) {\n  switch (str.toLowerCase ()) {\n    case \"true\":\n      return true;\n    case \"false\":\n      return false;\n    default:\n      throw new Error (\"Boolean.parse: Cannot convert string to boolean.\");\n  }\n};\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31883471,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/31883471",
    "title": null,
    "body": "<h1>Single Quotes</h1>\n\n<p>I wish double quotes were the standard, because they <a href=\"https://stackoverflow.com/questions/242813/when-to-use-double-or-single-quotes-in-javascript#18041188\">make a little bit more sense</a>, but I keep using single quotes because they dominate the scene.</p>\n\n<p>Single quotes:</p>\n\n<ul>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/airbnb.json\" rel=\"noreferrer\">airbnb</a></li>\n<li><a href=\"https://github.com/facebook/fbjs/blob/8d447780c6f4df0ef92fa3d2987d9c4f96eb0100/packages/eslint-config-fbjs-opensource/index.js#L249\" rel=\"noreferrer\">facebook</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/google.json\" rel=\"noreferrer\">google</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/grunt.json\" rel=\"noreferrer\">grunt</a></li>\n<li><a href=\"https://github.com/gulpjs/gulp/blob/master/.jscsrc\" rel=\"noreferrer\">gulp</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/node.json\" rel=\"noreferrer\">node</a></li>\n<li><a href=\"https://github.com/npm/npm/blob/master/lib/npm.js\" rel=\"noreferrer\">npm</a> (though not defined in author's <a href=\"https://docs.npmjs.com/misc/coding-style\" rel=\"noreferrer\">guide</a>)</li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/wikimedia.json\" rel=\"noreferrer\">wikimedia</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/wordpress.json\" rel=\"noreferrer\">wordpress</a></li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/yandex.json\" rel=\"noreferrer\">yandex</a></li>\n</ul>\n\n<p>No preference:</p>\n\n<ul>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/mdcs.json\" rel=\"noreferrer\">three.js</a></li>\n</ul>\n\n<p>Double quotes:</p>\n\n<ul>\n<li><a href=\"https://plus.google.com/+DouglasCrockfordEsq/posts/EBky2K9erKt\" rel=\"noreferrer\">crockford</a></li>\n<li><a href=\"https://github.com/d3/d3-format/blob/master/src/locale.js\" rel=\"noreferrer\">d3</a> (though not defined in <a href=\"https://github.com/d3/d3-shape/blob/master/.eslintrc\" rel=\"noreferrer\"><code>.eslintrc</code></a>)</li>\n<li><a href=\"https://github.com/jscs-dev/node-jscs/blob/master/presets/jquery.json\" rel=\"noreferrer\">jquery</a></li>\n</ul>\n",
    "score": 43,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2017454,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/2017454",
    "title": null,
    "body": "<p>Use this..  </p>\n\n<pre><code>$(\"#myform input[type='radio']:checked\").val();\n</code></pre>\n",
    "score": 331,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 245030,
      "name": "Joberror",
      "reputation": 4364
    }
  },
  {
    "soID": 2818949,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/2818949",
    "title": null,
    "body": "<p>In PHP and JavaScript, it is a strict equality operator. Which means, it will compare both type and values.</p>\n",
    "score": 80,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 246142,
      "name": "Shiki",
      "reputation": 12763
    }
  },
  {
    "soID": 2819117,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/2819117",
    "title": null,
    "body": "<p>It's a strict check test.</p>\n\n<p>It's a good thing especially if you're checking between 0 and false and null. </p>\n\n<p>For example, if you have:</p>\n\n<pre><code>$a = 0;\n</code></pre>\n\n<p>Then:</p>\n\n<pre><code>$a==0; \n$a==NULL;\n$a==false;\n</code></pre>\n\n<p>All returns true and you may not want this. Let's suppose you have a function that can return the 0th index of an array or false on failure. If you check with \"==\" false, you can get a confusing result.</p>\n\n<p>So with the same thing as above, but a strict test:</p>\n\n<pre><code>$a = 0;\n\n$a===0; // returns true\n$a===NULL; // returns false\n$a===false; // returns false\n</code></pre>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 250195,
      "name": "Daniel",
      "reputation": 662
    }
  },
  {
    "soID": 2738605,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/2738605",
    "title": null,
    "body": "<p>I've been running the following about 20 times. And it appears that double quotes are about 20% faster.</p>\n\n<p>The fun part is, if you change part 2 and part 1 around, single quotes are about 20% faster.</p>\n\n<pre><code>//Part1\nvar r='';\nvar iTime3 = new Date().valueOf();\nfor(var j=0; j&lt;1000000; j++) {\n    r+='a';\n}\nvar iTime4 = new Date().valueOf();\nalert('With single quote : ' + (iTime4 - iTime3));  \n\n//Part 2                \nvar s=\"\";\nvar iTime1 = new Date().valueOf();\nfor(var i=0; i&lt;1000000; i++) {\n    s += \"a\";\n}\nvar iTime2 = new Date().valueOf();\nalert('With double quote: ' + (iTime2 - iTime1));\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2114055,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/2114055",
    "title": null,
    "body": "<p>Just do a:</p>\n\n<pre><code>var myBool = eval (yourString);\n</code></pre>\n\n<p>Examples:</p>\n\n<pre><code>alert (eval (\"true\") == true); // TRUE\nalert (eval (\"true\") == false); // FALSE\nalert (eval (\"1\") == true); // TRUE\nalert (eval (\"1\") == false); // FALSE\nalert (eval (\"false\") == true); // FALSE;\nalert (eval (\"false\") == false); // TRUE\nalert (eval (\"0\") == true); // FALSE\nalert (eval (\"0\") == false); // TRUE\nalert (eval (\"\") == undefined); // TRUE\nalert (eval () == undefined); // TRUE\n</code></pre>\n\n<p>This method handles the empty string and undefined string naturally as if you declare a variable without assigning it a value.</p>\n",
    "score": -18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13942574,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/13942574",
    "title": null,
    "body": "<p>It's a good idea too to check that you are not trying to pass an undefined term.</p>\n\n<pre><code>function TestMe() {\n  if((typeof str != 'undefined') &amp;&amp; str) {\n    alert(str);\n  }\n };\n\nTestMe();\n\nvar str = 'hello';\n\nTestMe();\n</code></pre>\n\n<p>I usually run into the case where I want to do something when a string attribute for an object instance is not empty.  Which is fine, except that attribute is not always present.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 256854,
      "name": "dkinzer",
      "reputation": 14992
    }
  },
  {
    "soID": 2124597,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/2124597",
    "title": null,
    "body": "<p>In terms of code maintenance cost, named functions are more preferable:</p>\n\n<ul>\n<li>Independent from the place where they are declared (but still limited by scope).</li>\n<li>More resistant to mistakes like conditional initialization (you are still able to override if wanted to).</li>\n<li>The code becomes more readable by allocating local functions separately of scope functionality. Usually in the scope the functionality goes first, followed by declarations of local functions.</li>\n<li>In a debugger you will clearly see the function name on the call stack instead of an \"anonymous/evaluated\" function.</li>\n</ul>\n\n<p>I suspect more PROS for named functions are follow. And what is listed as an advantage of named functions is a disadvantage for anonymous ones.</p>\n\n<p>Historically, anonymous functions appeared from the inability of JavaScript as a language to list members with named functions:</p>\n\n<pre><code>{\n    member:function() { /* How do I make \"this.member\" a named function? */\n    }\n}\n</code></pre>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 257553,
      "name": "Sasha Firsov",
      "reputation": 239
    }
  },
  {
    "soID": 4908569,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/4908569",
    "title": null,
    "body": "<p>If you are checking repeatedly for existence of an object in an array you should maybe look into</p>\n\n<ol>\n<li>Keeping the array sorted at all times by doing <a href=\"http://en.wikipedia.org/wiki/Insertion_sort\" rel=\"noreferrer\">insertion sort</a> in your array (put new objects in on the right place) </li>\n<li>Make updating objects as remove+sorted insert operation and</li>\n<li>Use a <a href=\"http://en.wikipedia.org/wiki/Binary_search_algorithm\" rel=\"noreferrer\">binary search</a> lookup in your <code>contains(a, obj)</code>.</li>\n</ol>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 260805,
      "name": "Ztyx",
      "reputation": 4034
    }
  },
  {
    "soID": 35022676,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/35022676",
    "title": null,
    "body": "<p><strong>Don't use links for the sole purpose of running JavaScript.</strong> </p>\n\n<p>The use of href=\"#\" scrolls the page to the top; the use of void(0) creates navigational problems within the browser.</p>\n\n<p>Instead, use an element other than a link:</p>\n\n<pre><code>&lt;span onclick=\"myJsFunc()\" class=\"funcActuator\"&gt;myJsFunc&lt;/span&gt;\n</code></pre>\n\n<p>And style it with CSS:</p>\n\n<pre><code>.funcActuator { \n  cursor: default;\n}\n\n.funcActuator:hover { \n  color: #900;\n}\n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2798360,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/2798360",
    "title": null,
    "body": "<p>If you need the hash parameters present in the URL, <code>window.location.href</code> may be a better choice.</p>\n\n<pre><code>window.location.pathname\n=&gt; /search\n\nwindow.location.href \n =&gt; www.website.com/search#race_type=1\n</code></pre>\n",
    "score": 53,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 270922,
      "name": "jlfenaux",
      "reputation": 2238
    }
  },
  {
    "soID": 2263817,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/2263817",
    "title": null,
    "body": "<p>I usually use something like:</p>\n\n<pre><code>if (str == \"\") {\n     //Do Something\n}\nelse {\n     //Do Something Else\n}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 273208,
      "name": "jmc734",
      "reputation": 139
    }
  },
  {
    "soID": 41841362,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/41841362",
    "title": null,
    "body": "<p>Solution that works in all modern browsers:</p>\n\n<pre><code>function contains(arr, obj) {\n  const stringifiedObj = JSON.stringify(obj); // Cache our object to not call `JSON.stringify` on every iteration\n  return arr.some(item =&gt; JSON.stringify(item) === stringifiedObj);\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>contains([{a: 1}, {a: 2}], {a: 1}); // true\n</code></pre>\n\n<p>IE6+ solution:</p>\n\n<pre><code>function contains(arr, obj) {\n  var stringifiedObj = JSON.stringify(obj)\n  return arr.some(function (item) {\n    return JSON.stringify(item) === stringifiedObj;\n  });\n}\n\n// .some polyfill, not needed for IE9+\nif (!('some' in Array.prototype)) {\n  Array.prototype.some = function (tester, that /*opt*/) {\n    for (var i = 0, n = this.length; i &lt; n; i++) {\n      if (i in this &amp;&amp; tester.call(that, this[i], i, this)) return true;\n    } return false;\n  };\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>contains([{a: 1}, {a: 2}], {a: 1}); // true\n</code></pre>\n\n<h1>Why to use <code>JSON.stringify</code>?</h1>\n\n<p><code>Array.indexOf</code> and <code>Array.includes</code> (as well as most of the answers here) only compare by reference and not by value.</p>\n\n<pre><code>[{a: 1}, {a: 2}].includes({a: 1});\n// false, because {a: 1} is a new object\n</code></pre>\n\n<h1>Bonus</h1>\n\n<p>Non-optimized ES6 one-liner:</p>\n\n<pre><code>[{a: 1}, {a: 2}].some(item =&gt; JSON.stringify(item) === JSON.stringify({a: 1));\n// true\n</code></pre>\n\n<hr>\n\n<p>Note:\nComparing objects by value will work better if the keys are in the same order, so to be safe you might sort the keys first with a package like this one: <a href=\"https://www.npmjs.com/package/sort-keys\" rel=\"nofollow noreferrer\">https://www.npmjs.com/package/sort-keys</a></p>\n\n<hr>\n\n<p>Updated the <code>contains</code> function with a perf optimization. Thanks <a href=\"https://stackoverflow.com/users/1397160/itinance\">itinance</a> for pointing it out.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 283803,
      "name": "Igor Barbashin",
      "reputation": 122
    }
  },
  {
    "soID": 22506181,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/22506181",
    "title": null,
    "body": "<p>Because <code>Elements with visibility: hidden or opacity: 0 are considered visible, since they still consume space in the layout</code> (as described for <a href=\"https://api.jquery.com/visible-selector/\">jQuery :visible Selector</a>) - we can check if element is <em>really</em> visible in this way:</p>\n\n<pre><code>function isElementReallyHidden (el) {\n    return $(el).is(\":hidden\") || $(el).css(\"visibility\") == \"hidden\" || $(el).css('opacity') == 0;\n}\n\nvar booElementReallyShowed = !isElementReallyHidden(someEl);\n$(someEl).parents().each(function () {\n    if (isElementReallyHidden(this)) {\n        booElementReallyShowed = false;\n    }\n});\n</code></pre>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 284602,
      "name": "Andron",
      "reputation": 3885
    }
  },
  {
    "soID": 16446530,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/16446530",
    "title": null,
    "body": "<p>All these answers are nice.  </p>\n\n<p>But I cannot be sure that variable is a string, doesn't contains only spaces (this is important for me), and can contain '0' (string).   </p>\n\n<p>My version:</p>\n\n<pre><code>function empty(str){\n    return !str || !/[^\\s]+/.test(str);\n}\n\nempty(null); // true\nempty(0); // true\nempty(7); // false\nempty(\"\"); // true\nempty(\"0\"); // false\nempty(\"  \"); // true\n</code></pre>\n\n<p>Sample on <a href=\"http://jsfiddle.net/YZfGs/\" rel=\"noreferrer\">jsfiddle</a>.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 284602,
      "name": "Andron",
      "reputation": 3885
    }
  },
  {
    "soID": 28152765,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/28152765",
    "title": null,
    "body": "<p>I use an own method which includes a check if the object exists first and a more intuitive conversion to boolean:</p>\n\n<pre><code>function str2bool(strvalue){\n  return (strvalue &amp;&amp; typeof strvalue == 'string') ? (strvalue.toLowerCase() == 'true' || strvalue == '1') : (strvalue == true);\n}\n</code></pre>\n\n<p>The results are:</p>\n\n<pre><code>var test; // false\nvar test2 = null; // false\nvar test3 = 'undefined'; // false\nvar test4 = 'true'; // true\nvar test5 = 'false'; // false\nvar test6 = true; // true\nvar test7 = false; // false\nvar test8 = 1; // true\nvar test9 = 0; // false\nvar test10 = '1'; // true\nvar test11 = '0'; // false\n</code></pre>\n\n<p>Fiddle:\n<a href=\"http://jsfiddle.net/av5xcj6s/\" rel=\"nofollow\">http://jsfiddle.net/av5xcj6s/</a></p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9634065,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/9634065",
    "title": null,
    "body": "<p>Assuming that the question is...</p>\n\n<h1>How do I check a checkbox-set <strong>BY VALUE?</strong></h1>\n\n<p>Remember that in a typical checkbox set, all input tags have the same name, <strong>they differ by the attribute <code>value</code></strong>:  there are no ID for each input of the set.</p>\n\n<p>Xian's answer can be extended with a <em>more specific selector</em>, using the following line of code:</p>\n\n<pre><code>$(\"input.myclass[name='myname'][value='the_value']\").prop(\"checked\", true);\n</code></pre>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15704206,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/15704206",
    "title": null,
    "body": "<p>An illustration of when to prefer the first method to the second one is when you need to avoid overriding a function's previous definitions.</p>\n\n<p>With</p>\n\n<pre><code>if (condition){\n    function myfunction(){\n        // Some code\n    }\n}\n</code></pre>\n\n<p>, this definition of <code>myfunction</code> will override any previous definition, since it will be done at parse-time.</p>\n\n<p>While</p>\n\n<pre><code>if (condition){\n    var myfunction = function (){\n        // Some code\n    }\n}\n</code></pre>\n\n<p>does the correct job of defining <code>myfunction</code> only when <code>condition</code> is met.</p>\n",
    "score": 56,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 288258,
      "name": "Mbengue Assane",
      "reputation": 1576
    }
  },
  {
    "soID": 5971324,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/5971324",
    "title": null,
    "body": "<p>JavaScript works with the number of milliseconds since the epoch whereas most other languages work with the seconds. You could work with milliseconds but as soon as you pass a value to say PHP, the PHP native functions will probably fail. So to be sure I always use the seconds, not milliseconds.</p>\n\n<p>This will give you a Unix timestamp (in seconds):</p>\n\n<pre><code>var unix = Math.round(+new Date()/1000);\n</code></pre>\n\n<p>This will give you the milliseconds since the epoch (not Unix timestamp):</p>\n\n<pre><code>var milliseconds = new Date().getTime();\n</code></pre>\n",
    "score": 196,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 288644,
      "name": "Daithí",
      "reputation": 2711
    }
  },
  {
    "soID": 36942239,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/36942239",
    "title": null,
    "body": "<p>Lots of fancy answers here. Really surprised no one has posted this solution:</p>\n\n<pre><code>var booleanVal = toCast &gt; '';\n</code></pre>\n\n<p>This resolves to true in most cases other than bool false, number zero and empty string (obviously). You can easily look for other falsey string values after the fact e.g.:</p>\n\n<pre><code>var booleanVal = toCast &gt; '' &amp;&amp; toCast != 'false' &amp;&amp; toCast != '0';  \n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24414775,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/24414775",
    "title": null,
    "body": "<p>Simple solution i have been using it for a while</p>\n\n<pre><code>function asBoolean(value) {\n\n    return (''+value) === 'true'; \n\n}\n\n\n// asBoolean(true) ==&gt; true\n// asBoolean(false) ==&gt; false\n// asBoolean('true') ==&gt; true\n// asBoolean('false') ==&gt; false\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6867400,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/6867400",
    "title": null,
    "body": "<p>This <a href=\"https://github.com/jfeldstein/jQuery.AjaxFileUpload.js\">AJAX file upload jQuery plugin</a> uploads the file somehwere, and passes the\nresponse to a callback, nothing else. </p>\n\n<ul>\n<li>It does not depend on specific HTML, just give it a <code>&lt;input type=\"file\"&gt;</code></li>\n<li>It does not require your server to respond in any particular way</li>\n<li>It does not matter how many files you use, or where they are on the page</li>\n</ul>\n\n<p>-- Use as little as --</p>\n\n<pre><code>$('#one-specific-file').ajaxfileupload({\n  'action': '/upload.php'\n});\n</code></pre>\n\n<p>-- or as much as --</p>\n\n<pre><code>$('input[type=\"file\"]').ajaxfileupload({\n  'action': '/upload.php',\n  'params': {\n    'extra': 'info'\n  },\n  'onComplete': function(response) {\n    console.log('custom handler for file:');\n    alert(JSON.stringify(response));\n  },\n  'onStart': function() {\n    if(weWantedTo) return false; // cancels upload\n  },\n  'onCancel': function() {\n    console.log('no file selected');\n  }\n});\n</code></pre>\n",
    "score": 75,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 311901,
      "name": "Jordan Feldstein",
      "reputation": 5422
    }
  },
  {
    "soID": 11511035,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/11511035",
    "title": null,
    "body": "<p>You can also do this using plain JavaScript:</p>\n\n<pre><code>function isRendered(domObj) {\n    if ((domObj.nodeType != 1) || (domObj == document.body)) {\n        return true;\n    }\n    if (domObj.currentStyle &amp;&amp; domObj.currentStyle[\"display\"] != \"none\" &amp;&amp; domObj.currentStyle[\"visibility\"] != \"hidden\") {\n        return isRendered(domObj.parentNode);\n    } else if (window.getComputedStyle) {\n        var cs = document.defaultView.getComputedStyle(domObj, null);\n        if (cs.getPropertyValue(\"display\") != \"none\" &amp;&amp; cs.getPropertyValue(\"visibility\") != \"hidden\") {\n            return isRendered(domObj.parentNode);\n        }\n    }\n    return false;\n}\n</code></pre>\n\n<p>Notes:</p>\n\n<ol>\n<li><p>Works everywhere</p></li>\n<li><p>Works for nested elements</p></li>\n<li><p>Works for CSS and inline styles</p></li>\n<li><p>Doesn't require a framework</p></li>\n</ol>\n",
    "score": 106,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 313969,
      "name": "Matt Brock",
      "reputation": 3980
    }
  },
  {
    "soID": 2818982,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/2818982",
    "title": null,
    "body": "<p>'===' operator  checks the values as well as the types of the variables for equality.</p>\n\n<p>'==' operator just checks the value of the variables for equality.</p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 333371,
      "name": "Niraj CHoubey",
      "reputation": 259
    }
  },
  {
    "soID": 17381376,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/17381376",
    "title": null,
    "body": "<p>If there is no <code>href</code> maybe there is no reason to use an anchor tag.</p>\n\n<p>You can attach events (click, hover, etc.) on almost every element, so why not just use a <code>span</code>or a <code>div</code>?</p>\n\n<p>And for users with JavaScript disabled: if there isn't a fallback (for example, an alternative <code>href</code>), they should at least not be able to see and interact with that element at all, whatever it is an <code>&lt;a&gt;</code> or a <code>&lt;span&gt;</code> tag.</p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3435811,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/3435811",
    "title": null,
    "body": "<p>An important reason is to add one and only one variable as the \"Root\" of your namespace...</p>\n\n<pre><code>var MyNamespace = {}\nMyNamespace.foo= function() {\n\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>var MyNamespace = {\n  foo: function() {\n  },\n  ...\n}\n</code></pre>\n\n<p>There are many techniques for namespacing. It's become more important with the plethora of JavaScript modules available.</p>\n\n<p>Also see <em><a href=\"https://stackoverflow.com/questions/881515/\">How do I declare a namespace in JavaScript?</a></em></p>\n",
    "score": 46,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 341616,
      "name": "Rob",
      "reputation": 4447
    }
  },
  {
    "soID": 6051126,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/6051126",
    "title": null,
    "body": "<p>I don't think what you really need is to close the menu when the user clicks outside; what you need is for the menu to close when the user clicks anywhere at all on the page. If you click on the menu, or off the menu it should close right? </p>\n\n<p>Finding no satisfactory answers above prompted me to write <a href=\"http://programming34m0.blogspot.com/2011/05/simplifying-javascript-jump-menu.html\">this blog post</a> the other day. For the more pedantic, there are a number of gotchas to take note of: </p>\n\n<ol>\n<li>If you attach a click event handler to the body element at click time be sure to wait for the 2nd click before closing the menu, and unbinding the event. Otherwise the click event that opened the menu will bubble up to the listener that has to close the menu.</li>\n<li>If you use event.stopPropogation() on a click event, no other elements in your page can have a click-anywhere-to-close feature.</li>\n<li>Attaching a click event handler to the body element indefinitely is not a performant solution</li>\n<li>Comparing the target of the event, and its parents to the handler's creator assumes that what you want is to close the menu when you click off it, when what you really want is to close it when you click anywhere on the page.</li>\n<li>Listening for events on the body element will make your code more brittle. Styling as innocent as this would break it: <code>body { margin-left:auto; margin-right: auto; width:960px;}</code></li>\n</ol>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2864169,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/2864169",
    "title": null,
    "body": "<p>Just add this function in JavaScript, and it will return the absolute path of the current path.</p>\n\n<pre><code>function getAbsolutePath() {\n    var loc = window.location;\n    var pathName = loc.pathname.substring(0, loc.pathname.lastIndexOf('/') + 1);\n    return loc.href.substring(0, loc.href.length - ((loc.pathname + loc.search + loc.hash).length - pathName.length));\n}\n</code></pre>\n\n<p>I hope it works for you.</p>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 344885,
      "name": "Neville Bonavia",
      "reputation": 341
    }
  },
  {
    "soID": 3215653,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/3215653",
    "title": null,
    "body": "<p>I use :</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function empty(e) {\n  switch (e) {\n    case \"\":\n    case 0:\n    case \"0\":\n    case null:\n    case false:\n    case typeof this == \"undefined\":\n      return true;\n    default:\n      return false;\n  }\n}\n\nempty(null) // true\nempty(0) // true\nempty(7) // false\nempty(\"\") // true\nempty((function() {\n    return \"\"\n  })) // true\n</code></pre>\n",
    "score": 29,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 348008,
      "name": "Jet",
      "reputation": 733
    }
  },
  {
    "soID": 2944306,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/2944306",
    "title": null,
    "body": "<p>you could also go with regexps:</p>\n\n<pre><code>if((/^\\s*$/).test(str)) { }\n</code></pre>\n\n<p>Checks for strings that are either empty or filled with whitespace.</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 354687,
      "name": "oem",
      "reputation": 141
    }
  },
  {
    "soID": 2960848,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/2960848",
    "title": null,
    "body": "<p>This worked perfectly fine in time for me:</p>\n\n<pre><code>$('body').click(function() {\n    // Hide the menus if visible.\n});\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 901753,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/901753",
    "title": null,
    "body": "<p>I believe you could do this:</p>\n\n<pre><code>if ($('#isAgeSelected :checked').size() &gt; 0)\n{\n    $(\"#txtAge\").show(); \n} else { \n    $(\"#txtAge\").hide();\n}\n</code></pre>\n",
    "score": 33,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3062825,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/3062825",
    "title": null,
    "body": "<p>Function:</p>\n\n<pre><code>$(function() {\n    $.fn.click_inout = function(clickin_handler, clickout_handler) {\n        var item = this;\n        var is_me = false;\n        item.click(function(event) {\n            clickin_handler(event);\n            is_me = true;\n        });\n        $(document).click(function(event) {\n            if (is_me) {\n                is_me = false;\n            } else {\n                clickout_handler(event);\n            }\n        });\n        return this;\n    }\n});\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>this.input = $('&lt;input&gt;')\n    .click_inout(\n        function(event) { me.ShowTree(event); },\n        function() { me.Hide(); }\n    )\n    .appendTo(this.node);\n</code></pre>\n\n<p>And functions are very simple:</p>\n\n<pre><code>ShowTree: function(event) {\n    this.data_span.show();\n}\nHide: function() {\n    this.data_span.hide();\n}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4673540,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/4673540",
    "title": null,
    "body": "<p>This is a more complicated issue than many may think.  Several browsers support built-in JavaScript location objects and associated parameters/methods accessible through <code>window.location</code> or <code>document.location</code>. However, different flavors of Internet Explorer (6,7) don't support these methods in the same way, (<code>window.location.href</code>?  <code>window.location.replace()</code> not supported) so you have to access them differently by writing conditional code all the time to hand-hold Internet Explorer.</p>\n\n<p>So, if you have jQuery available and loaded, you might as well use jQuery (location), as the others mentioned because it resolves these issues. If however, you are doing-for an example-some client-side geolocation redirection via JavaScript (that is, using Google Maps API and location object methods), then you may not want to load the entire jQuery library and write your conditional code that checks every version of Internet Explorer/Firefox/etc.</p>\n\n<p>Internet Explorer makes the front-end coding cat unhappy, but jQuery is a plate of milk.</p>\n",
    "score": 24,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 373330,
      "name": "negutron",
      "reputation": 521
    }
  },
  {
    "soID": 8743292,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/8743292",
    "title": null,
    "body": "<p>I couldn't get it working using:</p>\n\n<pre><code>$(\"#cb\").prop('checked', 'true');\n$(\"#cb\").prop('checked', 'false');\n</code></pre>\n\n<p>Both true and false would check the checkbox. What worked for me was:</p>\n\n<pre><code>$(\"#cb\").prop('checked', 'true'); // For checking\n$(\"#cb\").prop('checked', '');     // For unchecking\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 377398,
      "name": "fredcrs",
      "reputation": 1825
    }
  },
  {
    "soID": 14796708,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/14796708",
    "title": null,
    "body": "<p>An alternative way, but I believe bdukes's answer is best.</p>\n\n<pre><code>   var myString = 'hello'; \n    if(myString.charAt(0)){\n    alert('no empty');\n    }\n    alert('empty');\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 379008,
      "name": "GibboK",
      "reputation": 26916
    }
  },
  {
    "soID": 3394176,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/3394176",
    "title": null,
    "body": "<p>The following would be enough</p>\n\n<pre><code>String.prototype.boolean = function() {\n    return \"true\" == this; \n};\n\n\"true\".boolean() // returns true \"false\".boolean() // returns false\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6860287,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/6860287",
    "title": null,
    "body": "<p>I found this method in some jQuery calendar plugin.</p>\n\n<pre><code>function ClickOutsideCheck(e)\n{\n  var el = e.target;\n  var popup = $('.popup:visible')[0];\n  if (popup==undefined)\n    return true;\n\n  while (true){\n    if (el == popup ) {\n      return true;\n    } else if (el == document) {\n      $(\".popup\").hide();\n      return false;\n    } else {\n      el = $(el).parent()[0];\n    }\n  }\n};\n\n$(document).bind('mousedown.popup', ClickOutsideCheck);\n</code></pre>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3261380,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/3261380",
    "title": null,
    "body": "<p>For checking if a string is empty, null or undefined I use:</p>\n\n<pre><code>function isEmpty(str) {\n    return (!str || 0 === str.length);\n}\n</code></pre>\n\n<p>For checking if a string is blank, null or undefined I use:</p>\n\n<pre><code>function isBlank(str) {\n    return (!str || /^\\s*$/.test(str));\n}\n</code></pre>\n\n<p>For checking if a string is blank or contains only white-space:</p>\n\n<pre><code>String.prototype.isEmpty = function() {\n    return (this.length === 0 || !this.trim());\n};\n</code></pre>\n",
    "score": 765,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 389026,
      "name": "Jano González",
      "reputation": 8032
    }
  },
  {
    "soID": 3273564,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/3273564",
    "title": null,
    "body": "<p>In total agreement with the overall sentiment, use <code>void(0)</code> when you need it, and use a valid URL when you need it.</p>\n\n<p>Using <a href=\"http://en.wikipedia.org/wiki/Rewrite_engine\" rel=\"noreferrer\">URL rewriting</a> you can make URLs that not only do what you want to do with JavaScript disabled, but also tell you exactly what its going to do.</p>\n\n<pre><code>&lt;a href=\"./Readable/Text/URL/Pointing/To/Server-Side/Script\" id=\"theLinkId\"&gt;WhyClickHere&lt;/a&gt;\n</code></pre>\n\n<p>On the server side, you just have to parse the URL and query string and do what you want. If you are clever, you can allow the server side script to respond to both Ajax and standard requests differently. Allowing you to have concise centralized code that handles all the links on your page.</p>\n\n<p><a href=\"http://www.easymodrewrite.com/\" rel=\"noreferrer\">URL rewriting tutorials</a></p>\n\n<p>Pros</p>\n\n<ul>\n<li>Shows up in status bar</li>\n<li>Easily upgraded to Ajax via onclick handler in JavaScript</li>\n<li>Practically comments itself</li>\n<li>Keeps your directories from becoming littered with single use HTML files</li>\n</ul>\n\n<p>Cons</p>\n\n<ul>\n<li>Should still use event.preventDefault() in JavaScript</li>\n<li>Fairly complex path handling and URL parsing on the server side.</li>\n</ul>\n\n<p>I am sure there are tons more cons out there. Feel free to discuss them.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3310585,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/3310585",
    "title": null,
    "body": "<p>str.value.length == 0</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 399277,
      "name": "Doug",
      "reputation": 47
    }
  },
  {
    "soID": 3425761,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/3425761",
    "title": null,
    "body": "<pre><code>function tell()\n{\nvar pass = document.getElementById('pasword').value;\nvar plen = pass.length;\n\nnow you can check if your string is empty as like \nif(plen==0)\n{\n         alert('empty');\n}\nelse\n{\n   alert('you entered something');\n}\n}\n\n\n&lt;input type='text' id='pasword' /&gt;\n</code></pre>\n\n<p>this is also a generic way to check if field is empty.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 413269,
      "name": "Muhammad Salman",
      "reputation": 41
    }
  },
  {
    "soID": 18355136,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/18355136",
    "title": null,
    "body": "<p>I'm a little late, but I have a little snippet to do this, it essentially maintains all of JScripts truthey/falsey/<em>filthy</em>-ness but includes <code>\"false\"</code> as an acceptible value for false.</p>\n\n<p>I prefer this method to the ones mentioned because it doesn't rely on a 3rd party to parse the code (i.e: eval/JSON.parse), which is overkill in my mind, it's short enough to not require a utility function and maintains other truthey/falsey conventions.</p>\n\n<pre><code>var value = \"false\";\nvar result = (value == \"false\") != Boolean(value);\n\n// value = \"true\"  =&gt; result = true\n// value = \"false\" =&gt; result = false\n// value = true    =&gt; result = true\n// value = false   =&gt; result = false\n// value = null    =&gt; result = false\n// value = []      =&gt; result = true\n// etc..\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3533701,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/3533701",
    "title": null,
    "body": "<p>You can also extend the $.fn object with new methods:</p>\n\n<pre><code>(function($)  {\n   $.fn.extend({\n      check : function()  {\n         return this.filter(\":radio, :checkbox\").attr(\"checked\", true);\n      },\n      uncheck : function()  {\n         return this.filter(\":radio, :checkbox\").removeAttr(\"checked\");\n      }\n   });\n}(jQuery));\n</code></pre>\n\n<p>Then you can just do:</p>\n\n<pre><code>$(\":checkbox\").check();\n$(\":checkbox\").uncheck();\n</code></pre>\n\n<p>Or you may want to give them more unique names like mycheck() and myuncheck()  in case you use some other library that uses those names.</p>\n",
    "score": 59,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 426633,
      "name": "livefree75",
      "reputation": 623
    }
  },
  {
    "soID": 12536800,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/12536800",
    "title": null,
    "body": "<p>Just to add up, here's a function to return a timestamp string in Javascript. \nExample: 15:06:38 PM</p>\n\n<pre><code>function displayTime() {\n    var str = \"\";\n\n    var currentTime = new Date()\n    var hours = currentTime.getHours()\n    var minutes = currentTime.getMinutes()\n    var seconds = currentTime.getSeconds()\n\n    if (minutes &lt; 10) {\n        minutes = \"0\" + minutes\n    }\n    if (seconds &lt; 10) {\n        seconds = \"0\" + seconds\n    }\n    str += hours + \":\" + minutes + \":\" + seconds + \" \";\n    if(hours &gt; 11){\n        str += \"PM\"\n    } else {\n        str += \"AM\"\n    }\n    return str;\n}\n</code></pre>\n",
    "score": 30,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 436341,
      "name": "40-Love",
      "reputation": 9412
    }
  },
  {
    "soID": 7833897,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/7833897",
    "title": null,
    "body": "<p>How about?</p>\n\n<pre><code>JSON.parse(\"true\");\n</code></pre>\n\n<p>or with jQuery</p>\n\n<pre><code>$.parseJSON(\"true\");\n</code></pre>\n",
    "score": 427,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 264071,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/264071",
    "title": null,
    "body": "<p>Remember to match case:</p>\n\n<pre><code>var isTrueSet = (myValue.toLowerCase() === 'true');\n</code></pre>\n\n<p>Also, if it's a form element checkbox, you can also detect if the checkbox is checked:</p>\n\n<pre><code>var isTrueSet = document.myForm.IS_TRUE.checked;\n</code></pre>\n\n<p>Assuming that if it is checked, it is \"set\" equal to true. This evaluates as true/false.</p>\n",
    "score": 95,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4380804,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/4380804",
    "title": null,
    "body": "<p>The Boolean object doesn't have a 'parse' method. <code>Boolean('false')</code> returns true, so that won't work. <code>!!'false'</code> also returns <code>true</code>, so that won't work also.</p>\n\n<p>If you want string <code>'true'</code> to return boolean <code>true</code> and string <code>'false'</code> to return boolean <code>false</code>, then the simplest solution is to use <code>eval()</code>. <code>eval('true')</code> returns true and <code>eval('false')</code> returns false. Keep in mind the performance implications when using <code>eval()</code> though.</p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3751112,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/3751112",
    "title": null,
    "body": "<p>This selects elements that have the specified attribute with a value containing the given substring:</p>\n\n<pre><code>$('input[name *= ckbItem]').prop('checked', true);\n</code></pre>\n\n<p>It will select all elements that contain ckbItem in its name attribute.</p>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 452672,
      "name": "Abou-Emish",
      "reputation": 862
    }
  },
  {
    "soID": 25476365,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/25476365",
    "title": null,
    "body": "<p>For future reference, the current draft of <a href=\"https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015\" rel=\"nofollow\">ECMAScript 6</a> introduces <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign\" rel=\"nofollow\">Object.assign</a> as a way of cloning objects. Example code would be:</p>\n\n<pre><code>var obj1 = { a: true, b: 1 };\nvar obj2 = Object.assign(obj1);\nconsole.log(obj2); // { a: true, b: 1 }\n</code></pre>\n\n<p>At the time of writing <a href=\"http://kangax.github.io/compat-table/es6/#Object.assign\" rel=\"nofollow\">support is limited to Firefox 34 in browsers</a> so it’s not usable in production code just yet (unless you’re writing a Firefox extension of course).</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31300228,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/31300228",
    "title": null,
    "body": "<p>Look for <code>Handling the upload process for a file, asynchronously</code> in here:\n<a href=\"https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications</a></p>\n\n<p>Sample from the link</p>\n\n<pre><code>&lt;?php\nif (isset($_FILES['myFile'])) {\n    // Example:\n    move_uploaded_file($_FILES['myFile']['tmp_name'], \"uploads/\" . $_FILES['myFile']['name']);\n    exit;\n}\n?&gt;&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;dnd binary upload&lt;/title&gt;\n    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function sendFile(file) {\n            var uri = \"/index.php\";\n            var xhr = new XMLHttpRequest();\n            var fd = new FormData();\n\n            xhr.open(\"POST\", uri, true);\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) {\n                    // Handle response.\n                    alert(xhr.responseText); // handle response.\n                }\n            };\n            fd.append('myFile', file);\n            // Initiate a multipart/form-data upload\n            xhr.send(fd);\n        }\n\n        window.onload = function() {\n            var dropzone = document.getElementById(\"dropzone\");\n            dropzone.ondragover = dropzone.ondragenter = function(event) {\n                event.stopPropagation();\n                event.preventDefault();\n            }\n\n            dropzone.ondrop = function(event) {\n                event.stopPropagation();\n                event.preventDefault();\n\n                var filesArray = event.dataTransfer.files;\n                for (var i=0; i&lt;filesArray.length; i++) {\n                    sendFile(filesArray[i]);\n                }\n            }\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;\n        &lt;div id=\"dropzone\" style=\"margin:30px; width:500px; height:300px; border:1px dotted grey;\"&gt;Drag &amp; drop your file here...&lt;/div&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 462889,
      "name": "Allende",
      "reputation": 1002
    }
  },
  {
    "soID": 16943381,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/16943381",
    "title": null,
    "body": "<p>Instead using flow interruption, blur/focus event or any other tricky technics, simply match event flow with element's kinship:</p>\n\n<pre><code>$(document).on(\"click.menu-outside\", function(event){\n    // Test if target and it's parent aren't #menuscontainer\n    // That means the click event occur on other branch of document tree\n    if(!$(event.target).parents().andSelf().is(\"#menuscontainer\")){\n        // Click outisde #menuscontainer\n        // Hide the menus (but test if menus aren't already hidden)\n    }\n});\n</code></pre>\n\n<p>To remove click outside event listener, simply:</p>\n\n<pre><code>$(document).off(\"click.menu-outside\");\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8603563,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/8603563",
    "title": null,
    "body": "<p>As another poster said there are a lot of gotchas, especially if the element you are displaying (in this case a menu) has interactive elements.\nI've found the following method to be fairly robust:</p>\n\n<pre><code>$('#menuscontainer').click(function(event) {\n    //your code that shows the menus fully\n\n    //now set up an event listener so that clicking anywhere outside will close the menu\n    $('html').click(function(event) {\n        //check up the tree of the click target to check whether user has clicked outside of menu\n        if ($(event.target).parents('#menuscontainer').length==0) {\n            // your code to hide menu\n\n            //this event listener has done its job so we can unbind it.\n            $(this).unbind(event);\n        }\n\n    })\n});\n</code></pre>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31847679,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/31847679",
    "title": null,
    "body": "<p>My reasoning process using emacs org-mode and node.js to run a test.</p>\n\n<pre><code>| use =      | '' | '0' | false | 'false' | undefined | null | ' \\t\\r\\n ' |\n| ''         | x  | f   | t     | f       | f         | f    | f          |\n| '0'        |    | x   | t     | f       | f         | f    | f          |\n| false      |    |     | x     | f       | f         | f    | t          |\n| 'false'    |    |     |       | x       | f         | f    | f          |\n| undefined  |    |     |       |         | x         | t    | f          |\n| null       |    |     |       |         |           | x    | f          |\n| ' \\t\\r\\n ' |    |     |       |         |           |      | x          | \n\n\n\n| use ===    | '' | '0' | false | 'false' | undefined | null | ' \\t\\r\\n ' |\n| ''         | x  | f   | f     | f       | f         | f    | f          |\n| '0'        |    | x   | f     | f       | f         | f    | f          |\n| false      |    |     | x     | f       | f         | f    | f          |\n| 'false'    |    |     |       | x       | f         | f    | f          |\n| undefined  |    |     |       |         | x         | f    | f          |\n| null       |    |     |       |         |           | x    | f          |\n| ' \\t\\r\\n ' |    |     |       |         |           |      | x          |\n</code></pre>\n\n<p>My test script below: run > node xxx.js</p>\n\n<pre><code>var rowItems = ['', '0', false, 'false', undefined, null, ' \\t\\r\\n ']\nvar colItems = rowItems\n\nfor(var i = 0; i &lt; rowItems.length; i++) {\n    for (var j = 0; j &lt; colItems.length; j++) {\n        var r = (rowItems[i] === colItems[j]) ? true : false;\n        console.log(rowItems[i] + \" = \" + colItems[j] + \" \" + r + \" [\" + i + \"] ==&gt; [\" + j + \"]\")\n    };\n}\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 479008,
      "name": "CodeFarmer",
      "reputation": 1231
    }
  },
  {
    "soID": 7446163,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/7446163",
    "title": null,
    "body": "<p><em><strong>The equal comparison operator == is confusing and should be avoided.</em></strong> </p>\n\n<p>If you <strong>HAVE TO</strong> live with it, then remember the following 3 things: </p>\n\n<ol>\n<li><strong>It is not transitive: <em>(a == b)</em> and <em>(b == c)</em> does not lead to <em>(a == c)</em></strong></li>\n<li><strong>It's mutually exclusive to its negation: <em>(a == b)</em> and <em>(a != b)</em> always hold opposite Boolean values, with all a and b.</strong></li>\n<li><strong>In case of doubt, learn by heart the following truth table:</strong></li>\n</ol>\n\n<p>EQUAL OPERATOR TRUTH TABLE IN JAVASCRIPT</p>\n\n<ul>\n<li>Each row in the table is a set of 3 mutually \"equal\" values, meaning that any 2 values among them are equal using the equal == sign*</li>\n</ul>\n\n<p>** STRANGE: note that any two values on the first column are not equal in that sense.**</p>\n\n<pre><code>''       == 0 == false   // Any two values among these 3 ones are equal with the == operator\n'0'      == 0 == false   // Also a set of 3 equal values, note that only 0 and false are repeated\n'\\t'     == 0 == false   // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n'\\r'     == 0 == false   // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n'\\n'     == 0 == false   // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n'\\t\\r\\n' == 0 == false   // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n\nnull == undefined  // These two \"default\" values are not-equal to any of the listed values above\nNaN                // NaN is not equal to any thing, even to itself.\n</code></pre>\n",
    "score": 35,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 487785,
      "name": "CuongHuyTo",
      "reputation": 848
    }
  },
  {
    "soID": 17869905,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/17869905",
    "title": null,
    "body": "<p>If you happen to be using <a href=\"http://angularjs.org/\" rel=\"noreferrer\"><strong>AngularJS</strong></a>, you can use the following:</p>\n\n<pre><code>&lt;a href=\"\"&gt;Do some fancy JavaScript&lt;/a&gt;\n</code></pre>\n\n<p>Which will not do anything.</p>\n\n<p>In addition</p>\n\n<ul>\n<li>It will not take you to the top of the page, as with (#)\n\n<ul>\n<li>Therefore, you don't need to explicitly return <code>false</code> with JavaScript</li>\n</ul></li>\n<li>It is short an concise</li>\n</ul>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10882727,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/10882727",
    "title": null,
    "body": "<p>This worked for me perfectly!!</p>\n\n<pre><code>$('html').click(function (e) {\n    if (e.target.id == 'YOUR-DIV-ID') {\n        //do something\n    } else {\n        //do something\n    }\n});\n</code></pre>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 38317768,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/38317768",
    "title": null,
    "body": "<blockquote>\n  <p>How to detect a click outside an element?</p>\n</blockquote>\n\n<p>The reason that this question is so popular and has so many answers is that it is deceptively complex. After almost eight years and dozens of answers, I am genuinely surprised to see how little care has been given to accessibility.</p>\n\n<blockquote>\n  <p>I would like to hide these elements when the user clicks outside the menus' area.</p>\n</blockquote>\n\n<p>This is a noble cause and is the <em>actual</em> issue. The title of the question&mdash;which is what most answers appear to attempt to address&mdash;contains an unfortunate red herring.</p>\n\n<p><strong>Hint: it's the word <em>\"click\"</em>!</strong></p>\n\n<h1>You don't actually want to bind click handlers.</h1>\n\n<p>If you're binding click handlers to close the dialog, you've already failed. The reason you've failed is that not everyone triggers <code>click</code> events. Users not using a mouse will be able to escape your dialog (and your pop-up menu is arguably a type of dialog) by pressing <kbd>Tab</kbd>, and they then won't be able to read the content behind the dialog without subsequently triggering a <code>click</code> event.</p>\n\n<p>So let's rephrase the question.</p>\n\n<blockquote>\n  <p>How does one close a dialog when a user is finished with it?</p>\n</blockquote>\n\n<p>This is the goal. Unfortunately, now we need to bind the <code>userisfinishedwiththedialog</code> event, and that binding isn't so straightforward.</p>\n\n<p>So how can we detect that a user has finished using a dialog?</p>\n\n<h2><code>focusout</code> event</h2>\n\n<p>A good start is to determine if focus has left the dialog.</p>\n\n<p><strong>Hint: be careful with the <code>blur</code> event, <code>blur</code> doesn't propagate if the event was bound to the bubbling phase!</strong></p>\n\n<p>jQuery's <a href=\"http://api.jquery.com/focusout/\"><code>focusout</code></a> will do just fine. If you can't use jQuery, then you can use <code>blur</code> during the capturing phase:</p>\n\n<pre><code>element.addEventListener('blur', ..., true);\n//                       use capture: ^^^^\n</code></pre>\n\n<p>Also, for many dialogs you'll need to allow the container to gain focus. Add <code>tabindex=\"-1\"</code> to allow the dialog to receive focus dynamically without otherwise interrupting the tabbing flow.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$('a').on('click', function () {\r\n  $(this.hash).toggleClass('active').focus();\r\n});\r\n\r\n$('div').on('focusout', function () {\r\n  $(this).removeClass('active');\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>div {\r\n  display: none;\r\n}\r\n.active {\r\n  display: block;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;a href=\"#example\"&gt;Example&lt;/a&gt;\r\n&lt;div id=\"example\" tabindex=\"-1\"&gt;\r\n  Lorem ipsum &lt;a href=\"http://example.com\"&gt;dolor&lt;/a&gt; sit amet.\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<p>If you play with that demo for more than a minute you should quickly start seeing issues.</p>\n\n<p>The first is that the link in the dialog isn't clickable. Attempting to click on it or tab to it will lead to the dialog closing before the interaction takes place. This is because focusing the inner element triggers a <code>focusout</code> event before triggering a <code>focusin</code> event again.</p>\n\n<p>The fix is to queue the state change on the event loop. This can be done by using <code>setImmediate(...)</code>, or <code>setTimeout(..., 0)</code> for browsers that don't support <code>setImmediate</code>. Once queued it can be cancelled by a subsequent <code>focusin</code>:</p>\n\n<pre><code>$('.submenu').on({\n  focusout: function (e) {\n    $(this).data('submenuTimer', setTimeout(function () {\n      $(this).removeClass('submenu--active');\n    }.bind(this), 0));\n  },\n  focusin: function (e) {\n    clearTimeout($(this).data('submenuTimer'));\n  }\n});\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$('a').on('click', function () {\r\n  $(this.hash).toggleClass('active').focus();\r\n});\r\n\r\n$('div').on({\r\n  focusout: function () {\r\n    $(this).data('timer', setTimeout(function () {\r\n      $(this).removeClass('active');\r\n    }.bind(this), 0));\r\n  },\r\n  focusin: function () {\r\n    clearTimeout($(this).data('timer'));\r\n  }\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>div {\r\n  display: none;\r\n}\r\n.active {\r\n  display: block;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;a href=\"#example\"&gt;Example&lt;/a&gt;\r\n&lt;div id=\"example\" tabindex=\"-1\"&gt;\r\n  Lorem ipsum &lt;a href=\"http://example.com\"&gt;dolor&lt;/a&gt; sit amet.\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The second issue is that the dialog won't close when the link is pressed again. This is because the dialog loses focus, triggering the close behavior, after which the link click triggers the dialog to reopen.</p>\n\n<p>Similar to the previous issue, the focus state needs to be managed. Given that the state change has already been queued, it's just a matter of handling focus events on the dialog triggers:</p>\n\n<sub>This should look familiar</sub>\n\n<pre><code>$('a').on({\n  focusout: function () {\n    $(this.hash).data('timer', setTimeout(function () {\n      $(this.hash).removeClass('active');\n    }.bind(this), 0));\n  },\n  focusin: function () {\n    clearTimeout($(this.hash).data('timer'));  \n  }\n});\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$('a').on('click', function () {\r\n  $(this.hash).toggleClass('active').focus();\r\n});\r\n\r\n$('div').on({\r\n  focusout: function () {\r\n    $(this).data('timer', setTimeout(function () {\r\n      $(this).removeClass('active');\r\n    }.bind(this), 0));\r\n  },\r\n  focusin: function () {\r\n    clearTimeout($(this).data('timer'));\r\n  }\r\n});\r\n\r\n$('a').on({\r\n  focusout: function () {\r\n    $(this.hash).data('timer', setTimeout(function () {\r\n      $(this.hash).removeClass('active');\r\n    }.bind(this), 0));\r\n  },\r\n  focusin: function () {\r\n    clearTimeout($(this.hash).data('timer'));  \r\n  }\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>div {\r\n  display: none;\r\n}\r\n.active {\r\n  display: block;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;a href=\"#example\"&gt;Example&lt;/a&gt;\r\n&lt;div id=\"example\" tabindex=\"-1\"&gt;\r\n  Lorem ipsum &lt;a href=\"http://example.com\"&gt;dolor&lt;/a&gt; sit amet.\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<h2><kbd>Esc</kbd> key</h2>\n\n<p>If you thought you were done by handling the focus states, there's more you can do to simplify the user experience.</p>\n\n<p>This is often a \"nice to have\" feature, but it's common that when you have a modal or popup of any sort that the <kbd>Esc</kbd> key will close it out.</p>\n\n<pre><code>keydown: function (e) {\n  if (e.which === 27) {\n    $(this).removeClass('active');\n    e.preventDefault();\n  }\n}\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$('a').on('click', function () {\r\n  $(this.hash).toggleClass('active').focus();\r\n});\r\n\r\n$('div').on({\r\n  focusout: function () {\r\n    $(this).data('timer', setTimeout(function () {\r\n      $(this).removeClass('active');\r\n    }.bind(this), 0));\r\n  },\r\n  focusin: function () {\r\n    clearTimeout($(this).data('timer'));\r\n  },\r\n  keydown: function (e) {\r\n    if (e.which === 27) {\r\n      $(this).removeClass('active');\r\n      e.preventDefault();\r\n    }\r\n  }\r\n});\r\n\r\n$('a').on({\r\n  focusout: function () {\r\n    $(this.hash).data('timer', setTimeout(function () {\r\n      $(this.hash).removeClass('active');\r\n    }.bind(this), 0));\r\n  },\r\n  focusin: function () {\r\n    clearTimeout($(this.hash).data('timer'));  \r\n  }\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>div {\r\n  display: none;\r\n}\r\n.active {\r\n  display: block;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;a href=\"#example\"&gt;Example&lt;/a&gt;\r\n&lt;div id=\"example\" tabindex=\"-1\"&gt;\r\n  Lorem ipsum &lt;a href=\"http://example.com\"&gt;dolor&lt;/a&gt; sit amet.\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<p>If you know you have focusable elements within the dialog, you won't need to focus the dialog directly. If you're building a menu, you could focus the first menu item instead.</p>\n\n<pre><code>click: function (e) {\n  $(this.hash)\n    .toggleClass('submenu--active')\n    .find('a:first')\n    .focus();\n  e.preventDefault();\n}\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$('.menu__link').on({\r\n  click: function (e) {\r\n    $(this.hash)\r\n      .toggleClass('submenu--active')\r\n      .find('a:first')\r\n      .focus();\r\n    e.preventDefault();\r\n  },\r\n  focusout: function () {\r\n    $(this.hash).data('submenuTimer', setTimeout(function () {\r\n      $(this.hash).removeClass('submenu--active');\r\n    }.bind(this), 0));\r\n  },\r\n  focusin: function () {\r\n    clearTimeout($(this.hash).data('submenuTimer'));  \r\n  }\r\n});\r\n\r\n$('.submenu').on({\r\n  focusout: function () {\r\n    $(this).data('submenuTimer', setTimeout(function () {\r\n      $(this).removeClass('submenu--active');\r\n    }.bind(this), 0));\r\n  },\r\n  focusin: function () {\r\n    clearTimeout($(this).data('submenuTimer'));\r\n  },\r\n  keydown: function (e) {\r\n    if (e.which === 27) {\r\n      $(this).removeClass('submenu--active');\r\n      e.preventDefault();\r\n    }\r\n  }\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.menu {\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n.menu:after {\r\n  clear: both;\r\n  content: '';\r\n  display: table;\r\n}\r\n.menu__item {\r\n  float: left;\r\n  position: relative;\r\n}\r\n\r\n.menu__link {\r\n  background-color: lightblue;\r\n  color: black;\r\n  display: block;\r\n  padding: 0.5em 1em;\r\n  text-decoration: none;\r\n}\r\n.menu__link:hover,\r\n.menu__link:focus {\r\n  background-color: black;\r\n  color: lightblue;\r\n}\r\n\r\n.submenu {\r\n  border: 1px solid black;\r\n  display: none;\r\n  left: 0;\r\n  list-style: none;\r\n  margin: 0;\r\n  padding: 0;\r\n  position: absolute;\r\n  top: 100%;\r\n}\r\n.submenu--active {\r\n  display: block;\r\n}\r\n\r\n.submenu__item {\r\n  width: 150px;\r\n}\r\n\r\n.submenu__link {\r\n  background-color: lightblue;\r\n  color: black;\r\n  display: block;\r\n  padding: 0.5em 1em;\r\n  text-decoration: none;\r\n}\r\n\r\n.submenu__link:hover,\r\n.submenu__link:focus {\r\n  background-color: black;\r\n  color: lightblue;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;ul class=\"menu\"&gt;\r\n  &lt;li class=\"menu__item\"&gt;\r\n    &lt;a class=\"menu__link\" href=\"#menu-1\"&gt;Menu 1&lt;/a&gt;\r\n    &lt;ul class=\"submenu\" id=\"menu-1\" tabindex=\"-1\"&gt;\r\n      &lt;li class=\"submenu__item\"&gt;&lt;a class=\"submenu__link\" href=\"http://example.com/#1\"&gt;Example 1&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"submenu__item\"&gt;&lt;a class=\"submenu__link\" href=\"http://example.com/#2\"&gt;Example 2&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"submenu__item\"&gt;&lt;a class=\"submenu__link\" href=\"http://example.com/#3\"&gt;Example 3&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"submenu__item\"&gt;&lt;a class=\"submenu__link\" href=\"http://example.com/#4\"&gt;Example 4&lt;/a&gt;&lt;/li&gt;\r\n    &lt;/ul&gt;\r\n  &lt;/li&gt;\r\n  &lt;li class=\"menu__item\"&gt;\r\n    &lt;a  class=\"menu__link\" href=\"#menu-2\"&gt;Menu 2&lt;/a&gt;\r\n    &lt;ul class=\"submenu\" id=\"menu-2\" tabindex=\"-1\"&gt;\r\n      &lt;li class=\"submenu__item\"&gt;&lt;a class=\"submenu__link\" href=\"http://example.com/#1\"&gt;Example 1&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"submenu__item\"&gt;&lt;a class=\"submenu__link\" href=\"http://example.com/#2\"&gt;Example 2&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"submenu__item\"&gt;&lt;a class=\"submenu__link\" href=\"http://example.com/#3\"&gt;Example 3&lt;/a&gt;&lt;/li&gt;\r\n      &lt;li class=\"submenu__item\"&gt;&lt;a class=\"submenu__link\" href=\"http://example.com/#4\"&gt;Example 4&lt;/a&gt;&lt;/li&gt;\r\n    &lt;/ul&gt;\r\n  &lt;/li&gt;\r\n&lt;/ul&gt;\r\nlorem ipsum &lt;a href=\"http://example.com/\"&gt;dolor&lt;/a&gt; sit amet.</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<h1>WAI-ARIA Roles and Other Accessibility Support</h1>\n\n<p>This answer hopefully covers the basics of accessible keyboard and mouse support for this feature, but as it's already quite sizable I'm going to avoid any discussion of <a href=\"https://www.w3.org/TR/wai-aria/\">WAI-ARIA roles and attributes</a>, however I <em>highly</em> recommend that implementers refer to the spec for details on what roles they should use and any other appropriate attributes.</p>\n",
    "score": 109,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11215939,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/11215939",
    "title": null,
    "body": "<p>If you want to get the path of the root site, use this:</p>\n\n<pre><code>$(location).attr('href').replace($(location).attr('pathname'),'');\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 501501,
      "name": "vikas mehta",
      "reputation": 291
    }
  },
  {
    "soID": 11149802,
    "parentID": 332872,
    "url": "https://stackoverflow.com/q/11149802",
    "title": null,
    "body": "<p>Nothing worked for me. All I was seeing was the HTML of the login page, coming back to the client side with code 200. (302 at first but the same Ajax request loading login page inside another Ajax request, which was supposed to be a redirect rather than loading plain text of the login page).</p>\n\n<p>In the login controller, I added this line:</p>\n\n<pre><code>Response.Headers[\"land\"] = \"login\";\n</code></pre>\n\n<p>And in the global Ajax handler, I did this:</p>\n\n<pre><code>$(function () {\n    var $document = $(document);\n    $document.ajaxSuccess(function (e, response, request) {\n        var land = response.getResponseHeader('land');\n        var redrUrl = '/login?ReturnUrl=' + encodeURIComponent(window.location);\n        if(land) {\n            if (land.toString() === 'login') {\n                window.location = redrUrl;\n            }\n        }\n    });\n});\n</code></pre>\n\n<p>Now I don't have any issue, and it works like a charm.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 530794,
      "name": "Asif Ashraf",
      "reputation": 378
    }
  },
  {
    "soID": 21535160,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/21535160",
    "title": null,
    "body": "<p>As many people on the thread have noted, just because the request is aborted on the client-side, the server will still process the request. This creates unnecessary load on the server because it's doing work that we've quit listening to on the front-end.</p>\n\n<p>The problem I was trying to solve (that others may run in to as well) is that when the user entered information in an input field, I wanted to fire off a request for a Google Instant type of feel.</p>\n\n<p>To avoid firing unnecessary requests and to maintain the snappiness of the front-end, I did the following:</p>\n\n<pre><code>var xhrQueue = [];\nvar xhrCount = 0;\n\n$('#search_q').keyup(function(){\n\n    xhrQueue.push(xhrCount);\n\n    setTimeout(function(){\n\n        xhrCount = ++xhrCount;\n\n        if (xhrCount === xhrQueue.length) {\n            // Fire Your XHR //\n        }\n\n    }, 150);\n\n});\n</code></pre>\n\n<p>This will essentially send one request every 150ms (a variable that you can customize for your own needs). If you're having trouble understanding what exactly is happening here, log <code>xhrCount</code> and <code>xhrQueue</code> to the console just before the if block.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 531677,
      "name": "brianrhea",
      "reputation": 865
    }
  },
  {
    "soID": 17314282,
    "parentID": 306583,
    "url": "https://stackoverflow.com/q/17314282",
    "title": null,
    "body": "<p>jQuery's <code>each</code> is one option:</p>\n\n<pre><code>&lt;div id=\"test\"&gt;\n    &lt;img src=\"testing.png\"/&gt;\n    &lt;img src=\"testing1.png\"/&gt;\n&lt;/div&gt;\n\n$('#test img').each(function(){\n    console.log($(this).attr('src'));\n});\n</code></pre>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 538669,
      "name": "Thirumalai murugan",
      "reputation": 2992
    }
  },
  {
    "soID": 36310432,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/36310432",
    "title": null,
    "body": "<p>Just to add to the other answers, scope is a look-up list of all the declared identifiers (variables), and enforces a strict set of rules as to how these are accessible to currently executing code.  This look-up may be for the purposes of assigning to the variable, which is an LHS (lefthand-side) reference, or it may be for the purposes of retrieving its value, which is an RHS (righthand-side) reference. These look-ups are what the JavaScript engine is doing internally when it's compiling and executing the code.</p>\n\n<p>So from this perspective, I think that a picture would help that I found in the Scopes and Closures ebook by Kyle Simpson:</p>\n\n<p><a href=\"https://i.stack.imgur.com/0kqpZ.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/0kqpZ.png\" alt=\"image\"></a></p>\n\n<p>Quoting from his ebook:</p>\n\n<blockquote>\n  <p>The building represents our program’s nested scope ruleset. The first\n  floor of the building represents your currently executing scope,\n  wherever you are. The top level of the building is the global scope.\n  You resolve LHS and RHS references by looking on your current floor,\n  and if you don’t find it, taking the elevator to the next floor,\n  looking there, then the next, and so on. Once you get to the top floor\n  (the global scope), you either find what you’re looking for, or you\n  don’t. But you have to stop regardless.</p>\n</blockquote>\n\n<p>One thing of note that is worth mentioning, \"Scope look-up stops once it finds the first match\".</p>\n\n<p>This idea of \"scope levels\" explains why \"this\" can be changed with a newly created scope, if it's being looked up in a nested function.\nHere is a link that goes into all these details, <a href=\"https://toddmotto.com/everything-you-wanted-to-know-about-javascript-scope/\" rel=\"noreferrer\">Everything you wanted to know about javascript scope</a> </p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 543572,
      "name": "James Drinkard",
      "reputation": 7000
    }
  },
  {
    "soID": 37233133,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/37233133",
    "title": null,
    "body": "<p><em>One</em> unmentioned reason to use <code>===</code> - is in the case that you are co-existing with / cross-compiling to/from <code>coffee-script</code>. From The <a href=\"https://arcturo.github.io/library/coffeescript/07_the_bad_parts.html\" rel=\"nofollow\">Little Book on CoffeeScript</a>...</p>\n\n<blockquote>\n  <p>The weak equality comparison in JavaScript has some confusing behavior and is often the source of confusing bugs.  </p>\n  \n  <p>The solution is to instead use the strict equality operator, which consists of three equal signs: ===. It works exactly like the normal equality operator, but without any type coercion. It's recommended to always use the strict equality operator, and explicitly convert types if needs be.</p>\n</blockquote>\n\n<p>If you are regularly converting to and from <code>coffee-script</code>, you should just use <code>===</code>.  In fact, the <code>coffee-script</code> compiler will <strong>force you to</strong>...</p>\n\n<blockquote>\n  <p>CoffeeScript solves this by simply replacing all weak comparisons with strict ones, in other words converting all == comparators into ===. You can't do a a weak equality comparison in CoffeeScript, and you should explicitly convert types before comparing them if necessary.</p>\n</blockquote>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 547214,
      "name": "Alex Gray",
      "reputation": 10038
    }
  },
  {
    "soID": 28878653,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/28878653",
    "title": null,
    "body": "<p>When you checked a checkbox like;</p>\n\n<pre><code>$('.className').attr('checked', 'checked')\n</code></pre>\n\n<p>it might not be enough. You should also call the function below;</p>\n\n<pre><code>$('.className').prop('checked', 'true')\n</code></pre>\n\n<p>Especially when you removed the checkbox checked attribute.</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 547271,
      "name": "Serhat Koroglu",
      "reputation": 542
    }
  },
  {
    "soID": 17169887,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/17169887",
    "title": null,
    "body": "<p>The answer marked as the accepted answer does not take into account that you can have overlays over the element, like dialogs, popovers, datepickers, etc. Clicks in these should not hide the element.</p>\n\n<p>I have made my own version that does take this into account. It's created as a <a href=\"http://en.wikipedia.org/wiki/KnockoutJS\" rel=\"nofollow\">KnockoutJS</a> binding, but it can easily be converted to jQuery-only.</p>\n\n<p>It works by the first query for all elements with either z-index or absolute position that are visible. It then hit tests those elements against the element I want to hide if click outside. If it's a hit I calculate a new bound rectangle which takes into account the overlay bounds.</p>\n\n<pre><code>ko.bindingHandlers.clickedIn = (function () {\n    function getBounds(element) {\n        var pos = element.offset();\n        return {\n            x: pos.left,\n            x2: pos.left + element.outerWidth(),\n            y: pos.top,\n            y2: pos.top + element.outerHeight()\n        };\n    }\n\n    function hitTest(o, l) {\n        function getOffset(o) {\n            for (var r = { l: o.offsetLeft, t: o.offsetTop, r: o.offsetWidth, b: o.offsetHeight };\n                o = o.offsetParent; r.l += o.offsetLeft, r.t += o.offsetTop);\n            return r.r += r.l, r.b += r.t, r;\n        }\n\n        for (var b, s, r = [], a = getOffset(o), j = isNaN(l.length), i = (j ? l = [l] : l).length; i;\n            b = getOffset(l[--i]), (a.l == b.l || (a.l &gt; b.l ? a.l &lt;= b.r : b.l &lt;= a.r))\n                &amp;&amp; (a.t == b.t || (a.t &gt; b.t ? a.t &lt;= b.b : b.t &lt;= a.b)) &amp;&amp; (r[r.length] = l[i]));\n        return j ? !!r.length : r;\n    }\n\n    return {\n        init: function (element, valueAccessor) {\n            var target = valueAccessor();\n            $(document).click(function (e) {\n                if (element._clickedInElementShowing === false &amp;&amp; target()) {\n                    var $element = $(element);\n                    var bounds = getBounds($element);\n\n                    var possibleOverlays = $(\"[style*=z-index],[style*=absolute]\").not(\":hidden\");\n                    $.each(possibleOverlays, function () {\n                        if (hitTest(element, this)) {\n                            var b = getBounds($(this));\n                            bounds.x = Math.min(bounds.x, b.x);\n                            bounds.x2 = Math.max(bounds.x2, b.x2);\n                            bounds.y = Math.min(bounds.y, b.y);\n                            bounds.y2 = Math.max(bounds.y2, b.y2);\n                        }\n                    });\n\n                    if (e.clientX &lt; bounds.x || e.clientX &gt; bounds.x2 ||\n                        e.clientY &lt; bounds.y || e.clientY &gt; bounds.y2) {\n\n                        target(false);\n                    }\n                }\n                element._clickedInElementShowing = false;\n            });\n\n            $(element).click(function (e) {\n                e.stopPropagation();\n            });\n        },\n        update: function (element, valueAccessor) {\n            var showing = ko.utils.unwrapObservable(valueAccessor());\n            if (showing) {\n                element._clickedInElementShowing = true;\n            }\n        }\n    };\n})();\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12121587,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/12121587",
    "title": null,
    "body": "<p>I have this to strip out the GET variables.</p>\n\n<pre><code>var loc = window.location;\nvar currentURL = loc.protocol + '//' + loc.host + loc.pathname;\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 549848,
      "name": "Aram Kocharyan",
      "reputation": 14430
    }
  },
  {
    "soID": 4642622,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/4642622",
    "title": null,
    "body": "<p>Use:</p>\n\n<pre><code>var go = false;\n$(document).click(function(){\n    if(go){\n        $('#divID').hide();\n        go = false;\n    }\n})\n\n$(\"#divID\").mouseover(function(){\n    go = false;\n});\n\n$(\"#divID\").mouseout(function (){\n    go = true;\n});\n\n$(\"btnID\").click( function(){\n    if($(\"#divID:visible\").length==1)\n        $(\"#divID\").hide(); // Toggle\n    $(\"#divID\").show();\n});\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4539617,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/4539617",
    "title": null,
    "body": "<p>There is one more important thing to remember here. <a href=\"http://en.wikipedia.org/wiki/Section_508_Amendment_to_the_Rehabilitation_Act_of_1973\">Section 508</a> compliance.\nBecause of it, I feel it's necessary to point out that you need the anchor tag for screen readers such as <a href=\"http://en.wikipedia.org/wiki/JAWS_%28screen_reader%29\">JAWS</a> to be able to focus it through tabbing. So the solution \"just use JavaScript and forget the anchor to begin with\" is not an option for some of this. Firing the JavaScript inside the href is only necessary if you can't afford for the screen to jump back up to the top. You can use a settimeout for 0 seconds and have JavaScript fire to where you need focus but even the apage will jump to the top and then back. </p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6203869,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/6203869",
    "title": null,
    "body": "<p>I use a combination, fastest checks are first.</p>\n\n<pre><code>function isBlank(pString){\n    if (!pString || pString.length == 0) {\n        return true;\n    }\n    // checks for a non-white space character \n    // which I think [citation needed] is faster \n    // than removing all the whitespace and checking \n    // against an empty string\n    return !/[^\\s]+/.test(pString);\n}\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 557117,
      "name": "Will",
      "reputation": 3946
    }
  },
  {
    "soID": 2010994,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/2010994",
    "title": null,
    "body": "<p>You might find it useful to extend the Storage object with these handy methods:</p>\n\n<pre><code>Storage.prototype.setObject = function(key, value) {\n    this.setItem(key, JSON.stringify(value));\n}\n\nStorage.prototype.getObject = function(key) {\n    return JSON.parse(this.getItem(key));\n}\n</code></pre>\n\n<p>This way you get the functionality that you really wanted even though underneath the API only supports strings.</p>\n",
    "score": 175,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 564394,
      "name": "Justin Voskuhl",
      "reputation": 2126
    }
  },
  {
    "soID": 6829393,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/6829393",
    "title": null,
    "body": "<p>I choose use <code>javascript:void(0)</code>, because use this could prevent right click to open the content menu.</p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4612914,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/4612914",
    "title": null,
    "body": "<p>If you're dealing with JSON, it should be noted that strictly speaking, JSON strings must be double quoted. Sure, many libraries support single quotes as well, but I had great problems in one of my projects before realizing that single quoting a string is in fact not according to JSON standards.</p>\n",
    "score": 515,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 5423934,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/5423934",
    "title": null,
    "body": "<p>None of these answers address what I understand to be the question, which is what I was searching for, <em>\"How do I handle items that have <code>visibility: hidden</code>?\"</em>. Neither <code>:visible</code> nor <code>:hidden</code> will handle this, as they are both looking for display per the documentation.  As far as I could determine, there is no selector to handle CSS visibility.  Here is how I resolved it (standard jQuery selectors, there may be a more condensed syntax):</p>\n\n<pre><code>$(\".item\").each(function() {\n    if ($(this).css(\"visibility\") == \"hidden\") {\n        // handle non visible state\n    } else {\n        // handle visible state\n    }\n});\n</code></pre>\n",
    "score": 388,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 570371,
      "name": "aaronLile",
      "reputation": 3917
    }
  },
  {
    "soID": 30734348,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/30734348",
    "title": null,
    "body": "<p>With the new ES6 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\">spread operator</a>, joining two arrays using <code>push</code> becomes even easier:</p>\n\n<pre><code>var arr = [1, 2, 3, 4, 5];\nvar arr2 = [6, 7, 8, 9, 10];\narr.push(...arr2);\nconsole.log(arr); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n</code></pre>\n\n<p>This adds the contents of <code>arr2</code> onto the end of <code>arr</code>.</p>\n\n<p><a href=\"https://babeljs.io/repl/#?experimental=true&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;code=var%20arr%20%3D%20%5B1%2C%202%2C%203%2C%204%2C%205%5D%3B%0Aarr.push(...%5B6%2C%207%2C%208%2C%209%2C%2010%5D)%3B%0Aconsole.log(arr)%3B\">Babel REPL Example</a></p>\n",
    "score": 24,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9131633,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/9131633",
    "title": null,
    "body": "<p>I would use CSS class <code>.hide { display: none!important; }</code>. </p>\n\n<p>For hiding/showing, I call <code>.addClass(\"hide\")/.removeClass(\"hide\")</code>. For checking visibility, I use <code>.hasClass(\"hide\")</code>.</p>\n\n<p>It's a simple and clear way to check/hide/show elements, if you don't plan to use <code>.toggle()</code> or <code>.animate()</code> methods.</p>\n",
    "score": 111,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 571203,
      "name": "Evgeny Levin",
      "reputation": 3527
    }
  },
  {
    "soID": 44324353,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/44324353",
    "title": null,
    "body": "<p>to check if is exactly an empty string:</p>\n\n<pre><code>if(val===\"\")...\n</code></pre>\n\n<p>to check if it is an empty string OR a a logical equivalent for no-value (null, undefined, 0, NaN, false, ...):</p>\n\n<pre><code>if(!val)...\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 571410,
      "name": "Luke",
      "reputation": 1058
    }
  },
  {
    "soID": 23938696,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/23938696",
    "title": null,
    "body": "<p>ECMAScript 6 has an elegant proposal on find.</p>\n\n<blockquote>\n  <p>The find method executes the callback function once for each element\n  present in the array until it finds one where callback returns a true\n  value. If such an element is found, find immediately returns the value\n  of that element. Otherwise, find returns undefined. callback is\n  invoked only for indexes of the array which have assigned values; it\n  is not invoked for indexes which have been deleted or which have never\n  been assigned values.</p>\n</blockquote>\n\n<p>Here is the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\" rel=\"nofollow noreferrer\">MDN documentation</a> on that.</p>\n\n<p>The find functionality works like this.</p>\n\n<pre><code>function isPrime(element, index, array) {\n    var start = 2;\n    while (start &lt;= Math.sqrt(element)) {\n        if (element % start++ &lt; 1) return false;\n    }\n    return (element &gt; 1);\n}\n\nconsole.log( [4, 6, 8, 12].find(isPrime) ); // Undefined, not found\nconsole.log( [4, 5, 8, 12].find(isPrime) ); // 5\n</code></pre>\n\n<p>You can use this in ECMAScript 5 and below by <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find#Polyfill\" rel=\"nofollow noreferrer\">defining the function</a>.</p>\n\n<pre><code>if (!Array.prototype.find) {\n  Object.defineProperty(Array.prototype, 'find', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function(predicate) {\n      if (this == null) {\n        throw new TypeError('Array.prototype.find called on null or undefined');\n      }\n      if (typeof predicate !== 'function') {\n        throw new TypeError('predicate must be a function');\n      }\n      var list = Object(this);\n      var length = list.length &gt;&gt;&gt; 0;\n      var thisArg = arguments[1];\n      var value;\n\n      for (var i = 0; i &lt; length; i++) {\n        if (i in list) {\n          value = list[i];\n          if (predicate.call(thisArg, value, i, list)) {\n            return value;\n          }\n        }\n      }\n      return undefined;\n    }\n  });\n}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 572100,
      "name": "Pradeep Mahdevu",
      "reputation": 6564
    }
  },
  {
    "soID": 25920074,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/25920074",
    "title": null,
    "body": "<h1>Let the array length property do the work:</h1>\n\n<pre><code>myarray[myarray.length] = 'new element value added to the end of the array';\n</code></pre>\n\n<p>myarray.length returns the number of strings in the array.\n<strong>JS is zero based</strong> so the next element key of the array will be the current length of the array.\nEX:</p>\n\n<pre><code>var myarray = [0, 1, 2, 3],\n    myarrayLength = myarray.length; //myarrayLength is set to 4\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4685330,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/4685330",
    "title": null,
    "body": "<p>From <em><a href=\"http://learn.jquery.com/using-jquery-core/faq/how-do-i-determine-the-state-of-a-toggled-element/\" rel=\"noreferrer\">How do I determine the state of a toggled element?</a></em></p>\n\n<hr>\n\n<p>You can determine whether an element is collapsed or not by using the <code>:visible</code> and <code>:hidden</code> selectors.</p>\n\n<pre><code>var isVisible = $('#myDiv').is(':visible');\nvar isHidden = $('#myDiv').is(':hidden');\n</code></pre>\n\n<p>If you're simply acting on an element based on its visibility, you can just include <code>:visible</code> or <code>:hidden</code> in the selector expression. For example:</p>\n\n<pre><code> $('#myDiv:visible').animate({left: '+=200px'}, 'slow');\n</code></pre>\n",
    "score": 276,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 574889,
      "name": "user574889",
      "reputation": 2769
    }
  },
  {
    "soID": 10893560,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/10893560",
    "title": null,
    "body": "<p>JSLint sometimes gives you unrealistic reasons to modify stuff. <code>===</code> has the exactly same performance as <code>==</code> if the types are already the same. </p>\n\n<p>It is faster only when the types are not the same, in which case it does not try to convert types but directly returns a false.</p>\n\n<p>So, <em>IMHO,</em> JSLint maybe used to write new code, but useless over-optimizing should be avoided at all costs. </p>\n\n<p>Meaning, there is no reason to change <code>== to ===</code> in a check like <code>if (a == 'test')</code> when you know it for a fact that a can only be a String. </p>\n\n<p>Modifying a lot of code that way wastes developers' and reviewers' time and achieves nothing.</p>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 582509,
      "name": "ashes",
      "reputation": 336
    }
  },
  {
    "soID": 19882502,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/19882502",
    "title": null,
    "body": "<p>I wrote a function to match PHP's filter_var which does this nicely. Available in a gist: <a href=\"https://gist.github.com/CMCDragonkai/7389368\" rel=\"noreferrer\">https://gist.github.com/CMCDragonkai/7389368</a></p>\n\n<pre><code>/**\n * Parses mixed type values into booleans. This is the same function as filter_var in PHP using boolean validation\n * @param  {Mixed}        value \n * @param  {Boolean}      nullOnFailure = false\n * @return {Boolean|Null}\n */\nvar parseBooleanStyle = function(value, nullOnFailure = false){\n    switch(value){\n        case true:\n        case 'true':\n        case 1:\n        case '1':\n        case 'on':\n        case 'yes':\n            value = true;\n            break;\n        case false:\n        case 'false':\n        case 0:\n        case '0':\n        case 'off':\n        case 'no':\n            value = false;\n            break;\n        default:\n            if(nullOnFailure){\n                value = null;\n            }else{\n                value = false;\n            }\n            break;\n    }\n    return value;\n};\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13532998,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/13532998",
    "title": null,
    "body": "<p>Similar thing: Finds the first element by a \"search lambda\":</p>\n\n<pre><code>Array.prototype.find = function(search_lambda) {\n  return this[this.map(search_lambda).indexOf(true)];\n};\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>[1,3,4,5,8,3,5].find(function(item) { return item % 2 == 0 })\n=&gt; 4\n</code></pre>\n\n<p>Same in coffeescript:</p>\n\n<pre><code>Array.prototype.find = (search_lambda) -&gt; @[@map(search_lambda).indexOf(true)]\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 584171,
      "name": "Andy Rohr",
      "reputation": 41
    }
  },
  {
    "soID": 13877279,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/13877279",
    "title": null,
    "body": "<p>Just a warning that using this:</p>\n\n<pre><code>$('html').click(function() {\n  // Hide the menus if visible\n});\n\n$('#menucontainer').click(function(event){\n  event.stopPropagation();\n});\n</code></pre>\n\n<p>It <strong>prevents</strong> the <a href=\"http://en.wikipedia.org/wiki/Ruby_on_Rails\" rel=\"nofollow\">Ruby on Rails</a> UJS driver from working properly. For example, <code>link_to 'click', '/url', :method =&gt; :delete</code> will not work.</p>\n\n<p>This might be a workaround:</p>\n\n<pre><code>$('html').click(function() {\n  // Hide the menus if visible\n});\n\n$('#menucontainer').click(function(event){\n  if (!$(event.target).data('method')) {\n    event.stopPropagation();\n  }\n});\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24827594,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/24827594",
    "title": null,
    "body": "<p>You can use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/some\" rel=\"noreferrer\">Array.prototype.some()</a></p>\n\n<pre><code>const items = [ {a: '1'}, {a: '2'}, {a: '3'} ]\n\nitems.some(item =&gt; item.a === '3')  // returns true\nitems.some(item =&gt; item.a === '4')  // returns false\n</code></pre>\n\n<p>Upside to this is that the iteration is aborted once the element is found so unnecessary iteration cycles are saved.</p>\n\n<p>One thing to note is that <code>some()</code> is not present in all js versions: (from the website)</p>\n\n<blockquote>\n  <p>some was added to the ECMA-262 standard in the 5th edition; as such it\n  may not be present in all implementations of the standard</p>\n</blockquote>\n\n<p>You can add it in case it's not there with this polyfill (from the same link)</p>\n\n<pre><code>if (!Array.prototype.some)\n{\n  Array.prototype.some = function(fun /*, thisArg */)\n  {\n    'use strict';\n\n    if (this === void 0 || this === null)\n      throw new TypeError();\n\n    var t = Object(this);\n    var len = t.length &gt;&gt;&gt; 0;\n    if (typeof fun !== 'function')\n      throw new TypeError();\n\n    var thisArg = arguments.length &gt;= 2 ? arguments[1] : void 0;\n    for (var i = 0; i &lt; len; i++)\n    {\n      if (i in t &amp;&amp; fun.call(thisArg, t[i], i, t))\n        return true;\n    }\n\n    return false;\n  };\n}\n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 599912,
      "name": "Michael",
      "reputation": 8099
    }
  },
  {
    "soID": 36173924,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/36173924",
    "title": null,
    "body": "<pre><code>function isTrue(val) {\n    try {\n        return !!JSON.parse(val);\n    } catch (e) {\n        return false;\n    }\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11975486,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/11975486",
    "title": null,
    "body": "<p>If you know the highest index (such as stored in a variable \"i\") then you can do</p>\n\n<pre><code>myArray[i + 1] = someValue;\n</code></pre>\n\n<p>However if you don't know then you can either use </p>\n\n<pre><code>myArray.push(someValue);\n</code></pre>\n\n<p>as other answers suggested, or you can use</p>\n\n<pre><code>myArray[myArray.length] = someValue; \n</code></pre>\n\n<p>Note that the array is zero based so .length return the highest index plus one.</p>\n\n<p>Also note that you don't have to add in order and you can actually skip values, as in</p>\n\n<pre><code>myArray[myArray.length + 1000] = someValue;\n</code></pre>\n\n<p>In which case the values in between will have a value of undefined.</p>\n\n<p>It is therefore a good practice when looping through a JavaScript to verify that a value actually exists at that point.</p>\n\n<p>This can be done by something like the following:</p>\n\n<pre><code>if(myArray[i] === \"undefined\"){ continue; }\n</code></pre>\n\n<p>if you are certain that you don't have any zeros in the array then you can just do:</p>\n\n<pre><code>if(!myArray[i]){ continue; }\n</code></pre>\n\n<p>Of course make sure in this case that you don't use as the condition myArray[i] (as some people over the internet suggest based on the end that as soon as i is greater then the highest index it will return undefined which evaluates to false)</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 7459639,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/7459639",
    "title": null,
    "body": "<p>After reading all the answers that say it maybe be faster or maybe have advantages, I would say double quote is better or maybe faster too because <a href=\"http://closure-compiler.appspot.com/home\" rel=\"nofollow\">Google closure compiler</a> convert single quotes to double quotes. </p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 25899590,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/25899590",
    "title": null,
    "body": "<p>I do this, which will handle 1=TRUE=yes=YES=true, 0=FALSE=no=NO=false:</p>\n\n<pre><code>BOOL=false\nif (STRING)\n  BOOL=JSON.parse(STRING.toLowerCase().replace('no','false').replace('yes','true'));\n</code></pre>\n\n<p>Replace STRING with the name of your string variable.</p>\n\n<p>If it's not null, a numerical value or one of these strings:\n\"true\", \"TRUE\", \"false\", \"FALSE\", \"yes\", \"YES\", \"no\", \"NO\"\nIt will throw an error (intentionally.)</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6171234,
    "parentID": 332872,
    "url": "https://stackoverflow.com/q/6171234",
    "title": null,
    "body": "<p>Stick with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" rel=\"noreferrer\"><code>encodeURIComponent()</code></a>. The function <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\" rel=\"noreferrer\"><code>encodeURI()</code></a> does not bother to encode many characters that have semantic importance in URLs (e.g. \"#\", \"?\", and \"&amp;\"). <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\" rel=\"noreferrer\"><code>escape()</code></a> is deprecated, and does not bother to encode \"+\" characters, which will be interpreted as encoded spaces on the server (and, as pointed out by others here, does not properly URL-encode non-ASCII characters).</p>\n\n<p>There is a nice <a href=\"https://stackoverflow.com/questions/75980/best-practice-escape-or-encodeuri-encodeuricomponent\">explanation of the difference between <code>encodeURI()</code> and <code>encodeURIComponent()</code></a> elsewhere. If you want to encode something so that it can safely be included as a component of a URI (e.g. as a query string parameter), you want to use <code>encodeURIComponent()</code>.</p>\n",
    "score": 142,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 658138,
      "name": "Mike Brennan",
      "reputation": 2318
    }
  },
  {
    "soID": 5487027,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/5487027",
    "title": null,
    "body": "<p>All the above are good but this will be even better. use <code>!!</code>(<em>not not</em>) operator. </p>\n\n<pre><code>if(!!str){\nsome code here;\n}\n</code></pre>\n\n<p>or use type casting:</p>\n\n<pre><code>if(Boolean(str)){\n    codes here;\n}\n</code></pre>\n\n<p>Both do the same function, type cast the variable to boolean, where <code>str</code> is a variable.<br>\nReturns <code>false</code> for <code>null,undefined,0,000,\"\",false</code>.<br>\nReturns <code>true</code> for string \"0\" and whitespace \" \".</p>\n",
    "score": 177,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 683996,
      "name": "karthick.sk",
      "reputation": 1787
    }
  },
  {
    "soID": 5916151,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/5916151",
    "title": null,
    "body": "<p>This is the correct way of checking and unchecking checkboxes with jQuery, as it is cross-platform standard, and <em>will</em> allow form reposts.</p>\n\n<pre><code>$('.myCheckBox').each(function(){ this.checked = true; });\n\n$('.myCheckBox').each(function(){ this.checked = false; });\n</code></pre>\n\n<p>By doing this, you are using JavaScript standards for checking and unchecking checkboxes, so any browser that properly implements the \"checked\" property of the checkbox element will run this code flawlessly. This <em>should</em> be all major browsers, but I am unable to test previous to Internet&nbsp;Explorer&nbsp;9.</p>\n\n<p><strong>The Problem</strong> (jQuery 1.6):</p>\n\n<p>Once a user clicks on a checkbox, that checkbox stops responding to the \"checked\" attribute changes.</p>\n\n<p>Here is an example of the checkbox attribute failing to do the job after someone has <em>clicked</em> the checkbox (this happens in Chrome).</p>\n\n<p><strong><a href=\"http://jsfiddle.net/xixonia/zgcrB/\">Fiddle</a></strong></p>\n\n<p><strong>The Solution:</strong></p>\n\n<p>By using JavaScript's \"checked\" property on the <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\">DOM</a> elements, we are able to solve the problem directly, instead of trying to manipulate the DOM into doing what we <em>want</em> it to do.</p>\n\n<p><a href=\"http://jsfiddle.net/xixonia/WnbNC/\"><strong>Fiddle</strong></a></p>\n\n<p>This plugin will alter the checked property of any elements selected by jQuery, and successfully check and uncheck checkboxes under all circumstances. So, while this may seem like an over-bearing solution, it will make your site's user experience better, and help prevent user frustration.</p>\n\n<pre><code>(function( $ ) {\n    $.fn.checked = function(value) {\n        if(value === true || value === false) {\n            // Set the value of the checkbox\n            $(this).each(function(){ this.checked = value; });\n        } \n        else if(value === undefined || value === 'toggle') {\n            // Toggle the checkbox\n            $(this).each(function(){ this.checked = !this.checked; });\n        }\n\n        return this;\n    };\n})( jQuery );\n</code></pre>\n\n<p>Alternatively, if you do not want to use a plugin, you can use the following code snippets:</p>\n\n<pre><code>// Check\n$(':checkbox').prop('checked', true);\n\n// Un-check\n$(':checkbox').prop('checked', false);\n\n// Toggle\n$(':checkbox').prop('checked', function (i, value) {\n    return !value;\n});\n</code></pre>\n",
    "score": 265,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 696056,
      "name": "Christopher Harris",
      "reputation": 12592
    }
  },
  {
    "soID": 16842824,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/16842824",
    "title": null,
    "body": "<p>One more solution is here:</p>\n\n<p><a href=\"http://jsfiddle.net/zR76D/\" rel=\"nofollow\">http://jsfiddle.net/zR76D/</a></p>\n\n<p>Usage:</p>\n\n<pre><code>&lt;div onClick=\"$('#menu').toggle();$('#menu').clickOutside(function() { $(this).hide(); $(this).clickOutside('disable'); });\"&gt;Open / Close Menu&lt;/div&gt;\n&lt;div id=\"menu\" style=\"display: none; border: 1px solid #000000; background: #660000;\"&gt;I am a menu, whoa is me.&lt;/div&gt;\n</code></pre>\n\n<p>Plugin:</p>\n\n<pre><code>(function($) {\n    var clickOutsideElements = [];\n    var clickListener = false;\n\n    $.fn.clickOutside = function(options, ignoreFirstClick) {\n        var that = this;\n        if (ignoreFirstClick == null) ignoreFirstClick = true;\n\n        if (options != \"disable\") {\n            for (var i in clickOutsideElements) {\n                if (clickOutsideElements[i].element[0] == $(this)[0]) return this;\n            }\n\n            clickOutsideElements.push({ element : this, clickDetected : ignoreFirstClick, fnc : (typeof(options) != \"function\") ? function() {} : options });\n\n            $(this).on(\"click.clickOutside\", function(event) {\n                for (var i in clickOutsideElements) {\n                    if (clickOutsideElements[i].element[0] == $(this)[0]) {\n                        clickOutsideElements[i].clickDetected = true;\n                    }\n                }\n            });\n\n            if (!clickListener) {\n                if (options != null &amp;&amp; typeof(options) == \"function\") {\n                    $('html').click(function() {\n                        for (var i in clickOutsideElements) {\n                            if (!clickOutsideElements[i].clickDetected) {\n                                clickOutsideElements[i].fnc.call(that);\n                            }\n                            if (clickOutsideElements[i] != null) clickOutsideElements[i].clickDetected = false;\n                        }\n                    });\n                    clickListener = true;\n                }\n            }\n        }\n        else {\n            $(this).off(\"click.clickoutside\");\n            for (var i = 0; i &lt; clickOutsideElements.length; ++i) {\n                if (clickOutsideElements[i].element[0] == $(this)[0]) {\n                    clickOutsideElements.splice(i, 1);\n                }\n            }\n        }\n\n        return this;\n    }\n})(jQuery);\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 18792061,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/18792061",
    "title": null,
    "body": "<p>Use:</p>\n\n<pre><code>function isInArray(array, search)\n{\n    return array.indexOf(search) &gt;= 0;\n}\n\n// Usage\nif(isInArray(my_array, \"my_value\"))\n{\n    //...\n}\n</code></pre>\n",
    "score": 37,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 702353,
      "name": "Matías Cánepa",
      "reputation": 2734
    }
  },
  {
    "soID": 10265443,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/10265443",
    "title": null,
    "body": "<p>While <code>array.indexOf(x)!=-1</code> is the most concise way to do this (and has been supported by non-Internet&nbsp;Explorer browsers for over decade...), it is not O(1), but rather O(N), which is terrible. If your array will not be changing, you can convert your array to a hashtable, then do <code>table[x]!==undefined</code> or <code>===undefined</code>:</p>\n\n<pre><code>Array.prototype.toTable = function() {\n    var t = {};\n    this.forEach(function(x){t[x]=true});\n    return t;\n}\n</code></pre>\n\n<p>Demo:</p>\n\n<pre><code>var toRemove = [2,4].toTable();\n[1,2,3,4,5].filter(function(x){return toRemove[x]===undefined})\n</code></pre>\n\n<p>(Unfortunately, while you can create an Array.prototype.contains to \"freeze\" an array and store a hashtable in this._cache in two lines, this would give wrong results if you chose to edit your array later. JavaScript has insufficient hooks to let you keep this state, unlike Python for example.)</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 711085,
      "name": "ninjagecko",
      "reputation": 48128
    }
  },
  {
    "soID": 10305968,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/10305968",
    "title": null,
    "body": "<p>How <strong><a href=\"http://web-profile.net/jquery/dev/jquery-element-visible-hidden/\" rel=\"nofollow noreferrer\">element visibility and jQuery works</a></strong>;</p>\n\n<p>An element could be hidden with <code>display:none</code>, <code>visibility:hidden</code> or <code>opacity:0</code>. The difference between those methods:</p>\n\n<ul>\n<li><code>display:none</code> hides the element, and it does not take up any space;</li>\n<li><code>visibility:hidden</code> hides the element, but it still takes up space in the layout;</li>\n<li><p><code>opacity:0</code> hides the element as \"visibility:hidden\", and it still takes up space in the layout; the only difference is that opacity lets one to make an element partly transparent;   </p>\n\n<pre><code>if ($('.target').is(':hidden')) {\n  $('.target').show();\n} else {\n  $('.target').hide();\n}\nif ($('.target').is(':visible')) {\n  $('.target').hide();\n} else {\n  $('.target').show();\n}\n\nif ($('.target-visibility').css('visibility') == 'hidden') {\n  $('.target-visibility').css({\n    visibility: \"visible\",\n    display: \"\"\n  });\n} else {\n  $('.target-visibility').css({\n    visibility: \"hidden\",\n    display: \"\"\n  });\n}\n\nif ($('.target-visibility').css('opacity') == \"0\") {\n  $('.target-visibility').css({\n    opacity: \"1\",\n    display: \"\"\n  });\n} else {\n  $('.target-visibility').css({\n    opacity: \"0\",\n    display: \"\"\n  });\n}\n</code></pre>\n\n<p><strong>Useful jQuery toggle methods:</strong>  </p>\n\n<pre><code>$('.click').click(function() {\n  $('.target').toggle();\n});\n\n$('.click').click(function() {\n  $('.target').slideToggle();\n});\n\n$('.click').click(function() {\n  $('.target').fadeToggle();\n});\n</code></pre></li>\n</ul>\n",
    "score": 132,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 713523,
      "name": "webvitaly",
      "reputation": 2194
    }
  },
  {
    "soID": 43327897,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/43327897",
    "title": null,
    "body": "<p><strong>Convert String to Boolean</strong></p>\n\n<pre><code>var vIn = \"true\";\nvar vOut = vIn.toLowerCase()==\"true\"?1:0;\n</code></pre>\n\n<p><strong>Convert String to Number</strong></p>\n\n<pre><code>var vIn = 0;\nvar vOut = parseInt(vIn,10/*base*/);\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24225731,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/24225731",
    "title": null,
    "body": "<p>I use the following:</p>\n\n<pre><code>Array.prototype.contains = function (v) {\n    return this.indexOf(v) &gt; -1;\n}\n\nvar a = [ 'foo', 'bar' ];\n\na.contains('foo'); // true\na.contains('fox'); // false\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 717267,
      "name": "Eduardo Cuomo",
      "reputation": 6626
    }
  },
  {
    "soID": 5955215,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/5955215",
    "title": null,
    "body": "<p>Literally:</p>\n\n<p>(using Firefox v3.6, with <code>for-in</code> caveats as previously noted \n(HOWEVER the use below might endorse <code>for-in</code> for this very purpose! That is, enumerating array elements that ACTUALLY exist via a property index (HOWEVER, in particular, the array <code>length</code> property is NOT enumerated in the <code>for-in</code> property list!).).)</p>\n\n<p>(Drag &amp; drop the following complete URI's for immediate mode browser testing.)</p>\n\n<h3>JavaScript:</h3>\n\n<pre><code>  function ObjInRA(ra){var has=false; for(i in ra){has=true; break;} return has;}\n\n  function check(ra){\n      return ['There is ',ObjInRA(ra)?'an':'NO',' object in [',ra,'].'].join('')\n  }\n  alert([\n            check([{}]), check([]), check([,2,3]),\n            check(['']), '\\t (a null string)', check([,,,])\n        ].join('\\n'));\n</code></pre>\n\n<p>which displays:</p>\n\n<pre><code>There is an object in [[object Object]].\nThere is NO object in [].\nThere is an object in [,2,3].\nThere is an object in [].\n     (a null string)\nThere is NO object in [,,].\n</code></pre>\n\n<p>Wrinkles: if looking for a \"specific\" object consider:</p>\n\n<p>JavaScript: <code>alert({}!={}); alert({}!=={});</code></p>\n\n<p>And thus:</p>\n\n<h3>JavaScript:</h3>\n\n<pre><code> obj = {prop:\"value\"}; \n ra1 = [obj]; \n ra2 = [{prop:\"value\"}];\n alert(ra1[0] == obj); \n alert(ra2[0] == obj);\n</code></pre>\n\n<p>Often <code>ra2</code> is considered to \"contain\" <code>obj</code> as the literal entity <code>{prop:\"value\"}</code>.</p>\n\n<p>A very coarse, rudimentary, naive (as in code needs qualification enhancing) solution:</p>\n\n<h3>JavaScript:</h3>\n\n<pre><code>  obj={prop:\"value\"};   ra2=[{prop:\"value\"}];\n  alert(\n    ra2 . toSource() . indexOf( obj.toSource().match(/^.(.*).$/)[1] ) != -1 ?\n      'found' :\n      'missing' );\n</code></pre>\n\n<p>See ref: <em><a href=\"https://stackoverflow.com/questions/3624741/searching-for-objects-in-javascript-arrays/5750179#5750179\">Searching for objects in JavaScript arrays</a></em>.</p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 725589,
      "name": "Ekim",
      "reputation": 477
    }
  },
  {
    "soID": 10186286,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/10186286",
    "title": null,
    "body": "<p>If you are using <a href=\"http://en.wikipedia.org/wiki/PhoneGap\">PhoneGap</a> doing application development, and you have a value on the button that you want to show instantly, remember to do this</p>\n\n<pre><code>$('span.ui-[controlname]',$('[id]')).text(\"the value\");\n</code></pre>\n\n<p>I found that without the span, the interface will not update no matter what you do.</p>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 728579,
      "name": "Clement Ho",
      "reputation": 246
    }
  },
  {
    "soID": 17652575,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/17652575",
    "title": null,
    "body": "<p>Don't assume that the variable you check is a string. Don't assume that if this var has a length, then it's a string.</p>\n\n<p>The thing is: think carefully about what your app must do and can accept. Build something robust.</p>\n\n<p>If your method / function should only process a non empty string then test if the argument is a non empty string and don't do some 'trick'.</p>\n\n<p>As an example of something that will explode if you follow some advices here not carefully.</p>\n\n<pre><code>\nvar getLastChar = function (str) {\n if (str.length > 0)\n   return str.charAt(str.length - 1)\n}\n\ngetLastChar('hello')\n=> \"o\"\n\ngetLastChar([0,1,2,3])\n=> TypeError: Object [object Array] has no method 'charAt'\n</code>\n</pre>\n\n<p>So, I'd stick with</p>\n\n<pre><code>\nif (myVar === '')\n  ...\n</code>\n</pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 741657,
      "name": "Amida",
      "reputation": 1118
    }
  },
  {
    "soID": 34707963,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/34707963",
    "title": null,
    "body": "<p>ECMAScript 2015 (or ES6) came with built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect\">Reflect</a> object. It is possible to delete object property by calling <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty\">Reflect.deleteProperty()</a> function with target object and property key as parameters:</p>\n\n<pre><code>Reflect.deleteProperty(myJSONObject, 'regex');\n</code></pre>\n\n<p>which is equivalent to:</p>\n\n<pre><code>delete myJSONObject['regex'];\n</code></pre>\n\n<p>But if the property of the object is not configurable it cannot be deleted neither with deleteProperty function nor delete operator:</p>\n\n<pre><code>let obj = Object.freeze({ prop: \"value\" });\nlet success = Reflect.deleteProperty(obj, \"prop\");\nconsole.log(success); // false\nconsole.log(obj.prop); // value\n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">Object.freeze()</a> makes all properties of object not configurable (besides other things). <code>deleteProperty</code> function (as well as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\">delete operator</a>) returns <code>false</code> when tries to delete any of it's properties. If property is configurable it returns <code>true</code>, even if property does not exist.</p>\n\n<p>The difference between <code>delete</code> and <code>deleteProperty</code> is when using strict mode:</p>\n\n<pre><code>\"use strict\";\n\nlet obj = Object.freeze({ prop: \"value\" });\nReflect.deleteProperty(obj, \"prop\"); // false\ndelete obj[\"prop\"];\n// TypeError: property \"prop\" is non-configurable and can't be deleted\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 741871,
      "name": "madox2",
      "reputation": 13601
    }
  },
  {
    "soID": 10487870,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/10487870",
    "title": null,
    "body": "<p>I hope I am not adding something obvious, but I have been struggling with <a href=\"http://en.wikipedia.org/wiki/Django_%28web_framework%29\" rel=\"nofollow\">Django</a> and <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\" rel=\"nofollow\">Ajax</a> and JSON on this.</p>\n\n<p>Assuming that in your HTML code you do use double quotes, as normally should be, I highly suggest to use single quotes for the rest in JavaScript.</p>\n\n<p>So I agree with @ady but with some care.</p>\n\n<p>My bottom line is:\nIn JavaScript probably it doesn't matter, but as soon as you embed\nit inside HTML or the like you start to get troubles. You should know\nwhat is actually escaping, reading, passing your string.</p>\n\n<p>My simple case was:</p>\n\n<pre><code>tbox.innerHTML = tbox.innerHTML + '&lt;div class=\"thisbox_des\" style=\"width:210px;\" onmouseout=\"clear()\"&gt;&lt;a href=\"/this/thislist/'\n                   + myThis[i].pk +'\"&gt;&lt;img src=\"/site_media/'\n                   + myThis[i].fields.thumbnail +'\" height=\"80\" width=\"80\" style=\"float:left;\" onmouseover=\"showThis('\n                   + myThis[i].fields.left +','\n                   + myThis[i].fields.right +',\\''\n                   + myThis[i].fields.title +'\\')\"&gt;&lt;/a&gt;&lt;p style=\"float:left;width:130px;height:80px;\"&gt;&lt;b&gt;'\n                   + myThis[i].fields.title +'&lt;/b&gt; '\n                   + myThis[i].fields.description +'&lt;/p&gt;&lt;/div&gt;'\n</code></pre>\n\n<p>You can spot the \\' in the third field of showThis.</p>\n\n<p>The double quote didn't work!</p>\n\n<p>It is clear why, but it is also clear why we should stick on single quotes...\n.. I guess..</p>\n\n<p>This case is a very simple HTML embedding, the error was generated\nby a simple copy/paste from a 'double quoted' JavaScript code.</p>\n\n<p>So to answer the question:</p>\n\n<p>Try to use single quotes while within HTML. It might save a couple of debug issues...</p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8511644,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/8511644",
    "title": null,
    "body": "<p>I strongly prefer to keep my JavaScript out of my HTML markup as much as possible. If I'm using <code>&lt;a&gt;</code> as click event handlers then I'd recommend using <code>&lt;a class=\"trigger\" href=\"#\"&gt;Click me!&lt;/a&gt;</code>.</p>\n\n<pre><code>$('.trigger').click(function (e) {\n    e.preventDefault();\n    // Do stuff...\n});\n</code></pre>\n\n<p>It's very important to note that many developers out there believe that using anchor tags for click-event handlers isn't good. They'd prefer you to use a <code>&lt;span&gt;</code> or <code>&lt;div&gt;</code> with some CSS that adds <code>cursor: pointer;</code> to it. This is a matter if much debate.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13616090,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/13616090",
    "title": null,
    "body": "<p>You can log window.location and see all the options, for just the URL use:</p>\n\n<pre><code>window.location.origin\n</code></pre>\n\n<p>for the whole path use:</p>\n\n<pre><code>window.location.href\n</code></pre>\n\n<p>there's also location.<em>_</em>_</p>\n\n<pre><code>.host\n.hostname\n.protocol\n.pathname\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 764497,
      "name": "dacopenhagen",
      "reputation": 944
    }
  },
  {
    "soID": 35986765,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/35986765",
    "title": null,
    "body": "<p>To Get Boolean values from string or number Here is good solution:</p>\n\n<pre><code>var boolValue = Boolean(Number('0'));\n\nvar boolValue = Boolean(Number('1'));\n</code></pre>\n\n<p>First will return <code>false</code> and second will return <code>true</code>.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16631896,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/16631896",
    "title": null,
    "body": "<p>To get the URL of the parent window from within an iframe:</p>\n\n<pre><code>$(window.parent.location).attr('href');\n</code></pre>\n\n<p>NB: only works on same domain</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 789658,
      "name": "Costa",
      "reputation": 4039
    }
  },
  {
    "soID": 40432585,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/40432585",
    "title": null,
    "body": "<p>There's no <code>isEmpty()</code> method, you have to check for the type and the length:</p>\n\n<pre><code>if (typeof test === 'string' &amp;&amp; test.length === 0){\n  ...\n</code></pre>\n\n<p>The type check is needed in order to avoid runtime errors when <code>test</code> is <code>undefined</code> or <code>null</code>.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 791694,
      "name": "Agustí Sánchez",
      "reputation": 3133
    }
  },
  {
    "soID": 14613849,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/14613849",
    "title": null,
    "body": "<pre><code>http://www.refulz.com:8082/index.php#tab2?foo=789\n\nProperty    Result\n------------------------------------------\nhost        www.refulz.com:8082\nhostname    www.refulz.com\nport        8082\nprotocol    http:\npathname    index.php\nhref        http://www.refulz.com:8082/index.php#tab2\nhash        #tab2\nsearch      ?foo=789\n\nvar x = $(location).attr('&lt;property&gt;');\n</code></pre>\n\n<p><strong>This will work only if you have jQuery. For example:</strong></p>\n\n<pre><code>&lt;html&gt;\n&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js\"&gt;\n&lt;/script&gt;\n  $(location).attr('href');      // http://www.refulz.com:8082/index.php#tab2\n  $(location).attr('pathname');  // index.php\n&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n",
    "score": 387,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 794822,
      "name": "rizon",
      "reputation": 5979
    }
  },
  {
    "soID": 33273256,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/33273256",
    "title": null,
    "body": "<p>Only when you can use <a href=\"https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015\" rel=\"nofollow\">ECMAScript 6</a> or <a href=\"https://en.wikipedia.org/wiki/Source-to-source_compiler\" rel=\"nofollow\">transpilers</a>.</p>\n\n<p>Features:</p>\n\n<ul>\n<li>Won't trigger getter/setter while copying.</li>\n<li>Preserves getter/setter.</li>\n<li>Preserves prototype informations.</li>\n<li>Works with both <strong>object-literal</strong> and <strong>functional</strong> <a href=\"https://en.wikipedia.org/wiki/Object-oriented_programming\" rel=\"nofollow\">OO</a> writing styles.</li>\n</ul>\n\n<p>Code:</p>\n\n<pre><code>function clone(target, source){\n\n    for(let key in source){\n\n        // Use getOwnPropertyDescriptor instead of source[key] to prevent from trigering setter/getter.\n        let descriptor = Object.getOwnPropertyDescriptor(source, key);\n        if(descriptor.value instanceof String){\n            target[key] = new String(descriptor.value);\n        }\n        else if(descriptor.value instanceof Array){\n            target[key] = clone([], descriptor.value);\n        }\n        else if(descriptor.value instanceof Object){\n            let prototype = Reflect.getPrototypeOf(descriptor.value);\n            let cloneObject = clone({}, descriptor.value);\n            Reflect.setPrototypeOf(cloneObject, prototype);\n            target[key] = cloneObject;\n        }\n        else {\n            Object.defineProperty(target, key, descriptor);\n        }\n    }\n    let prototype = Reflect.getPrototypeOf(source);\n    Reflect.setPrototypeOf(target, prototype);\n    return target;\n}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11196124,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/11196124",
    "title": null,
    "body": "<p>When I've got several faux-links, I prefer to give them a class of 'no-link'.</p>\n\n<p>Then in jQuery, I add the following code:</p>\n\n<pre><code>$(function(){\n   $('.no-link').click(function(e){\n       e.preventDefault();\n   });\n});\n</code></pre>\n\n<p>And for the HTML, the link is simply</p>\n\n<pre><code>&lt;a href=\"/\" class=\"no-link\"&gt;Faux-Link&lt;/a&gt;\n</code></pre>\n\n<p>I don't like using Hash-Tags unless they're used for anchors, and I only do the above when I've got more than two faux-links, otherwise I go with javascript:void(0).</p>\n\n<pre><code>&lt;a href=\"javascript:void(0)\" class=\"no-link\"&gt;Faux-Link&lt;/a&gt;\n</code></pre>\n\n<p>Typically, I like to just avoid using a link at all and just wrap something around in a span and use that as a way to active some JavaScript code, like a pop-up or a content-reveal.</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17439572,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/17439572",
    "title": null,
    "body": "<p>I prefer to use not blank test instead of blank </p>\n\n<pre><code>function isNotBlank(str) {\n   return (str &amp;&amp; /^\\s*$/.test(str));\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 806076,
      "name": "Mubashar Ahmad",
      "reputation": 6011
    }
  },
  {
    "soID": 36577358,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/36577358",
    "title": null,
    "body": "<p>In jstl we can access current url path using <code>pageContext.request.contextPath</code>, If you want to do a ajax call,</p>\n\n<pre><code>  url = \"${pageContext.request.contextPath}\" + \"/controller/path\"\n</code></pre>\n\n<p>Ex: in the page <code>http://stackoverflow.com/questions/406192</code> this will give <code>http://stackoverflow.com/controller/path</code></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 814025,
      "name": "Maleen Abewardana",
      "reputation": 3176
    }
  },
  {
    "soID": 24053745,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/24053745",
    "title": null,
    "body": "<p>If your JS source is:</p>\n\n<pre><code>elem.innerHTML=\"&lt;img src='smily' alt='It\\'s a Smily' style='width:50px'&gt;\";\n</code></pre>\n\n<p>The HTML source will be: </p>\n\n<pre><code>&lt;img src=\"smiley\" alt=\"It's a Smiley\" style=\"width:50px\"&gt;\n</code></pre>\n\n<p>or for HTML5</p>\n\n<pre><code>&lt;img src=smiley alt=\"It's a Smiley\" style=width:50px&gt;\n</code></pre>\n\n<p>JS allows arrays like that:</p>\n\n<pre><code>var arr=['this','that'];\n</code></pre>\n\n<p>But if you stringify it, it will be for compatibly reason:</p>\n\n<pre><code>JSON=[\"this\",\"that\"]\n</code></pre>\n\n<p>I'm sure this takes some time.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9709935,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/9709935",
    "title": null,
    "body": "<p>I've found that using '1' and an empty value '' for boolean values works far more predictably than 'true' or 'false' string values... specifically with html forms since uninitialized/empty values in Dom elements will consistently evaluate to false whereas <em>any</em> value within them evaluates to true. </p>\n\n<p>For instance:</p>\n\n<pre><code>&lt;input type='button' onclick='this.value = tog(this.value);' /&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n\n    function tog(off) {\n        if(off) {\n            alert('true, toggle to false');\n            return '';\n        } else {\n            alert('false, toggle to true');\n            return '1';\n        }\n    }   \n&lt;/script&gt;\n</code></pre>\n\n<p>Just seemed like an easier road, so far it's been very consistent/easy... perhaps someone can determine a way to break this?</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15249947,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/15249947",
    "title": null,
    "body": "<p>We just had to work around this problem and tested three different solution approaches.</p>\n\n<ol>\n<li>does cancel the request as suggested by @meouw</li>\n<li>execute all request but only processes the result of the last submit</li>\n<li>prevents new requests as long as another one is still pending</li>\n</ol>\n\n<pre class=\"lang-js prettyprint-override\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n    &lt;title&gt;AJAX Test&lt;/title&gt;\n    &lt;script src=\"http://code.jquery.com/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        var Ajax1 = {\n            call: function () {\n                if (typeof this.xhr !== 'undefined')\n                    this.xhr.abort();\n                this.xhr = $.ajax({\n                    url: 'your/long/running/request/path',\n                    type: 'GET',\n                    success: function (data) {\n                        //process response\n                    }\n                });\n            }\n        };\n        var Ajax2 = {\n            counter: 0,\n            call: function () {\n                var self = this,\n                    seq = ++this.counter;\n                $.ajax({\n                    url: 'your/long/running/request/path',\n                    type: 'GET',\n                    success: function (data) {\n                        if (seq === self.counter) {\n                            //process response\n                        }\n                    }\n                });\n            }\n        };\n        var Ajax3 = {\n            active: false,\n            call: function () {\n                if (this.active === false) {\n                    this.active = true;\n                    var self = this;\n                    $.ajax({\n                        url: 'your/long/running/request/path',\n                        type: 'GET',\n                        success: function (data) {\n                            //process response\n                        },\n                        complete: function () {\n                            self.active = false;\n                        }\n                    });\n                }\n            }\n        };\n        $(function () {\n            $('#button').click(function (e) {\n                Ajax3.call();\n            });\n        })\n    &lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;input id=\"button\" type=\"button\" value=\"click\" /&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n\n<p>In our case we decided to use approach #3 as it produces less load for the server. But I am not 100% sure if jQuery guarantees the call of the .complete()-method, this could produce a deadlock situation. In our tests we could not reproduce such a situation.</p>\n",
    "score": 29,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 830067,
      "name": "oyophant",
      "reputation": 601
    }
  },
  {
    "soID": 6602427,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/6602427",
    "title": null,
    "body": "<p>This works for me, and I am using <code>show()</code> and <code>hide()</code> to make my div hidden/visible:</p>\n\n<pre><code>if( $(this).css('display') == 'none' ){\n    /* your code goes here */\n} else {\n    /* alternate logic   */\n}\n</code></pre>\n",
    "score": 142,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 832338,
      "name": "Abiy",
      "reputation": 1445
    }
  },
  {
    "soID": 24141571,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/24141571",
    "title": null,
    "body": "<p>Standard HTML:</p>\n\n<p>Surround the menus by a <code>&lt;label&gt;</code> and fetch focus state changes.</p>\n\n<p><a href=\"http://jsfiddle.net/bK3gL/\" rel=\"nofollow\">http://jsfiddle.net/bK3gL/</a></p>\n\n<p>Plus: you can unfold the menu by <kbd>Tab</kbd>.</p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13890739,
    "parentID": 332872,
    "url": "https://stackoverflow.com/q/13890739",
    "title": null,
    "body": "<p>Personally, I find that many APIs want to replace \" \" with \"+\" so I use the following:</p>\n\n<pre><code>encodeURIComponent(value).replace(/%20/g,'+')\n</code></pre>\n\n<p><code>escape</code> is implemented differently in different browsers and <code>encodeURI</code> doesn't encode most of the characters that are functional in a URI (like # and even /) -- it's made to be used on a full URI/URL without breaking it.</p>\n\n<p>EDIT: You use encodeURIComponent for the <strong>values</strong> of the query string (not fields/value names and definitely not the entire URL).  If you do it any other way it won't encode characters like =, ?, &amp;, possibly leaving your query string exposed.</p>\n",
    "score": 55,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 845413,
      "name": "Ryan Taylor",
      "reputation": 2690
    }
  },
  {
    "soID": 8517735,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/8517735",
    "title": null,
    "body": "<p>What I understand from your words is that you want to create a link just to run JavaScript code.</p>\n\n<p>Then you should consider that there are people who blocks JavaScript out there in their browsers.</p>\n\n<p>So if you are really going to use that link only for running a JavaScript function then you should add it dynamically so it won't be even seen if the users didn't enable their JavaScript in the browser and you are using that link just to trigger a JavaScript function which makes no sense to use a link like that when JavaScript is disabled in the browser.</p>\n\n<p>For that reason neither of them is good when JavaScript is disabled.</p>\n\n<p>Aand if JavaScript is enabled and you only want to use that link to invoke a JavaScript function then</p>\n\n<pre><code>&lt;a href=\"javascript:void(0)\" onclick=\"myJsFunc();\"&gt;Link&lt;/a&gt;\n</code></pre>\n\n<p>is far better way than using</p>\n\n<pre><code>&lt;a href=\"#\" onclick=\"myJsFunc();\"&gt;Link&lt;/a&gt;\n</code></pre>\n\n<p>because href=\"#\" is going to cause the page to do actions that are not needed.</p>\n\n<p>Also, another reason why <code>&lt;a href=\"javascript:void(0)\" onclick=\"myJsFunc();\"&gt;Link&lt;/a&gt;</code> is better than <code>&lt;a href=\"#\" onclick=\"myJsFunc();\"&gt;Link&lt;/a&gt;</code> is that JavaScript is used as the default scripting language for most of the browsers. As an example Internet&nbsp;Explorer, uses an onclick attribute to define the type of scripting language that would be used. Unless another good scripting language pops up, JavaScript will be used by Internet&nbsp;Explorer as the default too, but if another scripting language used <code>javascript:</code>, it would let Internet&nbsp;Explorer to understand which scripting language is being used.</p>\n\n<p>Considering this, I would prefer using and exercising on</p>\n\n<pre><code>&lt;a href=\"javascript:void(0)\" onclick=\"myJsFunc();\"&gt;Link&lt;/a&gt;\n</code></pre>\n\n<p>enough to make it a habit and to be more user friendly please add that kind of links within the JavaScript code:</p>\n\n<pre><code>$(document).ready(function(){\n    $(\".blabla\").append('&lt;a href=\"javascript:void(0)\" onclick=\"myJsFunc();\"&gt;Link&lt;/a&gt;')\n});\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33386880,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/33386880",
    "title": null,
    "body": "<p><code>concat()</code>, of course, can be used with 2 dimensional arrays as well. No looping required.</p>\n\n<blockquote>\n  <p>var a = [\n      [1, 2],\n      [3, 4] ];</p>\n  \n  <p>var b = [\n      [\"a\", \"b\"],\n      [\"c\", \"d\"] ];</p>\n  \n  <p>b = b.concat(a); </p>\n  \n  <p>alert(b[2][1]); // result 2</p>\n</blockquote>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 29341730,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/29341730",
    "title": null,
    "body": "<p>For <a href=\"https://lodash.com/docs#now\">lodash</a> and <a href=\"http://underscorejs.org/#now\">underscore</a> users, use <code>_.now</code>.</p>\n\n<pre><code>var timestamp = _.now(); // in milliseconds\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 863380,
      "name": "Muhammad Reda",
      "reputation": 17355
    }
  },
  {
    "soID": 10033879,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/10033879",
    "title": null,
    "body": "<p>Like @Shadow2531 said, you can't just convert it directly. I'd also suggest that you consider string inputs besides \"true\" and \"false\" that are 'truthy' and 'falsey' if your code is going to be reused/used by others. This is what I use:</p>\n\n<pre><code>function parseBoolean(string) {\n  switch (String(string).toLowerCase()) {\n    case \"true\":\n    case \"1\":\n    case \"yes\":\n    case \"y\":\n      return true;\n    case \"false\":\n    case \"0\":\n    case \"no\":\n    case \"n\":\n      return false;\n    default:\n      //you could throw an error, but 'undefined' seems a more logical reply\n      return undefined;\n  }\n}\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9730961,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/9730961",
    "title": null,
    "body": "<p>I see a lot of answers by people who want to keep using <code>#</code> values for <code>href</code>, hence, here is an answer hopefully satisfying both camps:</p>\n\n<p><strong>A)</strong> I'm happy to have <code>javascript:void(0)</code> as my <code>href</code> value:</p>\n\n<pre><code>&lt;a href=\"javascript:void(0)\" onclick=\"someFunc.call(this)\"&gt;Link Text&lt;/a&gt;\n</code></pre>\n\n<p><strong>B)</strong> I am using jQuery, and want <code>#</code> as my <code>href</code> value:</p>\n\n<pre><code>&lt;a href=\"#\" onclick=\"someFunc.call(this)\"&gt;Link Text&lt;/a&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n    /* Stop page jumping when javascript links are clicked.\n       Only select links where the href value is a #. */\n    $('a[href=\"#\"]').live(\"click\", function(e) {\n         return false; // prevent default click action from happening!\n         e.preventDefault(); // same thing as above\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>Note, if you know links won't be created dynamically, use the <code>click</code> function instead: </p>\n\n<p><code>$('a[href=\"#\"]').click(function(e) {</code></p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 14542479,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/14542479",
    "title": null,
    "body": "<p>My take on this question is that it aims to satisfy three objectives:</p>\n\n<ul>\n<li>Return true/false for truthy and falsey values, but also return true/false for multiple string values that would be truthy or falsey if they were Booleans instead of strings.</li>\n<li>Second, provide a resilient interface so that values other than those specified will not fail, but rather return a default value</li>\n<li>Third, do all this with as little code as possible.</li>\n</ul>\n\n<p>The problem with using JSON is that it fails by causing a Javascript error. This solution is not resilient (though it satisfies 1 and 3):</p>\n\n<pre><code>JSON.parse(\"FALSE\") // fails\n</code></pre>\n\n<p>This solution is not concise enough:</p>\n\n<pre><code>if(value === \"TRUE\" || value === \"yes\" || ...) { return true; }\n</code></pre>\n\n<p>I am working on solving this exact problem for <a href=\"http://typecastjs.org\" rel=\"noreferrer\">Typecast.js</a>. And the best solution to all three objectives is this one:</p>\n\n<pre><code>return /^true$/i.test(v);\n</code></pre>\n\n<p>It works for many cases, does not fail when values like {} are passed in, and is very concise. Also it returns false as the default value rather than undefined or throwing an Error, which is more useful in loosely-typed Javascript development. Bravo to the other answers that suggested it!</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11809755,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/11809755",
    "title": null,
    "body": "<p><a href=\"https://stackoverflow.com/users/26394/eugene-lazutkin\">@EugeneLazutkin</a> gives an example where he <a href=\"https://stackoverflow.com/a/338053/\">names an assigned function to be able to use <code>shortcut()</code></a> as an internal reference to itself. <a href=\"http://ejohn.org/\" rel=\"nofollow noreferrer\">John Resig</a> gives another example - <em>copying a recursive function assigned to another object</em> in his <a href=\"http://ejohn.org/apps/learn/\" rel=\"nofollow noreferrer\">Learning Advanced Javascript</a> tutorial. While assigning functions to properties isn't strictly the question here, I recommend actively trying the tutorial out - run the code by clicking the button in the upper right corner, and double click the code to edit to your liking.</p>\n\n<p>Examples from the tutorial: recursive calls in <code>yell()</code>:</p>\n\n<p><a href=\"http://ejohn.org/apps/learn/#13\" rel=\"nofollow noreferrer\">Tests fail when the original ninja object is removed.</a> (page 13)</p>\n\n<pre><code>var ninja = { \n  yell: function(n){ \n    return n &gt; 0 ? ninja.yell(n-1) + \"a\" : \"hiy\"; \n  } \n}; \nassert( ninja.yell(4) == \"hiyaaaa\", \"A single object isn't too bad, either.\" ); \n\nvar samurai = { yell: ninja.yell }; \nvar ninja = null; \n\ntry { \n  samurai.yell(4); \n} catch(e){ \n  assert( false, \"Uh, this isn't good! Where'd ninja.yell go?\" ); \n}\n</code></pre>\n\n<p><a href=\"http://ejohn.org/apps/learn/#14\" rel=\"nofollow noreferrer\">If you name the function that will be called recursively, the tests will pass.</a> (page 14)</p>\n\n<pre><code>var ninja = { \n  yell: function yell(n){ \n    return n &gt; 0 ? yell(n-1) + \"a\" : \"hiy\"; \n  } \n}; \nassert( ninja.yell(4) == \"hiyaaaa\", \"Works as we would expect it to!\" ); \n\nvar samurai = { yell: ninja.yell }; \nvar ninja = {}; \nassert( samurai.yell(4) == \"hiyaaaa\", \"The method correctly calls itself.\" );\n</code></pre>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 907779,
      "name": "Joel Purra",
      "reputation": 14521
    }
  },
  {
    "soID": 24373219,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/24373219",
    "title": null,
    "body": "<p>Convert file to base64 using |HTML5's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FileReader#readAsDataURL%28%29\">readAsDataURL()</a> or <a href=\"http://scotch.io/quick-tips/js/how-to-encode-and-decode-strings-with-base64-in-javascript\">some base64 encoder</a>. \n<a href=\"http://jsfiddle.net/eliseosoto/JHQnk/\">Fiddle here</a></p>\n\n<pre><code>var reader = new FileReader();\n\n        reader.onload = function(readerEvt) {\n            var binaryString = readerEvt.target.result;\n            document.getElementById(\"base64textarea\").value = btoa(binaryString);\n        };\n\n        reader.readAsBinaryString(file);\n</code></pre>\n\n<p>Then to retrieve:</p>\n\n<pre><code>window.open(\"data:application/octet-stream;base64,\" + base64);\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 913620,
      "name": "tnt-rox",
      "reputation": 3635
    }
  },
  {
    "soID": 19988852,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/19988852",
    "title": null,
    "body": "<p>I think this is all a matter of convenience/preference.</p>\n\n<p>I prefer double quote because it matches to what C# has and this my environment that I normally work on: C# + JS.</p>\n\n<p>Also one possible reason for double quotes over single quotes is this (which I have found in my projects code):\nFrench or some other languages use single quotes a lot (like English actually), so if by some reason you end up rendering strings from server side (which I know is bad practice), then a single quote will render wrongly.</p>\n\n<p>The probability of using double quotes in regular language is low therefore I think it has a better chance of not breaking something.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43996304,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/43996304",
    "title": null,
    "body": "<pre><code>String(true).toLowerCase() == 'true'; // true\nString(\"true\").toLowerCase() == 'true'; // true\nString(\"True\").toLowerCase() == 'true'; // true\nString(\"TRUE\").toLowerCase() == 'true'; // true\n\nString(false).toLowerCase() == 'true'; // false\n</code></pre>\n\n<p>If you are not sure of the input, the above works for boolean and as well any string.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10116207,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/10116207",
    "title": null,
    "body": "<p>One more thing that you might want to consider as a reason for the shift from double quotes to single quotes is the increase in popularity of server side scripts. When using PHP you can pass variables and parse javascript functions using strings and variables in PHP.</p>\n\n<p>If you write a string and use double quotes for your PHP you won't have to escape any of the single quotes and PHP will automatically retrieve the value of the variables for you.</p>\n\n<p>Example:I need to run a javascript function using a variable from my server.</p>\n\n<pre><code>public static function redirectPage( $pageLocation )\n{\n    echo \"&lt;script type='text/javascript'&gt;window.location = '$pageLocation';&lt;/script&gt;\";\n}\n</code></pre>\n\n<p>This saves me a lot of hassle in having to deal with joining strings, and I can effectively call a javascript from PHP. This is only one example, but this may be one of several reasons why programmers are defaulting to single quotes in javascript.</p>\n\n<p><a href=\"http://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.double\">Quote from PHP documents</a>: \"The most important feature of double-quoted strings is the fact that variable names will be expanded. See string parsing for details. \"</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 30929199,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/30929199",
    "title": null,
    "body": "<p>Use <code>Object.create()</code> to get the <code>prototype</code> and support for <code>instanceof</code>, and use a <code>for()</code> loop to get enumerable keys:</p>\n\n<pre><code>function cloneObject(source) {\n    var key,value;\n    var clone = Object.create(source);\n\n    for (key in source) {\n        if (source.hasOwnProperty(key) === true) {\n            value = source[key];\n\n            if (value!==null &amp;&amp; typeof value===\"object\") {\n                clone[key] = cloneObject(value);\n            } else {\n                clone[key] = value;\n            }\n        }\n    }\n\n    return clone;\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8758614,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/8758614",
    "title": null,
    "body": "<p>With <a href=\"http://en.wikipedia.org/wiki/HTML5\" rel=\"noreferrer\">HTML5</a> you can make file uploads with Ajax and jQuery. Not only that, you can do file validations (name, size, and MIME type) or handle the progress event with the HTML5 progress tag (or a div). Recently I had to make a file uploader, but I didn't want to use <a href=\"http://en.wikipedia.org/wiki/Adobe_Flash\" rel=\"noreferrer\">Flash</a> nor Iframes or plugins and after some research I came up with the solution.</p>\n\n<p>The HTML:</p>\n\n<pre><code>&lt;form enctype=\"multipart/form-data\"&gt;\n    &lt;input name=\"file\" type=\"file\" /&gt;\n    &lt;input type=\"button\" value=\"Upload\" /&gt;\n&lt;/form&gt;\n&lt;progress&gt;&lt;/progress&gt;\n</code></pre>\n\n<p>First, you can do some validation if you want. For example, in the onChange event of the file:</p>\n\n<pre><code>$(':file').on('change', function() {\n    var file = this.files[0];\n    if (file.size &gt; 1024) {\n        alert('max upload size is 1k')\n    }\n\n    // Also see .name, .type\n});\n</code></pre>\n\n<p>Now the Ajax submit with the button's click:</p>\n\n<pre><code>$(':button').on('click', function() {\n    $.ajax({\n        // Your server script to process the upload\n        url: 'upload.php',\n        type: 'POST',\n\n        // Form data\n        data: new FormData($('form')[0]),\n\n        // Tell jQuery not to process data or worry about content-type\n        // You *must* include these options!\n        cache: false,\n        contentType: false,\n        processData: false,\n\n        // Custom XMLHttpRequest\n        xhr: function() {\n            var myXhr = $.ajaxSettings.xhr();\n            if (myXhr.upload) {\n                // For handling the progress of the upload\n                myXhr.upload.addEventListener('progress', function(e) {\n                    if (e.lengthComputable) {\n                        $('progress').attr({\n                            value: e.loaded,\n                            max: e.total,\n                        });\n                    }\n                } , false);\n            }\n            return myXhr;\n        },\n    });\n});\n</code></pre>\n\n<p>As you can see, with HTML5 (and some research) file uploading not only becomes possible but super easy. Try it with <a href=\"http://en.wikipedia.org/wiki/Google_Chrome\" rel=\"noreferrer\">Google Chrome</a> as some of the HTML5 components of the examples aren't available in every browser.</p>\n",
    "score": 2152,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 931340,
      "name": "olanod",
      "reputation": 23185
    }
  },
  {
    "soID": 7490132,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/7490132",
    "title": null,
    "body": "<pre><code>$(document).click(function() {\n    $(\".overlay-window\").hide();\n});\n$(\".overlay-window\").click(function() {\n    return false;\n});\n</code></pre>\n\n<p>If you click on the document, hide a given element, unless you click on that same element.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12893927,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/12893927",
    "title": null,
    "body": "<p>Another difference that is not mentioned in the other answers is that if you use the anonymous function</p>\n\n<pre><code>var functionOne = function() {\n    // Some code\n};\n</code></pre>\n\n<p>and use that as a constructor as in</p>\n\n<pre><code>var one = new functionOne();\n</code></pre>\n\n<p>then <code>one.constructor.name</code> will not be defined. <code>Function.name</code> is non-standard but is supported by Firefox, Chrome, other Webkit-derived browsers and IE 9+.</p>\n\n<p>With </p>\n\n<pre><code>function functionTwo() {\n    // Some code\n}\ntwo = new functionTwo();\n</code></pre>\n\n<p>it is possible to retrieve the name of the constructor as a string with <code>two.constructor.name</code>.</p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 936832,
      "name": "Ingo Kegel",
      "reputation": 27450
    }
  },
  {
    "soID": 7573471,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/7573471",
    "title": null,
    "body": "<pre><code>function returnBoolean(str){\n\n    str=str.toString().toLowerCase();\n\n    if(str=='true' || str=='1' || str=='yes' || str=='y' || str=='on' || str=='+'){\n        return(true);\n    }\n    else if(str=='false' || str=='0' || str=='no' || str=='n' || str=='off' || str=='-'){\n        return(false);\n    }else{\n        return(undefined);\n    }\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43852081,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/43852081",
    "title": null,
    "body": "<h1>One Liner</h1>\n\n<p>We just need to account for the \"false\" string since any other string (including \"true\") is already <code>true</code>.</p>\n\n<pre><code>function b(v){ return v===\"false\" ? false : !!v; }\n</code></pre>\n\n<p><strong>Test</strong></p>\n\n<pre><code>b(true)    //true\nb('true')  //true\nb(false)   //false\nb('false') //false\n</code></pre>\n\n<hr>\n\n<h3>A more exaustive version</h3>\n\n<pre><code>function bool(v){ return v===\"false\" || v===\"null\" || v===\"NaN\" || v===\"undefined\" || v===\"0\" ? false : !!v; }\n</code></pre>\n\n<p><strong>Test</strong></p>\n\n<pre><code>bool(true)        //true\nbool(\"true\")      //true\nbool(1)           //true\nbool(\"1\")         //true\nbool(\"hello\")     //true\n\nbool(false)       //false\nbool(\"false\")     //false\nbool(0)           //false\nbool(\"0\")         //false\nbool(null)        //false\nbool(\"null\")      //false\nbool(NaN)         //false\nbool(\"NaN\")       //false\nbool(undefined)   //false\nbool(\"undefined\") //false\nbool(\"\")          //false\n\nbool([])          //true\nbool({})          //true\nbool(alert)       //true\nbool(window)      //true\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8528329,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/8528329",
    "title": null,
    "body": "<p>I would use:</p>\n\n<pre><code>&lt;a href=\"#\" onclick=\"myJsFunc();return false;\"&gt;Link&lt;/a&gt;\n</code></pre>\n\n<p><strong>Reasons:</strong></p>\n\n<ol>\n<li>This makes the <code>href</code> simple, search engines need it. If you use anything else ( such as a string), it may cause a <code>404 not found</code> error.</li>\n<li>When mouse hovers over the link, it doesn't show that it is a script.</li>\n<li>By using <code>return false;</code>, the page doesn't jump to the top or break the <code>back</code> button.</li>\n</ol>\n",
    "score": 24,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21824488,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/21824488",
    "title": null,
    "body": "<p>A lot of the existing answers are similar, but most ignore the fact that the given argument could also be an object.</p>\n\n<p>Here is something I just whipped up:</p>\n\n<pre><code>Utils.parseBoolean = function(val){\n    if (typeof val === 'string' || val instanceof String){\n        return /true/i.test(val);\n    } else if (typeof val === 'boolean' || val instanceof Boolean){\n        return new Boolean(val).valueOf();\n    } else if (typeof val === 'number' || val instanceof Number){\n        return new Number(val).valueOf() !== 0;\n    }\n    return false;\n};\n</code></pre>\n\n<p>...and the unit test for it</p>\n\n<pre><code>Utils.Tests = function(){\n    window.console.log('running unit tests');\n\n    var booleanTests = [\n        ['true', true],\n        ['false', false],\n        ['True', true],\n        ['False', false],\n        [, false],\n        [true, true],\n        [false, false],\n        ['gibberish', false],\n        [0, false],\n        [1, true]\n    ];\n\n    for (var i = 0; i &lt; booleanTests.length; i++){\n        var lhs = Utils.parseBoolean(booleanTests[i][0]);\n        var rhs = booleanTests[i][1];\n        var result = lhs === rhs;\n\n        if (result){\n            console.log('Utils.parseBoolean('+booleanTests[i][0]+') === '+booleanTests[i][1]+'\\t : \\tpass');\n        } else {\n            console.log('Utils.parseBoolean('+booleanTests[i][0]+') === '+booleanTests[i][1]+'\\t : \\tfail');\n        }\n    }\n};\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 7516741,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/7516741",
    "title": null,
    "body": "<p>Hands down the easiest way (assuming you string will be 'true' or 'false') is:</p>\n\n<pre><code>var z = 'true';\nvar y = 'false';\nvar b = (z === 'true'); // will evaluate to true\nvar c = (y === 'true'); // will evaluate to false\n</code></pre>\n\n<p><em><strong>Always</em></strong> use the === operator instead of the == operator for these types of conversions!</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12190371,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/12190371",
    "title": null,
    "body": "<p>I think it's worth mentioning that push can be called with multiple arguments, which will be appended to the array in order. For example:</p>\n\n<pre><code>var arr = ['first'];\narr.push('second', 'third');\nconsole.log(arr); // ['first', 'second', 'third']\n</code></pre>\n\n<p>As a result of this you can use push.apply to append an array to another array like so:</p>\n\n<pre><code>arr.push.apply(arr, ['forth', 'fifth']);\nconsole.log(arr); // ['first', 'second', 'third', 'forth', 'fifth']\n</code></pre>\n\n<p><a href=\"http://es5.github.com/\" rel=\"noreferrer\">Annotated ES5</a> has more info on exactly what <a href=\"http://es5.github.com/#x15.4.4.7\" rel=\"noreferrer\">push</a> and <a href=\"http://es5.github.com/#x15.3.4.3\" rel=\"noreferrer\">apply</a> do.</p>\n\n<p>2016 update: with <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator\" rel=\"noreferrer\">spread</a>, you don't need that <code>apply</code> anymore, like:</p>\n\n<pre><code>arr.push(...['fourth', 'fifth']);\nconsole.log(arr) // ['first', 'second', 'third', 'fourth', 'fifth']\n</code></pre>\n",
    "score": 232,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 7536475,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/7536475",
    "title": null,
    "body": "<p>Using just <code>#</code> makes some funny movements, so I would recommend to use <code>#self</code> if you would like to save on typing efforts of <code>JavaScript bla, bla,</code>.</p>\n",
    "score": 68,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9584414,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/9584414",
    "title": null,
    "body": "<p>Here is my code:</p>\n\n<pre><code>// Listen to every click\n$('html').click(function(event) {\n    if ( $('#mypopupmenu').is(':visible') ) {\n        if (event.target.id != 'click_this_to_show_mypopupmenu') {\n            $('#mypopupmenu').hide();\n        }\n    }\n});\n\n// Listen to selector's clicks\n$('#click_this_to_show_mypopupmenu').click(function() {\n\n  // If the menu is visible, and you clicked the selector again we need to hide\n  if ( $('#mypopupmenu').is(':visible') {\n      $('#mypopupmenu').hide();\n      return true;\n  }\n\n  // Else we need to show the popup menu\n  $('#mypopupmenu').show();\n});\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23261705,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/23261705",
    "title": null,
    "body": "<p>sometime I need it in objects for xmlhttp calls, so I do like this.</p>\n\n<pre><code>timestamp : parseInt(new Date().getTime()/1000, 10)\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 973699,
      "name": "DevC",
      "reputation": 2065
    }
  },
  {
    "soID": 29769613,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/29769613",
    "title": null,
    "body": "<p>For jQuery 1.6+</p>\n\n<pre><code>$('.myCheckbox').prop('checked', true);\n$('.myCheckbox').prop('checked', false);\n</code></pre>\n\n<p>For jQuery 1.5.x and below</p>\n\n<pre><code>$('.myCheckbox').attr('checked', true);\n$('.myCheckbox').attr('checked', false);\n</code></pre>\n\n<p>To check,</p>\n\n<pre><code>$('.myCheckbox').removeAttr('checked');\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 975199,
      "name": "logan",
      "reputation": 2503
    }
  },
  {
    "soID": 23465314,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/23465314",
    "title": null,
    "body": "<p>An interesting pictorial representation of the equality comparison between <code>==</code> and <code>===</code>.  </p>\n\n<p><strong>Source: <a href=\"http://dorey.github.io/JavaScript-Equality-Table/\">http://dorey.github.io/JavaScript-Equality-Table/</a></strong></p>\n\n<p><br/></p>\n\n<h1>var1===var2</h1>\n\n<blockquote>\n  <p><strong><em>When using three equals signs for JavaScript equality testing,\n  everything is as is. Nothing gets converted before being evaluated.</em></strong></p>\n</blockquote>\n\n<p><img src=\"https://i.stack.imgur.com/62vxI.png\" alt=\"Equality evaluation of === in JS\"></p>\n\n<p><br /></p>\n\n<h1>var1==var2</h1>\n\n<blockquote>\n  <p><strong><em>When using two equals signs for JavaScript equality testing, some\n  funky conversions take place.</em></strong></p>\n</blockquote>\n\n<p><img src=\"https://i.stack.imgur.com/35MpY.png\" alt=\"Equality evaluation of == in JS\"></p>\n\n<p><br /></p>\n\n<blockquote>\n  <p><strong><em>Moral of the story: Use three equals unless you fully understand the\n  conversions that take place for two-equals.</em></strong></p>\n</blockquote>\n",
    "score": 417,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 979621,
      "name": "SNag",
      "reputation": 8063
    }
  },
  {
    "soID": 31281896,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/31281896",
    "title": null,
    "body": "<p>We implemented a solution, partly based off a comment from a user above, which works perfectly for us. We use it to hide a search box / results when clicking outside those elements, excluding the element that originally.</p>\n\n<pre><code>// HIDE SEARCH BOX IF CLICKING OUTSIDE\n$(document).click(function(event){ \n    // IF NOT CLICKING THE SEARCH BOX OR ITS CONTENTS OR SEARCH ICON \n    if ($(\"#search-holder\").is(\":visible\") &amp;&amp; !$(event.target).is(\"#search-holder *, #search\")) {\n        $(\"#search-holder\").fadeOut('fast');\n        $(\"#search\").removeClass('active');\n    }\n});\n</code></pre>\n\n<p>It checks if the search box is already visible first also, and in our case, it's also removing an active class on the hide/show search button.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11226279,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/11226279",
    "title": null,
    "body": "<pre><code>function inArray(elem,array)\n{\n    var len = array.length;\n    for(var i = 0 ; i &lt; len;i++)\n    {\n        if(array[i] == elem){return i;}\n    }\n    return -1;\n} \n</code></pre>\n\n<p>Returns array index if found, or -1 if not found</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 983969,
      "name": "LmC",
      "reputation": 2107
    }
  },
  {
    "soID": 12037917,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/12037917",
    "title": null,
    "body": "<p><code>Boolean.parse()</code> does exist in some browser implementations.  It's definitely not universal, so if that's something that you need than you shouldn't use this method.  But in Chrome, for example (I'm using v21) it works just fine and as one would expect.  </p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 38856418,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/38856418",
    "title": null,
    "body": "<p><strong>Why <code>==</code> is so unpredictable?</strong></p>\n\n<p>What do you get when you compare an empty string <code>\"\"</code> with the number zero <code>0</code>?</p>\n\n<p><code>true</code></p>\n\n<p>Yep, that's right according to <code>==</code> an empty string and the number zero are the same time.</p>\n\n<p>And it doesn't end there, here's another one:</p>\n\n<pre><code>'0' == false // true\n</code></pre>\n\n<p><strong>Things get really weird with arrays.</strong></p>\n\n<pre><code>[1] == true // true\n[] == false // true\n[[]] == false // true\n[0] == false // true\n</code></pre>\n\n<p><strong>Then weirder with strings</strong></p>\n\n<pre><code>[1,2,3] == '1,2,3' // true - REALLY?!\n'\\r\\n\\t' == 0 // true - Come on!\n</code></pre>\n\n<p>It get's worse:</p>\n\n<p><strong>When is equal not equal?</strong></p>\n\n<pre><code>let a = ''  // empty string\nlet b = 0   // zero\nlet c = '0' // zero string\n\na == b // true - ok... \nb == c // true - so far so good...\na == c // **FALSE** - Plot twist!\n</code></pre>\n\n<p>And this is just the crazy stuff you get with primitives.</p>\n\n<p>It's a whole new level of crazy when you use <code>==</code> with objects.</p>\n\n<p>At this point your probably wondering...</p>\n\n<p><strong>Why does this happen?</strong></p>\n\n<p>Well it's because unlike \"triple equals\" (<code>===</code>) which just checks if two values are the same.</p>\n\n<p><code>==</code> does a <strong><em>whole bunch of other stuff</em></strong>.</p>\n\n<p>It has special handling for functions, special handling for nulls, undefined, strings, you name it.</p>\n\n<p>It get's pretty wacky.</p>\n\n<p>In fact, if you tried to write a function that does what <code>==</code> does it would look something like this:</p>\n\n<pre><code>function isEqual(x, y) { // if `==` were a function\n    if(typeof y === typeof x) return y === x;\n\n    // treat null and undefined the same\n    var xIsNothing = (y === undefined) || (y === null);\n    var yIsNothing = (x === undefined) || (x === null);\n\n    if(xIsNothing || yIsNothing) return (xIsNothing &amp;&amp; yIsNothing);\n\n    if(typeof y === \"function\" || typeof x === \"function\") {\n        // if either value is a string \n        // convert the function into a string and compare\n        if(typeof x === \"string\") {\n            return x === y.toString();\n        } else if(typeof y === \"string\") {\n            return x.toString() === y;\n        } \n        return false;\n    }\n\n    if(typeof x === \"object\") x = toPrimitive(x);\n    if(typeof y === \"object\") y = toPrimitive(y);\n    if(typeof y === typeof x) return y === x;\n\n    // convert x and y into numbers if they are not already use the \"+\" trick\n    if(typeof x !== \"number\") x = +x;\n    if(typeof y !== \"number\") y = +y;\n\n    // actually the real `==` is even more complicated than this, especially in ES6\n    return x === y;\n}\n\nfunction toPrimitive(obj) {\n    var value = obj.valueOf();\n    if(obj !== value) return value;\n    return obj.toString();\n}\n</code></pre>\n\n<p><strong>So what does this mean?</strong></p>\n\n<p>It means <code>==</code> is complicated.</p>\n\n<p>Because it's complicated it's hard to know what's going to happen when you use it.</p>\n\n<p>Which means you could end up with bugs.</p>\n\n<p><strong>So the moral of the story is...</strong></p>\n\n<p>Make your life less complicated.</p>\n\n<p>Use <code>===</code> instead of <code>==</code>.</p>\n\n<p>The End.</p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 984780,
      "name": "Luis Perez",
      "reputation": 18389
    }
  },
  {
    "soID": 30502256,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/30502256",
    "title": null,
    "body": "<p>Just call xhr.<strong>abort()</strong> whether it's jquery ajax object or native XMLHTTPRequest object.</p>\n\n<p>example:</p>\n\n<pre><code>//jQuery ajax\n$(document).ready(\n    var xhr = $.get('/server');\n    setTimeout(function(){xhr.abort();}, 2000);\n);\n\n//native XMLHTTPRequest\nvar xhr = new XMLHttpRequest();\nxhr.open('GET','/server',true);\nxhr.send();\nsetTimeout(function(){xhr.abort();}, 2000);\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 988089,
      "name": "cuixiping",
      "reputation": 5537
    }
  },
  {
    "soID": 10720438,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/10720438",
    "title": null,
    "body": "<p>One can simply use the <code>hidden</code> or <code>visible</code> attribute, like:</p>\n\n<pre><code>$('element:hidden')\n$('element:visible')\n</code></pre>\n\n<p>Or you can simplify the same with <em>is</em> as follows.</p>\n\n<pre><code>$(element).is(\":visible\")\n</code></pre>\n",
    "score": 88,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 995113,
      "name": "ScoRpion",
      "reputation": 5954
    }
  },
  {
    "soID": 28450732,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/28450732",
    "title": null,
    "body": "<p>When using CoffeeScript I use double quotes. I agree that you should pick either one and stick to it. CoffeeScript gives you interpolation when using the double quotes.</p>\n\n<pre><code>\"This is my #{name}\"\n</code></pre>\n\n<p>ES6 is using back ticks (`) for template strings. Which probably has a good reason, but when coding it can be cumbersome to change the string literals character from quotes or double quotes to back ticks in order to get the interpolation feature. CoffeeScript might not be perfect, but using the same string literals character everywhere (double quotes) and always be able to interpolate is a nice feature.</p>\n\n<pre><code>`This is my ${name}`\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8560317,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/8560317",
    "title": null,
    "body": "<p><strong><em>window.location</em></strong> will give you the current <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"nofollow\">URL</a>, and you can extract whatever you want from it...</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1000768,
      "name": "ZMR BINU",
      "reputation": 97
    }
  },
  {
    "soID": 30899851,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/30899851",
    "title": null,
    "body": "<p>there is no reliable way to do it, and I would not even try it, once the request is on the go; the <em>only</em> way to react reasonably is to <em>ignore</em> the response.</p>\n\n<p>in most cases, it may happen in situations like: a user clicks too often on a button triggering many consecutive XHR, here you have many options, either block the button till XHR is returned, or dont even trigger new XHR while another is running hinting the user to lean back - or discard any pending XHR response but the recent.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1005652,
      "name": "comeGetSome",
      "reputation": 1328
    }
  },
  {
    "soID": 7886844,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/7886844",
    "title": null,
    "body": "<p>Here is code for checked and unchecked with a button:</p>\n\n<pre><code>var set=1;\nvar unset=0;\njQuery( function() {\n    $( '.checkAll' ).live('click', function() {\n        $( '.cb-element' ).each(function () {\n            if(set==1){ $( '.cb-element' ).attr('checked', true) unset=0; }\n            if(set==0){ $( '.cb-element' ).attr('checked', false); unset=1; }\n        });\n        set=unset;\n    });\n});\n</code></pre>\n\n<p>Update: Here is the same code block using the newer Jquery 1.6+ prop method, which replaces attr:</p>\n\n<pre><code>var set=1;\nvar unset=0;\njQuery( function() {\n    $( '.checkAll' ).live('click', function() {\n        $( '.cb-element' ).each(function () {\n            if(set==1){ $( '.cb-element' ).prop('checked', true) unset=0; }\n            if(set==0){ $( '.cb-element' ).prop('checked', false); unset=1; }\n        });\n        set=unset;\n    });\n});\n</code></pre>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1012394,
      "name": "starjahid",
      "reputation": 197
    }
  },
  {
    "soID": 14927422,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/14927422",
    "title": null,
    "body": "<p>If you are creating elements dynamically and using 'live' function to capture the events, stopPropagation might not work. In that case you can try stopImmediatePropagation.</p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8266879,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/8266879",
    "title": null,
    "body": "<p>The <code>:visible</code> selector according to <a href=\"https://api.jquery.com/hidden-selector/\" rel=\"noreferrer\">the jQuery documentation</a>:</p>\n\n<blockquote>\n  <ul>\n  <li>They have a CSS <code>display</code> value of <code>none</code>.</li>\n  <li>They are form elements with <code>type=\"hidden\"</code>.</li>\n  <li>Their width and height are explicitly set to 0.</li>\n  <li>An ancestor element is hidden, so the element is not shown on the page.</li>\n  </ul>\n  \n  <p>Elements with <code>visibility: hidden</code> or <code>opacity: 0</code> are considered to be visible, since they still consume space in the layout.</p>\n</blockquote>\n\n<p>This is useful in some cases and useless in others, because if you want to check if the element is visible (<code>display != none</code>), ignoring the parents visibility, you will find that doing <code>.css(\"display\") == 'none'</code> is not only faster, but will also return the visibility check correctly.</p>\n\n<p>If you want to check visibility instead of display, you should use: <code>.css(\"visibility\") == \"hidden\"</code>.</p>\n\n<p>Also take into consideration <a href=\"https://api.jquery.com/visible-selector/\" rel=\"noreferrer\">the additional jQuery notes</a>:</p>\n\n<blockquote>\n  <p>Because <code>:visible</code> is a jQuery extension and not part of the CSS specification, queries using <code>:visible</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:visible</code> to select elements, first select the elements using a pure CSS selector, then use <code>.filter(\":visible\")</code>.</p>\n</blockquote>\n\n<p>Also, if you are concerned about performance, you should check <em><a href=\"http://www.learningjquery.com/2010/05/now-you-see-me-showhide-performance\" rel=\"noreferrer\">Now you see me… show/hide performance</a></em> (2010-05-04). And use other methods to show and hide elements.</p>\n",
    "score": 152,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1020760,
      "name": "Pedro Rainho",
      "reputation": 2791
    }
  },
  {
    "soID": 32573386,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/32573386",
    "title": null,
    "body": "<p>The idea of scoping in JavaScript when originally designed by <a href=\"https://en.wikipedia.org/wiki/Brendan_Eich\">Brendan Eich</a> came from the <a href=\"https://en.wikipedia.org/wiki/HyperCard\">HyperCard</a> scripting language <a href=\"https://en.wikipedia.org/wiki/HyperTalk\">HyperTalk</a>. </p>\n\n<p>In this language, the displays were done similar to a stack of index cards. There was a master card referred to as the background. It was transparent and can be seen as the bottom card. Any content on this base card was shared with cards placed on top of it. Each card placed on top had its own content which took precedence over the previous card, but still had access to the prior cards if desired.</p>\n\n<p>This is exactly how the JavaScript scoping system is designed. It just has different names. The cards in JavaScript are known as <strong><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-10.3\">Execution Contexts<sup>ECMA</sup></a></strong>. Each one of these contexts contains three main parts. A variable environment, a lexical environment, and a this binding. Going back to the cards reference, the lexical environment contains all of the content from prior cards lower in the stack. The current context is at the top of the stack and any content declared there will be stored in the variable environment. The variable environment will take precedence in the case of naming collisions.</p>\n\n<p>The this binding will point to the containing object. Sometimes scopes or execution contexts change without the containing object changing, such as in a declared function where the containing object may be <code>window</code> or a constructor function.</p>\n\n<p>These execution contexts are created any time control is transferred. Control is transferred when code begins to execute, and this is primarily done from function execution. </p>\n\n<p>So that is the technical explanation. In practice, it is important to remember that in JavaScript</p>\n\n<ul>\n<li>Scopes are technically \"Execution Contexts\"</li>\n<li>Contexts form a stack of environments where variables are stored</li>\n<li>The top of the stack takes precedence (the bottom being the global context)</li>\n<li>Each function creates an execution context (but not always a new this binding)</li>\n</ul>\n\n<p>Applying this to one of the previous examples (5. \"Closure\") on this page, it is possible to follow the stack of execution contexts. In this example there are three contexts in the stack. They are defined by the outer context, the context in the immediately invoked function called by var six, and the context in the returned function inside of var six's immediately invoked function.</p>\n\n<p><em>i</em>) The outer context. It has a variable environment of a = 1<br>\n <em>ii</em>) The IIFE context, it has a lexical environment of a = 1, but a variable environment of a = 6 which takes precedence in the stack<br>\n <em>iii</em>) The returned function context, it has a lexical environment of a = 6 and that is the value referenced in the alert when called.</p>\n\n<p><a href=\"https://i.stack.imgur.com/v45hL.png\"><img src=\"https://i.stack.imgur.com/v45hL.png\" alt=\"enter image description here\"></a></p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1026459,
      "name": "Travis J",
      "reputation": 56451
    }
  },
  {
    "soID": 11015754,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/11015754",
    "title": null,
    "body": "<p><code>ebdiv</code> should be set to <code>style=\"display:none;\"</code>. It is works for show and hide:</p>\n\n<pre><code>$(document).ready(function(){\n    $(\"#eb\").click(function(){\n        $(\"#ebdiv\").toggle();\n    });    \n});\n</code></pre>\n",
    "score": 76,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1041118,
      "name": "Vaishu",
      "reputation": 1337
    }
  },
  {
    "soID": 36467642,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/36467642",
    "title": null,
    "body": "<p>You can simply delete any property of an object using the <code>delete</code> keyword.</p>\n\n<p>For example:</p>\n\n<pre><code>var obj = {key1:\"val1\",key2:\"val2\",key3:\"val3\"}\n</code></pre>\n\n<p>To remove any property, say <code>key1</code>, use the <code>delete</code> keyword like this:</p>\n\n<pre><code>delete obj.key1\n</code></pre>\n\n<p>Or you can also use array-like notation:</p>\n\n<pre><code>delete obj[key1]\n</code></pre>\n\n<p>Ref: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\" rel=\"nofollow noreferrer\">MDN</a>.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1044026,
      "name": "Kalpesh Patel",
      "reputation": 2058
    }
  },
  {
    "soID": 14515952,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/14515952",
    "title": null,
    "body": "<p><strong><em>HTML</em></strong></p>\n\n<pre><code>&lt;div id=\"clickme\"&gt;\n Click here\n&lt;/div&gt;\n&lt;img id=\"book\" src=\"http://www.chromefusion.com/wp-content/uploads/2012/06/chrome-logo.jpg\" alt=\"\" /&gt;\n</code></pre>\n\n<p><strong><em>jQuery</em></strong></p>\n\n<pre><code>&lt;script&gt;\n\n$('#clickme').click(function() {\n$('#book').toggle('slow', function() {\n    // Animation complete.\n     alert( $('#book').is(\":visible\"));//&lt;--- TRUE if Visible False if Hidden\n   });\n});\n\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>Source:</strong> </p>\n\n<p><a href=\"http://bloggerplugnplay.blogspot.in/2013/01/how-to-see-if-element-is-hidden-or.html\" rel=\"noreferrer\">Blogger Plug n Play - jQuery Tools and Widgets: How to See if Element is hidden or Visible Using jQuery</a></p>\n\n<p><strong>jsFiddle:</strong> </p>\n\n<p><a href=\"http://jsfiddle.net/ipsjolly/k4WWj/\" rel=\"noreferrer\">JSFiddle - ipsjolly - k4WWj</a></p>\n",
    "score": 73,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1045296,
      "name": "jolly.exe",
      "reputation": 2348
    }
  },
  {
    "soID": 16937888,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/16937888",
    "title": null,
    "body": "<p>You even do not need to convert the string to boolean. just use the following:\n<code>var yourstring = yourstringValue  == 1 ? true : false;</code></p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19628550,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/19628550",
    "title": null,
    "body": "<p>Example: </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(document).ready(function() {\r\n  if ($(\"#checkme:hidden\").length) {\r\n    console.log('Hidden');\r\n  }\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;div id=\"checkme\" class=\"product\" style=\"display:none\"&gt;\r\n  &lt;span class=\"itemlist\"&gt;&lt;!-- Shows Results for Fish --&gt;&lt;/span&gt; Category:Fish\r\n  &lt;br&gt;Product: Salmon Atlantic\r\n  &lt;br&gt;Specie: Salmo salar\r\n  &lt;br&gt;Form: Steaks\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 43,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1058406,
      "name": "Irfan DANISH",
      "reputation": 4054
    }
  },
  {
    "soID": 29287521,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/29287521",
    "title": null,
    "body": "<p><code>var my_timestamp = ~~(Date.now()/1000);</code></p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1062764,
      "name": "Eugene",
      "reputation": 1943
    }
  },
  {
    "soID": 11663455,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/11663455",
    "title": null,
    "body": "<p>This will also work:</p>\n\n<pre><code>var currentURL = window.location.href;\n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1071246,
      "name": "Suresh Pattu",
      "reputation": 2465
    }
  },
  {
    "soID": 38146741,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/38146741",
    "title": null,
    "body": "<p><strong>always</strong> use '<strong>===</strong>' and you will avoid thousand of mistakes. nowadays using <strong>triple</strong> equality is more preferable by different style guides, because it compares taking into account type of operands.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1074179,
      "name": "Alexandr",
      "reputation": 2121
    }
  },
  {
    "soID": 40847647,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/40847647",
    "title": null,
    "body": "<p>Using <a href=\"http://ramdajs.com/docs/#dissoc\" rel=\"noreferrer\">ramda#dissoc</a> you will get a new object without the attribute <code>regex</code>:</p>\n\n<pre><code>const newObject = R.dissoc('regex', myObject);\n// newObject !== myObject\n</code></pre>\n\n<p>You can also use other functions to achieve the same effect - omit, pick, ...</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1075289,
      "name": "zatziky",
      "reputation": 5324
    }
  },
  {
    "soID": 21826584,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/21826584",
    "title": null,
    "body": "<p>Try this code:</p>\n\n<pre><code>if ($(event.target).parents().index($('#searchFormEdit')) == -1 &amp;&amp;\n    $(event.target).parents().index($('.DynarchCalendar-topCont')) == -1 &amp;&amp;\n    (_x &lt; os.left || _x &gt; (os.left + 570) || _y &lt; os.top || _y &gt; (os.top + 155)) &amp;&amp;\n    isShowEditForm) {\n\n    setVisibleEditForm(false);\n}\n</code></pre>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9808743,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/9808743",
    "title": null,
    "body": "<p>This is my solution to this problem:</p>\n\n<pre><code>$(document).ready(function() {\n  $('#user-toggle').click(function(e) {\n    $('#user-nav').toggle();\n    e.stopPropagation();\n  });\n\n  $('body').click(function() {\n    $('#user-nav').hide(); \n  });\n\n  $('#user-nav').click(function(e){\n    e.stopPropagation();\n  });\n});\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17310042,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/17310042",
    "title": null,
    "body": "<p>Simple Ajax Uploader is another option:</p>\n\n<p><a href=\"https://github.com/LPology/Simple-Ajax-Uploader\" rel=\"noreferrer\">https://github.com/LPology/Simple-Ajax-Uploader</a></p>\n\n<ul>\n<li>Cross-browser -- works in IE7+, Firefox, Chrome, Safari, Opera</li>\n<li>Supports multiple, concurrent uploads -- even in non-HTML5 browsers</li>\n<li>No flash or external CSS -- just one 5Kb Javascript file</li>\n<li>Optional, built-in support for fully cross-browser progress bars (using PHP's APC extension)</li>\n<li>Flexible and highly customizable -- use any element as upload button, style your own progress indicators</li>\n<li>No forms required, just provide an element that will serve as upload button</li>\n<li>MIT license -- free to use in commercial project</li>\n</ul>\n\n<p>Example usage:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var uploader = new ss.SimpleUpload({\n    button: $('#uploadBtn'), // upload button\n    url: '/uploadhandler', // URL of server-side upload handler\n    name: 'userfile', // parameter name of the uploaded file\n    onSubmit: function() {\n        this.setProgressBar( $('#progressBar') ); // designate elem as our progress bar\n    },\n    onComplete: function(file, response) {\n        // do whatever after upload is finished\n    }\n});\n</code></pre>\n",
    "score": 27,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1091949,
      "name": "user1091949",
      "reputation": 1137
    }
  },
  {
    "soID": 18694319,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/18694319",
    "title": null,
    "body": "<p>The top 2 answers both mentioned == means equality and === means identity. Unfortunately, this statement is incorrect. </p>\n\n<p>If both operands of == are objects, then they are compared to see if they are the same object. If both operands point to the same object, then the equal operator returns true. Otherwise,\nthe two are not equal. </p>\n\n<pre><code>var a = [1, 2, 3];  \nvar b = [1, 2, 3];  \nconsole.log(a == b)  // false  \nconsole.log(a === b) // false  \n</code></pre>\n\n<p>In the code above, both == and === get false because a and b are not the same objects.</p>\n\n<p>That's to say: if both operands of == are objects, == behaves same as ===, which also means identity. The essential difference of this two operators is about type conversion. == has conversion before it checks equality, but === does not.</p>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1092195,
      "name": "Harry He",
      "reputation": 692
    }
  },
  {
    "soID": 13555176,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/13555176",
    "title": null,
    "body": "<p>To be honest, I didn't like any of previous the solutions.</p>\n\n<p>The best way to do this, is binding the \"click\" event to the document, and comparing if that click is really outside the element (just like Art said in his suggestion).</p>\n\n<p>However, you'll have some problems there: You'll never be able to unbind it, and you cannot have an external button to open/close that element.</p>\n\n<p>That's why I wrote <a href=\"http://www.imaginacom.com/eval.php?exec=29\" rel=\"nofollow\">this small plugin (click here to link)</a>, to simplify these tasks. Could it be simpler?</p>\n\n<pre><code>&lt;a id='theButton' href=\"#\"&gt;Toggle the menu&lt;/a&gt;&lt;br/&gt;\n&lt;div id='theMenu'&gt;\n    I should be toggled when the above menu is clicked,\n    and hidden when user clicks outside.\n&lt;/div&gt;\n\n&lt;script&gt;\n$('#theButton').click(function(){\n    $('#theMenu').slideDown();\n});\n$(\"#theMenu\").dClickOutside({ ignoreList: $(\"#theButton\") }, function(clickedObj){\n    $(this).slideUp();\n});\n&lt;/script&gt;\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15125270,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/15125270",
    "title": null,
    "body": "<p>Building on Steven's answer above, I wrote this function as a generic parser for string input:</p>\n\n<pre><code>parse:\n  function (value) {\n    switch (value &amp;&amp; value.toLowerCase()) {\n      case null: return null;\n      case \"true\": return true;\n      case \"false\": return false;\n      default: try { return parseFloat(value); } catch (e) { return value; }\n    }\n  }\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19394362,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/19394362",
    "title": null,
    "body": "<pre><code>function parseBool(value) {\n    if (typeof value === \"boolean\") return value;\n\n    if (typeof value === \"number\") {\n        return value === 1 ? true : value === 0 ? false : undefined;\n    }\n\n    if (typeof value != \"string\") return undefined;\n\n    return value.toLowerCase() === 'true' ? true : false;\n}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 36515981,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/36515981",
    "title": null,
    "body": "<p>For my purposes the most elegant way to create a new object from an existing one (clone) is to use JavaScript's 'assign' object function.</p>\n\n<pre><code>foo = {bar: 10, baz: {quox: 'batman'}};\n\nclonedObject = Object.assign(foo);\n</code></pre>\n\n<p><code>clonedObject</code> is now a copy of <code>foo</code>. I don't know the details in terms of how well it works, or what a 'deep' copy is, but I use it to also combine the attributes of an object with other objects. Seems to work for cloning as well. </p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44612374,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/44612374",
    "title": null,
    "body": "<p>I disagree with the answer with the greatest votes <a href=\"https://stackoverflow.com/a/5344074/1110941\">here</a>. A <strong>Recursive Deep Clone</strong> is <strong>much faster</strong> than the <em>JSON.parse(JSON.stringify(obj))</em> approach mentioned. </p>\n\n<ul>\n<li><strong>Jsperf</strong> ranks it number one here: <a href=\"https://jsperf.com/deep-copy-vs-json-stringify-json-parse/5\" rel=\"nofollow noreferrer\">https://jsperf.com/deep-copy-vs-json-stringify-json-parse/5</a></li>\n<li><strong>Jsben</strong> from the answer above updated to show that a recursive deep clone beats all the others mentioned: <a href=\"http://jsben.ch/13YKQ\" rel=\"nofollow noreferrer\">http://jsben.ch/13YKQ</a></li>\n</ul>\n\n<p>And here's the function for quick reference:</p>\n\n<pre><code>function cloneDeep (o) {\n  let newO\n  let i\n\n  if (typeof o !== 'object') return o\n\n  if (!o) return o\n\n  if (Object.prototype.toString.apply(o) === '[object Array]') {\n    newO = []\n    for (i = 0; i &lt; o.length; i += 1) {\n      newO[i] = cloneDeep(o[i])\n    }\n    return newO\n  }\n\n  newO = {}\n  for (i in o) {\n    if (o.hasOwnProperty(i)) {\n      newO[i] = cloneDeep(o[i])\n    }\n  }\n  return newO\n}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 14227612,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/14227612",
    "title": null,
    "body": "<p>Try:</p>\n\n<pre><code>if (str &amp;&amp; str.trim().length) {  \n    //...\n}\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1129221,
      "name": "Yang Dong",
      "reputation": 186
    }
  },
  {
    "soID": 16863056,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/16863056",
    "title": null,
    "body": "<p>The solutions here work fine <strong>when only one element is to be managed</strong>. If there are multiple elements, however, the problem is much more complicated. Tricks with e.stopPropagation() and all the others will not work.</p>\n\n<p>I came up with a <strong>solution</strong>, and maybe it is not so easy, but it's better than nothing. Have a look:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$view.on(\"click\", function(e) {\n\n    if(model.isActivated()) return;\n\n        var watchUnclick = function() {\n            rootView.one(\"mouseleave\", function() {\n                $(document).one(\"click\", function() {\n                    model.deactivate();\n                });\n                rootView.one(\"mouseenter\", function() {\n                    watchUnclick();\n                });\n            });\n        };\n        watchUnclick();\n        model.activate();\n    });\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 26258171,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/26258171",
    "title": null,
    "body": "<p>For touch devices like iPad and iPhone we can use this code:</p>\n\n<pre><code>$(document).on('touchstart', function (event) {\n    var container = $(\"YOUR CONTAINER SELECTOR\");\n\n    if (!container.is(e.target) &amp;&amp;            // If the target of the click isn't the container...\n        container.has(e.target).length === 0) // ... nor a descendant of the container\n    {\n        container.hide();\n    }\n});\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44358642,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/44358642",
    "title": null,
    "body": "<p>Lodash has a function that handles that for you like so.</p>\n\n<pre><code>var foo = {a: 'a', b: {c:'d', e: {f: 'g'}}};\n\nvar bar = _.cloneDeep(foo);\n// bar = {a: 'a', b: {c:'d', e: {f: 'g'}}} \n</code></pre>\n\n<p>Read the docs <a href=\"https://lodash.com/docs/#cloneDeep\" rel=\"nofollow noreferrer\">here</a>.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8758721,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/8758721",
    "title": null,
    "body": "<p>Use:</p>\n\n<pre><code>Array.prototype.contains = function(x){\n  var retVal = -1;\n\n  // x is a primitive type\n  if([\"string\",\"number\"].indexOf(typeof x)&gt;=0 ){ retVal = this.indexOf(x);}\n\n  // x is a function\n  else if(typeof x ==\"function\") for(var ix in this){\n    if((this[ix]+\"\")==(x+\"\")) retVal = ix;\n  }\n\n  //x is an object...\n  else {\n    var sx=JSON.stringify(x);\n    for(var ix in this){\n      if(typeof this[ix] ==\"object\" &amp;&amp; JSON.stringify(this[ix])==sx) retVal = ix;\n    }\n  }\n\n  //Return False if -1 else number if numeric otherwise string\n  return (retVal === -1)?false : ( isNaN(+retVal) ? retVal : +retVal);\n}\n</code></pre>\n\n<p>I know it's not the best way to go, but since there is no native IComparable way to interact between objects, I guess this is as close as you can get to compare two entities in an array. Also, extending Array object might not be a wise thing to do, but sometimes it's OK (if you are aware of it and the trade-off).</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1134413,
      "name": "Carlos A",
      "reputation": 31
    }
  },
  {
    "soID": 10264006,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/10264006",
    "title": null,
    "body": "<p>Another answer you should put into consideration is if you are hiding an element, you should use <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"noreferrer\">jQuery</a>, but instead of actually hiding it, you remove the whole element, but you copy its <a href=\"http://en.wikipedia.org/wiki/HTML\" rel=\"noreferrer\">HTML</a> content and the tag itself into a jQuery variable, and then all you need to do is test if there is such a tag on the screen, using the normal <code>if (!$('#thetagname').length)</code>.</p>\n",
    "score": 83,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1136709,
      "name": "think123",
      "reputation": 9045
    }
  },
  {
    "soID": 9849276,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/9849276",
    "title": null,
    "body": "<p><code>b</code> is the value, and <code>a</code> is the array. It returns <code>true</code> or <code>false</code>:</p>\n\n<pre><code>function(a, b) {\n    return a.indexOf(b) != -1\n}\n</code></pre>\n",
    "score": 84,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1145932,
      "name": "william malo",
      "reputation": 1624
    }
  },
  {
    "soID": 22252785,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/22252785",
    "title": null,
    "body": "<p>I use href=\"#\" for links that I want a dummy behaviour for. Then I use this code:</p>\n\n<pre><code>$(document).ready(function() {\n    $(\"a[href='#']\").click(function(event) {\n        event.preventDefault();\n    });\n});\n</code></pre>\n\n<p>Meaning if the href equals to a hash (*=\"#\") it prevents the default link behaviour, thus still allowing you to write functionality for it, and it doesn't affect anchor clicks.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 26135702,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/26135702",
    "title": null,
    "body": "<p>If one needs to detect not only empty but also blank strings, I'll add to Goral's answer:</p>\n\n<pre><code>function isEmpty(s){\n    return !s.length;    \n}\n\nfunction isBlank(s){\n    return isEmpty(s.trim());    \n}\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1149606,
      "name": "Josef.B",
      "reputation": 481
    }
  },
  {
    "soID": 23277075,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/23277075",
    "title": null,
    "body": "<p>I usually use <code>var newObj = JSON.parse( JSON.stringify(oldObje) );</code> but, here's a more proper way:</p>\n\n<pre><code>var o = {};\n\nvar oo = Object.create(o);\n\n(o === oo); // =&gt; false\n</code></pre>\n\n<p>Watch legacy browsers!</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22459894,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/22459894",
    "title": null,
    "body": "<p>You can use <code>push</code> and <code>apply</code> function to append two arrays.</p>\n\n<pre><code>var array1 = [11, 32, 75];\nvar array2 = [99, 67, 34];\n\nArray.prototype.push.apply(array1, array2);\n</code></pre>\n\n<p>It will append <code>array2</code> to <code>array1</code>. Now <code>array1</code> contains <code>[11, 32, 75, 99, 67, 34]</code>.\nThis code is much simpler than writing <code>for</code> loops to copy each and every items in the array.</p>\n",
    "score": 55,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28987637,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/28987637",
    "title": null,
    "body": "<p>To convert both string(\"true\", \"false\") and boolean to boolean</p>\n\n<pre><code>('' + flag) === \"true\"\n</code></pre>\n\n<p>Where <code>flag</code> can be </p>\n\n<pre><code> var flag = true\n var flag = \"true\"\n var flag = false\n var flag = \"false\"\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12970750,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/12970750",
    "title": null,
    "body": "<p><code>var path = location.pathname</code> returns the path of the current URL in jQuery. There is no need to use <code>window</code>.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1161743,
      "name": "Jonathan Lin",
      "reputation": 7875
    }
  },
  {
    "soID": 12469043,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/12469043",
    "title": null,
    "body": "<p>As others have said, you can use <code>delete</code>. But JavaScript is an OOP Language, so everything is an object. Thus, I feel it necessary to point out a particular caveat.</p>\n\n<p>In arrays, unlike plain old objects, using <code>delete</code> leaves behind garbage in the form of <code>null</code>, creating a \"hole\" in the array.</p>\n\n<pre><code>var array = [1, 2, 3, 4];\ndelete array[2];\n/* Expected result --&gt; [1, 2, 4]\n * Actual result   --&gt; [1, 2, null, 4]\n */\n</code></pre>\n\n<p>As you can see, <code>delete</code> doesn't always work as one might expect. The value is overwritten, but the memory is not reallocated.</p>\n\n<p>Ignoring the dangers and problems inherent in <code>null</code>, and the space wasted, this can be problematic if the array needs to be precise.</p>\n\n<p>For example, say you are creating a webapp that uses JSON-serialization to store an array used for 'tabs' in a string (in this case, <code>localStorage</code>). Let's also say that the code uses the numerical indices of the array's members to \"title\" them when drawing to the screen. Why are you doing this rather than just storing the \"title\" as well? Because... <em>reasons</em>.</p>\n\n<p>Okay, let's just say that you're trying to save memory at the request of this <em>one</em> user who runs a PDP-11 minicomputer from the 1960's running UNIX, and wrote his own Elinks-based, JavaScript-compliant, line-printer-friendly browser because X11 is <em>out of the question</em>.</p>\n\n<p>Increasingly stupid edge-case scenario aside, using <code>delete</code> on said array will result in <code>null</code> polluting the array, and probably causing bugs in the app later on. And if you check for <code>null</code>, it would straight up skip the numbers resulting in the tabs being rendered like <code>[1] [2] [4] [5] ...</code>. </p>\n\n<pre><code>if (array[index] == null)\n    continue;\nelse\n    title = (index + 1).toString();\n/* 0 -&gt; \"1\"\n * 1 -&gt; \"2\"\n * 2 -&gt; (nothing)\n * 3 -&gt; \"4\"\n */\n</code></pre>\n\n<p>Yeah, that's definitely not what you wanted.</p>\n\n<p>Now, you <em>could</em> keep a second iterator, like <code>j</code>, to increment only when valid values are read from the array. But that wouldn't exactly solve the <code>null</code> issue, and you still have to please that <s>troll</s> PDP-11 user. Alas, his computer just <em>doesn't</em> have enough memory to hold that last integer <sub>(don't ask how he manages to handle a variable-width array...)</sub>.</p>\n\n<p>So, he sends you an email in anger:</p>\n\n<pre><code>Hey, your webapp broke my browser! I checked my localStorage database after your stupid code made my browser segfault, and this is what I found:\n\n&gt;\"tabs:['Hello World', 'foo bar baz', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, ... ]\"\n\nAfter clearing my precious data, it segfaulted again, and I did a backtrace, and what do I find? WHAT DO I FIND!? YOU USE TOO MANY VARIABLES!\n\n&gt;var i = index;\n&gt;var j = 1;\n\nGrr, I am angry now.\n-Troll Davidson\n</code></pre>\n\n<p>About now, you're at your wit's end. This guy has been complaining non-stop about your app, and you want to tell him to shut up and go get a better computer.</p>\n\n<p>Luckily, arrays <em>do</em> have a specialized method for deleting indices and reallocating memory: <code>Array.prototype.splice()</code>. You could write something like this:</p>\n\n<pre><code>Array.prototype.remove = function(index){\n  this.splice(index,1);\n}\n...\narray = [1, 2, 3, 4];\narray.remove(2);\n// Result -&gt; [1, 2, 4]\n</code></pre>\n\n<p>And just like that, you've pleased Mr. PDP-11. Hooray! <sub>(I'd still tell him off, though...)</sub></p>\n",
    "score": 98,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1175714,
      "name": "Braden Best",
      "reputation": 3801
    }
  },
  {
    "soID": 15554279,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/15554279",
    "title": null,
    "body": "<p>I found that many people new to JavaScript have trouble understanding that inheritance is available by default in the language and that function scope is the only scope, so far. I provided an extension to a beautifier I wrote at the end of last year called JSPretty. The feature colors function scope in the code and always associates a color to all variables declared in that scope. Closure is visually demonstrated when a variable with a color from one scope is used in a different scope.</p>\n\n<p>Try the feature at:</p>\n\n<ul>\n<li><a href=\"http://prettydiff.com/jspretty.xhtml?c=white&amp;jsscope\" rel=\"noreferrer\">http://prettydiff.com/jspretty.xhtml?c=white&amp;jsscope</a></li>\n</ul>\n\n<p>See a demo at:</p>\n\n<ul>\n<li><a href=\"http://prettydiff.com/jspretty.xhtml?c=white&amp;jsscope&amp;s=http://prettydiff.com/lib/markup_beauty.js\" rel=\"noreferrer\">http://prettydiff.com/jspretty.xhtml?c=white&amp;jsscope&amp;s=http://prettydiff.com/lib/markup_beauty.js</a></li>\n</ul>\n\n<p>View the code at:</p>\n\n<ul>\n<li><a href=\"http://prettydiff.com/lib/jspretty.js\" rel=\"noreferrer\">http://prettydiff.com/lib/jspretty.js</a></li>\n<li><a href=\"https://github.com/austincheney/Pretty-Diff/blob/master/lib/jspretty.js\" rel=\"noreferrer\">https://github.com/austincheney/Pretty-Diff/blob/master/lib/jspretty.js</a></li>\n</ul>\n\n<p>Currently the feature offers support for a depth of 16 nested functions, but currently does not color global variables.</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1180508,
      "name": "austincheney",
      "reputation": 1083
    }
  },
  {
    "soID": 11579654,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/11579654",
    "title": null,
    "body": "<p>This may work:</p>\n\n<pre><code>expect($(\"#message_div\").css(\"display\")).toBe(\"none\");\n</code></pre>\n",
    "score": 66,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1187233,
      "name": "Waviz Team",
      "reputation": 826
    }
  },
  {
    "soID": 45448872,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/45448872",
    "title": null,
    "body": "<p>The `toBoolean' function returns false for null, undefined, '', 'false'. It returns true for any other string:</p>\n\n<pre><code>const toBoolean = (bool) =&gt; {\n  if (bool === 'false') bool = false\n  return !!bool\n}\n\ntoBoolean('false') // returns false\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22387244,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/22387244",
    "title": null,
    "body": "<p>You can set a tabindex to the <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\" rel=\"nofollow\">DOM</a> element. This will trigger a blur event when the user click outside the DOM element.</p>\n\n<p><a href=\"http://jsbin.com/fuloqixe/5\" rel=\"nofollow\">Demo</a></p>\n\n<pre><code>&lt;div tabindex=\"1\"&gt;\n    Focus me\n&lt;/div&gt;\n\ndocument.querySelector(\"div\").onblur = function(){\n   console.log('clicked outside')\n}\ndocument.querySelector(\"div\").onfocus = function(){\n   console.log('clicked inside')\n}\n</code></pre>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16568401,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/16568401",
    "title": null,
    "body": "<p>Also, in case you consider a whitespace filled string as \"empty\".\nYou can test it with this Regex:</p>\n\n<pre><code>!/\\S/.test(string); // Returns true if blank.\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1215159,
      "name": "Wab_Z",
      "reputation": 101
    }
  },
  {
    "soID": 27223633,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/27223633",
    "title": null,
    "body": "<p>This post is very old and I find it very helpful so I decided to share the unset function I wrote in case someone else see this post and think why it's not so simple as it in PHP unset function.</p>\n\n<p>The reason for writing this new <code>unset</code> function, is to keep the index of all other variables in this hash_map. Look at the following example, and see how the index of \"test2\" did not change after removing a value from the hash_map.</p>\n\n<pre><code>function unset(unsetKey, unsetArr, resort){\n  var tempArr = unsetArr;\n  var unsetArr = {};\n  delete tempArr[unsetKey];\n  if(resort){\n    j = -1;\n  }\n  for(i in tempArr){\n    if(typeof(tempArr[i]) !== 'undefined'){\n      if(resort){\n        j++;\n      }else{\n        j = i;\n      }\n      unsetArr[j] = tempArr[i];\n    }\n  }\n  return unsetArr;\n}\n\nvar unsetArr = ['test','deletedString','test2'];\n\nconsole.log(unset('1',unsetArr,true)); // output Object {0: \"test\", 1: \"test2\"}\nconsole.log(unset('1',unsetArr,false)); // output Object {0: \"test\", 2: \"test2\"}\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1220652,
      "name": "talsibony",
      "reputation": 2797
    }
  },
  {
    "soID": 33419378,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/33419378",
    "title": null,
    "body": "<p>There are ALMOST only two types of JavaScript scopes:</p>\n\n<ul>\n<li>the scope of each var declaration is associated with the most immediately enclosing function</li>\n<li>if there is no enclosing function for a var declaration, it is global scope</li>\n</ul>\n\n<p>So, any blocks other than functions do not create a new scope. That explains why for-loops overwrite outer scoped variables:</p>\n\n<pre><code>var i = 10, v = 10;\nfor (var i = 0; i &lt; 5; i++) { var v = 5; }\nconsole.log(i, v);\n// output 5 5\n</code></pre>\n\n<p>Using functions instead:</p>\n\n<pre><code>var i = 10, v = 10;\n$.each([0, 1, 2, 3, 4], function(i) { var v = 5; });\nconsole.log(i,v);\n// output 10 10\n</code></pre>\n\n<p>In the first example, there was no block scope, so the initially declared variables were overwritten. In the second example, there was a new scope due to the function, so the initially declared variables were SHADOWED, and not overwritten.</p>\n\n<p>That's almost all you need to know in terms of JavaScript scoping, except:</p>\n\n<ul>\n<li>try/catch introduce new scope ONLY for the exception variable itself, other variables do not have new scope</li>\n<li>with-clause apparently is another exception, but using with-clause it highly discouraged (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/with</a>)</li>\n</ul>\n\n<p>So you can see JavaScript scoping is actually extremely simple, albeit not always intuitive. A few things to be aware of:</p>\n\n<ul>\n<li>var declarations are hoisted to the top of the scope. This means no matter where the var declaration happens, to the compiler it is as if the var itself happens at the top</li>\n<li>multiple var declarations within the same scope are combined</li>\n</ul>\n\n<p>So this code:</p>\n\n<pre><code>var i = 1;\nfunction abc() {\n  i = 2;\n  var i = 3;\n}\nconsole.log(i);     // outputs 1\n</code></pre>\n\n<p>is equivalent to:</p>\n\n<pre><code>var i = 1;\nfunction abc() {\n  var i;     // var declaration moved to the top of the scope\n  i = 2;\n  i = 3;     // the assignment stays where it is\n}\nconsole.log(i);\n</code></pre>\n\n<p>This may seem counter intuitive, but it makes sense from the perspective of a imperative language designer.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1229135,
      "name": "jackbean818",
      "reputation": 86
    }
  },
  {
    "soID": 24192811,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/24192811",
    "title": null,
    "body": "<p>Just to add my 2 cents: In working with both JS and PHP a few years back, I've become accustom to using single quotes so I can type the escape character ('\\') without having to escape it as well.  I usually used it when typing raw strings with file paths, etc. (<a href=\"http://en.wikipedia.org/wiki/String_literal#Raw_strings\" rel=\"nofollow\">http://en.wikipedia.org/wiki/String_literal#Raw_strings</a>)</p>\n\n<p>Anyhow, my convention ended up becoming the use of single quotes on identifier-type raw strings, such as <code>if (typeof s == 'string') ...</code> (in which escape characters would never be used - ever), and double quotes for <em>texts</em>, such as \"Hey, what's up?\".  I also use single quotes in comments as a typographical convention to show identifier names.  This is just a rule of thumb, and I break off only when needed, such as when typing HTML strings <code>'&lt;a href=\"#\"&gt; like so &lt;a&gt;'</code> (though you could reverse the quotes here also).  I'm also aware that, in the case of JSON, double quotes are used for the names - but outside that, personally, I prefer the single quotes when escaping is <em>never</em> required for the text between the quotes - like <code>document.createElement('div')</code>.</p>\n\n<p>Bottom line, and as some have mentioned/alluded to, pick a convention, stick with it, and only deviate when necessary.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 32413839,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/32413839",
    "title": null,
    "body": "<p>Javascript execution flow diagram for strict equality / Comparison '==='</p>\n\n<p><a href=\"https://i.stack.imgur.com/A27Be.png\"><img src=\"https://i.stack.imgur.com/A27Be.png\" alt=\"Javascript strict equality\"></a></p>\n\n<p>Javascript execution flow diagram for non strict equality / comparison '=='</p>\n\n<p><a href=\"https://i.stack.imgur.com/Ccyb8.png\"><img src=\"https://i.stack.imgur.com/Ccyb8.png\" alt=\"Javascript non equality\"></a></p>\n",
    "score": 42,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1237494,
      "name": "Samar Panda",
      "reputation": 1865
    }
  },
  {
    "soID": 17915351,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/17915351",
    "title": null,
    "body": "<p>There are a lot of answers, but none of them gave the desired effect I needed.  I wanted to utilize the power of jQuery's deep copy... However, when it runs into an array, it simply copies the reference to the array and deep copies the items in it.  To get around this, I made a nice little recursive function that will create a new array automatically.  </p>\n\n<p>(It even checks for kendo.data.ObservableArray if you want it to!  Though, make sure you make sure you call kendo.observable(newItem) if you want the Arrays to be observable again.) </p>\n\n<p>So, to fully copy an existing item, you just do this:</p>\n\n<pre><code>var newItem = jQuery.extend(true, {}, oldItem);\ncreateNewArrays(newItem);\n\n\nfunction createNewArrays(obj) {\n    for (var prop in obj) {\n        if ((kendo != null &amp;&amp; obj[prop] instanceof kendo.data.ObservableArray) || obj[prop] instanceof Array) {\n            var copy = [];\n            $.each(obj[prop], function (i, item) {\n                var newChild = $.extend(true, {}, item);\n                createNewArrays(newChild);\n                copy.push(newChild);\n            });\n            obj[prop] = copy;\n        }\n    }\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15434736,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/15434736",
    "title": null,
    "body": "<p><em>jQuery</em> provides <a href=\"http://api.jquery.com/jQuery.now/\" rel=\"noreferrer\">its own method</a> to get the timestamp:</p>\n\n<pre><code>var timestamp = $.now();\n</code></pre>\n\n<p><sup>(besides it just implements <code>(new Date).getTime()</code> expression)</sup></p>\n\n<p><strong>REF:</strong> <a href=\"http://api.jquery.com/jQuery.now/\" rel=\"noreferrer\">http://api.jquery.com/jQuery.now/</a></p>\n",
    "score": 44,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1249581,
      "name": "VisioN",
      "reputation": 96276
    }
  },
  {
    "soID": 35846430,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/35846430",
    "title": null,
    "body": "<p>Have a try of this:</p>\n\n<pre><code>$('html').click(function(e) {\n  if($(e.target).parents('#menuscontainer').length == 0) {\n    $('#menuscontainer').hide();\n  }\n});\n</code></pre>\n\n<p><a href=\"https://jsfiddle.net/4cj4jxy0/\" rel=\"nofollow\">https://jsfiddle.net/4cj4jxy0/</a></p>\n\n<p>But note that this cannot work if the click event cannot reach the <code>html</code> tag. (Maybe other elements have <code>stopPropagation()</code>).</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10472742,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/10472742",
    "title": null,
    "body": "<p>For use of JavaScript code across different languages, I've found single quotes to consistently require less code tweaking.</p>\n\n<p>Double quotes support multi-line strings.</p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 32462977,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/32462977",
    "title": null,
    "body": "<p><strong>Just keep consistency in what you use. But don't let down your comfort level.</strong></p>\n\n<pre><code>\"This is my string.\"; // :-|\n\"I'm invincible.\"; // comfortable :)\n'You can\\'t beat me.'; // uncomfortable :(\n'Oh! Yes. I can \"beat\" you.'; // comfortable :)\n\"Do you really think, you can \\\"beat\\\" me?\"; // uncomfortable :(\n\"You're my guest. I can \\\"beat\\\" you.\"; // sometimes, you've to :P\n'You\\'re my guest too. I can \"beat\" you too.'; // sometimes, you've to :P\n</code></pre>\n\n<p><strong>ES6 update</strong></p>\n\n<p>Using <em>template literal syntax</em>.</p>\n\n<pre><code>`Be \"my\" guest. You're in complete freedom.`; // most comfort :D\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 14520473,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/14520473",
    "title": null,
    "body": "<p>I have been using the below script to upload images which happens to work fine.</p>\n\n<h1>HTML</h1>\n\n<pre><code>&lt;input id=\"file\" type=\"file\" name=\"file\"/&gt;\n&lt;div id=\"response\"&gt;&lt;/div&gt;\n</code></pre>\n\n<h1>JavaScript</h1>\n\n<pre><code>jQuery('document').ready(function(){\n    var input = document.getElementById(\"file\");\n    var formdata = false;\n    if (window.FormData) {\n        formdata = new FormData();\n    }\n    input.addEventListener(\"change\", function (evt) {\n        var i = 0, len = this.files.length, img, reader, file;\n\n        for ( ; i &lt; len; i++ ) {\n            file = this.files[i];\n\n            if (!!file.type.match(/image.*/)) {\n                if ( window.FileReader ) {\n                    reader = new FileReader();\n                    reader.onloadend = function (e) {\n                        //showUploadedItem(e.target.result, file.fileName);\n                    };\n                    reader.readAsDataURL(file);\n                }\n\n                if (formdata) {\n                    formdata.append(\"image\", file);\n                    formdata.append(\"extra\",'extra-data');\n                }\n\n                if (formdata) {\n                    jQuery('div#response').html('&lt;br /&gt;&lt;img src=\"ajax-loader.gif\"/&gt;');\n\n                    jQuery.ajax({\n                        url: \"upload.php\",\n                        type: \"POST\",\n                        data: formdata,\n                        processData: false,\n                        contentType: false,\n                        success: function (res) {\n                         jQuery('div#response').html(\"Successfully uploaded\");\n                        }\n                    });\n                }\n            }\n            else\n            {\n                alert('Not a vaild image!');\n            }\n        }\n\n    }, false);\n});\n</code></pre>\n\n<h1>Explanation</h1>\n\n<p>I use response <code>div</code> to show the uploading animation and response after upload is done.</p>\n\n<p>Best part is you can send extra data such as ids &amp; etc with the file when you use this script. I have mention it <code>extra-data</code> as in the script.</p>\n\n<p>At the PHP level this will work as normal file upload. extra-data can be retrieved as <code>$_POST</code> data.</p>\n\n<p>Here you are not using a plugin and stuff. You can change the code as you want. You are not blindly coding here. This is the core functionality of any jQuery file upload. Actually Javascript.</p>\n",
    "score": 53,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1263783,
      "name": "Techie",
      "reputation": 25560
    }
  },
  {
    "soID": 10677511,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/10677511",
    "title": null,
    "body": "<p>It's mostly a matter of style and preference. There are some rather interesting and useful technical explorations in the other answers, so perhaps the only thing I might add is to offer a little worldly advice.</p>\n\n<ul>\n<li><p><em>If</em> you're coding in a company or team, <em>then</em> it's probably a good idea to\nfollow the \"house style\".</p></li>\n<li><p><em>If</em> you're alone hacking a few side projects, <em>then</em> look at a few prominent leaders in the community . Eg let's say you getting into Node.js. Take a look at core modules, eg underscore.js or express and see what\nconvention they use, and consider following that.</p></li>\n<li><p><em>If</em> both conventions are equally used, <em>then</em> defer to your personal<br>\npreference.</p></li>\n<li><p><em>If</em> you have no personal preference, <em>then</em> flip a coin.</p></li>\n<li><p><em>If</em> you don't have a coin, <em>then</em> beer is on me ;)</p></li>\n</ul>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17258019,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/17258019",
    "title": null,
    "body": "<p>i wrote a helper function that handles your cases (and some more). Feel free to alter it to your specific needs</p>\n\n<pre><code>/**\n * @example\n * &lt;code&gt;\n * var pageRequestParams = {'enableFeatureX': 'true'};\n * toBool(pageRequestParams.enableFeatureX);  // returns true\n *\n * toBool(pageRequestParams.enableFeatureY, true, options.enableFeatureY)\n * &lt;/code&gt;\n * @param {*}value\n * @param {Boolean}[mapEmptyStringToTrue=false]\n * @param {Boolean}[defaultVal=false] this is returned if value is undefined.\n *\n * @returns {Boolean}\n * @example\n * &lt;code&gt;\n * toBool({'enableFeatureX': ''        }.enableFeatureX);          // false\n * toBool({'enableFeatureX': ''        }.enableFeatureX, true);    // true\n * toBool({                            }.enableFeatureX, true);    // false\n * toBool({'enableFeatureX': 0         }.enableFeatureX);          // false\n * toBool({'enableFeatureX': '0'       }.enableFeatureX);          // false\n * toBool({'enableFeatureX': '0 '      }.enableFeatureX);          // false\n * toBool({'enableFeatureX': 'false'   }.enableFeatureX);          // false\n * toBool({'enableFeatureX': 'falsE '  }.enableFeatureX);          // false\n * toBool({'enableFeatureX': 'no'      }.enableFeatureX);          // false\n *\n * toBool({'enableFeatureX': 1         }.enableFeatureX);          // true\n * toBool({'enableFeatureX': '-2'      }.enableFeatureX);          // true\n * toBool({'enableFeatureX': 'true'    }.enableFeatureX);          // true\n * toBool({'enableFeatureX': 'false_'  }.enableFeatureX);          // true\n * toBool({'enableFeatureX': 'john doe'}.enableFeatureX);          // true\n * &lt;/code&gt;\n *\n */\nvar toBool = function (value, mapEmptyStringToTrue, defaultVal) {\n    if (value === undefined) {return Boolean(defaultVal); }\n    mapEmptyStringToTrue = mapEmptyStringToTrue !== undefined ? mapEmptyStringToTrue : false; // default to false\n    var strFalseValues = ['0', 'false', 'no'].concat(!mapEmptyStringToTrue ? [''] : []);\n    if (typeof value === 'string') {\n        return (strFalseValues.indexOf(value.toLowerCase().trim()) === -1);\n    }\n    // value is likely null, boolean, or number\n    return Boolean(value);\n};\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19091957,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/19091957",
    "title": null,
    "body": "<p>This is a more general solution that <strong>allows multiple elements to be watched, and dynamically adding and removing elements from the queue</strong>.</p>\n\n<p>It holds a global queue (<strong>autoCloseQueue</strong>) - an object container for elements that should be closed on outside clicks. </p>\n\n<p>Each queue object key should be the DOM Element id, and the value should be an object with 2 callback functions: </p>\n\n<pre><code> {onPress: someCallbackFunction, onOutsidePress: anotherCallbackFunction}\n</code></pre>\n\n<p>Put this in your document ready callback:</p>\n\n<pre><code>window.autoCloseQueue = {}  \n\n$(document).click(function(event) {\n    for (id in autoCloseQueue){\n        var element = autoCloseQueue[id];\n        if ( ($(e.target).parents('#' + id).length) &gt; 0) { // This is a click on the element (or its child element)\n            console.log('This is a click on an element (or its child element) with  id: ' + id);\n            if (typeof element.onPress == 'function') element.onPress(event, id);\n        } else { //This is a click outside the element\n            console.log('This is a click outside the element with id: ' + id);\n            if (typeof element.onOutsidePress == 'function') element.onOutsidePress(event, id); //call the outside callback\n            delete autoCloseQueue[id]; //remove the element from the queue\n        }\n    }\n});\n</code></pre>\n\n<p>Then, when the DOM element with id  '<strong>menuscontainer</strong>' is created, just add this object to the queue: </p>\n\n<pre><code>window.autoCloseQueue['menuscontainer'] = {onOutsidePress: clickOutsideThisElement}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11511772,
    "parentID": 306583,
    "url": "https://stackoverflow.com/q/11511772",
    "title": null,
    "body": "<p>The <em>direct</em> children is </p>\n\n<pre><code>$('&gt; .child', this)\n</code></pre>\n",
    "score": 48,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1296336,
      "name": "Rayron Victor",
      "reputation": 1351
    }
  },
  {
    "soID": 9906646,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/9906646",
    "title": null,
    "body": "<p>Save the calls you make in an array, then call xhr.abort() on each.</p>\n\n<p>HUGE CAVEAT: You can abort a request, but that's only the client side. The server side could still be processing the request. If you are using something like PHP or ASP with session data, the session data is locked until the ajax has finished. So, to allow the user to continue browsing the website, you have to call <strong>session_write_close</strong>(). This saves the session and unlocks it so that other pages waiting to continue will proceed. Without this, several pages can be waiting for the lock to be removed.</p>\n",
    "score": 57,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1298034,
      "name": "Tei",
      "reputation": 1192
    }
  },
  {
    "soID": 25765186,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/25765186",
    "title": null,
    "body": "<p>We use this snippet (works with objects, arrays, strings):</p>\n\n<pre><code>/*\n * @function\n * @name Object.prototype.inArray\n * @description Extend Object prototype within inArray function\n *\n * @param {mix}    needle       - Search-able needle\n * @param {bool}   searchInKey  - Search needle in keys?\n *\n */\nObject.defineProperty(Object.prototype, 'inArray',{\n    value: function(needle, searchInKey){\n\n        var object = this;\n\n        if( Object.prototype.toString.call(needle) === '[object Object]' || \n            Object.prototype.toString.call(needle) === '[object Array]'){\n            needle = JSON.stringify(needle);\n        }\n\n        return Object.keys(object).some(function(key){\n\n            var value = object[key];\n\n            if( Object.prototype.toString.call(value) === '[object Object]' || \n                Object.prototype.toString.call(value) === '[object Array]'){\n                value = JSON.stringify(value);\n            }\n\n            if(searchInKey){\n                if(value === needle || key === needle){\n                return true;\n                }\n            }else{\n                if(value === needle){\n                    return true;\n                }\n            }\n        });\n    },\n    writable: true,\n    configurable: true,\n    enumerable: false\n});\n</code></pre>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>var a = {one: \"first\", two: \"second\", foo: {three: \"third\"}};\na.inArray(\"first\");          //true\na.inArray(\"foo\");            //false\na.inArray(\"foo\", true);      //true - search by keys\na.inArray({three: \"third\"}); //true\n\nvar b = [\"one\", \"two\", \"three\", \"four\", {foo: 'val'}];\nb.inArray(\"one\");         //true\nb.inArray('foo');         //false\nb.inArray({foo: 'val'})   //true\nb.inArray(\"{foo: 'val'}\") //false\n\nvar c = \"String\";\nc.inArray(\"S\");        //true\nc.inArray(\"s\");        //false\nc.inArray(\"2\", true);  //true\nc.inArray(\"20\", true); //false\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1320932,
      "name": "dr.dimitru",
      "reputation": 1728
    }
  },
  {
    "soID": 24361311,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/24361311",
    "title": null,
    "body": "<p>To upload file asynchronously with Jquery use below steps:</p>\n\n<p><strong>step 1</strong> In your project open Nuget manager and add package (jquery fileupload(only you need to write it in search box it will come up and install it.))\nURL: <a href=\"https://github.com/blueimp/jQuery-File-Upload\" rel=\"noreferrer\">https://github.com/blueimp/jQuery-File-Upload</a></p>\n\n<p><strong>step 2</strong> Add below scripts in the HTML files, which are already added to the project by running above package:</p>\n\n<blockquote>\n  <p>jquery.ui.widget.js</p>\n  \n  <p>jquery.iframe-transport.js</p>\n  \n  <p>jquery.fileupload.js</p>\n</blockquote>\n\n<p><strong>step 3</strong>  Write file upload control as per below code:</p>\n\n<pre><code>&lt;input id=\"upload\" name=\"upload\" type=\"file\" /&gt;\n</code></pre>\n\n<p><strong>step 4</strong>  write a js method as uploadFile as below: </p>\n\n<pre><code> function uploadFile(element) {\n\n            $(element).fileupload({\n\n                dataType: 'json',\n                url: '../DocumentUpload/upload',\n                autoUpload: true,\n                add: function (e, data) {           \n                  // write code for implementing, while selecting a file. \n                  // data represents the file data. \n                  //below code triggers the action in mvc controller\n                  data.formData =\n                                    {\n                                     files: data.files[0]\n                                    };\n                  data.submit();\n                },\n                done: function (e, data) {          \n                   // after file uploaded\n                },\n                progress: function (e, data) {\n\n                   // progress\n                },\n                fail: function (e, data) {\n\n                   //fail operation\n                },\n                stop: function () {\n\n                  code for cancel operation\n                }\n            });\n\n        };\n</code></pre>\n\n<p><strong>step 5</strong> In ready function call element file upload to initiate the process as per below:</p>\n\n<pre><code>$(document).ready(function()\n{\n    uploadFile($('#upload'));\n\n});\n</code></pre>\n\n<p><strong>step 6</strong> Write MVC controller and Action as per below:</p>\n\n<pre><code>public class DocumentUploadController : Controller\n    {       \n\n        [System.Web.Mvc.HttpPost]\n        public JsonResult upload(ICollection&lt;HttpPostedFileBase&gt; files)\n        {\n            bool result = false;\n\n            if (files != null || files.Count &gt; 0)\n            {\n                try\n                {\n                    foreach (HttpPostedFileBase file in files)\n                    {\n                        if (file.ContentLength == 0)\n                            throw new Exception(\"Zero length file!\");                       \n                        else \n                            //code for saving a file\n\n                    }\n                }\n                catch (Exception)\n                {\n                    result = false;\n                }\n            }\n\n\n            return new JsonResult()\n                {\n                    Data=result\n                };\n\n\n        }\n\n    }\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1321613,
      "name": "ashish",
      "reputation": 177
    }
  },
  {
    "soID": 10074361,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/10074361",
    "title": null,
    "body": "<pre><code>jQuery().ready(function(){\n    $('#nav').click(function (event) {\n        $(this).addClass('activ');\n        event.stopPropagation();\n    });\n\n    $('html').click(function () {\n        if( $('#nav').hasClass('activ') ){\n            $('#nav').removeClass('activ');\n        }\n    });\n});\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19579213,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/19579213",
    "title": null,
    "body": "<p>1) There is a global scope, a function scope, and the with and catch scopes. There is no 'block' level scope in general for variable's -- the with and the catch statements add names to their blocks.</p>\n\n<p>2) Scopes are nested by functions all the way to the global scope.</p>\n\n<p>3) Properties are resolved by going through the prototype chain.  The with statement brings object property names into the lexical scope defined by the with block.</p>\n\n<p>EDIT: ECMAAScript 6 (Harmony) is spec'ed to support let, and I know chrome allows a 'harmony' flag, so perhaps it does support it..</p>\n\n<p>Let would be a support for block level scoping, but you have to use the keyword to make it happen.</p>\n\n<p>EDIT: Based on Benjamin's pointing out of the with and catch statements in the comments, I've edited the post, and added more.  Both the with and the catch statements introduce variables into their respective blocks, and that <em>is</em> a block scope. These variables are aliased to the properties of the objects passed into them.</p>\n\n<pre><code> //chrome (v8)\n\n var a = { 'test1':'test1val' }\n test1   // error not defined\n with (a) { var test1 = 'replaced' }\n test1   // undefined\n a       // a.test1 = 'replaced'\n</code></pre>\n\n<p>EDIT: Clarifying example:</p>\n\n<p>test1 is scoped to the with block, but is aliased to a.test1.  'Var test1' creates a new variable test1 in the upper lexical context (function, or global), unless it is a property of a -- which it is. </p>\n\n<p>Yikes!  Be careful using 'with' -- just like var is a noop if the variable is already defined in the function, it is also a noop with respect to names imported from the object!  A little heads up on the name already being defined would make this much safer.  I personally will never use with because of this.</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1331672,
      "name": "Gerard ONeill",
      "reputation": 1730
    }
  },
  {
    "soID": 41883359,
    "parentID": 332872,
    "url": "https://stackoverflow.com/q/41883359",
    "title": null,
    "body": "<p>To encode a URL, as has been said before, you have two functions:</p>\n\n<pre><code>encodeURI()\n</code></pre>\n\n<p>and </p>\n\n<pre><code>encodeURIComponent()\n</code></pre>\n\n<p>The reason both exist is that the first preserves the URL with the risk of leaving too many things unescaped, while the second encodes everything needed.</p>\n\n<p>With the first, you could copy the newly escaped URL into address bar (for example) and it would work.  However your unescaped '&amp;'s would interfere with field delimiters, the '='s would interfere with field names and values, and the '+'s would look like spaces.  But for simple data when you want to preserve the URL nature of what you are escaping, this works.</p>\n\n<p>The second is everything you need to do to make sure nothing in your string interfers with a URL.  It leaves various unimportant characters unescaped so that the URL remains as human readable as possible without interference.  A URL encoded this way will no longer work as a URL without unescaping it.</p>\n\n<p>So if you can take the time, you always want to use encodeURIComponent() -- before adding on name/value pairs encode both the name and the value using this function before adding it to the query string.</p>\n\n<p>I'm having a tough time coming up with reasons to use the encodeURI() -- I'll leave that to the smarter people.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1331672,
      "name": "Gerard ONeill",
      "reputation": 1730
    }
  },
  {
    "soID": 17398791,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/17398791",
    "title": null,
    "body": "<p>This one has a solution : which converts unixtime stamp to tim in js try this</p>\n\n<pre><code>var a = new Date(UNIX_timestamp*1000);\nvar hour = a.getUTCHours();\nvar min = a.getUTCMinutes();\nvar sec = a.getUTCSeconds();\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1338683,
      "name": "anu",
      "reputation": 245
    }
  },
  {
    "soID": 25813188,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/25813188",
    "title": null,
    "body": "<pre><code>function contains(a, obj) {\n    return a.some(function(element){return element == obj;})\n}\n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\">Array.prototype.some()</a> was added to the ECMA-262 standard in the 5th edition</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1355221,
      "name": "dansalmo",
      "reputation": 6407
    }
  },
  {
    "soID": 24612659,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/24612659",
    "title": null,
    "body": "<p>As a <a href=\"https://stackoverflow.com/a/3028037/1366033\">wrapper to this great answer from Art</a>, and to use the syntax originally requested by OP, here's a jQuery extension that can record wether a click occured outside of a set element.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$.fn.clickOutsideThisElement = function (callback) {\n    return this.each(function () {\n        var self = this;\n        $(document).click(function (e) {\n            if (!$(e.target).closest(self).length) {\n                callback.call(self, e)\n            }\n        })\n    });\n};\n</code></pre>\n\n<p>Then you can call like this:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$(\"#menuscontainer\").clickOutsideThisElement(function() {\n    // handle menu toggle\n});\n</code></pre>\n\n<h2><a href=\"http://jsfiddle.net/KyleMit/Fv2fY/\" rel=\"nofollow noreferrer\">Here's a demo in fiddle</a></h2>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 800010,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/800010",
    "title": null,
    "body": "<p>There is a standards based replacement,<code>DOMContentLoaded</code> that is supported by over <a href=\"http://caniuse.com/#search=DOMContentLoaded\" rel=\"noreferrer\">98% of browsers</a>, though not IE8:</p>\n\n<pre><code>document.addEventListener(\"DOMContentLoaded\", function(event) { \n  //do work\n});\n</code></pre>\n\n<p>jQuery's native function is much more complicated than just window.onload, as depicted below.  </p>\n\n<pre><code>function bindReady(){\n    if ( readyBound ) return;\n    readyBound = true;\n\n    // Mozilla, Opera and webkit nightlies currently support this event\n    if ( document.addEventListener ) {\n        // Use the handy event callback\n        document.addEventListener( \"DOMContentLoaded\", function(){\n            document.removeEventListener( \"DOMContentLoaded\", arguments.callee, false );\n            jQuery.ready();\n        }, false );\n\n    // If IE event model is used\n    } else if ( document.attachEvent ) {\n        // ensure firing before onload,\n        // maybe late but safe also for iframes\n        document.attachEvent(\"onreadystatechange\", function(){\n            if ( document.readyState === \"complete\" ) {\n                document.detachEvent( \"onreadystatechange\", arguments.callee );\n                jQuery.ready();\n            }\n        });\n\n        // If IE and not an iframe\n        // continually check to see if the document is ready\n        if ( document.documentElement.doScroll &amp;&amp; window == window.top ) (function(){\n            if ( jQuery.isReady ) return;\n\n            try {\n                // If IE is used, use the trick by Diego Perini\n                // http://javascript.nwbox.com/IEContentLoaded/\n                document.documentElement.doScroll(\"left\");\n            } catch( error ) {\n                setTimeout( arguments.callee, 0 );\n                return;\n            }\n\n            // and execute any waiting functions\n            jQuery.ready();\n        })();\n    }\n\n    // A fallback to window.onload, that will always work\n    jQuery.event.add( window, \"load\", jQuery.ready );\n}\n</code></pre>\n",
    "score": 779,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1385845,
      "name": "Chad Grant",
      "reputation": 28014
    }
  },
  {
    "soID": 30240294,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/30240294",
    "title": null,
    "body": "<p>A simple example is </p>\n\n<pre><code>2 == '2'  -&gt; true, values are SAME because of type conversion.\n\n2 === '2'  -&gt; false, values are NOT SAME because of no type conversion.\n</code></pre>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1392727,
      "name": "Vikas",
      "reputation": 2372
    }
  },
  {
    "soID": 13449059,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/13449059",
    "title": null,
    "body": "<pre><code> var currenturl = jQuery(location).attr('href');\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1398737,
      "name": "hari maliya",
      "reputation": 473
    }
  },
  {
    "soID": 18862362,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/18862362",
    "title": null,
    "body": "<p>Plain JavaScript is very simple and much less overhead:</p>\n\n<pre><code>var elements = document.getElementsByClassName('myCheckBox');\nfor(var i = 0; i &lt; elements.length; i++)\n{\n    elements[i].checked = true;\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/Zup4m/\">Example here</a></p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1399491,
      "name": "Alex W",
      "reputation": 23170
    }
  },
  {
    "soID": 25921504,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/25921504",
    "title": null,
    "body": "<p><strong>Deep copy by performance:</strong>\nRanked from best to worst</p>\n\n<ul>\n<li>Reassignment \"=\" (string arrays, number arrays - only)</li>\n<li>Slice (string arrays, number arrays - only)</li>\n<li>Concatenation (string arrays, number arrays - only)</li>\n<li>Custom function: for-loop or recursive copy</li>\n<li>jQuery's $.extend</li>\n<li>JSON.parse (string arrays, number arrays, object arrays - only)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Underscore.js\" rel=\"nofollow noreferrer\">Underscore.js</a>'s _.clone (string arrays, number arrays - only)</li>\n<li>Lo-Dash's _.cloneDeep</li>\n</ul>\n\n<p><strong>Deep copy an array of strings or numbers (one level - no reference pointers):</strong></p>\n\n<p>When an array contains numbers and strings - functions like .slice(), .concat(), .splice(), the assignment operator \"=\", and Underscore.js's clone function; will make a deep copy of the array's elements.</p>\n\n<p>Where reassignment has the fastest performance:</p>\n\n<pre><code>var arr1 = ['a', 'b', 'c'];\nvar arr2 = arr1;\narr1 = ['a', 'b', 'c'];\n</code></pre>\n\n<p>And .slice() has better performance than .concat(),\n<a href=\"http://jsperf.com/duplicate-array-slice-vs-concat/3\" rel=\"nofollow noreferrer\">http://jsperf.com/duplicate-array-slice-vs-concat/3</a></p>\n\n<pre><code>var arr1 = ['a', 'b', 'c'];  // Becomes arr1 = ['a', 'b', 'c']\nvar arr2a = arr1.slice(0);   // Becomes arr2a = ['a', 'b', 'c'] - deep copy\nvar arr2b = arr1.concat();   // Becomes arr2b = ['a', 'b', 'c'] - deep copy\n</code></pre>\n\n<p><strong>Deep copy an array of objects (two or more levels - reference pointers):</strong></p>\n\n<pre><code>var arr1 = [{object:'a'}, {object:'b'}];\n</code></pre>\n\n<p>Write a custom function (has faster performance than $.extend() or JSON.parse):</p>\n\n<pre><code>function copy(o) {\n   var out, v, key;\n   out = Array.isArray(o) ? [] : {};\n   for (key in o) {\n       v = o[key];\n       out[key] = (typeof v === \"object\") ? copy(v) : v;\n   }\n   return out;\n}\n\ncopy(arr1);\n</code></pre>\n\n<p>Use third-party utility functions:</p>\n\n<pre><code>$.extend(true, [], arr1); // Jquery Extend\nJSON.parse(arr1);\n_.cloneDeep(arr1); // Lo-dash\n</code></pre>\n\n<p>Where jQuery's $.extend has better performance:</p>\n\n<ul>\n<li><a href=\"http://jsperf.com/js-deep-copy/2\" rel=\"nofollow noreferrer\">http://jsperf.com/js-deep-copy/2</a></li>\n<li><a href=\"http://jsperf.com/jquery-extend-vs-json-parse/2\" rel=\"nofollow noreferrer\">http://jsperf.com/jquery-extend-vs-json-parse/2</a></li>\n</ul>\n",
    "score": 46,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10727873,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/10727873",
    "title": null,
    "body": "<p>@guinaps> Any string which isn't the empty string will evaluate to true by using them.</p>\n\n<p>How about using the String.match() method</p>\n\n<pre><code>var str=\"true\";\nvar boolStr=Boolean(str.match(/^true$/i)); \n</code></pre>\n\n<p>this alone won't get the 1/0 or the yes/no, but it will catch the TRUE/true, as well, it will return false for any string that happens to have  \"true\" as a substring.</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>Below is a function to handle true/false, 1/0, yes/no (case-insensitive)</p>\n\n<pre><code>​function stringToBool(str) {\n    var bool;\n    if (str.match(/^(true|1|yes)$/i) !== null) {\n        bool = true;\n    } else if (str.match(/^(false|0|no)*$/i) !== null) {\n        bool = false;\n    } else {\n        bool = null;\n        if (console) console.log('\"' + str + '\" is not a boolean value');\n    }\n    return bool;\n}\n\nstringToBool('1'); // true\nstringToBool('No'); // false\nstringToBool('falsey'); // null (\"falsey\" is not a boolean value.)\nstringToBool(''); // false\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19208820,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/19208820",
    "title": null,
    "body": "<p>Use:</p>\n\n<pre><code>var myArray = ['yellow', 'orange', 'red'] ;\n\nalert(!!~myArray.indexOf('red')); //true\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/An5jQ/\" rel=\"nofollow noreferrer\">Demo</a></p>\n\n<p>To know exactly what the <code>tilde</code> <code>~</code> do at this point, refer to this question <em><a href=\"https://stackoverflow.com/questions/12299665/what-does-a-tilde-do-when-it-precedes-an-expression\">What does a tilde do when it precedes an expression?</a></em>.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1410185,
      "name": "Mina Gabriel",
      "reputation": 7167
    }
  },
  {
    "soID": 16666424,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/16666424",
    "title": null,
    "body": "<p>Here is a simple function to generate timestamp in the format: mm/dd/yy hh:mi:ss </p>\n\n<pre><code>function getTimeStamp() {\n    var now = new Date();\n    return ((now.getMonth() + 1) + '/' +\n            (now.getDate()) + '/' +\n             now.getFullYear() + \" \" +\n             now.getHours() + ':' +\n             ((now.getMinutes() &lt; 10)\n                 ? (\"0\" + now.getMinutes())\n                 : (now.getMinutes())) + ':' +\n             ((now.getSeconds() &lt; 10)\n                 ? (\"0\" + now.getSeconds())\n                 : (now.getSeconds())));\n}\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1411589,
      "name": "deepakssn",
      "reputation": 2451
    }
  },
  {
    "soID": 36079433,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/36079433",
    "title": null,
    "body": "<p>if you want to combine 2 arrays without the duplicate you may try the code below</p>\n\n<pre><code>array_merge = function (arr1, arr2) {\n  return arr1.concat(arr2.filter(function(item){\n    return arr1.indexOf(item) &lt; 0;\n  }))\n}\n</code></pre>\n\n<p><strong>usage:</strong></p>\n\n<pre><code>array1 = ['1', '2', '3']\narray2 = ['2', '3', '4', '5']\ncombined_array = array_merge(array1, array2)\n</code></pre>\n\n<p><strong>Output:</strong>\n[1,2,3,4,5]    </p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 18041188,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/18041188",
    "title": null,
    "body": "<p><strong>There is no one better solution</strong>; however, I would like to argue that double quotes may be more desirable at times:</p>\n\n<ul>\n<li><strong>Newcomers will already be familiar with double quotes from their language</strong>.  In English, we must use double quotes <code>\"</code> to identify a passage of quoted text.  If we were to use a single quote <code>'</code>, the reader may misinterpret it as a contraction.  The other meaning of a passage of text surrounded by the <code>'</code> indicates the 'colloquial' meaning.  It makes sense to stay consistent with pre-existing languages, and this may likely ease the learning and interpretation of code.</li>\n<li><strong>Double quotes eliminate the need to escape apostrophes</strong> (as in contractions).  Consider the string: <code>\"I'm going to the mall\"</code>, vs. the otherwise escaped version: <code>'I\\'m going to the mall'</code>.</li>\n<li><p><strong>Double quotes mean a string in many other languages</strong>.  When you learn a new language like Java or C, double quotes are always used.  </p></li>\n<li><p><strong>JSON notation is written with double quotes.</strong></p></li>\n</ul>\n\n<p>Nonetheless, as others have stated, it is most important to remain consistent.</p>\n",
    "score": 183,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11552927,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/11552927",
    "title": null,
    "body": "<p>Ignoring whitespace strings, you could use this to check for null, empty and undefined :</p>\n\n<pre><code>var obj = {};\n(!!obj.str) //returns false\n\nobj.str = \"\";\n(!!obj.str) //returns false\n\nobj.str = null;\n(!!obj.str) //returns false\n</code></pre>\n\n<p>Concise and it works for undefined properties, although it's not the most readable.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1452807,
      "name": "mricci",
      "reputation": 435
    }
  },
  {
    "soID": 26320800,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/26320800",
    "title": null,
    "body": "<p>In light of the \"named functions show up in stack traces\" argument, modern JavaScript engines are actually quite capable of representing anonymous functions.</p>\n\n<p>As of this writing, V8, SpiderMonkey, Chakra and Nitro always refer to named functions by their names. They almost always refer to an anonymous function by its identifier if it has one.</p>\n\n<p>SpiderMonkey can figure out the name of an anonymous function returned from another function. The rest can't.</p>\n\n<p>If you really, really wanted your iterator and success callbacks to show up in the trace, you could name those too...</p>\n\n<pre><code>[].forEach(function iterator() {});\n</code></pre>\n\n<p>But for the most part it's not worth stressing over.</p>\n\n<h2>Harness (<a href=\"http://jsfiddle.net/us9dg6y8/\">Fiddle</a>)</h2>\n\n<pre><code>'use strict';\n\nvar a = function () {\n    throw new Error();\n},\n    b = function b() {\n        throw new Error();\n    },\n    c = function d() {\n        throw new Error();\n    },\n    e = {\n        f: a,\n        g: b,\n        h: c,\n        i: function () {\n            throw new Error();\n        },\n        j: function j() {\n            throw new Error();\n        },\n        k: function l() {\n            throw new Error();\n        }\n    },\n    m = (function () {\n        return function () {\n            throw new Error();\n        };\n    }()),\n    n = (function () {\n        return function n() {\n            throw new Error();\n        };\n    }()),\n    o = (function () {\n        return function p() {\n            throw new Error();\n        };\n    }());\n\nconsole.log([a, b, c].concat(Object.keys(e).reduce(function (values, key) {\n    return values.concat(e[key]);\n}, [])).concat([m, n, o]).reduce(function (logs, func) {\n\n    try {\n        func();\n    } catch (error) {\n        return logs.concat('func.name: ' + func.name + '\\n' +\n                           'Trace:\\n' +\n                           error.stack);\n        // Need to manually log the error object in Nitro.\n    }\n\n}, []).join('\\n\\n'));\n</code></pre>\n\n<h2>V8</h2>\n\n<pre><code>func.name: \nTrace:\nError\n    at a (http://localhost:8000/test.js:4:11)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: b\nTrace:\nError\n    at b (http://localhost:8000/test.js:7:15)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: d\nTrace:\nError\n    at d (http://localhost:8000/test.js:10:15)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: \nTrace:\nError\n    at a (http://localhost:8000/test.js:4:11)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: b\nTrace:\nError\n    at b (http://localhost:8000/test.js:7:15)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: d\nTrace:\nError\n    at d (http://localhost:8000/test.js:10:15)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: \nTrace:\nError\n    at e.i (http://localhost:8000/test.js:17:19)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: j\nTrace:\nError\n    at j (http://localhost:8000/test.js:20:19)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: l\nTrace:\nError\n    at l (http://localhost:8000/test.js:23:19)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: \nTrace:\nError\n    at http://localhost:8000/test.js:28:19\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: n\nTrace:\nError\n    at n (http://localhost:8000/test.js:33:19)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27\n\nfunc.name: p\nTrace:\nError\n    at p (http://localhost:8000/test.js:38:19)\n    at http://localhost:8000/test.js:47:9\n    at Array.reduce (native)\n    at http://localhost:8000/test.js:44:27 test.js:42\n</code></pre>\n\n<h2>SpiderMonkey</h2>\n\n<pre><code>func.name: \nTrace:\na@http://localhost:8000/test.js:4:5\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: b\nTrace:\nb@http://localhost:8000/test.js:7:9\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: d\nTrace:\nd@http://localhost:8000/test.js:10:9\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: \nTrace:\na@http://localhost:8000/test.js:4:5\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: b\nTrace:\nb@http://localhost:8000/test.js:7:9\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: d\nTrace:\nd@http://localhost:8000/test.js:10:9\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: \nTrace:\ne.i@http://localhost:8000/test.js:17:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: j\nTrace:\nj@http://localhost:8000/test.js:20:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: l\nTrace:\nl@http://localhost:8000/test.js:23:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: \nTrace:\nm&lt;/&lt;@http://localhost:8000/test.js:28:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: n\nTrace:\nn@http://localhost:8000/test.js:33:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n\n\nfunc.name: p\nTrace:\np@http://localhost:8000/test.js:38:13\n@http://localhost:8000/test.js:47:9\n@http://localhost:8000/test.js:54:1\n</code></pre>\n\n<h2>Chakra</h2>\n\n<pre><code>func.name: undefined\nTrace:\nError\n   at a (http://localhost:8000/test.js:4:5)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at b (http://localhost:8000/test.js:7:9)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at d (http://localhost:8000/test.js:10:9)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at a (http://localhost:8000/test.js:4:5)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at b (http://localhost:8000/test.js:7:9)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at d (http://localhost:8000/test.js:10:9)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at e.i (http://localhost:8000/test.js:17:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at j (http://localhost:8000/test.js:20:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at l (http://localhost:8000/test.js:23:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at Anonymous function (http://localhost:8000/test.js:28:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at n (http://localhost:8000/test.js:33:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n\n\nfunc.name: undefined\nTrace:\nError\n   at p (http://localhost:8000/test.js:38:13)\n   at Anonymous function (http://localhost:8000/test.js:47:9)\n   at Global code (http://localhost:8000/test.js:42:1)\n</code></pre>\n\n<h2>Nitro</h2>\n\n<pre><code>func.name: \nTrace:\na@http://localhost:8000/test.js:4:22\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: b\nTrace:\nb@http://localhost:8000/test.js:7:26\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: d\nTrace:\nd@http://localhost:8000/test.js:10:26\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: \nTrace:\na@http://localhost:8000/test.js:4:22\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: b\nTrace:\nb@http://localhost:8000/test.js:7:26\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: d\nTrace:\nd@http://localhost:8000/test.js:10:26\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: \nTrace:\ni@http://localhost:8000/test.js:17:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: j\nTrace:\nj@http://localhost:8000/test.js:20:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: l\nTrace:\nl@http://localhost:8000/test.js:23:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: \nTrace:\nhttp://localhost:8000/test.js:28:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: n\nTrace:\nn@http://localhost:8000/test.js:33:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n\nfunc.name: p\nTrace:\np@http://localhost:8000/test.js:38:30\nhttp://localhost:8000/test.js:47:13\nreduce@[native code]\nglobal code@http://localhost:8000/test.js:44:33\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1468130,
      "name": "Jackson",
      "reputation": 4446
    }
  },
  {
    "soID": 17666910,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/17666910",
    "title": null,
    "body": "<pre><code>$('controlCheckBox').click(function(){\n    var temp = $(this).prop('checked');\n    $('controlledCheckBoxes').prop('checked', temp);\n});\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1471004,
      "name": "mahmoh",
      "reputation": 597
    }
  },
  {
    "soID": 33735369,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/33735369",
    "title": null,
    "body": "<p>One can use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Set\" rel=\"nofollow noreferrer\">Set</a> that has the method \"has()\":</p>\n\n<pre><code>function contains(arr, obj) {\n  var proxy = new Set(arr);\n  if (proxy.has(obj))\n    return true;\n  else\n    return false;\n}\n\nvar arr = ['Happy', 'New', 'Year'];\nconsole.log(contains(arr, 'Happy'));\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1477299,
      "name": "rlib",
      "reputation": 2490
    }
  },
  {
    "soID": 31813540,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/31813540",
    "title": null,
    "body": "<p>This is a classic case of where a tweak to the HTML would be a better solution. Why not set the click on the elements which don't contain the menu item? Then you don't need to add the propagation.</p>\n\n<pre><code>$('.header, .footer, .main-content').click(function() {\n//Hide the menus if visible\n});\n</code></pre>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17024867,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/17024867",
    "title": null,
    "body": "<p>In jQuery,</p>\n\n<pre><code>if($(\"#checkboxId\").is(':checked')){\n    alert(\"Checked\");\n}\n</code></pre>\n\n<p>or </p>\n\n<pre><code>if($(\"#checkboxId\").attr('checked')==true){\n    alert(\"Checked\");\n}\n</code></pre>\n\n<p>In JavaScript,</p>\n\n<pre><code>if (document.getElementById(\"checkboxID\").checked){\n    alert(\"Checked\");\n}\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1497812,
      "name": "ijarlax",
      "reputation": 405
    }
  },
  {
    "soID": 23492646,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/23492646",
    "title": null,
    "body": "<p>When testing an element against <code>:hidden</code> selector in jQuery it should be considered that <strong>an absolute positioned element may be recognized as hidden although their child elements are visible</strong>.</p>\n\n<p>This seems somewhat counter-intuitive in the first place – though having a closer look at the jQuery documentation gives the relevant information:</p>\n\n<blockquote>\n  <p>Elements can be considered hidden for several reasons: [...] Their width and height are explicitly set to 0. [...]</p>\n</blockquote>\n\n<p>So this actually makes sense in regards to the box-model and the computed style for the element. Even if width and height are not set <em>explicitly</em> to 0 they may be set <em>implicitly</em>.</p>\n\n<p>Have a look at the following example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log($('.foo').is(':hidden')); // true\r\nconsole.log($('.bar').is(':hidden')); // false</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.foo {\r\n  position: absolute;\r\n  left: 10px;\r\n  top: 10px;\r\n  background: #ff0000;\r\n}\r\n\r\n.bar {\r\n  position: absolute;\r\n  left: 10px;\r\n  top: 10px;\r\n  width: 20px;\r\n  height: 20px;\r\n  background: #0000ff;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;div class=\"foo\"&gt;\r\n  &lt;div class=\"bar\"&gt;&lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<p><strong>UPDATE FOR JQUERY 3.x:</strong></p>\n\n<p>With jQuery 3 the described behavior will change! Elements will be considered visible if they have any layout boxes, including those of zero width and/or height.</p>\n\n<p>JSFiddle with jQuery 3.0.0-alpha1:</p>\n\n<p><a href=\"http://jsfiddle.net/pM2q3/7/\">http://jsfiddle.net/pM2q3/7/</a></p>\n\n<p>The same JS will then have this output:</p>\n\n<pre><code>console.log($('.foo').is(':hidden')); // false\nconsole.log($('.bar').is(':hidden')); // false\n</code></pre>\n",
    "score": 65,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1510754,
      "name": "conceptdeluxe",
      "reputation": 2290
    }
  },
  {
    "soID": 11446757,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/11446757",
    "title": null,
    "body": "<p><strong><em>I provide multiple solutions with descriptions in this answer.<br>\nfeel free to ask questions if anything is unclear</em></strong><br>\nps: sadly someone merged this to the top answer without giving credit.</p>\n\n<hr>\n\n<p><strong>Quick and Dirty solution:</strong></p>\n\n<pre><code>Date.now() /1000 |0\n</code></pre>\n\n<blockquote>\n  <p><strong><em>Warning</strong>: it <strong>might</strong> break in 2038 and return negative numbers if you do the <code>|0</code> magic.   use <code>Math.floor()</code> instead by that time</em></p>\n</blockquote>\n\n<p><strong><code>Math.floor()</code> solution:</strong></p>\n\n<pre><code>Math.floor(Date.now() /1000);\n</code></pre>\n\n<hr>\n\n<p><strong>some nerdy alternative by <a href=\"//stackoverflow.com/users/283863\">Derek 朕會功夫</a> taken from the comments below this answer:</strong></p>\n\n<pre><code>new Date/1e3|0\n</code></pre>\n\n<hr>\n\n<p><strong>Polyfill to get <code>Date.now()</code> working:</strong></p>\n\n<p>to get it working in IE you could do this (Polyfill from <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\">MDN</a>):</p>\n\n<pre><code>if (!Date.now) {\n    Date.now = function now() {\n        return new Date().getTime();\n    };\n}\n</code></pre>\n\n<hr>\n\n<p><strong>if you do not care about the year / day of week / daylight saving time you could strip it away and use this after 2038:</strong>  </p>\n\n<pre><code>var now = (function () {\n    var year = new Date(new Date().getFullYear().toString()).getTime();\n    return function () {\n        return Date.now() - year\n    }\n})();\n</code></pre>\n\n<blockquote>\n  <p>some output of how it will look:</p>\n\n<pre><code>new Date()\nThu Oct 29 2015 08:46:30 GMT+0100 (Mitteleuropäische Zeit )\nnew Date(now())\nThu Oct 29 1970 09:46:30 GMT+0100 (Mitteleuropäische Zeit )\n</code></pre>\n  \n  <p>of course it will break daylight saving time but depending on what you\n  are building this might be usefull to you if you need to do binary\n  operations on timestamps after int32 will break in 2038</p>\n  \n  <p>this will also return negative values but only if the user of that pc\n  you are running your code on is changing his pc's clock at least to\n  31th of december of the previous year.</p>\n</blockquote>\n\n<hr>\n\n<p>if you just want to know the relative time from the point of when the code was run through first you could use something like this:</p>\n\n<pre><code>var relativeTime = (function () {\n    var start = Date.now();\n    return function () {\n        return Date.now() - start\n    }\n})();\n</code></pre>\n\n<hr>\n\n<p><strong>in case you are using jQuery you could use <code>$.now()</code> as described in <a href=\"http://api.jquery.com/jquery.now/\">jQuery's Docs</a> wich makes the Polyfill obsolete since they are doing the same: <code>(new Date).getTime()</code></strong></p>\n\n<p>if you are just happy about jQuery's version consider upvoting <a href=\"//stackoverflow.com/a/15434736/1519836\"><strong>this</strong></a> answer since i did not find it myself.</p>\n\n<hr>\n\n<p><strong>now a tiny explaination of what <code>|0</code> does:</strong></p>\n\n<p>by providing <code>|</code> you tell the interpreter to do a binary OR operation.<br>\nbit operations require absolute numbers wich turns the decimal result from <code>Date.now() / 1000</code> into an absolut number.<br>\nduring that convertion, decimals are just removed, resulting in the same result as using <code>Math.floor()</code> but using less code.</p>\n\n<blockquote>\n  <p><strong>be warned though:</strong> it will convert a 64 bit double to a 32 bit integer.<br>\n  this will result in informationloss when dealing with huge numbers.<br>\n  timestamps will break after 2038 due to a int32 overflow.</p>\n</blockquote>\n\n<hr>\n\n<p><strong>for further information about Date.now follow this Link: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\">Date.now() @ MDN</a></strong></p>\n",
    "score": 74,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1519836,
      "name": "GottZ",
      "reputation": 2495
    }
  },
  {
    "soID": 29838350,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/29838350",
    "title": null,
    "body": "<p>works perfectly and very simple: </p>\n\n<pre><code>var boolean = \"false\";\nboolean = (boolean === \"true\");\n\n//boolean = JSON.parse(boolean); //or this way.. \n</code></pre>\n\n<p>to test it: </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var boolean = \"false\";\r\nboolean = (boolean === \"true\");\r\n\r\n//boolean = JSON.parse(boolean); //or this way.. \r\n\r\nif(boolean == true){\r\n    alert(\"boolean = \"+boolean);\r\n}else{\r\n    alert(\"boolean = \"+boolean);\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 27727752,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/27727752",
    "title": null,
    "body": "<p>ECMAScript 7 introduces <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\" rel=\"noreferrer\"><code>Array.prototype.includes</code></a>.</p>\n\n<p>It can be used like this:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>[1, 2, 3].includes(2); // true\n[1, 2, 3].includes(4); // false\n</code></pre>\n\n<p>It also accepts an optional second argument <code>fromIndex</code>:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>[1, 2, 3].includes(3, 3); // false\n[1, 2, 3].includes(3, -1); // true\n</code></pre>\n\n<p>Unlike <code>indexOf</code>, which uses <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-strict-equality-comparison\" rel=\"noreferrer\">Strict Equality Comparison</a>, <code>includes</code> compares using <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-samevaluezero\" rel=\"noreferrer\">SameValueZero</a> equality algorithm. That means that you can detect if an array includes a <code>NaN</code>:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>[1, 2, NaN].includes(NaN); // true\n</code></pre>\n\n<p>Also unlike <code>indexOf</code>, <code>includes</code> does not skip missing indices:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>new Array(5).includes(undefined); // true\n</code></pre>\n\n<p>Currently it's still a draft but can be <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill\" rel=\"noreferrer\">polyfilled</a> to make it work on all browsers.</p>\n",
    "score": 96,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1529630,
      "name": "Oriol",
      "reputation": 118791
    }
  },
  {
    "soID": 19332136,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/19332136",
    "title": null,
    "body": "<p>Another possible solution:</p>\n\n<pre><code>    var c = $(\"#checkboxid\");\n    if (c.is(\":checked\")) {\n         $('#checkboxid').prop('checked', false);\n    } else {\n         $('#checkboxid').prop('checked', true);\n    }\n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1531657,
      "name": "Muhammad Aamir Ali",
      "reputation": 11404
    }
  },
  {
    "soID": 36705508,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/36705508",
    "title": null,
    "body": "<p>Take care, maybe in the future the code change and return boolean instead of one string at the moment.</p>\n\n<p>The solution would be:</p>\n\n<pre><code>//Currently\nvar isTrue = 'true';\n//In the future (Other developer change the code)\nvar isTrue = true;\n//The solution to both cases\n(isTrue).toString() == 'true'\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24388896,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/24388896",
    "title": null,
    "body": "<h2>Global Scope :</h2>\n\n<p>Global variables are exactly like global stars (Jackie Chan, Nelson Mandela). You can access them (get or set the value), from any part of your application. Global functions are like global events (New Year, Christmas). You can execute (call) them from any part of your application.</p>\n\n<pre><code>//global variable\nvar a = 2;\n\n//global function\nfunction b(){\n   console.log(a);  //access global variable\n}\n</code></pre>\n\n<h2>Local Scope :</h2>\n\n<p>If you are in the USA, you may know Kim Kardashian, infamous celebrity ( she somehow manages to make the tabloids). But people outside of the USA will not recognize her. She is a local star, bound to her territory.</p>\n\n<p>Local variables are like local stars. You can only access them (get or set the value) inside the scope. A local function is like local events - you can execute only (celebrate) inside that scope. If you want to access them from outside of the scope, you will get a reference error</p>\n\n<pre><code>function b(){\n   var d = 21; //local variable\n   console.log(d);\n\n   function dog(){  console.log(a); }\n     dog(); //execute local function\n}\n\n console.log(d); //ReferenceError: dddddd is not defined    \n</code></pre>\n\n<hr>\n\n<p><a href=\"http://www.thatjsdude.com/jsConcepts/concepts/scope.html\" rel=\"nofollow\">Check this article for in-depth understanding of scope</a> </p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1535443,
      "name": "KhanSharp",
      "reputation": 6211
    }
  },
  {
    "soID": 19602603,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/19602603",
    "title": null,
    "body": "<p>more simpler way:</p>\n\n<pre><code>var timeStamp=event.timestamp || new Date().getTime();\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1548301,
      "name": "Vicky Gonsalves",
      "reputation": 7347
    }
  },
  {
    "soID": 11633978,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/11633978",
    "title": null,
    "body": "<p>Let's look what a reference do.</p>\n\n<p>Inside jquery.js, every string are double-quoted. </p>\n\n<p>So, beginning now, I'll use double-quoted strings. (I was using single!)</p>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 45612369,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/45612369",
    "title": null,
    "body": "<p>i use single quotes most of the time, becaus when developing in php, single quoted-string are in no way altered, wich is what i want. when i use</p>\n\n<pre><code>echo \"$xyz\";\n</code></pre>\n\n<p>in php, $xyz gets evaluated, wich is NOT what i want. theresfore i always use ' instead of \" when it comes to web development. so i ensure at least string-consistency when it comes to php/jscript. </p>\n\n<p>unfortunatly this can't be done in java or objective c, where '' stands for char and \"\" stands for string. but this is another question.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16919498,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/16919498",
    "title": null,
    "body": "<p>To check if it is not visible I use <code>!</code>:</p>\n\n<pre><code>if ( !$('#book').is(':visible')) {\n    alert('#book is not visible')\n}\n</code></pre>\n\n<p>Or the following is also the sam, saving the jQuery selector in a variable to have better performance when you need it multiple times:</p>\n\n<pre><code>var $book = $('#book')\n\nif(!$book.is(':visible')) {\n    alert('#book is not visible')\n}\n</code></pre>\n",
    "score": 46,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1559329,
      "name": "Matthias Wegtun",
      "reputation": 931
    }
  },
  {
    "soID": 21744656,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/21744656",
    "title": null,
    "body": "<p>So, when you are doing some JavaScript things with an <code>&lt;a /&gt;</code> tag and if you put <code>href=\"#\"</code> as well, you can add <strong>return false</strong> at the end of the event <em>(in case of inline event binding)</em> like:</p>\n\n<pre><code>&lt;a href=\"#\" onclick=\"myJsFunc(); return false;\"&gt;Run JavaScript Code&lt;/a&gt;\n</code></pre>\n\n<p><em>Or you can change the <strong>href</strong> attribute with JavaScript like:</em></p>\n\n<pre><code>&lt;a href=\"javascript://\" onclick=\"myJsFunc();\"&gt;Run JavaScript Code&lt;/a&gt;\n</code></pre>\n\n<p><strong>or</strong></p>\n\n<pre><code>&lt;a href=\"javascript:void(0)\" onclick=\"myJsFunc();\"&gt;Run JavaScript Code&lt;/a&gt;\n</code></pre>\n\n<hr>\n\n<p>But semantically, all the above ways to achieve this are wrong <em>(it works fine though)</em>. If any element is not created to navigate the page and that have some JavaScript things associated with it, then it should not be a <code>&lt;a&gt;</code> tag. </p>\n\n<p>You can simply use a <code>&lt;button /&gt;</code> instead to do things or any other element like b, span or whatever fits there as per your need, because you are allowed to add events on all the elements.</p>\n\n<hr>\n\n<p>So, <strong>there is one benefit</strong> to use <code>&lt;a href=\"#\"&gt;</code>. You get the cursor pointer by default on that element when you do <code>a href=\"#\"</code>. For that, I think you can use CSS for this like <code>cursor:pointer;</code> which solves this problem also.</p>\n\n<p>And at the end, if you are binding the event from the JavaScript code itself, there you can do <code>event.preventDefault()</code> to achieve this if you are using <code>&lt;a&gt;</code> tag, but if you are not using a <code>&lt;a&gt;</code> tag for this, there you get an advantage, you don't need to do this.</p>\n\n<p>So, if you see, it's better not to use a tag for this kind of stuff.</p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 27819913,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/27819913",
    "title": null,
    "body": "<p>One-liner:</p>\n\n<pre><code>function contains(arr, x) {\n    return arr.filter(function(elem) { return elem == x }).length &gt; 0;\n}\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1563935,
      "name": "AlonL",
      "reputation": 1830
    }
  },
  {
    "soID": 11741988,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/11741988",
    "title": null,
    "body": "<p>I have not noticed an answer that takes into account the possibility of null characters in a string. For example, if we have a null character string:</p>\n\n<pre><code>var y = \"\\0\"; // an empty string, but has a null character\n(y === \"\") // false, testing against an empty string does not work\n(y.length === 0) // false\n(y) // true, this is also not expected\n(y.match(/^[\\s]*$/)) // false, again not wanted\n</code></pre>\n\n<p>To test its nullness one could do something like this:</p>\n\n<pre><code>String.prototype.isNull = function(){ \n  return Boolean(this.match(/^[\\0]*$/)); \n}\n...\n\"\\0\".isNull() // true\n</code></pre>\n\n<p>It works on a null string, and on an empty string and it is accessible for all strings. In addition, it could be expanded to contain other JavaScript empty or whitespace characters (i.e. nonbreaking space, byte order mark, line/paragraph separator, etc.).</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1565905,
      "name": "Bikush",
      "reputation": 508
    }
  },
  {
    "soID": 16582081,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/16582081",
    "title": null,
    "body": "<p>This will return the absolute <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"noreferrer\">URL</a> of the current page using JavaScript/<a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"noreferrer\">jQuery</a>. </p>\n\n<ul>\n<li><p><code>document.URL</code></p></li>\n<li><p><code>$(\"*\").context.baseURI</code></p></li>\n<li><p><code>location.href</code></p></li>\n</ul>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1570636,
      "name": "user1570636",
      "reputation": 404
    }
  },
  {
    "soID": 20061566,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/20061566",
    "title": null,
    "body": "<p>I ended up doing something like this:</p>\n\n<pre><code>$(document).on('click', 'body, #msg_count_results .close',function() {\n    $(document).find('#msg_count_results').remove();\n});\n$(document).on('click','#msg_count_results',function(e) {\n    e.preventDefault();\n    return false;\n});\n</code></pre>\n\n<p>I have a close button within the new container for end users friendly UI purposes. I had to use return false in order to not go through. Of course, having an A HREF on there to take you somewhere would be nice, or you could call some ajax stuff instead. Either way, it works ok for me. Just what I wanted.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12007257,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/12007257",
    "title": null,
    "body": "<p>For me, if I code in a VIM editor and if something is enclosed in single quotes, I can double-click to select ONLY the text within the quotes. Double quotes, on the other hand, includes the quote marks which I find annoying when I want to do some quick copy and pasting.</p>\n\n<p>E.g. 'myVar' double-click in VIM editor copies: >myVar&lt;\n\"myVar\" literally copies: >\"myVar\"&lt; and when I paste, I have to delete the quote marks either side.</p>\n\n<p>My two cents anyway...</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 29890170,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/29890170",
    "title": null,
    "body": "<p>Example of using the <strong>visible</strong> check for adblocker is activated:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(document).ready(function(){\r\n  if(!$(\"#ablockercheck\").is(\":visible\"))\r\n    $(\"#ablockermsg\").text(\"Please disable adblocker.\").show();\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;div class=\"ad-placement\" id=\"ablockercheck\"&gt;&lt;/div&gt;\r\n&lt;div id=\"ablockermsg\" style=\"display: none\"&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>\"ablockercheck\" is a ID which adblocker blocks. So checking it if it is visible you are able to detect if adblocker is turned On.</p>\n",
    "score": 41,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1602375,
      "name": "Roman Losev",
      "reputation": 1181
    }
  },
  {
    "soID": 31868754,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/31868754",
    "title": null,
    "body": "<p><strong>Outside click plugin!</strong></p>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>$('.target-element').outsideClick(function(event){\n    //code that fires when user clicks outside the element\n    //event = the click event\n    //$(this) = the '.target-element' that is firing this function \n}, '.excluded-element')\n</code></pre>\n\n<p><strong>The code for it:</strong></p>\n\n<pre><code>(function($) {\n\n//when the user hits the escape key, it will trigger all outsideClick functions\n$(document).on(\"keyup\", function (e) {\n    if (e.which == 27) $('body').click(); //escape key\n});\n\n//The actual plugin\n$.fn.outsideClick = function(callback, exclusions) {\n    var subject = this;\n\n    //test if exclusions have been set\n    var hasExclusions = typeof exclusions !== 'undefined';\n\n    //switches click event with touch event if on a touch device\n    var ClickOrTouchEvent = \"ontouchend\" in document ? \"touchend\" : \"click\";\n\n    $('body').on(ClickOrTouchEvent, function(event) {\n        //click target does not contain subject as a parent\n        var clickedOutside = !$(event.target).closest(subject).length;\n\n        //click target was on one of the excluded elements\n        var clickedExclusion = $(event.target).closest(exclusions).length;\n\n        var testSuccessful;\n\n        if (hasExclusions) {\n            testSuccessful = clickedOutside &amp;&amp; !clickedExclusion;\n        } else {\n            testSuccessful = clickedOutside;\n        }\n\n        if(testSuccessful) {\n            callback.call(subject, event);\n        }\n    });\n\n    return this;\n};\n\n}(jQuery));\n</code></pre>\n\n<p>Adapted from this answer <a href=\"https://stackoverflow.com/a/3028037/1611058\">https://stackoverflow.com/a/3028037/1611058</a></p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22530755,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/22530755",
    "title": null,
    "body": "<p>I'd say the best way is to make an href anchor to an ID you'd never use, like #Do1Not2Use3This4Id5 or a similar ID, that you are 100% sure no one will use and won't offend people.</p>\n\n<ol>\n<li><code>Javascript:void(0)</code> is a bad idea and violates Content Security Policy on CSP-enabled HTTPS pages <a href=\"https://developer.mozilla.org/en/docs/Security/CSP\" rel=\"noreferrer\">https://developer.mozilla.org/en/docs/Security/CSP</a> (thanks to @jakub.g)</li>\n<li>Using just <code>#</code> will have the user jump back to the top when pressed</li>\n<li>Won't ruin the page if JavaScript isn't enabled (unless you have JavaScript  detecting code</li>\n<li>If JavaScript is enabled you can disable the default event</li>\n<li>You have to use href unless you know how to prevent your browser from selecting some text, (don't know if using 4 will remove the thing that stops the browser from selecting text)</li>\n</ol>\n\n<p>Basically no one mentioned 5 in this article which I think is important as your site comes off as unprofessional if it suddenly starts selecting things around the link.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16281173,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/16281173",
    "title": null,
    "body": "<p>The following are examples of useful code snippets that can be used – some of the examples use standard JavaScript functions and are not specific to jQuery:</p>\n\n<p>See <em><a href=\"http://www.designchemical.com/blog/index.php/jquery/8-useful-jquery-snippets-for-urls-querystrings/\" rel=\"noreferrer\">8 Useful jQuery Snippets For URL’s &amp; Querystrings</a></em>.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1621321,
      "name": "Issamovitch",
      "reputation": 198
    }
  },
  {
    "soID": 32477146,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/32477146",
    "title": null,
    "body": "<p>I'm listing out the differences below:</p>\n\n<ol>\n<li><p>A function declaration can be placed anywhere in the code. Even if it is invoked before the definition appears in code, it gets executed as function declaration is committed to memory or in a way it is hoisted up, before any other code in the page starts execution.</p>\n\n<p>Take a look at the function below:</p>\n\n<pre><code>function outerFunction() {\n    function foo() {\n       return 1;\n    }\n    return foo();\n    function foo() {\n       return 2;\n    }\n}\nalert(outerFunction()); // Displays 2\n</code></pre>\n\n<p>This is because, during execution, it looks like:-</p>\n\n<pre><code>function foo() {  // The first function declaration is moved to top\n    return 1;\n}\nfunction foo() {  // The second function declaration is moved to top\n    return 2;\n}\nfunction outerFunction() {\n    return foo();\n}\nalert(outerFunction()); //So executing from top to bottom,\n                        //the last foo() returns 2 which gets displayed\n</code></pre>\n\n<p>A function expression, if not defined before calling it, will result in an error. Also, here the function definition itself is not moved to the top or committed to memory like in the function declarations. But the variable to which we assign the function gets hoisted up and <strong>undefined</strong> gets assigned to it.</p>\n\n<p>Same function using function expressions:</p>\n\n<pre><code>function outerFunction() {\n    var foo = function() {\n       return 1;\n    }\n    return foo();\n    var foo = function() {\n       return 2;\n    }\n}\nalert(outerFunction()); // Displays 1\n</code></pre>\n\n<p>This is because during execution, it looks like:</p>\n\n<pre><code>function outerFunction() {\n   var foo = undefined;\n   var foo = undefined;\n\n   foo = function() {\n      return 1;\n   };\n   return foo ();\n   foo = function() {   // This function expression is not reachable\n      return 2;\n   };\n}\nalert(outerFunction()); // Displays 1\n</code></pre></li>\n<li><p>It is not safe to write function declarations in non-function blocks like <strong>if</strong> because they won't be accessible.</p>\n\n<pre><code>if (test) {\n    function x() { doSomething(); }\n}\n</code></pre></li>\n<li><p>Named function expression like the one below, may not work in Internet&nbsp;Explorer browsers prior to version 9.</p>\n\n<pre><code>var today = function today() {return new Date()}\n</code></pre></li>\n</ol>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1625434,
      "name": "varna",
      "reputation": 571
    }
  },
  {
    "soID": 17264572,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/17264572",
    "title": null,
    "body": "<pre><code>    MyLib.Convert.bool = function(param) {\n         var res = String(param).toLowerCase();\n         return !(!Boolean(res) || res === \"false\" || res === \"0\");\n     }; \n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15565496,
    "parentID": 306583,
    "url": "https://stackoverflow.com/q/15565496",
    "title": null,
    "body": "<p>You can find all img element of parent div like below</p>\n\n<pre><code>$(this).find('img') or $(this).children('img')\n</code></pre>\n\n<p>If you want specific img element you can write like this</p>\n\n<pre><code>$(this).children('img:nth(n)')  \n// where n is the child place in parent list start from 0 onwards\n</code></pre>\n\n<p>Your div contain only one img element. So for this below is right</p>\n\n<pre><code> $(this).find(\"img\").attr(\"alt\")\n                  OR\n  $(this).children(\"img\").attr(\"alt\")\n</code></pre>\n\n<p>But if your div contain more img element like below </p>\n\n<pre><code>&lt;div class=\"mydiv\"&gt;\n    &lt;img src=\"test.png\" alt=\"3\"&gt;\n    &lt;img src=\"test.png\" alt=\"4\"&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>then you can't use upper code to find alt value of second img element. So you can try this:</p>\n\n<pre><code> $(this).find(\"img:last-child\").attr(\"alt\")\n                   OR\n $(this).children(\"img:last-child\").attr(\"alt\")\n</code></pre>\n\n<p>This example shows a general idea that how you can find actual object within parent object.\nYou can use classes to differentiate your child object. That is easy and fun. i.e.</p>\n\n<pre><code>&lt;div class=\"mydiv\"&gt;\n    &lt;img class='first' src=\"test.png\" alt=\"3\"&gt;\n    &lt;img class='second' src=\"test.png\" alt=\"4\"&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>You can do this as below :</p>\n\n<pre><code> $(this).find(\".first\").attr(\"alt\")\n</code></pre>\n\n<p>and more specific as:</p>\n\n<pre><code> $(this).find(\"img.first\").attr(\"alt\")\n</code></pre>\n\n<p>You can use find or children as above code. For more visit Children <a href=\"http://api.jquery.com/children/\">http://api.jquery.com/children/</a> and Find <a href=\"http://api.jquery.com/find/\">http://api.jquery.com/find/</a>. \nSee example <a href=\"http://jsfiddle.net/lalitjs/Nx8a6/\">http://jsfiddle.net/lalitjs/Nx8a6/</a></p>\n",
    "score": 31,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1637683,
      "name": "Lalit Kumar",
      "reputation": 3161
    }
  },
  {
    "soID": 31542177,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/31542177",
    "title": null,
    "body": "<blockquote>\n  <p>Just want to add a snippet for non-destructive addition of an element.</p>\n</blockquote>\n\n<pre><code>var newArr = oldArr.concat([newEl]);\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12349771,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/12349771",
    "title": null,
    "body": "<p>Try this:</p>\n\n<pre><code>$('#checkboxid').get(0).checked = true;  //For checking\n\n$('#checkboxid').get(0).checked = false; //For unchecking\n</code></pre>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1659849,
      "name": "prashanth",
      "reputation": 259
    }
  },
  {
    "soID": 34592395,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/34592395",
    "title": null,
    "body": "<p>The following snippet shows initiating as well as aborting an Ajax request:</p>\n\n<pre><code>function libAjax(){\n  var req;\n  function start(){\n\n  req =    $.ajax({\n              url: '1.php',\n              success: function(data){\n                console.log(data)\n              }\n            });\n\n  }\n\n  function stop(){\n    req.abort();\n  }\n\n  return {start:start,stop:stop}\n}\n\nvar obj = libAjax();\n\n $(\".go\").click(function(){\n\n\n  obj.start();\n\n\n })\n\n\n\n $(\".stop\").click(function(){\n\n  obj.stop();\n\n\n })\n\n&lt;input type=\"button\" class=\"go\" value=\"GO!\" &gt;\n   &lt;input type=\"button\" class=\"stop\" value=\"STOP!\" &gt;\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1673376,
      "name": "zloctb",
      "reputation": 3044
    }
  },
  {
    "soID": 30751362,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/30751362",
    "title": null,
    "body": "<p>The underscore javascript library <a href=\"http://underscorejs.org/\" rel=\"nofollow\">http://underscorejs.org/</a> provides a very useful <code>_.isEmpty()</code> function for checking for empty strings and other empty objects. </p>\n\n<p>Reference: <a href=\"http://underscorejs.org/#isEmpty\" rel=\"nofollow\">http://underscorejs.org/#isEmpty</a>  </p>\n\n<blockquote>\n  <p><strong>isEmpty</strong>  <code>_.isEmpty(object)</code><br>\n  Returns true if an enumerable object contains no values (no enumerable own-properties). For strings and array-like objects _.isEmpty checks if the length property is 0.</p>\n  \n  <p><code>_.isEmpty([1, 2, 3]);</code><br>\n   => false</p>\n  \n  <p><code>_.isEmpty({});</code><br>\n  => true</p>\n</blockquote>\n\n<p>Other very useful underscore functions include:<br>\n<a href=\"http://underscorejs.org/#isNull\" rel=\"nofollow\">http://underscorejs.org/#isNull</a>  <code>_.isNull(object)</code><br>\n<a href=\"http://underscorejs.org/#isUndefined\" rel=\"nofollow\">http://underscorejs.org/#isUndefined</a>  <code>_.isUndefined(value)</code><br>\n<a href=\"http://underscorejs.org/#has\" rel=\"nofollow\">http://underscorejs.org/#has</a> <code>_.has(object, key)</code></p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1684480,
      "name": "Thaddeus Albers",
      "reputation": 2052
    }
  },
  {
    "soID": 23848569,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/23848569",
    "title": null,
    "body": "<p>Another alternative is to use the <a href=\"https://en.wikipedia.org/wiki/Underscore.js\">Underscore.js</a> library. </p>\n\n<p>Note that <code>_.pick()</code> and <code>_.omit()</code> both return a copy of the object and don't directly modify the original object. Assigning the result to the original object should do the trick (not shown).</p>\n\n<p>Reference: <a href=\"http://underscorejs.org/#pick\">link</a> <strong>_.pick(object, *keys)</strong></p>\n\n<p>Return a copy of the object, filtered to only have values for the \nwhitelisted keys (or array of valid keys).</p>\n\n<pre><code>var myJSONObject = \n{\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\n\n_.pick(myJSONObject, \"ircEvent\", \"method\");\n=&gt; {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\"};\n</code></pre>\n\n<p>Reference: <a href=\"http://underscorejs.org/#omit\">link</a> <strong>_.omit(object, *keys)</strong></p>\n\n<p>Return a copy of the object, filtered to omit the \nblacklisted keys (or array of keys).</p>\n\n<pre><code>var myJSONObject = \n{\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\n\n_.omit(myJSONObject, \"regex\");\n=&gt; {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\"};\n</code></pre>\n\n<p>For arrays, <code>_.filter()</code> and <code>_.reject()</code> can be used in a similar manner. </p>\n",
    "score": 41,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1684480,
      "name": "Thaddeus Albers",
      "reputation": 2052
    }
  },
  {
    "soID": 13022066,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/13022066",
    "title": null,
    "body": "<p>Here is a way to do it without jQuery</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function addOrAttachListener(el, type, listener, useCapture) {\r\n  if (el.addEventListener) {\r\n    el.addEventListener(type, listener, useCapture);\r\n  } else if (el.attachEvent) {\r\n    el.attachEvent(\"on\" + type, listener);\r\n  }\r\n};\r\n\r\naddOrAttachListener(window, \"load\", function() {\r\n  var cbElem = document.getElementById(\"cb\");\r\n  var rcbElem = document.getElementById(\"rcb\");\r\n  addOrAttachListener(cbElem, \"click\", function() {\r\n    rcbElem.checked = cbElem.checked;\r\n  }, false);\r\n}, false);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;label&gt;Click Me!\r\n  &lt;input id=\"cb\" type=\"checkbox\" /&gt;\r\n&lt;/label&gt;\r\n&lt;label&gt;Reflection:\r\n  &lt;input id=\"rcb\" type=\"checkbox\" /&gt;\r\n&lt;/label&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 27,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1691559,
      "name": "Aeoril",
      "reputation": 1231
    }
  },
  {
    "soID": 18779757,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/18779757",
    "title": null,
    "body": "<p>For overall:</p>\n\n<pre><code>$(\"#checkAll\").click(function(){\n    $(\".somecheckBoxes\").prop('checked',$(this).prop('checked')?true:false);\n});\n</code></pre>\n",
    "score": -4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1709353,
      "name": "eggshot",
      "reputation": 150
    }
  },
  {
    "soID": 43014382,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/43014382",
    "title": null,
    "body": "<p>To be fair the question pre-dates this answer. I add it not to criticise the OP but to help anyone still asking this question.</p>\n\n<p>The correct way to determine whether something is visible is to consult your view-model. If you don't know what that means then you are about to embark on a journey of discovery that will make your work a great deal less difficult.</p>\n\n<p>Here's an overview of the <a href=\"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel\" rel=\"nofollow noreferrer\">model-view-viewmodel</a> architecture (MVVM).</p>\n\n<p><a href=\"http://knockoutjs.com\" rel=\"nofollow noreferrer\">KnockoutJS</a> is a binding library that will let you try this stuff out without learning an entire framework.</p>\n\n<p>And here's some JS and a DIV that may or may not be visible.</p>\n\n<pre><code>&lt;html&gt;&lt;body&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.1/knockout-min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\nvar vm = {\n  IsDivVisible: ko.observable(true);\n}\nvm.toggle = function(data, event) {\n  //get current visibility state for the div\n  var x = IsDivVisible();\n  //set it to the opposite\n  IsDivVisible(!x);\n}\nko.applyBinding(vm);\n&lt;/script&gt;\n&lt;div data-bind=\"visible: IsDivVisible\"&gt;Peekaboo!&lt;/div&gt;\n&lt;button data-bind=\"click: toggle\"&gt;Toggle the div's visibility&lt;/button&gt;\n&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n\n<p>Notice that the toggle function does not consult the DOM to determine the visibility of the div, it consults the view-model.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1715673,
      "name": "Peter Wone",
      "reputation": 10085
    }
  },
  {
    "soID": 14175010,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/14175010",
    "title": null,
    "body": "<p>The first one (function doSomething(x)) should be part of an object notation.</p>\n\n<p>The second one (<code>var doSomething = function(x){ alert(x);}</code>) is simply creating an anonymous function and assigning it to a variable, <code>doSomething</code>. So doSomething() will call the function.</p>\n\n<p>You may want to know what a <em>function declaration</em> and <em>function expression</em> is.</p>\n\n<p>A function declaration defines a named function variable without requiring variable assignment. Function declarations occur as standalone constructs and cannot be nested within non-function blocks.</p>\n\n<pre><code>function foo() {\n    return 3;\n}\n</code></pre>\n\n<blockquote>\n  <p>ECMA 5 (13.0) defines the syntax as <br/>\n  function Identifier ( FormalParameterList<sub>opt</sub> ) { FunctionBody }</p>\n</blockquote>\n\n<p>In above condition the function name is visible within its scope and the scope of its parent (otherwise it would be unreachable).</p>\n\n<p>And in a function expression</p>\n\n<p>A function expression defines a function as a part of a larger expression syntax (typically a variable assignment ). Functions defined via functions expressions can be named or anonymous. Function expressions should not start with “function”.</p>\n\n<pre><code>// Anonymous function expression\nvar a = function() {\n    return 3;\n}\n\n// Named function expression\nvar a = function foo() {\n    return 3;\n}\n\n// Self-invoking function expression\n(function foo() {\n    alert(\"hello!\");\n})();\n</code></pre>\n\n<blockquote>\n  <p>ECMA 5 (13.0) defines the syntax as <br/>\n  function Identifier<sub>opt</sub> ( FormalParameterList<sub>opt</sub> ) { FunctionBody }</p>\n</blockquote>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1723893,
      "name": "NullPoiиteя",
      "reputation": 39703
    }
  },
  {
    "soID": 17734054,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/17734054",
    "title": null,
    "body": "<h2>Use class toggling, not style editing . . .</h2>\n\n<p>Using classes designated for \"hiding\" elements is easy and also one of the most efficient methods. Toggling a class 'hidden' with a <code>Display</code> style of 'none' will perform faster than editing that style directly. I explained some of this pretty thoroughly in Stack Overflow question <em><a href=\"https://stackoverflow.com/questions/17725361/turning-two-elements-visible-hidden-in-same-div/17726550#answer-17726550\">Turning two elements visible/hidden in the same div</a></em>.</p>\n\n<hr>\n\n<h2>JavaScript Best Practices and Optimization</h2>\n\n<p>Here is a truly enlightening video of a Google Tech Talk by Google front-end engineer Nicholas Zakas:</p>\n\n<ul>\n<li><strong><a href=\"http://www.youtube.com/watch?v=mHtdZgou0qU\" rel=\"nofollow noreferrer\">Speed Up Your Javascript</a></strong> (YouTube)</li>\n</ul>\n",
    "score": 45,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1751792,
      "name": "Lopsided",
      "reputation": 2860
    }
  },
  {
    "soID": 24506559,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/24506559",
    "title": null,
    "body": "<p>Use <strong>window.location.href</strong>. This will give you the complete <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"noreferrer\">URL</a>.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1759019,
      "name": "Saikumar Anireddy",
      "reputation": 88
    }
  },
  {
    "soID": 25963672,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/25963672",
    "title": null,
    "body": "<p>JavaScript have only two type of scope : </p>\n\n<ol>\n<li><strong>Global Scope</strong> : Global is nothing but a window level scope.Here, variable present throughout the application.</li>\n<li><strong>Functional Scope</strong> : Variable declared within a function with <code>var</code> keyword has functional scope.</li>\n</ol>\n\n<p><em>Whenever a function is called, a variable scope object is created (and included in scope chain) which is followed by variables in JavaScript.</em></p>\n\n<pre><code>        a = \"global\";\n         function outer(){ \n              b = \"local\";\n              console.log(a+b); //\"globallocal\"\n         }\nouter();\n</code></pre>\n\n<p>Scope chain -->  </p>\n\n<ol>\n<li>Window level - <code>a</code> and <code>outer</code> function are at top level in scope chain.</li>\n<li>when outer function called a new <code>variable scope object</code>(and included in scope chain) added with variable <code>b</code> inside it.</li>\n</ol>\n\n<p>Now when a variable <code>a</code> required it first searches for nearest variable scope and if variable is not there than it move's to next object of variable scope chain.which is in this case is window level.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1768910,
      "name": "Anshul",
      "reputation": 4901
    }
  },
  {
    "soID": 13170691,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/13170691",
    "title": null,
    "body": "<p>Not sure if this is relevant in todays world, but double quotes used to be used for content that needed to have control characters processed and single quotes for strings that didn't.</p>\n\n<p>The compiler will run string manipulation on a double quoted string while leaving a single quoted string literally untouched. This used to lead to 'good' developers choosing to use single quotes for strings that didn't contain control characters like <code>\\n</code> or <code>\\0</code> (not processed within single quotes) and double quotes when they needed the string parsed (at a slight cost in cpu cycles for processing the string).</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 36328062,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/36328062",
    "title": null,
    "body": "<p>A lot of answers, and a lot of different possibilities!</p>\n\n<p>Without a doubt for quick and simple implementation the winner is: <code>if (!str.length) {...}</code></p>\n\n<p>However, as many other examples are available. The best functional method to go about this, I would suggest:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function empty(str)\r\n{\r\n    if (typeof str == 'undefined' || !str || str.length === 0 || str === \"\" || !/[^\\s]/.test(str) || /^\\s*$/.test(str) || str.replace(/\\s/g,\"\") === \"\")\r\n    {\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n        return false;\r\n    }\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1804013,
      "name": "tfont",
      "reputation": 5080
    }
  },
  {
    "soID": 25839420,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/25839420",
    "title": null,
    "body": "<p>There are a lot of good answers here but I just want to chime in that when using delete to remove a property in JavaScript, it is often wise to first check if that property exists to prevent errors.</p>\n\n<p>E.g</p>\n\n<pre><code>var obj = {\"property\":\"value\", \"property2\":\"value\"};\n\nif (obj &amp;&amp; obj.hasOwnProperty(\"property2\")) {\n  delete obj.property2;\n} else {\n  //error handling\n}\n</code></pre>\n\n<p>Due to the dynamic nature of JavaScript there are often cases where you simply don't know if the property exists or not. Checking if obj exists before the &amp;&amp; also makes sure you don't throw an error due to calling the hasOwnProperty() function on an undefined object.</p>\n\n<p>Sorry if this didn't add to your specific use case but I believe this to be a good design to adapt when managing objects and their properties.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1811818,
      "name": "Willem",
      "reputation": 499
    }
  },
  {
    "soID": 15405691,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/15405691",
    "title": null,
    "body": "<p>To check a checkbox using <strong>jQuery 1.6</strong> or higher just do this:</p>\n\n<pre><code>checkbox.prop('checked', true);\n</code></pre>\n\n<p>To uncheck, use:</p>\n\n<pre><code>checkbox.prop('checked', false);\n</code></pre>\n\n<p>Here' s what I like to use to toggle a checkbox using jQuery:</p>\n\n<pre><code>checkbox.prop('checked', !checkbox.prop('checked'));\n</code></pre>\n\n<hr>\n\n<p>If you're using <strong>jQuery 1.5</strong> or lower:</p>\n\n<pre><code>checkbox.attr('checked', true);\n</code></pre>\n\n<p>To uncheck, use:</p>\n\n<pre><code>checkbox.attr('checked', false);\n</code></pre>\n",
    "score": 24,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1827109,
      "name": "Ramon de Jesus",
      "reputation": 479
    }
  },
  {
    "soID": 21976486,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/21976486",
    "title": null,
    "body": "<p>I thought that @Steven 's answer was the best one, and took care of a lot more cases than if the incoming value was just a string. I wanted to extend it a bit and offer the following:</p>\n\n<pre><code>function isTrue(value){\n    if (typeof(value) == 'string'){\n        value = value.toLowerCase();\n    }\n    switch(value){\n        case true:\n        case \"true\":\n        case 1:\n        case \"1\":\n        case \"on\":\n        case \"yes\":\n            return true;\n        default: \n            return false;\n    }\n}\n</code></pre>\n\n<p>It's not necessary to cover all the <code>false</code> cases if you already know all of the <code>true</code> cases you'd have to account for. You can pass anything into this method that could pass for a <code>true</code> value (or add others, it's pretty straightforward), and everything else would be considered <code>false</code></p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 40283674,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/40283674",
    "title": null,
    "body": "<p>Is just a matter <em>time</em> for me. A few milliseconds lost of my life every time I have to press the <code>shift</code> key before every I'm able to type <code>\"</code></p>\n\n<p>I prefer <code>'</code> simply because you don't have to do it!</p>\n\n<p>Other than that you can escape a <code>'</code> inside single quotes with backslash <code>\\'</code> </p>\n\n<p><code>console.log('Don\\'t lose time'); // \"Don't lose time\"</code></p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 20075342,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/20075342",
    "title": null,
    "body": "<p>Talking about performance, quotes will never be your bottleneck, however, the performance is the same in both cases.</p>\n\n<p>Talking about coding speed, if you use <code>'</code> for delimiting a string, you will need to escape <code>\"</code> quotes. You are more likely to need to use <code>\"</code> inside the string, in example:</p>\n\n<pre><code>//JSON Objects:\nvar jsonObject = '{\"foo\":\"bar\"}';\n//HTML attributes:\ndocument.getElementById(\"foobar\").innerHTML = '&lt;input type=\"text\"&gt;';\n</code></pre>\n\n<p>Then, I prefer to use <code>'</code> for delimiting the string, so I have to escape less characters.</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13624783,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/13624783",
    "title": null,
    "body": "<p>I use the variable approach in my code for a very specific reason, the theory of which has been covered in an abstract way above, but an example might help some people like me, with limited JavaScript expertise.</p>\n\n<p>I have code that I need to run with 160 independently-designed brandings. Most of the code is in shared files, but branding-specific stuff is in a separate file, one for each branding.</p>\n\n<p>Some brandings require specific functions, and some do not. Sometimes I have to add new functions to do new branding-specific things. I am happy to change the shared coded, but I don't want to have to change all 160 sets of branding files.</p>\n\n<p>By using the variable syntax, I can declare the variable (a function pointer essentially) in the shared code and either assign a trivial stub function, or set to null.</p>\n\n<p>The one or two brandings that need a specific implementation of the function can then define their version of the function and assign this to the variable if they want, and the rest do nothing. I can test for a null function before I execute it in the shared code.</p>\n\n<p>From people's comments above, I gather it may be possible to redefine a static function too, but I think the variable solution is nice and clear.</p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1863024,
      "name": "Herc",
      "reputation": 367
    }
  },
  {
    "soID": 16540602,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/16540602",
    "title": null,
    "body": "<p>I did some research what happens if you pass a non-string and non-empty/null value to a tester function. As many knows, (0 == \"\") is true in javascript, but since 0 is a value and not empty or null, you may want to test for it.</p>\n\n<p>The following two functions return true only for undefined, null, empty/whitespace values and false for everything else, such as numbers, boolean, objects, expressions etc.</p>\n\n<pre><code>function IsNullOrEmpty(value)\n{\n    return (value == null || value === \"\");\n}\nfunction IsNullOrWhiteSpace(value)\n{\n    return (value == null || !/\\S/.test(value));\n}\n</code></pre>\n\n<p>More complicated examples exists, but these are simple and give consistent results. There is no need to test for undefined, since it's included in (value == null) check. You may also mimic C# behaviour by adding them to String like this:</p>\n\n<pre><code>String.IsNullOrEmpty = function (value) { ... }\n</code></pre>\n\n<p>You do not want to put it in Strings prototype, because if the instance of the String-class is null, it will error:</p>\n\n<pre><code>String.prototype.IsNullOrEmpty = function (value) { ... }\nvar myvar = null;\nif (1 == 2) { myvar = \"OK\"; } // could be set\nmyvar.IsNullOrEmpty(); // throws error\n</code></pre>\n\n<p>I tested with the following value array. You can loop it through to test your functions if in doubt.</p>\n\n<pre><code>// Helper items\nvar MyClass = function (b) { this.a = \"Hello World!\"; this.b = b; };\nMyClass.prototype.hello = function () { if (this.b == null) { alert(this.a); } else { alert(this.b); } };\nvar z;\nvar arr = [\n// 0: Explanation for printing, 1: actual value\n    ['undefined', undefined],\n    ['(var) z', z],\n    ['null', null],\n    ['empty', ''],\n    ['space', ' '],\n    ['tab', '\\t'],\n    ['newline', '\\n'],\n    ['carriage return', '\\r'],\n    ['\"\\\\r\\\\n\"', '\\r\\n'],\n    ['\"\\\\n\\\\r\"', '\\n\\r'],\n    ['\" \\\\t \\\\n \"', ' \\t \\n '],\n    ['\" txt \\\\t test \\\\n\"', ' txt \\t test \\n'],\n    ['\"txt\"', \"txt\"],\n    ['\"undefined\"', 'undefined'],\n    ['\"null\"', 'null'],\n    ['\"0\"', '0'],\n    ['\"1\"', '1'],\n    ['\"1.5\"', '1.5'],\n    ['\"1,5\"', '1,5'], // valid number in some locales, not in js\n    ['comma', ','],\n    ['dot', '.'],\n    ['\".5\"', '.5'],\n    ['0', 0],\n    ['0.0', 0.0],\n    ['1', 1],\n    ['1.5', 1.5],\n    ['NaN', NaN],\n    ['/\\S/', /\\S/],\n    ['true', true],\n    ['false', false],\n    ['function, returns true', function () { return true; } ],\n    ['function, returns false', function () { return false; } ],\n    ['function, returns null', function () { return null; } ],\n    ['function, returns string', function () { return \"test\"; } ],\n    ['function, returns undefined', function () { } ],\n    ['MyClass', MyClass],\n    ['new MyClass', new MyClass()],\n    ['empty object', {}],\n    ['non-empty object', { a: \"a\", match: \"bogus\", test: \"bogus\"}],\n    ['object with toString: string', { a: \"a\", match: \"bogus\", test: \"bogus\", toString: function () { return \"test\"; } }],\n    ['object with toString: null', { a: \"a\", match: \"bogus\", test: \"bogus\", toString: function () { return null; } }]\n];\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1894107,
      "name": "JHM",
      "reputation": 176
    }
  },
  {
    "soID": 34592242,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/34592242",
    "title": null,
    "body": "<p>Yes, there is a big difference between equality <code>==</code> and identity <code>===</code> operators.<br>\nUsually the identity operator performs faster, because no types conversion is done. But if the values are of the same type, you'll see no difference.<br>\nCheck my post <a href=\"http://rainsoft.io/the-legend-of-javascript-equality-operator/\" rel=\"nofollow\">The legend of JavaScript equality operator</a>, which explains the details, including the types conversion &amp; comparison algorithms, with a lot of examples.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1894471,
      "name": "Dmitri Pavlutin",
      "reputation": 6424
    }
  },
  {
    "soID": 39418566,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/39418566",
    "title": null,
    "body": "<p>Simple plugin:</p>\n\n<pre><code>$.fn.clickOff = function(callback, selfDestroy) {\n    var clicked = false;\n    var parent = this;\n    var destroy = selfDestroy || true;\n\n    parent.click(function() {\n        clicked = true;\n    });\n\n    $(document).click(function(event) {\n        if (!clicked &amp;&amp; parent.is(':visible')) {\n            if(callback) callback.call(parent, event)\n        }\n        if (destroy) {\n            //parent.clickOff = function() {};\n            //parent.off(\"click\");\n            //$(document).off(\"click\");\n            parent.off(\"clickOff\");\n        }\n        clicked = false;\n    });\n};\n</code></pre>\n\n<p>Use:</p>\n\n<pre><code>$(\"#myDiv\").clickOff(function() {\n   alert('clickOff');\n});\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 37610883,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/37610883",
    "title": null,
    "body": "<p>There are already so many answers available. But following can be useful in some scenarios.</p>\n\n<pre><code>// One can specify all values against which you consider truthy\nvar TRUTHY_VALUES = [true, 'true', 1];\n\nfunction getBoolean(a) {\n    return TRUTHY_VALUES.some(function(t) {\n        return t === a;\n    });\n}\n</code></pre>\n\n<p>This can be useful where one examples with non-boolean values.</p>\n\n<pre><code>getBoolean('aa'); // false\ngetBoolean(false); //false\ngetBoolean('false'); //false\n\ngetBoolean('true'); // true\ngetBoolean(true); // true\ngetBoolean(1); // true\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17453323,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/17453323",
    "title": null,
    "body": "<p>I looked through submitted answers and got that they only apply if you search for the object via reference. A simple linear search with reference object comparison. </p>\n\n<p>But lets say you don't have the reference to an object, how will you find the correct object in the array? You will have to go linearly and deep compare with each object. Imagine if the list is too large, and the objects in it are very big containing big pieces of text. The performance drops drastically with the number and size of the elements in the array.</p>\n\n<p>You can stringify objects and put them in the native hash table, but then you will have data redundancy remembering these keys cause JavaScript keeps them for 'for i in obj', and you only want to check if the object exists or not, that is, you have the key.</p>\n\n<p>I thought about this for some time constructing a JSON Schema validator, and I devised a simple wrapper for the native hash table, similar to the sole hash table implementation, with some optimization exceptions which I left to the native hash table to deal with. It only needs performance benchmarking...\nAll the details and code can be found on my blog: <a href=\"http://stamat.wordpress.com/javascript-quickly-find-very-large-objects-in-a-large-array/\" rel=\"nofollow\">http://stamat.wordpress.com/javascript-quickly-find-very-large-objects-in-a-large-array/</a>\nI will soon post benchmark results. </p>\n\n<p>The complete solution works like this:</p>\n\n<pre><code>var a = {'a':1,\n 'b':{'c':[1,2,[3,45],4,5],\n 'd':{'q':1, 'b':{'q':1, 'b':8},'c':4},\n 'u':'lol'},\n 'e':2};\n\n var b = {'a':1, \n 'b':{'c':[2,3,[1]],\n 'd':{'q':3,'b':{'b':3}}},\n 'e':2};\n\n var c = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\";\n\n var hc = new HashCache([{a:3, b:2, c:5}, {a:15, b:2, c:'foo'}]); //init\n\n hc.put({a:1, b:1});\n hc.put({b:1, a:1});\n hc.put(true);\n hc.put('true');\n hc.put(a);\n hc.put(c);\n hc.put(d);\n console.log(hc.exists('true'));\n console.log(hc.exists(a));\n console.log(hc.exists(c));\n console.log(hc.exists({b:1, a:1}));\n hc.remove(a);\n console.log(hc.exists(c));\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1909864,
      "name": "stamat",
      "reputation": 739
    }
  },
  {
    "soID": 21473745,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/21473745",
    "title": null,
    "body": "<p>You need to check both... Display as well as visibility:</p>\n\n<pre><code>if ($(this).css(\"display\") == \"none\" || $(this).css(\"visibility\") == \"hidden\") {\n    // The element is not visible\n} else {\n    // The element is visible\n}\n</code></pre>\n\n<p>If we check for <code>$(this).is(\":visible\")</code>, jQuery checks for both the things automatically.</p>\n",
    "score": 41,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1938122,
      "name": "Premshankar Tiwari",
      "reputation": 1990
    }
  },
  {
    "soID": 23487540,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/23487540",
    "title": null,
    "body": "<p>You should always check for the type too, since JavaScript is a duck typed language, so you may not know when and how the data changed in the middle of the process. So, here's the better solution:</p>\n\n<pre><code>var str = \"\";\nif (str === \"\") {\n    //...\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1941132,
      "name": "Sazid",
      "reputation": 1505
    }
  },
  {
    "soID": 16456126,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/16456126",
    "title": null,
    "body": "<p>Any browsers not supported Date.now, you can use this for get current date time:</p>\n\n<pre><code>currentTime = Date.now() || +new Date()\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1942750,
      "name": "mr.boyfox",
      "reputation": 7715
    }
  },
  {
    "soID": 35539892,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/35539892",
    "title": null,
    "body": "<p>Suppose you have an object that looks like this:</p>\n\n<pre><code>var Hogwarts = {\n    staff : [\n        'Argus Filch',\n        'Filius Flitwick',\n        'Gilderoy Lockhart',\n        'Minerva McGonagall',\n        'Poppy Pomfrey',\n        ...\n    ],\n    students : [\n        'Hannah Abbott',\n        'Katie Bell',\n        'Susan Bones',\n        'Terry Boot',\n        'Lavender Brown',\n        ...\n    ]\n};\n</code></pre>\n\n<h3>Deleting an object property</h3>\n\n<p>If you want to use the entire <code>staff</code> array, the proper way to do this, would be to do this:</p>\n\n<pre><code>delete Hogwarts.staff;\n</code></pre>\n\n<p>Alternatively, you could also do this:</p>\n\n<pre><code>delete Hogwarts['staff'];\n</code></pre>\n\n<p>Similarly, removing the entire students array would be done by calling <code>delete Hogwarts.students;</code> or <code>delete Hogwarts['students'];</code>.</p>\n\n<h3>Deleting an array index</h3>\n\n<p>Now, if you want to remove a single staff member or student, the procedure is a bit different, because both properties are arrays themselves.</p>\n\n<p>If you know the index of your staff member, you could simply do this:</p>\n\n<pre><code>Hogwarts.staff.splice(3, 1);\n</code></pre>\n\n<p>If you do not know the index, you'll also have to do an index search:</p>\n\n<pre><code>Hogwarts.staff.splice(Hogwarts.staff.indexOf('Minerva McGonnagall') - 1, 1);\n</code></pre>\n\n<hr>\n\n<h3>Note</h3>\n\n<p>While you technically can use <code>delete</code> for an array, using it would result in getting incorrect results when calling for example <code>Hogwarts.staff.length</code> later on. In other words, <code>delete</code> would remove the element, but it wouldn't update the value of <code>length</code> property. Using <code>delete</code> would also mess up your indexing.</p>\n\n<p>So, when deleting values from an object, always first consider whether you're dealing with object properties or whether you're dealing with array values, and choose the appropriate strategy based on that.</p>\n\n<p>If you want to experiment with this, you can use <a href=\"http://jsfiddle.net/cb57dusv/46/\"><strong>this Fiddle</strong></a> as a starting point.</p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1946501,
      "name": "John Slegers",
      "reputation": 19424
    }
  },
  {
    "soID": 35585773,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/35585773",
    "title": null,
    "body": "<h1>Old school JavaScript</h1>\n\n<p>Traditionally, JavaScript really only has two types of scope : </p>\n\n<ol>\n<li><strong>Global Scope</strong> : Variables are known throughout the application, from the moment they are declared onwards</li>\n<li><strong>Functional Scope</strong> : Variables are known within <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/function\"><strong>the function</strong></a> they are declared in, from the moment they are declared onwards</li>\n</ol>\n\n<p>I will not elaborate on this, since there are already many other answers explaining the difference.</p>\n\n<hr>\n\n<h1>Modern JavaScript</h1>\n\n<p>The most recent JavaScript specs now also allow a third scope :</p>\n\n<ol start=\"3\">\n<li><strong>Block Scope</strong> : Variables are known within <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/block\"><strong>the block</strong></a> they are declared in, from the moment they are declared onwards</li>\n</ol>\n\n<hr>\n\n<h3>How do I create block scope variables?</h3>\n\n<p>Traditionally, you create your variables like this :</p>\n\n<pre><code>var myVariable = \"Some text\";\n</code></pre>\n\n<p>Block scope variables are created like this :</p>\n\n<pre><code>let myVariable = \"Some text\";\n</code></pre>\n\n<hr>\n\n<h3>So what is the difference between functional scope and block scope?</h3>\n\n<p>To understand the difference between functional scope and block scope, consider the following code :</p>\n\n<pre><code>// i IS NOT known here\n// j IS NOT known here\n\nfunction loop(arr) {\n    // i IS NOT known here\n    // j IS NOT known here\n\n    for( var i = 0; i &lt; arr.length; i++ ) {\n        // i IS known here\n        // j IS NOT known here\n    };\n\n    // i IS known here\n    // j IS NOT known here\n\n    for( let j = 0; j &lt; arr.length; j++ ) {\n        // i IS known here\n        // j IS known here\n    };\n\n    // i IS known here\n    // j IS NOT known here\n}\n\n// i IS NOT known here\n// j IS NOT known here\n</code></pre>\n\n<p>Here, we can see that our variable <code>j</code> is only known in the first for loop, but not before and after. Yet, our variable <code>i</code> is known in the entire function from the moment it is defined onward.</p>\n\n<hr>\n\n<h3>Is it safe to use block scope variables today?</h3>\n\n<p>Whether or not it is safe to use today, depends on your environment :</p>\n\n<ul>\n<li><p>If you're writing server-side JavaScript code (<a href=\"https://nodejs.org/en/\"><strong>Node.js</strong></a>), you can safely use the <code>let</code> statement.</p></li>\n<li><p>If you're writing client-side JavaScript code and use a transpiler (like <a href=\"https://github.com/google/traceur-compiler\"><strong>Traceur</strong></a>), you can safely use the <code>let</code> statement, however your code is likely to be anything but optimal with respect to performance.</p></li>\n<li><p>If you're writing client-side JavaScript code and don't use a transpiler, you need to consider browser support.</p>\n\n<p>Today, Feb 23 2016, these are some browsers that either don't support <code>let</code> or have only partial support :</p>\n\n<ul>\n<li><strong>Internet explorer 10</strong> and below (no support)</li>\n<li><strong>Firefox 43</strong> and below (no support)</li>\n<li><strong>Safari 9</strong> and below (no support)</li>\n<li><strong>Opera Mini 8</strong> and below (no support)</li>\n<li><strong>Android browser 4</strong> and below (no support)</li>\n<li><strong>Opera 36</strong> and below (partial support)</li>\n<li><strong>Chome 51</strong> and below (partial support)</li>\n</ul></li>\n</ul>\n\n<p><a href=\"https://i.stack.imgur.com/FVsEQ.png\"><img src=\"https://i.stack.imgur.com/FVsEQ.png\" alt=\"enter image description here\"></a></p>\n\n<hr>\n\n<h3>How to keep track of browser support</h3>\n\n<p>For an up-to-date overview of which browsers support the <code>let</code> statement at the time of your reading this answer, see <a href=\"http://caniuse.com/#search=let\"><strong>this <code>Can I Use</code> page</strong></a>.</p>\n",
    "score": 38,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1946501,
      "name": "John Slegers",
      "reputation": 19424
    }
  },
  {
    "soID": 14278832,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/14278832",
    "title": null,
    "body": "<p>If using mobile and you want the interface to update and show the checkbox as unchecked, use the following:</p>\n\n<pre><code>$(\"#checkbox1\").prop('checked', false).checkboxradio(\"refresh\");\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1970071,
      "name": "Matt Peacock",
      "reputation": 159
    }
  },
  {
    "soID": 14293001,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/14293001",
    "title": null,
    "body": "<p>This should work:</p>\n\n<pre><code>$('body').click(function (event) {\n    var obj = $(event.target);\n    obj = obj['context']; // context : clicked element inside body\n    if ($(obj).attr('id') != \"menuscontainer\" &amp;&amp; $('#menuscontainer').is(':visible') == true) {\n        //hide menu\n    }\n});\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33257515,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/33257515",
    "title": null,
    "body": "<p>Use lodash's <a href=\"https://lodash.com/docs#some\" rel=\"noreferrer\">some</a> function.</p>\n\n<p>It's concise, accurate and has great cross platform support.</p>\n\n<p>The accepted answer does not even meet the requirements.</p>\n\n<p><em>Requirements:</em> Recommend most concise and efficient way to find out if a JavaScript array contains an object.</p>\n\n<p><strong>Accepted Answer:</strong></p>\n\n<pre><code>$.inArray({'b': 2}, [{'a': 1}, {'b': 2}])\n&gt; -1\n</code></pre>\n\n<p><strong>My recommendation:</strong></p>\n\n<pre><code>_.some([{'a': 1}, {'b': 2}], {'b': 2})\n&gt; true\n</code></pre>\n\n<p>Notes: </p>\n\n<p>$.inArray works fine for determining whether a <em>scalar</em> value exists in an array of scalars...</p>\n\n<pre><code>$.inArray(2, [1,2])\n&gt; 1\n</code></pre>\n\n<p>... but the question clearly asks for an efficient way to determine if an <em>object</em> is contained in an array.</p>\n\n<p>In order to handle both scalars and objects, you could do this:</p>\n\n<pre><code>(_.isObject(item)) ? _.some(ary, item) : (_.indexOf(ary, item) &gt; -1)\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1978383,
      "name": "l3x",
      "reputation": 10769
    }
  },
  {
    "soID": 23056538,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/23056538",
    "title": null,
    "body": "<p>null and undefined are nothingness, that is,</p>\n\n<pre><code>var a;\nvar b = null;\n</code></pre>\n\n<p>Here <code>a</code> and <code>b</code> do not have values. Whereas, 0, false and '' are all values. One thing common beween all these are that they are all falsy values, which means they all <strong>satisfy</strong> falsy conditions.</p>\n\n<p>So, the 0, false and '' together form a sub-group. And on other hand, null &amp; undefined form the second sub-group. Check the comparisons in the below image. null and undefined would equal. The other three would equal to each other. But, they all are treated as falsy conditions in JavaScript.</p>\n\n<p><img src=\"https://i.stack.imgur.com/11I0i.jpg\" alt=\"Enter image description here\"></p>\n\n<p>This is same as any object (like {}, arrays, etc.), non-empty string &amp; Boolean true are all truthy conditions. But, they are all not equal.</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 42126292,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/42126292",
    "title": null,
    "body": "<p>I know there are a million answers to this question, but I've always been a fan of using HTML and CSS to do most of the work. In this case, z-index and positioning. The simplest way that I have found to do this is as follows:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(\"#show-trigger\").click(function(){\r\n  $(\"#element\").animate({width: 'toggle'});\r\n  $(\"#outside-element\").show();\r\n});\r\n$(\"#outside-element\").click(function(){\r\n  $(\"#element\").hide();\r\n  $(\"#outside-element\").hide();\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>#outside-element {\r\n  position:fixed;\r\n  width:100%;\r\n  height:100%;\r\n  z-index:1;\r\n  display:none;\r\n}\r\n#element {\r\n  display:none;\r\n  padding:20px;\r\n  background-color:#ccc;\r\n  width:300px;\r\n  z-index:2;\r\n  position:relative;\r\n}\r\n#show-trigger {\r\n  padding:20px;\r\n  background-color:#ccc;\r\n  margin:20px auto;\r\n  z-index:2;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;div id=\"outside-element\"&gt;&lt;/div&gt;\r\n&lt;div id=\"element\"&gt;\r\n  &lt;div class=\"menu-item\"&gt;&lt;a href=\"#1\"&gt;Menu Item 1&lt;/a&gt;&lt;/div&gt;\r\n  &lt;div class=\"menu-item\"&gt;&lt;a href=\"#2\"&gt;Menu Item 1&lt;/a&gt;&lt;/div&gt;\r\n  &lt;div class=\"menu-item\"&gt;&lt;a href=\"#3\"&gt;Menu Item 1&lt;/a&gt;&lt;/div&gt;\r\n  &lt;div class=\"menu-item\"&gt;&lt;a href=\"#4\"&gt;Menu Item 1&lt;/a&gt;&lt;/div&gt;\r\n&lt;/div&gt;\r\n&lt;div id=\"show-trigger\"&gt;Show Menu&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>This creates a safe environment, since nothing is going to get triggered unless the menu is actually open and the z-index protects any of the content within the element from creating any misfires upon being clicked.</p>\n\n<p>Additionally, you're not requiring jQuery to cover all of your bases with propagation calls and having to purge all of the inner elements from misfires.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 45460232,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/45460232",
    "title": null,
    "body": "<p>Using idnexOf() it is a good solution, but you should hide embedded implementation indexOf() function which returns -1 with ~ operator: </p>\n\n<pre><code>function include(arr,obj) { \n    return !!(~arr.indexOf(obj)); \n} \n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2023542,
      "name": "KRRySS",
      "reputation": 58
    }
  },
  {
    "soID": 36779401,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/36779401",
    "title": null,
    "body": "<p>For easier use, and more expressive code, I created a jQuery plugin for this:</p>\n\n<pre><code>$('div.my-element').clickOut(function(target) { \n    //do something here... \n});\n</code></pre>\n\n<p>Note:  <strong>target</strong> is the element the user actually clicked.  But callback is still executed in the context of the original element, so you can utilize <strong>this</strong> as you'd expect in a jQuery callback.</p>\n\n<p>Plugin:</p>\n\n<pre><code>$.fn.clickOut = function (parent, fn) {\n    var context = this;\n    fn = (typeof parent === 'function') ? parent : fn;\n    parent = (parent instanceof jQuery) ? parent : $(document);\n\n    context.each(function () {\n        var that = this;\n        parent.on('click', function (e) {\n            var clicked = $(e.target);\n            if (!clicked.is(that) &amp;&amp; !clicked.parents().is(that)) {\n                if (typeof fn === 'function') {\n                    fn.call(that, clicked);\n                }\n            }\n        });\n\n    });\n    return context;\n};\n</code></pre>\n\n<p>By default, the click event listener is placed on the document.  However, if you want to limit the event listener scope, you can pass in a jQuery object representing a parent level element that will be the top parent at which clicks will be listened to.  This prevents unnecessary document level event listeners.  Obviously, it won't work unless the parent element supplied is a parent of your initial element. </p>\n\n<p>Use like so:</p>\n\n<pre><code>$('div.my-element').clickOut($('div.my-parent'), function(target) { \n    //do something here...\n});\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43035799,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/43035799",
    "title": null,
    "body": "<p>On a modern website in 2017 the use of href should be avoided if the element is only using JavaScript functionality (not a real link).</p>\n\n<p>Why?\nMost pages rely so heavily on JavaScript that they simply don't work without JS properly anymore. Besides, the given fallbacks (href to \"\", \"#\", or \"js..(void)) don't add any benefit except add the open in new tab functionality that will reopen the same page without the intended function.</p>\n\n<p>Given all these drawbacks with no real benefit, using the href on a non link is a bad practice.</p>\n\n<p>In regards to IE:\nAs of IE8,  element styling (including hover) works if the doctype is set. Other versions of IE are not really supported anymore.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17131994,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/17131994",
    "title": null,
    "body": "<p>jQuery <a href=\"http://www.uploadify.com/download/\">Uploadify</a> is another good plugin which I have used before to upload files. The JavaScript code is as simple as the following: code. However, the new version does not work in Internet&nbsp;Explorer.</p>\n\n<pre><code>$('#file_upload').uploadify({\n    'swf': '/public/js/uploadify.swf',\n    'uploader': '/Upload.ashx?formGuid=' + $('#formGuid').val(),\n    'cancelImg': '/public/images/uploadify-cancel.png',\n    'multi': true,\n    'onQueueComplete': function (queueData) {\n        // ...\n    },\n    'onUploadStart': function (file) {\n        // ...\n    }\n});\n</code></pre>\n\n<p>I have done a lot of searching and I have come to another solution for uploading files without any plugin and only with ajax. The solution is as below:</p>\n\n<pre><code>$(document).ready(function () {\n    $('#btn_Upload').live('click', AjaxFileUpload);\n});\n\nfunction AjaxFileUpload() {\n    var fileInput = document.getElementById(\"#Uploader\");\n    var file = fileInput.files[0];\n    var fd = new FormData();\n    fd.append(\"files\", file);\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", 'Uploader.ashx');\n    xhr.onreadystatechange = function () {\n        if (xhr.readyState == 4) {\n             alert('success');\n        }\n        else if (uploadResult == 'success')\n            alert('error');\n    };\n    xhr.send(fd);\n}\n</code></pre>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2044399,
      "name": "farnoush resa",
      "reputation": 293
    }
  },
  {
    "soID": 24248152,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/24248152",
    "title": null,
    "body": "<p>This is my version of object cloner. This is a stand-alone version of the jQuery method, with only few tweaks and adjustments. Check out the <a href=\"http://jsfiddle.net/eyYJB/\" rel=\"nofollow\">fiddle</a>. I've used a lot of jQuery until the day I realized that I'd use only this function most of the time x_x.</p>\n\n<p>The usage is the same as described into the jQuery API:</p>\n\n<ul>\n<li>Non-deep clone: <code>extend(object_dest, object_source);</code></li>\n<li>Deep clone: <code>extend(true, object_dest, object_source);</code></li>\n</ul>\n\n<p>One extra function is used to define if object is proper to be cloned.</p>\n\n<pre><code>/**\n * This is a quasi clone of jQuery's extend() function.\n * by Romain WEEGER for wJs library - www.wexample.com\n * @returns {*|{}}\n */\nfunction extend() {\n    // Make a copy of arguments to avoid JavaScript inspector hints.\n    var to_add, name, copy_is_array, clone,\n\n    // The target object who receive parameters\n    // form other objects.\n    target = arguments[0] || {},\n\n    // Index of first argument to mix to target.\n    i = 1,\n\n    // Mix target with all function arguments.\n    length = arguments.length,\n\n    // Define if we merge object recursively.\n    deep = false;\n\n    // Handle a deep copy situation.\n    if (typeof target === 'boolean') {\n        deep = target;\n\n        // Skip the boolean and the target.\n        target = arguments[ i ] || {};\n\n        // Use next object as first added.\n        i++;\n    }\n\n    // Handle case when target is a string or something (possible in deep copy)\n    if (typeof target !== 'object' &amp;&amp; typeof target !== 'function') {\n        target = {};\n    }\n\n    // Loop trough arguments.\n    for (false; i &lt; length; i += 1) {\n\n        // Only deal with non-null/undefined values\n        if ((to_add = arguments[ i ]) !== null) {\n\n            // Extend the base object.\n            for (name in to_add) {\n\n                // We do not wrap for loop into hasOwnProperty,\n                // to access to all values of object.\n                // Prevent never-ending loop.\n                if (target === to_add[name]) {\n                    continue;\n                }\n\n                // Recurse if we're merging plain objects or arrays.\n                if (deep &amp;&amp; to_add[name] &amp;&amp; (is_plain_object(to_add[name]) || (copy_is_array = Array.isArray(to_add[name])))) {\n                    if (copy_is_array) {\n                        copy_is_array = false;\n                        clone = target[name] &amp;&amp; Array.isArray(target[name]) ? target[name] : [];\n                    }\n                    else {\n                        clone = target[name] &amp;&amp; is_plain_object(target[name]) ? target[name] : {};\n                    }\n\n                    // Never move original objects, clone them.\n                    target[name] = extend(deep, clone, to_add[name]);\n                }\n\n                // Don't bring in undefined values.\n                else if (to_add[name] !== undefined) {\n                    target[name] = to_add[name];\n                }\n            }\n        }\n    }\n    return target;\n}\n\n/**\n * Check to see if an object is a plain object\n * (created using \"{}\" or \"new Object\").\n * Forked from jQuery.\n * @param obj\n * @returns {boolean}\n */\nfunction is_plain_object(obj) {\n    // Not plain objects:\n    // - Any object or value whose internal [[Class]] property is not \"[object Object]\"\n    // - DOM nodes\n    // - window\n    if (obj === null || typeof obj !== \"object\" || obj.nodeType || (obj !== null &amp;&amp; obj === obj.window)) {\n        return false;\n    }\n    // Support: Firefox &lt;20\n    // The try/catch suppresses exceptions thrown when attempting to access\n    // the \"constructor\" property of certain host objects, i.e. |window.location|\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=814622\n    try {\n        if (obj.constructor &amp;&amp; !this.hasOwnProperty.call(obj.constructor.prototype, \"isPrototypeOf\")) {\n            return false;\n        }\n    }\n    catch (e) {\n        return false;\n    }\n\n    // If the function hasn't returned already, we're confident that\n    // |obj| is a plain object, created by {} or constructed with new Object\n    return true;\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 39667584,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/39667584",
    "title": null,
    "body": "<p>As @livefree75 said:</p>\n\n<p><strong>jQuery 1.5.x and below</strong></p>\n\n<p>You can also extend the $.fn object with new methods:</p>\n\n<pre><code>(function($)  {\n   $.fn.extend({\n      check : function()  {\n         return this.filter(\":radio, :checkbox\").attr(\"checked\", true);\n      },\n      uncheck : function()  {\n         return this.filter(\":radio, :checkbox\").removeAttr(\"checked\");\n      }\n   });\n}(jQuery));\n</code></pre>\n\n<p>But in new versions of jQuery, we have to use something like this:</p>\n\n<p><strong>jQuery 1.6+</strong></p>\n\n<pre><code>    (function($)  {\n       $.fn.extend({\n          check : function()  {\n             return this.filter(\":radio, :checkbox\").prop(\"checked\", true);\n          },\n          uncheck : function()  {\n             return this.filter(\":radio, :checkbox\").prop(\"checked\",false);\n          }\n       });\n    }(jQuery));\n</code></pre>\n\n<p>Then you can just do:</p>\n\n<pre><code>    $(\":checkbox\").check();\n    $(\":checkbox\").uncheck();\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2063547,
      "name": "Ardalan Shahgholi",
      "reputation": 4523
    }
  },
  {
    "soID": 25575642,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/25575642",
    "title": null,
    "body": "<p>A function can be created in order to check for visibility/display attributes in order to gauge whether the element is shown in the UI or not. </p>\n\n<pre><code>function checkUIElementVisible(element) {\n    return ((element.css('display') !== 'none') &amp;&amp; (element.css('visibility') !== 'hidden'));\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/w8bytkqc/\" rel=\"noreferrer\">Working Fiddle</a></p>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2081982,
      "name": "V31",
      "reputation": 6422
    }
  },
  {
    "soID": 18144362,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/18144362",
    "title": null,
    "body": "<p>I usually use some thing like this,</p>\n\n<pre><code>if (!str.length) {\n//do some thing\n}\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2086641,
      "name": "user2086641",
      "reputation": 1690
    }
  },
  {
    "soID": 14967514,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/14967514",
    "title": null,
    "body": "<pre><code> &lt;div class=\"feedbackCont\" onblur=\"hidefeedback();\"&gt;\n        &lt;div class=\"feedbackb\" onclick=\"showfeedback();\" &gt;&lt;/div&gt;\n        &lt;div class=\"feedbackhide\" tabindex=\"1\"&gt; &lt;/div&gt;\n &lt;/div&gt;\n\nfunction hidefeedback(){\n    $j(\".feedbackhide\").hide();\n}\n\nfunction showfeedback(){\n    $j(\".feedbackhide\").show();\n    $j(\".feedbackCont\").attr(\"tabindex\",1).focus();\n}\n</code></pre>\n\n<p>This is the simplest solution I came up with. </p>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 36177142,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/36177142",
    "title": null,
    "body": "<p><strong>Cloning an object using today's JavaScript: <a href=\"https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015\" rel=\"nofollow noreferrer\">ECMAScript 2015</a></strong> (formerly known as ECMAScript&nbsp;6)</p>\n\n<pre><code>var original = {a: 1};\n\n// Method 1: New object with original assigned.\nvar copy1 = Object.assign({}, original);\n\n// Method 2: New object with spread operator assignment.\nvar copy2 = {...original};\n</code></pre>\n\n<p>Old browsers may not support ECMAScript 2015. A common solution is to use a JavaScript-to-JavaScript compiler like Babel to output an <a href=\"https://en.wikipedia.org/wiki/ECMAScript#5th_Edition\" rel=\"nofollow noreferrer\">ECMAScript 5</a> version of your JavaScript code.</p>\n\n<p>As <a href=\"https://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-clone-an-object-in-javascript?page=2&amp;tab=oldest#comment60081951_36177142\">pointed out by @jim-hall</a>, <strong>this is only a shallow copy</strong>. Properties of properties are copied as a reference: changing one would change the value in the other object/instance.</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28983302,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/28983302",
    "title": null,
    "body": "<p>I learned a really cool way of converting a given Date object to a Unix timestamp from the source code of <a href=\"https://github.com/carhartl/jquery-cookie/blob/master/src/jquery.cookie.js\" rel=\"noreferrer\">JQuery Cookie</a> the other day.</p>\n\n<p>Here's an example:</p>\n\n<pre><code>var date = new Date();\nvar timestamp = +date;\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2113279,
      "name": "george",
      "reputation": 442
    }
  },
  {
    "soID": 23027643,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/23027643",
    "title": null,
    "body": "<pre><code>.is(\":not(':hidden')\") /*if shown*/\n</code></pre>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2151420,
      "name": "Kareem",
      "reputation": 1515
    }
  },
  {
    "soID": 16685836,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/16685836",
    "title": null,
    "body": "<p>Be aware of memory leaks in Internet&nbsp;Explorer prior to <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_9\" rel=\"noreferrer\">Internet&nbsp;Explorer&nbsp;9</a>, as the <a href=\"http://api.jquery.com/prop/\" rel=\"noreferrer\">jQuery documentation states</a>:</p>\n\n<blockquote>\n  <p>In Internet Explorer prior to version 9, using .prop() to set a DOM\n  element property to anything other than a simple primitive value\n  (number, string, or boolean) can cause memory leaks if the property is\n  not removed (using .removeProp()) before the DOM element is removed\n  from the document. To safely set values on DOM objects without memory\n  leaks, use .data().</p>\n</blockquote>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2160798,
      "name": "naor",
      "reputation": 819
    }
  },
  {
    "soID": 33985550,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/33985550",
    "title": null,
    "body": "<p>Javascript with <strong>ECMAScript 5</strong> standard which is supported by most browsers now, you can use <code>apply()</code> to append <code>array1</code> to <code>array2</code>.</p>\n\n<pre><code>var array1 = [3, 4, 5];\nvar array2 = [1, 2];\n\nArray.prototype.push.apply(array2, array1);\n\nconsole.log(array2); // [1, 2, 3, 4, 5]\n</code></pre>\n\n<p>Javascript with <strong>ECMAScript 6</strong> standard which is supported by Chrome and FF and IE Edge, you can use the <code>spread</code> operator:</p>\n\n<pre><code>\"use strict\";\nlet array1 = [3, 4, 5];\nlet array2 = [1, 2];\n\narray2.push(...array1);\n\nconsole.log(array2); // [1, 2, 3, 4, 5]\n</code></pre>\n\n<p>The <code>spread</code> operator will replace <code>array2.push(...array1);</code> with <code>array2.push(3, 4, 5);</code> when the browser is thinking the logic.</p>\n\n<p><strong>Bonus point</strong></p>\n\n<p>If you'd like to create <em>another</em> variable to store all the items from both array, you can do this:</p>\n\n<p><strong>ES5</strong> <code>var combinedArray = array1.concat(array2);</code></p>\n\n<p><strong>ES6</strong> <code>const combinedArray = [...array1, ...array2]</code></p>\n\n<p>The spread operator (<code>...</code>) is to spread out all items from a collection.</p>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23816968,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/23816968",
    "title": null,
    "body": "<p>Here is another solution to generate a timestamp in JavaScript - including a padding method for single numbers - using day, month, year, hour, minute and seconds in its result (working example at <a href=\"http://jsfiddle.net/AcLzd/9/\" rel=\"nofollow\">jsfiddle</a>):</p>\n\n<pre><code>var pad = function(int) { return int &lt; 10 ? 0 + int : int; };\nvar timestamp = new Date();\n\n    timestamp.day = [\n        pad(timestamp.getDate()),\n        pad(timestamp.getMonth() + 1), // getMonth() returns 0 to 11.\n        timestamp.getFullYear()\n    ];\n\n    timestamp.time = [\n        pad(timestamp.getHours()),\n        pad(timestamp.getMinutes()),\n        pad(timestamp.getSeconds())\n    ];\n\ntimestamp.now = parseInt(timestamp.day.join(\"\") + timestamp.time.join(\"\"));\nalert(timestamp.now);\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2174320,
      "name": "Saucier",
      "reputation": 2318
    }
  },
  {
    "soID": 34555013,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/34555013",
    "title": null,
    "body": "<p>As recursion is just too expensive for JavaScript, and most answers I have found are using recursion, while JSON approach will skip the non-JSON-convertible parts (Function, etc.). So I did a little research and found this trampoline technique to avoid it. Here's the code:</p>\n\n<pre><code>/*\n * Trampoline to avoid recursion in JavaScript, see:\n *     http://www.integralist.co.uk/posts/js-recursion.html\n */\nfunction trampoline() {\n    var func = arguments[0];\n    var args = [];\n    for (var i = 1; i &lt; arguments.length; i++) {\n        args[i - 1] = arguments[i];\n    }\n\n    var currentBatch = func.apply(this, args);\n    var nextBatch = [];\n\n    while (currentBatch &amp;&amp; currentBatch.length &gt; 0) {\n        currentBatch.forEach(function(eachFunc) {\n            var ret = eachFunc();\n            if (ret &amp;&amp; ret.length &gt; 0) {\n                nextBatch = nextBatch.concat(ret);\n            }\n        });\n\n        currentBatch = nextBatch;\n        nextBatch = [];\n    }\n};\n\n/*\n *  Deep clone an object using the trampoline technique.\n *\n *  @param target {Object} Object to clone\n *  @return {Object} Cloned object.\n */\nfunction clone(target) {\n    if (typeof target !== 'object') {\n        return target;\n    }\n    if (target == null || Object.keys(target).length == 0) {\n        return target;\n    }\n\n    function _clone(b, a) {\n        var nextBatch = [];\n        for (var key in b) {\n            if (typeof b[key] === 'object' &amp;&amp; b[key] !== null) {\n                if (b[key] instanceof Array) {\n                    a[key] = [];\n                }\n                else {\n                    a[key] = {};\n                }\n                nextBatch.push(_clone.bind(null, b[key], a[key]));\n            }\n            else {\n                a[key] = b[key];\n            }\n        }\n        return nextBatch;\n    };\n\n    var ret = target instanceof Array ? [] : {};\n    (trampoline.bind(null, _clone))(target, ret);\n    return ret;\n};\n</code></pre>\n\n<p>Also see this gist:\n   <a href=\"https://gist.github.com/SeanOceanHu/7594cafbfab682f790eb\" rel=\"nofollow\">https://gist.github.com/SeanOceanHu/7594cafbfab682f790eb</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 18266967,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/18266967",
    "title": null,
    "body": "<p>Here is the code and demo for how to check multiple check boxes...</p>\n\n<p><strong><a href=\"http://jsfiddle.net/tamilmani/z8TTt/\">http://jsfiddle.net/tamilmani/z8TTt/</a></strong></p>\n\n<pre><code>$(\"#check\").on(\"click\", function () {\n\n    var chk = document.getElementById('check').checked;\n    var arr = document.getElementsByTagName(\"input\");\n\n    if (chk) {\n        for (var i in arr) {\n            if (arr[i].name == 'check') arr[i].checked = true;\n        }\n    } else {\n        for (var i in arr) {\n            if (arr[i].name == 'check') arr[i].checked = false;\n        }\n    }\n});\n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2185889,
      "name": "tamilmani",
      "reputation": 400
    }
  },
  {
    "soID": 36982533,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/36982533",
    "title": null,
    "body": "<p>You can use this:</p>\n\n<pre><code>$(element).is(':visible');\n</code></pre>\n\n<h2>Example code</h2>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(document).ready(function()\r\n{\r\n    $(\"#toggle\").click(function()\r\n    {\r\n        $(\"#content\").toggle();\r\n    });\r\n\r\n    $(\"#visiblity\").click(function()\r\n    {\r\n       if( $('#content').is(':visible') )\r\n       {\r\n          alert(\"visible\"); // Put your code for visibility\r\n       }\r\n       else\r\n       {\r\n          alert(\"hidden\");\r\n       }\r\n    });\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js\"&gt;&lt;/script&gt;\r\n\r\n&lt;p id=\"content\"&gt;This is a Content&lt;/p&gt;\r\n\r\n&lt;button id=\"toggle\"&gt;Toggle Content Visibility&lt;/button&gt;\r\n&lt;button id=\"visibility\"&gt;Check Visibility&lt;/button&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2193439,
      "name": "Abrar Jahin",
      "reputation": 1
    }
  },
  {
    "soID": 19971153,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/19971153",
    "title": null,
    "body": "<p>To check and uncheck</p>\n\n<pre><code>$('.myCheckbox').prop('checked', true);\n$('.myCheckbox').prop('checked', false);\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2234768,
      "name": "jj2422",
      "reputation": 316
    }
  },
  {
    "soID": 22072778,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/22072778",
    "title": null,
    "body": "<p>If you are using <a href=\"http://www.jshint.com/\">jshint</a>, it will raise an error if you use double quote string.</p>\n\n<p>I used it through the Yeoman scafflholding of AngularJS but maybe there is somehow a maner to configure this.</p>\n\n<p>By the way, when you handle HTML into JavaScript, it's easier to use single quote :</p>\n\n<pre><code>var foo = '&lt;div class=\"cool-stuff\"&gt;Cool content&lt;/div&gt;';\n</code></pre>\n\n<p>And at least JSON is using double quotes to reprensent strings.</p>\n\n<p>There is no trivial way to answer to your question</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33473515,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/33473515",
    "title": null,
    "body": "<p>After research I have found three working solutions (I forgot the page links for reference)</p>\n\n<h2>First solution</h2>\n\n<pre><code>&lt;script&gt;\n    //The good thing about this solution is it doesn't stop event propagation.\n\n    var clickFlag = 0;\n    $('body').on('click', function () {\n        if(clickFlag == 0) {\n            console.log('hide element here');\n            /* Hide element here */\n        }\n        else {\n            clickFlag=0;\n        }\n    });\n    $('body').on('click','#testDiv', function (event) {\n        clickFlag = 1;\n        console.log('showed the element');\n        /* Show the element */\n    });\n&lt;/script&gt;\n</code></pre>\n\n<h2>Second solution</h2>\n\n<pre><code>&lt;script&gt;\n    $('body').on('click', function(e) {\n        if($(e.target).closest('#testDiv').length == 0) {\n           /* Hide dropdown here */\n        }\n    });\n&lt;/script&gt;\n</code></pre>\n\n<h2>Third solution</h2>\n\n<pre><code>&lt;script&gt;\n    var specifiedElement = document.getElementById('testDiv');\n    document.addEventListener('click', function(event) {\n        var isClickInside = specifiedElement.contains(event.target);\n        if (isClickInside) {\n          console.log('You clicked inside')\n        }\n        else {\n          console.log('You clicked outside')\n        }\n    });\n&lt;/script&gt;\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28294008,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/28294008",
    "title": null,
    "body": "<p>See <a href=\"https://github.com/allmarkedup/purl/\" rel=\"noreferrer\">purl.js</a>. This will really help and can also be used, depending on jQuery. Use it like this:</p>\n\n<pre><code>$.url().param(\"yourparam\");\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2255879,
      "name": "Chuanshi Liu",
      "reputation": 199
    }
  },
  {
    "soID": 28699962,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/28699962",
    "title": null,
    "body": "<ol>\n<li>check that <code>var a;</code> exist</li>\n<li><p>trim out the <code>false spaces</code> in the value, then test for <code>emptiness</code></p>\n\n<pre><code>if ((a)&amp;&amp;(a.trim()!=''))\n{\n  // if variable a is not empty do this \n}\n</code></pre></li>\n</ol>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2258599,
      "name": "Timothy Nwanwene",
      "reputation": 348
    }
  },
  {
    "soID": 22969337,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/22969337",
    "title": null,
    "body": "<p>After all, none of examples suits me, so I wrote my own.</p>\n\n<p><strong>Tests</strong> (no support of Internet&nbsp;Explorer <code>filter:alpha</code>):</p>\n\n<p>a) Check if the document is not hidden</p>\n\n<p>b) Check if an element has zero width / height / opacity or <code>display:none</code> / <code>visibility:hidden</code> in inline styles</p>\n\n<p>c) Check if the center (also because it is faster than testing every pixel / corner) of element is not hidden by other element (and all ancestors, example: <code>overflow:hidden</code> / scroll / one element over enother) or screen edges</p>\n\n<p>d) Check if an element has zero width / height / opacity or <code>display:none</code> / visibility:hidden in computed styles (among all ancestors)</p>\n\n<p><strong>Tested on</strong></p>\n\n<p>Android 4.4 (Native browser/Chrome/Firefox), Firefox (Windows/Mac), Chrome (Windows/Mac), Opera (Windows <a href=\"http://en.wikipedia.org/wiki/Presto_%28layout_engine%29\">Presto</a>/Mac Webkit), Internet&nbsp;Explorer (Internet&nbsp;Explorer 5-11 document modes + Internet&nbsp;Explorer 8 on a virtual machine), Safari (Windows/Mac/iOS)</p>\n\n<pre><code>var is_visible = (function () {\n    var x = window.pageXOffset ? window.pageXOffset + window.innerWidth - 1 : 0,\n        y = window.pageYOffset ? window.pageYOffset + window.innerHeight - 1 : 0,\n        relative = !!((!x &amp;&amp; !y) || !document.elementFromPoint(x, y));\n        function inside(child, parent) {\n            while(child){\n                if (child === parent) return true;\n                child = child.parentNode;\n            }\n        return false;\n    };\n    return function (elem) {\n        if (\n            document.hidden ||\n            elem.offsetWidth==0 ||\n            elem.offsetHeight==0 ||\n            elem.style.visibility=='hidden' ||\n            elem.style.display=='none' ||\n            elem.style.opacity===0\n        ) return false;\n        var rect = elem.getBoundingClientRect();\n        if (relative) {\n            if (!inside(document.elementFromPoint(rect.left + elem.offsetWidth/2, rect.top + elem.offsetHeight/2),elem)) return false;\n        } else if (\n            !inside(document.elementFromPoint(rect.left + elem.offsetWidth/2 + window.pageXOffset, rect.top + elem.offsetHeight/2 + window.pageYOffset), elem) ||\n            (\n                rect.top + elem.offsetHeight/2 &lt; 0 ||\n                rect.left + elem.offsetWidth/2 &lt; 0 ||\n                rect.bottom - elem.offsetHeight/2 &gt; (window.innerHeight || document.documentElement.clientHeight) ||\n                rect.right - elem.offsetWidth/2 &gt; (window.innerWidth || document.documentElement.clientWidth)\n            )\n        ) return false;\n        if (window.getComputedStyle || elem.currentStyle) {\n            var el = elem,\n                comp = null;\n            while (el) {\n                if (el === document) {break;} else if(!el.parentNode) return false;\n                comp = window.getComputedStyle ? window.getComputedStyle(el, null) : el.currentStyle;\n                if (comp &amp;&amp; (comp.visibility=='hidden' || comp.display == 'none' || (typeof comp.opacity !=='undefined' &amp;&amp; comp.opacity != 1))) return false;\n                el = el.parentNode;\n            }\n        }\n        return true;\n    }\n})();\n</code></pre>\n\n<p>How to use:</p>\n\n<pre><code>is_visible(elem) // boolean\n</code></pre>\n",
    "score": 41,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2274995,
      "name": "Aleko",
      "reputation": 700
    }
  },
  {
    "soID": 16519172,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/16519172",
    "title": null,
    "body": "<pre><code>$(\".myCheckBox\").attr(\"checked\",\"checked\");\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2289198,
      "name": "mathew",
      "reputation": 93
    }
  },
  {
    "soID": 38227080,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/38227080",
    "title": null,
    "body": "<p>Try the following method. Assign the <code>Object</code> property value to <code>undefined</code>. Then <code>stringify</code> the object and <code>parse</code>.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code> var myObject = {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\r\n\r\nmyObject.regex = undefined;\r\nmyObject = JSON.parse(JSON.stringify(myObject));\r\n\r\nconsole.log(myObject);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2293686,
      "name": "Mohammed Safeer",
      "reputation": 4700
    }
  },
  {
    "soID": 16602140,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/16602140",
    "title": null,
    "body": "<p>If there is someone who wants to concatenate the <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"noreferrer\">URL</a> and hash tag, combine two functions:</p>\n\n<pre><code>var pathname = window.location.pathname + document.location.hash;\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2337895,
      "name": "Nis",
      "reputation": 1169
    }
  },
  {
    "soID": 25214775,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/25214775",
    "title": null,
    "body": "<p>A better explanation to <a href=\"https://stackoverflow.com/a/336868/2351696\">Greg's answer</a></p>\n\n<pre><code>functionTwo();\nfunction functionTwo() {\n}\n</code></pre>\n\n<p><strong>Why no error? We were always taught that expressions are executed from top to bottom(??)</strong></p>\n\n<h2>Because:</h2>\n\n<blockquote>\n  <p>Function declarations and variable declarations are always moved (<code>hoisted</code>) invisibly to the top of their containing scope by the JavaScript interpreter. Function parameters and language-defined names are, obviously, already there. <a href=\"http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting\" rel=\"noreferrer\">ben cherry</a></p>\n</blockquote>\n\n<p>This means that code like this:</p>\n\n<pre><code>functionOne();                  ---------------      var functionOne;\n                                | is actually |      functionOne();\nvar functionOne = function(){   | interpreted |--&gt;\n};                              |    like     |      functionOne = function(){\n                                ---------------      };\n</code></pre>\n\n<p>Notice that the assignment portion of the declarations were not hoisted. Only the name is hoisted.</p>\n\n<p><em>But in the case with function declarations, the entire function body will be hoisted as well</em>:</p>\n\n<pre><code>functionTwo();              ---------------      function functionTwo() {\n                            | is actually |      };\nfunction functionTwo() {    | interpreted |--&gt;\n}                           |    like     |      functionTwo();\n                            ---------------\n</code></pre>\n",
    "score": 77,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2351696,
      "name": "suhail",
      "reputation": 7071
    }
  },
  {
    "soID": 19999134,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/19999134",
    "title": null,
    "body": "<pre><code>if($('#postcode_div').is(':visible')) {\n    if($('#postcode_text').val()=='') {\n        $('#spanPost').text('\\u00a0');\n    } else {\n        $('#spanPost').text($('#postcode_text').val());\n}\n</code></pre>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2357391,
      "name": "Gaurav",
      "reputation": 263
    }
  },
  {
    "soID": 22079686,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/22079686",
    "title": null,
    "body": "<p>Several methods:</p>\n\n<pre><code>//when undefined\nif (typeof MyVariable == 'undefined')\n\n//when false\nif (MyVariable == false) //same as if(!MyVariable )\n\n//when defined, but empty\nif (\n    (MyVariable.length == 0)\n                ||\n    (MyVariable == \"\")\n                ||\n    (MyVariable.replace(/\\s/g,\"\") == \"\")\n                ||\n    (!/[^\\s]/.test(MyVariable))\n                ||\n    (/^\\s*$/.test(MyVariable))\n   )\n</code></pre>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2377343,
      "name": "T.Todua",
      "reputation": 19936
    }
  },
  {
    "soID": 16536783,
    "parentID": 332872,
    "url": "https://stackoverflow.com/q/16536783",
    "title": null,
    "body": "<p>Similar kind of thing I tried with normal javascript</p>\n\n<pre><code>function fixedEncodeURIComponent(str){\n     return encodeURIComponent(str).replace(/[!'()]/g, escape).replace(/\\*/g, \"%2A\");\n}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 26923895,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/26923895",
    "title": null,
    "body": "<p><strong>Yes!</strong> It does matter.</p>\n\n<p><code>===</code> operator in javascript <strong>checks value as well as type</strong> where as <code>==</code> operator just checks <strong>the value (does type conversion if required)</strong>.</p>\n\n<p><img src=\"https://i.stack.imgur.com/5ttlR.png\" alt=\"enter image description here\"></p>\n\n<p>You can easily test it. Paste following code in an HTML file and open it in browser</p>\n\n<pre><code>&lt;script&gt;\n\nfunction onPageLoad()\n{\n    var x = \"5\";\n    var y = 5;\n    alert(x === 5);\n};\n\n&lt;/script&gt;\n\n&lt;/head&gt;\n\n&lt;body onload='onPageLoad();'&gt;\n</code></pre>\n\n<p>You will get '<strong>false</strong>' in alert. Now modify the <code>onPageLoad()</code> method to <code>alert(x == 5);</code> you will get <strong>true</strong>.</p>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2396539,
      "name": "Aniket Thakur",
      "reputation": 32139
    }
  },
  {
    "soID": 23606275,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/23606275",
    "title": null,
    "body": "<p>You can use</p>\n\n<pre><code>$(function() {\n    $(\"#file_upload_1\").uploadify({\n        height        : 30,\n        swf           : '/uploadify/uploadify.swf',\n        uploader      : '/uploadify/uploadify.php',\n        width         : 120\n    });\n});\n</code></pre>\n\n<p><a href=\"http://www.uploadify.com/demos/\" rel=\"noreferrer\">Demo</a></p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2396721,
      "name": "Amit",
      "reputation": 1019
    }
  },
  {
    "soID": 39772342,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/39772342",
    "title": null,
    "body": "<p>This may help someone.</p>\n\n<p>HTML5</p>\n\n<pre><code> &lt;input id=\"check_box\" type=\"checkbox\" onclick=\"handleOnClick()\"&gt;\n</code></pre>\n\n<p>JavaScript.</p>\n\n<pre><code>  function handleOnClick(){\n\n      if($(\"#check_box\").prop('checked'))\n      {        \n          console.log(\"current state: checked\");\n      }\n      else\n      {         \n          console.log(\"current state: unchecked\");\n      }    \n }\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2423906,
      "name": "Sedrick Jefferson",
      "reputation": 2452
    }
  },
  {
    "soID": 29159784,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/29159784",
    "title": null,
    "body": "<p>Simply </p>\n\n<p><code>==</code> means <strong>comparison</strong> between operands <strong>with</strong> <code>type conversion</code></p>\n\n<p>&amp;</p>\n\n<p><code>===</code> means <strong>comparison</strong> between operands <strong>without</strong> <code>type conversion</code></p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2424040,
      "name": "Amit",
      "reputation": 405
    }
  },
  {
    "soID": 29910821,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/29910821",
    "title": null,
    "body": "<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\" rel=\"noreferrer\">delete operator</a> is the best way to do so.</p>\n\n<p>A live example to show:</p>\n\n<pre><code>var foo = {bar: 'bar'};\ndelete foo.bar;\nconsole.log('bar' in foo); // Logs false, because bar was deleted from foo.\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2432571,
      "name": "Tarun Nagpal",
      "reputation": 297
    }
  },
  {
    "soID": 16861422,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/16861422",
    "title": null,
    "body": "<p>The broadest way to do this is to select everything on the web page except the element where you don't want clicks detected and bind the click event those when the menu is opened. </p>\n\n<p>Then when the menu is closed remove the binding.</p>\n\n<p>Use .stopPropagation to prevent the event from affecting any part of the menuscontainer.</p>\n\n<pre><code>$(\"*\").not($(\"#menuscontainer\")).bind(\"click.OutsideMenus\", function ()\n{\n    // hide the menus\n\n    //then remove all of the handlers\n    $(\"*\").unbind(\".OutsideMenus\");\n});\n\n$(\"#menuscontainer\").bind(\"click.OutsideMenus\", function (event) \n{\n    event.stopPropagation(); \n});\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28374239,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/28374239",
    "title": null,
    "body": "<p>I'm using this one</p>\n\n<pre><code>String.prototype.maybeBool = function(){\n\n    if ( [\"yes\", \"true\", \"1\", \"on\"].indexOf( this.toLowerCase() ) !== -1 ) return true;\n    if ( [\"no\", \"false\", \"0\", \"off\"].indexOf( this.toLowerCase() ) !== -1 ) return false;\n\n    return this;\n\n}\n\n\"on\".maybeBool(); //returns true;\n\"off\".maybeBool(); //returns false;\n\"I like js\".maybeBool(); //returns \"I like js\"\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 30335438,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/30335438",
    "title": null,
    "body": "<p><strong>A hopefully faster bidirectional <code>indexOf</code> / <code>lastIndexOf</code> alternative</strong></p>\n\n<h2>2015</h2>\n\n<p>While the new method <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\" rel=\"nofollow noreferrer\">includes</a> is very nice, the support is basically zero for now.</p>\n\n<p>It's long time that I was thinking of way to replace the slow indexOf/lastIndexOf functions.</p>\n\n<p>A performant way has already been found, looking at the top answers. From those I chose the <code>contains</code> function posted by @Damir Zekic which should be the fastest one. But it also states that the benchmarks are from 2008 and so are outdated.</p>\n\n<p>I also prefer <code>while</code> over <code>for</code>, but for not a specific reason I ended writing the function with a for loop. It could be also done with a <code>while --</code>.</p>\n\n<p>I was curious if the iteration was much slower if I check both sides of the array while doing it. Apparently no, and so this function is around two times faster than the top voted ones. Obviously it's also faster than the native one. This in a real world environment, where you never know if the value you are searching is at the beginning or at the end of the array.</p>\n\n<p>When you know you just pushed an array with a value, using lastIndexOf remains probably the best solution, but if you have to travel through big arrays and the result could be everywhere, this could be a solid solution to make things faster.</p>\n\n<p><strong>Bidirectional indexOf/lastIndexOf</strong></p>\n\n<pre><code>function bidirectionalIndexOf(a, b, c, d, e){\n  for(c=a.length,d=c*1; c--; ){\n    if(a[c]==b) return c; //or this[c]===b\n    if(a[e=d-1-c]==b) return e; //or a[e=d-1-c]===b\n  }\n  return -1\n}\n\n//Usage\nbidirectionalIndexOf(array,'value');\n</code></pre>\n\n<h3>Performance test</h3>\n\n<p><a href=\"http://jsperf.com/bidirectionalindexof\" rel=\"nofollow noreferrer\">http://jsperf.com/bidirectionalindexof</a></p>\n\n<p>As test I created an array with 100k entries.</p>\n\n<p>Three queries: at the beginning, in the middle &amp; at the end of the array.</p>\n\n<p>I hope you also find this interesting and test the performance.</p>\n\n<p>Note: As you can see I slightly modified the <code>contains</code> function to reflect the indexOf &amp; lastIndexOf output (so basically <code>true</code> with the <code>index</code> and <code>false</code> with <code>-1</code>). That shouldn't harm it.</p>\n\n<h3>The array prototype variant</h3>\n\n<pre><code>Object.defineProperty(Array.prototype,'bidirectionalIndexOf',{value:function(b,c,d,e){\n  for(c=this.length,d=c*1; c--; ){\n    if(this[c]==b) return c; //or this[c]===b\n    if(this[e=d-1-c] == b) return e; //or this[e=d-1-c]===b\n  }\n  return -1\n},writable:false, enumerable:false});\n\n// Usage\narray.bidirectionalIndexOf('value');\n</code></pre>\n\n<p>The function can also be easily modified to return true or false or even the object, string or whatever it is.</p>\n\n<p>And here is the <code>while</code> variant:</p>\n\n<pre><code>function bidirectionalIndexOf(a, b, c, d){\n  c=a.length; d=c-1;\n  while(c--){\n    if(b===a[c]) return c;\n    if(b===a[d-c]) return d-c;\n  }\n  return c\n}\n\n// Usage\nbidirectionalIndexOf(array,'value');\n</code></pre>\n\n<h3>How is this possible?</h3>\n\n<p>I think that the simple calculation to get the reflected index in an array is so simple that it's two times faster than doing an actual loop iteration.</p>\n\n<p>Here is a complex example doing three checks per iteration, but this is only possible with a longer calculation which causes the slowdown of the code.</p>\n\n<p><a href=\"http://jsperf.com/bidirectionalindexof/2\" rel=\"nofollow noreferrer\">http://jsperf.com/bidirectionalindexof/2</a></p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2450730,
      "name": "cocco",
      "reputation": 10021
    }
  },
  {
    "soID": 24055237,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/24055237",
    "title": null,
    "body": "<p>The first example is a function declaration:</p>\n\n<pre><code>function abc(){}\n</code></pre>\n\n<p>The second example is a function expression:</p>\n\n<pre><code>var abc = function() {};\n</code></pre>\n\n<p>The main difference is how they are hoisted (lifted and declared). In the first example, the whole function declaration is hoisted. In the second example only the var 'abc' is hoisted, its value (the function) will be undefined, and the function itself remains at the position that it is declared.</p>\n\n<p>To put it simply:</p>\n\n<pre><code>//this will work\nabc(param);\nfunction abc(){}\n\n//this would fail\nabc(param);\nvar abc = function() {}\n</code></pre>\n\n<p>To study more about this topic I strongly recommend you this\n<a href=\"http://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/#comment-43792\">link</a></p>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2454402,
      "name": "sla55er",
      "reputation": 466
    }
  },
  {
    "soID": 19854256,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/19854256",
    "title": null,
    "body": "<p>Just use ajax.abort() for example you could abort any pending ajax request before sending another one like this</p>\n\n<pre><code>//check for existing ajax request\nif(ajax){ \n ajax.abort();\n }\n//then you make another ajax request\n$.ajax(\n //your code here\n  );\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2500985,
      "name": "Joecoder001",
      "reputation": 189
    }
  },
  {
    "soID": 26276051,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/26276051",
    "title": null,
    "body": "<p>Using not():</p>\n\n<pre><code>$(\"#id\").not().click(function() {\n    alert('Clicked other that #id');\n});\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28135547,
    "parentID": 306583,
    "url": "https://stackoverflow.com/q/28135547",
    "title": null,
    "body": "<p>Ways to refer to a child in jQuery. I summarized it in the following jQuery: </p>\n\n<pre><code>$(this).find(\"img\"); // any img tag child or grandchild etc...   \n$(this).children(\"img\"); //any img tag child that is direct descendant \n$(this).find(\"img:first\") //any img tag first child or first grandchild etc...\n$(this).children(\"img:first\") //the first img tag  child that is direct descendant \n$(this).children(\"img:nth-child(1)\") //the img is first direct descendant child\n$(this).next(); //the img is first direct descendant child\n</code></pre>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2534288,
      "name": "Oskar",
      "reputation": 1381
    }
  },
  {
    "soID": 31564584,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/31564584",
    "title": null,
    "body": "<p>The javascript is a <strong>weakly typed language</strong> i.e. without any data-types as there in C,c++ eg. int, boolean, float etc. thus a variable can hold any type of value, that why these special comparison operators are there</p>\n\n<p>Eg</p>\n\n<pre><code>var i = 20;var j = \"20\";\n</code></pre>\n\n<p>if we apply comparison operators these variables result will be</p>\n\n<pre><code>i==j //result is true\n</code></pre>\n\n<p>or </p>\n\n<pre><code>j != i//result is false\n</code></pre>\n\n<p>for that we need a special comparison operators which checks for the <strong>value as well as for the data type</strong> of the variable</p>\n\n<p>if we do</p>\n\n<pre><code>i===j //result is false\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2541634,
      "name": "Akshay Khale",
      "reputation": 2814
    }
  },
  {
    "soID": 17769861,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/17769861",
    "title": null,
    "body": "<p>If you're jumping back an forth between JavaScript and C#, it's best to train your fingers for the common convention which is double quotes. </p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19147489,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/19147489",
    "title": null,
    "body": "<p><b>Equality comparison: </b></p>\n\n<p>Operator <code>==</code></p>\n\n<p>Returns true, when both operands are equal. The operands are converted to the same type before being compared.</p>\n\n<pre><code>&gt;&gt;&gt; 1 == 1\ntrue\n&gt;&gt;&gt; 1 == 2\nfalse\n&gt;&gt;&gt; 1 == '1'\ntrue\n</code></pre>\n\n<p><b>Equality and type comparison: </b></p>\n\n<p>Operator <code>===</code></p>\n\n<p>Returns true if both operands are equal and of the same type. It's generally \nbetter and safer if you compare this way, because there's no behind-the-scenes type conversions.</p>\n\n<pre><code>&gt;&gt;&gt; 1 === '1'\nfalse\n&gt;&gt;&gt; 1 === 1\ntrue\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2601995,
      "name": "user2601995",
      "reputation": 2189
    }
  },
  {
    "soID": 25195443,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/25195443",
    "title": null,
    "body": "<p>You can upload simply with AJAX.</p>\n\n<p>HTML:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;form id=\"upload-form\"&gt;\n    &lt;div&gt;\n        &lt;label for=\"file\"&gt;File:&lt;/label&gt;\n        &lt;input type=\"file\" id=\"file\" name=\"file\" /&gt;\n        &lt;progress class=\"progress\" value=\"0\" max=\"100\"&gt;&lt;/progress&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;input type=\"submit\" value=\"Submit\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>CSS</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.progress { display: none; }\n</code></pre>\n\n<p>Javascript:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>$(document).ready(function(ev) {\n    $(\"#upload-form\").on('submit', (function(ev) {\n        ev.preventDefault();\n        $.ajax({\n            xhr: function() {\n                var progress = $('.progress'),\n                    xhr = $.ajaxSettings.xhr();\n\n                progress.show();\n\n                xhr.upload.onprogress = function(ev) {\n                    if (ev.lengthComputable) {\n                        var percentComplete = parseInt((ev.loaded / ev.total) * 100);\n                        progress.val(percentComplete);\n                        if (percentComplete === 100) {\n                            progress.hide().val(0);\n                        }\n                    }\n                };\n\n                return xhr;\n            },\n            url: 'upload.php',\n            type: 'POST',\n            data: new FormData(this),\n            contentType: false,\n            cache: false,\n            processData: false,\n            success: function(data, status, xhr) {\n                // ...\n            },\n            error: function(xhr, status, error) {\n                // ...\n            }\n       });\n    }));\n});\n</code></pre>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2610720,
      "name": "Zayn Ali",
      "reputation": 2248
    }
  },
  {
    "soID": 17858386,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/17858386",
    "title": null,
    "body": "<p>I had the problem of polling and once the page was closed the poll continued so in my cause  a user would miss an update as a mysql value was being set for the next 50 seconds after page closing, even though I killed the ajax request, I figured away around, using $_SESSION to set a var won't update in the poll its self until its ended and a new one has started, so what I did was set a value in my database as 0 = offpage , while I'm polling I query that row and return false; when it's 0 as querying in polling will get you current values obviously...</p>\n\n<p>I hope this helped </p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2618734,
      "name": "Marcus",
      "reputation": 31
    }
  },
  {
    "soID": 44620847,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/44620847",
    "title": null,
    "body": "<p>Or this solution:</p>\n\n<pre><code>Array.prototype.includes = function (object) {\n  return !!+~this.indexOf(object);\n};\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2647671,
      "name": "Tefa",
      "reputation": 181
    }
  },
  {
    "soID": 44195502,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/44195502",
    "title": null,
    "body": "<p>Try this</p>\n\n<pre><code>delete myObject['key'];\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2664160,
      "name": "codemirror",
      "reputation": 712
    }
  },
  {
    "soID": 23315028,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/23315028",
    "title": null,
    "body": "<p>I personally use them in combination. For example:</p>\n\n<p>HTML</p>\n\n<pre><code>&lt;a href=\"#\"&gt;Link&lt;/a&gt;\n</code></pre>\n\n<hr>\n\n<p>with little bit of jQuery</p>\n\n<pre><code>$('a[href=\"#\"]').attr('href','javascript:void(0);');\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$('a[href=\"#\"]').click(function(e) {\n   e.preventDefault();\n});\n</code></pre>\n\n<p>But I'm using that just for preventing the page jumping to the top when the user clicks on an empty anchor. I'm rarely using onClick and other <code>on</code> events directly in HTML.</p>\n\n<p>My suggestion would be to use <code>&lt;span&gt;</code> element with the <code>class</code> attribute instead of\nan anchor. For example:</p>\n\n<pre><code>&lt;span class=\"link\"&gt;Link&lt;/span&gt;\n</code></pre>\n\n<hr>\n\n<p>Then assign the function to <code>.link</code> with a script wrapped in the body and just before the <code>&lt;/body&gt;</code> tag or in an external JavaScript document.</p>\n\n<pre><code>&lt;script&gt;\n    (function($) {\n        $('.link').click(function() {\n            ... code to execute ...\n        });\n    })(jQuery);\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>*Note:</strong> For dynamically created elements, use:</p>\n\n<pre><code>$('.link').on('click', function() {\n    ... code to execute ...\n});\n</code></pre>\n\n<p>And for dynamically created elements which are created with dynamically created elements, use:</p>\n\n<pre><code>$(document).on('click','.link', function() {\n    ... code to execute ...\n});\n</code></pre>\n\n<hr>\n\n<p>Then you can style the span element to look like an anchor with a little CSS:</p>\n\n<pre><code>.link {\n    color: #0000ee;\n    text-decoration: underline;\n    cursor: pointer;\n}\n.link:active {\n    color: red;\n}\n</code></pre>\n\n<p>Here's <strong><a href=\"http://jsFiddle.net/mdesdev/Dn8YT/\" rel=\"noreferrer\">a jsFiddle</a></strong> example of above aforementioned.</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19801208,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/19801208",
    "title": null,
    "body": "<p>Also here's a ternary conditional expression to check the state of the element and then to toggle it:</p>\n\n<pre><code>$('someElement').on('click', function(){ $('elementToToggle').is(':visible') ? $('elementToToggle').hide('slow') : $('elementToToggle').show('slow'); });\n</code></pre>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2668568,
      "name": "cssimsek",
      "reputation": 683
    }
  },
  {
    "soID": 18164607,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/18164607",
    "title": null,
    "body": "<p>Try this curious example. In the example below if a were a numeric initialized at 0, you'd see 0 and then 1. Except a is an object and javascript will pass f1 a pointer of a rather than a copy of it. The result is that you get the same alert both times.</p>\n\n<pre><code>var a = new Date();\nfunction f1(b)\n{\n    b.setDate(b.getDate()+1);\n    alert(b.getDate());\n}\nf1(a);\nalert(a.getDate());\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2670957,
      "name": "Mig82",
      "reputation": 21
    }
  },
  {
    "soID": 26438460,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/26438460",
    "title": null,
    "body": "<p>run the code. hope this will give an idea about scoping </p>\n\n<pre><code>Name = 'global data';\ndocument.Name = 'current document data';\n(function(window,document){\nvar Name = 'local data';\nvar myObj = {\n    Name: 'object data',\n    f: function(){\n        alert(this.Name);\n    }\n};\n\nmyObj.newFun = function(){\n    alert(this.Name);\n}\n\nfunction testFun(){\n    alert(\"Window Scope : \" + window.Name + \n          \"\\nLocal Scope : \" + Name + \n          \"\\nObject Scope : \" + this.Name + \n          \"\\nCurrent document Scope : \" + document.Name\n         );\n}\n\n\ntestFun.call(myObj);\n})(window,document);\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2672014,
      "name": "Yeasin Abedin Siam",
      "reputation": 477
    }
  },
  {
    "soID": 34283281,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/34283281",
    "title": null,
    "body": "<h1>The efficient way to clone(not deep-clone) an object in one line of code</h1>\n\n<p>An <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" rel=\"noreferrer\"><code>Object.assign</code></a> method is part of the ECMAScript 2015 (ES6) standard and does exactly what you need.</p>\n\n<pre><code>var clone = Object.assign({}, obj);\n</code></pre>\n\n<blockquote>\n  <p>The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object.</p>\n</blockquote>\n\n<p><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" rel=\"noreferrer\">Read more...</a></p>\n\n<p>The <strong>polyfill</strong> to support older browsers:</p>\n\n<pre><code>if (!Object.assign) {\n  Object.defineProperty(Object, 'assign', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function(target) {\n      'use strict';\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert first argument to object');\n      }\n\n      var to = Object(target);\n      for (var i = 1; i &lt; arguments.length; i++) {\n        var nextSource = arguments[i];\n        if (nextSource === undefined || nextSource === null) {\n          continue;\n        }\n        nextSource = Object(nextSource);\n\n        var keysArray = Object.keys(nextSource);\n        for (var nextIndex = 0, len = keysArray.length; nextIndex &lt; len; nextIndex++) {\n          var nextKey = keysArray[nextIndex];\n          var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n          if (desc !== undefined &amp;&amp; desc.enumerable) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n      return to;\n    }\n  });\n}\n</code></pre>\n",
    "score": 80,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 34296412,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/34296412",
    "title": null,
    "body": "<h1>The fastest safe way to convert a string to a boolean in one line of code</h1>\n\n<p>One of features that help to fasten the code execution in Javascript is <em>Short-Circuit Evaluation</em>:</p>\n\n<blockquote>\n  <p>As logical expressions are evaluated left to right, they are tested for possible \"short-circuit\" evaluation using the following rules:</p>\n  \n  <ul>\n  <li>false &amp;&amp; (anything) is short-circuit evaluated to false.</li>\n  <li>true || (anything) is short-circuit evaluated to true.</li>\n  </ul>\n</blockquote>\n\n<p>So that if you want to test a string value for being <code>true</code> of <code>false</code> in <code>JSON.parse</code> way of test and keep the performance strong, you may use the <code>||</code> operator to exclude the slow code from execution in case the test value is of boolean type.</p>\n\n<pre><code>test === true || ['true','yes','1'].indexOf(test.toString().toLowerCase()) &gt; -1\n</code></pre>\n\n<p>As the <code>Array.prototype.indexOf()</code> method is a part of <em>ECMA-262</em> standard in the 5th edition, you may need a <strong>polyfill</strong> for the old browsers support.</p>\n\n<pre><code>// Production steps of ECMA-262, Edition 5, 15.4.4.14\n// Reference: http://es5.github.io/#x15.4.4.14\nif (!Array.prototype.indexOf) {\n  Array.prototype.indexOf = function(searchElement, fromIndex) {\n\n    var k;\n\n    // 1. Let O be the result of calling ToObject passing\n    //    the this value as the argument.\n    if (this == null) {\n      throw new TypeError('\"this\" is null or not defined');\n    }\n\n    var O = Object(this);\n\n    // 2. Let lenValue be the result of calling the Get\n    //    internal method of O with the argument \"length\".\n    // 3. Let len be ToUint32(lenValue).\n    var len = O.length &gt;&gt;&gt; 0;\n\n    // 4. If len is 0, return -1.\n    if (len === 0) {\n      return -1;\n    }\n\n    // 5. If argument fromIndex was passed let n be\n    //    ToInteger(fromIndex); else let n be 0.\n    var n = +fromIndex || 0;\n\n    if (Math.abs(n) === Infinity) {\n      n = 0;\n    }\n\n    // 6. If n &gt;= len, return -1.\n    if (n &gt;= len) {\n      return -1;\n    }\n\n    // 7. If n &gt;= 0, then Let k be n.\n    // 8. Else, n&lt;0, Let k be len - abs(n).\n    //    If k is less than 0, then let k be 0.\n    k = Math.max(n &gt;= 0 ? n : len - Math.abs(n), 0);\n\n    // 9. Repeat, while k &lt; len\n    while (k &lt; len) {\n      // a. Let Pk be ToString(k).\n      //   This is implicit for LHS operands of the in operator\n      // b. Let kPresent be the result of calling the\n      //    HasProperty internal method of O with argument Pk.\n      //   This step can be combined with c\n      // c. If kPresent is true, then\n      //    i.  Let elementK be the result of calling the Get\n      //        internal method of O with the argument ToString(k).\n      //   ii.  Let same be the result of applying the\n      //        Strict Equality Comparison Algorithm to\n      //        searchElement and elementK.\n      //  iii.  If same is true, return k.\n      if (k in O &amp;&amp; O[k] === searchElement) {\n        return k;\n      }\n      k++;\n    }\n    return -1;\n  };\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23893003,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/23893003",
    "title": null,
    "body": "<p>This is probably the shortest and easiest solution:</p>\n\n<pre><code>$(\".myCheckBox\")[0].checked = true;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(\".myCheckBox\")[0].checked = false;\n</code></pre>\n\n<hr>\n\n<p>Even shorter would be:</p>\n\n<pre><code>$(\".myCheckBox\")[0].checked = !0;\n$(\".myCheckBox\")[0].checked = !1;\n</code></pre>\n\n<hr>\n\n<p>Here is <a href=\"http://jsfiddle.net/8PCx8/\" rel=\"noreferrer\">a <em>jsFiddle</em></a> as well.</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2689500,
      "name": "frieder",
      "reputation": 1099
    }
  },
  {
    "soID": 45320042,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/45320042",
    "title": null,
    "body": "<p>Dan's assertion that 'delete' is very slow and the benchmark he posted were doubted. So I carried out the test myself in Chrome 59. It does seem that 'delete' is about 30 times slower:</p>\n\n<pre><code>var iterationsTotal = 10000000;  // 10 million\nvar o;\nvar t1 = Date.now(),t2;\nfor (let i=0; i&lt;iterationsTotal; i++) {\n   o = {a:1,b:2,c:3,d:4,e:5};\n   delete o.a; delete o.b; delete o.c; delete o.d; delete o.e;\n}\nconsole.log ((t2=Date.now())-t1);  // 6135\nfor (let i=0; i&lt;iterationsTotal; i++) {\n   o = {a:1,b:2,c:3,d:4,e:5};\n   o.a = o.b = o.c = o.d = o.e = undefined;\n}\nconsole.log (Date.now()-t2);  // 205\n</code></pre>\n\n<p>Note that I purposedly carried out more than one 'delete' operations in one loop cycle to minimize the effect caused by the other operations.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2691226,
      "name": "Chong Lip Phang",
      "reputation": 1581
    }
  },
  {
    "soID": 31678000,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/31678000",
    "title": null,
    "body": "<pre><code>var formData=new FormData();\nformData.append(\"fieldname\",\"value\");\nformData.append(\"image\",$('[name=\"filename\"]')[0].files[0]);\n\n$.ajax({\n    url:\"page.php\",\n    data:formData,\n    type: 'POST',\n    dataType:\"JSON\",\n    cache: false,\n    contentType: false,\n    processData: false,\n    success:function(data){ }\n});\n</code></pre>\n\n<p>You can use form data to post all your values including images.</p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2700880,
      "name": "Vivek Aasaithambi",
      "reputation": 668
    }
  },
  {
    "soID": 28198524,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/28198524",
    "title": null,
    "body": "<h2><strong>Solution1</strong></h2>\n\n<p>Instead of using event.stopPropagation() which can have some side affects, just define a simple flag variable and add one <code>if</code> condition. I tested this and worked properly without any side affects of stopPropagation:</p>\n\n<pre><code>var flag = \"1\";\n$('#menucontainer').click(function(event){\n    flag = \"0\"; // flag 0 means click happened in the area where we should not do any action\n});\n\n$('html').click(function() {\n    if(flag != \"0\"){\n        // Hide the menus if visible\n    }\n    else {\n        flag = \"1\";\n    }\n});\n</code></pre>\n\n<h2><strong>Solution2</strong></h2>\n\n<p>With just a simple <code>if</code> condition:</p>\n\n<pre><code>$(document).on('click', function(event){\n    var container = $(\"#menucontainer\");\n    if (!container.is(event.target) &amp;&amp;            // If the target of the click isn't the container...\n        container.has(event.target).length === 0) // ... nor a descendant of the container\n    {\n        // Do whatever you want to do when click is outside the element\n    }\n});\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 34704195,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/34704195",
    "title": null,
    "body": "<p>You can also use this trick:</p>\n\n<pre><code>var arrayContains = function(object) {\n  return (serverList.filter(function(currentObject) {\n    if (currentObject === object) {\n      return currentObject\n    }\n    else {\n      return false;\n    }\n  }).length &gt; 0) ? true : false\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2724028,
      "name": "user2724028",
      "reputation": 247
    }
  },
  {
    "soID": 26629746,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/26629746",
    "title": null,
    "body": "<pre><code>$(\"body &gt; div:not(#dvid)\").click(function (e) {\n    //your code\n}); \n</code></pre>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31533124,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/31533124",
    "title": null,
    "body": "<p><a href=\"https://stackoverflow.com/a/336868/2730064\">Greg's Answer</a> is good enough, but I still would like to add something to it that I learned just now watching <a href=\"https://en.wikipedia.org/wiki/Douglas_Crockford\" rel=\"nofollow noreferrer\">Douglas Crockford's</a> videos.</p>\n\n<p><strong>Function expression:</strong></p>\n\n<pre><code>var foo = function foo() {};\n</code></pre>\n\n<p><strong>Function statement:</strong></p>\n\n<pre><code>function foo() {};\n</code></pre>\n\n<p>The function statement is just a shorthand for <code>var</code> statement with a <code>function</code> value.</p>\n\n<p>So</p>\n\n<pre><code>function foo() {};\n</code></pre>\n\n<p>expands to</p>\n\n<pre><code>var foo = function foo() {};\n</code></pre>\n\n<p>Which expands further to:</p>\n\n<pre><code>var foo = undefined;\nfoo = function foo() {};\n</code></pre>\n\n<p>And they are both hoisted to the top of the code.</p>\n\n<p><img src=\"https://i.stack.imgur.com/6TVZL.jpg\" alt=\"Screenshot from video\"></p>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2730064,
      "name": "Rohan",
      "reputation": 3069
    }
  },
  {
    "soID": 40202618,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/40202618",
    "title": null,
    "body": "<p>If  <code>xhr.abort();</code>  causes page reload,</p>\n\n<p>Then you can set <code>onreadystatechange</code> before abort to prevent:</p>\n\n<pre><code>// ↓ prevent page reload by abort()\nxhr.onreadystatechange = null;\n// ↓ may cause page reload\nxhr.abort();\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2752670,
      "name": "Viky",
      "reputation": 69
    }
  },
  {
    "soID": 25569194,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/25569194",
    "title": null,
    "body": "<p>If you want to append two arrays -</p>\n\n<pre><code>var a = ['a', 'b'];\nvar b = ['c', 'd'];\n</code></pre>\n\n<p>then you could use:</p>\n\n<pre><code>var c = a.concat(b);\n</code></pre>\n\n<p>And if you want to add record <code>g</code> to array  (<code>var a=[]</code>) then you could use:</p>\n\n<pre><code>a.push('g');\n</code></pre>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 36179368,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/36179368",
    "title": null,
    "body": "<pre><code>if($(\"h1\").is(\":hidden\")){\n    // your code..\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2800900,
      "name": "cbertelegni",
      "reputation": 185
    }
  },
  {
    "soID": 45181561,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/45181561",
    "title": null,
    "body": "<p>You can use <code>Function</code> to return a <code>Boolean</code> value from string <code>\"true\"</code> or <code>\"false\"</code></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const TRUE_OR_FALSE = str =&gt; new Function(`return ${str}`)();\r\n\r\nconst [TRUE, FALSE] = [\"true\", \"false\"];\r\n\r\nconst [T, F] = [TRUE_OR_FALSE(TRUE), TRUE_OR_FALSE(FALSE)];\r\n\r\nconsole.log(T, typeof T); // `true` `\"boolean\"`\r\n\r\nconsole.log(F, typeof F); // `false` `\"boolean\"`</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 29491573,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/29491573",
    "title": null,
    "body": "<p>Maybe you can do something like this</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(document).ready(function() {\r\n   var visible = $('#tElement').is(':visible');\r\n\r\n   if(visible) {\r\n      alert(\"visible\");\r\n                    // Code\r\n   }\r\n   else\r\n   {\r\n      alert(\"hidden\");\r\n   }\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\r\n\r\n&lt;input type=\"text\" id=\"tElement\" style=\"display:block;\"&gt;Firstname&lt;/input&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2808740,
      "name": "Mathias Stavrou",
      "reputation": 551
    }
  },
  {
    "soID": 36561933,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/36561933",
    "title": null,
    "body": "<p>This is how <a href=\"https://github.com/jquery/jquery/blob/055cb7534e2dcf7ee8ad145be83cb2d74b5331c7/src/css/hiddenVisibleSelectors.js\">jQuery</a> internally solves this problem:</p>\n\n<pre><code>jQuery.expr.pseudos.visible = function( elem ) {\n    return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n</code></pre>\n\n<p>If you don't use jQuery, you can just leverage this code and turn it into your own function:</p>\n\n<pre><code>function isVisible(elem) {\n    return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n</code></pre>\n\n<p>Which <code>isVisible</code> will return <code>true</code> as long as the element is visible.</p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2817112,
      "name": "Oriol",
      "reputation": 2509
    }
  },
  {
    "soID": 19054664,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/19054664",
    "title": null,
    "body": "<p>best practice is to use double quotes (\"\") first and single quotes ('') if needed after, the reason being is that if you ever use server-side scripting you will not be able to pull content from a server (example sql queries from a database) if you use singles quotes over double.</p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28588344,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/28588344",
    "title": null,
    "body": "<p>There are a lot of answers and it's hard to pick one. In my case, I prioritise the performance when choosing, so I create <a href=\"https://jsperf.com/cast-booleans\" rel=\"nofollow noreferrer\">this jsPerf</a> that I hope can throw some light here.</p>\n\n<p>Brief of results (the higher the better):</p>\n\n<ol>\n<li><a href=\"https://stackoverflow.com/a/264037/2824333\"><strong>Conditional statement</strong></a>: 2,826,922</li>\n<li><a href=\"https://stackoverflow.com/a/2114091/2824333\"><strong>Switch case on Bool object</strong></a>: 2,825,469</li>\n<li><a href=\"https://stackoverflow.com/a/7833897/2824333\"><strong>Casting to JSON</strong></a>: 1,867,774</li>\n<li><a href=\"https://stackoverflow.com/a/21285901/2824333\"><strong>!! conversions</strong></a>: 805,322</li>\n<li><a href=\"https://stackoverflow.com/a/264180/2824333\"><strong>Prototype of String</strong></a>: 713,637</li>\n</ol>\n\n<p>They are linked to the related answer where you can find more information (pros and cons) about each one; specially in the comments.</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 34500152,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/34500152",
    "title": null,
    "body": "<p>Both are different ways of defining a function. The difference is how the browser interprets and loads them into an execution context. </p>\n\n<p>The first case is of function expressions which loads only when the interpreter reaches that line of code. So if you do it like the following, you will get an error that the <strong>functionOne is not a function</strong>.</p>\n\n<pre><code>functionOne();\nvar functionOne = function() {\n    // Some code\n};\n</code></pre>\n\n<p>The reason is that on the first line no value is assigned to functionOne, and hence it is undefined. We are trying to call it as a function, and hence we are getting an error.</p>\n\n<p>On the second line we are assigning the reference of an anonymous function to functionOne.</p>\n\n<p>The second case is of function declarations that loads before any code is executed. So if you do like the following you won't get any error as the declaration loads before code execution.</p>\n\n<pre><code>functionOne();\nfunction functionOne() {\n   // Some code\n}\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2873883,
      "name": "Nitin9791",
      "reputation": 587
    }
  },
  {
    "soID": 21720354,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/21720354",
    "title": null,
    "body": "<p>The term you have used in your question title <code>Remove a property from a JavaScript object</code>, can be interpreted in some different ways. The one is to remove it for whole the memory and the list of object keys or the other is just to remove it from your object. As it has been mentioned in some other answers, the <code>delete</code> keyword is the main part. Let's say you have your object like:</p>\n\n<pre><code>myJSONObject = {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\n</code></pre>\n\n<p>If you do:</p>\n\n<pre><code>console.log(Object.keys(myJSONObject));\n</code></pre>\n\n<p>the result would be:</p>\n\n<pre><code>[\"ircEvent\", \"method\", \"regex\"]\n</code></pre>\n\n<p>You can delete that specific key from your object keys like:</p>\n\n<pre><code>delete myJSONObject[\"regex\"];\n</code></pre>\n\n<p>Then your objects key using <code>Object.keys(myJSONObject)</code> would be:</p>\n\n<pre><code>[\"ircEvent\", \"method\"]\n</code></pre>\n\n<p>But the point is if you care about memory and you want to whole the object gets removed from the memory, it is recommended to set it to null before you delete the key:</p>\n\n<pre><code>myJSONObject[\"regex\"] = null;\ndelete myJSONObject[\"regex\"];\n</code></pre>\n\n<p>The other important point here is to be careful about your other references to the same object. For instance, if you create a variable like:</p>\n\n<pre><code>var regex = myJSONObject[\"regex\"];\n</code></pre>\n\n<p>Or add it as a new pointer to another object like:</p>\n\n<pre><code>var myOtherObject = {};\nmyOtherObject[\"regex\"] = myJSONObject[\"regex\"];\n</code></pre>\n\n<p>Then even if you remove it from your object <code>myJSONObject</code>, that specific object won't get deleted from the memory, since the <code>regex</code> variable and <code>myOtherObject[\"regex\"]</code> still have their values. Then how could we remove the object from the memory for sure?</p>\n\n<p>The answer would be to <strong>delete all the references you have in your code, pointed to that very object</strong> and also <strong>not use <code>var</code> statements to create new references to that object</strong>. This last point regarding <code>var</code> statements, is one of the most crucial issues that we are usually faced with, because using <code>var</code> statements would prevent the created object from getting removed.</p>\n\n<p>Which means in this case you won't be able to remove that object because you have created the <code>regex</code> variable via a <code>var</code> statement, and if you do:</p>\n\n<pre><code>delete regex; //False\n</code></pre>\n\n<p>The result would be <code>false</code>, which means that your delete statement haven't been executed as you expected. But if you had not created that variable before, and you only had <code>myOtherObject[\"regex\"]</code> as your last existing reference, you could have done this just by removing it like:</p>\n\n<pre><code>myOtherObject[\"regex\"] = null;\ndelete myOtherObject[\"regex\"];\n</code></pre>\n\n<p><strong>In other words, a JavaScript object gets killed as soon as there is no reference left in your code pointed to that object.</strong></p>\n\n<hr>\n\n<p><strong>Update:</strong>\nThanks to @AgentME:</p>\n\n<blockquote>\n  <p>Setting a property to null before deleting it doesn't accomplish\n  anything (unless the object has been sealed by Object.seal and the\n  delete fails. That's not usually the case unless you specifically\n  try).</p>\n</blockquote>\n\n<p>To get more info on <code>Object.seal</code>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\" rel=\"noreferrer\">Object.seal()</a></p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2877719,
      "name": "Mehran Hatami",
      "reputation": 7635
    }
  },
  {
    "soID": 42391906,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/42391906",
    "title": null,
    "body": "<p>Now, you can take advantage of ES6 syntax and just do:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let array = [1, 2];\r\nconsole.log([...array, 3]);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>keeping the original array immutable.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 25208410,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/25208410",
    "title": null,
    "body": "<p>JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., <code>===</code>) is only true if the operands are of the same type. The more commonly used abstract comparison (e.g. <code>==</code>) converts the operands to the same Type before making the comparison.</p>\n\n<ul>\n<li><p>The equality(<code>==</code>) operator converts the operands if they are not of the same type, then applies strict comparison. If either operand is a number or a boolean, the operands are converted to numbers if possible; else if either operand is a string, the string operand is converted to a number if possible. If both operands are objects, then JavaScript compares internal references which are equal when operands refer to the same object in memory.</p>\n\n<p>Syntax</p>\n\n<p><code>x == y</code></p>\n\n<p>Examples</p>\n\n<p><code>3   == 3   // true\n\"3\"  == 3   // true\n3   == '3' // true</code></p></li>\n<li><p>The identity/strict equality(<code>===</code>) operator returns true if the operands are strictly equal (see above) with no type conversion.</p>\n\n<p>Syntax</p>\n\n<p><code>x === y</code></p>\n\n<p>Examples</p>\n\n<p><code>3 === 3   // true</code></p></li>\n</ul>\n\n<p>For reference: <em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\" rel=\"noreferrer\">Comparison operators</a></em> (Mozilla Developer Network)</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2948746,
      "name": "garakchy",
      "reputation": 195
    }
  },
  {
    "soID": 38997381,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/38997381",
    "title": null,
    "body": "<p>To hide <code>fileTreeClass</code> if clicked outside of it   </p>\n\n<pre><code> jQuery(document).mouseup(function (e) {\n            var container = $(\".fileTreeClass\");\n            if (!container.is(e.target) // if the target of the click isn't the container...\n                &amp;&amp; container.has(e.target).length === 0) // ... nor a descendant of the container\n            {\n                container.hide();\n            }\n        });\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 25466293,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/25466293",
    "title": null,
    "body": "<p>But what if the element's CSS is like the following?</p>\n\n<pre><code>.element{\n    position: absolute;left:-9999;    \n}\n</code></pre>\n\n<p>So <a href=\"https://stackoverflow.com/questions/8897289\">this answer to Stack Overflow question <em>How to check if an element is off-screen</em></a> should also be considered.</p>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2995263,
      "name": "RN Kushwaha",
      "reputation": 1156
    }
  },
  {
    "soID": 23398102,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/23398102",
    "title": null,
    "body": "<p>This will toggle the Nav menu when you click on/off the element.     </p>\n\n<pre><code>$(document).on('click', function(e) {\n    var elem = $(e.target).closest('#menu'),\n    box = $(e.target).closest('#nav');\n if (elem.length) {\n    e.preventDefault();\n    $('#nav').toggle();\n  } else if (!box.length) {\n    $('#nav').hide();\n }\n});\n\n\n\n&lt;li id=\"menu\"&gt;&lt;a&gt;&lt;/a&gt;&lt;/li&gt;\n&lt;ul id=\"nav\" &gt;  //Nav will toggle when you Click on Menu(it can be an icon in this example)\n        &lt;li class=\"page\"&gt;&lt;a&gt;Page1&lt;/a&gt;&lt;/li&gt;\n        &lt;li class=\"page\"&gt;&lt;a&gt;Pag2&lt;/a&gt;&lt;/li&gt;\n        &lt;li class=\"page\"&gt;&lt;a&gt;Page3&lt;/a&gt;&lt;/li&gt;            \n        &lt;li class=\"page\"&gt;&lt;a&gt;Page4&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 26998181,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/26998181",
    "title": null,
    "body": "<p>Why not using this? This doesn't scroll page up.</p>\n\n<pre><code>&lt;span role=\"button\" onclick=\"myJsFunc();\"&gt;Run JavaScript Code&lt;/span&gt;\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 27537666,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/27537666",
    "title": null,
    "body": "<pre><code>$(\"html\").click(function(){\n    if($('#info').css(\"opacity\")&gt;0.9) {\n        $('#info').fadeOut('fast');\n    }\n});\n</code></pre>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22505350,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/22505350",
    "title": null,
    "body": "<p>*<strong><em>Operators === vs == *</em></strong> </p>\n\n<pre><code>1 == true    =&gt;    true\ntrue == true    =&gt;    true\n1 === true    =&gt;    false\ntrue === true    =&gt;    true\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3048442,
      "name": "Mr.G",
      "reputation": 1458
    }
  },
  {
    "soID": 32845874,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/32845874",
    "title": null,
    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// The Current Unix Timestamp\r\n// 1443534720 seconds since Jan 01 1970. (UTC)\r\n\r\n// seconds\r\nconsole.log(Math.floor(new Date().valueOf() / 1000)); // 1443534720\r\nconsole.log(Math.floor(Date.now() / 1000)); // 1443534720\r\nconsole.log(Math.floor(new Date().getTime() / 1000)); // 1443534720\r\n\r\n// milliseconds\r\nconsole.log(Math.floor(new Date().valueOf())); // 1443534720087\r\nconsole.log(Math.floor(Date.now())); // 1443534720087\r\nconsole.log(Math.floor(new Date().getTime())); // 1443534720087\r\n\r\n// jQuery\r\n// seconds\r\nconsole.log(Math.floor($.now() / 1000)); // 1443534720\r\n// milliseconds\r\nconsole.log($.now()); // 1443534720087</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3059453,
      "name": "blueberry0xff",
      "reputation": 1082
    }
  },
  {
    "soID": 20378269,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/20378269",
    "title": null,
    "body": "<p>I was doing a live search solution and needed to cancel pending requests that may have taken longer than the latest/most current request. </p>\n\n<p>In my case I used something like this:</p>\n\n<pre><code>//On document ready\nvar ajax_inprocess = false;\n\n$(document).ajaxStart(function() {\najax_inprocess = true;\n});\n\n$(document).ajaxStop(function() {\najax_inprocess = false;\n});\n\n//Snippet from live search function\nif (ajax_inprocess == true)\n{\n    request.abort();\n}\n//Call for new request \n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3066298,
      "name": "Billy",
      "reputation": 91
    }
  },
  {
    "soID": 38796058,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/38796058",
    "title": null,
    "body": "<p>I use the npm clone library.  Apparently it also works in the browser.</p>\n\n<p><a href=\"https://www.npmjs.com/package/clone\" rel=\"nofollow noreferrer\">https://www.npmjs.com/package/clone</a></p>\n\n<pre><code>let a = clone(b)\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 41117640,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/41117640",
    "title": null,
    "body": "<p>There are quite a few ways to check if an element is visible or hidden in jQuery.</p>\n\n<p><em>Demo HTML for example reference</em></p>\n\n<pre><code>&lt;div id=\"content\"&gt;Content&lt;/div&gt;\n&lt;div id=\"content2\" style=\"display:none\"&gt;Content2&lt;/div&gt;\n</code></pre>\n\n<p><strong>Use Visibility Filter Selector <code>$('element:hidden')</code> or <code>$('element:visible')</code></strong></p>\n\n<ul>\n<li><p><code>$('element:hidden')</code>: Selects all elements that are hidden.</p>\n\n<pre><code>Example:\n   $('#content2:hidden').show();\n</code></pre></li>\n<li><p><code>$('element:visible')</code>: Selects all elements that are visible.</p>\n\n<pre><code>Example:\n   $('#content:visible').css('color', '#EEE');\n</code></pre></li>\n</ul>\n\n<blockquote>\n  <p>Read more at <a href=\"http://api.jquery.com/category/selectors/visibility-filter-selectors/\" rel=\"noreferrer\">http://api.jquery.com/category/selectors/visibility-filter-selectors/</a></p>\n</blockquote>\n\n<p><strong>Use <code>is()</code> Filtering</strong></p>\n\n<pre><code>    Example:\n       $('#content').is(\":visible\").css('color', '#EEE');\n\n    Or checking condition\n    if ($('#content').is(\":visible\")) {\n         // Perform action\n    }\n</code></pre>\n\n<blockquote>\n  <p>Read more at <a href=\"http://api.jquery.com/is/\" rel=\"noreferrer\">http://api.jquery.com/is/</a></p>\n</blockquote>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3114253,
      "name": "Arun Karnawat",
      "reputation": 330
    }
  },
  {
    "soID": 31360202,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/31360202",
    "title": null,
    "body": "<p>There are only function scopes in JS. Not block scopes!\nYou can see what is hoisting too.</p>\n\n<pre><code>var global_variable = \"global_variable\";\nvar hoisting_variable = \"global_hoist\";\n\n// Global variables printed\nconsole.log(\"global_scope: - global_variable: \" + global_variable);\nconsole.log(\"global_scope: - hoisting_variable: \" + hoisting_variable);\n\nif (true) {\n    // The variable block will be global, on true condition.\n    var block = \"block\";\n}\nconsole.log(\"global_scope: - block: \" + block);\n\nfunction local_function() {\n    var local_variable = \"local_variable\";\n    console.log(\"local_scope: - local_variable: \" + local_variable);\n    console.log(\"local_scope: - global_variable: \" + global_variable);\n    console.log(\"local_scope: - block: \" + block);\n    // The hoisting_variable is undefined at the moment.\n    console.log(\"local_scope: - hoisting_variable: \" + hoisting_variable);\n\n    var hoisting_variable = \"local_hoist\";\n    // The hoisting_variable is now set as a local one.\n    console.log(\"local_scope: - hoisting_variable: \" + hoisting_variable);\n}\n\nlocal_function();\n\n// No variable in a separate function is visible into the global scope.\nconsole.log(\"global_scope: - local_variable: \" + local_variable);\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3144561,
      "name": "koredalin",
      "reputation": 390
    }
  },
  {
    "soID": 39491721,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/39491721",
    "title": null,
    "body": "<h2>AngularJS</h2>\n\n<p>Well if you're using angular you could do this too</p>\n\n<pre><code>var newObject = angular.copy(oldObject);\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43672227,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/43672227",
    "title": null,
    "body": "<p><code>==</code> operator just compares the values not datatype</p>\n\n<p><code>===</code> operator compare the values with comparison of its datatype</p>\n\n<p>eg. </p>\n\n<pre><code>1 == \"1\" //true\n\n1 === \"1\" //false\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3178139,
      "name": "Sharad Kale",
      "reputation": 361
    }
  },
  {
    "soID": 38423812,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/38423812",
    "title": null,
    "body": "<p>Single-line ECMAScript 6 solution (special object types like Date/Regex not handled):</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const clone = (o) =&gt;\r\n  typeof o === 'object' &amp;&amp; o !== null ?      // only clone objects\r\n  (Array.isArray(o) ?                        // if cloning an array\r\n    o.map(e =&gt; clone(e)) :                   // clone each of its elements\r\n    Object.keys(o).reduce(                   // otherwise reduce every key in the object\r\n      (r, k) =&gt; (r[k] = clone(o[k]), r), {}  // and save its cloned value into a new object\r\n    )\r\n  ) :\r\n  o;                                         // return non-objects as is\r\n\r\nvar x = {\r\n  nested: {\r\n    name: 'test'\r\n  }\r\n};\r\n\r\nvar y = clone(x);\r\n\r\nconsole.log(x.nested !== y.nested);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44996514,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/44996514",
    "title": null,
    "body": "<p>Very simple:</p>\n\n<pre><code>if($('#div').is(\":visible\")) {\n    // visible\n} else {\n    // hide\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3243488,
      "name": "Behnam Mohammadi",
      "reputation": 4365
    }
  },
  {
    "soID": 44996571,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/44996571",
    "title": null,
    "body": "<p>=== is better performance because is not check type</p>\n\n<p>ex:</p>\n\n<pre><code>var a=1, b=1, c='1';    \na===b //is true and better performance\na==c  //is true but no good performance\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3243488,
      "name": "Behnam Mohammadi",
      "reputation": 4365
    }
  },
  {
    "soID": 44996592,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/44996592",
    "title": null,
    "body": "<p>Very simple:</p>\n\n<pre><code>var myObject = {\n    \"ircEvent\": \"PRIVMSG\",\n    \"method\": \"newURI\",\n    \"regex\": \"^http://.*\"\n};\n\ndelete myObject.regex;\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3243488,
      "name": "Behnam Mohammadi",
      "reputation": 4365
    }
  },
  {
    "soID": 22756677,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/22756677",
    "title": null,
    "body": "<p>one i haven't seen yet </p>\n\n<pre><code>Math.floor(Date.now() / 1000) // current time in seconds\n</code></pre>\n\n<p>another one i haven't seen yet is</p>\n\n<pre><code>var _ = require('underscore'); // from here http://underscorejs.org/#now\n</code></pre>\n\n<p>or</p>\n\n<pre><code>var _ = require('lodash'); // from here https://lodash.com/docs#now\n</code></pre>\n\n<p>then </p>\n\n<pre><code>_.now();\n</code></pre>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3271268,
      "name": "Belldandu",
      "reputation": 656
    }
  },
  {
    "soID": 42571368,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/42571368",
    "title": null,
    "body": "<p>The most simple method could be eval method.</p>\n\n<pre><code>var a = \"0\";\na = eval(a);\n</code></pre>\n\n<p>This line of code will convert boolean value;</p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31977848,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/31977848",
    "title": null,
    "body": "<p>I usually go for</p>\n\n<pre><code>&lt;a href=\"javascript:;\" onclick=\"yourFunction()\"&gt;Link description&lt;/a&gt;\n</code></pre>\n\n<p>It's shorter than javascript:void(0) and does the same.</p>\n",
    "score": 24,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22933119,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/22933119",
    "title": null,
    "body": "<pre><code>var x =\"  \";\nvar patt = /^\\s*$/g;\nisBlank = patt.test(x);\nalert(isBlank);// is it blank or not??\nx=x.replace(/\\s*/g,\"\");// another way of replacing blanks with \"\"\nif (x===\"\"){alert(\"ya it is blank\")}\n</code></pre>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3297388,
      "name": "Gaurav",
      "reputation": 355
    }
  },
  {
    "soID": 29468948,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/29468948",
    "title": null,
    "body": "<p>window.location is an object in javascript. it returns following data</p>\n\n<pre><code>window.location.host          #returns host\nwindow.location.hostname      #returns hostname\nwindow.location.path          #return path\nwindow.location.href          #returns full current url\nwindow.location.port          #returns the port\nwindow.location.protocol      #returns the protocol\n</code></pre>\n\n<p>in jquery you can use </p>\n\n<pre><code>$(location).attr('host');        #returns host\n$(location).attr('hostname');    #returns hostname\n$(location).attr('path');        #returns path\n$(location).attr('href');        #returns href\n$(location).attr('port');        #returns port\n$(location).attr('protocol');    #returns protocol\n</code></pre>\n",
    "score": 24,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3298313,
      "name": "Gaurav",
      "reputation": 1258
    }
  },
  {
    "soID": 37561155,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/37561155",
    "title": null,
    "body": "<p>I searched for this, and none of the answers are correct for my case, so I've created a function that will return false if one's eyes can't see the element</p>\n\n<pre><code>jQuery.fn.extend({\n  isvisible: function() {\n    //\n    //  This function call this: $(\"div\").isvisible()\n    //  Return true if the element is visible\n    //  Return false if the element is not visible for our eyes\n    //\n    if ( $(this).css('display') == 'none' ){\n        console.log(\"this = \" + \"display:none\");\n        return false;\n    }\n    else if( $(this).css('visibility') == 'hidden' ){\n        console.log(\"this = \" + \"visibility:hidden\");   \n        return false;\n    }\n    else if( $(this).css('opacity') == '0' ){\n        console.log(\"this = \" + \"opacity:0\");\n        return false;\n    }   \n    else{\n        console.log(\"this = \" + \"Is Visible\");\n        return true;\n    }\n  }  \n});\n</code></pre>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3303585,
      "name": "lmcDevloper",
      "reputation": 177
    }
  },
  {
    "soID": 22988422,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/22988422",
    "title": null,
    "body": "<p>A shorter way to write this, could be <code>var isTrueSet = (myValue === \"true\") ? true : false;</code> Presuming only \"true\" is true and other values are false. </p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 26378766,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/26378766",
    "title": null,
    "body": "<p>It is always best practice to do something like this.</p>\n\n<pre><code>var $request;\nif ($request != null){ \n    $request.abort();\n    $request = null;\n}\n\n$request = $.ajax({\n    type : \"POST\", //TODO: Must be changed to POST\n    url : \"yourfile.php\",\n    data : \"data\"\n    }).done(function(msg) {\n        alert(msg);\n    });\n</code></pre>\n\n<p>But it is much better if you check an if statement to check whether the ajax request is null or not.</p>\n",
    "score": 26,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3312620,
      "name": "Tharindu Kumara",
      "reputation": 3011
    }
  },
  {
    "soID": 33419329,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/33419329",
    "title": null,
    "body": "<p>For the people who want to use the <code>JSON.parse(JSON.stringify(obj))</code> version, but without losing the Date objects, you can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Using_the_reviver_parameter\" rel=\"nofollow\">second argument of <code>parse</code> method</a> to convert the strings back to Date:</p>\n\n<pre><code>function clone(obj) {\n  var regExp = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/;\n  return JSON.parse(JSON.stringify(x), function(k, v) {\n    if (typeof v === 'string' &amp;&amp; regExp.test(v))\n      return new Date(v);\n    return v;\n  });\n}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 40722084,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/40722084",
    "title": null,
    "body": "<p>For future reference, one can use this code</p>\n\n<p>ES6:</p>\n\n<pre><code>_clone: function(obj){\n    let newObj = {};\n    for(let i in obj){\n        if(typeof(obj[i]) === 'object' &amp;&amp; Object.keys(obj[i]).length){\n            newObj[i] = clone(obj[i]);\n        } else{\n            newObj[i] = obj[i];\n        }\n    }\n    return Object.assign({},newObj);\n}\n</code></pre>\n\n<p>ES5:</p>\n\n<pre><code>function clone(obj){\nlet newObj = {};\nfor(let i in obj){\n    if(typeof(obj[i]) === 'object' &amp;&amp; Object.keys(obj[i]).length){\n        newObj[i] = clone(obj[i]);\n    } else{\n        newObj[i] = obj[i];\n    }\n}\nreturn Object.assign({},newObj);\n</code></pre>\n\n<p>}</p>\n\n<p>E.g </p>\n\n<pre><code>var obj ={a:{b:1,c:3},d:4,e:{f:6}}\nvar xc = clone(obj);\nconsole.log(obj); //{a:{b:1,c:3},d:4,e:{f:6}}\nconsole.log(xc); //{a:{b:1,c:3},d:4,e:{f:6}}\n\nxc.a.b = 90;\nconsole.log(obj); //{a:{b:1,c:3},d:4,e:{f:6}}\nconsole.log(xc); //{a:{b:90,c:3},d:4,e:{f:6}}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23236610,
    "parentID": 426258,
    "url": "https://stackoverflow.com/q/23236610",
    "title": null,
    "body": "<p>You can try this:</p>\n\n<pre><code>$('input[name=\"activity[task_state]\"]').val(\"specify the value you want to check \")\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3419341,
      "name": "anusha",
      "reputation": 1555
    }
  },
  {
    "soID": 42448663,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/42448663",
    "title": null,
    "body": "<pre><code>$(document).on(\"click\",function (event)   \n {   \n     console.log(event);\n   if ($(event.target).closest('.element').length == 0)\n     {\n    //your code here\n      if ($(\".element\").hasClass(\"active\"))\n      {\n        $(\".element\").removeClass(\"active\");\n      }\n     }\n });\n</code></pre>\n\n<p>Try this coding for getting the solution.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 37131496,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/37131496",
    "title": null,
    "body": "<p><code>new Function()</code> can be used to pass the function's body in a string. And hence this can be used to create dynamic functions. Also passing the script without executing the script.</p>\n\n<pre><code>var func = new Function(\"x\", \"y\", \"return x*y;\");\nfunction secondFunction(){\n   var result;\n   result = func(10,20);\n   console.log ( result );\n}\n\nsecondFunction()\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3464971,
      "name": "Trying2Learn",
      "reputation": 2389
    }
  },
  {
    "soID": 32882427,
    "parentID": 332872,
    "url": "https://stackoverflow.com/q/32882427",
    "title": null,
    "body": "<p>encodeURIComponent() is the way to go.</p>\n\n<pre><code>var myOtherUrl = \"http://example.com/index.html?url=\" + encodeURIComponent(myUrl);\n</code></pre>\n\n<p>BUT you should keep in mind that there are small differences from php version urlencode() and as @CMS mentioned, it will not encode every char. Guys at <a href=\"http://phpjs.org/functions/urlencode/\">http://phpjs.org/functions/urlencode/</a> made js equivalent to phpencode():</p>\n\n<pre><code>function urlencode(str) {\n  str = (str + '')\n    .toString();\n\n  // Tilde should be allowed unescaped in future versions of PHP (as reflected below), but if you want to reflect current\n  // PHP behavior, you would need to add \".replace(/~/g, '%7E');\" to the following.\n  return encodeURIComponent(str)\n    .replace(/!/g, '%21')\n    .replace(/'/g, '%27')\n    .replace(/\\(/g, '%28')\n    .\n  replace(/\\)/g, '%29')\n    .replace(/\\*/g, '%2A')\n    .replace(/%20/g, '+');\n}\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3472662,
      "name": "Adam Fischer",
      "reputation": 659
    }
  },
  {
    "soID": 24965114,
    "parentID": 306583,
    "url": "https://stackoverflow.com/q/24965114",
    "title": null,
    "body": "<p>You can use <a href=\"http://api.jquery.com/child-selector/\" rel=\"noreferrer\">Child Selecor</a> to reference the child elements available within the parent.</p>\n\n<pre><code>$(' &gt; img', this).attr(\"src\");\n</code></pre>\n\n<p>And the below is if you don't have reference to <code>$(this)</code> and you want to reference <code>img</code> available within a <code>div</code> from other function.</p>\n\n<pre><code> $('#divid &gt; img').attr(\"src\");\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3485999,
      "name": "Dennis R",
      "reputation": 2403
    }
  },
  {
    "soID": 24843517,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/24843517",
    "title": null,
    "body": "<p>To check if it is empty:</p>\n\n<pre><code>var str = \"Hello World!\";\nvar n = str.length;\nif(n === ''){alert(\"THE STRING str is EMPTY\");}\n</code></pre>\n\n<p>To check if it isn't empty</p>\n\n<pre><code>var str = \"Hello World!\";\nvar n = str.length;\nif(n != ''){alert(\"THE STRING str isn't EMPTY\");}\n</code></pre>\n",
    "score": -10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3527794,
      "name": "Alban Kaperi",
      "reputation": 74
    }
  },
  {
    "soID": 32494888,
    "parentID": 332872,
    "url": "https://stackoverflow.com/q/32494888",
    "title": null,
    "body": "<p><strong>Encode URL String</strong>\n    <pre>\n    var url = $(location).attr('href'); //get current url\n    //OR\n    var url = 'folder/index.html?param=#23dd&amp;noob=yes'; //or specify one</p>\n\n<code>var encodedUrl = encodeURIComponent(url);\nconsole.log(encodedUrl);\n//outputs folder%2Findex.html%3Fparam%3D%2323dd%26noob%3Dyes\n\n\nfor more info go http://www.sitepoint.com/jquery-decode-url-string\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3539870,
      "name": "Sangeet Shah",
      "reputation": 1113
    }
  },
  {
    "soID": 32182004,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/32182004",
    "title": null,
    "body": "<p>This is some option to check that tag is visible or not</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code> // using a pure CSS selector  \r\n   if ($('p:visible')) {  \r\n      alert('Paragraphs are visible (checked using a CSS selector) !');  \r\n   };  \r\n  \r\n   // using jQuery's is() method  \r\n   if ($('p').is(':visible')) {  \r\n      alert('Paragraphs are visible (checked using is() method)!');  \r\n   };  \r\n  \r\n   // using jQuery's filter() method  \r\n   if ($('p').filter(':visible')) {  \r\n      alert('Paragraphs are visible (checked using filter() method)!');  \r\n   };  \r\n  \r\n   // you can use :hidden instead of :visible to reverse the logic and check if an element is hidden  \r\n   // if ($('p:hidden')) {  \r\n   //    do something  \r\n   // };  </code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3539870,
      "name": "Sangeet Shah",
      "reputation": 1113
    }
  },
  {
    "soID": 40784968,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/40784968",
    "title": null,
    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>class Handler {\r\n  static deepCopy (obj) {\r\n    if (Object.prototype.toString.call(obj) === '[object Array]') {\r\n      const result = [];\r\n      \r\n      for (let i = 0, len = obj.length; i &lt; len; i++) {\r\n        result[i] = Handler.deepCopy(obj[i]);\r\n      }\r\n      return result;\r\n    } else if (Object.prototype.toString.call(obj) === '[object Object]') {\r\n      const result = {};\r\n      for (let prop in obj) {\r\n        result[prop] = Handler.deepCopy(obj[prop]);\r\n      }\r\n      return result;\r\n    }\r\n    return obj;\r\n  }\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 29600955,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/29600955",
    "title": null,
    "body": "<pre><code>var d = new Date();\nconsole.log(d.valueOf()); \n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3562401,
      "name": "jameslouiz",
      "reputation": 156
    }
  },
  {
    "soID": 40563576,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/40563576",
    "title": null,
    "body": "<p>I believe the best way of doing it is something like this. </p>\n\n<pre><code>$(document).on(\"click\", function(event) {\n  clickedtarget = $(event.target).closest('#menuscontainer');\n  $(\"#menuscontainer\").not(clickedtarget).hide();\n});\n</code></pre>\n\n<p>This type of solution could easily be made to work for multiple menus and also menus that are dynamically added through javascript. Basically it just allows you to click anywhere in your document, and checks which element you clicked in, and selects it's closest \"#menuscontainer\". Then it hides all menuscontainers but excludes the one you clicked in. </p>\n\n<p>Not sure about exactly how your menus are built, but feel free to copy my code in the JSFiddle. It's a very simple but thoroughly functional menu/modal system. All you need to do is build the html-menus and the code will do the work for you.</p>\n\n<p><a href=\"https://jsfiddle.net/zs6anrn7/\" rel=\"nofollow noreferrer\">https://jsfiddle.net/zs6anrn7/</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 25487973,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/25487973",
    "title": null,
    "body": "<p>Wrapping up for future readers.</p>\n\n<h1>Asynchronous File Upload</h1>\n\n<h2>With HTML5</h2>\n\n<p>You can upload files <strong>with jQuery</strong> using the <code>$.ajax()</code> method if <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects\">FormData</a> and the <a href=\"https://developer.mozilla.org/en-US/docs/Using_files_from_web_applications\">File API</a> are supported (both HTML5 features). </p>\n\n<p>You can also send files <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Submitting_forms_and_uploading_files\">without FormData</a> but either way the File API must be present to process files in such a way that they can be sent with <em>XMLHttpRequest</em> (Ajax).</p>\n\n<pre><code>$.ajax({\n  url: 'file/destination.html', \n  type: 'POST',\n  data: new FormData($('#formWithFiles')[0]), // The form with the file inputs.\n  processData: false                          // Using FormData, no need to process data.\n}).done(function(){\n  console.log(\"Success: Files sent!\");\n}).fail(function(){\n  console.log(\"An error occurred, the files couldn't be sent!\");\n});\n</code></pre>\n\n<p>For a quick, pure JavaScript (<strong>no jQuery</strong>) example see \"<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects#Sending_files_using_a_FormData_object\">Sending files using a FormData object</a>\".</p>\n\n<h2>Fallback</h2>\n\n<p>When HTML5 isn't supported (no <em>File API</em>) the only other pure JavaScript solution (no <em>Flash</em> or any other browser plugin) is the <strong>hidden iframe</strong> technique, which allows to emulate an asynchronous request without using the <em>XMLHttpRequest</em> object.</p>\n\n<p>It consists of setting an iframe as the target of the form with the file inputs. When the user submits a request is made and the files are uploaded but the response is displayed inside the iframe instead of re-rendering the main page. Hiding the iframe makes the whole process transparent to the user and emulates an asynchronous request.</p>\n\n<p>If done properly it should work virtually on any browser, but it has some caveats as how to obtain the response from the iframe. </p>\n\n<p>In this case you may prefer to use a wrapper plugin like <a href=\"//github.com/matiasgagliano/bifrost\">Bifröst</a> which uses the <em>iframe technique</em> but also provides a <a href=\"//api.jquery.com/jQuery.ajaxTransport\">jQuery Ajax transport</a> allowing to <strong>send files</strong> with just the <code>$.ajax()</code> method like this:</p>\n\n<pre><code>$.ajax({\n  url: 'file/destination.html', \n  type: 'POST',\n  // Set the transport to use (iframe means to use Bifröst)\n  // and the expected data type (json in this case).\n  dataType: 'iframe json',                                \n  fileInputs: $('input[type=\"file\"]'),  // The file inputs containing the files to send.\n  data: { msg: 'Some extra data you might need.'}\n}).done(function(){\n  console.log(\"Success: Files sent!\");\n}).fail(function(){\n  console.log(\"An error occurred, the files couldn't be sent!\");\n});\n</code></pre>\n\n<h2>Plugins</h2>\n\n<p><a href=\"//github.com/matiasgagliano/bifrost\">Bifröst</a> is just a small wrapper that adds fallback support to jQuery's ajax method, but many of the aforementioned plugins like <a href=\"//malsup.com/jquery/form/\">jQuery Form Plugin</a> or <a href=\"//github.com/blueimp/jQuery-File-Upload\">jQuery File Upload</a> include the whole stack from HTML5 to different fallbacks and some useful features to ease out the process. Depending on your needs and requirements you might want to consider a bare implementation or either of this plugins.</p>\n",
    "score": 61,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3614389,
      "name": "404",
      "reputation": 847
    }
  },
  {
    "soID": 31817825,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/31817825",
    "title": null,
    "body": "<p>Requires new-ish browsers, but...</p>\n\n<p>Let's extend the native Object and get a <strong>real</strong> <code>.extend()</code>;</p>\n\n<pre><code>Object.defineProperty(Object.prototype, 'extend', {\n    enumerable: false,\n    value: function(){\n        var that = this;\n\n        Array.prototype.slice.call(arguments).map(function(source){\n            var props = Object.getOwnPropertyNames(source),\n                i = 0, l = props.length,\n                prop;\n\n            for(; i &lt; l; ++i){\n                prop = props[i];\n\n                if(that.hasOwnProperty(prop) &amp;&amp; typeof(that[prop]) === 'object'){\n                    that[prop] = that[prop].extend(source[prop]);\n                }else{\n                    Object.defineProperty(that, prop, Object.getOwnPropertyDescriptor(source, prop));\n                }\n            }\n        });\n\n        return this;\n    }\n});\n</code></pre>\n\n<p>Just pop that in prior to any code that uses .extend() on an object.</p>\n\n<p>Example:</p>\n\n<pre><code>var obj1 = {\n    node1: '1',\n    node2: '2',\n    node3: 3\n};\n\nvar obj2 = {\n    node1: '4',\n    node2: 5,\n    node3: '6'\n};\n\nvar obj3 = ({}).extend(obj1, obj2);\n\nconsole.log(obj3);\n// Object {node1: \"4\", node2: 5, node3: \"6\"}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 30103251,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/30103251",
    "title": null,
    "body": "<p>The <code>push()</code> method adds new items to the end of an array, and returns the new length. Example:</p>\n\n<pre><code>var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.push(\"Kiwi\");\n\n// The result of fruits will be:\nBanana, Orange, Apple, Mango, Kiwi\n</code></pre>\n\n<p>The exact answer to your question is already answered, but let's look at some other ways to add items to an array.</p>\n\n<p>The <code>unshift()</code> method adds new items to the beginning of an array, and returns the new length. Example:</p>\n\n<pre><code>var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.unshift(\"Lemon\", \"Pineapple\");\n\n// The result of fruits will be:\nLemon, Pineapple, Banana, Orange, Apple, Mango\n</code></pre>\n\n<p>And lastly, the <code>concat()</code> method is used to join two or more arrays. Example:</p>\n\n<pre><code>var fruits = [\"Banana\", \"Orange\"];\nvar moreFruits = [\"Apple\", \"Mango\", \"Lemon\"];\nvar allFruits = fruits.concat(moreFruits);\n\n// The values of the children array will be:\nBanana, Orange, Apple, Mango, Lemon\n</code></pre>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17558318,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/17558318",
    "title": null,
    "body": "<p>Here is my 1 liner submission: I needed to evaluate a string and output, true if 'true', false if 'false' and a number if anything like '-12.35673'.</p>\n\n<pre><code>val = 'false';\n\nval = /^false$/i.test(val) ? false : ( /^true$/i.test(val) ? true : val*1 ? val*1 : val );\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24422523,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/24422523",
    "title": null,
    "body": "<p>The simplest and most robust way I have done this in the past, is to simply target a hidden iFrame tag with your form - then it will submit within the iframe without reloading the page.</p>\n\n<p>That is if you don't want to use a plugin, JavaScript or any other forms of \"magic\" other than HTML.  Of course you can combine this with JavaScript or what have you...</p>\n\n<pre><code>&lt;form target=\"iframe\" action=\"\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n    &lt;input name=\"file\" type=\"file\" /&gt;\n    &lt;input type=\"button\" value=\"Upload\" /&gt;\n&lt;/form&gt;\n\n&lt;iframe name=\"iframe\" id=\"iframe\" style=\"display:none\" &gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>You can also read the contents of the iframe ( onLoad() ) for server error or success response and then output that to user.</p>\n\n<p>A wee update, if relying on the onload event of an iframe during a download don't count on it working in Chrome.  For this the only solution I found was to use a cookie, ugly but it worked.</p>\n",
    "score": 31,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3684882,
      "name": "ArtisticPhoenix",
      "reputation": 6477
    }
  },
  {
    "soID": 31401583,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/31401583",
    "title": null,
    "body": "<p>I highly recommend using <code>moment.js</code>. To get the number of milliseconds since UNIX epoch, do </p>\n\n<pre><code>moment().valueOf()\n</code></pre>\n\n<p>To get the number of seconds since UNIX epoch, do</p>\n\n<pre><code>moment().unix()\n</code></pre>\n\n<p>You can also convert times like so:</p>\n\n<pre><code>moment('2015-07-12 14:59:23', 'YYYY-MM-DD HH:mm:ss').valueOf()\n</code></pre>\n\n<p>I do that all the time. No pun intended.</p>\n\n<p>To use <code>moment.js</code> in the browser:</p>\n\n<pre><code>&lt;script src=\"moment.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    moment().valueOf();\n&lt;/script&gt;\n</code></pre>\n\n<p>For more details, including other ways of installing and using MomentJS, see their <a href=\"http://momentjs.com/docs/\" rel=\"noreferrer\">docs</a></p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3694557,
      "name": "FullStack",
      "reputation": 2949
    }
  },
  {
    "soID": 27195277,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/27195277",
    "title": null,
    "body": "<p>If you are making a web application or a secured page you should always use (only when possible)</p>\n\n<pre><code>===\n</code></pre>\n\n<p>because it will will check if it is the same content and if it is the same type!</p>\n\n<p>so when someone enters:</p>\n\n<pre><code>var check = 1;\nif(check == '1') {\n    //someone continued with a string instead of number, most of the time useless for your webapp, most of the time entered by a user who does not now what he is doing (this will sometimes let your app crash), or even worse it is a hacker searching for weaknesses in your webapp!\n}\n</code></pre>\n\n<p>but with</p>\n\n<pre><code>var check = 1;\nif(check === 1) {\n    //some continued with a number (no string) for your script\n} else {\n    alert('please enter a real number');\n}\n</code></pre>\n\n<p>a hacker will never get deeper in the system to find bugs and hack your app or your users</p>\n\n<p>my point it is that the </p>\n\n<pre><code>===\n</code></pre>\n\n<p>will add more security to your scripts</p>\n\n<p>of course you can also check if the entered number is valid, is a string, etc.. with other if statements inside the first example, but this is for at least me more easier to understand and use</p>\n\n<p>The reason I posted this is that the word 'more secure' or 'security' has never been said in this conversation (if you look at iCloud.com it uses 2019 times === and 1308 times ==, this also means that you sometimes have the use == instead of === because it will otherwise block your function, but as said in the begin you should use === as much as possible)</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3711267,
      "name": "Sake Salverda",
      "reputation": 167
    }
  },
  {
    "soID": 37987813,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/37987813",
    "title": null,
    "body": "<p>If you want to delete a property deeply nested in the object then you can use the following recursive function with path to the property as the second argument:</p>\n\n<pre><code>var deepObjectRemove = function(obj, path_to_key){\n    if(path_to_key.length === 1){\n        delete obj[path_to_key[0]];\n        return true;\n    }else{\n        if(obj[path_to_key[0]])\n            return deepObjectRemove(obj[path_to_key[0]], path_to_key.slice(1));\n        else\n            return false;\n    }\n};\n</code></pre>\n\n<p>Example: </p>\n\n<pre><code>var a = {\n    level1:{\n        level2:{\n            level3: {\n                level4: \"yolo\"\n            }\n        }\n    }\n};\n\ndeepObjectRemove(a, [\"level1\", \"level2\", \"level3\"]);\nconsole.log(a);\n\n//Prints {level1: {level2: {}}}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3719089,
      "name": "ayushgp",
      "reputation": 1115
    }
  },
  {
    "soID": 34937997,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/34937997",
    "title": null,
    "body": "<p>I personally use <a href=\"https://en.wikipedia.org/wiki/Underscore.js\" rel=\"nofollow noreferrer\">Underscore.js</a> for object and array manipulation:</p>\n\n<pre><code>myObject = _.omit(myObject, 'regex');\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3773265,
      "name": "emil",
      "reputation": 747
    }
  },
  {
    "soID": 35355402,
    "parentID": 446594,
    "url": "https://stackoverflow.com/q/35355402",
    "title": null,
    "body": "<p>I have shared a <a href=\"http://jsfiddle.net/e3ok3s6e/\" rel=\"nofollow\">demo</a> that demonstrates how to cancel an AJAX request-- if data is not returned from the server within a predefined wait time.</p>\n\n<p><strong>HTML :</strong></p>\n\n<pre><code>&lt;div id=\"info\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p><strong>JS CODE:</strong></p>\n\n<pre><code>var isDataReceived= false, waitTime= 1000; \n$(function() {\n    // Ajax request sent.\n     var xhr= $.ajax({\n      url: 'http://api.joind.in/v2.1/talks/10889',\n      data: {\n         format: 'json'\n      },     \n      dataType: 'jsonp',\n      success: function(data) {      \n        isDataReceived= true;\n        $('#info').text(data.talks[0].talk_title);        \n      },\n      type: 'GET'\n   });\n   // Cancel ajax request if data is not loaded within 1sec.\n   setTimeout(function(){\n     if(!isDataReceived)\n     xhr.abort();     \n   },waitTime);   \n});\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3783596,
      "name": "ganesh",
      "reputation": 100
    }
  },
  {
    "soID": 41791059,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/41791059",
    "title": null,
    "body": "<p>Best and most up to date way to do this clone is as follows:</p>\n\n<p>using the \"...\" ES6 spread operator\nExample:</p>\n\n<pre><code>var clonedObjArray = [...oldObjArray];\n</code></pre>\n\n<p>this way we spread the array into individual values and put it in a new array with the [] operator.</p>\n\n<p>here is a longer example that shows the different ways it works </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let objArray = [ {a:1} , {b:2} ];\r\n\r\nlet refArray = objArray; // this will just point to the objArray\r\nlet clonedArray = [...objArray]; // will clone the array\r\n\r\nconsole.log( \"before:\" );\r\nconsole.log( \"obj array\" , objArray );\r\nconsole.log( \"ref array\" , refArray );\r\nconsole.log( \"cloned array\" , clonedArray );\r\n\r\nobjArray[0] = {c:3};\r\n\r\nconsole.log( \"after:\" );\r\nconsole.log( \"obj array\" , objArray ); // [ {c:3} , {b:2} ]\r\nconsole.log( \"ref array\" , refArray ); // [ {c:3} , {b:2} ]\r\nconsole.log( \"cloned array\" , clonedArray ); // [ {a:1} , {b:2} ]</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 25236348,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/25236348",
    "title": null,
    "body": "<p>Simply check visibility by checking for a boolean value, like:</p>\n\n<pre><code>if (this.hidden === false) {\n    // Your code\n}\n</code></pre>\n\n<p>I used this code for each function. Otherwise you can use <code>is(':visible')</code> for checking the visibility of an element.</p>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3873204,
      "name": "pixellabme",
      "reputation": 327
    }
  },
  {
    "soID": 36397659,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/36397659",
    "title": null,
    "body": "<p>You can just add a class when it is visible. Add a class, <code>show</code>. Then check for it have a class:</p>\n\n<pre><code>$('#elementId').hasClass('show');\n</code></pre>\n\n<p>It returns true if you have the <code>show</code> class.</p>\n\n<p>Add CSS like this:</p>\n\n<pre><code>.show{ display: block; }\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3994304,
      "name": "Sahan",
      "reputation": 120
    }
  },
  {
    "soID": 28706707,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/28706707",
    "title": null,
    "body": "<p>To evaluate both boolean and boolean-like strings like boolean I used this easy formula:</p>\n\n<pre><code>var trueOrStringTrue = (trueOrStringTrue === true) || (trueOrStringTrue === 'true');\n</code></pre>\n\n<p>As is apparent, it will return true for both true and 'true'. Everything else returns false.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 25771249,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/25771249",
    "title": null,
    "body": "<p>You can use single quotes or double quotes.\nThis enables you for example to easily nest javascript inside HTML attributes, without the need to escape the quotes. \nThe same is when you create javascript with PHP.</p>\n\n<p>The general idea is: if it is possible use such quotes that you won't need to escape.\nLess escaping = better code.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 39780803,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/39780803",
    "title": null,
    "body": "<p>If you are using the ES6 you can use <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Spread_operator\" rel=\"noreferrer\">spread</a> operator to do it.</p>\n\n<pre><code>var arr = [\n    \"apple\",\n    \"banana\",\n    \"cherry\"\n];\n\nvar arr2 = [\n    \"dragonfruit\",\n    \"elderberry\",\n    \"fig\"\n];\n\narr.push(...arr2);\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 27758781,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/27758781",
    "title": null,
    "body": "<p>Global: variable declared outside of a function</p>\n\n<p>Local: variable declared inside a function, and can only be called in that scope</p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4234062,
      "name": "poisonlocc",
      "reputation": 86
    }
  },
  {
    "soID": 32008999,
    "parentID": 306583,
    "url": "https://stackoverflow.com/q/32008999",
    "title": null,
    "body": "<p>You can use either of the following methods:</p>\n\n<p><strong>1 find():</strong>  </p>\n\n<pre><code>$(this).find('img');\n</code></pre>\n\n<p><strong>2 children():</strong>  </p>\n\n<pre><code>$(this).children('img');\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4261022,
      "name": "Mike Clark",
      "reputation": 1269
    }
  },
  {
    "soID": 36027644,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/36027644",
    "title": null,
    "body": "<p>You can only use </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>    var timestamp = new Date().getTime();\r\n    console.log(timestamp);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>to get the current timestamp. No need to do anything extra.</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4305683,
      "name": "Jitendra Pawar",
      "reputation": 419
    }
  },
  {
    "soID": 40801019,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/40801019",
    "title": null,
    "body": "<p>this has been taken from the accepted answer, but really it has very weak point, and I am shocked how it got that count of upvotes, the problem with it that you have to consider the case of the string, because this is case senstive</p>\n\n<pre><code>var isTrueSet = (myValue.toLowerCase() === 'true');\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43694886,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/43694886",
    "title": null,
    "body": "<p>Here is simple function that will do the trick,</p>\n\n<pre><code>   function convertStringToBool(str){\n        return ((str === \"True\") || (str === \"true\")) ? true:false;\n    }\n</code></pre>\n\n<p>This will give the following result</p>\n\n<pre><code>convertStringToBool(\"false\") //returns false\nconvertStringToBool(\"true\") // returns true\nconvertStringToBool(\"False\") // returns false\nconvertStringToBool(\"True\") // returns true\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44777041,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/44777041",
    "title": null,
    "body": "<p>You can simply get your path using js itself, <code>window.location</code> or <code>location</code> will give you the object of current URL</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(\"Origin - \",location.origin);\r\nconsole.log(\"Entire URL - \",location.href);\r\nconsole.log(\"Path Beyond URL - \",location.pathname);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4453737,
      "name": "Mohideen ibn Mohammed",
      "reputation": 2724
    }
  },
  {
    "soID": 36314992,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/36314992",
    "title": null,
    "body": "<p>Here's just another solution of how to upload file (<strong>without any plugin</strong>) </p>\n\n<p>Using simple <strong>Javascripts</strong> and <strong>AJAX</strong> (with progress-bar)</p>\n\n<p><strong>HTML part</strong></p>\n\n<pre><code>&lt;form id=\"upload_form\" enctype=\"multipart/form-data\" method=\"post\"&gt;\n    &lt;input type=\"file\" name=\"file1\" id=\"file1\"&gt;&lt;br&gt;\n    &lt;input type=\"button\" value=\"Upload File\" onclick=\"uploadFile()\"&gt;\n    &lt;progress id=\"progressBar\" value=\"0\" max=\"100\" style=\"width:300px;\"&gt;&lt;/progress&gt;\n    &lt;h3 id=\"status\"&gt;&lt;/h3&gt;\n    &lt;p id=\"loaded_n_total\"&gt;&lt;/p&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p><strong>JS part</strong></p>\n\n<pre><code>function _(el){\n    return document.getElementById(el);\n}\nfunction uploadFile(){\n    var file = _(\"file1\").files[0];\n    // alert(file.name+\" | \"+file.size+\" | \"+file.type);\n    var formdata = new FormData();\n    formdata.append(\"file1\", file);\n    var ajax = new XMLHttpRequest();\n    ajax.upload.addEventListener(\"progress\", progressHandler, false);\n    ajax.addEventListener(\"load\", completeHandler, false);\n    ajax.addEventListener(\"error\", errorHandler, false);\n    ajax.addEventListener(\"abort\", abortHandler, false);\n    ajax.open(\"POST\", \"file_upload_parser.php\");\n    ajax.send(formdata);\n}\nfunction progressHandler(event){\n    _(\"loaded_n_total\").innerHTML = \"Uploaded \"+event.loaded+\" bytes of \"+event.total;\n    var percent = (event.loaded / event.total) * 100;\n    _(\"progressBar\").value = Math.round(percent);\n    _(\"status\").innerHTML = Math.round(percent)+\"% uploaded... please wait\";\n}\nfunction completeHandler(event){\n    _(\"status\").innerHTML = event.target.responseText;\n    _(\"progressBar\").value = 0;\n}\nfunction errorHandler(event){\n    _(\"status\").innerHTML = \"Upload Failed\";\n}\nfunction abortHandler(event){\n    _(\"status\").innerHTML = \"Upload Aborted\";\n}\n</code></pre>\n\n<p><strong>PHP part</strong></p>\n\n<pre><code>&lt;?php\n$fileName = $_FILES[\"file1\"][\"name\"]; // The file name\n$fileTmpLoc = $_FILES[\"file1\"][\"tmp_name\"]; // File in the PHP tmp folder\n$fileType = $_FILES[\"file1\"][\"type\"]; // The type of file it is\n$fileSize = $_FILES[\"file1\"][\"size\"]; // File size in bytes\n$fileErrorMsg = $_FILES[\"file1\"][\"error\"]; // 0 for false... and 1 for true\nif (!$fileTmpLoc) { // if file not chosen\n    echo \"ERROR: Please browse for a file before clicking the upload button.\";\n    exit();\n}\nif(move_uploaded_file($fileTmpLoc, \"test_uploads/$fileName\")){ // assuming the directory name 'test_uploads'\n    echo \"$fileName upload is complete\";\n} else {\n    echo \"move_uploaded_file function failed\";\n}\n?&gt;\n</code></pre>\n\n<p><a href=\"https://github.com/SiddharthaChowdhury/Async-File-Upload-using-PHP-Javascript-AJAX\" rel=\"noreferrer\"><strong>Here's the EXAMPLE application</strong></a></p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4475433,
      "name": "Siddhartha Chowdhury",
      "reputation": 854
    }
  },
  {
    "soID": 29252006,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/29252006",
    "title": null,
    "body": "<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script lang=\"javascript\"&gt;\n\nfunction nullcheck()\n{\nvar n=\"fdgdfg\";\nvar e = n.length;\nif(e== 0)\n{\n\n    return true;\n}\nelse\n{\n    alert(\"sucess\");\n    return false;\n}\n}\n\n\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;button type=\"submit\" value=\"add\" onclick=\"nullcheck()\"&gt;&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
    "score": -4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4477986,
      "name": "KanimozhiPalanisamy",
      "reputation": 43
    }
  },
  {
    "soID": 40904208,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/40904208",
    "title": null,
    "body": "<p>You can use the </p>\n\n<pre><code>$( \"div:visible\" ).click(function() {\n  $( this ).css( \"background\", \"yellow\" );\n});\n$( \"button\" ).click(function() {\n  $( \"div:hidden\" ).show( \"fast\" );\n});\n</code></pre>\n\n<p>API Documentation: <a href=\"https://api.jquery.com/visible-selector/\" rel=\"nofollow noreferrer\">https://api.jquery.com/visible-selector/</a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4482269,
      "name": "Raghubendra Singh",
      "reputation": 1337
    }
  },
  {
    "soID": 43235072,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/43235072",
    "title": null,
    "body": "<p>Without touching the prototypical inheritance you may deep lone objects and arrays as follows;</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function objectClone(o){\r\n  var ot = Array.isArray(o);\r\n  return o !== null &amp;&amp; typeof o === \"object\" ? Object.keys(o)\r\n                                                     .reduce((r,k) =&gt; o[k] !== null &amp;&amp; typeof o[k] === \"object\" ? (r[k] = objectClone(o[k]),r)\r\n                                                                                                                : (r[k] = o[k],r), ot ? [] : {})\r\n                                             : o;\r\n}\r\nvar obj = {a: 1, b: {c: 2, d: {e: 3, f: {g: 4, h: null}}}},\r\n    arr = [1,2,[3,4,[5,6,[7]]]],\r\n    nil = null,\r\n  clobj = objectClone(obj),\r\n  clarr = objectClone(arr),\r\n  clnil = objectClone(nil);\r\nconsole.log(clobj, obj === clobj);\r\nconsole.log(clarr, arr === clarr);\r\nconsole.log(clnil, nil === clnil);\r\nclarr[2][2][2] = \"seven\";\r\nconsole.log(arr, clarr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 45574894,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/45574894",
    "title": null,
    "body": "<p>Simply check for the <code>display</code> attribute (or <code>visibility</code> depending on what kind of invisibility you prefer). Example :</p>\n\n<pre><code>if ($('#invisible').css('display') == 'none') {\n    // This means the HTML element with ID 'invisible' has its 'display' attribute set to 'none'\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4547217,
      "name": "Antoine Auffray",
      "reputation": 148
    }
  },
  {
    "soID": 31631355,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/31631355",
    "title": null,
    "body": "<p>Upvote for the most popular answer, but add </p>\n\n<pre><code>&amp;&amp; (e.target != $('html').get(0)) // ignore the scrollbar\n</code></pre>\n\n<p>so, a click on a scroll bar does not [hide or whatever] your target element.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 30337498,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/30337498",
    "title": null,
    "body": "<p>Here is the vanilla JavaScript solution for future viewers.</p>\n\n<p>Upon clicking any element within the document, if the clicked element's id is toggled, or the hidden element is not hidden and the hidden element does not contain the clicked element, toggle the element.</p>\n\n<pre><code>(function () {\n    \"use strict\";\n    var hidden = document.getElementById('hidden');\n    document.addEventListener('click', function (e) {\n        if (e.target.id == 'toggle' || (hidden.style.display != 'none' &amp;&amp; !hidden.contains(e.target))) hidden.style.display = hidden.style.display == 'none' ? 'block' : 'none';\n    }, false);\n})();\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>(function () {\r\n    \"use strict\";\r\n    var hidden = document.getElementById('hidden');\r\n    document.addEventListener('click', function (e) {\r\n        if (e.target.id == 'toggle' || (hidden.style.display != 'none' &amp;&amp; !hidden.contains(e.target))) hidden.style.display = hidden.style.display == 'none' ? 'block' : 'none';\r\n    }, false);\r\n})();</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;a href=\"javascript:void(0)\" id=\"toggle\"&gt;Toggle Hidden Div&lt;/a&gt;\r\n&lt;div id=\"hidden\" style=\"display: none;\"&gt;This content is normally hidden. click anywhere other than this content to make me disappear&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>If you are going to have multiple toggles on the same page you can use something like this:</p>\n\n<ol>\n<li>Add the class name <code>hidden</code> to the collapsible item.</li>\n<li>Upon document click, close all hidden elements which do not contain the clicked element and are not hidden</li>\n<li>If the clicked element is a toggle, toggle the specified element.</li>\n</ol>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>(function () {\r\n    \"use strict\";\r\n    var hiddenItems = document.getElementsByClassName('hidden'), hidden;\r\n    document.addEventListener('click', function (e) {\r\n        for (var i = 0; hidden = hiddenItems[i]; i++) {\r\n            if (!hidden.contains(e.target) &amp;&amp; hidden.style.display != 'none')\r\n                hidden.style.display = 'none';\r\n        }\r\n        if (e.target.getAttribute('data-toggle')) {\r\n            var toggle = document.querySelector(e.target.getAttribute('data-toggle'));\r\n            toggle.style.display = toggle.style.display == 'none' ? 'block' : 'none';\r\n        }\r\n    }, false);\r\n})();</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;a href=\"javascript:void(0)\" data-toggle=\"#hidden1\"&gt;Toggle Hidden Div&lt;/a&gt;\r\n&lt;div class=\"hidden\" id=\"hidden1\" style=\"display: none;\" data-hidden=\"true\"&gt;This content is normally hidden&lt;/div&gt;\r\n&lt;a href=\"javascript:void(0)\" data-toggle=\"#hidden2\"&gt;Toggle Hidden Div&lt;/a&gt;\r\n&lt;div class=\"hidden\" id=\"hidden2\" style=\"display: none;\" data-hidden=\"true\"&gt;This content is normally hidden&lt;/div&gt;\r\n&lt;a href=\"javascript:void(0)\" data-toggle=\"#hidden3\"&gt;Toggle Hidden Div&lt;/a&gt;\r\n&lt;div class=\"hidden\" id=\"hidden3\" style=\"display: none;\" data-hidden=\"true\"&gt;This content is normally hidden&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 34280828,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/34280828",
    "title": null,
    "body": "<p>A simple solution for the situation is:</p>\n\n<pre><code>$(document).mouseup(function (e)\n{\n    var container = $(\"YOUR SELECTOR\"); // Give you class or ID\n\n    if (!container.is(e.target) &amp;&amp;            // If the target of the click is not the desired div or section\n        container.has(e.target).length === 0) // ... nor a descendant-child of the container\n    {\n        container.hide();\n    }\n});\n</code></pre>\n\n<p>The above script will hide the <code>div</code> if outside of the <code>div</code> click event is triggered.</p>\n\n<p>You can see the following blog for more information : <a href=\"http://www.codecanal.com/detect-click-outside-div-using-javascript/\" rel=\"nofollow noreferrer\">http://www.codecanal.com/detect-click-outside-div-using-javascript/</a></p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 38204022,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/38204022",
    "title": null,
    "body": "<pre><code>var a = new String(\"123\");\nvar b = \"123\";\n\nalert(a === b); // returns false !! (but they are equal and of the same type)\n</code></pre>\n\n<p>Saw this in one of the answers.\n<code>a</code> and <code>b</code> are not really the same type in this case, if you will check <code>typeof(a)</code>\n you will get <em>'object'</em> and <code>typeof(b)</code> is <em>'string'</em>.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4712641,
      "name": "Orri Scott",
      "reputation": 29
    }
  },
  {
    "soID": 29335281,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/29335281",
    "title": null,
    "body": "<p><code>===</code> cares if the objects are the same. Therefore, <code>new String(\"Hello world\") === \"Hello world\"</code> returns false. However, <code>==</code> does not care about if the objects are the same; it just simply converts one argument into the other's type: if conversion is not possible, return false. Then <code>new String(\"Hello world\") == \"Hello world\"</code> returns true instead of false.</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31767875,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/31767875",
    "title": null,
    "body": "<p>another solution.  <a href=\"http://jsfiddle.net/r5p7qobn/\">jsFiddle</a></p>\n\n<pre><code>var toBoolean = function(value) {\n    var strValue = String(value).toLowerCase();\n    strValue = ((!isNaN(strValue) &amp;&amp; strValue !== '0') &amp;&amp;\n        strValue !== '' &amp;&amp;\n        strValue !== 'null' &amp;&amp;\n        strValue !== 'undefined') ? '1' : strValue;\n    return strValue === 'true' || strValue === '1' ? true : false\n};\n</code></pre>\n\n<p>test cases run in node</p>\n\n<pre><code>&gt; toBoolean(true)\ntrue\n&gt; toBoolean(false)\nfalse\n&gt; toBoolean(undefined)\nfalse\n&gt; toBoolean(null)\nfalse\n&gt; toBoolean('true')\ntrue\n&gt; toBoolean('True')\ntrue\n&gt; toBoolean('False')\nfalse\n&gt; toBoolean('false')\nfalse\n&gt; toBoolean('0')\nfalse\n&gt; toBoolean('1')\ntrue\n&gt; toBoolean('100')\ntrue\n&gt; \n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 40438235,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/40438235",
    "title": null,
    "body": "<p>As <code>hide()</code>, <code>show()</code> and <code>toggle()</code> attaches inline css (display:none or display:block) to element.\nSimilarly, we can easily use ternary operator to check weather element is hidden or visible by checking display css.</p>\n\n<pre><code>var visible = $('#element').css('display') === 'block'? true:false;\n</code></pre>\n\n<p>This will easily check whether the element is visible or not.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4730999,
      "name": "No one",
      "reputation": 477
    }
  },
  {
    "soID": 32144541,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/32144541",
    "title": null,
    "body": "<p>The following creates two instances of the same object. I found it and am using it currently. It's simple and easy to use.</p>\n\n<pre><code>var objToCreate = JSON.parse(JSON.stringify(cloneThis));\n</code></pre>\n",
    "score": 26,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 45294201,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/45294201",
    "title": null,
    "body": "<p>you can use :</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code> var    trueOrFalse='True';\r\n    result =JSON.parse(trueOrFalse.toLowerCase());\r\n    if(result==true)\r\n      alert('this is ture');\r\n    else \r\n     ('this is false');</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>in this case the .toLowerCase is important  </p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 32068044,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/32068044",
    "title": null,
    "body": "<pre><code>if($('#id_element').is(\":visible\")){\n   alert('shown');\n}else{\n   alert('hidden');\n}\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4796478,
      "name": "Prabhagaran",
      "reputation": 1246
    }
  },
  {
    "soID": 33028757,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/33028757",
    "title": null,
    "body": "<p>This seems to work.</p>\n\n<pre><code>console.log(clock.now);\n// returns 1444356078076\n\nconsole.log(clock.format(clock.now));\n//returns 10/8/2015 21:02:16\n\nconsole.log(clock.format(clock.now + clock.add(10, 'minutes'))); \n//returns 10/8/2015 21:08:18\n\nvar clock = {\n    now:Date.now(),\n    add:function (qty, units) {\n            switch(units.toLowerCase()) {\n                case 'weeks'   :  val = qty * 1000 * 60 * 60 * 24 * 7;  break;\n                case 'days'    :  val = qty * 1000 * 60 * 60 * 24;  break;\n                case 'hours'   :  val = qty * 1000 * 60 * 60;  break;\n                case 'minutes' :  val = qty * 1000 * 60;  break;\n                case 'seconds' :  val = qty * 1000;  break;\n                default       :  val = undefined;  break;\n                }\n            return val;\n            },\n    format:function (timestamp){\n            var date = new Date(timestamp);\n            var year = date.getFullYear();\n            var month = date.getMonth() + 1;\n            var day = date.getDate();\n            var hours = date.getHours();\n            var minutes = \"0\" + date.getMinutes();\n            var seconds = \"0\" + date.getSeconds();\n            // Will display time in xx/xx/xxxx 00:00:00 format\n            return formattedTime = month + '/' + \n                                day + '/' + \n                                year + ' ' + \n                                hours + ':' + \n                                minutes.substr(-2) + \n                                ':' + seconds.substr(-2);\n            }\n};\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4797603,
      "name": "Ron Royston",
      "reputation": 2217
    }
  },
  {
    "soID": 34218425,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/34218425",
    "title": null,
    "body": "<pre><code>    $('#menucontainer').click(function(e){\n        e.stopPropagation();\n     });\n\n    $(document).on('click',  function(e){\n        // code\n    });\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31023725,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/31023725",
    "title": null,
    "body": "<p>This is just two possible ways of declaring functions, and in the second way, you can use the function before declaration.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4860625,
      "name": "Tao",
      "reputation": 213
    }
  },
  {
    "soID": 36549967,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/36549967",
    "title": null,
    "body": "<p>Subscribe <em>capturing phase</em> of click to handle click on elements which call <code>preventDefault</code>.<br>\nRetrigger it on document element using the other name <code>click-anywhere</code>.</p>\n\n<pre><code>document.addEventListener('click', function (event) {\n  event = $.event.fix(event);\n  event.type = 'click-anywhere';\n  $document.trigger(event);\n}, true);\n</code></pre>\n\n<p>Then where you need click outside functionality subscribe on <code>click-anywhere</code> event on <code>document</code> and check if the click was outside of the element you are interested in:</p>\n\n<pre><code>$(document).on('click-anywhere', function (event) {\n  if (!$(event.target).closest('#smth').length) {\n    // Do anything you need here\n  }\n});\n</code></pre>\n\n<p>Some notes:</p>\n\n<ul>\n<li><p>You have to use <code>document</code> as it would be a perfomance fault to trigger event on all elements outside of which the click occured.</p></li>\n<li><p>This functionality can be wrapped into special plugin, which calls some callback on outside click.</p></li>\n<li><p>You can't subscribe capturing phase using jQuery itself.</p></li>\n<li><p>You don't need document load to subscribe as subscription is on <code>document</code>, even not on its <code>body</code>, so it exists always independently ащкь script placement and load status.</p></li>\n</ul>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 39729290,
    "parentID": 332872,
    "url": "https://stackoverflow.com/q/39729290",
    "title": null,
    "body": "<p>You can use esapi library and encode your url using the below function. The function endures that '/' are not lost to encoding while the remainder of the text contents are encoded:</p>\n\n<pre><code>function encodeUrl(url)\n{\n    String arr[] = url.split(\"/\");\n    String encodedUrl = \"\";\n    for(int i = 0; i&lt;arr.length; i++)\n    {\n        encodedUrl = encodedUrl + ESAPI.encoder().encodeForHTML(ESAPI.encoder().encodeForURL(arr[i]));\n        if(i&lt;arr.length-1) encodedUrl = encodedUrl + \"/\";\n    }\n    return url;\n}\n</code></pre>\n\n<p><a href=\"https://www.owasp.org/index.php/ESAPI_JavaScript_Readme\" rel=\"nofollow\">https://www.owasp.org/index.php/ESAPI_JavaScript_Readme</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4977531,
      "name": "Mohith Maratt",
      "reputation": 51
    }
  },
  {
    "soID": 30960095,
    "parentID": 306583,
    "url": "https://stackoverflow.com/q/30960095",
    "title": null,
    "body": "<p>Also this should work:</p>\n\n<pre><code>$(\"#id img\")\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5001158,
      "name": "tetutato",
      "reputation": 263
    }
  },
  {
    "soID": 31236206,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/31236206",
    "title": null,
    "body": "<p>For a timestamp with microsecond resolution, there's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\" rel=\"noreferrer\"><code>performance.now</code></a>:</p>\n\n<pre><code>function time() { \n  return performance.now() + performance.timing.navigationStart;\n}\n</code></pre>\n\n<p>This could for example yield <code>1436140826653.139</code>, while <code>Date.now</code> only gives <code>1436140826653</code>.</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5046452,
      "name": "iter",
      "reputation": 160
    }
  },
  {
    "soID": 34995357,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/34995357",
    "title": null,
    "body": "<p><strong><a href=\"http://www.sitepoint.com/back-to-basics-javascript-hoisting/\">Hoisting</a></strong> <em>is the JavaScript interpreter’s action of moving all variable and function declarations to the top of the current scope.</em> </p>\n\n<p><em>However, only the actual declarations are hoisted. by leaving assignments where they are.</em></p>\n\n<ul>\n<li>variable's/Function's declared inside the page are global can access anywhere in that page.</li>\n<li>variable's/Functions declared inside the function are having local scope. means they are available/accessed inside the function body (scope), they are not available outside the function body.</li>\n</ul>\n\n<p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Variables\">Variable</a></strong></p>\n\n<p><em>Javascript is called loosely typed language. Which means Javascript variables can hold value of any <a href=\"https://msdn.microsoft.com/en-us/library/7wkd9z69(v=vs.94).aspx\">Data-Type</a>. Javascript automatically takes care of changing the variable-type based on the value/literal provided during runtime.</em></p>\n\n<pre><code>global_Page = 10;                                               var global_Page;      « undefined\n    « Integer literal, Number Type.   -------------------       global_Page = 10;     « Number         \nglobal_Page = 'Yash';                 |   Interpreted   |       global_Page = 'Yash'; « String\n    « String literal, String Type.    «       AS        «       global_Page = true;   « Boolean \nvar global_Page = true;               |                 |       global_Page = function (){          « function\n    « Boolean Type                    -------------------                 var local_functionblock;  « undefined\nglobal_Page = function (){                                                local_functionblock = 777;« Number\n    var local_functionblock = 777;                              };  \n    // Assigning function as a data.\n};  \n</code></pre>\n\n<p><strong>Function</strong></p>\n\n<pre><code>function Identifier_opt ( FormalParameterList_opt ) { \n      FunctionBody | sequence of statements\n\n      « return;  Default undefined\n      « return 'some data';\n}\n</code></pre>\n\n<ul>\n<li>functions declared inside the page are hoisted to top of the page having global access.</li>\n<li>functions declared inside the function-block are hoisted to top of the block.</li>\n<li><p>Default return value of function is '<a href=\"https://javascriptweblog.wordpress.com/2010/08/16/understanding-undefined-and-preventing-referenceerrors/\">undefined</a>', <a href=\"http://javascript.info/tutorial/variables-and-statements\">Variable</a> declaration default value also 'undefined'</p>\n\n<pre><code>Scope with respect to function-block global. \nScope with respect to page undefined | not available.\n</code></pre></li>\n</ul>\n\n<p><strong>Function Declaration</strong></p>\n\n<pre><code>function globalAccess() {                                  function globalAccess() {      \n}                                  -------------------     }\nglobalAccess();                    |                 |     function globalAccess() { « Re-Defined / overridden.\nlocalAccess();                     «   Hoisted  As   «         function localAccess() {\nfunction globalAccess() {          |                 |         }\n     localAccess();                -------------------         localAccess(); « function accessed with in globalAccess() only.\n     function localAccess() {                              }\n     }                                                     globalAccess();\n}                                                          localAccess(); « ReferenceError as the function is not defined\n</code></pre>\n\n<p><strong>Function Expression</strong></p>\n\n<pre><code>        10;                 « literal\n       (10);                « Expression                (10).toString() -&gt; '10'\nvar a;                      \n    a = 10;                 « Expression var              a.toString()  -&gt; '10'\n(function invoke() {        « Expression Function\n console.log('Self Invoking');                      (function () {\n});                                                               }) () -&gt; 'Self Invoking'\n\nvar f; \n    f = function (){        « Expression var Function\n    console.log('var Function');                                   f ()  -&gt; 'var Function'\n    };\n</code></pre>\n\n<p><em>Function assigned to variable Example:</em></p>\n\n<pre><code>(function selfExecuting(){\n    console.log('IIFE - Immediately-Invoked Function Expression');\n}());\n\nvar anonymous = function (){\n    console.log('anonymous function Expression');\n};\n\nvar namedExpression = function for_InternalUSE(fact){\n    if(fact === 1){\n        return 1;\n    }\n\n    var localExpression = function(){\n        console.log('Local to the parent Function Scope');\n    };\n    globalExpression = function(){ \n        console.log('creates a new global variable, then assigned this function.');\n    };\n\n    //return; //undefined.\n    return fact * for_InternalUSE( fact - 1);   \n};\n\nnamedExpression();\nglobalExpression();\n</code></pre>\n\n<p>javascript interpreted as</p>\n\n<pre><code>var anonymous;\nvar namedExpression;\nvar globalExpression;\n\nanonymous = function (){\n    console.log('anonymous function Expression');\n};\n\nnamedExpression = function for_InternalUSE(fact){\n    var localExpression;\n\n    if(fact === 1){\n        return 1;\n    }\n    localExpression = function(){\n        console.log('Local to the parent Function Scope');\n    };\n    globalExpression = function(){ \n        console.log('creates a new global variable, then assigned this function.');\n    };\n\n    return fact * for_InternalUSE( fact - 1);    // DEFAULT UNDEFINED.\n};\n\nnamedExpression(10);\nglobalExpression();\n</code></pre>\n\n<p><a href=\"http://jsperf.com/yashfunctions\">jsperf</a></p>\n",
    "score": 26,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5081877,
      "name": "Yash",
      "reputation": 1502
    }
  },
  {
    "soID": 38199254,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/38199254",
    "title": null,
    "body": "<p>java-script provides many methods to retrieve current URL which is displayed in browser's address bar.</p>\n\n<p>Test URL : <code>http://stackoverflow.com/questions/5515310/is-there-a-standard-function-to-check-for-null-undefined-or-blank-variables-in/32942762?rq=1&amp;page=2&amp;tab=active&amp;answertab=votes#32942762</code></p>\n\n<pre><code>resourceAddress.hash();\nconsole.log('URL Object ', webAddress);\nconsole.log('Parameters ', param_values);\n</code></pre>\n\n<p><strong>Function:</strong></p>\n\n<pre><code>var webAddress = {};\nvar param_values = {};\nvar protocol = '';\nvar resourceAddress = {\n\n    fullAddress : function () {\n        var addressBar = window.location.href;\n        if ( addressBar != '' &amp;&amp; addressBar != 'undefined') {\n            webAddress[ 'href' ] = addressBar;\n        }\n    },\n    protocol_identifier : function () { resourceAddress.fullAddress();\n\n        protocol = window.location.protocol.replace(':', '');\n        if ( protocol != '' &amp;&amp; protocol != 'undefined') {\n            webAddress[ 'protocol' ] = protocol;\n        }\n    },\n    domain : function () {      resourceAddress.protocol_identifier();\n\n        var domain = window.location.hostname;\n        if ( domain != '' &amp;&amp; domain != 'undefined' &amp;&amp; typeOfVar(domain) === 'string') {\n            webAddress[ 'domain' ] = domain;\n            var port = window.location.port;\n            if ( (port == '' || port == 'undefined') &amp;&amp; typeOfVar(port) === 'string') {\n                if(protocol == 'http') port = '80';\n                if(protocol == 'https') port = '443';           \n            }\n            webAddress[ 'port' ] = port;\n        }\n    },\n    pathname : function () {        resourceAddress.domain();\n\n        var resourcePath = window.location.pathname;\n        if ( resourcePath != '' &amp;&amp; resourcePath != 'undefined') {\n            webAddress[ 'resourcePath' ] = resourcePath;\n        }\n    },\n    params : function () {      resourceAddress.pathname();\n\n        var v_args = location.search.substring(1).split(\"&amp;\");\n\n        if ( v_args != '' &amp;&amp; v_args != 'undefined')\n        for (var i = 0; i &lt; v_args.length; i++) {\n            var pair = v_args[i].split(\"=\");\n\n            if ( typeOfVar( pair ) === 'array' ) {\n                param_values[ decodeURIComponent( pair[0] ) ] = decodeURIComponent( pair[1] );\n            }\n        }\n        webAddress[ 'params' ] = param_values;\n    },\n    hash : function () {        resourceAddress.params();\n\n        var fragment = window.location.hash.substring(1);\n        if ( fragment != '' &amp;&amp; fragment != 'undefined')\n            webAddress[ 'hash' ] = fragment;        \n    }\n};\nfunction typeOfVar (obj) {\n      return {}.toString.call(obj).split(' ')[1].slice(0, -1).toLowerCase();\n}\n</code></pre>\n\n<ul>\n<li>protocol « <a href=\"https://en.wikipedia.org/wiki/Web_browser\" rel=\"noreferrer\">Web-browsers</a> use Internet Protocol by following some rules for communication between WebHosted Applications and Web Client(Browser). (http = <a href=\"http://simpledns.com/plugin-httpredir\" rel=\"noreferrer\">80</a>, https (SSL) = <a href=\"https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers\" rel=\"noreferrer\">443</a>, ftp = 21, etc.) </li>\n</ul>\n\n<p>EX: With default port numbers</p>\n\n<pre><code>&lt;protocol&gt;//&lt;hostname&gt;:&lt;port&gt;/&lt;pathname&gt;&lt;search&gt;&lt;hash&gt;\nhttps://en.wikipedia.org:443/wiki/Pretty_Good_Privacy\nhttp://stackoverflow.com:80/\n</code></pre>\n\n<ul>\n<li>(//) « Host is the name given to an end-point(machine on which resource lives) on the Internet.\nwww.stackoverflow.com - <a href=\"https://en.wikipedia.org/wiki/Domain_name\" rel=\"noreferrer\">DNS</a> IP Address of an Application  (OR) localhost:8080 - localhost</li>\n</ul>\n\n<p>Domain names are which you register by the rules and procedures of the Domain Name System(DNS) tree. DNS servers of someone who manages your domain with IP-Address for addressing purposes. In DNS server hierarchy \nthe Root name of an stackoverlfow.com is com.</p>\n\n<pre><code>gTLDs      - com « stackoverflow (OR) in « co « google\n</code></pre>\n\n<p>Local system you have to maintain domain's which are not PUBLIC in Host Files.\n<code>localhost.yash.com « localhsot - subdomain(</code><a href=\"https://en.wikipedia.org/wiki/Apache_HTTP_Server\" rel=\"noreferrer\"><code>web-server</code></a><code>), yash.com - maindomain(</code><a href=\"https://en.wikipedia.org/wiki/Apache_HTTP_Server\" rel=\"noreferrer\"><code>Proxy-Server</code></a><code>).\nmyLocalApplication.com 172.89.23.777</code></p>\n\n<ul>\n<li>(/) « The path gives info about the specific resource within the host that the Web client wants to access </li>\n<li>(?) « An optional query is to pass a sequence of attribute–value pairs separated by a delimiter(&amp;).</li>\n<li>(#) « An optional fragment is often an id attribute of a specific element, and web browsers will scroll this element into view.</li>\n</ul>\n\n<p>If parameter has an <a href=\"http://www.esqsoft.com/javascript_examples/date-to-epoch.htm\" rel=\"noreferrer\">Epoch</a> <code>?date=1467708674</code> then use.</p>\n\n<pre><code>var epochDate = 1467708674; var date = new Date( epochDate );\n</code></pre>\n\n<p>URL <a href=\"https://i.stack.imgur.com/I79ER.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/I79ER.png\" alt=\"enter image description here\"></a></p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5081877,
      "name": "Yash",
      "reputation": 1502
    }
  },
  {
    "soID": 40991133,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/40991133",
    "title": null,
    "body": "<p>I just want to clarify that, in jQuery,</p>\n\n<blockquote>\n  <p>Elements can be considered hidden for several reasons:</p>\n  \n  <ul>\n  <li>They have a CSS display value of none.</li>\n  <li>They are form elements with type=\"hidden\".</li>\n  <li>Their width and height are explicitly set to 0.</li>\n  <li>An ancestor element is hidden, so the element is not shown on the page.</li>\n  </ul>\n  \n  <p>Elements with visibility: hidden or opacity: 0 are considered to be visible, since they still consume space in the layout. During animations that hide an element, the element is considered to be visible until the end of the animation.</p>\n  \n  <p>Source: <a href=\"https://api.jquery.com/hidden-selector/\" rel=\"nofollow noreferrer\">:hidden Selector | jQuery API Documentation</a></p>\n</blockquote>\n\n<pre><code>if($('.element').is(':hidden')) {\n  // Do something\n}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5157296,
      "name": "Sky Yip",
      "reputation": 51
    }
  },
  {
    "soID": 33508768,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/33508768",
    "title": null,
    "body": "<p>This is my solution for mvc using ajax.</p>\n\n<pre><code>&lt;form enctype=\"multipart/form-data\"&gt;    \n\n    &lt;div class=\"form-group\"&gt;\n        &lt;label class=\"control-label col-md-2\" for=\"apta_Description\"&gt;Description&lt;/label&gt;\n        &lt;div class=\"col-md-10\"&gt;\n            &lt;input class=\"form-control text-box single-line\" id=\"apta_Description\" name=\"apta_Description\" type=\"text\" value=\"\"&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;input name=\"file\" type=\"file\" /&gt;\n    &lt;input type=\"button\" value=\"Upload\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>and the js</p>\n\n<pre><code>&lt;script&gt;\n\n    $(':button').click(function () {\n        var formData = new FormData($('form')[0]);\n        $.ajax({\n            url: '@Url.Action(\"Save\", \"Home\")',  \n            type: 'POST',                \n            success: completeHandler,\n            data: formData,\n            cache: false,\n            contentType: false,\n            processData: false\n        });\n    });    \n\n    function completeHandler() {\n        alert(\":)\");\n    }    \n&lt;/script&gt;\n</code></pre>\n\n<p>Controller</p>\n\n<pre><code>[HttpPost]\npublic ActionResult Save(string apta_Description, HttpPostedFileBase file)\n{\n    return Json(\":)\");\n}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5190625,
      "name": "Erick Langford Xenes",
      "reputation": 829
    }
  },
  {
    "soID": 37016461,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/37016461",
    "title": null,
    "body": "<pre><code>Boolean(Number(value));\nvar value = 1;  //true\nvar value = \"1\" //true\nvar value = 0;  //false\nvar value = \"0\" //false`\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 35870563,
    "parentID": 242813,
    "url": "https://stackoverflow.com/q/35870563",
    "title": null,
    "body": "<blockquote>\n  <p>Examining the pros and cons</p>\n</blockquote>\n\n<p><strong>In favor of single quotes</strong></p>\n\n<ul>\n<li>Less visual clutter.</li>\n<li>Generating HTML: HTML attributes are usually delimited by double quotes.</li>\n</ul>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>elem.innerHTML = '&lt;a href=\"' + url + '\"&gt;Hello&lt;/a&gt;';</code></pre>\r\n</div>\r\n</div>\r\n\nHowever, single quotes are just as legal in HTML.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>elem.innerHTML = \"&lt;a href='\" + url + \"'&gt;Hello&lt;/a&gt;\";</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Furthermore, inline HTML is normally an anti-pattern. Prefer templates.</p>\n\n<ul>\n<li>Generating JSON: Only double quotes are allowed in JSON.</li>\n</ul>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>myJson = '{ \"hello world\": true }';</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Again, you shouldn’t have to construct JSON this way. JSON.stringify() is often enough. If not, use templates.</p>\n\n<p><strong>In favor of double quotes</strong></p>\n\n<ul>\n<li>Doubles are easier to spot if you don't have color coding. Like in a console log or some kind of view-source setup.</li>\n<li>Similarity to other languages: In shell programming (Bash etc.), single-quoted string literals exist, but escapes are not interpreted inside them. C and Java use double quotes for strings and single quotes for characters.</li>\n<li>If you want code to be valid JSON, you need to use double quotes.</li>\n</ul>\n\n<p><strong>In favor of both</strong></p>\n\n<p>There is no difference between the two in JavaScript. Therefore, you can use whatever is convenient at the moment. For example, the following string literals all produce the same string:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>    \"He said: \\\"Let's go!\\\"\"\r\n    'He said: \"Let\\'s go!\"'\r\n    \"He said: \\\"Let\\'s go!\\\"\"\r\n    'He said: \\\"Let\\'s go!\\\"'</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Single quotes for internal strings and double for external. That allows you to distinguish internal constants from strings that are to be displayed to the user (or written to disk etc.). Obviously, you should avoid putting the latter in your code, but that can’t always be done.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 32875339,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/32875339",
    "title": null,
    "body": "<p>There are two types of scopes in JavaScript. </p>\n\n<ol>\n<li><p><strong>Global scope</strong>: variable which is announced in global scope can be used anywhere in the program very smoothly. For example: </p>\n\n<pre><code>var carName = \" BMW\";\n\n// code here can use carName\n\nfunction myFunction() {\n     // code here can use carName \n}\n</code></pre></li>\n<li><p><strong>Functional scope or Local scope</strong>: variable declared in this scope can be used in its own function only. For example:</p>\n\n<pre><code>// code here can not use carName\nfunction myFunction() {\n   var carName = \"BMW\";\n   // code here can use carName\n}\n</code></pre></li>\n</ol>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5274679,
      "name": "A. Randhawa",
      "reputation": 45
    }
  },
  {
    "soID": 43585877,
    "parentID": 134845,
    "url": "https://stackoverflow.com/q/43585877",
    "title": null,
    "body": "<p>sometimes we control links to trigger Ajax requests, this happens a lot for seo reasons :</p>\n\n<pre><code>&lt;nav id=\"sampleId\"&gt;\n    &lt;li&gt;&lt;a href=\"contact\"&gt;contact&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"about\"&gt;about&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"faq\"&gt;faq&lt;/a&gt;&lt;/li&gt;\n&lt;/nav&gt;\n</code></pre>\n\n<p>we need to load pages with Ajax, we also want links to be operate like normal link with mouse middle clicks :</p>\n\n<pre><code>// js :\n$('#sampleId &gt; li').click(function(e) {\n\n    // if not left click act like normal link :\n    if (e.which != 1) return true;\n\n    // else :\n    // do some stuff :\n    myFunction();\n    return false; // this will prevent from going to target href;\n})\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 35087703,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/35087703",
    "title": null,
    "body": "<p>In addition to the other options, if you want a dateformat ISO, you get can get it directly</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(new Date().toISOString());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5325015,
      "name": "Joaquinglez",
      "reputation": 421
    }
  },
  {
    "soID": 40929580,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/40929580",
    "title": null,
    "body": "<p><strong>There are a couple of ways to append an array in JavaScript:</strong></p>\n\n<p><strong>1)</strong> The <code>push()</code> method adds one or more elements to the end of an array and returns the new length of the array.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var a = [1, 2, 3];\r\na.push(4, 5);\r\nconsole.log(a);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Output:</p>\n\n<pre><code>[1, 2, 3, 4, 5]\n</code></pre>\n\n<p><strong>2)</strong> The <code>unshift()</code> method adds one or more elements to the beginning of an array and returns the new length of the array:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var a = [1, 2, 3];\r\na.unshift(4, 5);\r\nconsole.log(a); </code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Output:</p>\n\n<pre><code>[4, 5, 1, 2, 3]\n</code></pre>\n\n<p><strong>3)</strong> The <code>concat()</code> method is used to merge two or more arrays. This method <strong>does not change</strong> the existing arrays, but instead returns a new array.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr1 = [\"a\", \"b\", \"c\"];\r\nvar arr2 = [\"d\", \"e\", \"f\"];\r\nvar arr3 = arr1.concat(arr2);\r\nconsole.log(arr3);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Output:</p>\n\n<pre><code>[ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" ]\n</code></pre>\n\n<p><strong>4)</strong> You can use the array's <code>.length</code> property to add an element to the end of the array:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var ar = ['one', 'two', 'three'];\r\nar[ar.length] = 'four';\r\nconsole.log( ar ); </code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Output:</p>\n\n<pre><code> [\"one\", \"two\", \"three\", \"four\"]\n</code></pre>\n\n<p><strong>5)</strong> The <code>splice()</code> method changes the content of an array by removing existing elements and/or adding new elements:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"];\r\nmyFish.splice(4, 0, \"nemo\");\r\n//array.splice(start, deleteCount, item1, item2, ...)\r\nconsole.log(myFish);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Output:</p>\n\n<pre><code>[\"angel\", \"clown\", \"mandarin\", \"surgeon\",\"nemo\"]\n</code></pre>\n\n<p><strong>6)</strong> You can also add a new element to an array simply by specifying a new index and assigning a value:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var ar = ['one', 'two', 'three'];\r\nar[3] = 'four'; // add new element to ar\r\nconsole.log(ar);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Output:</p>\n\n<pre><code>[\"one\", \"two\",\"three\",\"four\"]\n</code></pre>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43817534,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/43817534",
    "title": null,
    "body": "<p>Just simply check if that element is <strong>visible</strong> and it will return a boolean, jQuery hide the elements by adding display none to the element, so if you want to use pure JavaScript, you can still do that, for example:</p>\n\n<pre><code>if (document.getElementById(\"element\").style.display === 'block') { \n  // your element is visible, do whatever you want\n}\n</code></pre>\n\n<p>Also, you can use jQuery as seems the rest of your code using that and you have smaller block of code, something like below in jQuery, do the same track for you:</p>\n\n<pre><code>if ($(element).is(\":visible\")) { \n    // your element is visible, do whatever you want\n};\n</code></pre>\n\n<p>Also using css method in jQuery can result the same thing:</p>\n\n<pre><code>if ($(element).css('display')==='block') {\n    // your element is visible, do whatever you want\n}\n</code></pre>\n\n<p>Also in case of checking for visibility and display, you can do the below:</p>\n\n<pre><code>if ($(this).css(\"display\")===\"block\"||$(this).css(\"visibility\")===\"visible\") {\n   // your element is visible, do whatever you want\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 43831317,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/43831317",
    "title": null,
    "body": "<p>Use <code>===</code> if you want to compare couple of things in JavaScript, it's called <strong>strict equality</strong>, it means this will return true if both type and value are the same, so there wouldn't be any unwanted type correction for you, if you using <code>==</code>, you basically don't care about the type and in many cases you could face issues with loose equality comparison. <br><br></p>\n\n<p><strong>Strict equality using ===</strong></p>\n\n<blockquote>\n  <p>Strict equality compares two values for equality. Neither value is\n  implicitly converted to some other value before being compared. If the\n  values have different types, the values are considered unequal.\n  Otherwise, if the values have the same type and are not numbers,\n  they're considered equal if they have the same value. Finally, if both\n  values are numbers, they're considered equal if they're both not NaN\n  and are the same value, or if one is +0 and one is -0.</p>\n</blockquote>\n\n<pre><code>var num = 0;\nvar obj = new String('0');\nvar str = '0';\n\nconsole.log(num === num); // true\nconsole.log(obj === obj); // true\nconsole.log(str === str); // true\n\nconsole.log(num === obj); // false\nconsole.log(num === str); // false\nconsole.log(obj === str); // false\nconsole.log(null === undefined); // false\nconsole.log(obj === null); // false\nconsole.log(obj === undefined); // false\n</code></pre>\n\n<p><br><strong>Loose equality using ==</strong></p>\n\n<blockquote>\n  <p>Loose equality compares two values for equality, after converting both\n  values to a common type.  After conversions (one or both sides may\n  undergo conversions), the final equality comparison is performed\n  exactly as === performs it.  Loose equality is symmetric: A == B\n  always has identical semantics to B == A for any values of A and B\n  (except for the order of applied conversions).</p>\n</blockquote>\n\n<pre><code>var num = 0;\nvar obj = new String('0');\nvar str = '0';\n\nconsole.log(num == num); // true\nconsole.log(obj == obj); // true\nconsole.log(str == str); // true\n\nconsole.log(num == obj); // true\nconsole.log(num == str); // true\nconsole.log(obj == str); // true\nconsole.log(null == undefined); // true\n\n// both false, except in rare cases\nconsole.log(obj == null);\nconsole.log(obj == undefined);\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 43871841,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/43871841",
    "title": null,
    "body": "<p>They are pretty similar with some small differences, first one is a variable which assigned to an anonymous function (Function Declaration) and second one is the normal way to create a function in JavaScript(Anonymous function Declaration), both has usage, cons and pros:</p>\n\n<p><strong>1. Function Expression</strong><br></p>\n\n<pre><code>var functionOne = function() {\n    // Some code\n};\n</code></pre>\n\n<blockquote>\n  <p>A Function Expression defines a function as a part of a larger\n  expression syntax (typically a variable assignment ). Functions\n  defined via Functions Expressions can be named or anonymous. Function\n  Expressions must not start with “function” (hence the parentheses\n  around the self invoking example below).</p>\n</blockquote>\n\n<p>Assign a variable to a function, means no Hoisting, as we know functions in JavaScript can Hoist, means they can be called before they get declared, while variables need to be declared before getting access to them, so means in this case we can not access the function before where it's declared, also it could be a way that you write your functions, for the functions which return another function, this kind of declaration could make sense, also in ECMA6 &amp; above you can assign this to an arrow function which can be used to call anonymous functions, also this way of declaring is a better way to create Constructor functions in JavaScript.</p>\n\n<p><strong>2. Function Declaration</strong><br></p>\n\n<pre><code>function functionTwo() {\n    // Some code\n}\n</code></pre>\n\n<blockquote>\n  <p>A Function Declaration defines a named function variable without\n  requiring variable assignment. Function Declarations occur as\n  standalone constructs and cannot be nested within non-function blocks.\n  It’s helpful to think of them as siblings of Variable Declarations.\n  Just as Variable Declarations must start with “var”, Function\n  Declarations must begin with “function”.</p>\n</blockquote>\n\n<p>This is the normal way of calling a function in JavaScript, this function can be called before you even declare it as in JavaScript all functions get Hoisted, but if you have 'use strict' this won't Hoist as expected, it's a good way to call all normal functions which are not big in lines and neither are a  constructor function.</p>\n\n<p>Also, if you need more info about how hoisting works in JavaScript, visit the link below:</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Glossary/Hoisting</a></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 43963804,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/43963804",
    "title": null,
    "body": "<p>We don't have append function for Array in javascript, but we have <strong>push</strong> and <strong>unshift</strong>, imagine you have the array below:</p>\n\n<pre><code>var arr = [1, 2, 3, 4, 5];\n</code></pre>\n\n<p>and we like append a value to this array, we can do, arr.push(6) and it will add 6 to the end of the array:</p>\n\n<pre><code>arr.push(6); // return [1, 2, 3, 4, 5, 6];\n</code></pre>\n\n<p>also we can use unshift, look at how we can apply this:</p>\n\n<pre><code>arr.unshift(0); //return [0, 1, 2, 3, 4, 5];\n</code></pre>\n\n<p>They are main functions to add or append new values to the arrays.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43998710,
    "parentID": 154059,
    "url": "https://stackoverflow.com/q/43998710",
    "title": null,
    "body": "<p>You can easily add it to native <strong>String</strong> object in JavaScript and reuse it over and over...<br>\nSomething simple like below code can do the job for you if you want to check <code>''</code> empty strings:</p>\n\n<pre><code>String.prototype.isEmpty = String.prototype.isEmpty || function() {\n  return !(!!this.length);\n}\n</code></pre>\n\n<p>Otherwise if you'd like to check both <code>''</code> empty string and <code>'   '</code> with space, you can do that by just adding trim(), something like the code below:</p>\n\n<pre><code>String.prototype.isEmpty = String.prototype.isEmpty || function() {\n   return !(!!this.trim().length);\n}\n</code></pre>\n\n<p>and you can call it this way:</p>\n\n<pre><code>''.isEmpty(); //return true\n'alireza'.isEmpty(); //return false\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 44082035,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/44082035",
    "title": null,
    "body": "<p>Date native object in JavaScript is the way we get all data about time.\nJust be careful in JavaScript the timestamp is depends on the client computer setting, so it's not 100% accurate timestamp. For getting the best result, you need to get the timestamp from the server-side. </p>\n\n<p>Anyway, my preferred way is using vanilla. This is a common way of doing it in JavaScript:</p>\n\n<pre><code>Date.now(); //return 1495255666921\n</code></pre>\n\n<p>In MDN it's mentioned as below:</p>\n\n<blockquote>\n  <p>The Date.now() method returns the number of milliseconds elapsed since\n  1 January 1970 00:00:00 UTC.<br>\n  Because now() is a static method of Date, you always use it as Date.now().</p>\n</blockquote>\n\n<p>If you using a version below ES5, <code>Date.now();</code> not works and you need to use:</p>\n\n<pre><code>new Date().getTime();\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 43282814,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/43282814",
    "title": null,
    "body": "<p>Using delete method is the best way to do that, as per MDN description, the delete operator removes a property from an object. so you can simply write:</p>\n\n<pre><code>delete myObject.regex;\n// OR\ndelete myObject['regex'];\n</code></pre>\n\n<blockquote>\n  <p>The delete operator removes a given property from an object. On\n  successful deletion, it will return true, else false will be returned.\n  However, it is important to consider the following scenarios:</p>\n  \n  <ul>\n  <li><p>If the property which you are trying to delete does not exist, delete\n  will not have any effect and will return true</p></li>\n  <li><p>If a property with the same name exists on the object's prototype\n  chain, then, after deletion, the object will use the property from the\n  prototype chain (in other words, delete only has an effect on own\n  properties).</p></li>\n  <li><p>Any property declared with var cannot be deleted from the global scope\n  or from a function's scope.</p></li>\n  <li><p>As such, delete cannot delete any functions in the global scope (whether this is part from a function definition or a function  (expression). </p></li>\n  <li><p>Functions which are part of an object (apart from the<br>\n  global scope) can be deleted with delete.</p></li>\n  <li><p>Any property declared with let or const cannot be deleted from the scope  within which they were defined. Non-configurable properties cannot be removed. This includes properties of built-in objects like Math, Array, Object and properties that are created as non-configurable with methods like Object.defineProperty().</p></li>\n  </ul>\n</blockquote>\n\n<p>The following snippet gives another simple example:</p>\n\n<pre><code>var Employee = {\n  age: 28,\n  name: 'abc',\n  designation: 'developer'\n}\n\nconsole.log(delete Employee.name);   // returns true\nconsole.log(delete Employee.age);    // returns true\n\n// When trying to delete a property that does \n// not exist, true is returned \nconsole.log(delete Employee.salary); // returns true\n</code></pre>\n\n<p>For more info about and seeing more example, visit the link below:</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete</a></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 43188775,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/43188775",
    "title": null,
    "body": "<p>Deep cloning an Object was always a concern in JS, but it was all about before ES6, in the below list I list different ways of deep copying an object in JavaScript, imagine you have the Object below and would like to have a deep copy of that:</p>\n\n<pre><code>var obj = {a:1, b:2, c:3, d:4};\n</code></pre>\n\n<p>There are few ways to copy this object, without changing the origin:</p>\n\n<p>1) ES6, all modern browsers supporting ES6, but if you browser not, you can use BabelJs, deep copy of an object is very easy in ES6:</p>\n\n<pre><code>var deepCopyObj = Object.assign({}, obj);\n</code></pre>\n\n<p>2) ES5+, Using a simple function to do the copy for you:</p>\n\n<pre><code>function deepCopyObj(obj) {\n    if (null == obj || \"object\" != typeof obj) return obj;\n    if (obj instanceof Date) {\n        var copy = new Date();\n        copy.setTime(obj.getTime());\n        return copy;\n    }\n    if (obj instanceof Array) {\n        var copy = [];\n        for (var i = 0, len = obj.length; i &lt; len; i++) {\n            copy[i] = cloneSO(obj[i]);\n        }\n        return copy;\n    }\n    if (obj instanceof Object) {\n        var copy = {};\n        for (var attr in obj) {\n            if (obj.hasOwnProperty(attr)) copy[attr] = cloneSO(obj[attr]);\n        }\n        return copy;\n    }\n    throw new Error(\"Unable to copy obj this object.\");\n}\n</code></pre>\n\n<p>3) ES5+, using JSON.parse and JSON.stringify, Not a recommended way, it's quick, but in clean code way, it's not the best solution: </p>\n\n<pre><code>var  deepCopyObj = JSON.parse(JSON.stringify(obj));\n</code></pre>\n\n<p>4) AngularJs: </p>\n\n<pre><code>var  deepCopyObj = angular.copy(obj);\n</code></pre>\n\n<p>5) jQuery: </p>\n\n<pre><code>var deepCopyObj = jQuery.extend(true, {}, obj);\n</code></pre>\n\n<p>6) UnderscoreJs &amp; Loadash: </p>\n\n<pre><code>var deepCopyObj = _.clone(obj); //latest version UndescoreJs makes shallow copy\n</code></pre>\n\n<p>Hope these help... </p>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44870333,
    "parentID": 237104,
    "url": "https://stackoverflow.com/q/44870333",
    "title": null,
    "body": "<p>OK, you can just <strong>optimise your</strong> code to get the result! There are many ways to do this which are cleaner, but I just wanted to get your pattern and apply it to that using <code>JSON.stringify</code>, just simply do something like this:</p>\n\n<pre><code>function contains(a, obj) {\n    for (var i = 0; i &lt; a.length; i++) {\n        if (JSON.stringify(a[i]) === JSON.stringify(obj)) {\n            return true;\n        }\n    }\n    return false;\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 33131028,
    "parentID": 221294,
    "url": "https://stackoverflow.com/q/33131028",
    "title": null,
    "body": "<p>The code <code>Math.floor(new Date().getTime() / 1000)</code> can be shortened to <code>new Date / 1E3 | 0</code>.</p>\n\n<p>Consider to skip direct <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime\" rel=\"noreferrer\"><code>getTime()</code></a> invocation and use <code>| 0</code> as a replacement for <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\" rel=\"noreferrer\"><code>Math.floor()</code></a> function.\nIt's also good to remember <code>1E3</code> is a shorter equivalent for <code>1000</code> (uppercase E is preferred than lowercase to indicate <code>1E3</code> as a constant).</p>\n\n<p>As a result you get the following:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var ts = new Date / 1E3 | 0;\r\n\r\ndocument.write(ts);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5438323,
      "name": "Valentin",
      "reputation": 1019
    }
  },
  {
    "soID": 41909135,
    "parentID": 500431,
    "url": "https://stackoverflow.com/q/41909135",
    "title": null,
    "body": "<p>Every chunk of JavaScript code (global code or functions) has a scope chain associated with it. This scope\nchain is a list or chain of objects that defines the variables that are “in scope” for that\ncode. When JavaScript needs to look up the value of a variable <code>x</code> (a process called\n<strong>variable resolution</strong>), it starts by looking at the first object in the chain. If that object has\na property named <code>x</code> , the value of that property is used. If the first object does not have\na property named <code>x</code> , JavaScript continues the search with the next object in the chain.\nIf the second object does not have a property named <code>x</code> , the search moves on to the next\nobject, and so on. If <code>x</code> is not a property of any of the objects in the scope chain, then\n<code>x</code> is not in scope for that code, and a ReferenceError occurs.\nIn top-level JavaScript code (i.e., code not contained within any function definitions),\nthe scope chain consists of a single object, the global object. In a non-nested function,\nthe scope chain consists of two objects. The first is the object that defines the function’s\nparameters and local variables, and the second is the global object. In a nested function,\nthe scope chain has three or more objects. It is important to understand how this chain\nof objects is created. When a function is <strong>DEFINED</strong>, it stores the scope chain then in effect.\nWhen that function is <strong>INVOKED</strong>, it creates a new object to store its local variables, and\nadds that new object to the stored scope chain to create a new, longer, chain that\nrepresents the scope for that function invocation. This becomes more interesting for\nnested functions because each time the outer function is called, the inner function is\ndefined again. Since the scope chain differs on each invocation of the outer function,\nthe inner function will be subtly different each time it is defined—the code of <strong>the inner\nfunction will be identical on each invocation of the outer function, but the scope chain\nassociated with that code will be different</strong>.\nThis notion of a scope chain is crucial for understanding closures .</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5489277,
      "name": "Fanyo SILIADIN",
      "reputation": 662
    }
  },
  {
    "soID": 42136805,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/42136805",
    "title": null,
    "body": "<p>Take it easy using this lib.</p>\n\n<p><a href=\"https://github.com/rohmanhm/force-boolean\" rel=\"nofollow noreferrer\">https://github.com/rohmanhm/force-boolean</a></p>\n\n<p>you just need to write a single line</p>\n\n<pre><code>const ForceBoolean = require('force-boolean')\n\nconst YOUR_VAR = 'false'\nconsole.log(ForceBoolean(YOUR_VAR)) // it's return boolean false\n</code></pre>\n\n<p>It's also support for following</p>\n\n<pre><code> return false if value is number 0\n return false if value is string '0'\n return false if value is string 'false'\n return false if value is boolean false\n return true if value is number 1\n return true if value is string '1'\n return true if value is string 'true'\n return true if value is boolean true\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 35464842,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/35464842",
    "title": null,
    "body": "<p>If you want to append a single value into an array simply use the push method...\nIt will add a new element at the end of the array.\nBut if you intend to add multiple elements then store the elements in a new array\nand concat the second array with the first array...either way you wish.</p>\n\n<pre><code>arr=['a','b','c'];\narr.push('d');\n//now print the array in console.log and it will contain 'a','b','c','d' as elements.\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 35055176,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/35055176",
    "title": null,
    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$('html').click(function() {\r\n//Hide the menus if visible\r\n});\r\n\r\n$('#menucontainer').click(function(event){\r\n    event.stopPropagation();\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;html&gt;\r\n &lt;button id='#menucontainer'&gt;Ok&lt;/button&gt; \r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 41440996,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/41440996",
    "title": null,
    "body": "<pre><code>1 == \"1\"    =&gt;    true(define)\ntrue === \"true\"    =&gt; false(undefined compare the type of variable)\nCase 1\nif(true === \"true\"){\n  echo 'true'\n}else{\n echo 'false undefined'\n}\nAns :- false undefined because case 1 is check data type also with ===  \nCase 2\nif(1 == \"1\"){\n  echo 'true define'\n}else{\n echo 'false undefined'\n}\nAns :- true define undefined because case 2 is not check data type with ==\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5829276,
      "name": "vikram mohod",
      "reputation": 17
    }
  },
  {
    "soID": 41367463,
    "parentID": 306583,
    "url": "https://stackoverflow.com/q/41367463",
    "title": null,
    "body": "<p>Here's a functional code, you can run it (it's a simple demonstration). </p>\n\n<p>When you click the DIV you get the image from some different methods, in this situation \"this\" s the DIV.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(document).ready(function() {\r\n  // When you click the DIV, you take it with \"this\"\r\n  $('#my_div').click(function() {\r\n    console.info('Initializing the tests..');\r\n    console.log('Method #1: '+$(this).children('img'));\r\n    console.log('Method #2: '+$(this).find('img'));\r\n    // Here, i'm selecting the first ocorrence of &lt;IMG&gt;\r\n    console.log('Method #3: '+$(this).find('img:eq(0)'));\r\n  });\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.the_div{\r\n  background-color: yellow;\r\n  width: 100%;\r\n  height: 200px;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n\r\n&lt;div id=\"my_div\" class=\"the_div\"&gt;\r\n  &lt;img src=\"...\"&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Hope it helps!</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5885146,
      "name": "RPichioli",
      "reputation": 1804
    }
  },
  {
    "soID": 40037182,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/40037182",
    "title": null,
    "body": "<p>Sample: If you use jQuery, you can do easy to an upload file. This is a small and strong jQuery plugin, <a href=\"http://jquery.malsup.com/form/\" rel=\"noreferrer\">http://jquery.malsup.com/form/</a>.</p>\n\n<h3>Example</h3>\n\n<pre><code>var $bar   = $('.ProgressBar');\n$('.Form').ajaxForm({\n  dataType: 'json',\n\n  beforeSend: function(xhr) {\n    var percentVal = '0%';\n    $bar.width(percentVal);\n  },\n\n  uploadProgress: function(event, position, total, percentComplete) {\n    var percentVal = percentComplete + '%';\n    $bar.width(percentVal)\n  },\n\n  success: function(response) {\n    // Response\n  }\n});\n</code></pre>\n\n<p><strong>I hope it would be helpful</strong></p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5906922,
      "name": "MEAbid",
      "reputation": 256
    }
  },
  {
    "soID": 44745396,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/44745396",
    "title": null,
    "body": "<blockquote>\n  <p>Different's Between <code>=</code> , <code>= =</code> , <code>= = =</code></p>\n</blockquote>\n\n<ul>\n<li><code>=</code> operator Used to just assign the <code>value</code>.</li>\n<li><code>= =</code> operator Used to just compares the <code>values</code> not <code>datatype</code></li>\n<li><code>= = =</code> operator Used to Compare the <code>values</code> as well as <code>datatype</code>.</li>\n</ul>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6056671,
      "name": "RïshïKêsh Kümar",
      "reputation": 1
    }
  },
  {
    "soID": 37538880,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/37538880",
    "title": null,
    "body": "<pre><code>// get current URL\n\n$(location).attr('href');\nvar pathname = window.location.pathname;\nalert(window.location);\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6116863,
      "name": "Ayan Chakraborty",
      "reputation": 69
    }
  },
  {
    "soID": 42608899,
    "parentID": 306583,
    "url": "https://stackoverflow.com/q/42608899",
    "title": null,
    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(document).ready(function() {\r\n  // When you click the DIV, you take it with \"this\"\r\n  $('#my_div').click(function() {\r\n    console.info('Initializing the tests..');\r\n    console.log('Method #1: '+$(this).children('img'));\r\n    console.log('Method #2: '+$(this).find('img'));\r\n    // Here, i'm selecting the first ocorrence of &lt;IMG&gt;\r\n    console.log('Method #3: '+$(this).find('img:eq(0)'));\r\n  });\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.the_div{\r\n  background-color: yellow;\r\n  width: 100%;\r\n  height: 200px;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n\r\n&lt;div id=\"my_div\" class=\"the_div\"&gt;\r\n  &lt;img src=\"...\"&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6243681,
      "name": "SUMIT LAHIRI",
      "reputation": 121
    }
  },
  {
    "soID": 40326630,
    "parentID": 122102,
    "url": "https://stackoverflow.com/q/40326630",
    "title": null,
    "body": "<p>This is a solution with recursion:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>obj = {\r\n  a: { b: { c: { d: ['1', '2'] } } },\r\n  e: 'Saeid'\r\n}\r\nconst Clone = function (obj) {\r\n  \r\n  const container = Array.isArray(obj) ? [] : {}\r\n  const keys  = Object.keys(obj)\r\n   \r\n  for (let i = 0; i &lt; keys.length; i++) {\r\n    const key = keys[i]\r\n    if(typeof obj[key] == 'object') {\r\n      container[key] = Clone(obj[key])\r\n    }\r\n    else\r\n      container[key] = obj[key].slice()\r\n  }\r\n  \r\n  return container\r\n}\r\n console.log(Clone(obj))</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44198110,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/44198110",
    "title": null,
    "body": "<p>Hello You Can try this simple an sort</p>\n\n<pre><code>var obj = [];\n\nobj.key1 = {name: \"John\", room: 1234};\nobj.key2 = {name: \"Jim\", room: 1234};\n\ndelete(obj.key1);\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6363660,
      "name": "Dhaval Gohel",
      "reputation": 335
    }
  },
  {
    "soID": 43405204,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/43405204",
    "title": null,
    "body": "<p>The event has a property called event.path of the element which is a <em>\"static ordered list of all its ancestors in tree order\"</em>. To check if an event originated from a specific DOM element or one of its children, just check the path for that specific DOM element. It can also be used to check multiple elements by logically <code>OR</code>ing the element check in the <code>some</code> function.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(\"body\").click(function() {\r\n  target = document.getElementById(\"main\");\r\n  flag = event.path.some(function(el, i, arr) {\r\n    return (el == target)\r\n  })\r\n  if (flag) {\r\n    console.log(\"Inside\")\r\n  } else {\r\n    console.log(\"Outside\")\r\n  }\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>#main {\r\n  display: inline-block;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;div id=\"main\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;Test-Main&lt;/li&gt;\r\n    &lt;li&gt;Test-Main&lt;/li&gt;\r\n    &lt;li&gt;Test-Main&lt;/li&gt;\r\n    &lt;li&gt;Test-Main&lt;/li&gt;\r\n    &lt;li&gt;Test-Main&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;\r\n&lt;div id=\"main2\"&gt;\r\n  Outside Main\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>So for your case It should be </p>\n\n<pre><code>$(\"body\").click(function() {\n  target = $(\"#menuscontainer\")[0];\n  flag = event.path.some(function(el, i, arr) {\n    return (el == target)\n  });\n  if (!flag) {\n    // Hide the menus\n  }\n});\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 38150563,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/38150563",
    "title": null,
    "body": "<p>Javascript is loosely typed just like php is,</p>\n\n<pre><code>var x = \"20\";\nvar y =20;\n\nif (x===y) // false\n</code></pre>\n\n<p>This will always give you a false because even though the values of the variables are the same, the data types are not</p>\n\n<p>One is string the the other is int</p>\n\n<pre><code>If(x==y)//true\n</code></pre>\n\n<p>This however just checks if the content is the same, regardless of the data types...</p>\n\n<p>I dont want to say the values are equal because a string value cannot be equal to an int value logically</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6486347,
      "name": "yanguya995",
      "reputation": 115
    }
  },
  {
    "soID": 38292904,
    "parentID": 406192,
    "url": "https://stackoverflow.com/q/38292904",
    "title": null,
    "body": "<p>var newURL = window.location.protocol + \"//\" + window.location.host + \"/\" + window.location.pathname;</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6507416,
      "name": "Hema Ganapathy",
      "reputation": 79
    }
  },
  {
    "soID": 45155703,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/45155703",
    "title": null,
    "body": "<p>If someone curious here is javascript solution(es6):</p>\n\n<pre><code>window.addEventListener('mouseup', e =&gt; {\n        if (e.target != yourDiv &amp;&amp; e.target.parentNode != yourDiv) {\n            yourDiv.classList.remove('show-menu');\n            //or yourDiv.style.display = 'none';\n        }\n    })\n</code></pre>\n\n<p>and es5, just in case:</p>\n\n<pre><code>window.addEventListener('mouseup', function (e) {\nif (e.target != yourDiv &amp;&amp; e.target.parentNode != yourDiv) {\n    yourDiv.classList.remove('show-menu'); \n    //or yourDiv.style.display = 'none';\n}\n</code></pre>\n\n<p>});</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 38450087,
    "parentID": 166221,
    "url": "https://stackoverflow.com/q/38450087",
    "title": null,
    "body": "<p>You can see a solved solution with a working demo <a href=\"http://whats-online.info/science-and-tutorials/30/select-preview-rename-and-upload-image-using-jquery-Ajax/\" rel=\"nofollow noreferrer\"><strong>here</strong></a> that allows you to preview and submit form files to the server. For your case, you need to use <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\" rel=\"nofollow noreferrer\">Ajax</a> to facilitate the file upload to the server:</p>\n\n<pre><code>&lt;from action=\"\" id=\"formContent\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n    &lt;span&gt;File&lt;/span&gt;\n    &lt;input type=\"file\" id=\"file\" name=\"file\" size=\"10\"/&gt;\n    &lt;input id=\"uploadbutton\" type=\"button\" value=\"Upload\"/&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>The data being submitted is a formdata. On your jQuery, use a form submit function instead of a button click to submit the form file as shown below.</p>\n\n<pre><code>$(document).ready(function () {\n   $(\"#formContent\").submit(function(e){\n\n     e.preventDefault();\n     var formdata = new FormData(this);\n\n $.ajax({\n     url: \"ajax_upload_image.php\",\n     type: \"POST\",\n     data: formdata,\n     mimeTypes:\"multipart/form-data\",\n     contentType: false,\n     cache: false,\n     processData: false,\n     success: function(){\n\n     alert(\"successfully submitted\");\n\n     });\n   });\n});\n</code></pre>\n\n<p><a href=\"http://whats-online.info/science-and-tutorials/30/select-preview-rename-and-upload-image-using-jquery-Ajax/\" rel=\"nofollow noreferrer\">View more details</a></p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6579192,
      "name": "Daniel Nyamasyo",
      "reputation": 460
    }
  },
  {
    "soID": 39692616,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/39692616",
    "title": null,
    "body": "<pre><code>delete someObject[\"keyName\"];\nsomeObject[\"keyName\"] // undefined\n</code></pre>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6632793,
      "name": "C. Morgan",
      "reputation": 49
    }
  },
  {
    "soID": 41508677,
    "parentID": 263965,
    "url": "https://stackoverflow.com/q/41508677",
    "title": null,
    "body": "<p>I use this simple approach (using \"myVarToTest\"):</p>\n\n<pre><code>var trueValuesRange = ['1', 1, 'true', true];\n\nmyVarToTest = (trueValuesRange.indexOf(myVarToTest) &gt;= 0);\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43030580,
    "parentID": 208105,
    "url": "https://stackoverflow.com/q/43030580",
    "title": null,
    "body": "<p>Another solution, using <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" rel=\"nofollow noreferrer\"><code>Array#reduce</code></a></strong>.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var myObject = {\r\n  \"ircEvent\": \"PRIVMSG\",\r\n  \"method\": \"newURI\",\r\n  \"regex\": \"^http://.*\"\r\n};\r\n\r\nmyObject = Object.keys(myObject).reduce(function(obj, key) {\r\n  if (key != \"regex\") {           //key you want to remove\r\n    obj[key] = myObject[key];\r\n  }\r\n  return obj;\r\n}, {});\r\n\r\nconsole.log(myObject);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6695924,
      "name": "Kind user",
      "reputation": 15941
    }
  },
  {
    "soID": 38940765,
    "parentID": 336859,
    "url": "https://stackoverflow.com/q/38940765",
    "title": null,
    "body": "<p>In JavaScript there are two ways to create functions:</p>\n\n<ol>\n<li><p>Function declaration:</p>\n\n<pre><code>function fn(){\n  console.log(\"Hello\");\n}\nfn();\n</code></pre>\n\n<p>This is very basic, self-explanatory, used in many languages and standard across C family of languages. We declared a function defined it and executed it by calling it.</p>\n\n<p>What you should be knowing is that functions are actually objects in JavaScript; internally we have created an object for above function and given it a name called fn or the reference to the object is stored in fn. Functions are objects in JavaScript; an instance of function is actually an object instance.</p></li>\n<li><p>Function expression:</p>\n\n<pre><code>var fn=function(){\n  console.log(\"Hello\");\n}\nfn();\n</code></pre>\n\n<p>JavaScript has first-class functions, that is, create a function and assign it to a variable just like you create a string or number and assign it to a variable. Here, the fn variable is assigned to a function. The reason for this concept is functions are objects in JavaScript; fn is pointing to the object instance of the above function. We have initialized a function and assigned it to a variable. It's not executing the function and assigning the result.</p></li>\n</ol>\n\n<p>Reference: <em><a href=\"http://jkoder.com/javascript-function-declaration-syntax-var-fn-function-vs-function-fn/\" rel=\"nofollow noreferrer\">JavaScript function declaration syntax: var fn = function() {} vs function fn() {}</a></em></p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6698976,
      "name": "Anoop Rai",
      "reputation": 129
    }
  },
  {
    "soID": 45353059,
    "parentID": 152975,
    "url": "https://stackoverflow.com/q/45353059",
    "title": null,
    "body": "<p>Here is what I do to solve to problem.</p>\n\n<pre><code>$(window).click(function (event) {\n    //To improve performance add a checklike \n    //if(myElement.isClosed) return;\n    var isClickedElementChildOfMyBox = isChildOfElement(event,'#id-of-my-element');\n\n    if (isClickedElementChildOfMyBox)\n        return;\n\n    //your code to hide the element \n});\n\nvar isChildOfElement = function (event, selector) {\n    if (event.originalEvent.path) {\n        return event.originalEvent.path[0].closest(selector) !== null;\n    }\n\n    return event.originalEvent.originalTarget.closest(selector) !== null;\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43587762,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/43587762",
    "title": null,
    "body": "<p>First, some terminology about Javascript string equals: Double equals is officially known as the abstract equality comparison operator while triple equals is termed the strict equality comparison operator. The difference between them can be summed up as follows: Abstract equality will attempt to resolve the data types via type coercion before making a comparison. Strict equality will return false if the types are different. Consider the following example:</p>\n\n<pre><code>console.log(3 == \"3\"); // true\nconsole.log(3 === \"3\"); // false.\nconsole.log(3 == \"3\"); // true\nconsole.log(3 === \"3\"); // false.\n</code></pre>\n\n<p>Using two equal signs returns true because the string “3” is converted to the number 3 before the comparison is made. Three equal signs sees that the types are different and returns false. Here’s another:</p>\n\n<pre><code>console.log(true == '1'); // true\nconsole.log(true === '1'); // false\nconsole.log(true == '1'); // true\nconsole.log(true === '1'); // false\n</code></pre>\n\n<p>Again, the abstract equality comparison performs a type conversion. In this case both the boolean true and the string ‘1’ are converted to the number 1 and the result is true. Strict equality returns false.</p>\n\n<p>If you understand that you are well on your way to distinguishing between == and ===. However, there’s some scenarios where the behavior of these operators is non intuitive. Let’s take a look at some more examples:</p>\n\n<pre><code>console.log(undefined == null); // true\nconsole.log(undefined === null); // false. Undefined and null are distinct types and are not interchangeable.\nconsole.log(undefined == null); // true     \nconsole.log(undefined === null); // false. Undefined and null are distinct types and are not interchangeable.\n\nconsole.log(true == 'true'); // false. A string will not be converted to a boolean and vice versa.\nconsole.log(true === 'true'); // false\nconsole.log(true == 'true'); // false. A string will not be converted to a boolean and vice versa.\nconsole.log(true === 'true'); // false\n</code></pre>\n\n<p>The example below is interesting because it illustrates that string literals are different from string objects.</p>\n\n<pre><code>console.log(\"This is a string.\" == new String(\"This is a string.\")); // true\nconsole.log(\"This is a string.\" === new String(\"This is a string.\")); // false\nconsole.log(\"This is a string.\" == new String(\"This is a string.\")); // true\nconsole.log(\"This is a string.\" === new String(\"This is a string.\")); // false\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 7104527,
      "name": "Akintunde",
      "reputation": 1157
    }
  },
  {
    "soID": 45433694,
    "parentID": 359494,
    "url": "https://stackoverflow.com/q/45433694",
    "title": null,
    "body": "<p>The reason it suggest to replace <code>==</code> with <code>===</code> is that the <code>===</code> operator is more reliable than <code>==</code>. In our context reliable means <code>===</code> also goes for type checking. Considering the best programming practices we should always choose more reliable feature over less reliable one. Again whenever we think about exactly equal to operator most of the time, we are by default consider the type should be same. As <code>===</code> provides the same, we should go for it.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 7338983,
      "name": "Narendra Kalekar",
      "reputation": 11
    }
  },
  {
    "soID": 42896214,
    "parentID": 178325,
    "url": "https://stackoverflow.com/q/42896214",
    "title": null,
    "body": "<p>There are too many methods to check for hidden elements. This is the best choice (I just recommended you):</p>\n\n<blockquote>\n  <p>Using jQuery, make an element, \"display:none\", in CSS for hidden.</p>\n</blockquote>\n\n<p>The point is:</p>\n\n<pre><code>$('element:visible')\n</code></pre>\n\n<p>And an example for use:</p>\n\n<pre><code>$('element:visible').show();\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 7730180,
      "name": "Abdul Aziz Al Basyir",
      "reputation": 208
    }
  },
  {
    "soID": 44520247,
    "parentID": 351409,
    "url": "https://stackoverflow.com/q/44520247",
    "title": null,
    "body": "<p>You .push() that value in. \n<strong>Example:</strong> array.push(value);</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 25836438,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/25836438",
    "title": null,
    "body": "<p>If using a library is an option for you then you will get the benefits of the testing and community support that goes with a library function. For example, the <a href=\"http://stringjs.com/\" rel=\"nofollow\">string.js</a> library has a replaceAll() function that does what you're looking for:</p>\n\n<pre><code>// Include a reference to the string.js library and call it (for example) S.\nstr = S(str).replaceAll('abc', '').s;\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1463,
      "name": "Guy",
      "reputation": 26777
    }
  },
  {
    "soID": 7156082,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/7156082",
    "title": null,
    "body": "<p>There is a great library that wraps many solutions so it even supports older browsers called <a href=\"http://www.jstorage.info/\">jStorage</a></p>\n\n<p>You can set an object</p>\n\n<pre><code>$.jStorage.set(key, value)\n</code></pre>\n\n<p>And retrieve it easily</p>\n\n<pre><code>value = $.jStorage.get(key)\nvalue = $.jStorage.get(key, \"default value\")\n</code></pre>\n",
    "score": 47,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1675,
      "name": "JProgrammer",
      "reputation": 2092
    }
  },
  {
    "soID": 4673436,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/4673436",
    "title": null,
    "body": "<p>Building on the previously suggested solutions:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>// First, checks if it isn't implemented yet.\nif (!String.prototype.format) {\n  String.prototype.format = function() {\n    var args = arguments;\n    return this.replace(/{(\\d+)}/g, function(match, number) { \n      return typeof args[number] != 'undefined'\n        ? args[number]\n        : match\n      ;\n    });\n  };\n}\n</code></pre>\n\n<p><code>\"{0} is dead, but {1} is alive! {0} {2}\".format(\"ASP\", \"ASP.NET\")</code></p>\n\n<p>outputs</p>\n\n<blockquote>\n  <p>ASP is dead, but ASP.NET is alive! ASP {2}</p>\n</blockquote>\n\n<hr>\n\n<p>If you prefer not to modify <code>String</code>'s prototype:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>if (!String.format) {\n  String.format = function(format) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    return format.replace(/{(\\d+)}/g, function(match, number) { \n      return typeof args[number] != 'undefined'\n        ? args[number] \n        : match\n      ;\n    });\n  };\n}\n</code></pre>\n\n<p>Gives you the much more familiar:</p>\n\n<p><code>String.format('{0} is dead, but {1} is alive! {0} {2}', 'ASP', 'ASP.NET');</code></p>\n\n<p>with the same result:</p>\n\n<blockquote>\n  <p>ASP is dead, but ASP.NET is alive! ASP {2}</p>\n</blockquote>\n",
    "score": 1176,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2733,
      "name": "fearphage",
      "reputation": 13356
    }
  },
  {
    "soID": 6983833,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/6983833",
    "title": null,
    "body": "<p>When I posted this question the version of JQuery that I was using didn't include an <code>isArray</code> function. If it had have I would have probably just used it trusting that implementation to be the best browser independant way to perform this particular type check.</p>\n\n<p>Since JQuery now does offer this function, I would always use it...</p>\n\n<pre><code>$.isArray(obj);\n</code></pre>\n\n<p>(as of version 1.6.2) It is still implemented using comparisons on strings in the form </p>\n\n<pre><code>toString.call(obj) === \"[object Array]\"\n</code></pre>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3362,
      "name": "Andy McCluggage",
      "reputation": 16566
    }
  },
  {
    "soID": 3390453,
    "parentID": 3390396,
    "url": "https://stackoverflow.com/q/3390453",
    "title": null,
    "body": "<p>I use it as a function parameter and exclude it on function execution that way I get the \"real\" undefined. Although it does require you to put your code inside a function. I found this while reading the jQuery source.</p>\n\n<pre><code>undefined = 2;\n\n(function (undefined) {\n   console.log(undefined); // prints out undefined\n   // and for comparison:\n   if (undeclaredvar === undefined) console.log(\"it works!\")\n})()\n</code></pre>\n\n<p>Of course you could just use <code>typeof</code> though. But all my code is usually inside a containing function anyways, so using this method probably saves me a few bytes here and there.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3659,
      "name": "Cristian Sanchez",
      "reputation": 17785
    }
  },
  {
    "soID": 6458172,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/6458172",
    "title": null,
    "body": "<p>Using jQuery > 1.6 </p>\n\n<pre><code>&lt;input type=\"checkbox\" value=\"1\" name=\"checkMeOut\" id=\"checkMeOut\" checked=\"checked\" /&gt;\n\n// traditional attr\n$('#checkMeOut').attr('checked'); // \"checked\"\n// new property method\n$('#checkMeOut').prop('checked'); // true\n</code></pre>\n\n<p>Using the new property method:</p>\n\n<pre><code>if($('#checkMeOut').prop('checked')) {\n    // something when checked\n} else {\n    // something else when not\n}\n</code></pre>\n",
    "score": 398,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3010848,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/3010848",
    "title": null,
    "body": "<p>Use a sequential <code>for</code> loop:</p>\n\n<pre><code>var myStringArray = [\"Hello\",\"World\"];\nvar arrayLength = myStringArray.length;\nfor (var i = 0; i &lt; arrayLength; i++) {\n    alert(myStringArray[i]);\n    //Do something\n}\n</code></pre>\n\n<p>@zipcodeman suggests the use of the <code>for...in</code> statement, but for iterating arrays <code>for-in</code> should be avoided, that statement is meant to <strong>enumerate</strong> object properties.</p>\n\n<p>It shouldn't be used for array-like objects because:</p>\n\n<ul>\n<li>The order of iteration is not guaranteed, the array indexes may not be visited in numeric order.</li>\n<li>Inherited properties are also enumerated.</li>\n</ul>\n\n<p>The second point is that it can give you a lot of problems, for example, if you extend the <code>Array.prototype</code> object to include a method there, that property will be also enumerated.</p>\n\n<p>For example:</p>\n\n<pre><code>Array.prototype.foo = \"foo!\";\nvar array = ['a', 'b', 'c'];\n\nfor (var i in array) {\n  alert(array[i]);\n}\n</code></pre>\n\n<p>The above code will alert, \"a\", \"b\", \"c\" and \"foo!\".</p>\n\n<p>That be particularly a problem if you use some library that relies heavily on native prototypes augmention (such as MooTools for example).</p>\n\n<p>The <code>for-in</code> statement as I said before is there to <em>enumerate</em> object properties, for example:</p>\n\n<pre><code>var obj = {\n  \"a\": 1,\n  \"b\": 2,\n  \"c\": 3\n};\n\nfor (var prop in obj) {\n  if (obj.hasOwnProperty(prop)) { \n  // or if (Object.prototype.hasOwnProperty.call(obj,prop)) for safety...\n    alert(\"prop: \" + prop + \" value: \" + obj[prop])\n  }\n}\n</code></pre>\n\n<p>In the above example the <code>hasOwnProperty</code> method allows you to enumerate only <em>own properties</em>, that's it, only the properties that the object physically has, no inherited properties.</p>\n\n<p>I would recommend you to read the following article:</p>\n\n<ul>\n<li><a href=\"http://web.archive.org/web/20101213150231/http://dhtmlkitchen.com/?category=/JavaScript/&amp;date=2007/10/21/&amp;entry=Iteration-Enumeration-Primitives-and-Objects\" rel=\"noreferrer\">Enumeration VS Iteration</a></li>\n</ul>\n",
    "score": 2649,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5445,
      "name": "CMS",
      "reputation": 505315
    }
  },
  {
    "soID": 4261096,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/4261096",
    "title": null,
    "body": "<p>The <code>for-in</code> statement by itself is not a \"bad practice\", however it can be <em>mis-used</em>, for example, to <em>iterate</em> over arrays or array-like objects.</p>\n\n<p>The purpose of the <code>for-in</code> statement is to <em>enumerate</em> over object properties. This statement will go up in the prototype chain, also enumerating over <em>inherited</em> properties, a thing that <em>sometimes</em> is not desired.</p>\n\n<p>Also, the order of iteration is not guaranteed by the spec., meaning that if you want to \"iterate\" an array object, with this statement you cannot be sure that the properties (array indexes) will be visited in the numeric order.</p>\n\n<p>For example, in JScript (IE &lt;= 8), the order of enumeration even on Array objects is defined as the properties were created:</p>\n\n<pre><code>var array = [];\narray[2] = 'c';\narray[1] = 'b';\narray[0] = 'a';\n\nfor (var p in array) {\n  //... p will be \"2\", \"1\" and \"0\" on IE\n}\n</code></pre>\n\n<p>Also, speaking about inherited properties, if you, for example, extend the <code>Array.prototype</code> object (like some libraries as MooTools do), that properties will be also enumerated:</p>\n\n<pre><code>Array.prototype.last = function () { return this[this.length-1]; };\n\nfor (var p in []) { // an empty array\n  // last will be enumerated\n}\n</code></pre>\n\n<p>As I said before to <em>iterate</em> over arrays or array-like objects, the best thing is to use a <em>sequential loop</em>, such as a plain-old <code>for</code>/<code>while</code> loop.</p>\n\n<p>When you want to enumerate only the <em>own properties</em> of an object (the ones that aren't inherited), you can use the <code>hasOwnProperty</code> method:</p>\n\n<pre><code>for (var prop in obj) {\n  if (obj.hasOwnProperty(prop)) {\n    // prop is not inherited\n  }\n}\n</code></pre>\n\n<p>And some people even recommend calling the method directly from <code>Object.prototype</code> to avoid having problems if somebody adds a property named <code>hasOwnProperty</code> to our object:</p>\n\n<pre><code>for (var prop in obj) {\n  if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n    // prop is not inherited\n  }\n}\n</code></pre>\n",
    "score": 325,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5445,
      "name": "CMS",
      "reputation": 505315
    }
  },
  {
    "soID": 6762288,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/6762288",
    "title": null,
    "body": "<p>There is also <code>Globalize.format</code> in the <a href=\"https://github.com/jquery/globalize\" rel=\"nofollow\">jQuery Globalize</a> project, the official globalization service for jQuery UI. IT's nice when you need culture-aware formatting. </p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 5956771,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/5956771",
    "title": null,
    "body": "<p>Here's an example that includes <strong>initialising</strong> the show/hide to match the state of the checkbox when the <strong>page loads</strong>; taking account of the fact that firefox <em>remembers the state of checkboxes</em> when you refresh the page, but <em>won't</em> remember the state of the shown/hidden elements.</p>\n\n<pre><code>$(function() {\n    // initialise visibility when page is loaded\n    $('tr.invoiceItemRow').toggle($('#showInvoiceItems').attr('checked'));\n    // attach click handler to checkbox\n    $('#showInvoiceItems').click(function(){ $('tr.invoiceItemRow').toggle(this.checked);})\n});\n</code></pre>\n\n<p>(with help from other answers on this question)</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 37865455,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/37865455",
    "title": null,
    "body": "<p>Another option would be to use an existing plugin.</p>\n\n<p>For example <a href=\"https://github.com/mar10/persisto\" rel=\"nofollow noreferrer\">persisto</a> is an open source project that provides an easy interface to localStorage/sessionStorage and automates persistence for form fields (input, radio buttons, and checkboxes).</p>\n\n<p><a href=\"https://i.stack.imgur.com/cU5V0.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/cU5V0.png\" alt=\"persisto features\"></a></p>\n\n<p>(Disclaimer: I am the author.)</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 19166,
      "name": "mar10",
      "reputation": 6872
    }
  },
  {
    "soID": 4795914,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/4795914",
    "title": null,
    "body": "<p>Here's a <em>minimal</em> implementation of sprintf in JavaScript: it only does \"%s\" and \"%d\", but I have left space for it to be extended. It is useless to the OP, but other people who stumble across this thread coming from Google might benefit from it.</p>\n\n<pre><code>function sprintf() {\n    var args = arguments,\n    string = args[0],\n    i = 1;\n    return string.replace(/%((%)|s|d)/g, function (m) {\n        // m is the matched format, e.g. %s, %d\n        var val = null;\n        if (m[2]) {\n            val = m[2];\n        } else {\n            val = args[i];\n            // A switch statement so that the formatter can be extended. Default is %s\n            switch (m) {\n                case '%d':\n                    val = parseFloat(val);\n                    if (isNaN(val)) {\n                        val = 0;\n                    }\n                    break;\n            }\n            i++;\n        }\n        return val;\n    });\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>alert(sprintf('Latitude: %s, Longitude: %s, Count: %d', 41.847, -87.661, 'two'));\n// Expected output: Latitude: 41.847, Longitude: -87.661, Count: 0\n</code></pre>\n\n<p>In contrast with similar solutions in previous replies, this one does all substitutions <em>in one go</em>, so it will not replace parts of previously replaced values.</p>\n",
    "score": 44,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 14822579,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/14822579",
    "title": null,
    "body": "<p>Here's a string prototype function based on the accepted answer:</p>\n\n<pre><code>String.prototype.replaceAll = function (find, replace) {\n    var str = this;\n    return str.replace(new RegExp(find, 'g'), replace);\n};\n</code></pre>\n\n<p><strong>EDIT</strong> </p>\n\n<p>If your <code>find</code> will contain special characters then you need to escape them:</p>\n\n<pre><code>String.prototype.replaceAll = function (find, replace) {\n    var str = this;\n    return str.replace(new RegExp(find.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&amp;'), 'g'), replace);\n};\n</code></pre>\n\n<p>Fiddle: <a href=\"http://jsfiddle.net/cdbzL/\">http://jsfiddle.net/cdbzL/</a></p>\n",
    "score": 83,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 20092,
      "name": "jesal",
      "reputation": 4389
    }
  },
  {
    "soID": 5158301,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/5158301",
    "title": null,
    "body": "<p>Improved version of <a href=\"https://stackoverflow.com/questions/901115/get-querystring-values-with-jquery/901144#901144\">Artem Barger's answer</a>:</p>\n\n<pre><code>function getParameterByName(name) {\n    var match = RegExp('[?&amp;]' + name + '=([^&amp;]*)').exec(window.location.search);\n    return match &amp;&amp; decodeURIComponent(match[1].replace(/\\+/g, ' '));\n}\n</code></pre>\n\n<p>For more information on improvement see: <a href=\"http://james.padolsey.com/javascript/bujs-1-getparameterbyname/\" rel=\"noreferrer\">http://james.padolsey.com/javascript/bujs-1-getparameterbyname/</a></p>\n",
    "score": 603,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4339463,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/4339463",
    "title": null,
    "body": "<p>Double boolean negation. Often used to check if value is not undefined.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 23815,
      "name": "Sergey Ilinsky",
      "reputation": 23378
    }
  },
  {
    "soID": 2067584,
    "parentID": 2067472,
    "url": "https://stackoverflow.com/q/2067584",
    "title": null,
    "body": "<p>It's actually not too complicated...</p>\n\n<p>Say you're on domain example.com, and you want to make a request to domain example.net. To do so, you need to cross domain boundaries, a no-no in most of browserland. </p>\n\n<p>The one item that bypasses this limitation is &lt;script&gt; tags. When you use a script tag, the domain limitation is ignored, but under normal circumstances, you can't really <strong>do</strong> anything with the results, the script just gets evaluated.</p>\n\n<p>Enter JSONP. When you make your request to a server that is JSONP enabled, you pass a special parameter that tells the server a little bit about your page. That way, the server is able to nicely wrap up its response in a way that your page can handle. </p>\n\n<p>For example, say the server expects a parameter called \"callback\" to enable its JSONP capabilities. Then your request would look like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>http://www.example.net/sample.aspx?callback=mycallback\n</code></pre>\n\n<p>Without JSONP, this might return some basic JavaScript object, like so:</p>\n\n<pre><code>{ foo: 'bar' }\n</code></pre>\n\n<p>However, with JSONP, when the server receives the \"callback\" parameter, it wraps up the result a little differently, returning something like this:</p>\n\n<pre><code>mycallback({ foo: 'bar' });\n</code></pre>\n\n<p>As you can see, it will now invoke the method you specified. So, in your page, you define the callback function:</p>\n\n<pre><code>mycallback = function(data){\n  alert(data.foo);\n};\n</code></pre>\n\n<p>And now, when the script is loaded, it'll be evaluated, and your function will be executed. Voila, cross-domain requests!</p>\n\n<p>It's also worth noting the one major issue with JSONP: you lose a lot of control of the request. For example, there is no \"nice\" way to get proper failure codes back. As a result, you end up using timers to monitor the request, etc, which is always a bit suspect. The proposition for <a href=\"http://www.json.org/JSONRequest.html\" rel=\"noreferrer\">JSONRequest</a> is a great solution to allowing cross domain scripting, maintaining security, and allowing proper control of the request.</p>\n\n<p>These days (2015), <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" rel=\"noreferrer\">CORS</a> is the recommended approach vs. JSONRequest. JSONP is still useful for older browser support, but given the security implications, unless you have no choice CORS is the better choice.</p>\n",
    "score": 1669,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 25330,
      "name": "jvenema",
      "reputation": 33120
    }
  },
  {
    "soID": 14193950,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/14193950",
    "title": null,
    "body": "<p><strong>Update for 2015</strong>: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\"><code>string.includes</code> has been added to JavaScript's next version, ES6</a>:</p>\n\n<pre><code>\"potato\".includes(\"to\");\n&gt; true\n</code></pre>\n\n<p>Note you may need to load <code>es6-shim</code> or similar to get this working on older browsers.</p>\n\n<pre><code>require('es6-shim')\n</code></pre>\n",
    "score": 254,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 26112,
      "name": "eliocs",
      "reputation": 9758
    }
  },
  {
    "soID": 35092754,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/35092754",
    "title": null,
    "body": "<p>In ES6/ES2015 or later you can do this way:</p>\n\n<pre><code>objs.sort((a, b) =&gt; a.last_nom.localeCompare(b.last_nom));\n</code></pre>\n",
    "score": 62,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 30038,
      "name": "Vlad Bezden",
      "reputation": 15548
    }
  },
  {
    "soID": 5571069,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/5571069",
    "title": null,
    "body": "<p>You <em>can</em> have multiline strings in pure JavaScript.</p>\n\n<p>This method is based on the serialization of functions, which is <a href=\"http://es5.github.io/#x15.3.4.2\" rel=\"noreferrer\">defined to be implementation-dependent</a>. It does work in the most browsers (see below), but there's no guarantee that it will still work in the future, so do not rely on it.</p>\n\n<p>Using the following function:</p>\n\n<pre><code>function hereDoc(f) {\n  return f.toString().\n      replace(/^[^\\/]+\\/\\*!?/, '').\n      replace(/\\*\\/[^\\/]+$/, '');\n}\n</code></pre>\n\n<p>You can have here-documents like this:</p>\n\n<pre><code>var tennysonQuote = hereDoc(function() {/*!\n  Theirs not to make reply,\n  Theirs not to reason why,\n  Theirs but to do and die\n*/});\n</code></pre>\n\n<p>The method has successfully been tested in the following browsers (not mentioned = not tested):</p>\n\n<ul>\n<li>IE 4 - 10</li>\n<li>Opera 9.50 - 12 (not in 9-)</li>\n<li>Safari 4 - 6 (not in 3-)</li>\n<li>Chrome 1 - 45</li>\n<li>Firefox 17 - 21 (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString#Notes\" rel=\"noreferrer\">not in 16-</a>)</li>\n<li>Rekonq 0.7.0 - 0.8.0</li>\n<li><em>Not supported in Konqueror 4.7.4</em></li>\n</ul>\n\n<p>Be careful with your minifier, though. It tends to remove comments. For the <a href=\"http://www.julienlecomte.net/yuicompressor/README\" rel=\"noreferrer\">YUI compressor</a>, a comment starting with <code>/*!</code> (like the one I used) will be preserved. </p>\n\n<p>I think a <em>real</em> solution would be to use <a href=\"http://coffeescript.org/#strings\" rel=\"noreferrer\">CoffeeScript</a>.</p>\n",
    "score": 318,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 31158,
      "name": "Jordão",
      "reputation": 41454
    }
  },
  {
    "soID": 2647930,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/2647930",
    "title": null,
    "body": "<p>jQuery <code>attr()</code> function returns either a blank string or the actual value (and never <code>null</code> or <code>undefined</code>). The only time it returns <code>undefined</code> is when your selector didn't return any element.</p>\n\n<p>So you may want to test against a blank string. Alternatively, since blank strings, null and undefined are false-y, you can just do this:</p>\n\n<pre><code>if (!EmpName) { //do something }\n</code></pre>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 31284,
      "name": "Chetan Sastry",
      "reputation": 19132
    }
  },
  {
    "soID": 33980745,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/33980745",
    "title": null,
    "body": "<p>If you're already (or considering) using <code>lodash</code>, the solution is easy:</p>\n\n<pre><code>_.upperFirst('fred');\n// =&gt; 'Fred'\n\n_.upperFirst('FRED');\n// =&gt; 'FRED'\n\n_.capitalize('fred') //=&gt; 'Fred'\n</code></pre>\n\n<p>See their docs: <a href=\"https://lodash.com/docs#capitalize\">https://lodash.com/docs#capitalize</a></p>\n\n<p><code>_.camelCase('Foo Bar'); //=&gt; 'fooBar'</code></p>\n\n<p><a href=\"https://lodash.com/docs/4.15.0#camelCase\">https://lodash.com/docs/4.15.0#camelCase</a></p>\n\n<pre><code>_.lowerFirst('Fred');\n// =&gt; 'fred'\n\n_.lowerFirst('FRED');\n// =&gt; 'fRED'\n\n_.snakeCase('Foo Bar');\n// =&gt; 'foo_bar'\n</code></pre>\n\n<p>Vanilla js for first upper case:</p>\n\n<pre><code>function upperCaseFirst(str){\n    return str.charAt(0).toUpperCase() + str.substring(1);\n}\n</code></pre>\n",
    "score": 31,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 33522,
      "name": "chovy",
      "reputation": 25563
    }
  },
  {
    "soID": 3010854,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/3010854",
    "title": null,
    "body": "<p>You can use <code>map</code> (also known as <code>apply</code> in other languages like <a href=\"http://en.wikipedia.org/wiki/Python_%28programming_language%29\" rel=\"noreferrer\">Python</a>, and probably <a href=\"http://en.wikipedia.org/wiki/Haskell_%28programming_language%29\" rel=\"noreferrer\">Haskell</a> too)</p>\n\n<pre><code>[1,2,3,4].map( function(item) {\n     alert(item);\n})\n</code></pre>\n\n<p>The general syntax is:</p>\n\n<pre><code>array.map(func)\n</code></pre>\n\n<p><code>func</code> should take one parameter.</p>\n\n<p>The return value of <code>array.map</code> is another array, so you can use it like this:</p>\n\n<pre><code>var x = [1,2,3,4].map( function(item) { return item * 10; } );\n</code></pre>\n\n<p>And now x is <code>[10,20,30,40]</code>.</p>\n\n<p>I must clarify: This concept is from the functional paradigm.</p>\n\n<p>You don't have to write the function inline; one might do so as a first sketch, but you could then extract it into its own function.</p>\n\n<pre><code>var item_processor = function(item) {\n      // do something complicated to an item\n}\n\nnew_list = my_list.map(item_processor);\n</code></pre>\n\n<p>which would be sort-of equivalent to:</p>\n\n<pre><code> for(item in my_list) { item_processor(item); }\n</code></pre>\n\n<p>except you don't get the <code>new_list</code>.</p>\n",
    "score": 317,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 35364,
      "name": "hasen",
      "reputation": 68381
    }
  },
  {
    "soID": 14810325,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/14810325",
    "title": null,
    "body": "<p>From <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLUtils/search#Get_the_value_of_a_single_search_param\">the MDN</a>:</p>\n\n<pre><code>function loadPageVar (sVar) {\n  return unescape(window.location.search.replace(new RegExp(\"^(?:.*[&amp;\\\\?]\" + escape(sVar).replace(/[\\.\\+\\*]/g, \"\\\\$&amp;\") + \"(?:\\\\=([^&amp;]*))?)?.*$\", \"i\"), \"$1\"));\n}\n\nalert(loadPageVar(\"name\"));\n</code></pre>\n",
    "score": 40,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8933531,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/8933531",
    "title": null,
    "body": "<p>I have created a function that will allow you to use similar verbiage to C#/Java to include a JavaScript file. I've tested it a little bit even from inside of <em>another</em> JavaScript file and it seems to work. It does require jQuery though for a bit of \"magic\" at the end.</p>\n\n<p>I put this code in a file at the root of my script directory (I named it <code>global.js</code>, but you can use whatever you want. Unless I'm mistaken this and jQuery should be the only required scripts on a given page. Keep in mind this is largely untested beyond some basic usage, so there may or may not be any issues with the way I've done it; use at your own risk yadda yadda I am not responsible if you screw anything up yadda yadda:</p>\n\n<pre><code>/**\n* @fileoverview This file stores global functions that are required by other libraries.\n*/\n\nif (typeof(jQuery) === 'undefined') {\n    throw 'jQuery is required.';\n}\n\n/** Defines the base script directory that all .js files are assumed to be organized under. */\nvar BASE_DIR = 'js/';\n\n/**\n* Loads the specified file, outputting it to the &lt;head&gt; HTMLElement.\n*\n* This method mimics the use of using in C# or import in Java, allowing\n* JavaScript files to \"load\" other JavaScript files that they depend on\n* using a familiar syntax.\n*\n* This method assumes all scripts are under a directory at the root and will\n* append the .js file extension automatically.\n*\n* @param {string} file A file path to load using C#/Java \"dot\" syntax.\n*\n* Example Usage:\n* imports('core.utils.extensions');\n* This will output: &lt;script type=\"text/javascript\" src=\"/js/core/utils/extensions.js\"&gt;&lt;/script&gt;\n*/\nfunction imports(file) {\n    var fileName = file.substr(file.lastIndexOf('.') + 1, file.length);\n\n    // Convert PascalCase name to underscore_separated_name\n    var regex = new RegExp(/([A-Z])/g);\n    if (regex.test(fileName)) {\n        var separated = fileName.replace(regex, \",$1\").replace(',', '');\n        fileName = separated.replace(/[,]/g, '_');\n    }\n\n    // Remove the original JavaScript file name to replace with underscore version\n    file = file.substr(0, file.lastIndexOf('.'));\n\n    // Convert the dot syntax to directory syntax to actually load the file\n    if (file.indexOf('.') &gt; 0) {\n        file = file.replace(/[.]/g, '/');\n    }\n\n    var src = BASE_DIR + file + '/' + fileName.toLowerCase() + '.js';\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = src;\n\n    $('head').find('script:last').append(script);\n}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 40667,
      "name": "Wayne Molina",
      "reputation": 8283
    }
  },
  {
    "soID": 5313892,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/5313892",
    "title": null,
    "body": "<p>Just another recommendation. The plugin <em><a href=\"https://github.com/allmarkedup/jQuery-URL-Parser\">Purl</a></em> allows to retrieve all parts of URL, including anchor, host, etc.</p>\n\n<p>It can be used with or without jQuery.</p>\n\n<p>Usage is very simple and cool:</p>\n\n<pre><code>var url = $.url('http://allmarkedup.com/folder/dir/index.html?item=value'); // jQuery version\nvar url = purl('http://allmarkedup.com/folder/dir/index.html?item=value'); // plain JS version\nurl.attr('protocol'); // returns 'http'\nurl.attr('path'); // returns '/folder/dir/index.html'\n</code></pre>\n\n<p>However, as of Nov 11, 2014, Purl is no longer maintained and the author recommends using <a href=\"https://github.com/medialize/URI.js\">URI.js</a> instead.  The jQuery plugin is different in that it focuses on elements - for usage with strings, just use <code>URI</code> directly, with or without jQuery.  Similar code would look as such, fuller docs <a href=\"http://medialize.github.io/URI.js/docs.html\">here</a>:</p>\n\n<pre><code>var url = new URI('http://allmarkedup.com/folder/dir/index.html?item=value'); // plain JS version\nurl.protocol(); // returns 'http'\nurl.path(); // returns '/folder/dir/index.html'\n</code></pre>\n",
    "score": 390,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10845593,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/10845593",
    "title": null,
    "body": "<p>I have a slightly longer formatter for JavaScript <a href=\"https://github.com/tracker1/core-js/blob/master/js-extensions/100-String.format.js\" rel=\"nofollow\">here</a>...  </p>\n\n<p>You can do formatting several ways:</p>\n\n<ul>\n<li><code>String.format(input, args0, arg1, ...)</code></li>\n<li><code>String.format(input, obj)</code></li>\n<li><code>\"literal\".format(arg0, arg1, ...)</code></li>\n<li><code>\"literal\".format(obj)</code></li>\n</ul>\n\n<p>Also, if you have say a ObjectBase.prototype.format (such as with <a href=\"http://www.datejs.com/\" rel=\"nofollow\">DateJS</a>) it will use that.</p>\n\n<p>Examples...</p>\n\n<pre><code>var input = \"numbered args ({0}-{1}-{2}-{3})\";\nconsole.log(String.format(input, \"first\", 2, new Date()));\n//Outputs \"numbered args (first-2-Thu May 31 2012...Time)-{3})\"\n\nconsole.log(input.format(\"first\", 2, new Date()));\n//Outputs \"numbered args(first-2-Thu May 31 2012...Time)-{3})\"\n\nconsole.log(input.format(\n    \"object properties ({first}-{second}-{third:yyyy-MM-dd}-{fourth})\"\n    ,{\n        'first':'first'\n        ,'second':2\n        ,'third':new Date() //assumes Date.prototype.format method\n    }\n));\n//Outputs \"object properties (first-2-2012-05-31-{3})\"\n</code></pre>\n\n<p>I've also aliased with .asFormat and have some detection in place in case there's already a string.format (such as with MS Ajax Toolkit (I hate that library).</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28548360,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/28548360",
    "title": null,
    "body": "<p>There is a lot of confusion and misinformation regarding the while;pop/shift performance both in answers and comments. The while/pop solution has (as expected) the <strong>worst performance</strong>. What's actually happening is that setup runs only once for each sample that runs the snippet in a loop. eg:</p>\n\n<pre><code>var arr = [];\n\nfor (var i = 0; i &lt; 100; i++) { \n    arr.push(Math.random()); \n}\n\nfor (var j = 0; j &lt; 1000; j++) {\n    while (arr.length &gt; 0) {\n        arr.pop(); // this executes 100 times, not 100000\n    }\n}\n</code></pre>\n\n<p>I have created a new test that works correctly :</p>\n\n<p><a href=\"http://jsperf.com/empty-javascript-array-redux\">http://jsperf.com/empty-javascript-array-redux</a></p>\n\n<p><strong>Warning:</strong> even in this version of the test you can't actually see the real difference because cloning the array takes up most of the test time. It still shows that <code>splice</code> is the fastest way to clear the array (not taking <code>[]</code> into consideration because while it is the fastest it's not actually clearing the existing array).</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 47401,
      "name": "Diadistis",
      "reputation": 9713
    }
  },
  {
    "soID": 4541830,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/4541830",
    "title": null,
    "body": "<p>You can also assemble your scripts using <a href=\"http://en.wikipedia.org/wiki/PHP\" rel=\"noreferrer\">PHP</a>:</p>\n\n<p>File <code>main.js.php</code>:</p>\n\n<pre><code>&lt;?php\n    header('Content-type:text/javascript; charset=utf-8');\n    include_once(\"foo.js.php\");\n    include_once(\"bar.js.php\");\n?&gt;\n\n// Main JavaScript code goes here\n</code></pre>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 58805,
      "name": "Calmarius",
      "reputation": 6946
    }
  },
  {
    "soID": 17202942,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/17202942",
    "title": null,
    "body": "<p>If what you want to find is already in a string, and you don't have a regex escaper handy, you can use join/split:</p>\n\n<pre><code>function replaceMulti(haystack, needle, replacement)\n{\n    return haystack.split(needle).join(replacement);\n}\n\nsomeString = 'the cat looks like a cat';\nanotherString = replaceMulti(someString, 'cat', 'dog');\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 60422,
      "name": "rakslice",
      "reputation": 4658
    }
  },
  {
    "soID": 16553810,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/16553810",
    "title": null,
    "body": "<p><a href=\"https://github.com/adobe-research/theseus\" rel=\"noreferrer\">Theseus</a> is a project by Adobe research which lets you debug your Node.js code in their Open Source editor <a href=\"https://github.com/adobe/brackets\" rel=\"noreferrer\">Brackets</a>. It has some interesting features like real-time code coverage, retroactive inspection, asynchronous call tree.</p>\n\n<p><img src=\"https://i.stack.imgur.com/ZXwGD.png\" alt=\"screenshot\"></p>\n",
    "score": 33,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 64949,
      "name": "Sindre Sorhus",
      "reputation": 54688
    }
  },
  {
    "soID": 18652918,
    "parentID": 18641899,
    "url": "https://stackoverflow.com/q/18652918",
    "title": null,
    "body": "<p><a href=\"https://www.npmjs.org\" rel=\"noreferrer\">npm</a> is most commonly used for managing Node.js modules, but it works for the front-end too when combined with <a href=\"http://browserify.org/\" rel=\"noreferrer\">Browserify</a> and/or <code>$ npm dedupe</code>.</p>\n\n<p><a href=\"http://bower.io\" rel=\"noreferrer\">Bower</a> is created solely for the front-end and is optimized with that in mind. The biggest difference is that npm does nested dependency tree <em>(size heavy)</em> while Bower requires a flat dependency tree <em>(puts the burden of dependency resolution on the user)</em>.</p>\n\n<p>A nested dependency tree means that your dependencies can have their own dependencies which can have their own, and so on. This is really great on the server where you don't have to care much about space and latency. It lets you not have to care about dependency conflicts as all your dependencies use e.g. their own version of Underscore. This obviously doesn't work that well on the front-end. Imagine a site having to download three copies of jQuery.</p>\n\n<p>The reason many projects use both is that they use Bower for front-end packages and npm for developer tools like Yeoman, Grunt, Gulp, JSHint, CoffeeScript, etc.</p>\n\n<p>All package managers have many downsides. You just have to pick which you can live with.</p>\n\n<hr>\n\n<h2>Resources</h2>\n\n<ul>\n<li><a href=\"http://maxogden.com/nested-dependencies.html\" rel=\"noreferrer\">Nested Dependencies</a> - Insight into why node_modules works the way it does</li>\n</ul>\n",
    "score": 1679,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 64949,
      "name": "Sindre Sorhus",
      "reputation": 54688
    }
  },
  {
    "soID": 2985776,
    "parentID": 3390396,
    "url": "https://stackoverflow.com/q/2985776",
    "title": null,
    "body": "<p>If it is undefined, it will not be equal to a string that contains the characters \"undefined\", as the string is not undefined.</p>\n\n<p>You can check the type of the variable:</p>\n\n<pre><code>if (typeof(something) != \"undefined\") ...\n</code></pre>\n\n<p>Sometimes you don't even have to check the type. If the value of the variable can't evaluate to false when it's set (for example if it's a function), then you can just evalue the variable. Example:</p>\n\n<pre><code>if (something) {\n  something(param);\n}\n</code></pre>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 69083,
      "name": "Guffa",
      "reputation": 489662
    }
  },
  {
    "soID": 9138615,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/9138615",
    "title": null,
    "body": "<p>If you already have the dropdownlist available in a variable, this is what works for me:</p>\n\n<pre><code>$(\"option:selected\", myVar).text()\n</code></pre>\n\n<p>The other answers on this question helped me, but ultimately the jQuery forum thread <em><a href=\"http://forum.jquery.com/topic/this-option-selected-attr-rel-option-selected-is-not-working-in-ie\" rel=\"noreferrer\">$(this + \"option:selected\").attr(\"rel\") option selected is not working in IE</a></em> helped the most.</p>\n\n<p>Update: fixed the above link</p>\n",
    "score": 83,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 74276,
      "name": "Kirk Liemohn",
      "reputation": 4734
    }
  },
  {
    "soID": 2669766,
    "parentID": 2669690,
    "url": "https://stackoverflow.com/q/2669766",
    "title": null,
    "body": "<p>It prevents <a href=\"http://haacked.com/archive/2009/06/25/json-hijacking.aspx\" rel=\"noreferrer\">JSON hijacking</a>.</p>\n\n<p>Contrived example: say Google has a URL like <code>mail.google.com/json?action=inbox</code> which returns the first 50 messages of your inbox in JSON format. Evil websites on other domains can't make AJAX requests to get this data due to the same-origin policy, but they can include the URL via a <code>&lt;script&gt;</code> tag. The URL is visited with <em>your</em> cookies, and by <a href=\"http://ejohn.org/blog/re-securing-json/\" rel=\"noreferrer\">overriding the global array constructor or accessor methods</a> they can have a method called whenever an object (array or hash) attribute is set, allowing them to read the JSON content.</p>\n\n<p>The <code>while(1);</code> or <code>&amp;&amp;&amp;BLAH&amp;&amp;&amp;</code> prevents this: an AJAX request at <code>mail.google.com</code> will have full access to the text content, and can strip it away. But a <code>&lt;script&gt;</code> tag insertion blindly executes the JavaScript without any processing, resulting in either an infinite loop or a syntax error.</p>\n\n<p>This does not address the issue of cross-site request forgery.</p>\n",
    "score": 3416,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 74496,
      "name": "rjh",
      "reputation": 33828
    }
  },
  {
    "soID": 7202306,
    "parentID": 7202157,
    "url": "https://stackoverflow.com/q/7202306",
    "title": null,
    "body": "<p>+[] evaluates to 0\n[...] then summing (+ operation) it with anything converts array content to its string representation consisting of elements joined with comma.</p>\n\n<p>Anything other like taking index of array (have grater priority than + operation) is ordinal and is nothing interesting.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 78316,
      "name": "Eskat0n",
      "reputation": 789
    }
  },
  {
    "soID": 18795890,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/18795890",
    "title": null,
    "body": "<p>My bad. This only works in IE.</p>\n\n<p>Here's yet another way to copy text:</p>\n\n<pre><code>&lt;p&gt;\n    &lt;a onclick=\"window.clipboardData.setData('text', document.getElementById('Test').innerText);\"&gt;Copy&lt;/a&gt;\n&lt;/p&gt;\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 79727,
      "name": "dvallejo",
      "reputation": 715
    }
  },
  {
    "soID": 20525993,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/20525993",
    "title": null,
    "body": "<p>My extension to <a href=\"https://stackoverflow.com/a/15558082/80404\">https://stackoverflow.com/a/15558082/80404</a>.\nIt expects comment in a form <code>/*! any multiline comment */</code> where symbol ! is used to prevent removing by minification (at least for YUI compressor)</p>\n\n<pre><code>Function.prototype.extractComment = function() {\n    var startComment = \"/*!\";\n    var endComment = \"*/\";\n    var str = this.toString();\n\n    var start = str.indexOf(startComment);\n    var end = str.lastIndexOf(endComment);\n\n    return str.slice(start + startComment.length, -(str.length - end));\n};\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>var tmpl = function() { /*!\n &lt;div class=\"navbar-collapse collapse\"&gt;\n    &lt;ul class=\"nav navbar-nav\"&gt;\n    &lt;/ul&gt;\n &lt;/div&gt;\n*/}.extractComment();\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 80404,
      "name": "pocheptsov",
      "reputation": 1145
    }
  },
  {
    "soID": 3011305,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/3011305",
    "title": null,
    "body": "<p>Opera, Safari, Firefox and Chrome now all share a set of enhanced Array methods for optimizing many common loops.</p>\n\n<p>You may not need all of them, but they can be very useful, or would be if every browser supported them.</p>\n\n<p>Mozilla Labs published the algorithms they and <a href=\"http://en.wikipedia.org/wiki/WebKit\" rel=\"noreferrer\">WebKit</a> both use, so that you can add them yourself.</p>\n\n<p><strong>filter</strong> returns an array of items that satisfy some condition or test.</p>\n\n<p><strong>every</strong> returns true if every array member passes the test.</p>\n\n<p><strong>some</strong> returns true if any pass the test.</p>\n\n<p><strong>forEach</strong> runs a function on each array member and doesn't return anything.</p>\n\n<p><strong>map</strong> is like forEach, but it returns an array of the results of the operation for each element.</p>\n\n<p>These methods all take a function for their first argument and have an optional second argument, which is an object whose scope you want to impose on the array members as they loop through the function.</p>\n\n<p>Ignore it until you need it.</p>\n\n<p><strong>indexOf</strong> and <strong>lastIndexOf</strong> find the appropriate position of the first or last element that matches its argument exactly.</p>\n\n<pre><code>(function(){\n    var p, ap= Array.prototype, p2={\n        filter: function(fun, scope){\n            var L= this.length, A= [], i= 0, val;\n            if(typeof fun== 'function'){\n                while(i&lt; L){\n                    if(i in this){\n                        val= this[i];\n                        if(fun.call(scope, val, i, this)){\n                            A[A.length]= val;\n                        }\n                    }\n                    ++i;\n                }\n            }\n            return A;\n        },\n        every: function(fun, scope){\n            var L= this.length, i= 0;\n            if(typeof fun== 'function'){\n                while(i&lt;L){\n                    if(i in this &amp;&amp; !fun.call(scope, this[i], i, this))\n                        return false;\n                    ++i;\n                }\n                return true;\n            }\n            return null;\n        },\n        forEach: function(fun, scope){\n            var L= this.length, i= 0;\n            if(typeof fun== 'function'){\n                while(i&lt; L){\n                    if(i in this){\n                        fun.call(scope, this[i], i, this);\n                    }\n                    ++i;\n                }\n            }\n            return this;\n        },\n        indexOf: function(what, i){\n            i= i || 0;\n            var L= this.length;\n            while(i&lt; L){\n                if(this[i]=== what)\n                    return i;\n                ++i;\n            }\n            return -1;\n        },\n        lastIndexOf: function(what, i){\n            var L= this.length;\n            i= i || L-1;\n            if(isNaN(i) || i&gt;= L)\n                i= L-1;\n            else\n                if(i&lt; 0) i += L;\n            while(i&gt; -1){\n                if(this[i]=== what)\n                    return i;\n                --i;\n            }\n            return -1;\n        },\n        map: function(fun, scope){\n            var L= this.length, A= Array(this.length), i= 0, val;\n            if(typeof fun== 'function'){\n                while(i&lt; L){\n                    if(i in this){\n                        A[i]= fun.call(scope, this[i], i, this);\n                    }\n                    ++i;\n                }\n                return A;\n            }\n        },\n        some: function(fun, scope){\n            var i= 0, L= this.length;\n            if(typeof fun== 'function'){\n                while(i&lt;L){\n                    if(i in this &amp;&amp; fun.call(scope, this[i], i, this))\n                        return true;\n                    ++i;\n                }\n                return false;\n            }\n        }\n    }\n    for(p in p2){\n        if(!ap[p])\n            ap[p]= p2[p];\n    }\n    return true;\n})();\n</code></pre>\n",
    "score": 70,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 80860,
      "name": "kennebec",
      "reputation": 66894
    }
  },
  {
    "soID": 24460952,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/24460952",
    "title": null,
    "body": "<pre><code>// Parse query string\nvar params = {}, queryString = location.hash.substring(1),\n    regex = /([^&amp;=]+)=([^&amp;]*)/g,\n    m;\nwhile (m = regex.exec(queryString)) {\n    params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9552278,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/9552278",
    "title": null,
    "body": "<p>In a past project I had quite a bit of success using <a href=\"http://ajile.net/\" rel=\"nofollow\">ajile</a> to do imports of reusable JavaScript files. I always wished there was a feature for this built into JavaScript itself.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 83658,
      "name": "jpierson",
      "reputation": 7176
    }
  },
  {
    "soID": 25581441,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/25581441",
    "title": null,
    "body": "<p>I would actually prefere the <code>change</code> event.</p>\n\n<pre><code>$('#isAgeSelected').change(function() {\n    $(\"#txtAge\").toggle(this.checked);\n});\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/5udtC/6913/\" rel=\"nofollow\">Demo Fiddle</a></p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10350149,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/10350149",
    "title": null,
    "body": "<p>Since jQuery 1.6, the behavior of <a href=\"http://api.jquery.com/attr/\"><code>jQuery.attr()</code></a> has changed and users are encouraged  not to use it to retrieve an element's checked state. Instead, you should use <a href=\"http://api.jquery.com/prop/\"><code>jQuery.prop()</code></a>:</p>\n\n<pre><code>$(\"#txtAge\").toggle(\n    $(\"#isAgeSelected\").prop(\"checked\") // For checked attribute it returns true/false;\n                                        // Return value changes with checkbox state\n);\n</code></pre>\n\n<p>Two other possibilities are:</p>\n\n<pre><code>$(\"#txtAge\").get(0).checked\n$(\"#txtAge\").is(\":checked\")\n</code></pre>\n",
    "score": 93,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10597474,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/10597474",
    "title": null,
    "body": "<p><code>!!expr</code> returns a Boolean value (<code>true</code> or <code>false</code>) depending on the <em>truthiness</em> of the expression. It makes more sense when used on non-boolean types. Consider these examples, especially the 3rd example and onward:</p>\n\n<pre><code>          !!false === false\n           !!true === true\n\n              !!0 === false\n!!parseInt(\"foo\") === false // NaN is falsy\n              !!1 === true\n             !!-1 === true  // -1 is truthy\n\n             !!\"\" === false // empty string is falsy\n          !!\"foo\" === true  // non-empty string is truthy\n        !!\"false\" === true  // ...even if it contains a falsy value\n\n     !!window.foo === false // undefined is falsy\n           !!null === false // null is falsy\n\n             !!{} === true  // an (empty) object is truthy\n             !![] === true  // an (empty) array is truthy; PHP programmers beware!\n</code></pre>\n",
    "score": 321,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 87015,
      "name": "Salman A",
      "reputation": 138954
    }
  },
  {
    "soID": 26089052,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/26089052",
    "title": null,
    "body": "<p>If you are trying to ensure that the string you are looking for won't exist even after the replacement, you need to use a loop.</p>\n\n<p>For example:</p>\n\n<pre><code>var str = 'test aabcbc';\nstr = str.replace(/abc/g, '');\n</code></pre>\n\n<p>When complete, you will still have 'test abc'!</p>\n\n<p>The simplest loop to solve this would be:</p>\n\n<pre><code>var str = 'test aabcbc';\nwhile (str != str.replace(/abc/g, '')){\n   str.replace(/abc/g, '');\n}\n</code></pre>\n\n<p>But that runs the replacement twice for each cycle. Perhaps (at risk of being voted down) that can be combined for a slightly more efficient but less readable form:</p>\n\n<pre><code>var str = 'test aabcbc';\nwhile (str != (str = str.replace(/abc/g, ''))){}\n// alert(str); alerts 'test '!\n</code></pre>\n\n<p>This can be particularly useful when looking for duplicate strings.<br>\nFor example, if we have 'a,,,b' and we wish to remove all duplicate commas.<br>\n[In that case, one could do .replace(/,+/g,','), but at some point the regex gets complex and slow enough to loop instead.]</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 87520,
      "name": "SamGoody",
      "reputation": 7400
    }
  },
  {
    "soID": 7041351,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/7041351",
    "title": null,
    "body": "<h1>Number Formatting in JavaScript</h1>\n\n<p>I got to this question page hoping to find how to <strong>format numbers</strong> in JavaScript, without introducing yet another library.  Here's what I've found:</p>\n\n<h2>Rounding floating-point numbers</h2>\n\n<p>The equivalent of <code>sprintf(\"%.2f\", num)</code> in JavaScript seems to be <code>num.toFixed(2)</code>, which formats <code>num</code> to 2 decimal places, with rounding (but see @ars265's comment about <code>Math.round</code> below).</p>\n\n<pre><code>12.345.toFixed(2); // returns \"12.35\" (rounding!)\n12.3.toFixed(2); // returns \"12.30\" (zero padding)\n</code></pre>\n\n<h2>Exponential form</h2>\n\n<p>The equivalent of <code>sprintf(\"%.2e\", num)</code> is <code>num.toExponential(2)</code>.  </p>\n\n<pre><code>33333 .toExponential(2); // \"3.33e+4\"\n//   ^ Note the space, which keeps the . from being a decimal point.\n//     Leaving out the space is a syntax error :-(\n</code></pre>\n\n<h2>Hexadecimal and other bases</h2>\n\n<p>To print numbers in base B, try <code>num.toString(B)</code>.  JavaScript supports automatic conversion to and from bases 2 through 36 (in addition, some browsers have <a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.btoa\">limited support for base64 encoding</a>).</p>\n\n<pre><code>3735928559 .toString(16); // to base 16: \"deadbeef\"\nparseInt(\"deadbeef\", 16); // from base 16: 3735928559\n</code></pre>\n\n<h2>Reference Pages</h2>\n\n<p><a href=\"http://www.mredkj.com/javascript/numberFormat.html\">Quick tutorial on JS number formatting</a></p>\n\n<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number/toFixed\">Mozilla reference page for toFixed()</a> (with links to toPrecision(), toExponential(), toLocaleString(), ...)</p>\n",
    "score": 273,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21881750,
    "parentID": 3390396,
    "url": "https://stackoverflow.com/q/21881750",
    "title": null,
    "body": "<p>The most reliable way I know of checking for <code>undefined</code> is to use <code>void 0</code>.</p>\n\n<p>This is compatible with newer and older browsers, alike, and cannot be overwritten like <code>window.undefined</code> can in some cases.</p>\n\n<pre><code>if( myVar === void 0){\n    //yup it's undefined\n}\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 91189,
      "name": "Joseph Gabriel",
      "reputation": 4987
    }
  },
  {
    "soID": 13083424,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/13083424",
    "title": null,
    "body": "\n\n<p>This function converts the querystring to a JSON-like object, it also handles value-less and multi-value parameters:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>\"use strict\";\nfunction getQuerystringData(name) {\n    var data = { };\n    var parameters = window.location.search.substring(1).split(\"&amp;\");\n    for (var i = 0, j = parameters.length; i &lt; j; i++) {\n        var parameter = parameters[i].split(\"=\");\n        var parameterName = decodeURIComponent(parameter[0]);\n        var parameterValue = typeof parameter[1] === \"undefined\" ? parameter[1] : decodeURIComponent(parameter[1]);\n        var dataType = typeof data[parameterName];\n        if (dataType === \"undefined\") {\n            data[parameterName] = parameterValue;\n        } else if (dataType === \"array\") {\n            data[parameterName].push(parameterValue);\n        } else {\n            data[parameterName] = [data[parameterName]];\n            data[parameterName].push(parameterValue);\n        }\n    }\n    return typeof name === \"string\" ? data[name] : data;\n}\n</code></pre>\n\n<p>We perform a check for <code>undefined</code> on <code>parameter[1]</code> because <code>decodeURIComponent</code> returns the string \"undefined\" if the variable is <code>undefined</code>, and that's wrong.</p>\n\n<p>Usage:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>\"use strict\";\nvar data = getQuerystringData();\nvar parameterValue = getQuerystringData(\"parameterName\");\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 35715420,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/35715420",
    "title": null,
    "body": "<p>There are a couple of ways to do that. For people like me, the Lodash's variant</p>\n\n<pre><code>function round(number, precision) {\n    var pair = (number + 'e').split('e')\n    var value = Math.round(pair[0] + 'e' + (+pair[1] + precision))\n    pair = (value + 'e').split('e')\n    return +(pair[0] + 'e' + (+pair[1] - precision))\n}\n</code></pre>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>round(0.015, 2) // 0.02\nround(1.005, 2) // 1.01\n</code></pre>\n\n\n\n<p>If your project uses jQuery or lodash, you can also find proper <code>round</code> method in the libraries.</p>\n\n<h2>Update 1</h2>\n\n<p>I removed the variant <code>n.toFixed(2)</code>, because it is not correct. Thank you @avalanche1</p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 91813,
      "name": "stanleyxu2005",
      "reputation": 4575
    }
  },
  {
    "soID": 4261075,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/4261075",
    "title": null,
    "body": "<p>Because it will iterate over properties belonging to objects up the prototype chain if you're not careful.</p>\n\n<p>You can use <code>for.. in</code>, just be sure to check each property with <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\" rel=\"noreferrer\">hasOwnProperty</a>.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 92448,
      "name": "JAL",
      "reputation": 15889
    }
  },
  {
    "soID": 2880929,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/2880929",
    "title": null,
    "body": "<p>Some of the solutions posted here are inefficient. Repeating the regular expression search every time the script needs to access a parameter is completely unnecessary, one single function to split up the parameters into an associative-array style object is enough. If you're not working with the HTML 5 History API, this is only necessary once per page load.  The other suggestions here also fail to decode the URL correctly.</p>\n\n<pre><code>var urlParams;\n(window.<a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.onpopstate\" rel=\"noreferrer\">onpopstate</a> = function () {\n    var match,\n        pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n        search = /([^&=]+)=?([^&]*)/g,\n        decode = function (s) { return <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/decodeURIComponent\" rel=\"noreferrer\">decodeURIComponent</a>(s.replace(pl, \" \")); },\n        query  = window.<a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.location\" rel=\"noreferrer\">location</a>.search.<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/substring\" rel=\"noreferrer\">substring</a>(1);\n\n    urlParams = {};\n    while (match = search.<a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp/exec\" rel=\"noreferrer\">exec</a>(query))\n       urlParams[decode(match[1])] = decode(match[2]);\n})();</code></pre>\n\n<p>Example querystring: </p>\n\n<blockquote>\n  <p><code>?i=main&amp;mode=front&amp;sid=de8d49b78a85a322c4155015fdce22c4&amp;enc=+Hello%20&amp;empty</code></p>\n</blockquote>\n\n<p>Result:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code> urlParams = {\n    enc: \" Hello \",\n    i: \"main\",\n    mode: \"front\",\n    sid: \"de8d49b78a85a322c4155015fdce22c4\",\n    empty: \"\"\n}\n\nalert(urlParams[\"mode\"]);\n// -&gt; \"front\"\n\nalert(\"empty\" in urlParams);\n// -&gt; true\n</code></pre>\n\n<p>This could easily be improved upon to handle array-style query strings too.  An example of this is <a href=\"http://jsbin.com/adali3/2\" rel=\"noreferrer\">here</a>, but since array-style parameters aren't defined in <a href=\"http://tools.ietf.org/html/rfc3986\" rel=\"noreferrer\">RFC 3986</a> I won't pollute this answer with the source code. <a href=\"https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript/23401756#23401756\">For those interested in a \"polluted\" version, look at campbeln's answer below</a>.</p>\n\n<p>Also, as pointed out in the comments, <code>;</code> is a legal delimiter for <code>key=value</code> pairs.  It would require a more complicated regex to handle <code>;</code> or <code>&amp;</code>, which I think is unnecessary because it's rare that <code>;</code> is used and I would say even more unlikely that both would be used.  If you need to support <code>;</code> instead of <code>&amp;</code>, just swap them in the regex.</p>\n\n<p><hr /> \nIf you're using a server-side preprocessing language, you might want to use its native JSON functions to do the heavy lifting for you.  For example, in PHP you can write:</p>\n\n<pre><code>&lt;script>var urlParams = &lt;?php echo <a href=\"http://php.net/manual/en/function.json-encode.php\" rel=\"noreferrer\">json_encode</a>($_GET, JSON_HEX_TAG);?>;&lt;/script></code></pre>\n\n<p>Much simpler!</p>\n",
    "score": 1554,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3390468,
    "parentID": 3390396,
    "url": "https://stackoverflow.com/q/3390468",
    "title": null,
    "body": "<p>Using <code>typeof</code> is my preference. It will work when the variable has never been declared, unlike any comparison with the <code>==</code> or <code>===</code> operators or type coercion using <code>if</code>. (<code>undefined</code>, unlike <code>null</code>, may also be redefined in ECMAScript 3 environments, making it unreliable for comparison, although nearly all common environments now are compliant with ECMAScript 5 or above).</p>\n\n<pre><code>if (typeof someUndeclaredVariable == \"undefined\") {\n    // Works\n}\n\nif (someUndeclaredVariable === undefined) { \n    // Throws an error\n}\n</code></pre>\n",
    "score": 108,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 96100,
      "name": "Tim Down",
      "reputation": 215900
    }
  },
  {
    "soID": 7417498,
    "parentID": 7202157,
    "url": "https://stackoverflow.com/q/7417498",
    "title": null,
    "body": "<p>The following is adapted from a <a href=\"http://tmik.co.uk/?p=672\">blog post</a> answering this question that I posted while this question was still closed. Links are to (an HTML copy of) the ECMAScript 3 spec, still the baseline for JavaScript in today's commonly used web browsers.</p>\n\n<p>First, a comment: this kind of expression is never going to show up in any (sane) production environment and is only of any use as an exercise in just how well the reader knows the dirty edges of JavaScript. The general principle that JavaScript operators implicitly convert between types is useful, as are some of the common conversions, but much of the detail in this case is not.</p>\n\n<p>The expression <code>++[[]][+[]]+[+[]]</code> may initially look rather imposing and obscure, but is actually relatively easy break down into separate expressions. Below I’ve simply added parentheses for clarity; I can assure you they change nothing, but if you want to verify that then feel free to read up about the <a href=\"http://bclary.com/2004/11/07/#a-11.1.6\">grouping operator</a>. So, the expression can be more clearly written as</p>\n\n<pre><code>( ++[[]][+[]] ) + ( [+[]] )\n</code></pre>\n\n<p>Breaking this down, we can simplify by observing that <code>+[]</code> evaluates to <code>0</code>. To satisfy yourself why this is true, check out the <a href=\"http://bclary.com/2004/11/07/#a-11.4.6\">unary + operator</a> and follow the slightly tortuous trail which ends up with <a href=\"http://bclary.com/2004/11/07/#a-9.1\">ToPrimitive</a> converting the empty array into an empty string, which is then finally converted to <code>0</code> by <a href=\"http://bclary.com/2004/11/07/#a-9.3\">ToNumber</a>. We can now substitute <code>0</code> for each instance of <code>+[]</code>:</p>\n\n<pre><code>( ++[[]][0] ) + [0]\n</code></pre>\n\n<p>Simpler already. As for <code>++[[]][0]</code>, that’s a combination of the <a href=\"http://bclary.com/2004/11/07/#a-11.4.4\">prefix increment operator</a> (<code>++</code>), an <a href=\"http://bclary.com/2004/11/07/#a-11.1.4\">array literal</a> defining an array with single element that is itself an empty array (<code>[[]]</code>) and a <a href=\"http://bclary.com/2004/11/07/#a-11.2.1\">property accessor</a> (<code>[0]</code>) called on the array defined by the array literal.</p>\n\n<p>So, we can simplify <code>[[]][0]</code> to just <code>[]</code> and we have <code>++[]</code>, right? In fact, this is not the case because evaluating <code>++[]</code> throws an error, which may initially seem confusing. However, a little thought about the nature of <code>++</code> makes this clear: it’s used to increment a variable (e.g. <code>++i</code>) or an object property (e.g. <code>++obj.count</code>). Not only does it evaluate to a value, it also stores that value somewhere. In the case of <code>++[]</code>, it has nowhere to put the new value (whatever it may be) because there is no reference to an object property or variable to update. In spec terms, this is covered by the internal <a href=\"http://bclary.com/2004/11/07/#a-8.7.2\">PutValue</a> operation, which is called by the prefix increment operator.</p>\n\n<p>So then, what does <code>++[[]][0]</code> do? Well, by similar logic as <code>+[]</code>, the inner array is converted to <code>0</code> and this value is incremented by <code>1</code> to give us a final value of <code>1</code>. The value of property <code>0</code> in the outer array is updated to <code>1</code> and the whole expression evaluates to <code>1</code>.</p>\n\n<p>This leaves us with</p>\n\n<pre><code>1 + [0]\n</code></pre>\n\n<p>... which is a simple use of the <a href=\"http://bclary.com/2004/11/07/#a-11.6.1\">addition operator</a>. Both operands are first <a href=\"http://bclary.com/2004/11/07/#a-9.1\">converted to primitives</a> and if either primitive value is a string, string concatenation is performed, otherwise numeric addition is performed. <code>[0]</code> converts to <code>\"0\"</code>, so string concatenation is used, producing <code>\"10\"</code>.</p>\n\n<p>As a final aside, something that may not be immediately apparent is that overriding either one of the <code>toString()</code> or <code>valueOf()</code> methods of <code>Array.prototype</code> will change the result of the expression, because both are checked and used if present when converting an object into a primitive value. For example, the following</p>\n\n<pre><code>Array.prototype.toString = function() {\n  return \"foo\";\n};\n++[[]][+[]]+[+[]]\n</code></pre>\n\n<p>... produces <code>\"NaNfoo\"</code>. Why this happens is left as an exercise for the reader...</p>\n",
    "score": 46,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 96100,
      "name": "Tim Down",
      "reputation": 215900
    }
  },
  {
    "soID": 2985784,
    "parentID": 3390396,
    "url": "https://stackoverflow.com/q/2985784",
    "title": null,
    "body": "<pre><code>if (typeof foo == 'undefined') {\n // Do something\n};\n</code></pre>\n\n<p>Note that strict comparison (<code>!==</code>) is not necessary in this case, since <code>typeof</code> will always return a string.</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 96656,
      "name": "Mathias Bynens",
      "reputation": 83886
    }
  },
  {
    "soID": 43096892,
    "parentID": 1098040,
    "url": "https://stackoverflow.com/q/43096892",
    "title": null,
    "body": "<h3>For those which have <code>lodash</code> included in their project:<br>There is a lodash <a href=\"https://lodash.com/docs/4.17.4#get\" rel=\"nofollow noreferrer\">_.get</a> method  which tries to get \"deep\" keys:</h3>\n\n<blockquote>\n  <p>Gets the value at path of object. If the resolved value is undefined,\n  the defaultValue is returned in its place.</p>\n</blockquote>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var object = { 'a': [{ 'b': { 'c': 3 } }] };\r\n\r\nconsole.log(\r\n  _.get(object, 'a[0].b.c'),           // =&gt; 3\r\n  _.get(object, ['a', '0', 'b', 'c']), // =&gt; 3\r\n  _.get(object, 'a.b.c'),              // =&gt; undefined \r\n  _.get(object, 'a.b.c', 'default')    // =&gt; 'default'\r\n)</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<p>This will effectively check if that key, however <strong>deep</strong>, is defined and <em>will not</em> throw an error which might harm the flow of your program if that key is not defined.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 104380,
      "name": "vsync",
      "reputation": 33341
    }
  },
  {
    "soID": 7224605,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/7224605",
    "title": null,
    "body": "<p>Here is a shortened version of the popular answer that gets the first letter by treating the string as an array:</p>\n\n<pre><code>function capitalize(s)\n{\n    return s[0].toUpperCase() + s.slice(1);\n}\n</code></pre>\n\n<p><strong>Update:</strong></p>\n\n<p>According to the comments below this doesn't work in IE 7 or below.</p>\n\n<p><strong>Update 2:</strong></p>\n\n<p>To avoid <code>undefined</code> for empty strings (see <a href=\"https://stackoverflow.com/questions/1026069/capitalize-the-first-letter-of-string-in-javascript/7224605?noredirect=1#comment40995528_7224605\">@njzk2's comment below</a>), you can check for an empty string:</p>\n\n<pre><code>function capitalize(s)\n{\n    return s &amp;&amp; s[0].toUpperCase() + s.slice(1);\n}\n</code></pre>\n",
    "score": 199,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 105565,
      "name": "joelvh",
      "reputation": 6883
    }
  },
  {
    "soID": 12814548,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/12814548",
    "title": null,
    "body": "<p>I did not see the <code>String.format</code> variant:</p>\n\n<pre><code>String.format = function (string) {\n    var args = Array.prototype.slice.call(arguments, 1, arguments.length);\n    return string.replace(/{(\\d+)}/g, function (match, number) {\n        return typeof args[number] != \"undefined\" ? args[number] : match;\n    });\n};\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3950609,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/3950609",
    "title": null,
    "body": "<pre><code>$(\"input:radio:checked\").val();\n</code></pre>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 111665,
      "name": "Phillip Senn",
      "reputation": 16044
    }
  },
  {
    "soID": 8495489,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/8495489",
    "title": null,
    "body": "<p>I like this syntax and indendation:</p>\n\n<pre><code>string = 'my long string...\\n'\n       + 'continue here\\n'\n       + 'and here.';\n</code></pre>\n\n<p>(but actually can't be considered as multiline string)</p>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 116001,
      "name": "semente",
      "reputation": 3633
    }
  },
  {
    "soID": 19100361,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/19100361",
    "title": null,
    "body": "<p>We've just released <a href=\"https://github.com/stretchr/arg.js\" rel=\"noreferrer\">arg.js</a>, a project aimed at solving this problem once and for all.  It's traditionally been so difficult but now you can do:</p>\n\n<pre><code>var name = Arg.get(\"name\");\n</code></pre>\n\n<p>or getting the whole lot:</p>\n\n<pre><code>var params = Arg.all();\n</code></pre>\n\n<p>and if you care about the difference between <code>?query=true</code> and <code>#hash=true</code> then you can use the <code>Arg.query()</code> and <code>Arg.hash()</code> methods.</p>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21301127,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/21301127",
    "title": null,
    "body": "<p>I've released a library to help with this.  Pulls all possible input values, actually, but also includes which radio button was checked.  You can check it out at <a href=\"https://github.com/mazondo/formalizedata\" rel=\"nofollow\">https://github.com/mazondo/formalizedata</a></p>\n\n<p>It'll give you a js object of the answers, so a form like:</p>\n\n<pre><code>&lt;form&gt;\n&lt;input type=\"radio\" name\"favorite-color\" value=\"blue\" checked&gt; Blue\n&lt;input type=\"radio\" name=\"favorite-color\" value=\"red\"&gt; Red\n&lt;/form&gt;\n</code></pre>\n\n<p>will give you:</p>\n\n<pre><code>$(\"form\").formalizeData()\n{\n  \"favorite-color\" : \"blue\"\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 122166,
      "name": "Ryan",
      "reputation": 548
    }
  },
  {
    "soID": 21675610,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/21675610",
    "title": null,
    "body": "<p><strong>Updated for 2015</strong>: it's six years later now:  most people use a module loader, and the main module systems each have ways of loading templates. It's not inline, but the most common type of multiline string are templates, and <strong>templates should generally be kept out of JS anyway</strong>.</p>\n\n<h2>require.js: 'require text'.</h2>\n\n<p>Using <a href=\"https://github.com/requirejs/text\" rel=\"nofollow\">require.js 'text' plugin</a>, with a multiline template in <strong>template.html</strong></p>\n\n<pre><code>var template = require('text!template.html')\n</code></pre>\n\n<h2>NPM/browserify: the 'brfs' module</h2>\n\n<p>Browserify <a href=\"https://www.npmjs.com/package/brfs\" rel=\"nofollow\">uses a 'brfs' module</a> to load text files. This will actually build your template into your bundled HTML.</p>\n\n<pre><code>var fs = require(\"fs\");\nvar template = fs.readFileSync(template.html', 'utf8');\n</code></pre>\n\n<p>Easy. </p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 123671,
      "name": "mikemaccana",
      "reputation": 29296
    }
  },
  {
    "soID": 11984570,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/11984570",
    "title": null,
    "body": "<p><a href=\"http://sugarjs.com/\" rel=\"nofollow\">Sugar.JS</a> provides extended objects for this purpose. The code is clean and simple:</p>\n\n<p>Make an extended object:</p>\n\n<pre><code>a = Object.extended({})\n</code></pre>\n\n<p>Check it's size:</p>\n\n<pre><code>a.size()\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 123671,
      "name": "mikemaccana",
      "reputation": 29296
    }
  },
  {
    "soID": 44325931,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/44325931",
    "title": null,
    "body": "<h1>2017 answer: you can now do exactly what you want in every current browser and node 7+</h1>\n\n<p>This is quite simple:</p>\n\n<ul>\n<li>Use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\" rel=\"noreferrer\">'await'</a>, which will tell JavaScript to await a thing that returns a promise to be resolved</li>\n<li>Add the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\" rel=\"noreferrer\">'async'</a> keyword to the parent function</li>\n</ul>\n\n<p>Here's a working version of your code:</p>\n\n<pre><code>async function foo() {\n    var result = await superagent.get('...')\n    return result;\n}\n\nvar result = foo(); \n</code></pre>\n\n<p><a href=\"http://caniuse.com/#search=await\" rel=\"noreferrer\">await is supported in all current browsers and node 8</a></p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 123671,
      "name": "mikemaccana",
      "reputation": 29296
    }
  },
  {
    "soID": 2353890,
    "parentID": 2353818,
    "url": "https://stackoverflow.com/q/2353890",
    "title": null,
    "body": "<p>Use the source, Luke.</p>\n\n<p>No, but seriously I found that building Node.js from source, running the tests, and looking at the benchmarks did get me on the right track. From there, the .js files in the lib directory are a good place to look, especially the file http.js.</p>\n\n<p>Update: I wrote this answer over a year ago, and since that time there has explosion in the number of great resources available for people learning Node.js. Though I still believe diving into the source is worthwhile, I think that there are now better ways to get started. I would suggest some of the books on Node.js that are starting to come out.</p>\n",
    "score": 101,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2536734,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/2536734",
    "title": null,
    "body": "<p>The <a href=\"http://en.wikipedia.org/wiki/V8_%28JavaScript_engine%29\" rel=\"noreferrer\">V8</a> debugger released as part of the Google <a href=\"http://code.google.com/p/chromedevtools/\" rel=\"noreferrer\">Chrome Developer Tools</a> can be used to debug Node.js scripts. A detailed explanation of how this works can be found in the <a href=\"https://github.com/nodejs/node/wiki/Using-Eclipse-as-Node-Applications-Debugger\" rel=\"noreferrer\">Node.js GitHub wiki</a>.</p>\n\n<p><strike>There is also <a href=\"http://github.com/smtlaissezfaire/ndb\" rel=\"noreferrer\">ndb</a>, a command line debugger written in Node.js itself.</strike></p>\n",
    "score": 187,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 129322,
      "name": "Fabian Jakobs",
      "reputation": 13631
    }
  },
  {
    "soID": 7352694,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/7352694",
    "title": null,
    "body": "<p>Another way, that in my opinion is much cleaner, is to make a synchronous Ajax request instead of using a <code>&lt;script&gt;</code> tag. Which is also how <a href=\"http://en.wikipedia.org/wiki/Node.js\">Node.js</a> handles includes.</p>\n\n<p>Here's an example using jQuery:</p>\n\n<pre><code>function require(script) {\n    $.ajax({\n        url: script,\n        dataType: \"script\",\n        async: false,           // &lt;-- This is the key\n        success: function () {\n            // all good...\n        },\n        error: function () {\n            throw new Error(\"Could not load script \" + script);\n        }\n    });\n}\n</code></pre>\n\n<p>You can then use it in your code as you'd usually use an include:</p>\n\n<pre><code>require(\"/scripts/subscript.js\");\n</code></pre>\n\n<p>And be able to call a function from the required script in the next line:</p>\n\n<pre><code>subscript.doSomethingCool(); \n</code></pre>\n",
    "score": 110,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 130434,
      "name": "Ariel",
      "reputation": 3579
    }
  },
  {
    "soID": 16512303,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/16512303",
    "title": null,
    "body": "<h2>Debugging</h2>\n\n<ul>\n<li><a href=\"http://www.joyent.com/developers/node/debug\" rel=\"noreferrer\">Joyent's Guide</a></li>\n<li><a href=\"https://nodejs.org/api/debugger.html\" rel=\"noreferrer\">Debugger</a></li>\n<li><a href=\"https://github.com/node-inspector/node-inspector\" rel=\"noreferrer\">Node Inspector</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/runtimes/nodejs#_debugging-your-node-application\" rel=\"noreferrer\">Visual Studio Code</a></li>\n<li><a href=\"https://docs.c9.io/running_and_debugging_code.html\" rel=\"noreferrer\">Cloud9</a></li>\n<li><a href=\"https://github.com/adobe-research/theseus\" rel=\"noreferrer\">Brackets</a></li>\n</ul>\n\n<h2>Profiling</h2>\n\n<ol>\n<li><code>node --prof ./app.js</code></li>\n<li><code>node --prof-process ./the-generated-log-file</code></li>\n</ol>\n\n<h2>Heapdumps</h2>\n\n<ul>\n<li><a href=\"https://github.com/bnoordhuis/node-heapdump\" rel=\"noreferrer\">node-heapdump with Chrome Developer Tools</a></li>\n</ul>\n\n<h2>Flamegraphs</h2>\n\n<ul>\n<li><a href=\"https://github.com/davidmarkclements/0x\" rel=\"noreferrer\">0x</a></li>\n<li><a href=\"https://github.com/jam3/devtool\" rel=\"noreferrer\">jam3/devtool</a> then <a href=\"https://youtu.be/g0g4ML4nhPg\" rel=\"noreferrer\">Chrome Developer Tools Flame Charts</a></li>\n<li><a href=\"http://dtrace.org/\" rel=\"noreferrer\">Dtrace</a> and <a href=\"https://github.com/joyent/node-stackvis\" rel=\"noreferrer\">StackVis</a> — <a href=\"http://blog.nodejs.org/2012/04/25/profiling-node-js/\" rel=\"noreferrer\">Only supported on SmartOS</a></li>\n</ul>\n\n<h2>Tracing</h2>\n\n<ul>\n<li><a href=\"https://github.com/traceglMPL/tracegl\" rel=\"noreferrer\">Interactive Stack Traces with TraceGL</a></li>\n</ul>\n\n<h2>Logging</h2>\n\n<p>Libraries that output debugging information</p>\n\n<ul>\n<li><a href=\"https://github.com/bevry/caterpillar\" rel=\"noreferrer\">Caterpillar</a></li>\n<li><a href=\"https://github.com/baryon/tracer\" rel=\"noreferrer\">Tracer</a></li>\n</ul>\n\n<p>Libraries that enhance stack trace information</p>\n\n<ul>\n<li><a href=\"https://github.com/mattinsler/longjohn\" rel=\"noreferrer\">Longjohn</a></li>\n</ul>\n\n<h2>Benchmarking</h2>\n\n<ul>\n<li><a href=\"http://httpd.apache.org/docs/2.2/programs/ab.html\" rel=\"noreferrer\">Apache Bench</a>: <code>ab -n 100000 -c 1 http://127.0.0.1:9778/</code></li>\n<li><a href=\"https://github.com/wg/wrk\" rel=\"noreferrer\">wrk</a></li>\n</ul>\n\n<h2>Other</h2>\n\n<ul>\n<li><a href=\"https://trace.risingstack.com\" rel=\"noreferrer\">Trace</a></li>\n<li><a href=\"https://github.com/dthree/vantage\" rel=\"noreferrer\">Vantage</a></li>\n<li><a href=\"https://github.com/buggerjs/bugger\" rel=\"noreferrer\">Bugger</a></li>\n<li><a href=\"http://google.github.io/tracing-framework\" rel=\"noreferrer\">Google Tracing Framework</a></li>\n<li><a href=\"https://github.com/paulirish/automated-chrome-profiling\" rel=\"noreferrer\">Paul Irish's Guide</a></li>\n</ul>\n\n<h2>Legacy</h2>\n\n<p>These use to work but are no longer maintained or no longer applicable to modern node versions.</p>\n\n<ul>\n<li><a href=\"https://github.com/bnoordhuis/node-profiler\" rel=\"noreferrer\">https://github.com/bnoordhuis/node-profiler</a> - replaced by built-in debugging</li>\n<li><a href=\"https://github.com/c4milo/node-webkit-agent\" rel=\"noreferrer\">https://github.com/c4milo/node-webkit-agent</a> - replaced by node inspector</li>\n<li><a href=\"https://nodetime.com/\" rel=\"noreferrer\">https://nodetime.com/</a> - defunct</li>\n</ul>\n",
    "score": 617,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 130638,
      "name": "balupton",
      "reputation": 28333
    }
  },
  {
    "soID": 21566954,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/21566954",
    "title": null,
    "body": "<p>Just for completeness:</p>\n\n<p>The <a href=\"http://www.jetbrains.com/pycharm/webhelp/running-and-debugging-node-js.html#d91029e423\" rel=\"nofollow\">PyCharm 3.0 + Node.js Plugin offers an awesome development + run + debug experience</a>.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 132454,
      "name": "Alex",
      "reputation": 1484
    }
  },
  {
    "soID": 34095198,
    "parentID": 586182,
    "url": "https://stackoverflow.com/q/34095198",
    "title": null,
    "body": "<p>Even though this has been answered already, I'm adding this note for an alternative approach..</p>\n\n<p>I wanted to place a <strong>known number</strong> of items into an array, into specific postitions, as they come off of an \"associative array\" (i.e. an object) which by definition is not guaranteed to be in a sorted order. I wanted the resulting array to be an array of objects, but the objects to be in a specific order in the array since an array guarantees their order. So I did this..</p>\n\n<p>First the source object, a JSONB string retrieved from PostgreSQL. I wanted to have it sorted by the \"order\" property in each child object.</p>\n\n<pre><code>var jsonb_str = '{\"one\": {\"abbr\": \"\", \"order\": 3}, \"two\": {\"abbr\": \"\", \"order\": 4}, \"three\": {\"abbr\": \"\", \"order\": 5}, \"initialize\": {\"abbr\": \"init\", \"order\": 1}, \"start\": {\"abbr\": \"\", \"order\": 2}}';\n\nvar jsonb_obj = JSON.parse(jsonb_str);\n</code></pre>\n\n<p>Since the number of nodes in the object is known, I first create an array with the specified length:</p>\n\n<pre><code>var obj_length = Object.keys(jsonb_obj).length;\nvar sorted_array = new Array(obj_length);\n</code></pre>\n\n<p>And then iterate the object, placing the newly created temporary objects into the desired locations in the array without really any \"sorting\" taking place.</p>\n\n<pre><code>for (var key of Object.keys(jsonb_obj)) {\n  var tobj = {};\n  tobj[key] = jsonb_obj[key].abbr;\n\n  var position = jsonb_obj[key].order - 1;\n  sorted_array[position] = tobj;\n}\n\nconsole.dir(sorted_array);\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 134536,
      "name": "Ville",
      "reputation": 1792
    }
  },
  {
    "soID": 26796447,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/26796447",
    "title": null,
    "body": "<p>Really, if you care about <strong><a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_9\" rel=\"noreferrer\">Internet&nbsp;Explorer&nbsp;9+</a></strong> only, this code would be enough to replace <code>jQuery.ready</code>:</p>\n\n<pre><code>    document.addEventListener(\"DOMContentLoaded\", callback);\n</code></pre>\n\n<hr>\n\n<p>If you worry about <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_6\" rel=\"noreferrer\">Internet&nbsp;Explorer&nbsp;6</a> and some really strange and rare browsers, this will work:</p>\n\n<pre><code>domReady: function (callback) {\n    // Mozilla, Opera and WebKit\n    if (document.addEventListener) {\n        document.addEventListener(\"DOMContentLoaded\", callback, false);\n        // If Internet Explorer, the event model is used\n    } else if (document.attachEvent) {\n        document.attachEvent(\"onreadystatechange\", function() {\n            if (document.readyState === \"complete\" ) {\n                callback();\n            }\n        });\n        // A fallback to window.onload, that will always work\n    } else {\n        var oldOnload = window.onload;\n        window.onload = function () {\n            oldOnload &amp;&amp; oldOnload();\n            callback();\n        }\n    }\n},\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 139361,
      "name": "Dan",
      "reputation": 24635
    }
  },
  {
    "soID": 2647888,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/2647888",
    "title": null,
    "body": "<p>You can use the qualities of the <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-abstract-equality-comparison\" rel=\"noreferrer\">abstract equality operator</a> to do this:</p>\n\n<pre><code>if (variable == null){\n    // your code here.\n}\n</code></pre>\n\n<p>Because <code>null == undefined</code> is true, the above code will catch both <code>null</code> and <code>undefined</code>.</p>\n",
    "score": 1734,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 139459,
      "name": "Sarfraz",
      "reputation": 261479
    }
  },
  {
    "soID": 6385597,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/6385597",
    "title": null,
    "body": "<pre><code>document.createElement('div');\n</code></pre>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 144140,
      "name": "eomeroff",
      "reputation": 3035
    }
  },
  {
    "soID": 11207850,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/11207850",
    "title": null,
    "body": "<p>You can use <a href=\"http://www.datejs.com/\" rel=\"noreferrer\">Date.js</a> library which extens Date object, thus you can have .today() method.</p>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 144140,
      "name": "eomeroff",
      "reputation": 3035
    }
  },
  {
    "soID": 32945220,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/32945220",
    "title": null,
    "body": "<p>Update 2015: currently theres a way to use <code>document.execCommand</code> to work with the clipboard.\n<a href=\"https://github.com/zenorocha/clipboard.js\" rel=\"nofollow\">clipboard.js</a> provides a cross browser way to work with the clipboard ( <a href=\"http://caniuse.com/#search=document.execCommand\" rel=\"nofollow\">browser support</a> )</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 145334,
      "name": "Yaroslav Yakovlev",
      "reputation": 2968
    }
  },
  {
    "soID": 5790739,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/5790739",
    "title": null,
    "body": "<p>You could also override the default Storage <code>setItem(key,value)</code> and <code>getItem(key)</code> methods to handle objects/arrays like any other data type. That way, you can simply call <code>localStorage.setItem(key,value)</code> and <code>localStorage.getItem(key)</code> as you normally would.</p>\n\n<p>I haven't tested this extensively, but it has appeared to work without problems for a small project I've been tinkering with.</p>\n\n<pre><code>Storage.prototype._setItem = Storage.prototype.setItem;\nStorage.prototype.setItem = function(key, value)\n{\n  this._setItem(key, JSON.stringify(value));\n}\n\nStorage.prototype._getItem = Storage.prototype.getItem;\nStorage.prototype.getItem = function(key)\n{  \n  try\n  {\n    return JSON.parse(this._getItem(key));\n  }\n  catch(e)\n  {\n    return this._getItem(key);\n  }\n}\n</code></pre>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 146674,
      "name": "danott",
      "reputation": 713
    }
  },
  {
    "soID": 28550313,
    "parentID": 18641899,
    "url": "https://stackoverflow.com/q/28550313",
    "title": null,
    "body": "<p>My team moved away from Bower and migrated to npm because:</p>\n\n<ul>\n<li>Programmatic usage was painful</li>\n<li>Bower's interface kept changing</li>\n<li>Some features, like the url shorthand, are entirely broken</li>\n<li>Using both Bower and npm in the same project is painful</li>\n<li>Keeping bower.json version field in sync with git tags is painful</li>\n<li>Source control != package management</li>\n<li>CommonJS support is not straightforward</li>\n</ul>\n\n<p>For more details, see <a href=\"https://medium.com/@nickheiner/why-my-team-uses-npm-instead-of-bower-eecfe1b9afcb\">\"Why my team uses npm instead of bower\"</a>.</p>\n",
    "score": 31,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 147601,
      "name": "Nick Heiner",
      "reputation": 40486
    }
  },
  {
    "soID": 44399984,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/44399984",
    "title": null,
    "body": "<p>Highly recommend date-fns, which is faster than Moment, modular (just import what you need), and treats Dates as immutable, which is very powerful.  (Moment will not support immutability.)</p>\n\n<pre><code>import * as DateFns from 'date-fns';\n...\nconsole.log(DateFns.format(myDate, 'YYYY-MM-DD'));\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 152711,
      "name": "Luke Williams",
      "reputation": 474
    }
  },
  {
    "soID": 32698927,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/32698927",
    "title": null,
    "body": "<p>You can use <a href=\"http://www.typescriptlang.org/Playground\" rel=\"noreferrer\">TypeScript</a> (JavaScript SuperSet), it supports multiline strings, and transpiles back down to pure JavaScript without overhead:</p>\n\n<pre><code>var templates = {\n    myString: `this is\na multiline\nstring` \n}\n\nalert(templates.myString);\n</code></pre>\n\n<p>If you'd want to accomplish the same with plain JavaScript:</p>\n\n<pre><code>var templates = \n{\n myString: function(){/*\n    This is some\n    awesome multi-lined\n    string using a comment \n    inside a function \n    returned as a string.\n    Enjoy the jimmy rigged code.\n*/}.toString().slice(14,-3)\n\n}\nalert(templates.myString)\n</code></pre>\n\n<p>Note that the iPad/Safari does not support <code>'functionName.toString()'</code></p>\n\n<p>If you have a lot of legacy code, you can also use the plain JavaScript variant in TypeScript (for cleanup purposes):</p>\n\n<pre><code>interface externTemplates\n{\n    myString:string;\n}\n\ndeclare var templates:externTemplates;\n\nalert(templates.myString)\n</code></pre>\n\n<p>and you can use the multiline-string object from the plain JavaScript variant, where you put the templates into another file (which you can merge in the bundle).</p>\n\n<p>You can try TypeScript at<br />\n<a href=\"http://www.typescriptlang.org/Playground\" rel=\"noreferrer\">http://www.typescriptlang.org/Playground</a></p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 155077,
      "name": "Stefan Steiger",
      "reputation": 35105
    }
  },
  {
    "soID": 43766002,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/43766002",
    "title": null,
    "body": "<p>Most of the answers here give useful suggestions for when you have a single async operation, but sometimes, this comes up when you need to do an asynchronous operation for <em>each</em> entry in an array or other list-like structure. The temptation is to do this:</p>\n\n<pre><code>// WRONG\nvar results = [];\ntheArray.forEach(function(entry) {\n    doSomethingAsync(entry, function(result) {\n        results.push(result);\n    });\n});\nconsole.log(results); // E.g., using them, returning them, etc.\n</code></pre>\n\n<p>Example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// WRONG\r\nvar theArray = [1, 2, 3];\r\nvar results = [];\r\ntheArray.forEach(function(entry) {\r\n    doSomethingAsync(entry, function(result) {\r\n        results.push(result);\r\n    });\r\n});\r\nconsole.log(\"Results:\", results); // E.g., using them, returning them, etc.\r\n\r\nfunction doSomethingAsync(value, callback) {\r\n    console.log(\"Starting async operation for \" + value);\r\n    setTimeout(function() {\r\n        console.log(\"Completing async operation for \" + value);\r\n        callback(value * 2);\r\n    }, Math.floor(Math.random() * 200));\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper {\r\n  max-height: 100% !important;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The reason that doesn't work is that the callbacks from <code>doSomethingAsync</code> haven't run yet by the time you're trying to use the results.</p>\n\n<p>So, if you have an array (or list of some kind) and want to do async operations for each entry, you have two options: Do the operations in parallel (overlapping), or in series (one after another in sequence).</p>\n\n<h3>Parallel</h3>\n\n<p>You can start all of them and keep track of how many callbacks you're expecting, and then use the results when you've gotten that many callbacks:</p>\n\n<pre><code>var results = [];\nvar expecting = theArray.length;\ntheArray.forEach(function(entry, index) {\n    doSomethingAsync(entry, function(result) {\n        results[index] = result;\n        if (--expecting === 0) {\n            // Done!\n            console.log(\"Results:\", results); // E.g., using the results\n        }\n    });\n});\n</code></pre>\n\n<p>Example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var theArray = [1, 2, 3];\r\nvar results = [];\r\nvar expecting = theArray.length;\r\ntheArray.forEach(function(entry, index) {\r\n    doSomethingAsync(entry, function(result) {\r\n        results[index] = result;\r\n        if (--expecting === 0) {\r\n            // Done!\r\n            console.log(\"Results:\", results); // E.g., using the results\r\n        }\r\n    });\r\n});\r\n\r\nfunction doSomethingAsync(value, callback) {\r\n    console.log(\"Starting async operation for \" + value);\r\n    setTimeout(function() {\r\n        console.log(\"Completing async operation for \" + value);\r\n        callback(value * 2);\r\n    }, Math.floor(Math.random() * 200));\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper {\r\n  max-height: 100% !important;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><em>(We could do away with <code>expecting</code> and just use <code>results.length === theArray.length</code>, but that leaves us open to the possibility that <code>theArray</code> is changed while the calls are outstanding...)</em></p>\n\n<p>Notice how we use the <code>index</code> from <code>forEach</code> to save the result in <code>results</code> in the same position as the entry it relates to, even if the results arrive out of order (since async calls don't necessarily complete in the order in which they were started).</p>\n\n<p>But what if you need to <em>return</em> those results from a function? As the other answers have pointed out, you can't; you have to have your function accept and call a callback (or return a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"noreferrer\">Promise</a>). Here's a callback version:</p>\n\n<pre><code>function doSomethingWith(theArray, callback) {\n    var results = [];\n    var expecting = theArray.length;\n    theArray.forEach(function(entry, index) {\n        doSomethingAsync(entry, function(result) {\n            results[index] = result;\n            if (--expecting === 0) {\n                // Done!\n                callback(results);\n            }\n        });\n    });\n}\ndoSomethingWith(theArray, function(results) {\n    console.log(\"Results:\", results);\n});\n</code></pre>\n\n<p>Example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function doSomethingWith(theArray, callback) {\r\n    var results = [];\r\n    var expecting = theArray.length;\r\n    theArray.forEach(function(entry, index) {\r\n        doSomethingAsync(entry, function(result) {\r\n            results[index] = result;\r\n            if (--expecting === 0) {\r\n                // Done!\r\n                callback(results);\r\n            }\r\n        });\r\n    });\r\n}\r\ndoSomethingWith([1, 2, 3], function(results) {\r\n    console.log(\"Results:\", results);\r\n});\r\n\r\nfunction doSomethingAsync(value, callback) {\r\n    console.log(\"Starting async operation for \" + value);\r\n    setTimeout(function() {\r\n        console.log(\"Completing async operation for \" + value);\r\n        callback(value * 2);\r\n    }, Math.floor(Math.random() * 200));\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper {\r\n  max-height: 100% !important;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Or here's a version returning a <code>Promise</code> instead:</p>\n\n<pre><code>function doSomethingWith(theArray) {\n    return new Promise(function(resolve) {\n        var results = [];\n        var expecting = theArray.length;\n        theArray.forEach(function(entry, index) {\n            doSomethingAsync(entry, function(result) {\n                results[index] = result;\n                if (--expecting === 0) {\n                    // Done!\n                    resolve(results);\n                }\n            });\n        });\n    });\n}\ndoSomethingWith(theArray).then(function(results) {\n    console.log(\"Results:\", results);\n});\n</code></pre>\n\n<p><em>Of course, if <code>doSomethingAsync</code> passed us errors, we'd use <code>reject</code> to reject the promise when we got an error.)</em></p>\n\n<p>Example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function doSomethingWith(theArray) {\r\n    return new Promise(function(resolve) {\r\n        var results = [];\r\n        var expecting = theArray.length;\r\n        theArray.forEach(function(entry, index) {\r\n            doSomethingAsync(entry, function(result) {\r\n                results[index] = result;\r\n                if (--expecting === 0) {\r\n                    // Done!\r\n                    resolve(results);\r\n                }\r\n            });\r\n        });\r\n    });\r\n}\r\ndoSomethingWith([1, 2, 3]).then(function(results) {\r\n    console.log(\"Results:\", results);\r\n});\r\n\r\nfunction doSomethingAsync(value, callback) {\r\n    console.log(\"Starting async operation for \" + value);\r\n    setTimeout(function() {\r\n        console.log(\"Completing async operation for \" + value);\r\n        callback(value * 2);\r\n    }, Math.floor(Math.random() * 200));\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper {\r\n  max-height: 100% !important;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><em>(Or alternately, you could make a wrapper for <code>doSomethingAsync</code> that returns a promise, and then do the below...)</em></p>\n\n<p>If <code>doSomethingAsync</code> gives you a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"noreferrer\">Promise</a>, you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\" rel=\"noreferrer\"><code>Promise.all</code></a>:</p>\n\n<pre><code>function doSomethingWith(theArray) {\n    return Promise.all(theArray.map(function(entry) {\n        return doSomethingAsync(entry, function(result) {\n            results.push(result);\n        });\n    }));\n}\ndoSomethingWith(theArray).then(function(results) {\n    console.log(\"Results:\", results);\n});\n</code></pre>\n\n<p>Example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function doSomethingWith(theArray) {\r\n    return Promise.all(theArray.map(function(entry) {\r\n        return doSomethingAsync(entry, function(result) {\r\n            results.push(result);\r\n        });\r\n    }));\r\n}\r\ndoSomethingWith([1, 2, 3]).then(function(results) {\r\n    console.log(\"Results:\", results);\r\n});\r\n\r\nfunction doSomethingAsync(value) {\r\n    console.log(\"Starting async operation for \" + value);\r\n    return new Promise(function(resolve) {\r\n        setTimeout(function() {\r\n            console.log(\"Completing async operation for \" + value);\r\n            resolve(value * 2);\r\n        }, Math.floor(Math.random() * 200));\r\n    });\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper {\r\n  max-height: 100% !important;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Note that <code>Promise.all</code> resolves its promise with an array of the results of all of the promises you give it when they are all resolved, or rejects its promise when the <em>first</em> of the promises you give it rejects.</p>\n\n<h3>Series</h3>\n\n<p>Suppose you don't want the operations to be in parallel? If you want to run them one after another, you need to wait for each operation to complete before you start the next. Here's an example of a function that does that and calls a callback with the result:</p>\n\n<pre><code>function doSomethingWith(theArray, callback) {\n    var results = [];\n    doOne(0);\n    function doOne(index) {\n        if (index &lt; theArray.length) {\n            doSomethingAsync(theArray[index], function(result) {\n                results.push(result);\n                doOne(index + 1);\n            });\n        } else {\n            // Done!\n            callback(results);\n        }\n    }\n}\ndoSomethingWith(theArray, function(results) {\n    console.log(\"Results:\", results);\n});\n</code></pre>\n\n<p><em>(Since we're doing the work in series, we can just use <code>results.push(result)</code> since we know we won't get results out of order. In the above we could have used <code>results[index] = result;</code>, but in some of the following examples we don't have an index to use.)</em></p>\n\n<p>Example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function doSomethingWith(theArray, callback) {\r\n    var results = [];\r\n    doOne(0);\r\n    function doOne(index) {\r\n        if (index &lt; theArray.length) {\r\n            doSomethingAsync(theArray[index], function(result) {\r\n                results.push(result);\r\n                doOne(index + 1);\r\n            });\r\n        } else {\r\n            // Done!\r\n            callback(results);\r\n        }\r\n    }\r\n}\r\ndoSomethingWith([1, 2, 3], function(results) {\r\n    console.log(\"Results:\", results);\r\n});\r\n\r\nfunction doSomethingAsync(value, callback) {\r\n    console.log(\"Starting async operation for \" + value);\r\n    setTimeout(function() {\r\n        console.log(\"Completing async operation for \" + value);\r\n        callback(value * 2);\r\n    }, Math.floor(Math.random() * 200));\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper {\r\n  max-height: 100% !important;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><em>(Or, again, build a wrapper for <code>doSomethingAsync</code> that gives you a promise and do the below...)</em></p>\n\n<p>If <code>doSomethingAsync</code> gives you a Promise, if you can use ES2017+ syntax (perhaps with a transpiler like <a href=\"http://babeljs.io\" rel=\"noreferrer\">Babel</a>), you can use an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\" rel=\"noreferrer\"><code>async</code> function</a> with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\" rel=\"noreferrer\"><code>for-of</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\" rel=\"noreferrer\"><code>await</code></a>:</p>\n\n<pre><code>async function doSomethingWith(theArray) {\n    const results = [];\n    for (const entry of theArray) {\n        results.push(await doSomethingAsync(entry));\n    }\n    return results;\n}\ndoSomethingWith(theArray).then(results =&gt; {\n    console.log(\"Results:\", results);\n});\n</code></pre>\n\n<p>Example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>async function doSomethingWith(theArray) {\r\n    const results = [];\r\n    for (const entry of theArray) {\r\n        results.push(await doSomethingAsync(entry));\r\n    }\r\n    return results;\r\n}\r\ndoSomethingWith([1, 2, 3]).then(function(results) {\r\n    console.log(\"Results:\", results);\r\n});\r\n\r\nfunction doSomethingAsync(value) {\r\n    console.log(\"Starting async operation for \" + value);\r\n    return new Promise(function(resolve) {\r\n        setTimeout(function() {\r\n            console.log(\"Completing async operation for \" + value);\r\n            resolve(value * 2);\r\n        }, Math.floor(Math.random() * 200));\r\n    });\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper {\r\n  max-height: 100% !important;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>If you can't use ES2017+ syntax (yet), you can use a variation on the <a class='doc-link' href=\"https://stackoverflow.com/documentation/javascript/231/promises/5917/reduce-an-array-to-chained-promises#t=201705040835134513529\">\"Promise reduce\" pattern</a> (this is more complex than the usual Promise reduce because we're not passing the result from one into the next, but instead gathering up their results in an array):</p>\n\n<pre><code>function doSomethingWith(theArray) {\n    return theArray.reduce(function(p, entry) {\n        return p.then(function(results) {\n            return doSomethingAsync(entry).then(function(result) {\n                results.push(result);\n                return results;\n            });\n        });\n    }, Promise.resolve([]));\n}\ndoSomethingWith(theArray).then(function(results) {\n    console.log(\"Results:\", results);\n});\n</code></pre>\n\n<p>Example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function doSomethingWith(theArray) {\r\n    return theArray.reduce(function(p, entry) {\r\n        return p.then(function(results) {\r\n            return doSomethingAsync(entry).then(function(result) {\r\n                results.push(result);\r\n                return results;\r\n            });\r\n        });\r\n    }, Promise.resolve([]));\r\n}\r\ndoSomethingWith([1, 2, 3]).then(function(results) {\r\n    console.log(\"Results:\", results);\r\n});\r\n\r\nfunction doSomethingAsync(value) {\r\n    console.log(\"Starting async operation for \" + value);\r\n    return new Promise(function(resolve) {\r\n        setTimeout(function() {\r\n            console.log(\"Completing async operation for \" + value);\r\n            resolve(value * 2);\r\n        }, Math.floor(Math.random() * 200));\r\n    });\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper {\r\n  max-height: 100% !important;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>...which is less cumbersome with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" rel=\"noreferrer\">ES2015+ arrow functions</a>:</p>\n\n<pre><code>function doSomethingWith(theArray) {\n    return theArray.reduce((p, entry) =&gt; p.then(results =&gt; doSomethingAsync(entry).then(result =&gt; {\n        results.push(result);\n        return results;\n    })), Promise.resolve([]));\n}\ndoSomethingWith(theArray).then(results =&gt; {\n    console.log(\"Results:\", results);\n});\n</code></pre>\n\n<p>Example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function doSomethingWith(theArray) {\r\n    return theArray.reduce((p, entry) =&gt; p.then(results =&gt; doSomethingAsync(entry).then(result =&gt; {\r\n        results.push(result);\r\n        return results;\r\n    })), Promise.resolve([]));\r\n}\r\ndoSomethingWith([1, 2, 3]).then(function(results) {\r\n    console.log(\"Results:\", results);\r\n});\r\n\r\nfunction doSomethingAsync(value) {\r\n    console.log(\"Starting async operation for \" + value);\r\n    return new Promise(function(resolve) {\r\n        setTimeout(function() {\r\n            console.log(\"Completing async operation for \" + value);\r\n            resolve(value * 2);\r\n        }, Math.floor(Math.random() * 200));\r\n    });\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper {\r\n  max-height: 100% !important;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 157247,
      "name": "T.J. Crowder",
      "reputation": 557106
    }
  },
  {
    "soID": 3354511,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/3354511",
    "title": null,
    "body": "<p>This can now be done in Chrome, Safari, FF4+, and IE10pp4+!</p>\n\n<p>See this question's answer for more info:\n<a href=\"https://stackoverflow.com/questions/3338642/updating-address-bar-with-new-url-without-hash-or-reloading-the-page\">Updating address bar with new URL without hash or reloading the page</a></p>\n\n<p>Example:</p>\n\n<pre><code> function processAjaxData(response, urlPath){\n     document.getElementById(\"content\").innerHTML = response.html;\n     document.title = response.pageTitle;\n     window.history.pushState({\"html\":response.html,\"pageTitle\":response.pageTitle},\"\", urlPath);\n }\n</code></pre>\n\n<p>You can then use <code>window.onpopstate</code> to detect the back/forward button navigation:</p>\n\n<pre><code>window.onpopstate = function(e){\n    if(e.state){\n        document.getElementById(\"content\").innerHTML = e.state.html;\n        document.title = e.state.pageTitle;\n    }\n};\n</code></pre>\n\n<hr>\n\n<p>For a more in-depth look at manipulating browser history see <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history\" rel=\"noreferrer\">this MDN article</a>.</p>\n",
    "score": 1407,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 160173,
      "name": "David Murdoch",
      "reputation": 48644
    }
  },
  {
    "soID": 9772788,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/9772788",
    "title": null,
    "body": "<p>There are many answers, but none that mentions <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/create\" rel=\"noreferrer\">Object.create</a> from ECMAScript 5, which admittedly does not give you an exact copy, but sets the source as the prototype of the new object.</p>\n\n<p>Thus, this is not an exact answer to the question, but it is a one-line solution and thus elegant. And it works best for 2 cases:</p>\n\n<ol>\n<li>Where such inheritance is useful (duh!)</li>\n<li>Where the source object won't be modified, thus making the relation between the 2 objects a non issue.</li>\n</ol>\n\n<p>Example:</p>\n\n<pre><code>var foo = { a : 1 };\nvar bar = Object.create(foo);\nfoo.a; // 1\nbar.a; // 1\nfoo.a = 2;\nbar.a; // 2 - prototype changed\nbar.a = 3;\nfoo.a; // Still 2, since setting bar.a makes it an \"own\" property\n</code></pre>\n\n<p>Why do I consider this solution to be superior? It's native, thus no looping, no recursion. However, older browsers will need a polyfill.</p>\n",
    "score": 104,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12397882,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/12397882",
    "title": null,
    "body": "<p>These are all great answers, but I needed something a bit more robust, and thought you all might like to have what I created.</p>\n\n<p>It is a simple library method that does dissection and manipulation of URL parameters. The static method has the following sub methods that can be called on the subject URL:</p>\n\n<ul>\n<li>getHost</li>\n<li>getPath</li>\n<li>getHash</li>\n<li>setHash</li>\n<li>getParams</li>\n<li>getQuery</li>\n<li>setParam</li>\n<li>getParam</li>\n<li>hasParam</li>\n<li>removeParam</li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>URLParser(url).getParam('myparam1')\n</code></pre>\n\n<hr>\n\n<pre><code>var url = \"http://www.test.com/folder/mypage.html?myparam1=1&amp;myparam2=2#something\";\n\nfunction URLParser(u){\n    var path=\"\",query=\"\",hash=\"\",params;\n    if(u.indexOf(\"#\") &gt; 0){\n        hash = u.substr(u.indexOf(\"#\") + 1);\n        u = u.substr(0 , u.indexOf(\"#\"));\n    }\n    if(u.indexOf(\"?\") &gt; 0){\n        path = u.substr(0 , u.indexOf(\"?\"));\n        query = u.substr(u.indexOf(\"?\") + 1);\n        params= query.split('&amp;');\n    }else\n        path = u;\n    return {\n        getHost: function(){\n            var hostexp = /\\/\\/([\\w.-]*)/;\n            var match = hostexp.exec(path);\n            if (match != null &amp;&amp; match.length &gt; 1)\n                return match[1];\n            return \"\";\n        },\n        getPath: function(){\n            var pathexp = /\\/\\/[\\w.-]*(?:\\/([^?]*))/;\n            var match = pathexp.exec(path);\n            if (match != null &amp;&amp; match.length &gt; 1)\n                return match[1];\n            return \"\";\n        },\n        getHash: function(){\n            return hash;\n        },\n        getParams: function(){\n            return params\n        },\n        getQuery: function(){\n            return query;\n        },\n        setHash: function(value){\n            if(query.length &gt; 0)\n                query = \"?\" + query;\n            if(value.length &gt; 0)\n                query = query + \"#\" + value;\n            return path + query;\n        },\n        setParam: function(name, value){\n            if(!params){\n                params= new Array();\n            }\n            params.push(name + '=' + value);\n            for (var i = 0; i &lt; params.length; i++) {\n                if(query.length &gt; 0)\n                    query += \"&amp;\";\n                query += params[i];\n            }\n            if(query.length &gt; 0)\n                query = \"?\" + query;\n            if(hash.length &gt; 0)\n                query = query + \"#\" + hash;\n            return path + query;\n        },\n        getParam: function(name){\n            if(params){\n                for (var i = 0; i &lt; params.length; i++) {\n                    var pair = params[i].split('=');\n                    if (decodeURIComponent(pair[0]) == name)\n                        return decodeURIComponent(pair[1]);\n                }\n            }\n            console.log('Query variable %s not found', name);\n        },\n        hasParam: function(name){\n            if(params){\n                for (var i = 0; i &lt; params.length; i++) {\n                    var pair = params[i].split('=');\n                    if (decodeURIComponent(pair[0]) == name)\n                        return true;\n                }\n            }\n            console.log('Query variable %s not found', name);\n        },\n        removeParam: function(name){\n            query = \"\";\n            if(params){\n                var newparams = new Array();\n                for (var i = 0;i &lt; params.length;i++) {\n                    var pair = params[i].split('=');\n                    if (decodeURIComponent(pair[0]) != name)\n                          newparams .push(params[i]);\n                }\n                params = newparams;\n                for (var i = 0; i &lt; params.length; i++) {\n                    if(query.length &gt; 0)\n                        query += \"&amp;\";\n                    query += params[i];\n                }\n            }\n            if(query.length &gt; 0)\n                query = \"?\" + query;\n            if(hash.length &gt; 0)\n                query = query + \"#\" + hash;\n            return path + query;\n        },\n    }\n}\n\n\ndocument.write(\"Host: \" + URLParser(url).getHost() + '&lt;br&gt;');\ndocument.write(\"Path: \" + URLParser(url).getPath() + '&lt;br&gt;');\ndocument.write(\"Query: \" + URLParser(url).getQuery() + '&lt;br&gt;');\ndocument.write(\"Hash: \" + URLParser(url).getHash() + '&lt;br&gt;');\ndocument.write(\"Params Array: \" + URLParser(url).getParams() + '&lt;br&gt;');\ndocument.write(\"Param: \" + URLParser(url).getParam('myparam1') + '&lt;br&gt;');\ndocument.write(\"Has Param: \" + URLParser(url).hasParam('myparam1') + '&lt;br&gt;');\n\ndocument.write(url + '&lt;br&gt;');\n\n// Remove the first parameter\nurl = URLParser(url).removeParam('myparam1');\ndocument.write(url + ' - Remove the first parameter&lt;br&gt;');\n\n// Add a third parameter\nurl = URLParser(url).setParam('myparam3',3);\ndocument.write(url + ' - Add a third parameter&lt;br&gt;');\n\n// Remove the second parameter\nurl = URLParser(url).removeParam('myparam2');\ndocument.write(url + ' - Remove the second parameter&lt;br&gt;');\n\n// Add a hash\nurl = URLParser(url).setHash('newhash');\ndocument.write(url + ' - Set Hash&lt;br&gt;');\n\n// Remove the last parameter\nurl = URLParser(url).removeParam('myparam3');\ndocument.write(url + ' - Remove the last parameter&lt;br&gt;');\n\n// Remove a parameter that doesn't exist\nurl = URLParser(url).removeParam('myparam3');\ndocument.write(url + ' - Remove a parameter that doesn\\\"t exist&lt;br&gt;');\n</code></pre>\n",
    "score": 42,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 32541132,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/32541132",
    "title": null,
    "body": "<p>If you want to iterate over <strong><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty#Enumerable_attribute\" rel=\"nofollow\">non-enumerable properties</a></strong> as well, you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\" rel=\"nofollow\"><code>Object.getOwnPropertyNames(obj)</code></a> to return an array of all properties (enumerable or not) found directly upon a given object.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var obj = Object.create({}, {\r\n  // non-enumerable property\r\n  getFoo: {\r\n    value: function() { return this.foo; },\r\n    enumerable: false\r\n  }\r\n});\r\n\r\nobj.foo = 1; // enumerable property\r\n\r\nObject.getOwnPropertyNames(obj).forEach(function (name) {\r\n  document.write(name + ': ' + obj[name] + '&lt;br/&gt;');\r\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 165674,
      "name": "Dheeraj V.S.",
      "reputation": 11092
    }
  },
  {
    "soID": 3390426,
    "parentID": 3390396,
    "url": "https://stackoverflow.com/q/3390426",
    "title": null,
    "body": "<p>If you are interested in finding out whether a variable has been declared regardless of its value, then using the <code>in</code> operator is the safest way to go. Consider this example.</p>\n\n<pre><code>// global scope\nvar theFu; // theFu has been declared, but its value is undefined\ntypeof theFu; // \"undefined\"\n</code></pre>\n\n<p>But this may not be the intended result for some cases, since the variable or property was declared but just not initialized. Use the <code>in</code> operator for a more robust check.</p>\n\n<pre><code>\"theFu\" in window; // true\n\"theFoo\" in window; // false\n</code></pre>\n\n<p>If you are interested in knowing whether the variable hasn't been declared or has the value <code>undefined</code>, then use the <code>typeof</code> operator.</p>\n\n<pre><code>if (typeof myVar != 'undefined')\n</code></pre>\n\n<p>The <code>typeof</code> operator is guaranteed to return a string. Direct comparisons against <code>undefined</code> are troublesome as <code>undefined</code> can be overwritten. </p>\n\n<pre><code>window.undefined = \"omg\";\n\"omg\" == undefined // true\n</code></pre>\n\n<p>As @CMS pointed out, this has been patched in ECMAScript 5th ed., and <code>undefined</code> is non-writable.</p>\n\n<p><code>if (window.myVar)</code> will also include these falsy values, so it's not very robust:</p>\n\n<pre>\nfalse\n0\n\"\"\nNaN\nnull\nundefined\n</pre>\n\n<p>Thanks to @CMS for pointing out that your third case - <code>if (myVariable)</code> can also throw an error in two cases. The first is when the variable hasn't been defined which throws a <code>ReferenceError</code>. </p>\n\n<pre><code>// abc was never declared.\nif (abc) {\n    // ReferenceError: abc is not defined\n} \n</code></pre>\n\n<p>The other case is when the variable has been defined, but has a getter function which throws an error when invoked. For example,</p>\n\n<pre><code>// or it's a property that can throw an error\nObject.defineProperty(window, \"myVariable\", { \n    get: function() { throw new Error(\"W00t?\"); }, \n    set: undefined \n});\nif (myVariable) {\n    // Error: W00t?\n}\n</code></pre>\n",
    "score": 1811,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 165737,
      "name": "Anurag",
      "reputation": 104100
    }
  },
  {
    "soID": 5297222,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/5297222",
    "title": null,
    "body": "<p>I use regular expressions a lot, but not for that.</p>\n\n<p>It seems easier and more efficient to me to read the query string once in my application, and build an object from all the key/value pairs like:</p>\n\n<pre><code>var search = function() {\n  var s = window.location.search.substr(1),\n    p = s.split(/\\&amp;/), l = p.length, kv, r = {};\n  if (l === 0) {return false;}\n  while (l--) {\n    kv = p[l].split(/\\=/);\n    r[kv[0]] = decodeURIComponent(kv[1] || '') || true;\n  }\n  return r;\n}();\n</code></pre>\n\n<p>For a URL like <code>http://domain.com?param1=val1&amp;param2=val2</code> you can get their value later in your code as <code>search.param1</code> and <code>search.param2</code>.</p>\n",
    "score": 36,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 32750752,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/32750752",
    "title": null,
    "body": "<p><strong>Short answer</strong>: Your <code>foo()</code> method returns immediately, while the <code>$ajax()</code> call executes asynchronously <em>after the function returns</em>. The problem is then how or where to store the results retrieved by the async call once it returns.</p>\n\n<p>Several solutions have been given in this thread. Perhaps the easiest way is to pass an object to the <code>foo()</code> method, and to store the results in a member of that object after the async call completes.</p>\n\n<pre><code>function foo(result) {\n    $.ajax({\n        url: '...',\n        success: function(response) {\n            result.response = response;   // Store the async result\n        }\n    });\n}\n\nvar result = { response: null };   // Object to hold the async result\nfoo(result);                       // Returns before the async completes\n</code></pre>\n\n<p>Note that the call to <code>foo()</code> will still return nothing useful. However, the result of the async call will now be stored in <code>result.response</code>.</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 170383,
      "name": "David R Tribble",
      "reputation": 7406
    }
  },
  {
    "soID": 4158203,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/4158203",
    "title": null,
    "body": "<p>As of jQuery 1.4 you can pass attributes to a self-closed element like so:</p>\n\n<pre><code>jQuery('&lt;div/&gt;', {\n    id: 'foo',\n    href: 'http://google.com',\n    title: 'Become a Googler',\n    rel: 'external',\n    text: 'Go to Google!'\n}).appendTo('#mySelector');\n</code></pre>\n\n<p>Here it is in the <em><a href=\"http://api.jquery.com/jQuery/#jQuery2\">Docs</a></em></p>\n\n<p>Examples can be found at <em><a href=\"http://net.tutsplus.com/tutorials/javascript-ajax/jquery-1-4-released-the-15-new-features-you-must-know/\">jQuery 1.4 Released: The 15 New Features you Must Know </a></em>.</p>\n",
    "score": 1771,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 171056,
      "name": "ian",
      "reputation": 18962
    }
  },
  {
    "soID": 2067502,
    "parentID": 2067472,
    "url": "https://stackoverflow.com/q/2067502",
    "title": null,
    "body": "<p>Because you can ask the server to append a prefix to the returned JSON object. E.g</p>\n\n<p><code>function_prefix(json_object);</code></p>\n\n<p>in order for the browser to <code>eval</code> \"inline\" the JSON string as an expression. This trick makes it possible for the server to \"inject\" javascript code directly in the Client browser and this with bypassing the \"same origin\" restrictions.</p>\n\n<p>In other words, you can have <strong>cross-domain data exchange</strong>.</p>\n\n<hr>\n\n<p>Normally, <code>XMLHttpRequest</code> doesn't permit cross-domain data-exchange directly (one needs to go through a server in the same domain) whereas:</p>\n\n<p><code>&lt;script src=\"some_other_domain/some_data.js&amp;prefix=function_prefix</code>>` one can access data from a domain different than from the origin.</p>\n\n<hr>\n\n<p>Also worth noting: even though the server should be considered as \"trusted\" before attempting that sort of \"trick\", the side-effects of possible change in object format etc. can be contained.  If a <code>function_prefix</code> (i.e. a proper js function) is used to receive the JSON object, the said function can perform checks before accepting/further processing the returned data.</p>\n",
    "score": 33,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 171461,
      "name": "jldupont",
      "reputation": 46218
    }
  },
  {
    "soID": 3291856,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/3291856",
    "title": null,
    "body": "<p>A more object-oriented approach:</p>\n\n<pre><code>String.prototype.capitalize = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}\n</code></pre>\n\n<p>And then:</p>\n\n<pre><code>\"hello world\".capitalize();  =&gt;  \"Hello world\" \n</code></pre>\n",
    "score": 1075,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 171490,
      "name": "Steve Hansell",
      "reputation": 11459
    }
  },
  {
    "soID": 38898933,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/38898933",
    "title": null,
    "body": "<p>I will answer with a horrible-looking, hand-drawn comic. The second image is the reason why <code>result</code> is <code>undefined</code> in your code example.</p>\n\n<p><a href=\"https://i.imgur.com/v5ksbBC.jpg\"><img src=\"https://i.imgur.com/v5ksbBC.jpg\" alt=\"enter image description here\"></a></p>\n",
    "score": 71,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 171933,
      "name": "Johannes Fahrenkrug",
      "reputation": 26392
    }
  },
  {
    "soID": 32891337,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/32891337",
    "title": null,
    "body": "<p>I don't know if it will help anyone, but I'm using this to get today Date object.</p>\n\n<pre><code>new Date( 3600000*Math.floor(Date.now()/3600000) )\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 171991,
      "name": "marverix",
      "reputation": 1762
    }
  },
  {
    "soID": 17438012,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/17438012",
    "title": null,
    "body": "<p>I wrote the following set of functions for myself. Maybe it will help you too.</p>\n\n<pre><code>function float_exponent(number) {\n    exponent = 1;\n    while (number &lt; 1.0) {\n        exponent += 1\n        number *= 10\n    }\n    return exponent;\n}\nfunction format_float(number, extra_precision) {\n    precision = float_exponent(number) + (extra_precision || 0)\n    return number.toFixed(precision).split(/\\.?0+$/)[0]\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>format_float(1.01); // 1\nformat_float(1.06); // 1.1\nformat_float(0.126); // 0.13\nformat_float(0.000189); // 0.00019\n</code></pre>\n\n<p>For you case:</p>\n\n<pre><code>format_float(10, 1); // 10\nformat_float(9.1, 1); // 9.1\nformat_float(1.77777, 1); // 1.78\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 172144,
      "name": "vsvasya",
      "reputation": 532
    }
  },
  {
    "soID": 22264069,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/22264069",
    "title": null,
    "body": "<h2>The most elegant and fast way</h2>\n\n<pre><code>var arr = [1, 2, 3, 1023, 1024];\nfor (var value; value = arr.pop();) {\n    value + 1\n}\n</code></pre>\n\n<p><a href=\"http://jsperf.com/native-loop-performance/8\" rel=\"nofollow\">http://jsperf.com/native-loop-performance/8</a></p>\n\n<hr>\n\n<h2>Edited (because I was wrong)</h2>\n\n<hr>\n\n<p>Comparing methods for looping through an array of 100000 items and do a minimal operation with the new value each time.</p>\n\n<ul>\n<li><a href=\"http://jsben.ch/#/BQhED\" rel=\"nofollow\">http://jsben.ch/#/BQhED</a></li>\n</ul>\n\n<p><strong>Preparation:</strong></p>\n\n<pre><code>&lt;script src=\"//code.jquery.com/jquery-2.1.0.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    Benchmark.prototype.setup = function() {\n        // Fake function with minimal action on the value\n        var tmp = 0;\n        var process = function(value) {\n            tmp = value; // Hold a reference to the variable (prevent engine optimisation?)\n        };\n\n        // Declare the test Array\n        var arr = [];\n        for (var i = 0; i &lt; 100000; i++)\n            arr[i] = i;\n    };\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>Tests:</strong></p>\n\n<pre><code>&lt;a href=\"http://jsperf.com/native-loop-performance/16\" \n   title=\"http://jsperf.com/native-loop-performance/16\"\n&gt;&lt;img src=\"http://i.imgur.com/YTrO68E.png\" title=\"Hosted by imgur.com\" /&gt;&lt;/a&gt;\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 174449,
      "name": "molokoloco",
      "reputation": 3152
    }
  },
  {
    "soID": 7053197,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/7053197",
    "title": null,
    "body": "<p>As the accepted answer was very far from complete, I stitched together a \"ready\" function like <code>jQuery.ready()</code> based on jQuery 1.6.2 source:</p>\n\n<pre><code>var ready = (function(){\n\n    var readyList,\n        DOMContentLoaded,\n        class2type = {};\n        class2type[\"[object Boolean]\"] = \"boolean\";\n        class2type[\"[object Number]\"] = \"number\";\n        class2type[\"[object String]\"] = \"string\";\n        class2type[\"[object Function]\"] = \"function\";\n        class2type[\"[object Array]\"] = \"array\";\n        class2type[\"[object Date]\"] = \"date\";\n        class2type[\"[object RegExp]\"] = \"regexp\";\n        class2type[\"[object Object]\"] = \"object\";\n\n    var ReadyObj = {\n        // Is the DOM ready to be used? Set to true once it occurs.\n        isReady: false,\n        // A counter to track how many items to wait for before\n        // the ready event fires. See #6781\n        readyWait: 1,\n        // Hold (or release) the ready event\n        holdReady: function( hold ) {\n            if ( hold ) {\n                ReadyObj.readyWait++;\n            } else {\n                ReadyObj.ready( true );\n            }\n        },\n        // Handle when the DOM is ready\n        ready: function( wait ) {\n            // Either a released hold or an DOMready/load event and not yet ready\n            if ( (wait === true &amp;&amp; !--ReadyObj.readyWait) || (wait !== true &amp;&amp; !ReadyObj.isReady) ) {\n                // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n                if ( !document.body ) {\n                    return setTimeout( ReadyObj.ready, 1 );\n                }\n\n                // Remember that the DOM is ready\n                ReadyObj.isReady = true;\n                // If a normal DOM Ready event fired, decrement, and wait if need be\n                if ( wait !== true &amp;&amp; --ReadyObj.readyWait &gt; 0 ) {\n                    return;\n                }\n                // If there are functions bound, to execute\n                readyList.resolveWith( document, [ ReadyObj ] );\n\n                // Trigger any bound ready events\n                //if ( ReadyObj.fn.trigger ) {\n                //    ReadyObj( document ).trigger( \"ready\" ).unbind( \"ready\" );\n                //}\n            }\n        },\n        bindReady: function() {\n            if ( readyList ) {\n                return;\n            }\n            readyList = ReadyObj._Deferred();\n\n            // Catch cases where $(document).ready() is called after the\n            // browser event has already occurred.\n            if ( document.readyState === \"complete\" ) {\n                // Handle it asynchronously to allow scripts the opportunity to delay ready\n                return setTimeout( ReadyObj.ready, 1 );\n            }\n\n            // Mozilla, Opera and webkit nightlies currently support this event\n            if ( document.addEventListener ) {\n                // Use the handy event callback\n                document.addEventListener( \"DOMContentLoaded\", DOMContentLoaded, false );\n                // A fallback to window.onload, that will always work\n                window.addEventListener( \"load\", ReadyObj.ready, false );\n\n            // If IE event model is used\n            } else if ( document.attachEvent ) {\n                // ensure firing before onload,\n                // maybe late but safe also for iframes\n                document.attachEvent( \"onreadystatechange\", DOMContentLoaded );\n\n                // A fallback to window.onload, that will always work\n                window.attachEvent( \"onload\", ReadyObj.ready );\n\n                // If IE and not a frame\n                // continually check to see if the document is ready\n                var toplevel = false;\n\n                try {\n                    toplevel = window.frameElement == null;\n                } catch(e) {}\n\n                if ( document.documentElement.doScroll &amp;&amp; toplevel ) {\n                    doScrollCheck();\n                }\n            }\n        },\n        _Deferred: function() {\n            var // callbacks list\n                callbacks = [],\n                // stored [ context , args ]\n                fired,\n                // to avoid firing when already doing so\n                firing,\n                // flag to know if the deferred has been cancelled\n                cancelled,\n                // the deferred itself\n                deferred  = {\n\n                    // done( f1, f2, ...)\n                    done: function() {\n                        if ( !cancelled ) {\n                            var args = arguments,\n                                i,\n                                length,\n                                elem,\n                                type,\n                                _fired;\n                            if ( fired ) {\n                                _fired = fired;\n                                fired = 0;\n                            }\n                            for ( i = 0, length = args.length; i &lt; length; i++ ) {\n                                elem = args[ i ];\n                                type = ReadyObj.type( elem );\n                                if ( type === \"array\" ) {\n                                    deferred.done.apply( deferred, elem );\n                                } else if ( type === \"function\" ) {\n                                    callbacks.push( elem );\n                                }\n                            }\n                            if ( _fired ) {\n                                deferred.resolveWith( _fired[ 0 ], _fired[ 1 ] );\n                            }\n                        }\n                        return this;\n                    },\n\n                    // resolve with given context and args\n                    resolveWith: function( context, args ) {\n                        if ( !cancelled &amp;&amp; !fired &amp;&amp; !firing ) {\n                            // make sure args are available (#8421)\n                            args = args || [];\n                            firing = 1;\n                            try {\n                                while( callbacks[ 0 ] ) {\n                                    callbacks.shift().apply( context, args );//shifts a callback, and applies it to document\n                                }\n                            }\n                            finally {\n                                fired = [ context, args ];\n                                firing = 0;\n                            }\n                        }\n                        return this;\n                    },\n\n                    // resolve with this as context and given arguments\n                    resolve: function() {\n                        deferred.resolveWith( this, arguments );\n                        return this;\n                    },\n\n                    // Has this deferred been resolved?\n                    isResolved: function() {\n                        return !!( firing || fired );\n                    },\n\n                    // Cancel\n                    cancel: function() {\n                        cancelled = 1;\n                        callbacks = [];\n                        return this;\n                    }\n                };\n\n            return deferred;\n        },\n        type: function( obj ) {\n            return obj == null ?\n                String( obj ) :\n                class2type[ Object.prototype.toString.call(obj) ] || \"object\";\n        }\n    }\n    // The DOM ready check for Internet Explorer\n    function doScrollCheck() {\n        if ( ReadyObj.isReady ) {\n            return;\n        }\n\n        try {\n            // If IE is used, use the trick by Diego Perini\n            // http://javascript.nwbox.com/IEContentLoaded/\n            document.documentElement.doScroll(\"left\");\n        } catch(e) {\n            setTimeout( doScrollCheck, 1 );\n            return;\n        }\n\n        // and execute any waiting functions\n        ReadyObj.ready();\n    }\n    // Cleanup functions for the document ready method\n    if ( document.addEventListener ) {\n        DOMContentLoaded = function() {\n            document.removeEventListener( \"DOMContentLoaded\", DOMContentLoaded, false );\n            ReadyObj.ready();\n        };\n\n    } else if ( document.attachEvent ) {\n        DOMContentLoaded = function() {\n            // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n            if ( document.readyState === \"complete\" ) {\n                document.detachEvent( \"onreadystatechange\", DOMContentLoaded );\n                ReadyObj.ready();\n            }\n        };\n    }\n    function ready( fn ) {\n        // Attach the listeners\n        ReadyObj.bindReady();\n\n        var type = ReadyObj.type( fn );\n\n        // Add the callback\n        readyList.done( fn );//readyList is result of _Deferred()\n    }\n    return ready;\n})();\n</code></pre>\n\n<p>How to use:</p>\n\n<pre><code>&lt;script&gt;\n    ready(function(){\n        alert('It works!');\n    });\n    ready(function(){\n        alert('Also works!');\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>I am not sure how functional this code is, but it worked fine with my superficial tests. This took quite a while, so I hope you and others can benefit from it.</p>\n\n<p>PS.: I suggest <a href=\"http://closure-compiler.appspot.com/home\" rel=\"noreferrer\">compiling</a> it.</p>\n\n<p>Or you can use <a href=\"http://dustindiaz.com/smallest-domready-ever\" rel=\"noreferrer\">http://dustindiaz.com/smallest-domready-ever</a>:</p>\n\n<pre><code>function r(f){/in/.test(document.readyState)?setTimeout(r,9,f):f()}\nr(function(){/*code to run*/});\n</code></pre>\n\n<p>or the native function if you only need to support the new browsers</p>\n\n<pre><code>document.addEventListener('DOMContentLoaded',function(){/*fun code to run*/})\n</code></pre>\n",
    "score": 257,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 175071,
      "name": "Timo Huovinen",
      "reputation": 25283
    }
  },
  {
    "soID": 8740044,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/8740044",
    "title": null,
    "body": "<p>Use the while loop...</p>\n\n<pre><code>var i=0, item, items = ['one','two','three'];\nwhile(item = items[i++]){\n    console.log(item);\n}\n</code></pre>\n\n<p>logs: 'one','two','three'</p>\n\n<p>And for the reverse order, an even more efficient loop</p>\n\n<pre><code>var items = ['one','two','three'], i = items.length;\nwhile(i--){\n    console.log(items[i]);\n}\n</code></pre>\n\n<p>logs: 'three','two','one'</p>\n\n<p>Or the classical <code>for</code> loop</p>\n\n<pre><code>var items = ['one','two','three']\nfor(var i=0, l = items.length; i &lt; l; i++){\n    console.log(items[i]);\n}\n</code></pre>\n\n<p>logs: 'one','two','three'</p>\n\n<p>Reference:\n<a href=\"http://www.sitepoint.com/google-closure-how-not-to-write-javascript/\" rel=\"noreferrer\">http://www.sitepoint.com/google-closure-how-not-to-write-javascript/</a></p>\n",
    "score": 57,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 175071,
      "name": "Timo Huovinen",
      "reputation": 25283
    }
  },
  {
    "soID": 18379376,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/18379376",
    "title": null,
    "body": "<p>Since there is a complaint about using the prototype, and since using <code>indexOf</code> makes your code less readable, and since regexp is overkill:</p>\n\n<pre><code>function stringContains(inputString, stringToFind) {\n    return (inputString.indexOf(stringToFind) != -1);\n}\n</code></pre>\n\n<p>That is the compromise I ended up going for.</p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 178931,
      "name": "Tjaart",
      "reputation": 1375
    }
  },
  {
    "soID": 4439076,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/4439076",
    "title": null,
    "body": "<p>Roshambo jQuery method wasn't taking care of decode URL</p>\n\n<blockquote>\n  <p><a href=\"http://snipplr.com/view/26662/get-url-parameters-with-jquery--improved/\" rel=\"noreferrer\">http://snipplr.com/view/26662/get-url-parameters-with-jquery--improved/</a></p>\n</blockquote>\n\n<p>Just added that capability also while adding in  the return statement </p>\n\n<pre><code>return decodeURIComponent(results[1].replace(/\\+/g, \" \")) || 0;\n</code></pre>\n\n<p>Now you can find the updated gist:</p>\n\n<pre><code>$.urlParam = function(name){\nvar results = new RegExp('[\\\\?&amp;]' + name + '=([^&amp;#]*)').exec(window.location.href);\nif (!results) { return 0; }\nreturn decodeURIComponent(results[1].replace(/\\+/g, \" \")) || 0;\n}\n</code></pre>\n",
    "score": 35,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4261101,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/4261101",
    "title": null,
    "body": "<p>The problem with <code>for ... in ...</code> &mdash; and this only becomes a problem when a programmer doesn't really understand the language; it's not really a bug or anything &mdash; is that it iterates over <em>all</em> members of an object (well, all <em>enumerable</em> members, but that's a detail for now).  When you want to iterate over <em>just</em> the indexed properties of an array, the only guaranteed way to keep things semantically consistent is to use an integer index (that is, a <code>for (var i = 0; i &lt; array.length; ++i)</code> style loop).</p>\n\n<p>Any object can have arbitrary properties associated with it. There would be nothing terrible about loading additional properties onto an array instance, in particular. Code that wants to see <em>only</em> indexed array-like properties therefore <em>must</em> stick to an integer index. Code that is fully aware of what <code>for ... in</code> does and really <em>need</em> to see all properties, well then that's ok too.</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 182668,
      "name": "Pointy",
      "reputation": 279139
    }
  },
  {
    "soID": 2669708,
    "parentID": 2669690,
    "url": "https://stackoverflow.com/q/2669708",
    "title": null,
    "body": "<p>It prevents it from being used as the target of a simple <code>&lt;script&gt;</code> tag. (Well, it doesn't prevent it, but it makes it unpleasant.)  That way bad guys can't just put that script tag in their own site and rely on an active session to make it possible to fetch your content.</p>\n\n<p><em>edit</em> &mdash; note the comment (and other answers). The issue has to do with subverted built-in facilities, specifically the <code>Object</code> and <code>Array</code> constructors. Those can be altered such that otherwise innocuous JSON, when parsed, could trigger attacker code.</p>\n",
    "score": 56,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 182668,
      "name": "Pointy",
      "reputation": 279139
    }
  },
  {
    "soID": 10049330,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/10049330",
    "title": null,
    "body": "<pre><code>http://someurl.com?key=value&amp;keynovalue&amp;keyemptyvalue=&amp;&amp;keynovalue=nowhasvalue#somehash\n</code></pre>\n\n<ul>\n<li>Regular key/value pair (<code>?param=value</code>)</li>\n<li>Keys w/o value (<code>?param</code> : no equal sign or value)</li>\n<li>Keys w/ empty value (<code>?param=</code> : equal sign, but no value to right of equal sign)</li>\n<li>Repeated Keys (<code>?param=1&amp;param=2</code>)</li>\n<li>Removes Empty Keys (<code>?&amp;&amp;</code> : no key or value)</li>\n</ul>\n\n<h3>Code:</h3>\n\n<ul>\n<li><pre><code>var queryString = window.location.search || '';\nvar keyValPairs = [];\nvar params      = {};\nqueryString     = queryString.substr(1);\n\nif (queryString.length)\n{\n   keyValPairs = queryString.split('&amp;');\n   for (pairNum in keyValPairs)\n   {\n      var key = keyValPairs[pairNum].split('=')[0];\n      if (!key.length) continue;\n      if (typeof params[key] === 'undefined')\n         params[key] = [];\n      params[key].push(keyValPairs[pairNum].split('=')[1]);\n   }\n}\n</code></pre></li>\n</ul>\n\n<h3>How to Call:</h3>\n\n<ul>\n<li><pre><code>params['key'];  // returns an array of values (1..n)\n</code></pre></li>\n</ul>\n\n<h3>Output:</h3>\n\n<ul>\n<li><pre><code>key            [\"value\"]\nkeyemptyvalue  [\"\"]\nkeynovalue     [undefined, \"nowhasvalue\"]\n</code></pre></li>\n</ul>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19155242,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/19155242",
    "title": null,
    "body": "<p>This was a good <a href=\"https://stackoverflow.com/a/11810957/185565\">https://stackoverflow.com/a/11810957/185565</a> poor man's solution. One comment considered a counter to bail out in case of emergency. This is my modification.</p>\n\n<pre><code>function doTheMagic(counter) {\n  alert(\"It worked on \" + counter);\n}\n\n// wait for document ready then call handler function\nvar checkLoad = function(counter) {\n  counter++;\n  if (document.readyState != \"complete\" &amp;&amp; counter&lt;1000) {\n    var fn = function() { checkLoad(counter); };\n    setTimeout(fn,10);\n  } else doTheMagic(counter);\n};\ncheckLoad(0);\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 185565,
      "name": "Whome",
      "reputation": 6022
    }
  },
  {
    "soID": 18268689,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/18268689",
    "title": null,
    "body": "<p>I've just made a small <a href=\"https://github.com/ern0/jquery.create\" rel=\"nofollow noreferrer\">jQuery plugin</a> for that.</p>\n\n<p>It follows your syntax:</p>\n\n<pre><code>var myDiv = $.create(\"div\");\n</code></pre>\n\n<p><strong>DOM</strong> node ID can be specified as second parameter:</p>\n\n<pre><code>var secondItem = $.create(\"div\",\"item2\");\n</code></pre>\n\n<p>Is it serious? No. But this syntax is better than <em>$(\"&lt;div&gt;&lt;/div&gt;\")</em>, and it's a very good value for that money.</p>\n\n<p><em>(Answer partially copied from: <a href=\"https://stackoverflow.com/questions/268490/jquery-document-createelement-equivalent/18255277#18255277\">jQuery document.createElement equivalent?</a>)</em></p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 185881,
      "name": "ern0",
      "reputation": 2625
    }
  },
  {
    "soID": 32623000,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/32623000",
    "title": null,
    "body": "<p>the following worked for me:</p>\n\n<pre><code>$.trim($('#dropdownId option:selected').html())\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 191647,
      "name": "Mohammad Dayyan",
      "reputation": 5722
    }
  },
  {
    "soID": 15403248,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/15403248",
    "title": null,
    "body": "<p>Short answer: It's just not worth it.</p>\n\n<hr>\n\n<p>Longer answer: It's just not worth it, even if sequential element order and optimal performance aren't required.</p>\n\n<hr>\n\n<p>Long answer: It's just not worth it, for reasons following:</p>\n\n<ul>\n<li>Using <code>for (var i in array) {}</code> will cause 'array' to be interpreted as any other <em>pure</em> object, traversing the object property chain and ultimately performing slower than an index-based <code>for</code> loop.</li>\n<li>It's not guaranteed to return the object properties in sequential order as one might expect.</li>\n<li>Using <code>hasOwnProperty()</code> or <code>isNaN()</code> checks to filter the object properties is an additional overhead causing it to perform (even more) slower. Also, introducing such additional logic negates the key reason for using it in the first place, i.e. because of the more concise format.</li>\n</ul>\n\n<p>For these reasons an acceptable trade-off between performance and convenience doesn't even exist. Really, there's no benefit unless the intent is to treat the array as a <em>pure</em> object and performs operations on the array object's properties.</p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 192886,
      "name": "WynandB",
      "reputation": 957
    }
  },
  {
    "soID": 19818854,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/19818854",
    "title": null,
    "body": "<p>Here is a <a href=\"http://gruntjs.com/\" rel=\"nofollow\">Grunt</a> plugin allowing you to use <code>@import \"path/to/file.js\";</code> syntax in any file including JavaScript files. It can be paired with uglify or watch or any other plugin.</p>\n\n<p>It can be installed with npm install: <a href=\"https://npmjs.org/package/grunt-import\" rel=\"nofollow\">https://npmjs.org/package/grunt-import</a></p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 193400,
      "name": "Marcin",
      "reputation": 2832
    }
  },
  {
    "soID": 26805879,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/26805879",
    "title": null,
    "body": "<p>In case if you need to use CSS class as jQuery selector you can do following:</p>\n\n<pre><code>$(document).ready(function () {\n        $('.myOptionCheckbox').change(function () {            \n            if ($(this).prop('checked') == true) {\n                console.log(\"checked\");           \n            }\n            else {\n                console.log(\"unchecked\");                \n            }\n        });\n    });\n</code></pre>\n\n<p>It works fine for <code>checkboxes</code> and <code>radioboxes</code> as well.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4261113,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/4261113",
    "title": null,
    "body": "<p>It's not <em>necessarily</em> bad (based on what you're doing), but in the case of arrays, if something has been added to <code>Array.prototype</code>, then you're going to get strange results.  Where you'd expect this loop to run three times:</p>\n\n<pre><code>var arr = ['a','b','c'];\nfor (var key in arr) { ... }\n</code></pre>\n\n<p>If a function called <code>helpfulUtilityMethod</code> has been added to <code>Array</code>'s <code>prototype</code>, then your loop would end up running four times: <code>key</code> would be <code>0</code>, <code>1</code>, <code>2</code>, and <code>helpfulUtilityMethod</code>.  If you were only expecting integers, oops.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 201952,
      "name": "josh3736",
      "reputation": 84809
    }
  },
  {
    "soID": 2341539,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/2341539",
    "title": null,
    "body": "<p>In addition to Thevs answer:</p>\n\n<pre><code>var o = {};\nalert($.toJSON(o)=='{}'); // true\n\nvar o = {a:1};\nalert($.toJSON(o)=='{}'); // false\n</code></pre>\n\n<p>it's jquery + jquery.json</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 202550,
      "name": "starikovs",
      "reputation": 1486
    }
  },
  {
    "soID": 6024310,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/6024310",
    "title": null,
    "body": "<p>There is a way to do it where you have very little implicit scope in your loop and do away with extra variables.</p>\n\n<pre><code>var i = 0,\n     item;\n\n// note this is weak to sparse arrays or falsey values\nfor ( ; item = myStringArray[i++] ; ){ \n    item; // This is the string at the index.\n}\n</code></pre>\n\n<p>Or if you really want to get the id and have a really classical <code>for</code> loop:</p>\n\n<pre><code>var i = 0,\n    len = myStringArray.length; // cache the length\n\nfor ( ; i &lt; len ; i++ ){\n    myStringArray[i]; // Don't use this if you plan on changing the length of the array\n}\n</code></pre>\n\n<p>Modern browsers all support iterator methods <code>forEach</code>, <code>map</code>, <code>reduce</code>, <code>filter</code> and a host of other methods on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array?redirectlocale=en-US&amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray\" rel=\"noreferrer\">Array prototype</a>. </p>\n",
    "score": 24,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 204210,
      "name": "Gabriel",
      "reputation": 10753
    }
  },
  {
    "soID": 26043320,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/26043320",
    "title": null,
    "body": "<pre><code>var str = \"ruby java\";\n\nalert(str.charAt(0).toUpperCase() + str.substring(1));\n</code></pre>\n\n<p>it will return <code>\"Ruby java\"</code></p>\n\n<p><a href=\"http://jsfiddle.net/amitpandya/908c8e2v/\">http://jsfiddle.net/amitpandya/908c8e2v/</a></p>\n\n<p><a href=\"http://jsfiddle.net/amitpandya/908c8e2v/embedded/result/\">result link in jsfiddle</a></p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 206401,
      "name": "AMIC MING",
      "reputation": 4854
    }
  },
  {
    "soID": 23428240,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/23428240",
    "title": null,
    "body": "<p><a href=\"https://nodejstools.codeplex.com/\">Node.js Tools for Visual Studio</a> 2012 or 2013 includes a debugger.  The overview <a href=\"http://www.hanselman.com/blog/IntroducingNodejsToolsForVisualStudio.aspx\">here</a> states \"Node.js Tools for Visual Studio includes complete support for debugging node apps.\". Being new to Node.js, but having a background in .NET, I've found this add in to be a great way to debug Node.js applications. </p>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 209696,
      "name": "John81",
      "reputation": 620
    }
  },
  {
    "soID": 5397515,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/5397515",
    "title": null,
    "body": "<p>You can use <a href=\"http://underscorejs.org/#isEmpty\" rel=\"noreferrer\">Underscore.js</a>.</p>\n\n<pre><code>_.isEmpty({}); // true\n</code></pre>\n",
    "score": 173,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 209729,
      "name": "Baggz",
      "reputation": 12025
    }
  },
  {
    "soID": 19970452,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/19970452",
    "title": null,
    "body": "<p>i found a more elegant solution, maybe a little non-topic related because it uses PHP, but im sure it will be useful and cuteness* for some of yours...</p>\n\n<p>this <strong>javascript code</strong> should stay inside script tags</p>\n\n<pre><code>var html=&lt;?php echo json_encode(\"\n\n        &lt;div class=container&gt;\n            &lt;div class=area1&gt;\n                xxx\n            &lt;/div&gt;\n            &lt;div class=area2&gt;\n                \".$someVar.\"\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n\"); ?&gt;\n</code></pre>\n\n<p>in your <strong>output html</strong> you will see something like</p>\n\n<pre><code>var html=\"\\r\\n\\r\\n\\t\\t\\t&lt;div class=container&gt;\\r\\n\\t\\t\\t\\t&lt;div class=area1&gt;\\r\\n\\t\\t\\t\\t\\txxx\\r\\n\\t\\t\\t\\t&lt;\\/div&gt;\\r\\n\\t\\t\\t\\t&lt;div class=area2&gt;\\r\\n\\t\\t\\t\\t\\t44\\r\\n\\t\\t\\t\\t&lt;\\/div&gt;\\r\\n\\t\\t\\t&lt;\\/div&gt;\\r\\n\\r\\n\\t\\t\";  \n</code></pre>\n\n<p>&nbsp;</p>\n\n<hr>\n\n<p>and <em>et voilà!</em>, it gives you code readability in your file.</p>\n\n<p>pD: this sample uses json_encode() PHP function, but certainly there are function equivalents for ASP, Ruby and JSP langs.</p>\n\n<p>pD: however, this solution have his limitations too, one of them is you cannot use javascript variables inside the encapsulated code.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 209797,
      "name": "AgelessEssence",
      "reputation": 2944
    }
  },
  {
    "soID": 18671891,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/18671891",
    "title": null,
    "body": "<p>There are many solutions to retrieve URI query values, I prefer this one because it's short and works great:</p>\n\n<pre><code>function get(name){\n   if(name=(new RegExp('[?&amp;]'+encodeURIComponent(name)+'=([^&amp;]*)')).exec(location.search))\n      return decodeURIComponent(name[1]);\n}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15602970,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/15602970",
    "title": null,
    "body": "<p>This should do:</p>\n\n<pre><code>xhr = new XMLHttpRequest();\nxhr.open(\"GET\", \"/soap/ajax/11.0/connection.js\", false);\nxhr.send();\neval(xhr.responseText);\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 214046,
      "name": "tggagne",
      "reputation": 1514
    }
  },
  {
    "soID": 14994393,
    "parentID": 14994391,
    "url": "https://stackoverflow.com/q/14994393",
    "title": null,
    "body": "<h2>Imperative → declarative</h2>\n\n<p>In jQuery, <em>selectors</em> are used to find <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\" rel=\"nofollow noreferrer\">DOM</a> elements and then bind/register event handlers to them. When an event triggers, that (imperative) code executes to update/change the DOM.</p>\n\n<p>In AngularJS, you want to think about <strong>views</strong> rather than DOM elements. Views are (declarative) HTML that contain AngularJS <strong>directives</strong>. Directives set up the event handlers behind the scenes for us and give us dynamic databinding. Selectors are rarely used, so the need for IDs (and some types of classes) is greatly diminished. Views are tied to <strong>models</strong> (via scopes). Views are a projection of the model. Events change models (that is, data, scope properties), and the views that project those models update \"automatically.\"</p>\n\n<p>In AngularJS, think about models, rather than jQuery-selected DOM elements that hold your data. Think about views as projections of those models, rather than registering callbacks to manipulate what the user sees.</p>\n\n<h2>Separation of concerns</h2>\n\n<p>jQuery employs <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\" rel=\"nofollow noreferrer\">unobtrusive JavaScript</a> - behavior (JavaScript) is separated from the structure (HTML).</p>\n\n<p>AngularJS uses <strong>controllers</strong> and directives (each of which can have their own controller, and/or compile and linking functions) to remove behavior from the view/structure (HTML).  Angular also has <strong>services</strong> and <strong>filters</strong> to help separate/organize your application.</p>\n\n<p>See also <a href=\"https://stackoverflow.com/a/14346528/215945\">https://stackoverflow.com/a/14346528/215945</a></p>\n\n<h2>Application design</h2>\n\n<p>One approach to designing an AngularJS application:</p>\n\n<ol>\n<li>Think about your models. Create services or your own JavaScript objects for those models.</li>\n<li>Think about how you want to present your models -- your views. Create HTML templates for each view, using the necessary directives to get dynamic databinding.</li>\n<li>Attach a controller to each view (using ng-view and routing, or ng-controller). Have the controller find/get only whatever model data the view needs to do its job. Make controllers as thin as possible.</li>\n</ol>\n\n<h2>Prototypal inheritance</h2>\n\n<p>You can do a lot with jQuery without knowing about how JavaScript prototypal inheritance works. When developing AngularJS applications, you will avoid some common pitfalls if you have a good understanding of JavaScript inheritance. Recommended reading: <a href=\"https://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs\">What are the nuances of scope prototypal / prototypical inheritance in AngularJS?</a></p>\n",
    "score": 410,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 215945,
      "name": "Mark Rajcok",
      "reputation": 248660
    }
  },
  {
    "soID": 2122234,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/2122234",
    "title": null,
    "body": "<p>I just wrote this JavaScript code (using <a href=\"http://en.wikipedia.org/wiki/Prototype_JavaScript_Framework\" rel=\"noreferrer\">Prototype</a> for <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\" rel=\"noreferrer\">DOM</a> manipulation):</p>\n\n<pre><code>var require = (function() {\n    var _required = {};\n    return (function(url, callback) {\n        if (typeof url == 'object') {\n            // We've (hopefully) got an array: time to chain!\n            if (url.length &gt; 1) {\n                // Load the nth file as soon as everything up to the\n                // n-1th one is done.\n                require(url.slice(0, url.length - 1), function() {\n                    require(url[url.length - 1], callback);\n                });\n            } else if (url.length == 1) {\n                require(url[0], callback);\n            }\n            return;\n        }\n        if (typeof _required[url] == 'undefined') {\n            // Haven't loaded this URL yet; gogogo!\n            _required[url] = [];\n\n            var script = new Element('script', {\n                src: url,\n                type: 'text/javascript'\n            });\n            script.observe('load', function() {\n                console.log(\"script \" + url + \" loaded.\");\n                _required[url].each(function(cb) {\n                    cb.call(); // TODO: does this execute in the right context?\n                });\n                _required[url] = true;\n            });\n\n            $$('head')[0].insert(script);\n        } else if (typeof _required[url] == 'boolean') {\n            // We already loaded the thing, so go ahead.\n            if (callback) {\n                callback.call();\n            }\n            return;\n        }\n\n        if (callback) {\n            _required[url].push(callback);\n        }\n    });\n})();\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&lt;script src=\"prototype.js\"&gt;&lt;/script&gt;\n&lt;script src=\"require.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    require(['foo.js','bar.js'], function () {\n        /* Use foo.js and bar.js here */\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>Gist: <a href=\"http://gist.github.com/284442\" rel=\"noreferrer\">http://gist.github.com/284442</a>.</p>\n",
    "score": 31,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 216728,
      "name": "nornagon",
      "reputation": 7070
    }
  },
  {
    "soID": 5277424,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/5277424",
    "title": null,
    "body": "<p>There is built-in command line <a href=\"https://c9.io/\" rel=\"nofollow noreferrer\">debugger client</a> within Node.js. Cloud 9 IDE have also pretty nice (visual) <a href=\"https://nodejs.org/api/debugger.html\" rel=\"nofollow noreferrer\">debugger</a>.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 217288,
      "name": "yojimbo87",
      "reputation": 39835
    }
  },
  {
    "soID": 5511507,
    "parentID": 2353818,
    "url": "https://stackoverflow.com/q/5511507",
    "title": null,
    "body": "<p><strong>Stack Overflow Documentation</strong></p>\n\n<ul>\n<li><a class='doc-link' href=\"https://stackoverflow.com/documentation/node.js/340/getting-started-with-node-js\">Getting started with Node.js</a></li>\n</ul>\n\n<p><strong>Tutorials</strong></p>\n\n<ul>\n<li><a href=\"http://nodeschool.io/\" rel=\"noreferrer\">NodeSchool.io interactive lessons</a></li>\n<li><a href=\"https://github.com/maxogden/art-of-node/#the-art-of-node\" rel=\"noreferrer\">The Art of Node (an introduction to Node.js)</a></li>\n<li><a href=\"http://www.nodebeginner.org/#hello-world\" rel=\"noreferrer\">Hello World</a></li>\n<li><a href=\"http://www.nodebeginner.org/#building-the-application-stack\" rel=\"noreferrer\">Hello World Web Server</a> (paid)</li>\n<li><a href=\"http://nodeguide.com/\" rel=\"noreferrer\">Node.js guide</a></li>\n<li><a href=\"http://howtonode.org/express-mongodb\" rel=\"noreferrer\">Build a blog with Node.js, express and MongoDB</a></li>\n<li><a href=\"http://net.tutsplus.com/tutorials/javascript-ajax/node-js-for-beginners/\" rel=\"noreferrer\">Node.js for Beginners</a></li>\n<li><a href=\"http://javascriptissexy.com/learn-node-js-completely-and-with-confidence/\" rel=\"noreferrer\">Learn Node.js Completely and with Confidence</a></li>\n<li><a href=\"http://blog.modulus.io/absolute-beginners-guide-to-nodejs\" rel=\"noreferrer\">Absolute Beginners Guide To Node.js</a></li>\n<li><a href=\"http://www.journaldev.com/7462/node-js-processing-model-single-threaded-model-with-event-loop-architecture\" rel=\"noreferrer\">Node JS Processing Model – Single Threaded Model with Event Loop Architecture</a></li>\n<li><a href=\"https://blog.risingstack.com/node-hero-tutorial-getting-started-with-node-js/\" rel=\"noreferrer\">RisingStack's Node Hero Series</a></li>\n<li><a href=\"https://hackr.io/tutorials/learn-node-js\" rel=\"noreferrer\">Great Node.js tutorials voted by the programming community</a></li>\n<li><a href=\"http://www.nodejsrecipes.com/\" rel=\"noreferrer\">Node.js Recipes</a></li>\n</ul>\n\n<p><strong>Developer Sites</strong></p>\n\n<ul>\n<li><a href=\"http://www.joyent.com/developers/node\" rel=\"noreferrer\">Joyent's developer site for node</a></li>\n</ul>\n\n<p><strong>Videos</strong></p>\n\n<ul>\n<li><a href=\"http://nodetuts.com/\" rel=\"noreferrer\">Node Tuts</a> (Node.js video tutorials)</li>\n<li><a href=\"https://vimeo.com/thenativeweb\" rel=\"noreferrer\">Einführung in Node.js (in German)</a></li>\n<li><a href=\"http://www.youtube.com/watch?v=jo_B4LTHi3I\" rel=\"noreferrer\">Introduction to Node.js with Ryan Dahl</a></li>\n<li><a href=\"http://www.infoq.com/presentations/nodejs\" rel=\"noreferrer\">Node.js: Asynchronous Purity Leads to Faster Development</a></li>\n<li><a href=\"http://www.infoq.com/presentations/Parallel-Programming-with-Nodejs\" rel=\"noreferrer\">Parallel Programming with Node.js</a></li>\n<li><a href=\"http://vimeo.com/18077379\" rel=\"noreferrer\">Server-side JavaScript with Node, Connect &amp; Express</a></li>\n<li><a href=\"http://www.lynda.com/Nodejs-tutorials/Nodejs-First-Look/101554-2.html\" rel=\"noreferrer\">Node.js First Look</a></li>\n<li><a href=\"http://www.youtube.com/watch?v=0_GNHWZHc-o\" rel=\"noreferrer\">Node.js with MongoDB</a></li>\n<li><a href=\"http://www.youtube.com/watch?v=F6k8lTrAE2g\" rel=\"noreferrer\">Ryan Dahl's Google Tech Talk</a></li>\n<li><a href=\"http://node.codeschool.com/levels/1\" rel=\"noreferrer\">Real Time Web with Node.js</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PL6gx4Cwl9DGBMdkKFn3HasZnnAqVjzHn_\" rel=\"noreferrer\">Node.js Tutorials for Beginners</a></li>\n<li><a href=\"http://www.pluralsight.com/search/?searchTerm=Node.js\" rel=\"noreferrer\">Pluralsight courses (paid)</a></li>\n<li><a href=\"https://www.google.co.in/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwj6oMvR35nTAhWFuY8KHfC-BFoQFggZMAA&amp;url=https%3A%2F%2Fwww.udemy.com%2Funderstand-nodejs%2F&amp;usg=AFQjCNF3WkS8cFyYrTgzgd5V_S1ANKkZJw&amp;sig2=rD4t8JYDPvQKjwAMzQnH7Q\" rel=\"noreferrer\">Udemy Learn and understand Nodejs (paid)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=-u-j7uqU7sI&amp;list=PL6gx4Cwl9DGBMdkKFn3HasZnnAqVjzHn_\" rel=\"noreferrer\">The New Boston</a></li>\n</ul>\n\n<p><strong>Screencasts</strong></p>\n\n<ul>\n<li><a href=\"http://learnallthenodes.com\" rel=\"noreferrer\">Learn All The Nodes</a></li>\n<li><a href=\"http://nodetuts.com/\" rel=\"noreferrer\">Node Tuts</a></li>\n<li><a href=\"https://vimeo.com/thenativeweb\" rel=\"noreferrer\">Einführung in Node.js (in German)</a></li>\n<li><a href=\"http://nodecasts.net/\" rel=\"noreferrer\">NodeCasts</a></li>\n</ul>\n\n<p><strong>Books</strong></p>\n\n<ul>\n<li><a href=\"http://nodebeginner.org/\" rel=\"noreferrer\">The Node Beginner Book</a></li>\n<li><a href=\"https://github.com/tj/masteringnode\" rel=\"noreferrer\">Mastering Node.js</a></li>\n<li><a href=\"http://chimera.labs.oreilly.com/books/1234000001808/index.html\" rel=\"noreferrer\">Up and Running with Node.js</a></li>\n<li><a href=\"http://www.manning.com/cantelon/\" rel=\"noreferrer\">Node.js in Action</a></li>\n<li><a href=\"http://amzn.com/B008Z5OEUY\" rel=\"noreferrer\">Smashing Node.js: JavaScript Everywhere</a></li>\n<li><a href=\"http://www.amazon.de/dp/389864829X\" rel=\"noreferrer\">Node.js &amp; Co. (in German)</a></li>\n<li><a href=\"http://nodejsbook.io/\" rel=\"noreferrer\">Sam's Teach Yourself Node.js in 24 Hours</a></li>\n<li><a href=\"http://jsbooks.revolunet.com/\" rel=\"noreferrer\">Most detailed list of free JavaScript Books</a></li>\n<li><a href=\"http://book.mixu.net/node/index.html\" rel=\"noreferrer\">Mixu's Node Book</a></li>\n<li><a href=\"http://pragprog.com/book/jwnode/node-js-the-right-way\" rel=\"noreferrer\">Node.js the Right Way: Practical, Server-Side JavaScript That Scale</a></li>\n<li><a href=\"https://leanpub.com/webdevelopmentwithnodejs\" rel=\"noreferrer\">Beginning Web Development with Node.js</a></li>\n<li><a href=\"http://www.packtpub.com/node-javascript-web-development/book\" rel=\"noreferrer\">Node Web Development</a></li>\n<li><a href=\"http://node.codeschool.com/\" rel=\"noreferrer\">NodeJS for Righteous Universal Domination!</a></li>\n</ul>\n\n<p><strong>Courses</strong></p>\n\n<ul>\n<li><a href=\"http://node.codeschool.com/\" rel=\"noreferrer\">Real Time Web with Node.js</a></li>\n<li><a href=\"http://www.develop.com/training-course/nodejs-featuring-node-npm-express-mocha-mongodb-with-mongoose\" rel=\"noreferrer\">Essential Node.js from DevelopMentor</a></li>\n</ul>\n\n<p><strong>Blogs</strong></p>\n\n<ul>\n<li><a href=\"http://blog.nodejs.org/\" rel=\"noreferrer\">The Node.js blog</a></li>\n<li><a href=\"http://howtonode.org/\" rel=\"noreferrer\">How To Node</a></li>\n<li><a href=\"http://dailyjs.com/\" rel=\"noreferrer\">DailyJS</a></li>\n<li><a href=\"http://blog.nodejitsu.com/\" rel=\"noreferrer\">Nodejitsu blog</a></li>\n<li><a href=\"http://www.wilcoxd.com/whitepapers/node_js/\" rel=\"noreferrer\">Ryan Wilcox's Whitepaper</a></li>\n<li><a href=\"http://www.devthought.com/\" rel=\"noreferrer\">devthought</a></li>\n</ul>\n\n<p><strong>Podcasts</strong></p>\n\n<ul>\n<li><a href=\"http://nodeup.com/\" rel=\"noreferrer\">NodeUp</a></li>\n</ul>\n\n<p><strong>JavaScript resources</strong></p>\n\n<ul>\n<li><a href=\"https://www.youtube.com/playlist?list=PL7664379246A246CB\" rel=\"noreferrer\">Crockford's videos</a> (must see!)</li>\n<li><a href=\"http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/\" rel=\"noreferrer\">Essential JavaScript Design Patterns For Beginners</a></li>\n<li><a href=\"http://bonsaiden.github.com/JavaScript-Garden/\" rel=\"noreferrer\">JavaScript garden</a></li>\n<li><a href=\"http://oreilly.com/catalog/9780596806767\" rel=\"noreferrer\">JavaScript Patterns</a> book</li>\n<li><a href=\"http://oreilly.com/catalog/9780596517748/\" rel=\"noreferrer\">JavaScript: The Good Parts</a> book</li>\n</ul>\n\n<p><strong>Node.js Modules</strong></p>\n\n<ul>\n<li><a href=\"http://npmjs.org/\" rel=\"noreferrer\">Search for registered Node.js modules</a></li>\n<li><a href=\"https://github.com/sindresorhus/awesome-nodejs\" rel=\"noreferrer\">A curated list of awesome Node.js libraries</a></li>\n<li><a href=\"https://github.com/joyent/node/wiki/modules\" rel=\"noreferrer\">Wiki List on GitHub/Joyent/Node.js</a> (start here last!)</li>\n</ul>\n\n<p><strong>Other</strong></p>\n\n<ul>\n<li><a href=\"http://jsapp.us/\" rel=\"noreferrer\">JSApp.US - like jsfiddle, but for Node.js</a></li>\n<li><a href=\"https://www.ebayopensource.org/index.php/VJET/NodeJS\" rel=\"noreferrer\">Node with VJET JS (for Eclipse IDE)</a></li>\n<li>Production sites with published source:\n\n<ul>\n<li><a href=\"http://nodeknockout.com/\" rel=\"noreferrer\">Node Knockout Hackathon</a> <a href=\"https://github.com/nko3/website\" rel=\"noreferrer\">(source)</a></li>\n</ul></li>\n<li><a href=\"http://coding.smashingmagazine.com/2011/09/16/useful-node-js-tools-tutorials-and-resources/\" rel=\"noreferrer\">Useful Node.js Tools, Tutorials and Resources</a></li>\n<li><a href=\"http://runnable.com/\" rel=\"noreferrer\">Runnable.com - like jsfiddle, but for server side as well</a></li>\n<li><a href=\"https://devcenter.heroku.com/categories/nodejs\" rel=\"noreferrer\">Getting Started with Node.js on Heroku</a></li>\n<li><a href=\"https://blog.openshift.com/run-your-nodejs-projects-on-openshift-in-two-simple-steps/\" rel=\"noreferrer\">Getting Started with Node.js on Open-Shift</a></li>\n<li><a href=\"http://passportjs.org/guide/\" rel=\"noreferrer\">Authentication using Passport</a></li>\n</ul>\n",
    "score": 4097,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33523770,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/33523770",
    "title": null,
    "body": "<p>The equivalent in javascript is:</p>\n\n<pre><code>var text = `\nThis\nIs\nA\nMultiline\nString\n`;\n</code></pre>\n\n<p>Here's the <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components\">specification</a>. See browser support at the bottom of this <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings\">page</a>. Here are some <a href=\"https://developers.google.com/web/updates/2015/01/ES6-Template-Strings?hl=en#multiline-strings\">examples</a> too.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 217867,
      "name": "Lonnie Best",
      "reputation": 2103
    }
  },
  {
    "soID": 30533409,
    "parentID": 894860,
    "url": "https://stackoverflow.com/q/30533409",
    "title": null,
    "body": "<p>In ECMAScript 6 you will actually be able to write exactly what you have:</p>\n\n<pre><code>function read_file(file, delete_after = false) {\n  // Code\n}\n</code></pre>\n\n<p>This will set <code>delete_after</code> to <code>false</code> if it s not present or <code>undefined</code>. You can use ES6 features like this one today with transpilers such as <a href=\"http://babeljs.io/\" rel=\"noreferrer\">Babel</a>.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\" rel=\"noreferrer\">See the MDN article for more information</a>. </p>\n",
    "score": 48,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 218196,
      "name": "Felix Kling",
      "reputation": 450820
    }
  },
  {
    "soID": 14220323,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/14220323",
    "title": null,
    "body": "<blockquote>\n  <p><em><code>-&gt;</code> For a more general explanation of async behavior with different examples, please see</em> <a href=\"https://stackoverflow.com/q/23667086/218196\">Why is my variable unaltered after I modify it inside of a function? - Asynchronous code reference</a>  </p>\n  \n  <p><em><code>-&gt;</code> If you already understand the problem, skip to the possible solutions below.</em></p>\n</blockquote>\n\n<h1>The problem</h1>\n\n<p>The <strong>A</strong> in Ajax stands for <strong>asynchronous</strong>. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, <code>$.ajax</code> returns immediately and the next statement, <code>return result;</code>, is executed before the function you passed as <code>success</code> callback was even called.</p>\n\n<p>Here is an analogy which hopefully makes the difference between synchronous and asynchronous flow clearer: </p>\n\n<h2>Synchronous</h2>\n\n<p>Imagine you make a phone call to a friend and ask him to look something up for you. Although it might take a while, you wait on the phone and stare into space, until your friend gives you the answer you needed.</p>\n\n<p>The same is happening when you make a function call containing \"normal\" code:</p>\n\n<pre><code>function findItem() {\n    var item;\n    while(item_not_found) {\n        // search\n    }\n    return item;\n}\n\nvar item = findItem();\n\n// Do something with item\ndoSomethingElse();\n</code></pre>\n\n<p>Even though <code>findItem</code> might take a long time to execute, any code coming after <code>var item = findItem();</code> has to <em>wait</em> until the function returns the result.</p>\n\n<h2>Asynchronous</h2>\n\n<p>You call your friend again for the same reason. But this time you tell him that you are in a hurry and he should <em>call you back</em> on your mobile phone. You hang up, leave the house and do whatever you planned to do. Once your friend calls you back, you are dealing with the information he gave to you.</p>\n\n<p>That's exactly what's happening when you do an Ajax request. </p>\n\n<pre><code>findItem(function(item) {\n    // Do something with item\n});\ndoSomethingElse();\n</code></pre>\n\n<p>Instead of waiting for the response, the execution continues immediately and the statement after the Ajax call is executed. To get the response eventually, you provide a function to be called once the response was received, a <em>callback</em> (notice something? <em>call back</em> ?). Any statement coming after that call is executed before the callback is called.</p>\n\n<hr>\n\n<hr>\n\n<h1>Solution(s)</h1>\n\n<p><strong>Embrace the asynchronous nature of JavaScript!</strong> While certain asynchronous operations provide synchronous counterparts (so does \"Ajax\"), it's generally discouraged to use them, especially in a browser context.</p>\n\n<p>Why is it bad do you ask?</p>\n\n<p>JavaScript runs in the UI thread of the browser and any long running process will lock the UI, making it unresponsive. Additionally, there is an upper limit on the execution time for JavaScript and the browser will ask the user whether to continue the execution or not. </p>\n\n<p>All of this is really bad user experience. The user won't be able to tell whether everything is working fine or not. Furthermore the effect will be worse for users with a slow connection.</p>\n\n<p>In the following we will look at three different solutions that are all building on top of each other:</p>\n\n<ul>\n<li><strong>Promises with <code>async/await</code></strong> (ES2017+, available in older browsers if you use a transpiler or regenerator)</li>\n<li><strong>Callbacks</strong> (popular in node)</li>\n<li><strong>Promises with <code>then()</code></strong> (ES2015+, available in older browsers if you use one of the many promise libraries)</li>\n</ul>\n\n<p><strong>All three are available in current browsers, and node 7+.</strong> </p>\n\n<hr>\n\n<h2>ES2017+: Promises with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\" rel=\"noreferrer\"><code>async/await</code></a></h2>\n\n<p>The new ECMAScript version released in 2017 introduced <em>syntax level support</em> for asynchronous functions. With the help of <code>async</code> and <code>await</code>, you can write asynchronous in a \"synchronous style\". Make no mistake though: The code is still asynchronous, but it's easier to read/understand.</p>\n\n<p><code>async/await</code> builds on top of promises: an <code>async</code> function always returns a promise. <code>await</code> \"unwraps\" a promise and either results in the value the promise was resolved with or throws an error if the promise was rejected.</p>\n\n<p><strong>Important:</strong> You can only use <code>await</code> inside an <code>async</code> function. That means that at the very top level, you still have to work directly with the promise.</p>\n\n<p>You can read more about <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\" rel=\"noreferrer\"><code>async</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await\" rel=\"noreferrer\"><code>await</code></a> on MDN.</p>\n\n<p>Here is an example that builds on top of delay above:</p>\n\n<pre><code>// Using 'superagent' which will return a promise.\nvar superagent = require('superagent')\n\n// This is isn't declared as `async` because it already returns a promise\nfunction delay() {\n  // `delay` returns a promise\n  return new Promise(function(resolve, reject) {\n    // Only `delay` is able to resolve or reject the promise\n    setTimeout(function() {\n      resolve(42); // After 3 seconds, resolve the promise with value 42\n    }, 3000);\n  });\n}\n\n\nasync function getAllBooks() {\n  try {\n    // GET a list of book IDs of the current user\n    var bookIDs = await superagent.get('/user/books');\n    // wait for a second (just for the sake of this example)\n    await delay(1000);\n    // GET information about each book\n    return await superagent.get('/books/ids='+JSON.stringify(bookIDs));\n  } catch(error) {\n    // If any of the awaited promises was rejected, this catch block\n    // would catch the rejection reason\n    return null;\n  }\n}\n\n// Async functions always return a promise\ngetAllBooks()\n  .then(function(books) {\n    console.log(books);\n  });\n</code></pre>\n\n<p>Newer <a href=\"https://kangax.github.io/compat-table/es2016plus/#test-async_functions\" rel=\"noreferrer\">browser</a> and <a href=\"http://node.green/#ES2017-features-async-functions\" rel=\"noreferrer\">node</a> versions support <code>async/await</code>. You can also support older environments by transforming your code to ES5 with the help of <a href=\"https://github.com/facebook/regenerator\" rel=\"noreferrer\">regenerator</a> (or tools that use regenerator, such as <a href=\"https://babeljs.io/\" rel=\"noreferrer\">Babel</a>).</p>\n\n<hr>\n\n<h2>Let functions accept <em>callbacks</em></h2>\n\n<p>A callback is simply a function passed to another function. That other function can call the function passed whenever it is ready. In the context of asynchronous process, the callback will be called whenever the asynchronous process is done. Usually the result is passed to the callback.</p>\n\n<p>In the example in the question, you can make <code>foo</code> accept a callback and use it as <code>success</code> callback. So this</p>\n\n<pre><code>var result = foo();\n// Code that depends on 'result'\n</code></pre>\n\n<p>becomes</p>\n\n<pre><code>foo(function(result) {\n    // Code that depends on 'result'\n});\n</code></pre>\n\n<p>Here we defined the function \"inline\" but you can pass any function reference:</p>\n\n<pre><code>function myCallback(result) {\n    // Code that depends on 'result'\n}\n\nfoo(myCallback);\n</code></pre>\n\n<p><code>foo</code> itself is defined as follows:</p>\n\n<pre><code>function foo(callback) {\n    $.ajax({\n        // ...\n        success: callback\n    });\n}\n</code></pre>\n\n<p><code>callback</code> will refer to the function we pass to <code>foo</code> when we call it and we simply pass it on to <code>success</code>. I.e. once the Ajax request is successful, <code>$.ajax</code> will call <code>callback</code> and pass the response to the callback (which can be referred to with <code>result</code>, since this is how we defined the callback).</p>\n\n<p>You can also process the response before passing it to the callback:</p>\n\n<pre><code>function foo(callback) {\n    $.ajax({\n        // ...\n        success: function(response) {\n            // For example, filter the response\n            callback(filtered_response);\n        }\n    });\n}\n</code></pre>\n\n<p>It's easier to write code using callbacks than it may seem. After all, JavaScript in the browser is heavily event driven (DOM events). Receiving the Ajax response is nothing else but an event.<br>\nDifficulties could arise when you have to work with third party code, but most problems can be solved by just thinking through the application flow.</p>\n\n<hr>\n\n<h2>ES2015+: Promises with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"noreferrer\">then()</a></h2>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"noreferrer\">Promise API</a> is a new feature of ECMAScript 6 (ES2015), but it has good <a href=\"http://caniuse.com/#feat=promises\" rel=\"noreferrer\" title=\"caniuse\">browser support</a> already. There are also many libraries which implement the standard Promises API and provide additional methods to ease the use and composition of asynchronous functions (e.g. <a href=\"https://github.com/petkaantonov/bluebird\" rel=\"noreferrer\">bluebird</a>).</p>\n\n<p>Promises are containers for <em>future</em> values. When the promise receives the value (it is <em>resolved</em>) or when it is cancelled (<em>rejected</em>), it notifies all of its \"listeners\" who want to access this value.</p>\n\n<p>The advantage over plain callbacks is that they allow you do decouple your code and they are easier to compose.</p>\n\n<p>Here is a simple example of using a promise:</p>\n\n<pre><code>function delay() {\n  // `delay` returns a promise\n  return new Promise(function(resolve, reject) {\n    // Only `delay` is able to resolve or reject the promise\n    setTimeout(function() {\n      resolve(42); // After 3 seconds, resolve the promise with value 42\n    }, 3000);\n  });\n}\n\ndelay()\n  .then(function(v) { // `delay` returns a promise\n    console.log(v); // Log the value once it is resolved\n  })\n  .catch(function(v) {\n    // Or do something else if it is rejected \n    // (it would not happen in this example, since `reject` is not called).\n  });\n</code></pre>\n\n<p>Applied to our Ajax call we could use promises like this:</p>\n\n<pre><code>function ajax(url) {\n  return new Promise(function(resolve, reject) {\n    var xhr = new XMLHttpRequest();\n    xhr.onload = function() {\n      resolve(this.responseText);\n    };\n    xhr.onerror = reject;\n    xhr.open('GET', url);\n    xhr.send();\n  });\n}\n\najax(\"/echo/json\")\n  .then(function(result) {\n    // Code depending on result\n  })\n  .catch(function() {\n    // An error occurred\n  });\n</code></pre>\n\n<p>Describing all the advantages that promises offer is beyond the scope of this answer, but if you write new code, you should seriously consider them. They provide a great abstraction and separation of your code.</p>\n\n<p>More information about promises: <a href=\"http://www.html5rocks.com/en/tutorials/es6/promises/\" rel=\"noreferrer\">HTML5 rocks - JavaScript Promises</a></p>\n\n<h3>Side note: jQuery's deferred objects</h3>\n\n<p><a href=\"https://stackoverflow.com/questions/4866721/what-are-deferred-objects\">Deferred objects</a> are jQuery's custom implementation of promises (before the Promise API was standardized). They behave almost like promises, but expose a slightly different API.</p>\n\n<p>Every Ajax method of jQuery already returns a \"deferred object\" (actually a promise of a deferred object) which you can just return from your function:</p>\n\n<pre><code>function ajax() {\n    return $.ajax(...);\n}\n\najax().done(function(result) {\n    // Code depending on result\n}).fail(function() {\n    // An error occurred\n});\n</code></pre>\n\n<h3>Side note: Promise gotchas</h3>\n\n<p>Keep in mind that promises and deferred objects are just <em>containers</em> for a future value, they are not the value itself. For example, suppose you had the following:</p>\n\n<pre><code>function checkPassword() {\n    return $.ajax({\n        url: '/password',\n        data: {\n            username: $('#username').val(),\n            password: $('#password').val()\n        },\n        type: 'POST',\n        dataType: 'json'\n    });\n}\n\nif (checkPassword()) {\n    // Tell the user they're logged in\n}\n</code></pre>\n\n<p>This code misunderstands the above asynchrony issues. Specifically, <code>$.ajax()</code> doesn't freeze the code while it checks the '/password' page on your server - it sends a request to the server and while it waits, immediately returns a jQuery Ajax Deferred object, not the response from the server. That means the <code>if</code> statement is going to always get this Deferred object, treat it as <code>true</code>, and proceed as though the user is logged in. Not good.</p>\n\n<p>But the fix is easy:</p>\n\n<pre><code>checkPassword()\n.done(function(r) {\n    if (r) {\n        // Tell the user they're logged in\n    } else {\n        // Tell the user their password was bad\n    }\n})\n.fail(function(x) {\n    // Tell the user something bad happened\n});\n</code></pre>\n\n<hr>\n\n<hr>\n\n<h2>Not recommended: Synchronous \"Ajax\" calls</h2>\n\n<p>As I mentioned, some(!) asynchronous operations have synchronous counterparts. I don't advocate their use, but for completeness' sake, here is how you would perform a synchronous call:</p>\n\n<h3>Without jQuery</h3>\n\n<p>If you directly use a <a href=\"http://www.w3.org/TR/XMLHttpRequest/\" rel=\"noreferrer\"><code>XMLHTTPRequest</code></a> object, pass <code>false</code> as third argument to <a href=\"http://www.w3.org/TR/XMLHttpRequest/#the-open%28%29-method\" rel=\"noreferrer\"><code>.open</code></a>.</p>\n\n<h3>jQuery</h3>\n\n<p>If you use <a href=\"http://api.jquery.com/jQuery.ajax/\" rel=\"noreferrer\">jQuery</a>, you can set the <code>async</code> option to <code>false</code>. Note that this option is <em>deprecated</em> since jQuery 1.8.\nYou can then either still use a <code>success</code> callback or access the <code>responseText</code> property of the <a href=\"http://api.jquery.com/jQuery.ajax/#jqXHR\" rel=\"noreferrer\">jqXHR object</a>:</p>\n\n<pre><code>function foo() {\n    var jqXHR = $.ajax({\n        //...\n        async: false\n    });\n    return jqXHR.responseText;\n}\n</code></pre>\n\n<p>If you use any other jQuery Ajax method, such as <code>$.get</code>, <code>$.getJSON</code>, etc., you have to change it to <code>$.ajax</code> (since you can only pass configuration parameters to <code>$.ajax</code>).</p>\n\n<p><strong>Heads up!</strong> It is not possible to make a synchronous <a href=\"https://stackoverflow.com/questions/2067472/please-explain-jsonp\">JSONP</a> request. JSONP by its very nature is always asynchronous (one more reason to not even consider this option).</p>\n",
    "score": 3707,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 218196,
      "name": "Felix Kling",
      "reputation": 450820
    }
  },
  {
    "soID": 4824897,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/4824897",
    "title": null,
    "body": "<p>All these worked for me,</p>\n\n<p>HTML part:</p>\n\n<pre><code>&lt;div id=\"targetDIV\" style=\"border: 1px solid Red\"&gt;\n    This text is surrounded by a DIV tag whose id is \"targetDIV\".\n&lt;/div&gt;\n</code></pre>\n\n<p>JavaScript code:</p>\n\n<pre><code>//Way 1: appendTo()\n&lt;script type=\"text/javascript\"&gt;\n    $(\"&lt;div&gt;hello stackoverflow users&lt;/div&gt;\").appendTo(\"#targetDIV\"); //appendTo: Append at inside bottom\n&lt;/script&gt;\n\n//Way 2: prependTo()\n&lt;script type=\"text/javascript\"&gt;\n    $(\"&lt;div&gt;Hello, Stack Overflow users&lt;/div&gt;\").prependTo(\"#targetDIV\"); //prependTo: Append at inside top\n&lt;/script&gt;\n\n//Way 3: html()\n&lt;script type=\"text/javascript\"&gt;\n    $(\"#targetDIV\").html(\"&lt;div&gt;Hello, Stack Overflow users&lt;/div&gt;\"); //.html(): Clean HTML inside and append\n&lt;/script&gt;\n\n//Way 4: append()\n&lt;script type=\"text/javascript\"&gt;\n    $(\"#targetDIV\").append(\"&lt;div&gt;Hello, Stack Overflow users&lt;/div&gt;\"); //Same as appendTo\n&lt;/script&gt;\n</code></pre>\n",
    "score": 51,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 218565,
      "name": "Hoque",
      "reputation": 3199
    }
  },
  {
    "soID": 3824976,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/3824976",
    "title": null,
    "body": "<p>In a <strong>JSF</strong> generated radio button (using <code>&lt;h:selectOneRadio&gt;</code> tag), you can do this:</p>\n\n<pre><code>radiobuttonvalue = jQuery(\"input[name='form_id\\:radiobutton_id']:checked\").val();\n</code></pre>\n\n<p>where selectOneRadio ID is <strong>radiobutton_id</strong> and form ID is <strong>form_id</strong>.</p>\n\n<p>Be sure to use <strong>name</strong> instead <strong>id</strong>, as indicated, because jQuery uses this attribute (<strong>name</strong> is generated automatically by JSF resembling control ID).</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 218717,
      "name": "Francisco Alvarado",
      "reputation": 2447
    }
  },
  {
    "soID": 6985636,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/6985636",
    "title": null,
    "body": "<p>If you are wanting to reformat all-caps text, you might want to modify the other examples as such: </p>\n\n<pre><code>function capitalize (text) {\n    return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n}\n</code></pre>\n\n<p>This will ensure that the following text is changed:</p>\n\n<pre><code>TEST =&gt; Test\nThis Is A TeST =&gt; This is a test\n</code></pre>\n",
    "score": 31,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 220043,
      "name": "monokrome",
      "reputation": 1051
    }
  },
  {
    "soID": 2985773,
    "parentID": 3390396,
    "url": "https://stackoverflow.com/q/2985773",
    "title": null,
    "body": "<p>You need to use <code>typeof</code> .</p>\n\n<pre><code>if (typeof something != \"undefined\") {\n    // ...\n}\n</code></pre>\n",
    "score": 40,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 220819,
      "name": "Jacob Relkin",
      "reputation": 122371
    }
  },
  {
    "soID": 2669720,
    "parentID": 2669690,
    "url": "https://stackoverflow.com/q/2669720",
    "title": null,
    "body": "<p>That would be to make it difficult for a third-party to insert the JSON response into an HTML document with the <code>&lt;script&gt;</code> tag. Remember that the <code>&lt;script&gt;</code> tag is exempt from the <a href=\"http://en.wikipedia.org/wiki/Same_origin_policy\" rel=\"noreferrer\">Same Origin Policy</a>.</p>\n",
    "score": 86,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 222908,
      "name": "Daniel Vassallo",
      "reputation": 233493
    }
  },
  {
    "soID": 11024936,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/11024936",
    "title": null,
    "body": "<p>If you're okay with a shallow copy, the underscore.js library has a <a href=\"http://underscorejs.org/#clone\" rel=\"noreferrer\">clone</a> method.</p>\n\n<pre><code>y = _.clone(x);\n</code></pre>\n\n<p>or you can extend it like</p>\n\n<pre><code>copiedObject = _.extend({},originalObject);\n</code></pre>\n",
    "score": 63,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9199617,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/9199617",
    "title": null,
    "body": "<pre><code>function getUrlVar(key){\n    var result = new RegExp(key + \"=([^&amp;]*)\", \"i\").exec(window.location.search); \n    return result &amp;&amp; unescape(result[1]) || \"\"; \n}\n</code></pre>\n\n<p><a href=\"https://gist.github.com/1771618\" rel=\"noreferrer\">https://gist.github.com/1771618</a></p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3492815,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/3492815",
    "title": null,
    "body": "<p>I use this simple function:</p>\n\n<pre><code>String.prototype.format = function() {\n    var formatted = this;\n    for( var arg in arguments ) {\n        formatted = formatted.replace(\"{\" + arg + \"}\", arguments[arg]);\n    }\n    return formatted;\n};\n</code></pre>\n\n<p>That's very similar to string.format:</p>\n\n<pre><code>\"{0} is dead, but {1} is alive!\".format(\"ASP\", \"ASP.NET\")\n</code></pre>\n",
    "score": 83,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6138987,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/6138987",
    "title": null,
    "body": "<p>code referred from <a href=\"https://github.com/miksago/Evan.js/blob/master/src/evan.js\" rel=\"nofollow\">https://github.com/miksago/Evan.js/blob/master/src/evan.js</a></p>\n\n<pre><code>  var isArray = Array.isArray || function(obj) {\n    return !!(obj &amp;&amp; obj.concat &amp;&amp; obj.unshift &amp;&amp; !obj.callee);};\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 231010,
      "name": "didxga",
      "reputation": 3344
    }
  },
  {
    "soID": 23401756,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/23401756",
    "title": null,
    "body": "<p>Here's an extended version of Andy E's linked \"Handle array-style query strings\"-version. Fixed a bug (<code>?key=1&amp;key[]=2&amp;key[]=3</code>; <code>1</code> is lost and replaced with <code>[2,3]</code>), made a few minor performance improvements (re-decoding of values, recalculating \"[\" position, etc.) and added a number of improvements (functionalized, support for <code>?key=1&amp;key=2</code>, support for <code>;</code> delimiters). I left the variables annoyingly short, but added comments galore to make them readable (oh, and I reused <code>v</code> within the local functions, sorry if that is confusing ;).</p>\n\n<p>It will handle the following querystring...</p>\n\n<blockquote>\n  <p>?test=Hello&amp;person=neek&amp;person[]=jeff&amp;person[]=jim&amp;person[extra]=john&amp;test3&amp;nocache=1398914891264</p>\n</blockquote>\n\n<p>...making it into an object that looks like...</p>\n\n<pre><code>{\n    \"test\": \"Hello\",\n    \"person\": {\n        \"0\": \"neek\",\n        \"1\": \"jeff\",\n        \"2\": \"jim\",\n        \"length\": 3,\n        \"extra\": \"john\"\n    },\n    \"test3\": \"\",\n    \"nocache\": \"1398914891264\"\n}\n</code></pre>\n\n<p>As you can see above, this version handles some measure of \"malformed\" arrays, i.e. - <code>person=neek&amp;person[]=jeff&amp;person[]=jim</code> or <code>person=neek&amp;person=jeff&amp;person=jim</code> as the key is identifiable and valid (at least in dotNet's <a href=\"http://msdn.microsoft.com/en-us/library/xsc9a449.aspx\" rel=\"nofollow noreferrer\">NameValueCollection.Add</a>):</p>\n\n<blockquote>\n  <p>If the specified key already exists in the target NameValueCollection\n  instance, the specified value is added to the existing comma-separated\n  list of values in the form \"value1,value2,value3\".</p>\n</blockquote>\n\n<p>It seems <a href=\"https://stackoverflow.com/questions/1746507/authoritative-position-of-duplicate-http-get-query-keys\">the jury is somewhat out</a> on repeated keys as there is no spec. In this case, multiple keys are stored as an (fake)array. But do note that I <strong>do not</strong> process values based on commas into arrays.</p>\n\n<p><strong>The code:</strong></p>\n\n<pre><code>getQueryStringKey = function(key) {\n    return getQueryStringAsObject()[key];\n};\n\n\ngetQueryStringAsObject = function() {\n    var b, cv, e, k, ma, sk, v, r = {},\n        d = function (v) { return decodeURIComponent(v).replace(/\\+/g, \" \"); }, //# d(ecode) the v(alue)\n        q = window.location.search.substring(1), //# suggested: q = decodeURIComponent(window.location.search.substring(1)),\n        s = /([^&amp;;=]+)=?([^&amp;;]*)/g //# original regex that does not allow for ; as a delimiter:   /([^&amp;=]+)=?([^&amp;]*)/g\n    ;\n\n    //# ma(make array) out of the v(alue)\n    ma = function(v) {\n        //# If the passed v(alue) hasn't been setup as an object\n        if (typeof v != \"object\") {\n            //# Grab the cv(current value) then setup the v(alue) as an object\n            cv = v;\n            v = {};\n            v.length = 0;\n\n            //# If there was a cv(current value), .push it into the new v(alue)'s array\n            //#     NOTE: This may or may not be 100% logical to do... but it's better than loosing the original value\n            if (cv) { Array.prototype.push.call(v, cv); }\n        }\n        return v;\n    };\n\n    //# While we still have key-value e(ntries) from the q(uerystring) via the s(earch regex)...\n    while (e = s.exec(q)) { //# while((e = s.exec(q)) !== null) {\n        //# Collect the open b(racket) location (if any) then set the d(ecoded) v(alue) from the above split key-value e(ntry) \n        b = e[1].indexOf(\"[\");\n        v = d(e[2]);\n\n        //# As long as this is NOT a hash[]-style key-value e(ntry)\n        if (b &lt; 0) { //# b == \"-1\"\n            //# d(ecode) the simple k(ey)\n            k = d(e[1]);\n\n            //# If the k(ey) already exists\n            if (r[k]) {\n                //# ma(make array) out of the k(ey) then .push the v(alue) into the k(ey)'s array in the r(eturn value)\n                r[k] = ma(r[k]);\n                Array.prototype.push.call(r[k], v);\n            }\n            //# Else this is a new k(ey), so just add the k(ey)/v(alue) into the r(eturn value)\n            else {\n                r[k] = v;\n            }\n        }\n        //# Else we've got ourselves a hash[]-style key-value e(ntry) \n        else {\n            //# Collect the d(ecoded) k(ey) and the d(ecoded) sk(sub-key) based on the b(racket) locations\n            k = d(e[1].slice(0, b));\n            sk = d(e[1].slice(b + 1, e[1].indexOf(\"]\", b)));\n\n            //# ma(make array) out of the k(ey) \n            r[k] = ma(r[k]);\n\n            //# If we have a sk(sub-key), plug the v(alue) into it\n            if (sk) { r[k][sk] = v; }\n            //# Else .push the v(alue) into the k(ey)'s array\n            else { Array.prototype.push.call(r[k], v); }\n        }\n    }\n\n    //# Return the r(eturn value)\n    return r;\n};\n</code></pre>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24287014,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/24287014",
    "title": null,
    "body": "<p>If you happen to already be using the d3 library, they have a powerful number formatting library: <a href=\"https://github.com/mbostock/d3/wiki/Formatting\">https://github.com/mbostock/d3/wiki/Formatting</a></p>\n\n<p>Rounding specifically is here: <a href=\"https://github.com/mbostock/d3/wiki/Formatting#d3_round\">https://github.com/mbostock/d3/wiki/Formatting#d3_round</a></p>\n\n<p>In your case, the answer is:</p>\n\n<pre><code>&gt; d3.round(1.777777, 2)\n1.78\n&gt; d3.round(1.7, 2)\n1.7\n&gt; d3.round(1, 2)\n1\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 237091,
      "name": "Scott Stafford",
      "reputation": 25791
    }
  },
  {
    "soID": 4448825,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/4448825",
    "title": null,
    "body": "<pre><code>String.prototype.capitalize = function(){\n    return this.replace( /(^|\\s)([a-z])/g , function(m,p1,p2){ return p1+p2.toUpperCase();\n    } );\n};\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>capitalizedString = someString.capitalize();\n</code></pre>\n\n<p>This is a text string => This Is A Text String</p>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 237564,
      "name": "Murat Kucukosman",
      "reputation": 495
    }
  },
  {
    "soID": 5607002,
    "parentID": 1357118,
    "url": "https://stackoverflow.com/q/5607002",
    "title": null,
    "body": "<p>Generally, your first option (<code>preventDefault()</code>) is the one to take, but you have to know what context you're in and what your goals are. </p>\n\n<p><em>Fuel Your Coding</em> has a great <a href=\"http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/\" rel=\"nofollow noreferrer\">article on <code>return false;</code> vs <code>event.preventDefault()</code> vs <code>event.stopPropagation()</code> vs <code>event.stopImmediatePropagation()</code></a>.</p>\n\n<p><strong>NOTE:</strong> The <em>Fuel Your Coding</em> link above has been producing 5xx errors for quite some time. I've found a copy of it in the <a href=\"https://archive.org/web/\" rel=\"nofollow noreferrer\">Internet Archive</a>, printed it to PDF, and put it in Dropbox: <a href=\"https://www.dropbox.com/s/nr4ucookdu0zeei/jQuery%20Events%3A%20Stop%20%28Mis%29Using%20Return%20False%20%7C%20Fuel%20Your%20Coding%20%7C%20WayBackMachine.pdf?dl=0\" rel=\"nofollow noreferrer\"><strong>Archived</strong> article on <code>return false;</code> vs <code>event.preventDefault()</code> vs <code>event.stopPropagation()</code> vs <code>event.stopImmediatePropagation()</code> <strong>(PDF)</strong></a></p>\n",
    "score": 50,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 239567,
      "name": "JAAulde",
      "reputation": 14558
    }
  },
  {
    "soID": 3390635,
    "parentID": 3390396,
    "url": "https://stackoverflow.com/q/3390635",
    "title": null,
    "body": "<p>I personally use </p>\n\n<pre><code>myVar === undefined\n</code></pre>\n\n<p>Warning: Please note that <code>===</code> is used over <code>==</code> and that <code>myVar</code> has been previously <em>declared</em> (not <em>defined</em>).</p>\n\n<hr>\n\n<p>I do not like <code>typeof myVar === \"undefined\"</code>. I think it is long winded and unnecessary. (I can get the same done in less code.)</p>\n\n<p>Now some people will keel over in pain when they read this, screaming: \"Wait! WAAITTT!!! <code>undefined</code> can be redefined!\"</p>\n\n<p>Cool. I know this. Then again, most variables in Javascript can be redefined. Should you never use any built-in identifier that can be redefined?</p>\n\n<p>If you follow this rule, good for you: you aren't a hypocrite.</p>\n\n<p>The thing is, in order to do lots of real work in JS, developers need to rely on redefinable identifiers to be what they are. I don't hear people telling me that I shouldn't use <code>setTimeout</code> because someone can</p>\n\n<pre><code>window.setTimeout = function () {\n    alert(\"Got you now!\");\n};\n</code></pre>\n\n<p>Bottom line, the \"it can be redefined\" argument to not use a raw <code>=== undefined</code> is bogus. </p>\n\n<p>(If you are still scared of <code>undefined</code> being redefined, why are you blindly integrating untested library code into your code base? Or even simpler: a linting tool.)</p>\n\n<hr>\n\n<p>Also, like the <code>typeof</code> approach, this technique can \"detect\" undeclared variables: </p>\n\n<pre><code>if (window.someVar === undefined) {\n    doSomething();\n}\n</code></pre>\n\n<p>But both these techniques leak in their abstraction. I urge you not to use this or even </p>\n\n<pre><code>if (typeof myVar !== \"undefined\") {\n    doSomething();\n}\n</code></pre>\n\n<p>Consider:</p>\n\n<pre><code>var iAmUndefined;\n</code></pre>\n\n<p>To catch whether or not that variable is declared or not, you may need to resort to the <code>in</code> operator. (In many cases, you can simply read the code O_o).</p>\n\n<pre><code>if (\"myVar\" in window) {\n    doSomething();\n}\n</code></pre>\n\n<p>But wait! There's more! What if some prototype chain magic is happening…? Now even the superior <code>in</code> operator does not suffice. (Okay, I'm done here about this part except to say that for 99% of the time, <code>=== undefined</code> (and ****cough**** <code>typeof</code>) works just fine. If you really care, you can read about this subject on its own.)</p>\n",
    "score": 689,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 239916,
      "name": "Thomas Eding",
      "reputation": 18872
    }
  },
  {
    "soID": 24992285,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/24992285",
    "title": null,
    "body": "<p>I have created this little bit of code, which can return true types.</p>\n\n<p>I am not sure about performance yet, but it's an attempt to properly identify the typeof.</p>\n\n<p><a href=\"https://github.com/valtido/better-typeOf\" rel=\"nofollow\">https://github.com/valtido/better-typeOf</a> also blogged a little about it here <a href=\"http://www.jqui.net/jquery/better-typeof-than-the-javascript-native-typeof/\" rel=\"nofollow\">http://www.jqui.net/jquery/better-typeof-than-the-javascript-native-typeof/</a></p>\n\n<p>it works, similar to the current typeof.</p>\n\n<pre><code>var user = [1,2,3]\ntypeOf(user); //[object Array]\n</code></pre>\n\n<p>It think it may need a bit of fine tuning, and take into account things, I have not come across or test it properly. so further improvements are welcomed, whether it's performance wise, or incorrectly re-porting of typeOf.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 240215,
      "name": "Val",
      "reputation": 10088
    }
  },
  {
    "soID": 3503206,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/3503206",
    "title": null,
    "body": "<p>HTML5 introduced the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_pushState()_method\" rel=\"noreferrer\"><code>history.pushState()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#The_replaceState()_method\" rel=\"noreferrer\"><code>history.replaceState()</code></a> methods, which allow you to add and modify history entries, respectively.</p>\n\n<pre><code>window.history.pushState('page2', 'Title', '/page2.php');\n</code></pre>\n\n<p>Read more about this from <a href=\"https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history\" rel=\"noreferrer\">here</a></p>\n",
    "score": 285,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 241518,
      "name": "Vivart",
      "reputation": 7628
    }
  },
  {
    "soID": 23436150,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/23436150",
    "title": null,
    "body": "<p>Use the inbuilt and simplest one i.e <code>match()</code> on the string. To achieve what you are looking forward do this:</p>\n\n<pre><code>var stringData =\"anyString Data\";\n\nvar subStringToSearch = \"any\";\n\n// This will give back the substring if matches and if not returns null\nvar doesContains = stringData.match(subStringToSearch);\n\nif(doesContains !=null) {\n    alert(\"Contains Substring\");\n}\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33976225,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/33976225",
    "title": null,
    "body": "<p>I made a thing that doesn't break the existing Storage objects, but creates a wrapper so you can do what you want. The result is a normal object, no methods, with access like any object.</p>\n\n<p><a href=\"https://github.com/rudiedirkx/ObjectStorage\" rel=\"nofollow\">The thing I made.</a></p>\n\n<p>If you want 1 <code>localStorage</code> property to be magic:</p>\n\n<pre><code>var prop = ObjectStorage(localStorage, 'prop');\n</code></pre>\n\n<p>If you need several:</p>\n\n<pre><code>var storage = ObjectStorage(localStorage, ['prop', 'more', 'props']);\n</code></pre>\n\n<p>Everything you do to <code>prop</code>, or the objects <strong>inside</strong> <code>storage</code> will be automatically saved into <code>localStorage</code>. You're always playing with a real object, so you can do stuff like this:</p>\n\n<pre><code>storage.data.list.push('more data');\nstorage.another.list.splice(1, 2, {another: 'object'});\n</code></pre>\n\n<p>And every new object <strong>inside</strong> a tracked object will be automatically tracked.</p>\n\n<p><strong>The very big downside:</strong> it depends on <code>Object.observe()</code> so it has very limited browser support. And it doesn't look like it'll be coming for Firefox or Edge anytime soon.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 247372,
      "name": "Rudie",
      "reputation": 21870
    }
  },
  {
    "soID": 7037330,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/7037330",
    "title": null,
    "body": "<p>This is an expansion of @Chase's answer, with the advantage that it will work for IMAGE and TABLE elements, not just DIVs on IE9.</p>\n\n<pre><code>if (document.createRange) {\n    // IE9 and modern browsers\n    var r = document.createRange();\n    r.setStartBefore(to_copy);\n    r.setEndAfter(to_copy);\n    r.selectNode(to_copy);\n    var sel = window.getSelection();\n    sel.addRange(r);\n    document.execCommand('Copy');  // does nothing on FF\n} else {\n    // IE 8 and earlier.  This stuff won't work on IE9.\n    // (unless forced into a backward compatibility mode,\n    // or selecting plain divs, not img or table). \n    var r = document.body.createTextRange();\n    r.moveToElementText(to_copy);\n    r.select()\n    r.execCommand('Copy');\n}\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 249548,
      "name": "Oliver Bock",
      "reputation": 2237
    }
  },
  {
    "soID": 45079041,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/45079041",
    "title": null,
    "body": "<p>I compiled few functions in a simple solution to cover all cases, with prompt fallback if needed.</p>\n\n<pre><code>window.copyToClipboard = function(text) {\n  // IE specific\n  if (window.clipboardData &amp;&amp; window.clipboardData.setData) {\n    return clipboardData.setData(\"Text\", text);\n  }\n\n  // all other modern\n  target = document.createElement(\"textarea\");\n  target.style.position = \"absolute\";\n  target.style.left = \"-9999px\";\n  target.style.top = \"0\";\n  target.textContent = text;\n  document.body.appendChild(target);\n  target.focus();\n  target.setSelectionRange(0, target.value.length);\n\n  // copy the selection of fall back to prompt\n  try {\n    document.execCommand(\"copy\");\n    target.remove();\n    console.log('Copied to clipboard: \"'+text+'\"');\n  } catch(e) {\n    console.log(\"Can't copy string on this browser. Try to use Chrome, Firefox or Opera.\")\n    window.prompt(\"Copy to clipboard: Ctrl+C, Enter\", text);\n  }\n}\n</code></pre>\n\n<p>Test it here <a href=\"https://jsfiddle.net/jv0avz65/\" rel=\"nofollow noreferrer\">https://jsfiddle.net/jv0avz65/</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 254915,
      "name": "dux",
      "reputation": 893
    }
  },
  {
    "soID": 10162153,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/10162153",
    "title": null,
    "body": "<p>There's a method to iterate over only own object properties, not including prototype's ones:</p>\n\n<pre><code>for (var i in array) if (array.hasOwnProperty(i)) {\n    // do something with array[i]\n}\n</code></pre>\n\n<p>but it still will iterate over custom-defined properties.</p>\n\n<p>In javascript any custom property could be assigned to any object including array.</p>\n\n<p>If one wants to iterate over sparsed array, <code>for (var i = 0; i &lt; array.length; i++) if (i in array)</code> or <code>array.forEach</code> with <code>es5shim</code> should be used.</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 255363,
      "name": "kirilloid",
      "reputation": 8920
    }
  },
  {
    "soID": 2866221,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/2866221",
    "title": null,
    "body": "<p>For those of you who have the same problem but uses jQuery, you can use <a href=\"http://api.jquery.com/jQuery.isEmptyObject/\" rel=\"noreferrer\">jQuery.isEmptyObject</a>.</p>\n",
    "score": 524,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 255849,
      "name": "Erik Töyrä",
      "reputation": 7067
    }
  },
  {
    "soID": 15012542,
    "parentID": 14994391,
    "url": "https://stackoverflow.com/q/15012542",
    "title": null,
    "body": "<h1>1. Don't design your page, and then change it with <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\" rel=\"noreferrer\">DOM</a> manipulations</h1>\n\n<p>In jQuery, you design a page, and then you make it dynamic. This is because jQuery was designed for augmentation and has grown incredibly from that simple premise.</p>\n\n<p>But in AngularJS, you must start from the ground up with your architecture in mind. Instead of starting by thinking \"I have this piece of the DOM and I want to make it do X\", you have to start with what you want to accomplish, then go about designing your application, and then finally go about designing your view.</p>\n\n<h1>2. Don't augment jQuery with AngularJS</h1>\n\n<p>Similarly, don't start with the idea that jQuery does X, Y, and Z, so I'll just add AngularJS on top of that for models and controllers. This is <em>really</em> tempting when you're just starting out, which is why I always recommend that new AngularJS developers don't use jQuery at all, at least until they get used to doing things the \"Angular Way\".</p>\n\n<p>I've seen many developers here and on the mailing list create these elaborate solutions with jQuery plugins of 150 or 200 lines of code that they then glue into AngularJS with a collection of callbacks and <code>$apply</code>s that are confusing and convoluted; but they eventually get it working! The problem is that in <strong>most</strong> cases that jQuery plugin could be rewritten in AngularJS in a fraction of the code, where suddenly everything becomes comprehensible and straightforward.</p>\n\n<p>The bottom line is this: when solutioning, first \"think in AngularJS\"; if you can't think of a solution, ask the community; if after all of that there is no easy solution, <em>then</em> feel free to reach for the jQuery. But don't let jQuery become a crutch or you'll never master AngularJS.</p>\n\n<h1>3. Always think in terms of architecture</h1>\n\n<p>First know that <a href=\"http://en.wikipedia.org/wiki/Single-page_application\" rel=\"noreferrer\">single-page applications</a> are <em>applications</em>. They're <em>not</em> webpages. So we need to think like a server-side developer <em>in addition</em> to thinking like a client-side developer. We have to think about how to divide our application into individual, extensible, testable components.</p>\n\n<p>So then <em>how</em> do you do that? How do you \"think in AngularJS\"? Here are some general principles, contrasted with jQuery.</p>\n\n<h2>The view is the \"official record\"</h2>\n\n<p>In jQuery, we programmatically change the view. We could have a dropdown menu defined as a <code>ul</code> like so:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;ul class=\"main-menu\"&gt;\n    &lt;li class=\"active\"&gt;\n        &lt;a href=\"#/home\"&gt;Home&lt;/a&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n        &lt;a href=\"#/menu1\"&gt;Menu 1&lt;/a&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"#/sm1\"&gt;Submenu 1&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#/sm2\"&gt;Submenu 2&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#/sm3\"&gt;Submenu 3&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n        &lt;a href=\"#/home\"&gt;Menu 2&lt;/a&gt;\n    &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>In jQuery, in our application logic, we would activate it with something like:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$('.main-menu').dropdownMenu();\n</code></pre>\n\n<p>When we just look at the view, it's not immediately obvious that there is any functionality here. For small applications, that's fine. But for non-trivial applications, things quickly get confusing and hard to maintain.</p>\n\n<p>In AngularJS, though, the view is the official record of view-based functionality. Our <code>ul</code> declaration would look like this instead:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;ul class=\"main-menu\" dropdown-menu&gt;\n    ...\n&lt;/ul&gt;\n</code></pre>\n\n<p>These two do the same thing, but in the AngularJS version anyone looking at the template knows what's supposed to happen. Whenever a new member of the development team comes on board, she can look at this and then <em>know</em> that there is a directive called <code>dropdownMenu</code> operating on it; she doesn't need to intuit the right answer or sift through any code. The view told us what was supposed to happen. Much cleaner.</p>\n\n<p>Developers new to AngularJS often ask a question like: how do I find all links of a specific kind and add a directive onto them. The developer is always flabbergasted when we reply: you don't. But the reason you don't do that is that this is like half-jQuery, half-AngularJS, and no good. The problem here is that the developer is trying to \"do jQuery\" in the context of AngularJS. That's never going to work well. The view <em>is</em> the official record. Outside of a directive (more on this below), you never, ever, <em>never</em> change the DOM. And directives are applied <em>in the view</em>, so intent is clear.</p>\n\n<p>Remember: don't design, and then mark up. You must architect, and then design.</p>\n\n<h2>Data binding</h2>\n\n<p>This is by far one of the most awesome features of AngularJS and cuts out a lot of the need to do the kinds of DOM manipulations I mentioned in the previous section. AngularJS will automatically update your view so you don't have to! In jQuery, we respond to events and then update content. Something like:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$.ajax({\n  url: '/myEndpoint.json',\n  success: function ( data, status ) {\n    $('ul#log').append('&lt;li&gt;Data Received!&lt;/li&gt;');\n  }\n});\n</code></pre>\n\n<p>For a view that looks like this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;ul class=\"messages\" id=\"log\"&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Apart from mixing concerns, we also have the same problems of signifying intent that I mentioned before. But more importantly, we had to manually reference and update a DOM node. And if we want to delete a log entry, we have to code against the DOM for that too. How do we test the logic apart from the DOM? And what if we want to change the presentation?</p>\n\n<p>This a little messy and a trifle frail. But in AngularJS, we can do this:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$http( '/myEndpoint.json' ).then( function ( response ) {\n    $scope.log.push( { msg: 'Data Received!' } );\n});\n</code></pre>\n\n<p>And our view can look like this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;ul class=\"messages\"&gt;\n    &lt;li ng-repeat=\"entry in log\"&gt;{{ entry.msg }}&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>But for that matter, our view could look like this:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class=\"messages\"&gt;\n    &lt;div class=\"alert\" ng-repeat=\"entry in log\"&gt;\n        {{ entry.msg }}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>And now instead of using an unordered list, we're using Bootstrap alert boxes. And we never had to change the controller code! But more importantly, no matter <em>where</em> or <em>how</em> the log gets updated, the view will change too. Automatically. Neat!</p>\n\n<p>Though I didn't show it here, the data binding is two-way. So those log messages could also be editable in the view just by doing this: <code>&lt;input ng-model=\"entry.msg\" /&gt;</code>. And there was much rejoicing.</p>\n\n<h2>Distinct model layer</h2>\n\n<p>In jQuery, the DOM is kind of like the model. But in AngularJS, we have a separate model layer that we can manage in any way we want, completely independently from the view. This helps for the above data binding, maintains <a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\" rel=\"noreferrer\">separation of concerns</a>, and introduces far greater testability. Other answers mentioned this point, so I'll just leave it at that.</p>\n\n<h2>Separation of concerns</h2>\n\n<p>And all of the above tie into this over-arching theme: keep your concerns separate. Your view acts as the official record of what is supposed to happen (for the most part); your model represents your data; you have a service layer to perform reusable tasks; you do DOM manipulation and augment your view with directives; and you glue it all together with controllers. This was also mentioned in other answers, and the only thing I would add pertains to testability, which I discuss in another section below.</p>\n\n<h2>Dependency injection</h2>\n\n<p>To help us out with separation of concerns is <a href=\"http://en.wikipedia.org/wiki/Dependency_injection\" rel=\"noreferrer\">dependency injection</a> (DI). If you come from a server-side language (from <a href=\"http://en.wikipedia.org/wiki/Java_%28programming_language%29\" rel=\"noreferrer\">Java</a> to <a href=\"http://en.wikipedia.org/wiki/PHP\" rel=\"noreferrer\">PHP</a>) you're probably familiar with this concept already, but if you're a client-side guy coming from jQuery, this concept can seem anything from silly to superfluous to hipster. But it's not. :-)</p>\n\n<p>From a broad perspective, DI means that you can declare components very freely and then from any other component, just ask for an instance of it and it will be granted. You don't have to know about loading order, or file locations, or anything like that. The power may not immediately be visible, but I'll provide just one (common) example: testing.</p>\n\n<p>Let's say in our application, we require a service that implements server-side storage through a <a href=\"http://en.wikipedia.org/wiki/Representational_State_Transfer\" rel=\"noreferrer\">REST</a> API and, depending on application state, local storage as well. When running tests on our controllers, we don't want to have to communicate with the server - we're testing the <em>controller</em>, after all. We can just add a mock service of the same name as our original component, and the injector will ensure that our controller gets the fake one automatically - our controller doesn't and needn't know the difference.</p>\n\n<p>Speaking of testing...</p>\n\n<h1>4. Test-driven development - <em>always</em></h1>\n\n<p>This is really part of section 3 on architecture, but it's so important that I'm putting it as its own top-level section.</p>\n\n<p>Out of all of the many jQuery plugins you've seen, used, or written, how many of them had an accompanying test suite? Not very many because jQuery isn't very amenable to that. But AngularJS is.</p>\n\n<p>In jQuery, the only way to test is often to create the component independently with a sample/demo page against which our tests can perform DOM manipulation. So then we have to develop a component separately and <em>then</em> integrate it into our application. How inconvenient! So much of the time, when developing with jQuery, we opt for iterative instead of test-driven development. And who could blame us?</p>\n\n<p>But because we have separation of concerns, we can do test-driven development iteratively in AngularJS! For example, let's say we want a super-simple directive to indicate in our menu what our current route is. We can declare what we want in the view of our application:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;a href=\"/hello\" when-active&gt;Hello&lt;/a&gt;\n</code></pre>\n\n<p>Okay, now we can write a test for the non-existent <code>when-active</code> directive:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>it( 'should add \"active\" when the route changes', inject(function() {\n    var elm = $compile( '&lt;a href=\"/hello\" when-active&gt;Hello&lt;/a&gt;' )( $scope );\n\n    $location.path('/not-matching');\n    expect( elm.hasClass('active') ).toBeFalsey();\n\n    $location.path( '/hello' );\n    expect( elm.hasClass('active') ).toBeTruthy();\n}));\n</code></pre>\n\n<p>And when we run our test, we can confirm that it fails. Only now should we create our directive:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>.directive( 'whenActive', function ( $location ) {\n    return {\n        scope: true,\n        link: function ( scope, element, attrs ) {\n            scope.$on( '$routeChangeSuccess', function () {\n                if ( $location.path() == element.attr( 'href' ) ) {\n                    element.addClass( 'active' );\n                }\n                else {\n                    element.removeClass( 'active' );\n                }\n            });\n        }\n    };\n});\n</code></pre>\n\n<p>Our test now passes <em>and</em> our menu performs as requested. Our development is <em>both</em> iterative <em>and</em> test-driven. Wicked-cool.</p>\n\n<h1>5. Conceptually, directives are <em>not</em> packaged jQuery</h1>\n\n<p>You'll often hear \"only do DOM manipulation in a directive\". <strong>This is a necessity.</strong> Treat it with due deference!</p>\n\n<p>But let's dive a little deeper...</p>\n\n<p>Some directives just decorate what's already in the view (think <code>ngClass</code>) and therefore sometimes do DOM manipulation straight away and then are basically done. But if a directive is like a \"widget\" and has a template, it should <em>also</em> respect separation of concerns. That is, the template <em>too</em> should remain largely independent from its implementation in the link and controller functions.</p>\n\n<p>AngularJS comes with an entire set of tools to make this very easy; with <code>ngClass</code> we can dynamically update the class; <code>ngModel</code> allows two-way data binding; <code>ngShow</code> and <code>ngHide</code> programmatically show or hide an element; and many more - including the ones we write ourselves. In other words, we can do all kinds of awesomeness <em>without</em> DOM manipulation. The less DOM manipulation, the easier directives are to test, the easier they are to style, the easier they are to change in the future, and the more re-usable and distributable they are.</p>\n\n<p>I see lots of developers new to AngularJS using directives as the place to throw a bunch of jQuery. In other words, they think \"since I can't do DOM manipulation in the controller, I'll take that code put it in a directive\". While that certainly is much better, it's often <em>still wrong</em>.</p>\n\n<p>Think of the logger we programmed in section 3. Even if we put that in a directive, we <em>still</em> want to do it the \"Angular Way\". It <em>still</em> doesn't take any DOM manipulation! There are lots of times when DOM manipulation is necessary, but it's a <em>lot</em> rarer than you think! Before doing DOM manipulation <em>anywhere</em> in your application, ask yourself if you really need to. There might be a better way.</p>\n\n<p>Here's a quick example that shows the pattern I see most frequently. We want a toggleable button. (Note: this example is a little contrived and a skosh verbose to represent more complicated cases that are solved in exactly the same way.)</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>.directive( 'myDirective', function () {\n    return {\n        template: '&lt;a class=\"btn\"&gt;Toggle me!&lt;/a&gt;',\n        link: function ( scope, element, attrs ) {\n            var on = false;\n\n            $(element).click( function () {\n                on = !on;\n                $(element).toggleClass('active', on);\n            });\n        }\n    };\n});\n</code></pre>\n\n<p>There are a few things wrong with this:</p>\n\n<ol>\n<li>First, jQuery was never necessary. There's nothing we did here that needed jQuery at all!</li>\n<li>Second, even if we already have jQuery on our page, there's no reason to use it here; we can simply use <code>angular.element</code> and our component will still work when dropped into a project that doesn't have jQuery.</li>\n<li>Third, even assuming jQuery <em>was</em> required for this directive to work, jqLite (<code>angular.element</code>) will <em>always</em> use jQuery if it was loaded! So we needn't use the <code>$</code> - we can just use <code>angular.element</code>.</li>\n<li>Fourth, closely related to the third, is that jqLite elements needn't be wrapped in <code>$</code> - the <code>element</code> that is passed to the <code>link</code> function would <em>already be</em> a jQuery element! </li>\n<li>And fifth, which we've mentioned in previous sections, why are we mixing template stuff into our logic?</li>\n</ol>\n\n<p>This directive can be rewritten (even for very complicated cases!) much more simply like so:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>.directive( 'myDirective', function () {\n    return {\n        scope: true,\n        template: '&lt;a class=\"btn\" ng-class=\"{active: on}\" ng-click=\"toggle()\"&gt;Toggle me!&lt;/a&gt;',\n        link: function ( scope, element, attrs ) {\n            scope.on = false;\n\n            scope.toggle = function () {\n                scope.on = !scope.on;\n            };\n        }\n    };\n});\n</code></pre>\n\n<p>Again, the template stuff is in the template, so you (or your users) can easily swap it out for one that meets any style necessary, and the <strong>logic</strong> never had to be touched. Reusability - boom!</p>\n\n<p>And there are still all those other benefits, like testing - it's easy! No matter what's in the template, the directive's internal API is never touched, so refactoring is easy. You can change the template as much as you want without touching the directive. And no matter what you change, your tests still pass.</p>\n\n<p>w00t!</p>\n\n<p>So if directives aren't just collections of jQuery-like functions, what are they? Directives are actually <strong>extensions of HTML</strong>. If HTML doesn't do something you need it to do, you write a directive to do it for you, and then use it just as if it was part of HTML.</p>\n\n<p>Put another way, if AngularJS doesn't do something out of the box, think how the team would accomplish it to fit right in with <code>ngClick</code>, <code>ngClass</code>, et al.</p>\n\n<h1>Summary</h1>\n\n<p>Don't even use jQuery. Don't even include it. It will hold you back. And when you come to a problem that you think you know how to solve in jQuery already, before you reach for the <code>$</code>, try to think about how to do it within the confines the AngularJS. If you don't know, ask! 19 times out of 20, the best way to do it doesn't need jQuery and to try to solve it with jQuery results in more work for you.</p>\n",
    "score": 7196,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 259038,
      "name": "Josh David Miller",
      "reputation": 115402
    }
  },
  {
    "soID": 22750676,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/22750676",
    "title": null,
    "body": "<p>If you don't like the <code>!!~</code>, etc. tricks, you can simply add <code>+1</code> to the result of <code>.indexOf()</code>. This way if a string is not found, <code>-1 + 1 = 0</code> will be falsy, <code>0.. + 1 = 1..</code> will be truthy:</p>\n\n<pre><code>if (\"StackOverflow\".indexOf(\"Stack\") + 1 )\n    alert('contains');\nelse \n    alert('does not contain');\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4464316,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/4464316",
    "title": null,
    "body": "<p>I ran in to the exact same issue. I have an ASP.NET checkbox</p>\n\n<pre><code>&lt;asp:CheckBox ID=\"chkBox1\" CssClass='cssChkBox1' runat=\"server\" /&gt;\n</code></pre>\n\n<p>In the jQuery code I used the following selector to check if the checkbox was checked or not, and it seems to work like a charm.</p>\n\n<pre><code>if ($(\"'.cssChkBox1 input[type=checkbox]'\").is(':checked'))\n{ ... } else { ... }\n</code></pre>\n\n<p>I'm sure you can also use the ID instead of the CssClass,</p>\n\n<pre><code>if ($(\"'#cssChkBox1 input[type=checkbox]'\").is(':checked'))\n{ ... } else { ... }\n</code></pre>\n\n<p>I hope this helps you.</p>\n",
    "score": 30,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3081018,
    "parentID": 1357118,
    "url": "https://stackoverflow.com/q/3081018",
    "title": null,
    "body": "<p>This is not, as you've titled it, a \"JavaScript\" question; it is a question regarding the design of jQuery.</p>\n\n<p>jQuery and the <a href=\"http://www.mail-archive.com/jquery-en@googlegroups.com/msg71371.html\" rel=\"nofollow noreferrer\">previously linked citation</a> from <a href=\"http://ejohn.org\" rel=\"nofollow noreferrer\">John Resig</a> (in <a href=\"https://stackoverflow.com/users/70393\">karim79's</a> <a href=\"https://stackoverflow.com/questions/1357118/#1357151\">message</a>) seem to be the source misunderstanding of how event handlers in general work. </p>\n\n<p>Fact: An event handler that returns false prevents the default action for that event. It does not stop the event propagation. Event handlers have always worked this way, since the old days of Netscape Navigator.</p>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Tutorial/More_Event_Handlers#Prevent_Default_Action\" rel=\"nofollow noreferrer\">documentation from MDN</a> explains how <code>return false</code> in an event handler works</p>\n\n<p>What happens in jQuery is not the same as what happens with event handlers. DOM event listeners and MSIE \"attached\" events are a different matter altogether. </p>\n\n<p>For further reading, see <a href=\"http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx\" rel=\"nofollow noreferrer\">attachEvent on MSDN</a> and the <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/\" rel=\"nofollow noreferrer\">W3C DOM 2 Events documentation</a>.</p>\n",
    "score": 78,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 261439,
      "name": "Garrett",
      "reputation": 2149
    }
  },
  {
    "soID": 5294053,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/5294053",
    "title": null,
    "body": "<p>You can use jQuery's <code>:contains</code> selector.</p>\n\n<pre><code>$(\"div:contains('John')\")\n</code></pre>\n\n<p>Check it here: <a href=\"http://api.jquery.com/contains-selector/\" rel=\"noreferrer\">contains-selector</a></p>\n",
    "score": 52,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 261549,
      "name": "Chorinator",
      "reputation": 1111
    }
  },
  {
    "soID": 10375211,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/10375211",
    "title": null,
    "body": "<p>There is a simple way if you are on a newer browser.\n<code>Object.keys(obj).length == 0</code></p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 262631,
      "name": "download",
      "reputation": 732
    }
  },
  {
    "soID": 2480180,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/2480180",
    "title": null,
    "body": "<p>Roshambo on snipplr.com has a simple script to achieve this described in <em><a href=\"http://snipplr.com/view/26662/get-url-parameters-with-jquery--improved/\" rel=\"noreferrer\">Get URL Parameters with jQuery | Improved</a></em>. With his script you also easily get to pull out just the parameters you want.</p>\n\n<p>Here's the gist:</p>\n\n<pre><code>$.urlParam = function(name, url) {\n    if (!url) {\n     url = window.location.href;\n    }\n    var results = new RegExp('[\\\\?&amp;]' + name + '=([^&amp;#]*)').exec(url);\n    if (!results) { \n        return undefined;\n    }\n    return results[1] || undefined;\n}\n</code></pre>\n\n<p>Then just get your parameters from the query string.</p>\n\n<p>So if the URL/query string was <code>xyz.com/index.html?lang=de</code>.</p>\n\n<p>Just call <code>var langval = $.urlParam('lang');</code>, and you've got it.</p>\n\n<p>UZBEKJON has a great blog post on this as well, <em><a href=\"http://jquery-howto.blogspot.com/2009/09/get-url-parameters-values-with-jquery.html\" rel=\"noreferrer\">Get URL parameters &amp; values with jQuery</a></em>.</p>\n",
    "score": 213,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2209489,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/2209489",
    "title": null,
    "body": "<p>When a constructor creates an object, that object implicitly references the constructor’s “prototype” property for the purpose of resolving property references. The constructor’s “prototype” property can be referenced by the program expression constructor.prototype, and properties added to an object’s prototype are shared, through inheritance, by all objects sharing the prototype.</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 267326,
      "name": "Tom",
      "reputation": 161
    }
  },
  {
    "soID": 4261116,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/4261116",
    "title": null,
    "body": "<p>You should use the <code>for(var x in y)</code> only on property lists, not on objects (as explained above).</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 268396,
      "name": "user268396",
      "reputation": 7250
    }
  },
  {
    "soID": 6106579,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/6106579",
    "title": null,
    "body": "<p>I took <a href=\"https://stackoverflow.com/questions/901115/get-querystring-values-in-javascript/3855394#3855394\">this answer</a> and added support for optionally passing the URL in as a parameter; falls back to window.location.search. Obviously this is useful for getting the query string parameters from URLs that are not the current page:</p>\n\n<pre><code>(function($, undef) {\n  $.QueryString = function(url) {\n    var pairs, qs = null, index, map = {};\n    if(url == undef){\n      qs = window.location.search.substr(1);\n    }else{\n      index = url.indexOf('?');\n      if(index == -1) return {};\n      qs = url.substring(index+1);\n    }\n    pairs = qs.split('&amp;');\n    if (pairs == \"\") return {};\n    for (var i = 0; i &lt; pairs.length; ++i)\n    {\n      var p = pairs[i].split('=');\n      if(p.length != 2) continue;\n      map[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n    }\n    return map;\n  };\n})(jQuery);\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21928528,
    "parentID": 14994391,
    "url": "https://stackoverflow.com/q/21928528",
    "title": null,
    "body": "<p>To describe the \"paradigm shift\", I think a short answer can suffice.</p>\n\n<h2>AngularJS changes the way you <em>find</em> elements</h2>\n\n<p>In <strong>jQuery</strong>, you typically  use <strong>selectors</strong> to find elements, and then wire them up:<br>\n<code>$('#id .class').click(doStuff);</code></p>\n\n<p>In <strong>AngularJS</strong>, you use <strong>directives</strong> to mark the elements directly, to wire them up:<br>\n<code>&lt;a ng-click=\"doStuff()\"&gt;</code></p>\n\n<p>AngularJS doesn't need (or want) you to find elements using selectors - the primary difference between AngularJS's <strong>jqLite</strong> versus full-blown <strong>jQuery</strong> is that <a href=\"https://docs.angularjs.org/api/ng/function/angular.element\" rel=\"noreferrer\">jqLite does not support selectors</a>.  </p>\n\n<p>So when people say \"don't include jQuery at all\", it's mainly because they don't want you to use selectors; they want you to learn to use directives instead. Direct, not select!</p>\n",
    "score": 85,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 272072,
      "name": "Scott Rippey",
      "reputation": 11381
    }
  },
  {
    "soID": 23522589,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/23522589",
    "title": null,
    "body": "<pre><code>node-debug -p 8888 scriptFileName.js\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 276093,
      "name": "matt burns",
      "reputation": 13873
    }
  },
  {
    "soID": 25310058,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/25310058",
    "title": null,
    "body": "<p>Behavior comparison between <code>arr = []</code> vs a <code>arr.pop()</code> loop:</p>\n\n<pre><code>var arr = [1,2,3];\nvar arrCopy = arr;\narr = [];\nconsole.log(arrCopy.length); /* Outputs 3: arr points to a NEW array (which is empty), and arrCopy still points to [1,2,3]. */\n\nvar brr = [4,5,6,7];\nvar brrCopy = brr;\nwhile (brr.length) {\n    brr.pop();\n}\nconsole.log(brrCopy.length); /* Outputs 0: brr and brrCopy points to the same array, whose elements are removed in the loop. */\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 277291,
      "name": "daghan",
      "reputation": 661
    }
  },
  {
    "soID": 10542368,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/10542368",
    "title": null,
    "body": "<p><a href=\"http://underscorejs.org/#sortBy\">underscore.js</a></p>\n\n<p>use underscore, its small and awesome...</p>\n\n<blockquote>\n  <p>sortBy_.sortBy(list, iterator, [context])  Returns a sorted copy of\n  list, ranked in ascending order by the results of running each value\n  through iterator. Iterator may also be the string name of the property\n  to sort by (eg. length).</p>\n</blockquote>\n\n<pre><code>var objs = [ \n  { first_nom: 'Lazslo',last_nom: 'Jamf' },\n  { first_nom: 'Pig', last_nom: 'Bodine'  },\n  { first_nom: 'Pirate', last_nom: 'Prentice' }\n];\n\nvar sortedObjs = _.sortBy( objs, 'first_nom' );\n</code></pre>\n",
    "score": 111,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 279558,
      "name": "David Morrow",
      "reputation": 3008
    }
  },
  {
    "soID": 17907395,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/17907395",
    "title": null,
    "body": "<p>There's a robust implementation in Node.js's source<br>\n<a href=\"https://github.com/joyent/node/blob/master/lib/querystring.js\" rel=\"nofollow noreferrer\">https://github.com/joyent/node/blob/master/lib/querystring.js</a>  </p>\n\n<p>Also TJ's qs does nested params parsing<br>\n<a href=\"https://github.com/visionmedia/node-querystring\" rel=\"nofollow noreferrer\">https://github.com/visionmedia/node-querystring</a>  </p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 7505602,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/7505602",
    "title": null,
    "body": "<p>Another option is:</p>\n\n<pre><code>$('input[name=radioName]:radio:checked').val()\n</code></pre>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 285295,
      "name": "RedDragon",
      "reputation": 1059
    }
  },
  {
    "soID": 2383215,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/2383215",
    "title": null,
    "body": "<p><strong>UPDATE</strong>: Thanks for all the upvotes everyone, but I don't think my answer below is the best way to write enums in Javascript anymore. See my blog post for more details: <a href=\"http://stijndewitt.wordpress.com/2014/01/26/enums-in-javascript/\" rel=\"noreferrer\">Enums in Javascript</a>.</p>\n\n<hr>\n\n<p>Alerting the name is already possible:</p>\n\n<pre><code>if (currentColor == my.namespace.ColorEnum.RED) {\n   // alert name of currentColor (RED: 0)\n   var col = my.namespace.ColorEnum;\n   for (var name in col) {\n     if (col[name] == col.RED)\n       alert(name);\n   }\n}\n</code></pre>\n\n<p>Alternatively, you could make the values objects, so you can have the cake and eat it too:</p>\n\n<pre><code>var SIZE = {\n  SMALL : {value: 0, name: \"Small\", code: \"S\"}, \n  MEDIUM: {value: 1, name: \"Medium\", code: \"M\"}, \n  LARGE : {value: 2, name: \"Large\", code: \"L\"}\n};\n\nvar currentSize = SIZE.MEDIUM;\nif (currentSize == SIZE.MEDIUM) {\n  // this alerts: \"1: Medium\"\n  alert(currentSize.value + \": \" + currentSize.name);\n}\n</code></pre>\n\n<p>In Javascript, as it is a dynamic language, it is even possible to add enum values to the set later:</p>\n\n<pre><code>// Add EXTRALARGE size\nSIZE.EXTRALARGE = {value: 3, name: \"Extra Large\", code: \"XL\"};\n</code></pre>\n\n<p>Remember, the fields of the enum (value, name and code in this example) are not needed for the identity check and are only there for convenience. Also the name of the size property itself does not need to be hardcoded, but can also be set dynamically. So supposing you only know the name for your new enum value, you can still add it without problems:</p>\n\n<pre><code>// Add 'Extra Large' size, only knowing it's name\nvar name = \"Extra Large\";\nSIZE[name] = {value: -1, name: name, code: \"?\"};\n</code></pre>\n\n<p>Of course this means that some assumptions can no longer be made (that value represents the correct order for the size for example). </p>\n\n<p>Remember, in Javascript an object is just like a map or hashtable. A set of name-value pairs. You can loop through them or otherwise manipulate them without knowing much about them in advance.</p>\n\n<p>E.G:</p>\n\n<pre><code>for (var sz in SIZE) {\n  // sz will be the names of the objects in SIZE, so\n  // 'SMALL', 'MEDIUM', 'LARGE', 'EXTRALARGE'\n  var size = SIZE[sz]; // Get the object mapped to the name in sz\n  for (var prop in size) {\n    // Get all the properties of the size object, iterates over\n    // 'value', 'name' and 'code'. You can inspect everything this way.        \n  }\n} \n</code></pre>\n\n<p>And btw, if you are interested in namespaces, you may want to have a look at my solution for simple but powerful namespace and dependency management for javascript: <a href=\"http://packagesinjavascript.wordpress.com/\" rel=\"noreferrer\">Packages JS</a></p>\n",
    "score": 439,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 286685,
      "name": "Stijn de Witt",
      "reputation": 11742
    }
  },
  {
    "soID": 15137375,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/15137375",
    "title": null,
    "body": "<p>I did not yet see this variation, which I personally like the best:</p>\n\n<p>Given an array:</p>\n\n<pre><code>var someArray = [\"some\", \"example\", \"array\"];\n</code></pre>\n\n<p>You can loop over it without ever accessing the length property:</p>\n\n<pre><code>for (var i=0, item; item=someArray[i]; i++) {\n  // item is \"some\", then \"example\", then \"array\"\n  // i is the index of item in the array\n  alert(\"someArray[\" + i + \"]: \" + item);\n}\n</code></pre>\n\n<p>See this JsFiddle demonstrating that: <a href=\"http://jsfiddle.net/prvzk/\" rel=\"noreferrer\">http://jsfiddle.net/prvzk/</a></p>\n\n<p>This only works for arrays that are <em>not</em> sparse. Meaning that there actually is a value at each index in the array. However, I found that in practice I hardly ever use sparse arrays in Javascript... In such cases it's usually a lot easier to use an object as a map/hashtable. If you do have a sparse array, and want to loop over 0 .. length-1, you need the for (var i=0; i&lt;someArray.length; ++i) construct, but you still need an if inside the loop to check whether the element at the current index is actually defined.</p>\n\n<p>Also, as CMS mentions in a comment below, you can only use this on arrays that don't contain any falsish values. The array of strings from the example works, but if you have empty strings, or numbers that are 0 or NaN, etc. the loop will break off prematurely. Again in practice this is hardly ever a problem for me, but it is something to keep in mind, which makes this a loop to think about before you use it... That may disqualify it for some people :)</p>\n\n<p>What I like about this loop is:</p>\n\n<ul>\n<li>It's short to write </li>\n<li>No need to access (let alone cache) the length property </li>\n<li>The item to access is automatically defined within the loop\nbody under the name you pick.</li>\n<li>Combines very naturally with array.push and array.splice to use arrays like lists/stacks</li>\n</ul>\n\n<p>The reason this works is that the array specification mandates that when you read an item from an index >= the array's length, it will return undefined. When you write to such a location it will actually update the length.</p>\n\n<p>For me, this construct most closely emulates the Java 5 syntax that I love:</p>\n\n<pre><code>for (String item : someArray) {\n}\n</code></pre>\n\n<p>... with the added benefit of also knowing about the current index inside the loop</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 286685,
      "name": "Stijn de Witt",
      "reputation": 11742
    }
  },
  {
    "soID": 29004537,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/29004537",
    "title": null,
    "body": "<p>Recommend using an abstraction library for many of the features discussed here as well as better compatibility. Lots of options:</p>\n\n<ul>\n<li><a href=\"https://github.com/andris9/jStorage\">jStorage</a> or <a href=\"https://github.com/andris9/simpleStorage\">simpleStorage</a> &lt;&lt; my preference</li>\n<li><a href=\"https://github.com/mozilla/localForage\">localForage</a></li>\n<li><a href=\"https://github.com/alekseykulikov/storage\">alekseykulikov/storage</a></li>\n<li><a href=\"https://github.com/brianleroux/lawnchair\">Lawnchair</a></li>\n<li><a href=\"https://github.com/marcuswestin/store.js\">Store.js</a> &lt;&lt; another good option</li>\n<li><a href=\"https://github.com/aaronagray/omg\">OMG</a></li>\n</ul>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 286973,
      "name": "doublejosh",
      "reputation": 2279
    }
  },
  {
    "soID": 2385801,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/2385801",
    "title": null,
    "body": "<p>You could use the JavaScript <code>search()</code> method.</p>\n\n<p>Syntax is: <code>string.search(regexp)</code></p>\n\n<p>It returns the position of the match, or -1 if no match is found.</p>\n\n<p>See examples there: <a href=\"http://www.w3schools.com/jsref/jsref_search.asp\" rel=\"noreferrer\">jsref_search</a></p>\n\n<p>You don't need a complicated regular expression syntax. If you are not familiar with them a simple <code>st.search(\"title\")</code> will do. If you want your test to be case insensitive, then you should do <code>st.search(/title/i)</code>.</p>\n",
    "score": 195,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 286998,
      "name": "Tardis",
      "reputation": 1967
    }
  },
  {
    "soID": 30042948,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/30042948",
    "title": null,
    "body": "<p>In ECMAScript 6 there is <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\">Object.assign</a> method, which copies values of all enumerable own properties from one object to another. For example:</p>\n\n<pre><code>var x = {myProp: \"value\"};\nvar y = Object.assign({}, x); \n</code></pre>\n\n<p>But be aware that nested objects are still copied as reference.</p>\n",
    "score": 277,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31823021,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/31823021",
    "title": null,
    "body": "<p><a href=\"https://www.jetbrains.com/idea/features/nodejs.html\" rel=\"nofollow\">IntelliJ</a> works wonderfully for Node.js.</p>\n\n<p>In addition, IntelliJ supports 'Code Assistance' well.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 290629,
      "name": "卢声远 Shengyuan Lu",
      "reputation": 17926
    }
  },
  {
    "soID": 13812954,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/13812954",
    "title": null,
    "body": "<p>You can add this to your JavaScript file to allow your arrays to be \"cleared\":</p>\n\n<pre><code>Array.prototype.clear = function() {\n    this.splice(0, this.length);\n};\n</code></pre>\n\n<p>Then you can use it like this:</p>\n\n<pre><code>var list = [1, 2, 3];\nlist.clear();\n</code></pre>\n\n<p>Or if you want to be sure you don't destroy something:</p>\n\n<pre><code>if (!Array.prototype.clear) {\n    Array.prototype.clear = function() {\n       this.splice(0, this.length);\n    };\n}\n</code></pre>\n\n<p>Lots of people think you shouldn't modify native objects (like Array), and I'm inclined to agree. Please use caution in deciding how to handle this.</p>\n",
    "score": 30,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 290991,
      "name": "leech",
      "reputation": 4856
    }
  },
  {
    "soID": 10939737,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/10939737",
    "title": null,
    "body": "<p>If anyone is looking for something more advanced, try out <a href=\"http://requirejs.org/\" rel=\"noreferrer\">RequireJS</a>. You'll get added benefits such as dependency management, better concurrency, and avoid duplication (that is, retrieving a script more than once).</p>\n\n<p>You can write your JavaScript files in \"modules\" and then reference them as dependencies in other scripts. Or you can use RequireJS as a simple \"go get this script\" solution.</p>\n\n<p>Example:</p>\n\n<p>Define dependencies as modules:</p>\n\n<p><strong>some-dependency.js</strong></p>\n\n<pre><code>define(['lib/dependency1', 'lib/dependency2'], function (d1, d2) {\n\n     //Your actual script goes here.   \n     //The dependent scripts will be fetched if necessary.\n\n     return libraryObject;  //For example, jQuery object\n});\n</code></pre>\n\n<p><strong>implementation.js</strong> is your \"main\" JavaScript file that depends on <strong>some-dependency.js</strong></p>\n\n<pre><code>require(['some-dependency'], function(dependency) {\n\n    //Your script goes here\n    //some-dependency.js is fetched.   \n    //Then your script is executed\n});\n</code></pre>\n\n<p>Excerpt from the <a href=\"https://github.com/jrburke/requirejs\" rel=\"noreferrer\">GitHub</a> README:</p>\n\n<blockquote>\n  <p>RequireJS loads plain JavaScript files as well as more defined\n  modules. It is optimized for in-browser use, including in a Web\n  Worker, but it can be used in other JavaScript environments, like\n  Rhino and Node. It implements the Asynchronous Module API.</p>\n  \n  <p>RequireJS uses plain script tags to load modules/files, so it should\n  allow for easy debugging. It can be used simply to load existing\n  JavaScript files, so <strong>you can add it to your existing project without\n  having to re-write your JavaScript files.</strong></p>\n  \n  <p>... </p>\n</blockquote>\n",
    "score": 467,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 292614,
      "name": "John Strickler",
      "reputation": 17960
    }
  },
  {
    "soID": 14919898,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/14919898",
    "title": null,
    "body": "<p><strong>Downvoters</strong>: This code is supplied for information only. </p>\n\n<p>This has been tested in Fx 19 and Chrome 24 on Mac  </p>\n\n<p><a href=\"http://jsfiddle.net/mplungjan/pMSc8/\">DEMO</a></p>\n\n<pre><code>var new_comment; /*&lt;&lt;&lt;EOF \n    &lt;li class=\"photobooth-comment\"&gt;\n       &lt;span class=\"username\"&gt;\n          &lt;a href=\"#\"&gt;You&lt;/a&gt;\n       &lt;/span&gt;\n       &lt;span class=\"comment-text\"&gt;\n          $text\n       &lt;/span&gt;\n       &lt;span class=\"comment-time\"&gt;\n          2d\n       &lt;/span&gt;\n    &lt;/li&gt;\nEOF*/\n// note the script tag here is hardcoded as the FIRST tag \nnew_comment=document.currentScript.innerHTML.split(\"EOF\")[1]; \nalert(new_comment.replace('$text','Here goes some text'));\n</code></pre>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 295783,
      "name": "mplungjan",
      "reputation": 72033
    }
  },
  {
    "soID": 35814415,
    "parentID": 1098040,
    "url": "https://stackoverflow.com/q/35814415",
    "title": null,
    "body": "<h1>Here's a helper function I find quite useful</h1>\n\n<p>This <code>keyExists(key, search)</code> can be used to easily lookup a key within  objects or arrays! </p>\n\n<p>Just pass it the key you want to find, and search obj (the object or array) you want to find it in.</p>\n\n<pre><code>function keyExists(key, search) {\n    if (!search || (search.constructor !== Array &amp;&amp; search.constructor !== Object)) {\n        return false;\n    }\n    for (var i = 0; i &lt; search.length; i++) {\n        if (search[i] === key) {\n            return true;\n        }\n    }\n    return key in search;\n}\n</code></pre>\n\n<h1>How to use it:</h1>\n\n<h3>Searching for keys in Arrays</h3>\n\n<pre><code>keyExists('apple', ['apple', 'banana', 'orange']); // true\nkeyExists('fruit', ['apple', 'banana', 'orange']); // false\n</code></pre>\n\n<p>Searching for keys in Objects</p>\n\n<pre><code>keyExists('age', {'name': 'Bill', 'age': 29 }); // true\nkeyExists('title', {'name': 'Jason', 'age': 29 }); // false\n</code></pre>\n\n<p>It's been pretty reliable and works well cross-browser.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 297765,
      "name": "jaredwilli",
      "reputation": 5993
    }
  },
  {
    "soID": 11974631,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/11974631",
    "title": null,
    "body": "<p>In <a href=\"http://en.wikipedia.org/wiki/CoffeeScript\" rel=\"nofollow noreferrer\">CoffeeScript</a>, add to the prototype for a string:</p>\n\n<pre><code>String::capitalize = -&gt;\n  @substr(0, 1).toUpperCase() + @substr(1)\n</code></pre>\n\n<p>Usage would be:</p>\n\n<pre><code>\"woobie\".capitalize()\n</code></pre>\n\n<p>Which yields:</p>\n\n<pre><code>\"Woobie\"\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 298758,
      "name": "longda",
      "reputation": 3983
    }
  },
  {
    "soID": 5715821,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/5715821",
    "title": null,
    "body": "<p>If what you're trying to do is allow users to bookmark/share pages, and you don't need it to be exactly the right URL, and you're not using hash anchors for anything else, then you can do this in two parts; you use the location.hash discussed above, and then implement a check on the home page, to look for a URL with a hash anchor in it, and redirect you to the subsequent result.</p>\n\n<p>For instance:</p>\n\n<p>1) User is on www.site.com/section/page/4</p>\n\n<p>2) User does some action which changes the URL to www.site.com/#/section/page/6 (with the hash). Say you've loaded the correct content for page 6 into the page, so apart from the hash the user is not too disturbed.</p>\n\n<p>3) User passes this URL on to someone else, or bookmarks it</p>\n\n<p>4) Someone else, or the same user at a later date, goes to www.site.com/#/section/page/6</p>\n\n<p>5) Code on www.site.com/ redirects the user to www.site.com/section/page/6, using something like this: </p>\n\n<pre><code>if (window.location.hash.length &gt; 0) window.location = window.location.hash.substring(1);\n</code></pre>\n\n<p>Hope that makes sense! It's a useful approach for some situations. </p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 299589,
      "name": "Jeremy Warne",
      "reputation": 2540
    }
  },
  {
    "soID": 4760279,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/4760279",
    "title": null,
    "body": "<p>You can also create a dynamic sort function that sorts objects by their value that you pass:</p>\n\n<pre><code>function dynamicSort(property) {\n    var sortOrder = 1;\n    if(property[0] === \"-\") {\n        sortOrder = -1;\n        property = property.substr(1);\n    }\n    return function (a,b) {\n        var result = (a[property] &lt; b[property]) ? -1 : (a[property] &gt; b[property]) ? 1 : 0;\n        return result * sortOrder;\n    }\n}\n</code></pre>\n\n<p>So you can have an array of objects like this:</p>\n\n<pre><code>var People = [\n    {Name: \"Name\", Surname: \"Surname\"},\n    {Name:\"AAA\", Surname:\"ZZZ\"},\n    {Name: \"Name\", Surname: \"AAA\"}\n];\n</code></pre>\n\n<p>...and it will work when you do:</p>\n\n<pre><code>People.sort(dynamicSort(\"Name\"));\nPeople.sort(dynamicSort(\"Surname\"));\nPeople.sort(dynamicSort(\"-Surname\"));\n</code></pre>\n\n<p>Actually this already answers the question. Below part is written because many people contacted me, complaining that <a href=\"https://stackoverflow.com/questions/11379361\">it doesn't work with multiple parameters</a>.</p>\n\n<h2>Multiple Parameters</h2>\n\n<p>You can use the function below to generate sort functions with multiple sort parameters.</p>\n\n<pre><code>function dynamicSortMultiple() {\n    /*\n     * save the arguments object as it will be overwritten\n     * note that arguments object is an array-like object\n     * consisting of the names of the properties to sort by\n     */\n    var props = arguments;\n    return function (obj1, obj2) {\n        var i = 0, result = 0, numberOfProperties = props.length;\n        /* try getting a different result from 0 (equal)\n         * as long as we have extra properties to compare\n         */\n        while(result === 0 &amp;&amp; i &lt; numberOfProperties) {\n            result = dynamicSort(props[i])(obj1, obj2);\n            i++;\n        }\n        return result;\n    }\n}\n</code></pre>\n\n<p>Which would enable you to do something like this:</p>\n\n<pre><code>People.sort(dynamicSortMultiple(\"Name\", \"-Surname\"));\n</code></pre>\n\n<h2>Adding It To The Prototype</h2>\n\n<p><em>(Implementation which is just below is inspired from <a href=\"https://stackoverflow.com/users/2312161/mike-r\">Mike R</a>'s <a href=\"https://stackoverflow.com/a/16174180/300011\">answer</a>)</em></p>\n\n<p><strong>I wouldn't recommend changing a native object prototype but just to give an example so you can implement it on your own objects</strong> (For the environments that support it, you can also use <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty\" rel=\"noreferrer\">Object.defineProperty</a> as shown in the next section, which at least doesn't have the negative side-effect of being enumerable, as described at the last part)</p>\n\n<p>Prototype implementation would be something like the following (<a href=\"http://jsfiddle.net/M2ESb/\" rel=\"noreferrer\">Here's a working example</a>):</p>\n\n<pre><code>//Don't just copy-paste this code. You will break the \"for-in\" loops\n!function() {\n    function _dynamicSortMultiple(attr) {\n       /* dynamicSortMultiple function body comes here */\n    }\n    function _dynamicSort(property) {\n        /* dynamicSort function body comes here */\n    }\n    Array.prototype.sortBy = function() {\n        return this.sort(_dynamicSortMultiple.apply(null, arguments));\n    }\n}();\n</code></pre>\n\n<h3>The \"OK\" Way Of Adding It To The Prototype</h3>\n\n<p>If you're targeting IE v9.0 and up then, as I previously mentioned, use <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty\" rel=\"noreferrer\">Object.defineProperty</a> like this (<a href=\"http://jsfiddle.net/K7Lt8/\" rel=\"noreferrer\">working example</a>):</p>\n\n<pre><code>//Won't work below IE9, but totally safe otherwise\n!function() {\n    function _dynamicSortMultiple(attr) {\n       /* dynamicSortMultiple function body comes here */\n    }\n    function _dynamicSort(property) {\n        /* dynamicSort function body comes here */\n    }\n    Object.defineProperty(Array.prototype, \"sortBy\", {\n        enumerable: false,\n        writable: true,\n        value: function() {\n            return this.sort(_dynamicSortMultiple.apply(null, arguments));\n        }\n    });\n}();\n</code></pre>\n\n<p>This can be an acceptable compromise until the <a href=\"https://github.com/zenparsing/es-function-bind\" rel=\"noreferrer\" title=\"bind operator proposal\">bind operator</a> arrives.</p>\n\n<p>All those prototype fun enables this:</p>\n\n<pre><code>People.sortBy(\"Name\", \"-Surname\");\n</code></pre>\n\n<h3>You Should Read This</h3>\n\n<p>If you use the direct prototype access method (Object.defineProperty is fine) and other code does not check <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\" rel=\"noreferrer\">hasOwnProperty</a>, kittens die! Ok, to be honest, no harm comes to any kitten really but probably things will break and every other developer in your team will hate you:</p>\n\n<p><img src=\"https://i.stack.imgur.com/kL8So.png\" alt=\"evil\"></p>\n\n<p>See that last \"SortBy\"? Yeah. Not cool. Use Object.defineProperty where you can, and leave the Array.prototype alone otherwise.</p>\n",
    "score": 515,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 300011,
      "name": "Ege Özcan",
      "reputation": 7605
    }
  },
  {
    "soID": 20749758,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/20749758",
    "title": null,
    "body": "<p>I use this:</p>\n\n<pre><code>document.addEventListener(\"DOMContentLoaded\", function(event) { \n    //Do work\n});\n</code></pre>\n\n<p>Note: This probably only works with newer browsers, especially these: <a href=\"http://caniuse.com/#feat=domcontentloaded\">http://caniuse.com/#feat=domcontentloaded</a></p>\n",
    "score": 29,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 302908,
      "name": "Dustin Davis",
      "reputation": 10470
    }
  },
  {
    "soID": 14790863,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/14790863",
    "title": null,
    "body": "<pre><code>function randomRange(min, max) {\n  return ~~(Math.random() * (max - min + 1)) + min\n}\n</code></pre>\n\n<p>Alternative if you are using <strong><a href=\"http://underscorejs.org/#random\">Underscore.js</a></strong> you can use</p>\n\n<pre><code>_.random(min, max)\n</code></pre>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 304894,
      "name": "Codler",
      "reputation": 6705
    }
  },
  {
    "soID": 3146971,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/3146971",
    "title": null,
    "body": "<p>A little improve to Justin's variant:</p>\n\n<pre><code>Storage.prototype.setObject = function(key, value) {\n    this.setItem(key, JSON.stringify(value));\n}\n\nStorage.prototype.getObject = function(key) {\n    var value = this.getItem(key);\n    return value &amp;&amp; JSON.parse(value);\n}\n</code></pre>\n\n<p>Because of <a href=\"http://en.wikipedia.org/wiki/Short-circuit_evaluation\" rel=\"noreferrer\">short-circuit evaluation</a>, <code>getObject()</code> will <em>immediately</em> return <code>null</code> if <code>key</code> is not in Storage. It also will not throw a <code>SyntaxError</code> exception if <code>value</code> is <code>\"\"</code> (the empty string; <code>JSON.parse()</code> cannot handle that).</p>\n\n<p>UPD. Added variable that Mark Storer mentioned in comment</p>\n",
    "score": 492,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 305830,
      "name": "Guria",
      "reputation": 5116
    }
  },
  {
    "soID": 19260122,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/19260122",
    "title": null,
    "body": "<pre><code>function include(js)\n{\n    document.writeln(\"&lt;script src=\" + js + \"&gt;&lt;\" + \"/script&gt;\");\n}\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 309798,
      "name": "Amir Saniyan",
      "reputation": 4120
    }
  },
  {
    "soID": 9611848,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/9611848",
    "title": null,
    "body": "<p>If you need a powerful logging library for Node.js, <a href=\"https://github.com/baryon/tracer\" rel=\"nofollow\">Tracer https://github.com/baryon/tracer</a> is a better choice.</p>\n\n<p>It outputs log messages with a timestamp, file name, method name, line number, path or call stack, support color console, and support database, file, stream transport easily. I am the author.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 314173,
      "name": "Baryon Lee",
      "reputation": 693
    }
  },
  {
    "soID": 7669423,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/7669423",
    "title": null,
    "body": "<p>Using the <code>Click</code> event handler for the checkbox property is unreliable, as the <code>checked</code> property can change during the execution of the event handler itself!</p>\n\n<p>Ideally, you'd want to put your code into a <code>change</code> event handler such as it is fired every time the value of the check box is changed (independent of <em>how</em> it's done so).</p>\n\n<pre><code>$('#isAgeSelected').bind('change', function () {\n\n   if ($(this).is(':checked'))\n     $(\"#txtAge\").show();\n   else\n     $(\"#txtAge\").hide();\n});\n</code></pre>\n",
    "score": 45,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4258535,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/4258535",
    "title": null,
    "body": "<p>This works in IE, Safari, Chrome and Firefox:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;div class=\"crazy_idea\" thorn_in_my_side='&lt;table  border=\"0\"&gt;\n                        &lt;tr&gt;\n                            &lt;td &gt;&lt;span class=\"mlayouttablecellsdynamic\"&gt;PACKAGE price $65.00&lt;/span&gt;&lt;/td&gt;\n                        &lt;/tr&gt;\n                    &lt;/table&gt;'&gt;&lt;/div&gt;\n&lt;script type=\"text/javascript\"&gt;\n    alert($(\".crazy_idea\").attr(\"thorn_in_my_side\"));\n&lt;/script&gt;\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 318614,
      "name": "stillatmycomputer",
      "reputation": 135
    }
  },
  {
    "soID": 10587330,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/10587330",
    "title": null,
    "body": "<p>Aside from the fact that <code>for</code>...<code>in</code> loops over all enumerable properties (which is <em>not</em> the same as \"all array elements\"!), see <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\" rel=\"noreferrer\">http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf</a>, section 12.6.4 (5th edition) or 13.7.5.15 (7th edition):</p>\n\n<blockquote>\n  <p>The mechanics and <strong>order</strong> of enumerating the properties ... <strong>is not specified</strong>...</p>\n</blockquote>\n\n<p>(Emphasis mine.)</p>\n\n<p>That means if a browser wanted to, it could go through the properties in the order in which they were inserted.  Or in numerical order.  Or in lexical order (where \"30\" comes before \"4\"!  Keep in mind all object keys -- and thus, all array indexes -- are actually strings, so that makes total sense).  It could go through them by bucket, if it implemented objects as hash tables.  Or take any of that and add \"backwards\".  A browser could even iterate <em>randomly</em> and be ECMA-262 compliant, as long as it visited each property exactly once.</p>\n\n<p>In practice, most browsers currently like to iterate in roughly the same order.  But there's nothing saying they have to.  That's implementation specific, and could change at any time if another way was found to be far more efficient.</p>\n\n<p>Either way, <code>for</code>...<code>in</code> carries with it no connotation of order.  If you care about order, be explicit about it and use a regular <code>for</code> loop with an index.</p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 319403,
      "name": "cHao",
      "reputation": 59883
    }
  },
  {
    "soID": 7106148,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/7106148",
    "title": null,
    "body": "<p>Here's my edit to <a href=\"https://stackoverflow.com/questions/901115/get-query-string-values-in-javascript/3855394#3855394\">this excellent answer</a> - with added ability to parse query strings with keys without values.</p>\n\n<pre><code>var url = 'http://sb.com/reg/step1?param';\nvar qs = (function(a) {\n    if (a == \"\") return {};\n    var b = {};\n    for (var i = 0; i &lt; a.length; ++i) {\n        var p=a[i].split('=', 2);\n        if (p[1]) p[1] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n        b[p[0]] = p[1];\n    }\n    return b;\n})((url.split('?'))[1].split('&amp;'));\n</code></pre>\n\n<p><b>IMPORTANT!</b> The parameter for that function in the last line is different. It's just an example of how one can pass an arbitrary URL to it. You can use last line from Bruno's answer to parse the current URL.</p>\n\n<p>So what exactly changed? With url <code>http://sb.com/reg/step1?param=</code> results will be same. But with url <code>http://sb.com/reg/step1?param</code> Bruno's solution returns an object without keys, while mine returns an object with key <code>param</code> and <code>undefined</code> value.</p>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11782460,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/11782460",
    "title": null,
    "body": "<p>In my case I have two radio buttons in one form and I wanted to know the status of each button.\nThis below worked for me:</p>\n\n<p>HTML side:</p>\n\n<pre><code>&lt;form id=\"toggle-form\"&gt;\n      &lt;div id=\"radio\"&gt;\n        &lt;input type=\"radio\" id=\"radio1\" name=\"radio\" checked=\"checked\" /&gt;&lt;label for=\"radio1\"&gt;Plot single&lt;/label&gt;\n        &lt;input type=\"radio\" id=\"radio2\" name=\"radio\"/&gt;&lt;label for=\"radio2\"&gt;Plot all&lt;/label&gt;\n      &lt;/div&gt;\n    &lt;/form&gt;\n</code></pre>\n\n<p>Javascript side:</p>\n\n<pre><code>// get radio buttons value\nconsole.log( \"radio1: \" +  $('input[id=radio1]:checked', '#toggle-form').val() );\nconsole.log( \"radio2: \" +  $('input[id=radio2]:checked', '#toggle-form').val() );\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 320369,
      "name": "rmbianchi",
      "reputation": 1889
    }
  },
  {
    "soID": 7274399,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/7274399",
    "title": null,
    "body": "<p>Get all radios:</p>\n\n<pre><code>var radios = jQuery(\"input[type='radio']\");\n</code></pre>\n\n<p>Filter to get the one thats checked</p>\n\n<pre><code>radios.filter(\":checked\")\n</code></pre>\n",
    "score": 36,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 327934,
      "name": "Alex V",
      "reputation": 14380
    }
  },
  {
    "soID": 3953655,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/3953655",
    "title": null,
    "body": "<p>If you want a really simple solution (takes less than 5 minutes to integrate) and looks good right out of the box, then Clippy is a nice alternative to some of the more complex solutions.  </p>\n\n<p><a href=\"http://github.com/mojombo/clippy\" rel=\"nofollow noreferrer\">Clippy</a></p>\n\n<p>It was written by a co-founder of Github.  Example Flash embed code below:</p>\n\n<pre><code>&lt;object \n   classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\"\n   width=\"110\"\n   height=\"14\"\n   id=\"clippy\"&gt;\n  &lt;param name=\"movie\" value=\"/flash/clippy.swf\"/&gt;\n  &lt;param name=\"allowScriptAccess\" value=\"always\"/&gt;\n  &lt;param name=\"quality\" value=\"high\"/&gt;\n  &lt;param name=\"scale\" value=\"noscale\"/&gt;\n  &lt;param NAME=\"FlashVars\" value=\"text=#{text}\"/&gt;\n  &lt;param name=\"bgcolor\" value=\"#{bgcolor}\"/&gt;\n  &lt;embed \n     src=\"/flash/clippy.swf\"\n     width=\"110\"\n     height=\"14\"\n     name=\"clippy\"\n     quality=\"high\"\n     allowScriptAccess=\"always\"\n     type=\"application/x-shockwave-flash\"\n     pluginspage=\"http://www.macromedia.com/go/getflashplayer\"\n     FlashVars=\"text=#{text}\"\n     bgcolor=\"#{bgcolor}\"/&gt;\n&lt;/object&gt;\n</code></pre>\n\n<p>Remember to replace <code>#{text}</code> with the text you need copied, and <code>#{bgcolor}</code> with a color.</p>\n",
    "score": 99,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 330110,
      "name": "Brent Matzelle",
      "reputation": 3000
    }
  },
  {
    "soID": 29338226,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/29338226",
    "title": null,
    "body": "<p>If you are using the <a href=\"https://atom.io/packages/node-debugger\" rel=\"nofollow noreferrer\">Atom IDE</a>, you can install the <code>node-debugger</code> package.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 330642,
      "name": "Uchiha Itachi",
      "reputation": 395
    }
  },
  {
    "soID": 7954503,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/7954503",
    "title": null,
    "body": "<p>My take:</p>\n\n<pre><code>function isEmpty(obj) {\n    return !Object.keys(obj).length &gt; 0;\n}\n\nvar a = {a:1, b:2}\nvar b = {}\n\nconsole.log(isEmpty(a)); // false\nconsole.log(isEmpty(b)); // true\n</code></pre>\n\n<p>Just, I don't think all browsers implement <code>Object.keys()</code> currently.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 330911,
      "name": "NiKo",
      "reputation": 8631
    }
  },
  {
    "soID": 27105655,
    "parentID": 18641899,
    "url": "https://stackoverflow.com/q/27105655",
    "title": null,
    "body": "<p>This answer is an addition to the answer of Sindre Sorhus. The major difference between npm and Bower is the way they treat recursive dependencies. Note that they can be used together in a single project.</p>\n\n<p><strong>On the <a href=\"https://docs.npmjs.com/misc/faq#why-can-t-npm-just-put-everything-in-one-place-like-other-package-managers\">npm FAQ</a>:</strong> </p>\n\n<blockquote>\n  <p>It is much harder to avoid dependency conflicts without nesting\n  dependencies. This is fundamental to the way that npm works, and has\n  proven to be an extremely successful approach.</p>\n</blockquote>\n\n<p><strong>On <a href=\"http://bower.io/\">Bower</a> homepage:</strong></p>\n\n<blockquote>\n  <p>Bower is optimized for the front-end. Bower uses a flat dependency\n  tree, requiring only one version for each package, reducing page load\n  to a minimum.</p>\n</blockquote>\n\n<p>In short, npm aims for stability. Bower aims for minimal resource load. If you draw out the dependency structure, you will see this:</p>\n\n<p>npm:</p>\n\n<pre><code>project root\n[node_modules] // default directory for dependencies\n -&gt; dependency A\n -&gt; dependency B\n    [node_modules]\n    -&gt; dependency A\n\n -&gt; dependency C\n    [node_modules]\n    -&gt; dependency B\n      [node_modules]\n       -&gt; dependency A \n    -&gt; dependency D\n</code></pre>\n\n<p>As you can see it installs some dependencies recursively. Dependency A has three installed instances!</p>\n\n<p>Bower:</p>\n\n<pre><code>project root\n[bower_components] // default directory for dependencies\n -&gt; dependency A\n -&gt; dependency B // needs A\n -&gt; dependency C // needs B and D\n -&gt; dependency D\n</code></pre>\n\n<p>Here you see that all unique dependencies are on the same level. </p>\n\n<p><strong>So, why bother using npm?</strong></p>\n\n<p>Maybe dependency B requires a different version of dependency A than dependency C. npm installs both versions of this dependency so it will work anyway, but Bower will give you a <em>conflict</em> because it does not like duplication (because loading the same resource on a webpage is very inefficient and costly, also it can give some serious errors). You will have to manually pick which version you want to install. This can have the effect that one of the dependencies will break, but that is something that you will need to fix anyway.</p>\n\n<p>So, the common usage is Bower for the packages that you want to publish on your webpages (e.g. <em>runtime</em>, where you avoid duplication), and use npm for other stuff, like testing, building, optimizing, checking, etc. (e.g. <em>development time</em>, where duplication is of less concern).</p>\n\n<p><strong>Update for npm 3:</strong></p>\n\n<p>npm 3 still does things differently compared to Bower. It will install the dependencies globally, but only for the first version it encounters.  The other versions are installed in the tree (the parent module, then node_modules).</p>\n\n<ul>\n<li>[node_modules]\n\n<ul>\n<li>dep A v1.0</li>\n<li>dep B v1.0\n\n<ul>\n<li><del>dep A v1.0</del> (uses root version)</li>\n</ul></li>\n<li>dep C v1.0\n\n<ul>\n<li>dep A v2.0 (this version is different from the root version, so it will be an nested installation)</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p>For more information, I suggest reading the <a href=\"https://docs.npmjs.com/how-npm-works/npm3-dupe\">docs of npm 3</a></p>\n",
    "score": 306,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 334243,
      "name": "Justus Romijn",
      "reputation": 9425
    }
  },
  {
    "soID": 12450408,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/12450408",
    "title": null,
    "body": "<p>additional desc params for <strong>Ege Özcan</strong> code</p>\n\n<pre><code>function dynamicSort(property, desc) {\n    if (desc) {\n        return function (a, b) {\n            return (a[property] &gt; b[property]) ? -1 : (a[property] &lt; b[property]) ? 1 : 0;\n        }   \n    }\n    return function (a, b) {\n        return (a[property] &lt; b[property]) ? -1 : (a[property] &gt; b[property]) ? 1 : 0;\n    }\n}\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 336142,
      "name": "Behnam Yousefi",
      "reputation": 758
    }
  },
  {
    "soID": 38174603,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/38174603",
    "title": null,
    "body": "<p>The concept of <code>prototypal</code> inheritance is one of the most complicated for many developers. Let's try to understand the root of problem to understand <code>prototypal inheritance</code> better. Let's start with a <code>plain</code> function. </p>\n\n<p><a href=\"https://i.stack.imgur.com/BsHT0.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/BsHT0.png\" alt=\"enter image description here\"></a></p>\n\n<p>If we use a <code>new</code> operator on the <code>Tree function</code>, we call it as a <code>constructor</code> function. </p>\n\n<p><a href=\"https://i.stack.imgur.com/cU6Qh.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/cU6Qh.png\" alt=\"enter image description here\"></a></p>\n\n<p>Every <code>JavaScript</code> function has a <code>prototype</code>. When you log the <code>Tree.prototype</code>, you get...</p>\n\n<p><a href=\"https://i.stack.imgur.com/Xop8c.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Xop8c.png\" alt=\"enter image description here\"></a></p>\n\n<p>If you look at the above <code>console.log()</code> output, you could a see a constructor property on <code>Tree.prototype</code> and a <code>__proto__</code> property too. The <code>__proto__</code> represents the <code>prototype</code> that this <code>function</code> is based off, and since this is just a plain <code>JavaScript function</code> with no <code>inheritance</code> set up yet, it refers to the <code>Object prototype</code> which is something just built in to JavaScript...</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\" rel=\"noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype</a></p>\n\n<p>This has things like <code>.toString, .toValue, .hasOwnProperty</code> etc...</p>\n\n<p><code>__proto__</code> which was brought my mozilla is deprecated and is replaced by <code>Object.getPrototypeOf</code> method to get the <code>object's prototype</code>. </p>\n\n<p><a href=\"https://i.stack.imgur.com/GtcJO.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/GtcJO.png\" alt=\"enter image description here\"></a></p>\n\n<pre><code>Object.getPrototypeOf(Tree.prototype); // Object {} \n</code></pre>\n\n<p>Let's add a method to our <code>Tree</code> <code>prototype</code>. </p>\n\n<p><a href=\"https://i.stack.imgur.com/BsHT0.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/BsHT0.png\" alt=\"enter image description here\"></a></p>\n\n<p>We have modified the <code>Root</code> and added a <code>function</code> branch to it. </p>\n\n<p><a href=\"https://i.stack.imgur.com/cU6Qh.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/cU6Qh.png\" alt=\"enter image description here\"></a></p>\n\n<p>That means when you create an <code>instance</code> of <code>Tree</code>, you can call it's <code>branch</code> method.</p>\n\n<p><a href=\"https://i.stack.imgur.com/Xop8c.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Xop8c.png\" alt=\"enter image description here\"></a></p>\n\n<p>We can also add <code>primitives</code> or <code>objects</code> to our <code>Prototype</code>. </p>\n\n<p><a href=\"https://i.stack.imgur.com/GtcJO.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/GtcJO.png\" alt=\"enter image description here\"></a></p>\n\n<p>Let's add a <code>child-tree</code> to our <code>Tree</code>. </p>\n\n<p><a href=\"https://i.stack.imgur.com/ggFON.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/ggFON.png\" alt=\"enter image description here\"></a></p>\n\n<p>Here the <code>Child</code> inherits its <code>prototype</code> from Tree, what we are doing here is using <code>Object.create()</code> method to create a new object based off what you pass, here it is <code>Tree.prototype</code>. In this case what we're doing is setting the prototype of Child to a new object that looks identical to the <code>Tree</code> prototype. Next we are setting the <code>Child's constructor to Child</code>, if we don't it would point to <code>Tree()</code>. </p>\n\n<p><a href=\"https://i.stack.imgur.com/yiZcY.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/yiZcY.png\" alt=\"enter image description here\"></a></p>\n\n<p><code>Child</code> now has its own <code>prototype</code>, its <code>__proto__</code> points to <code>Tree</code> and <code>Tree's prototype</code> points to base <code>Object</code>. </p>\n\n<pre><code>Child  \n|\n \\\n  \\\n   Tree.prototype\n   - branch\n   |\n   |\n    \\\n     \\\n      Object.prototype\n      -toString\n      -valueOf\n      -etc., etc.\n</code></pre>\n\n<p>Now you create an <code>instance</code> of <code>Child</code> and call <code>branch</code> which is originally available in <code>Tree</code>. We haven't actually defined our <code>branch</code> on the <code>Child prototype</code>. BUT, in the <code>Root prototype</code> which Child inherits from. </p>\n\n<p><a href=\"https://i.stack.imgur.com/k6BNb.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/k6BNb.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>In JS everything is not an object, everything can act like an object.</strong></p>\n\n<p><code>Javascript</code> has primitives like <code>strings, number, booleans, undefined, null.</code> They are not <code>object(i.e reference types)</code>, but certainly can act like an <code>object</code>. Let's look at an example here.</p>\n\n<p><a href=\"https://i.stack.imgur.com/WVjiv.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/WVjiv.png\" alt=\"enter image description here\"></a></p>\n\n<p>In the first line of this listing, a <code>primitive</code> string value is assigned to name. The second line treats name like an <code>object</code> and calls <code>charAt(0)</code> using dot notation.</p>\n\n<p>This is what happens behind the scenes:\n// what the <code>JavaScript</code> engine does</p>\n\n<p><a href=\"https://i.stack.imgur.com/l6MHc.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/l6MHc.png\" alt=\"enter image description here\"></a></p>\n\n<p>The <code>String object</code> exists only for one statement before it’s destroyed (a process called <code>autoboxing</code>). Let's again get back to our <code>prototypal</code> <code>inheritance</code>. </p>\n\n<ul>\n<li><code>Javascript</code> supports inheritance via <code>delegation</code> based on\n<code>prototypes</code>.</li>\n<li>Each <code>Function</code> has a <code>prototype</code> property, which refers to another\nobject.</li>\n<li><code>properties/functions</code> are looked from the <code>object</code> itself or via\n<code>prototype</code> chain if it does not exist</li>\n</ul>\n\n<p>A <code>prototype</code> in JS is an object which <code>yields</code> you to the parent of another <code>object</code>. <strong>[ie.. delegation]</strong> <code>Delegation</code> means that if you are unable to do something, you’ll tell someone else to do it for you.</p>\n\n<p><a href=\"https://i.stack.imgur.com/W0NUA.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/W0NUA.png\" alt=\"enter image description here\"></a></p>\n\n<p><a href=\"https://jsfiddle.net/say0tzpL/1/\" rel=\"noreferrer\">https://jsfiddle.net/say0tzpL/1/</a></p>\n\n<p>If you look up the above fiddle, dog has access to <code>toString</code> method, but its not available in it, but available via the prototype chain which delegates to <code>Object.prototype</code></p>\n\n<p><a href=\"https://i.stack.imgur.com/lWILf.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/lWILf.png\" alt=\"enter image description here\"></a></p>\n\n<p>If you look at the below one, we are trying to access the <code>call</code> method which is available in every <code>function</code>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/iF4RN.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/iF4RN.png\" alt=\"enter image description here\"></a></p>\n\n<p><a href=\"https://jsfiddle.net/rknffckc/\" rel=\"noreferrer\">https://jsfiddle.net/rknffckc/</a></p>\n\n<p>If you look up the above fiddle, <code>Profile</code> Function has access to <code>call</code> method, but its not available in it, but available via the prototype chain which delegates to <code>Function.prototype</code></p>\n\n<p><a href=\"https://i.stack.imgur.com/Mijkj.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Mijkj.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>Note:</strong> <code>prototype</code> is a property of the function constructor, whereas <code>__proto__</code> is a property of the objects constructed from the function constructor. Every function comes with a <code>prototype</code> property whose value is an empty <code>object</code>. When we create an instance of the function, we get an internal property <code>[[Prototype]]</code> or <code>__proto__</code> whose reference is the prototype of the Function <code>constructor</code>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/HvzDP.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/HvzDP.png\" alt=\"enter image description here\"></a></p>\n\n<p>The above diagram looks bit complicated, but brings out the whole picture on how <code>prototype chaining</code> works. Let's walk through this slowly:</p>\n\n<p>There are two instance <code>b1</code> and <code>b2</code>, whose constructor is <code>Bar</code> and parent is Foo and has two methods from prototype chain <code>identify</code> and <code>speak</code> via <code>Bar</code> and <code>Foo</code></p>\n\n<p><a href=\"https://i.stack.imgur.com/EllEL.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/EllEL.png\" alt=\"enter image description here\"></a></p>\n\n<p><a href=\"https://jsfiddle.net/kbp7jr7n/\" rel=\"noreferrer\">https://jsfiddle.net/kbp7jr7n/</a></p>\n\n<p>If you look up the code above, we have <code>Foo</code> constructor who has the method <code>identify()</code> and <code>Bar</code> constructor which has <code>speak</code> method. We create two <code>Bar</code> instance <code>b1</code> and <code>b2</code> whose parent type is <code>Foo</code>. Now while calling <code>speak</code> method of <code>Bar</code>, we are able to identify the who is calling the speak via <code>prototype</code> chain. </p>\n\n<p><a href=\"https://i.stack.imgur.com/V7fH7.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/V7fH7.png\" alt=\"enter image description here\"></a></p>\n\n<p><code>Bar</code> now has all the methods of <code>Foo</code> which are defined in its <code>prototype</code>. Let's dig further in understanding the <code>Object.prototype</code> and <code>Function.prototype</code> and how they are related. If you look up the constructor of <code>Foo</code>, <code>Bar</code> and <code>Object</code> are <code>Function constructor</code>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/wzzRu.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/wzzRu.png\" alt=\"enter image description here\"></a></p>\n\n<p>The <code>prototype</code> of <code>Bar</code> is <code>Foo</code>, <code>prototype</code> of <code>Foo</code> is <code>Object</code> and if you look closely the <code>prototype</code> of <code>Foo</code> is related to <code>Object.prototype</code>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/wEOxo.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/wEOxo.png\" alt=\"enter image description here\"></a></p>\n\n<p>Before we close this down, let's just wrap with a small piece of code here to <strong>summarize everything above</strong>. We are using <code>instanceof</code> operator here to check whether an <code>object</code> has in its <code>prototype</code> chain the <code>prototype</code> property of a <code>constructor</code> which below summarizes the entire big diagram. </p>\n\n<p><a href=\"https://i.stack.imgur.com/n84uV.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/n84uV.png\" alt=\"enter image description here\"></a></p>\n\n<p>I hope this add's some information, I know this kinda could be big to grasp... in simple words its <strong>it's just objects linked to objects!!!!</strong> </p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 337128,
      "name": "Thalaivar",
      "reputation": 12240
    }
  },
  {
    "soID": 40062403,
    "parentID": 894860,
    "url": "https://stackoverflow.com/q/40062403",
    "title": null,
    "body": "<p><strong>Default Parameter Values</strong></p>\n\n<p>With ES6, you can do perhaps one of the most common idioms in <code>JavaScript</code> relates to setting a default  value for a function parameter. The way we’ve done this for years should look quite  familiar:</p>\n\n<pre><code>function foo(x,y) {\n x = x || 11;\n y = y || 31;\n console.log( x + y );\n}\nfoo(); // 42\nfoo( 5, 6 ); // 11\nfoo( 5 ); // 36\nfoo( null, 6 ); // 17\n</code></pre>\n\n<p>This pattern is most used, but is dangerous when we pass values like </p>\n\n<pre><code>foo(0, 42)\nfoo( 0, 42 ); // 53 &lt;-- Oops, not 42\n</code></pre>\n\n<p>Why? Because the <code>0 is falsy</code>, and so the <code>x || 11 results in 11</code>, not the directly passed  in 0. To fix this gotcha, some people will instead write the check more verbosely like this:</p>\n\n<pre><code>function foo(x,y) {\n x = (x !== undefined) ? x : 11;\n y = (y !== undefined) ? y : 31;\n console.log( x + y );\n}\nfoo( 0, 42 ); // 42\nfoo( undefined, 6 ); // 17\n</code></pre>\n\n<p>we can now examine a nice helpful syntax added as of <code>ES6</code> to  streamline the assignment of default values to missing arguments:</p>\n\n<pre><code>function foo(x = 11, y = 31) {\n console.log( x + y );\n}\n\nfoo(); // 42\nfoo( 5, 6 ); // 11\nfoo( 0, 42 ); // 42\nfoo( 5 ); // 36\nfoo( 5, undefined ); // 36 &lt;-- `undefined` is missing\nfoo( 5, null ); // 5 &lt;-- null coerces to `0`\nfoo( undefined, 6 ); // 17 &lt;-- `undefined` is missing\nfoo( null, 6 ); // 6 &lt;-- null coerces to `0`\n</code></pre>\n\n<p><code>x = 11</code> in a function declaration is more like <code>x !== undefined ? x : 11</code> than the  much more common idiom <code>x || 11</code></p>\n\n<p><strong>Default Value Expressions</strong></p>\n\n<p><code>Function</code> default values can be more than just simple values like 31; they can be any  valid expression, even a <code>function call</code>:</p>\n\n<pre><code>function bar(val) {\n console.log( \"bar called!\" );\n return y + val;\n}\nfunction foo(x = y + 3, z = bar( x )) {\n console.log( x, z );\n}\nvar y = 5;\nfoo(); // \"bar called\"\n // 8 13\nfoo( 10 ); // \"bar called\"\n // 10 15\ny = 6;\nfoo( undefined, 10 ); // 9 10\n</code></pre>\n\n<p>As you can see, the default value expressions are lazily evaluated, meaning they’re  only run if and when they’re needed — that is, when a parameter’s argument is omitted or is undefined.</p>\n\n<p>A default value expression can  even be an inline function expression call — commonly referred to as an Immediately  Invoked Function Expression <code>(IIFE)</code>:</p>\n\n<pre><code>function foo( x =\n (function(v){ return v + 11; })( 31 )\n) {\n console.log( x );\n}\nfoo(); // 42\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 337128,
      "name": "Thalaivar",
      "reputation": 12240
    }
  },
  {
    "soID": 4192880,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/4192880",
    "title": null,
    "body": "<p>Here is <a href=\"https://github.com/voituk/Misc/blob/master/js/jquery.hash.js#L10\" rel=\"nofollow noreferrer\">my version of query string parsing code on GitHub</a>.</p>\n\n<p>It's \"prefixed\" with jquery.*, but the parsing function itself don't use jQuery. It's pretty fast, but still open for few simple performance optimizations.</p>\n\n<p>Also it supports list &amp; hash-tables encoding in the URL, like:</p>\n\n<pre><code>arr[]=10&amp;arr[]=20&amp;arr[]=100\n</code></pre>\n\n<p>or</p>\n\n<pre><code>hash[key1]=hello&amp;hash[key2]=moto&amp;a=How%20are%20you\n</code></pre>\n\n<hr>\n\n<pre><code>jQuery.toQueryParams = function(str, separator) {\n    separator = separator || '&amp;'\n    var obj = {}\n    if (str.length == 0)\n        return obj\n    var c = str.substr(0,1)\n    var s = c=='?' || c=='#'  ? str.substr(1) : str; \n\n    var a = s.split(separator)\n    for (var i=0; i&lt;a.length; i++) {\n        var p = a[i].indexOf('=')\n        if (p &lt; 0) {\n            obj[a[i]] = ''\n            continue\n        }\n        var k = decodeURIComponent(a[i].substr(0,p)),\n            v = decodeURIComponent(a[i].substr(p+1))\n\n        var bps = k.indexOf('[')\n        if (bps &lt; 0) {\n            obj[k] = v\n            continue;\n        } \n\n        var bpe = k.substr(bps+1).indexOf(']')\n        if (bpe &lt; 0) {\n            obj[k] = v\n            continue;\n        }\n\n        var bpv = k.substr(bps+1, bps+bpe-1)\n        var k = k.substr(0,bps)\n        if (bpv.length &lt;= 0) {\n            if (typeof(obj[k]) != 'object') obj[k] = []\n            obj[k].push(v)\n        } else {\n            if (typeof(obj[k]) != 'object') obj[k] = {}\n            obj[k][bpv] = v\n        }\n    }\n    return obj;\n\n}\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3855394,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/3855394",
    "title": null,
    "body": "<h1>ES2015 (ES6)</h1>\n\n<pre><code>const getParams = query =&gt; {\n  if (!query) {\n    return { };\n  }\n\n  return (/^[?#]/.test(query) ? query.slice(1) : query)\n    .split('&amp;')\n    .reduce((params, param) =&gt; {\n      let [ key, value ] = param.split('=');\n      params[key] = value ? decodeURIComponent(value.replace(/\\+/g, ' ')) : '';\n      return params;\n    }, { });\n};\n</code></pre>\n\n<hr>\n\n<h2>Without jQuery</h2>\n\n<pre><code>var qs = (function(a) {\n    if (a == \"\") return {};\n    var b = {};\n    for (var i = 0; i &lt; a.length; ++i)\n    {\n        var p=a[i].split('=', 2);\n        if (p.length == 1)\n            b[p[0]] = \"\";\n        else\n            b[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n    }\n    return b;\n})(window.location.search.substr(1).split('&amp;'));\n</code></pre>\n\n<p>With an URL like <code>?topic=123&amp;name=query+string</code>, the following will return:</p>\n\n<pre><code>qs[\"topic\"];    // 123\nqs[\"name\"];     // query string\nqs[\"nothere\"];  // undefined (object)\n</code></pre>\n\n<hr>\n\n<h2>Google method</h2>\n\n<p>Tearing Google's code I found the method they use: <code>getUrlParameters</code></p>\n\n<pre><code>function (b) {\n    var c = typeof b === \"undefined\";\n    if (a !== h &amp;&amp; c) return a;\n    for (var d = {}, b = b || k[B][vb], e = b[p](\"?\"), f = b[p](\"#\"), b = (f === -1 ? b[Ya](e + 1) : [b[Ya](e + 1, f - e - 1), \"&amp;\", b[Ya](f + 1)][K](\"\"))[z](\"&amp;\"), e = i.dd ? ia : unescape, f = 0, g = b[w]; f &lt; g; ++f) {\n        var l = b[f][p](\"=\");\n        if (l !== -1) {\n            var q = b[f][I](0, l),\n                l = b[f][I](l + 1),\n                l = l[Ca](/\\+/g, \" \");\n            try {\n                d[q] = e(l)\n            } catch (A) {}\n        }\n    }\n    c &amp;&amp; (a = d);\n    return d\n}\n</code></pre>\n\n<p>It is obfuscated, but it is understandable.</p>\n\n<p>They start to look for parameters on the url from <code>?</code> and also from the hash <code>#</code>. Then for each parameter they split in the equal sign <code>b[f][p](\"=\")</code> (which looks like <code>indexOf</code>, they use the position of the char to get the key/value). Having it split they check whether the parameter has a value or not, if it has they store the value of <code>d</code>, if not it just continue.</p>\n\n<p>In the end the object <code>d</code> is returned, handling escaping and the <code>+</code> sign. This object is just like mine, it has the same behavior.</p>\n\n<hr>\n\n<p>My method as a <strong>jQuery plugin</strong></p>\n\n<pre><code>(function($) {\n    $.QueryString = (function(paramsArray) {\n        let params = {};\n\n        for (let i = 0; i &lt; paramsArray.length; ++i)\n        {\n            let param = paramsArray[i]\n                .split('=', 2);\n\n            if (param.length !== 2)\n                continue;\n\n            params[param[0]] = decodeURIComponent(param[1].replace(/\\+/g, \" \"));\n        }\n\n        return params;\n    })(window.location.search.substr(1).split('&amp;'))\n})(jQuery);\n</code></pre>\n\n<p>Usage</p>\n\n<pre><code>//Get a param\n$.QueryString.param\n//-or-\n$.QueryString[\"param\"]\n//This outputs something like...\n//\"val\"\n\n//Get all params as object\n$.QueryString\n//This outputs something like...\n//Object { param: \"val\", param2: \"val\" }\n\n//Set a param (only in the $.QueryString object, doesn't affect the browser's querystring)\n$.QueryString.param = \"newvalue\"\n//This doesn't output anything, it just updates the $.QueryString object\n\n//Convert object into string suitable for url a querystring (Requires jQuery)\n$.param($.QueryString)\n//This outputs something like...\n//\"param=newvalue&amp;param2=val\"\n\n//Update the url/querystring in the browser's location bar with the $.QueryString object\nhistory.replaceState({}, '', \"?\" + $.param($.QueryString));\n//-or-\nhistory.pushState({}, '', \"?\" + $.param($.QueryString));\n</code></pre>\n\n<hr>\n\n<h2><a href=\"http://jsperf.com/querystring-with-javascript\" rel=\"noreferrer\">Performance test (split method against regex method)</a> (<a href=\"http://jsperf.com/\" rel=\"noreferrer\">jsPerf</a>)</h2>\n\n<p>Preparation code: methods declaration</p>\n\n<h3>Split test code</h3>\n\n<pre><code>var qs = window.GetQueryString(query);\n\nvar search = qs[\"q\"];\nvar value = qs[\"value\"];\nvar undef = qs[\"undefinedstring\"];\n</code></pre>\n\n<h3>Regex test code</h3>\n\n<pre><code>var search = window.getParameterByName(\"q\");\nvar value = window.getParameterByName(\"value\");\nvar undef = window.getParameterByName(\"undefinedstring\");\n</code></pre>\n\n<p><strong>Testing in Firefox 4.0 x86 on Windows Server 2008 R2 / 7 x64</strong></p>\n\n<ul>\n<li><strong>Split method</strong>: 144,780 ±2.17% fastest</li>\n<li><strong>Regex method</strong>: 13,891 ±0.85% | 90% slower</li>\n</ul>\n",
    "score": 1069,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9023088,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/9023088",
    "title": null,
    "body": "<p>A.Levy's answer is almost complete, here is my little contribution: <strong>there is a way how to handle recursive references</strong>, see this line</p>\n\n<p><code>if(this[attr]==this) copy[attr] = copy;</code></p>\n\n<p>If the object is XML DOM element, we must use <strong>cloneNode</strong> instead</p>\n\n<p><code>if(this.cloneNode) return this.cloneNode(true);</code></p>\n\n<p>Inspired by A.Levy's exhaustive study and Calvin's prototyping approach, I offer this solution:</p>\n\n<pre><code>Object.prototype.clone = function() {\n  if(this.cloneNode) return this.cloneNode(true);\n  var copy = this instanceof Array ? [] : {};\n  for(var attr in this) {\n    if(typeof this[attr] == \"function\" || this[attr]==null || !this[attr].clone)\n      copy[attr] = this[attr];\n    else if(this[attr]==this) copy[attr] = copy;\n    else copy[attr] = this[attr].clone();\n  }\n  return copy;\n}\n\nDate.prototype.clone = function() {\n  var copy = new Date();\n  copy.setTime(this.getTime());\n  return copy;\n}\n\nNumber.prototype.clone = \nBoolean.prototype.clone =\nString.prototype.clone = function() {\n  return this;\n}\n</code></pre>\n\n<p>See also Andy Burke's note in the answers.</p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8717821,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/8717821",
    "title": null,
    "body": "<p>I'm surprised I didn't see this, because it works everywhere I've tested it and is very useful for e.g. templates:</p>\n\n<pre><code>&lt;script type=\"bogus\" id=\"multi\"&gt;\n    My\n    multiline\n    string\n&lt;/script&gt;\n&lt;script&gt;\n    alert($('#multi').html());\n&lt;/script&gt;\n</code></pre>\n\n<p>Does anybody know of an environment where there is HTML but it doesn't work?</p>\n",
    "score": 74,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 345716,
      "name": "Peter V. Mørch",
      "reputation": 3666
    }
  },
  {
    "soID": 3220791,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/3220791",
    "title": null,
    "body": "<pre><code>function GET() {\n        var data = [];\n        for(x = 0; x &lt; arguments.length; ++x)\n            data.push(location.href.match(new RegExp(\"/\\?\".concat(arguments[x],\"=\",\"([^\\n&amp;]*)\")))[1])\n                return data;\n    }\n\n\nexample:\ndata = GET(\"id\",\"name\",\"foo\");\nquery string : ?id=3&amp;name=jet&amp;foo=b\nreturns:\n    data[0] // 3\n    data[1] // jet\n    data[2] // b\nor\n    alert(GET(\"id\")[0]) // return 3\n</code></pre>\n",
    "score": 35,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 27280939,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/27280939",
    "title": null,
    "body": "<p>It's very simple to solve if you are using <a href=\"http://en.wikipedia.org/wiki/PHP\">PHP</a>. Just add the following script in the beginning of your PHP page which handles the request:</p>\n\n<pre><code>&lt;?php header('Access-Control-Allow-Origin: *'); ?&gt;\n</code></pre>\n\n<p><strong>Warning :</strong> This contains a security issue for your PHP file that it could be called by attackers. you have to use sessions and cookies for authentication to prevent your file/service against this attack. Your service is vulnerable to <a href=\"https://en.wikipedia.org/wiki/Cross-site_request_forgery\">cross-site request forgery</a> (CSRF).</p>\n\n<p>If you are using <a href=\"https://en.wikipedia.org/wiki/Node-RED\">Node-red</a> you have to allow CROS in the <code>node-red/settings.js</code> file by un-commenting the following lines:</p>\n\n<pre><code>// The following property can be used to configure cross-origin resource sharing\n// in the HTTP nodes.\n// See https://github.com/troygoode/node-cors#configuration-options for\n// details on its contents. The following is a basic permissive set of options:\nhttpNodeCors: {\n origin: \"*\",\n methods: \"GET,PUT,POST,DELETE\"\n},\n</code></pre>\n",
    "score": 151,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 348589,
      "name": "shady sherif",
      "reputation": 3395
    }
  },
  {
    "soID": 5676693,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/5676693",
    "title": null,
    "body": "<p>The <a href=\"http://phpjs.org/\" rel=\"nofollow\">PHPJS project</a> has written JavaScript implementations for many of PHP's functions. Since PHP's <code>sprintf()</code> function is basically the same as C's <code>printf()</code>, <a href=\"http://phpjs.org/functions/sprintf\" rel=\"nofollow\">their JavaScript implementation of it</a> should satisfy your needs.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12254019,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/12254019",
    "title": null,
    "body": "<p>Just use two <strong>splits</strong>:</p>\n\n<pre><code>function get(n) {\n    var half = location.search.split(n + '=')[1];\n    return half !== undefined ? decodeURIComponent(half.split('&amp;')[0]) : null;\n}\n</code></pre>\n\n<p>I was reading all the previous and more complete answers. But I think that is the simplest and faster method. You can check in this jsPerf <a href=\"http://jsperf.com/querystring-with-javascript/9\" rel=\"noreferrer\">benchmark</a></p>\n\n<p>To solve the problem in Rup's comment, add a conditional split by changing the first line to the two below. But absolute accuracy means it's now slower than regexp (see <a href=\"http://jsperf.com/querystring-with-javascript/10\" rel=\"noreferrer\">jsPerf</a>).</p>\n\n<pre><code>function get(n) {\n    var half = location.search.split('&amp;' + n + '=')[1];\n    if (!half) half = location.search.split('?' + n + '=')[1];\n    return half !== undefined ? decodeURIComponent(half.split('&amp;')[0]) : null;\n}\n</code></pre>\n\n<p>So if you know you won't run into Rup's counter-case, this wins. Otherwise, regexp.</p>\n",
    "score": 81,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 26849078,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/26849078",
    "title": null,
    "body": "<h3>Node.js</h3>\n\n<p>This did the trick for me on <strong>Node.js</strong> in a matter of seconds:</p>\n\n<pre><code>npm install math\n</code></pre>\n\n<p><em>Source: <a href=\"http://mathjs.org/examples/basic_usage.js.html\" rel=\"nofollow noreferrer\">http://mathjs.org/examples/basic_usage.js.html</a></em></p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 356759,
      "name": "nottinhill",
      "reputation": 5421
    }
  },
  {
    "soID": 23291912,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/23291912",
    "title": null,
    "body": "<p>There's this library that makes it beautiful:</p>\n\n<p><a href=\"https://github.com/sindresorhus/multiline\">https://github.com/sindresorhus/multiline</a></p>\n\n<h3>Before</h3>\n\n<pre><code>var str = '' +\n'&lt;!doctype html&gt;' +\n'&lt;html&gt;' +\n'   &lt;body&gt;' +\n'       &lt;h1&gt;❤ unicorns&lt;/h1&gt;' +\n'   &lt;/body&gt;' +\n'&lt;/html&gt;' +\n'';\n</code></pre>\n\n<h3>After</h3>\n\n<pre><code>var str = multiline(function(){/*\n&lt;!doctype html&gt;\n&lt;html&gt;\n    &lt;body&gt;\n        &lt;h1&gt;❤ unicorns&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n*/});\n</code></pre>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 359072,
      "name": "mightyiam",
      "reputation": 1045
    }
  },
  {
    "soID": 38237534,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/38237534",
    "title": null,
    "body": "<p>If you do NOT</p>\n\n<ol>\n<li>want to disable web security in Chrome</li>\n<li>use JSONP</li>\n<li>use a third party site to re-route your requests</li>\n</ol>\n\n<p>and you are sure that your server has CORS enabled then (test CORS here: <a href=\"http://test-cors.org/\" rel=\"noreferrer\">http://test-cors.org/</a>)</p>\n\n<p>Then you need to pass in origin parameter with your request.\nThis origin MUST match the origin that your browser sends with your request.</p>\n\n<p>You can see it in action here:\n<a href=\"http://www.wikibackpacker.com/app/detail/Campgrounds/3591\" rel=\"noreferrer\">http://www.wikibackpacker.com/app/detail/Campgrounds/3591</a></p>\n\n<p>The edit functionality sends a GET &amp; POST request to a different domain for fetching data. I set the origin parameter which resolves the issue.\nThe backend is a mediaWiki engine.</p>\n\n<p>tldr: Add \"origin\" parameter to your calls which must be the Origin parameter that your browser sends (you cannot spoof the origin parameter)</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 372496,
      "name": "Ganesh Krishnan",
      "reputation": 2952
    }
  },
  {
    "soID": 28041517,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/28041517",
    "title": null,
    "body": "<p>Just in case someone needs a function to prevent polluting global scope, here is the function that does the same:</p>\n\n<pre><code>  function _format (str, arr) {\n    return str.replace(/{(\\d+)}/g, function (match, number) {\n      return typeof arr[number] != 'undefined' ? arr[number] : match;\n    });\n  };\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24648941,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/24648941",
    "title": null,
    "body": "<p>There are several issues with most solutions on the internet. So I decided to make a follow-up, which includes, why the accepted answer shouldn't be accepted.</p>\n\n<h2>starting situation</h2>\n\n<p>I want to <strong>deep-copy</strong> a Javascript <code>Object</code> with all of its children and their children and so on. But since I'm not kind of a normal developer, my <code>Object</code> has <em>normal</em> <code>properties</code>, <code>circular structures</code> and even <code>nested objects</code>.</p>\n\n<p>So let's create a <code>circular structure</code> and a <code>nested object</code> first.</p>\n\n<pre><code>function Circ() {\n    this.me = this;\n}\n\nfunction Nested(y) {\n    this.y = y;\n}\n</code></pre>\n\n<p>Let's bring everything together in an <code>Object</code> named <code>a</code>.</p>\n\n<pre><code>var a = {\n    x: 'a',\n    circ: new Circ(),\n    nested: new Nested('a')\n};\n</code></pre>\n\n<p>Next we want to copy <code>a</code> into a variable named <code>b</code> and mutate it.</p>\n\n<pre><code>var b = a;\n\nb.x = 'b';\nb.nested.y = 'b';\n</code></pre>\n\n<p>You know what happened here, because if not you wouldn't even landed on this great question.</p>\n\n<pre><code>console.log(a, b);\n\na --&gt; Object {\n    x: \"b\",\n    circ: Circ {\n        me: Circ { ... }\n    },\n    nested: Nested {\n        y: \"b\"\n    }\n}\n\nb --&gt; Object {\n    x: \"b\",\n    circ: Circ {\n        me: Circ { ... }\n    },\n    nested: Nested {\n        y: \"b\"\n    }\n}\n</code></pre>\n\n<p>Now let's find a solution.</p>\n\n<h2>JSON</h2>\n\n<p>The first attempt I tried was using <code>JSON</code>.</p>\n\n<pre><code>var b = JSON.parse( JSON.stringify( a ) );\n\nb.x = 'b';\nb.nested.y = 'b';\n</code></pre>\n\n<p>Don't waste too much time on it, you'll get <code>TypeError: Converting circular structure to JSON</code>.</p>\n\n<h2>Recursive copy <em>(the accepted \"answer\")</em></h2>\n\n<p>Let's have a look at the accepted answer.</p>\n\n<pre><code>function cloneSO(obj) {\n    // Handle the 3 simple types, and null or undefined\n    if (null == obj || \"object\" != typeof obj) return obj;\n\n    // Handle Date\n    if (obj instanceof Date) {\n        var copy = new Date();\n        copy.setTime(obj.getTime());\n        return copy;\n    }\n\n    // Handle Array\n    if (obj instanceof Array) {\n        var copy = [];\n        for (var i = 0, len = obj.length; i &lt; len; i++) {\n            copy[i] = cloneSO(obj[i]);\n        }\n        return copy;\n    }\n\n    // Handle Object\n    if (obj instanceof Object) {\n        var copy = {};\n        for (var attr in obj) {\n            if (obj.hasOwnProperty(attr)) copy[attr] = cloneSO(obj[attr]);\n        }\n        return copy;\n    }\n\n    throw new Error(\"Unable to copy obj! Its type isn't supported.\");\n}\n</code></pre>\n\n<p>Looks good, heh? It's a recursive copy of the object and handles other types as well, like <code>Date</code>, but that wasn't a requirement.</p>\n\n<pre><code>var b = cloneSO(a);\n\nb.x = 'b';\nb.nested.y = 'b';\n</code></pre>\n\n<p>Recursion and <code>circular structures</code> doesn't work well together... <code>RangeError: Maximum call stack size exceeded</code></p>\n\n<h2>native solution</h2>\n\n<p>After arguing with my co-worker, my boss asked us what happend, and he found a simple <em>solution</em> after some googling. It's called <code>Object.create</code>.</p>\n\n<pre><code>var b = Object.create(a);\n\nb.x = 'b';\nb.nested.y = 'b';\n</code></pre>\n\n<p>This solution was added to Javascript some time ago and even handles <code>circular structure</code>.</p>\n\n<pre><code>console.log(a, b);\n\na --&gt; Object {\n    x: \"a\",\n    circ: Circ {\n        me: Circ { ... }\n    },\n    nested: Nested {\n        y: \"b\"\n    }\n}\n\nb --&gt; Object {\n    x: \"b\",\n    circ: Circ {\n        me: Circ { ... }\n    },\n    nested: Nested {\n        y: \"b\"\n    }\n}\n</code></pre>\n\n<p>... and you see, it didn't work with the nested structure inside.</p>\n\n<h2>polyfill for the native solution</h2>\n\n<p>There's a polyfill for <code>Object.create</code> in older browser just like the IE 8. It's something like recommended by Mozilla, and of course it's not perfect and results in the same problem as the <em>native solution</em>.</p>\n\n<pre><code>function F() {};\nfunction clonePF(o) {\n    F.prototype = o;\n    return new F();\n}\n\nvar b = clonePF(a);\n\nb.x = 'b';\nb.nested.y = 'b';\n</code></pre>\n\n<p>I've put <code>F</code> outside the scope so we can have a look at what <code>instanceof</code> tells us.</p>\n\n<pre><code>console.log(a, b);\n\na --&gt; Object {\n    x: \"a\",\n    circ: Circ {\n        me: Circ { ... }\n    },\n    nested: Nested {\n        y: \"b\"\n    }\n}\n\nb --&gt; F {\n    x: \"b\",\n    circ: Circ {\n        me: Circ { ... }\n    },\n    nested: Nested {\n        y: \"b\"\n    }\n}\n\nconsole.log(typeof a, typeof b);\n\na --&gt; object\nb --&gt; object\n\nconsole.log(a instanceof Object, b instanceof Object);\n\na --&gt; true\nb --&gt; true\n\nconsole.log(a instanceof F, b instanceof F);\n\na --&gt; false\nb --&gt; true\n</code></pre>\n\n<p>Same problem as the <em>native solution</em>, but a little bit worse output.</p>\n\n<h2>the better (but not perfect) solution</h2>\n\n<p>When digging around, I found a similiar question (<a href=\"https://stackoverflow.com/questions/10728412/in-javascript-when-performing-a-deep-copy-how-do-i-avoid-a-cycle-due-to-a-pro\">In Javascript, when performing a deep copy, how do I avoid a cycle, due to a property being &quot;this&quot;?</a>) to this one, but with a way better solution.</p>\n\n<pre><code>function cloneDR(o) {\n    const gdcc = \"__getDeepCircularCopy__\";\n    if (o !== Object(o)) {\n        return o; // primitive value\n    }\n\n    var set = gdcc in o,\n        cache = o[gdcc],\n        result;\n    if (set &amp;&amp; typeof cache == \"function\") {\n        return cache();\n    }\n    // else\n    o[gdcc] = function() { return result; }; // overwrite\n    if (o instanceof Array) {\n        result = [];\n        for (var i=0; i&lt;o.length; i++) {\n            result[i] = cloneDR(o[i]);\n        }\n    } else {\n        result = {};\n        for (var prop in o)\n            if (prop != gdcc)\n                result[prop] = cloneDR(o[prop]);\n            else if (set)\n                result[prop] = cloneDR(cache);\n    }\n    if (set) {\n        o[gdcc] = cache; // reset\n    } else {\n        delete o[gdcc]; // unset again\n    }\n    return result;\n}\n\nvar b = cloneDR(a);\n\nb.x = 'b';\nb.nested.y = 'b';\n</code></pre>\n\n<p>And let's have a look at the output...</p>\n\n<pre><code>console.log(a, b);\n\na --&gt; Object {\n    x: \"a\",\n    circ: Object {\n        me: Object { ... }\n    },\n    nested: Object {\n        y: \"a\"\n    }\n}\n\nb --&gt; Object {\n    x: \"b\",\n    circ: Object {\n        me: Object { ... }\n    },\n    nested: Object {\n        y: \"b\"\n    }\n}\n\nconsole.log(typeof a, typeof b);\n\na --&gt; object\nb --&gt; object\n\nconsole.log(a instanceof Object, b instanceof Object);\n\na --&gt; true\nb --&gt; true\n\nconsole.log(a instanceof F, b instanceof F);\n\na --&gt; false\nb --&gt; false\n</code></pre>\n\n<p>The requirements are matched, but there are still some smaller issues, including changing the <code>instance</code> of <code>nested</code> and<code>circ</code> to <code>Object</code>.</p>\n\n<blockquote>\n  <p>The structure of trees that share a leaf won't be copied, they will become two independent leaves:</p>\n</blockquote>\n\n<pre><code>        [Object]                     [Object]\n         /    \\                       /    \\\n        /      \\                     /      \\\n      |/_      _\\|                 |/_      _\\|  \n  [Object]    [Object]   ===&gt;  [Object]    [Object]\n       \\        /                 |           |\n        \\      /                  |           |\n        _\\|  |/_                 \\|/         \\|/\n        [Object]               [Object]    [Object]\n</code></pre>\n\n<h2>conclusion</h2>\n\n<p>The last solution using recursion and a cache, may not be the best, but it's a <strong>real</strong> deep-copy of the object. It handles simple <code>properties</code>, <code>circular structures</code> and <code>nested object</code>, but it will mess up the instance of them while cloning.</p>\n\n<p><a href=\"http://jsfiddle.net/einfallstoll/N4mr2/\" rel=\"nofollow noreferrer\">http://jsfiddle.net/einfallstoll/N4mr2/</a></p>\n",
    "score": 47,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31155099,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/31155099",
    "title": null,
    "body": "<p>Some operators in JavaScript perform implicit type conversions, and are sometimes\nused for type conversion.</p>\n\n<p>The unary <code>!</code> operator converts its operand to a boolean and negates it.</p>\n\n<p>This fact lead to the following idiom that you can see in your source code:</p>\n\n<pre><code>!!x // Same as Boolean(x). Note double exclamation mark\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 379008,
      "name": "GibboK",
      "reputation": 26916
    }
  },
  {
    "soID": 43091265,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/43091265",
    "title": null,
    "body": "<p>The following example show how to test if a JavaScript object is empty, if by empty we means has no own properties to it.</p>\n\n<p>The script works on ES6.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>    const isEmpty = (obj) =&gt; {\r\n            if (obj === null ||\r\n                obj === undefined ||\r\n                Array.isArray(obj) ||\r\n                typeof obj !== 'object'\r\n            ) {\r\n                return true;\r\n            }\r\n            return Object.getOwnPropertyNames(obj).length === 0 ? true : false;\r\n        };\r\n        console.clear();\r\n        console.log('-----');\r\n        console.log(isEmpty(''));           // true\r\n        console.log(isEmpty(33));           // true\r\n        console.log(isEmpty([]));           // true\r\n        console.log(isEmpty({}));           // true\r\n        console.log(isEmpty({ length: 0, custom_property: [] })); // false\r\n        console.log('-----');\r\n        console.log(isEmpty('Hello'));      // true\r\n        console.log(isEmpty([1, 2, 3]));    // true\r\n        console.log(isEmpty({ test: 1 }));  // false\r\n        console.log(isEmpty({ length: 3, custom_property: [1, 2, 3] })); // false\r\n        console.log('-----');\r\n        console.log(isEmpty(new Date()));   // true\r\n        console.log(isEmpty(Infinity));     // true\r\n        console.log(isEmpty(null));         // true\r\n        console.log(isEmpty(undefined));    // true</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 379008,
      "name": "GibboK",
      "reputation": 26916
    }
  },
  {
    "soID": 25982695,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/25982695",
    "title": null,
    "body": "<p>Improvement on @Guria 's answer:</p>\n\n<pre><code>Storage.prototype.setObject = function (key, value) {\n    this.setItem(key, JSON.stringify(value));\n};\n\n\nStorage.prototype.getObject = function (key) {\n    var value = this.getItem(key);\n    try {\n        return JSON.parse(value);\n    }\n    catch(err) {\n        console.log(\"JSON parse failed for lookup of \", key, \"\\n error was: \", err);\n        return null;\n    }\n};\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 380622,
      "name": "seanp2k",
      "reputation": 588
    }
  },
  {
    "soID": 28543394,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/28543394",
    "title": null,
    "body": "<p>This question was asked quite a long time ago.  For anyone just seeing this question, there is now a site called <a href=\"http://youmightnotneedjquery.com/\" rel=\"noreferrer\">\"you might not need jquery\"</a>  which breaks down - by level of IE support required - all the functionality of jquery and provides some alternative, smaller libraries.</p>\n\n<p>IE8 document ready script according to <a href=\"http://youmightnotneedjquery.com/\" rel=\"noreferrer\">you might not need jquery</a></p>\n\n<pre><code>function ready(fn) {\n    if (document.readyState != 'loading')\n        fn();\n    else if (document.addEventListener)\n        document.addEventListener('DOMContentLoaded', fn);\n    else\n        document.attachEvent('onreadystatechange', function() {\n            if (document.readyState != 'loading')\n                fn();\n        });\n}\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 380666,
      "name": "chugadie",
      "reputation": 1655
    }
  },
  {
    "soID": 3437825,
    "parentID": 3437786,
    "url": "https://stackoverflow.com/q/3437825",
    "title": null,
    "body": "<p>If you are using jQuery, you can get the size of the window or the document using jQuery methods:</p>\n\n<pre><code>$(window).height();   // returns height of browser viewport\n$(document).height(); // returns height of HTML document (same as pageHeight in screenshot)\n$(window).width();   // returns width of browser viewport\n$(document).width(); // returns width of HTML document (same as pageWidth in screenshot)\n</code></pre>\n\n<p>For screen size you can use the <code>screen</code> object in the following way:</p>\n\n<pre><code>screen.height;\nscreen.width;\n</code></pre>\n",
    "score": 940,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 380829,
      "name": "Ankit Jaiswal",
      "reputation": 13553
    }
  },
  {
    "soID": 43719563,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/43719563",
    "title": null,
    "body": "<p>Create an in-memory DIV</p>\n\n<pre><code>$(\"&lt;div/&gt;\");\n</code></pre>\n\n<p>Add click handlers, styles etc - and finally <strong>insert into DOM</strong> into a target element selector:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(\"&lt;div/&gt;\", {\r\n\r\n  // PROPERTIES HERE\r\n  \r\n  text: \"Click me\",\r\n  id: \"example\",\r\n  \"class\": \"myDiv\",      // ('class' is still better in quotes)\r\n  css: {           \r\n    color: \"red\",\r\n    fontSize: \"3em\",\r\n    cursor: \"pointer\"\r\n  },\r\n  on: {\r\n    mouseenter: function() {\r\n      console.log(\"PLEASE... \"+ $(this).text());\r\n    },\r\n    click: function() {\r\n      console.log(\"Hy! My ID is: \"+ this.id);\r\n    }\r\n  },\r\n  append: \"&lt;i&gt;!!&lt;/i&gt;\",\r\n  appendTo: \"body\"      // Finally, append to any selector\r\n  \r\n}); // &lt;&lt; no need to do anything here as we defined the properties internally.</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><sub>Similar to ian's answer, but I found no example that properly addresses the use of methods <em>within</em> the properties object declaration so there you go.</sub></p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 383904,
      "name": "Roko C. Buljan",
      "reputation": 105718
    }
  },
  {
    "soID": 19291360,
    "parentID": 14994391,
    "url": "https://stackoverflow.com/q/19291360",
    "title": null,
    "body": "<p>jQuery is a DOM manipulation library.</p>\n\n<p>AngularJS is an MV* framework.</p>\n\n<p>In fact, AngularJS is one of the few JavaScript MV* frameworks (many JavaScript MVC tools still fall under the category library).</p>\n\n<p>Being a framework, it hosts your code and takes ownership of decisions about what to call and when!</p>\n\n<p>AngularJS itself includes a jQuery-lite edition within it. So for some basic DOM selection/manipulation, you really don't have to include the jQuery library (it saves many bytes to run on the network.)</p>\n\n<p>AngularJS has the concept of \"Directives\" for DOM manipulation and designing reusable UI components, so you should use it whenever you feel the need of doing DOM manipulation related stuff (directives are only place where you should write jQuery code while using AngularJS).</p>\n\n<p>AngularJS involves some learning curve (more than jQuery :-).</p>\n\n<p>-->For any developer coming from jQuery background, my first advice would be to \"learn JavaScript as a first class language before jumping onto a rich framework like AngularJS!\"\nI learned the above fact the hard way.</p>\n\n<p>Good luck.</p>\n",
    "score": 46,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 389237,
      "name": "Sutikshan Dubey",
      "reputation": 2767
    }
  },
  {
    "soID": 30244550,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/30244550",
    "title": null,
    "body": "<p>A quick-and-dirty way to debug small Node.js scripts with your favorite <strong>browser debugger</strong> would be to use <strong>browserify</strong>. Note that this approach doesn't work with any applications which require native I/O libraries, but it is good enough for most small scripts.</p>\n\n<pre><code>$ npm install -g browserify\n</code></pre>\n\n<p>Now move all your <code>var x = requires('x')</code> calls into a <code>requires.js</code> file and run:</p>\n\n<pre><code>$ browserify requires.js -s window -o bundle.js\n</code></pre>\n\n<p>(The downside here is that you either have to move or comment the <code>requires</code> in all your files.)</p>\n\n<p>Include the <code>bundle.js</code> in an HTML file like so:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"bundle.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Now load the file in your browser and press <kbd>F12</kbd> and viola: debug in browser.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 392549,
      "name": "Gerold Meisinger",
      "reputation": 4075
    }
  },
  {
    "soID": 6438222,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/6438222",
    "title": null,
    "body": "<p>Use jQuery's <a href=\"http://api.jquery.com/is/\" rel=\"noreferrer\">is()</a> function:</p>\n\n<pre><code>if($(\"#isAgeSelected\").is(':checked'))\n    $(\"#txtAge\").show();  // checked\nelse\n    $(\"#txtAge\").hide();  // unchecked\n</code></pre>\n",
    "score": 1321,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8042309,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/8042309",
    "title": null,
    "body": "<p>CoffeeScript </p>\n\n<pre><code>ucfirst = (str) -&gt; str.charAt(0).toUpperCase() + str.slice(1)\n</code></pre>\n\n<p>As String prototype method:</p>\n\n<pre><code>String::capitalize = -&gt; @charAt(0).toUpperCase() + @slice(1)\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 403994,
      "name": "Łukasz Kurowski",
      "reputation": 179
    }
  },
  {
    "soID": 19623445,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/19623445",
    "title": null,
    "body": "<p>If you want to support <strong><a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_7\" rel=\"nofollow\">Internet&nbsp;Explorer 7+</a> (no quirks, compatibility and other pain), last <a href=\"http://en.wikipedia.org/wiki/Google_Chrome\" rel=\"nofollow\">Chrome</a>, last <a href=\"http://en.wikipedia.org/wiki/Safari_%28web_browser%29\" rel=\"nofollow\">Safari</a>, last Firefox and no iframes</strong> - this will be enough:</p>\n\n<pre><code>is_loaded = false\ncallbacks = []\n\nloaded = -&gt;\n  is_loaded = true\n  for i in [0...callbacks.length]\n    callbacks[i].call document\n  callbacks = []\n\ncontent_loaded = -&gt;\n  document.removeEventListener \"DOMContentLoaded\", content_loaded, true\n  loaded()\n\nstate_changed = -&gt;\n  if document.readyState is \"complete\"\n    document.detachEvent \"onreadystatechange\", state_changed\n    loaded()\n\nif !!document.addEventListener\n  document.addEventListener \"DOMContentLoaded\", content_loaded, true\nelse\n  document.attachEvent \"onreadystatechange\", state_changed\n\ndom_ready = (callback) -&gt;\n  if is_loaded\n    callback.call document\n  else\n    callbacks.push callback\n</code></pre>\n",
    "score": -6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 404949,
      "name": "puchu",
      "reputation": 1205
    }
  },
  {
    "soID": 10884679,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/10884679",
    "title": null,
    "body": "<p>If you want a terse way to write a fast loop <em>and</em> you can iterate in reverse:</p>\n\n<pre><code>for (var i=myArray.length;i--;){\n  var item=myArray[i];\n}\n</code></pre>\n\n<p>This has the benefit of caching the length (similar to <code>for (var i=0, len=myArray.length; i&lt;len; ++i)</code> and unlike <code>for (var i=0; i&lt;myArray.length; ++i)</code>) while being fewer characters to type.</p>\n\n<p>There are even some times when you ought to iterate in reverse, such as when iterating over a <a href=\"https://developer.mozilla.org/En/DOM/NodeList#A_.22live.22_collection\">live NodeList</a> where you plan on removing items from the DOM during iteration.</p>\n",
    "score": 30,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 405017,
      "name": "Phrogz",
      "reputation": 191694
    }
  },
  {
    "soID": 30810322,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/30810322",
    "title": null,
    "body": "<h2>Browser Support</h2>\n\n<p>The JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand\" rel=\"noreferrer\"><code>document.execCommand('copy')</code></a> support has grown, see the links below for browser updates:</p>\n\n<ul>\n<li>IE10+ (although <a href=\"https://msdn.microsoft.com/en-us/library/ms537834(v=vs.85).aspx\" rel=\"noreferrer\">this document</a> indicates some support was there from IE5.5+).</li>\n<li><a href=\"https://developers.google.com/web/updates/2015/04/cut-and-copy-commands?hl=en\" rel=\"noreferrer\">Google Chrome 43+ (~April 2015)</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/Firefox/Releases/41#Interfaces.2FAPIs.2FDOM\" rel=\"noreferrer\">Mozilla Firefox 41+ (shipping ~September 2015)</a></li>\n<li><a href=\"https://dev.opera.com/blog/opera-29/#cut-and-copy-commands\" rel=\"noreferrer\">Opera 29+ (based on Chromium 42, ~April 2015)</a> </li>\n</ul>\n\n<h2>Simple Example</h2>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var copyTextareaBtn = document.querySelector('.js-textareacopybtn');\r\n\r\ncopyTextareaBtn.addEventListener('click', function(event) {\r\n  var copyTextarea = document.querySelector('.js-copytextarea');\r\n  copyTextarea.select();\r\n\r\n  try {\r\n    var successful = document.execCommand('copy');\r\n    var msg = successful ? 'successful' : 'unsuccessful';\r\n    console.log('Copying text command was ' + msg);\r\n  } catch (err) {\r\n    console.log('Oops, unable to copy');\r\n  }\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p&gt;\r\n  &lt;button class=\"js-textareacopybtn\" style=\"vertical-align:top;\"&gt;Copy Textarea&lt;/button&gt;\r\n  &lt;textarea class=\"js-copytextarea\"&gt;Hello I'm some text&lt;/textarea&gt;\r\n&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h2>Complex Example: Copy to clipboard without displaying input</h2>\n\n<p>The above simple example works great if there is a <code>textarea</code> or <code>input</code> element  visible on screen. </p>\n\n<p>In some cases you might wish to copy text to the clipboard without displaying an <code>input</code> / <code>textarea</code> element. This is one example of a way to work around this (basically insert element, copy to clipboard, remove element):</p>\n\n<p>Tested with Google Chrome 44, Firefox 42.0a1 and IE 11.0.8600.17814.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function copyTextToClipboard(text) {\r\n  var textArea = document.createElement(\"textarea\");\r\n\r\n  //\r\n  // *** This styling is an extra step which is likely not required. ***\r\n  //\r\n  // Why is it here? To ensure:\r\n  // 1. the element is able to have focus and selection.\r\n  // 2. if element was to flash render it has minimal visual impact.\r\n  // 3. less flakyness with selection and copying which **might** occur if\r\n  //    the textarea element is not visible.\r\n  //\r\n  // The likelihood is the element won't even render, not even a flash,\r\n  // so some of these are just precautions. However in IE the element\r\n  // is visible whilst the popup box asking the user for permission for\r\n  // the web page to copy to the clipboard.\r\n  //\r\n\r\n  // Place in top-left corner of screen regardless of scroll position.\r\n  textArea.style.position = 'fixed';\r\n  textArea.style.top = 0;\r\n  textArea.style.left = 0;\r\n\r\n  // Ensure it has a small width and height. Setting to 1px / 1em\r\n  // doesn't work as this gives a negative w/h on some browsers.\r\n  textArea.style.width = '2em';\r\n  textArea.style.height = '2em';\r\n\r\n  // We don't need padding, reducing the size if it does flash render.\r\n  textArea.style.padding = 0;\r\n\r\n  // Clean up any borders.\r\n  textArea.style.border = 'none';\r\n  textArea.style.outline = 'none';\r\n  textArea.style.boxShadow = 'none';\r\n\r\n  // Avoid flash of white box if rendered for any reason.\r\n  textArea.style.background = 'transparent';\r\n\r\n\r\n  textArea.value = text;\r\n\r\n  document.body.appendChild(textArea);\r\n\r\n  textArea.select();\r\n\r\n  try {\r\n    var successful = document.execCommand('copy');\r\n    var msg = successful ? 'successful' : 'unsuccessful';\r\n    console.log('Copying text command was ' + msg);\r\n  } catch (err) {\r\n    console.log('Oops, unable to copy');\r\n  }\r\n\r\n  document.body.removeChild(textArea);\r\n}\r\n\r\n\r\nvar copyBobBtn = document.querySelector('.js-copy-bob-btn'),\r\n  copyJaneBtn = document.querySelector('.js-copy-jane-btn');\r\n\r\ncopyBobBtn.addEventListener('click', function(event) {\r\n  copyTextToClipboard('Bob');\r\n});\r\n\r\n\r\ncopyJaneBtn.addEventListener('click', function(event) {\r\n  copyTextToClipboard('Jane');\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div style=\"display:inline-block; vertical-align:top;\"&gt;\r\n  &lt;button class=\"js-copy-bob-btn\"&gt;Set clipboard to BOB&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;\r\n  &lt;button class=\"js-copy-jane-btn\"&gt;Set clipboard to JANE&lt;/button&gt;\r\n&lt;/div&gt;\r\n&lt;div style=\"display:inline-block;\"&gt;\r\n  &lt;textarea class=\"js-test-textarea\" cols=\"35\" rows=\"4\"&gt;Try pasting into here to see what you have on your clipboard:\r\n  \r\n  &lt;/textarea&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h2>Additional notes</h2>\n\n<h3>Only works if the user takes an action</h3>\n\n<p>All <code>document.execCommand('copy')</code> calls must take place as a direct result of a user action, e.g. click event handler. This is a measure to prevent messing with the users clipboard when they don't expect it.</p>\n\n<p>See the <a href=\"https://developers.google.com/web/updates/2015/04/cut-and-copy-commands?hl=en\" rel=\"noreferrer\">Google Developers post here</a> for more info.</p>\n\n<h3>Clipboard API</h3>\n\n<p>Note the full Clipboard API draft specification can be found here:\n<a href=\"https://w3c.github.io/clipboard-apis/\" rel=\"noreferrer\">https://w3c.github.io/clipboard-apis/</a></p>\n\n<h3>Is it supported?</h3>\n\n<ul>\n<li><code>document.queryCommandSupported('copy')</code> should return <code>true</code> if the command \"is supported by the browser\".</li>\n<li>and <code>document.queryCommandEnabled('copy')</code> return <code>true</code> if the <code>document.execCommand('copy')</code> will succeed if called now. Checking to ensure the command was called from a user-initiated thread and other requirements are met.</li>\n</ul>\n\n<p>However as an example of browser compatibility issues, Google Chrome from ~April to ~October 2015 only returned <code>true</code> from <code>document.queryCommandSupported('copy')</code> if the command was called from a user-initiated thread.</p>\n\n<p>Note compatibility detail below.</p>\n\n<h3>Browser Compatibility Detail</h3>\n\n<p>Whilst a simple call to <code>document.execCommand('copy')</code> wrapped in a <code>try</code>/<code>catch</code> block called as a result of a user click will get you the most compatibility use the following has some provisos:</p>\n\n<p>Any call to <code>document.execCommand</code>, <code>document.queryCommandSupported</code> or <code>document.queryCommandEnabled</code> should be wrapped in a <code>try</code>/<code>catch</code> block.</p>\n\n<p>Different browser implementations and browser versions throw differing types of exceptions when called instead of returning <code>false</code>.</p>\n\n<p>Different browser implementations are still in flux and the <a href=\"https://w3c.github.io/clipboard-apis/\" rel=\"noreferrer\">Clipboard API</a> is still in draft, so remember to do your testing.</p>\n",
    "score": 1184,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 406712,
      "name": "Dean Taylor",
      "reputation": 15988
    }
  },
  {
    "soID": 21736323,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/21736323",
    "title": null,
    "body": "<p>This didn't work for me, I want to match <code>?b</code> as the <code>b</code> parameter is present, and not match <code>?return</code> as the <code>r</code> parameter, here is <a href=\"https://gist.github.com/Dorian/833b37d2c7b168b7e94c\" rel=\"nofollow\">my solution</a>.</p>\n\n<pre><code>window.query_param = function(name) {\n  var param_value, params;\n\n  params = location.search.replace(/^\\?/, '');\n  params = _.map(params.split('&amp;'), function(s) {\n    return s.split('=');\n  });\n\n  param_value = _.select(params, function(s) {\n    return s.first === name;\n  })[0];\n\n  if (param_value) {\n    return decodeURIComponent(param_value[1] || '');\n  } else {\n    return null;\n  }\n};\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24626564,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/24626564",
    "title": null,
    "body": "<p>Since you are using <strong>jQuery</strong>, you can determine whether a variable is undefined or its value is null by using a single function.</p>\n\n<pre><code>var s; // undefined\njQuery.isEmptyObject(s); // will return true;\n\ns = null; // defined as null\njQuery.isEmptyObject(s); // will return true;\n\n// usage\nif(jQuery.isEmptyObject(s)){\n    alert('Either variable: s is undefined or its value is null');\n}else{\n     alert('variable: s has value ' + s);\n}\n\ns = 'something'; // defined with some value\njQuery.isEmptyObject(s); // will return false;\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 412591,
      "name": "Angelin Nadar",
      "reputation": 4454
    }
  },
  {
    "soID": 45308151,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/45308151",
    "title": null,
    "body": "<p>None of these answers take into account iOS not allowing execCommand. Here is one for all modern browsers (and IE11+) as well as iOS and Android. Based on the accepted answer. Unlike that answer it also sets readonly to false so a mobile keyboard doesn't pop up when copying.</p>\n\n<pre><code>const copyToClipboard = (function initClipboardText() {\n  const id = 'copy-to-clipboard-helper';\n  const element = document.getElementById(id);\n  const textarea = element || document.createElement('textarea');\n\n  if (!element) {\n    textarea.id = id;\n    // Place in top-left corner of screen regardless of scroll position.\n    textarea.style.position = 'fixed';\n    textarea.style.top = 0;\n    textarea.style.left = 0;\n\n    // Ensure it has a small width and height. Setting to 1px / 1em\n    // doesn't work as this gives a negative w/h on some browsers.\n    textarea.style.width = '1px';\n    textarea.style.height = '1px';\n\n    // We don't need padding, reducing the size if it does flash render.\n    textarea.style.padding = 0;\n\n    // Clean up any borders.\n    textarea.style.border = 'none';\n    textarea.style.outline = 'none';\n    textarea.style.boxShadow = 'none';\n\n    // Avoid flash of white box if rendered for any reason.\n    textarea.style.background = 'transparent';\n\n    // Set to readonly to prevent mobile devices opening a keyboard when\n    // text is .select()'ed.\n    textarea.setAttribute('readonly', true);\n\n    document.body.appendChild(textarea);\n  }\n\n  return function setClipboardText(text) {\n    textarea.value = text;\n\n    // iOS Safari blocks programmtic execCommand copying normally, without this hack.\n    // https://stackoverflow.com/questions/34045777/copy-to-clipboard-using-javascript-in-ios\n    if (navigator.userAgent.match(/ipad|ipod|iphone/i)) {\n      const editable = textarea.contentEditable;\n      textarea.contentEditable = true;\n      const range = document.createRange();\n      range.selectNodeContents(textarea);\n      const sel = window.getSelection();\n      sel.removeAllRanges();\n      sel.addRange(range);\n      textarea.setSelectionRange(0, 999999);\n      textarea.contentEditable = editable;\n    } else {\n      textarea.select();\n    }\n\n    try {\n      return document.execCommand('copy');\n    } catch (err) {\n      return false;\n    }\n  };\n}());\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 414062,
      "name": "Dominic Tobias",
      "reputation": 16437
    }
  },
  {
    "soID": 8365215,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/8365215",
    "title": null,
    "body": "<p>I personally like Peter's suggestion: <a href=\"https://stackoverflow.com/a/767499/414784\">https://stackoverflow.com/a/767499/414784</a> (for ECMAScript 3. For ECMAScript 5, use <code>Array.isArray()</code>)</p>\n\n<p>Comments on the post indicate, however, that if <code>toString()</code> is changed at all, that way of checking an array will fail. If you really want to be specific and make sure <code>toString()</code> has not been changed, and there are no problems with the objects class attribute (<code>[object Array]</code> is the class attribute of an object that is an array), then I recommend doing something like this:</p>\n\n<pre><code>//see if toString returns proper class attributes of objects that are arrays\n//returns -1 if it fails test\n//returns true if it passes test and it's an array\n//returns false if it passes test and it's not an array\nfunction is_array(o)\n{\n    // make sure an array has a class attribute of [object Array]\n    var check_class = Object.prototype.toString.call([]);\n    if(check_class === '[object Array]')\n    {\n        // test passed, now check\n        return Object.prototype.toString.call(o) === '[object Array]';\n    }\n    else\n    {\n        // may want to change return value to something more desirable\n        return -1; \n    }\n}\n</code></pre>\n\n<p>Note that in JavaScript The Definitive Guide 6th edition, 7.10, it says <code>Array.isArray()</code> is implemented using <code>Object.prototype.toString.call()</code> in ECMAScript 5. Also note that if you're going to worry about <code>toString()</code>'s implementation changing, you should also worry about every other built in method changing too. Why use <code>push()</code>? Someone can change it! Such an approach is silly. The above check is an offered solution to those worried about <code>toString()</code> changing, but I believe the check is unnecessary.</p>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 414784,
      "name": "Brian",
      "reputation": 856
    }
  },
  {
    "soID": 20377300,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/20377300",
    "title": null,
    "body": "<p>Here's a small-ish post, I wrote on this:</p>\n\n<p><a href=\"http://sizeableidea.com/call-versus-apply-javascript/\" rel=\"noreferrer\">http://sizeableidea.com/call-versus-apply-javascript/</a></p>\n\n<pre><code>var obj1 = { which : \"obj1\" },\nobj2 = { which : \"obj2\" };\n\nfunction execute(arg1, arg2){\n    console.log(this.which, arg1, arg2);\n}\n\n//using call\nexecute.call(obj1, \"dan\", \"stanhope\");\n//output: obj1 dan stanhope\n\n//using apply\nexecute.apply(obj2, [\"dan\", \"stanhope\"]);\n//output: obj2 dan stanhope\n\n//using old school\nexecute(\"dan\", \"stanhope\");\n//output: undefined \"dan\" \"stanhope\"\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 415642,
      "name": "Dan",
      "reputation": 862
    }
  },
  {
    "soID": 15984362,
    "parentID": 3390396,
    "url": "https://stackoverflow.com/q/15984362",
    "title": null,
    "body": "<p>On the contrary of @Thomas Eding answer:</p>\n\n<p>If I forget to declare <code>myVar</code> in my code, then I'll get <code>myVar is not defined</code>.</p>\n\n<p>Let's take a real example:</p>\n\n<p>I've a variable name, but I am not sure if it is declared somewhere or not.</p>\n\n<p>Then @Anurag's answer will help:</p>\n\n<pre><code>var myVariableToCheck = 'myVar';\nif (window[myVariableToCheck] === undefined)\n    console.log(\"Not declared or declared, but undefined.\");\n\n// Or you can check it directly \nif (window['myVar'] === undefined) \n    console.log(\"Not declared or declared, but undefined.\");\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 415865,
      "name": "Vikas",
      "reputation": 11164
    }
  },
  {
    "soID": 13850856,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/13850856",
    "title": null,
    "body": "<p>Using Lodash: </p>\n\n<pre><code>var y = _.clone(x, true);\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9793452,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/9793452",
    "title": null,
    "body": "<p>I decided to post an answer on how to do that exact same thing without jQuery. Just because I'm a rebel.</p>\n\n<pre><code>var ageCheckbox = document.getElementById('isAgeSelected');\nvar ageInput = document.getElementById('txtAge');\n\n// Just because of IE &lt;333\nageCheckbox.onchange = function() {\n    // Check if the checkbox is checked, and show/hide the text field.\n    ageInput.hidden = this.checked ? false : true;\n};\n</code></pre>\n\n<p>First you get both elements by their ID. Then you assign the checkboxe's <code>onchange</code> event a function that checks whether the checkbox got checked and sets the <code>hidden</code> property of the age text field appropriately. In that example using the ternary operator.</p>\n\n<p>Here is a <a href=\"http://jsfiddle.net/mainerror/cjSkC/\" rel=\"noreferrer\">fiddle</a> for you to test it.</p>\n\n<p><strong>Addendum</strong></p>\n\n<p>If cross-browser compatibility is an issue then I propose to set the CSS <code>display</code> property to <em>none</em> and <em>inline</em>.</p>\n\n<pre><code>elem.style.display = this.checked ? 'inline' : 'none';\n</code></pre>\n\n<p>Slower but cross-browser compatible.</p>\n",
    "score": 44,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9629682,
    "parentID": 2353818,
    "url": "https://stackoverflow.com/q/9629682",
    "title": null,
    "body": "<p><strong>First, learn the core concepts of Node.js:</strong></p>\n\n<ul>\n<li><p><a href=\"http://blog.shinetech.com/2011/08/26/asynchronous-code-design-with-node-js/\" rel=\"noreferrer\">You'll want to understand the asynchronous coding style that Node.js encourages</a>.</p></li>\n<li><p><a href=\"http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/\" rel=\"noreferrer\">Async != concurrent. Understand Node.js's event loop</a>!</p></li>\n<li><p><a href=\"http://docs.nodejitsu.com/articles/getting-started/what-is-require\" rel=\"noreferrer\">Node.js uses CommonJS-style require() for code loading; it's probably a bit different from what you're used to</a>.</p></li>\n<li><p><a href=\"http://nodejs.org/api/index.html\" rel=\"noreferrer\">Familiarize yourself with Node.js's standard library</a>.</p></li>\n</ul>\n\n<p><strong>Then, you're going to want to see what the community has to offer:</strong></p>\n\n<p>The gold standard for Node.js package management is <a href=\"http://npmjs.org/\" rel=\"noreferrer\">NPM</a>.</p>\n\n<ul>\n<li><p><a href=\"http://docs.nodejitsu.com/articles/getting-started/npm/what-is-npm\" rel=\"noreferrer\">It is a command line tool for managing your project's dependencies</a>.</p></li>\n<li><p><a href=\"http://nodejs.org/api/modules.html\" rel=\"noreferrer\">Make sure you understand how Node.js and NPM interact with your project via the node_modules folder and package.json</a>.</p></li>\n<li><p><a href=\"http://search.npmjs.org/\" rel=\"noreferrer\">NPM is also a registry of pretty much every Node.js package out there</a></p></li>\n</ul>\n\n<p><strong>Finally, you're going to want to know what some of the more popular packages are for various tasks:</strong></p>\n\n<p><strong>Useful Tools for Every Project:</strong></p>\n\n<ul>\n<li><a href=\"http://underscorejs.org/\" rel=\"noreferrer\">Underscore</a> contains just about every core utility method you want.</li>\n<li><a href=\"http://lodash.com/\" rel=\"noreferrer\">Lo-Dash</a> is a clone of Underscore that aims to be faster, more customizable, and has quite a few functions that underscore doesn't have. Certain versions of it can be used as drop-in replacements of underscore.</li>\n<li><a href=\"http://www.typescriptlang.org\" rel=\"noreferrer\">TypeScript</a> makes JavaScript considerably more bearable, while also keeping you out of trouble!</li>\n<li><a href=\"http://jshint.com/\" rel=\"noreferrer\">JSHint</a> is a code-checking tools that'll save you loads of time finding stupid errors. Find a plugin for your text editor that will automatically run it on your code.</li>\n</ul>\n\n<p><strong>Unit Testing:</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/mochajs/mocha\" rel=\"noreferrer\">Mocha</a> is a popular test framework.</li>\n<li><a href=\"http://vowsjs.org/\" rel=\"noreferrer\">Vows</a> is a fantastic take on asynchronous testing, albeit somewhat stale.</li>\n<li><a href=\"http://visionmedia.github.com/expresso/\" rel=\"noreferrer\">Expresso</a> is a more traditional unit testing framework.</li>\n<li><a href=\"https://github.com/caolan/nodeunit\" rel=\"noreferrer\">node-unit</a> is another relatively traditional unit testing framework.</li>\n<li><a href=\"https://github.com/sindresorhus/ava\" rel=\"noreferrer\">AVA</a> is a new test runner with Babel built-in and runs tests concurrently.</li>\n</ul>\n\n<p><strong>Web Frameworks:</strong></p>\n\n<ul>\n<li><a href=\"http://expressjs.com/\" rel=\"noreferrer\">Express.js</a> is by far the most popular framework.</li>\n<li><a href=\"http://koajs.com/\" rel=\"noreferrer\">Koa</a> is a new web framework designed by the team behind Express.js, which aims to be a smaller, more expressive, and more robust foundation for web applications and APIs.</li>\n<li><a href=\"https://sailsjs.org\" rel=\"noreferrer\">sails.js</a> the most popular MVC framework for Node.js, and is based on express. It is designed to emulate the familiar MVC pattern of frameworks like Ruby on Rails, but with support for the requirements of modern apps: data-driven APIs with a scalable, service-oriented architecture.</li>\n<li><a href=\"http://www.meteor.com/\" rel=\"noreferrer\">Meteor</a> bundles together jQuery, Handlebars, Node.js, <a href=\"http://en.wikipedia.org/wiki/WebSocket\" rel=\"noreferrer\">WebSocket</a>, <a href=\"http://en.wikipedia.org/wiki/MongoDB\" rel=\"noreferrer\">MongoDB</a>, and DDP and promotes convention over configuration without being a <a href=\"http://en.wikipedia.org/wiki/Ruby_on_Rails\" rel=\"noreferrer\">Ruby on Rails</a> clone.</li>\n<li><a href=\"http://towerjs.org/\" rel=\"noreferrer\">Tower</a> (<em>deprecated</em>) is an abstraction of top of Express.js that aims to be a Ruby on Rails clone.</li>\n<li><a href=\"http://geddyjs.org/\" rel=\"noreferrer\">Geddy</a> is another take on web frameworks.</li>\n<li><a href=\"https://npmjs.org/package/railway\" rel=\"noreferrer\">RailwayJS</a> is a Ruby on Rails inspired MVC web framework.</li>\n<li><a href=\"https://sleekjs.com\" rel=\"noreferrer\">Sleek.js</a> is a simple web framework, built upon Express.js.</li>\n<li><a href=\"http://hapijs.com\" rel=\"noreferrer\">Hapi</a> is a configuration-centric framework with built-in support for input validation, caching, authentication, etc.</li>\n<li><p><a href=\"http://www.trailsjs.io\" rel=\"noreferrer\">Trails</a> is a modern web application framework. It builds on the pedigree of <a href=\"http://rubyonrails.org/\" rel=\"noreferrer\">Rails</a> and <a href=\"https://grails.org/\" rel=\"noreferrer\">Grails</a> to accelerate development by adhering to a straightforward, convention-based, API-driven design philosophy.</p></li>\n<li><p><a href=\"https://github.com/gnodi/danf\" rel=\"noreferrer\">Danf</a> is a full-stack OOP framework providing many features in order to produce a scalable, maintainable, testable and performant applications and allowing to code the same way on both the server (Node.js) and client (browser) sides.</p></li>\n<li><p><a href=\"http://derbyjs.com/\" rel=\"noreferrer\">Derbyjs</a> is a reactive full-stack JavaScript framework. They are using patterns like reactive programming and isomorphic JavaScript for a long time.</p></li>\n<li><p><a href=\"http://loopback.io/\" rel=\"noreferrer\">Loopback.io</a> is a powerful Node.js framework for creating APIs and easily connecting to backend data sources. It has a Angular.js SDK and provides SDKs for iOS and Android.</p></li>\n</ul>\n\n<p><strong>Web Framework Tools:</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/visionmedia/jade\" rel=\"noreferrer\">Jade</a> is the HAML/Slim of the Node.js world</li>\n<li><a href=\"https://github.com/visionmedia/ejs\" rel=\"noreferrer\">EJS</a> is a more traditional templating language.</li>\n<li>Don't forget about <a href=\"http://documentcloud.github.com/underscore/#template\" rel=\"noreferrer\">Underscore's template method</a>!</li>\n</ul>\n\n<p><strong>Networking:</strong></p>\n\n<ul>\n<li><a href=\"http://www.senchalabs.org/connect/\" rel=\"noreferrer\">Connect</a> is the Rack or WSGI of the Node.js world.</li>\n<li><a href=\"https://github.com/mikeal/request\" rel=\"noreferrer\">Request</a> is a very popular HTTP request library.</li>\n<li><a href=\"https://github.com/LearnBoost/socket.io\" rel=\"noreferrer\">socket.io</a> is handy for building WebSocket servers.</li>\n</ul>\n\n<p><strong>Command Line Interaction:</strong></p>\n\n<ul>\n<li><a href=\"https://www.npmjs.com/package/minimist\" rel=\"noreferrer\">minimist</a> just command line argument parsing.</li>\n<li><a href=\"https://github.com/bcoe/yargs\" rel=\"noreferrer\">Yargs</a> is a powerful library for parsing command-line arguments.</li>\n<li><a href=\"https://github.com/tj/commander.js\" rel=\"noreferrer\">Commander.js</a> is a complete solution for building single-use command-line applications.</li>\n<li><a href=\"https://github.com/dthree/vorpal\" rel=\"noreferrer\">Vorpal.js</a> is a framework for building mature, immersive command-line applications.</li>\n<li><a href=\"https://github.com/chalk/chalk\" rel=\"noreferrer\">Chalk</a> makes your CLI output pretty.</li>\n</ul>\n\n<p><strong>Work with streams:</strong></p>\n\n<ul>\n<li><a href=\"https://github.com/maxogden/mississippi\" rel=\"noreferrer\">mississipi</a> everything you miss about streams.</li>\n<li><a href=\"https://github.com/calvinmetcalf/streams-a-love-story\" rel=\"noreferrer\">https://github.com/calvinmetcalf/streams-a-love-story</a></li>\n<li><a href=\"http://maxogden.com/node-streams.html\" rel=\"noreferrer\">http://maxogden.com/node-streams.html</a></li>\n<li><a href=\"https://github.com/substack/stream-handbook\" rel=\"noreferrer\">https://github.com/substack/stream-handbook</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=QgEuZ52OZtU\" rel=\"noreferrer\">How streams help to raise Node.js performance</a></li>\n</ul>\n",
    "score": 1616,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 5877077,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/5877077",
    "title": null,
    "body": "<p>I would rather use <code>split()</code> instead of Regex for this operation:</p>\n\n<pre><code>function getUrlParams() {\n    var result = {};\n    var params = (window.location.search.split('?')[1] || '').split('&amp;');\n    for(var param in params) {\n        if (params.hasOwnProperty(param)) {\n            paramParts = params[param].split('=');\n            result[paramParts[0]] = decodeURIComponent(paramParts[1] || \"\");\n        }\n    }\n    return result;\n}\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3522343,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/3522343",
    "title": null,
    "body": "<p>I am using this and this is working absolutely fine:</p>\n\n<pre><code>$(\"#checkkBoxId\").attr(\"checked\") ? alert(\"Checked\") : alert(\"Unchecked\");\n</code></pre>\n\n<p>Note: If the checkbox is checked it will return true otherwise undefined, so better check for the \"TRUE\" value.</p>\n",
    "score": 128,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23117113,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/23117113",
    "title": null,
    "body": "<p>Here is <code>String</code> prototype implementation:</p>\n\n<pre><code>String.prototype.getParam = function( str ){\n    str = str.replace(/[\\[]/,\"\\\\\\[\").replace(/[\\]]/,\"\\\\\\]\");\n    var regex = new RegExp( \"[\\\\?&amp;]*\"+str+\"=([^&amp;#]*)\" );    \n    var results = regex.exec( this );\n    if( results == null ){\n        return \"\";\n    } else {\n        return results[1];\n    }\n}\n</code></pre>\n\n<p>Example call:</p>\n\n<pre><code>var status = str.getParam(\"status\")\n</code></pre>\n\n<p><code>str</code> can be a query string or url</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3516699,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/3516699",
    "title": null,
    "body": "<p>The <code>ucfirst</code> function works if you do it like this.</p>\n\n<pre><code>function ucfirst(str) {\n    var firstLetter = str.slice(0,1);\n    return firstLetter.toUpperCase() + str.substring(1);\n}\n</code></pre>\n\n<p>Thanks J-P for the aclaration.</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 424543,
      "name": "raphie",
      "reputation": 2413
    }
  },
  {
    "soID": 18610867,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/18610867",
    "title": null,
    "body": "<pre><code>var str = \"ff ff f f a de def\";\nstr = str.replace(/f/g,'');\nalert(str);\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/ANHR9/\">http://jsfiddle.net/ANHR9/</a></p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 425586,
      "name": "pkdkk",
      "reputation": 1333
    }
  },
  {
    "soID": 28783536,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/28783536",
    "title": null,
    "body": "<p>I just had to update this ridiculousness with yet another newer jQuery method:</p>\n\n<pre><code>var url = 'http://www.fiftywaystoleaveyourlocation.com';\n$(location).prop('href', url);\n</code></pre>\n",
    "score": 31,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 425714,
      "name": "Epiphany",
      "reputation": 1171
    }
  },
  {
    "soID": 34088840,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/34088840",
    "title": null,
    "body": "<p><code>!!x</code> is shorthand for <code>Boolean(x)</code></p>\n\n<p>The first bang forces the js engine to run <code>Boolean(x)</code> but also has the side effect of inverting the value.  So the second bang undoes the side effect.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 425823,
      "name": "Greg Gum",
      "reputation": 5886
    }
  },
  {
    "soID": 18651528,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/18651528",
    "title": null,
    "body": "<p>I am using this:</p>\n\n<pre><code> &lt;input type=\"checkbox\" id=\"isAgeSelected\" value=\"1\" /&gt; &lt;br/&gt;\n &lt;input type=\"textbox\" id=\"txtAge\" /&gt;\n\n $(\"#isAgeSelected\").is(':checked') ? $(\"#txtAge\").show() : $(\"#txtAge\").hide();\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10433719,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/10433719",
    "title": null,
    "body": "<p>I personally use <a href=\"http://www.jetbrains.com/webstorm/\">JetBrains WebStorm</a> as it's the only JavaScript IDE that I've found which is great for both frontend and backend JavaScript.</p>\n\n<p>It works on multiple OS's and has Node.js debugging built-in (as well as a ton of other stuff](<a href=\"http://www.jetbrains.com/webstorm/features/index.html\">http://www.jetbrains.com/webstorm/features/index.html</a>).</p>\n\n<p>My only 'issues'/wishlist items <del>are</del> <strong>were</strong>:</p>\n\n<ol>\n<li><del>It seems to be more resource hungry on Mac than Windows</del> It no longer seems an issue in version 6.</li>\n<li><del>It would be nice if it had Snippet support (like those of <a href=\"http://vimeo.com/41216114\">Sublime Text 2</a> - i.e. type 'fun' and tap 'tab' to put in a function.</del> See @WickyNilliams comment below - With Live Templates you also have snippet support.</li>\n</ol>\n",
    "score": 47,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 431880,
      "name": "isNaN1247",
      "reputation": 12291
    }
  },
  {
    "soID": 5493242,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/5493242",
    "title": null,
    "body": "<p>This should work: </p>\n\n<pre><code>$(\"input[name='radioName']:checked\").val()\n</code></pre>\n\n<p>Note the \"\" usaged around the input:checked and not '' like the Peter J's solution</p>\n",
    "score": 104,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 436537,
      "name": "Cam Tullos",
      "reputation": 1487
    }
  },
  {
    "soID": 16488520,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/16488520",
    "title": null,
    "body": "<p>An important aspect is that <code>for...in</code> only iterates over properties contained in an object which have their <strong>enumerable</strong> <em>property attribute</em> set to true. So if one attempts to iterate over an object using <code>for...in</code> then arbitrary properties may be missed if their enumerable property attribute is false. It is quite possible to alter the enumerable property attribute for normal Array objects so that certain elements are not enumerated. Though in general the property attributes tend to apply to function properties within an object.</p>\n\n<p>One can check the value of a properties' enumerable property attribute by:</p>\n\n<pre><code>myobject.propertyIsEnumerable('myproperty')\n</code></pre>\n\n<p>Or to obtain all four property attributes:</p>\n\n<pre><code>Object.getOwnPropertyDescriptor(myobject,'myproperty')\n</code></pre>\n\n<p>This is a feature available in ECMAScript 5 - in earlier versions it was not possible to alter the value of the enumerable property attribute (it was always set to true).</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 436794,
      "name": "Pierz",
      "reputation": 1467
    }
  },
  {
    "soID": 3620861,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/3620861",
    "title": null,
    "body": "<p>+1 Zippo with the exception that the function body needs to be as below or otherwise it appends the current string on every iteration:</p>\n\n<pre><code>String.prototype.format = function() {\n    var formatted = this;\n    for (var arg in arguments) {\n        formatted = formatted.replace(\"{\" + arg + \"}\", arguments[arg]);\n    }\n    return formatted;\n};\n</code></pre>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33143555,
    "parentID": 3437786,
    "url": "https://stackoverflow.com/q/33143555",
    "title": null,
    "body": "<p>In some cases related with responsive layout <code>$(document).height()</code> can return wrong data that displays view port height only. \nFor example when some div#wrapper has height:100%, that #wrapper can be stretched by some block inside it. But it's height still will be like viewport height. In such situation you might use</p>\n\n<pre><code>$('#wrapper').get(0).scrollHeight\n</code></pre>\n\n<p>That represents actual size of wrapper.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 437797,
      "name": "Akim Kelar",
      "reputation": 422
    }
  },
  {
    "soID": 8463429,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/8463429",
    "title": null,
    "body": "<p>Very elegant:</p>\n\n<pre><code>String.prototype.format = function (){\n    var args = arguments;\n    return this.replace(/\\{\\{|\\}\\}|\\{(\\d+)\\}/g, function (curlyBrack, index) {\n        return ((curlyBrack == \"{{\") ? \"{\" : ((curlyBrack == \"}}\") ? \"}\" : args[index]));\n    });\n};\n\n// Usage:\n\"{0}{1}\".format(\"{1}\", \"{0}\")\n</code></pre>\n\n<p>Credit goes to <del><a href=\"http://technoblogia.net/2011/11/08/%D7%98%D7%99%D7%A4-%D7%A4%D7%95%D7%A0%D7%A7%D7%A6%D7%99%D7%99%D7%AA-%D7%A2%D7%96%D7%A8-%D7%91-javascript-%D7%9C%D7%A2%D7%99%D7%A6%D7%95%D7%91-%D7%9E%D7%97%D7%A8%D7%95%D7%96%D7%95%D7%AA/\">(broken link)</a></del> <a href=\"https://gist.github.com/0i0/1519811\">https://gist.github.com/0i0/1519811</a></p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3658673,
    "parentID": 1646698,
    "url": "https://stackoverflow.com/q/3658673",
    "title": null,
    "body": "<p>It does 5 things:</p>\n\n<ol>\n<li>It creates a new object.  The type of this object, is simply <em>object</em>.</li>\n<li>It sets this new object's internal, inaccessible, <em>[[prototype]]</em> (i.e. <strong>__proto__</strong>) property to be the constructor function's external, accessible, <em>prototype</em> object (every function object automatically has a <em>prototype</em> property).</li>\n<li>It makes the <code>this</code> variable point to the newly created object.</li>\n<li>It executes the constructor function, using the newly created object whenever <code>this</code> is mentioned.</li>\n<li>It returns the newly created object, unless the constructor function returns a non-<code>null</code> object reference. In this case, that object reference is returned instead.</li>\n</ol>\n\n<p>Note: <em>constructor function</em> refers the function after the <code>new</code> keyword, as in </p>\n\n<pre><code>new ConstructorFunction(arg1, arg2)\n</code></pre>\n\n<p>Once this is done, if an undefined property of the new object is requested, the script will check the object's <em>[[prototype]]</em> object for the property instead. This is how you can get something similar to traditional class inheritance in JavaScript. </p>\n\n<p>The most difficult part about this is point number 2.  Every object (including functions) has this internal property called <em>[[prototype]]</em>. It can <em>only</em> be set at object creation time, either with <em>new</em>, with <em>Object.create</em>, or based on the literal (functions default to Function.prototype, numbers to Number.prototype, etc.). It can only be read with <em>Object.getPrototypeOf(someObject)</em>. There is <em>no</em> other way to set or read this value.</p>\n\n<p>Functions, in addition to the hidden <em>[[prototype]]</em> property, also have a property called <em>prototype</em>, and it is this that you can access, and modify, to provide inherited properties and methods for the objects you make.</p>\n\n<hr>\n\n<p>Here is an example:</p>\n\n<pre><code>ObjMaker = function() {this.a = 'first';};\n// ObjMaker is just a function, there's nothing special about it that makes \n// it a constructor.\n\nObjMaker.prototype.b = 'second';\n// like all functions, ObjMaker has an accessible prototype property that \n// we can alter. I just added a property called 'b' to it. Like \n// all objects, ObjMaker also has an inaccessible [[prototype]] property\n// that we can't do anything with\n\nobj1 = new ObjMaker();\n// 3 things just happened.\n// A new, empty object was created called obj1.  At first obj1 was the same\n// as {}. The [[prototype]] property of obj1 was then set to the current\n// object value of the ObjMaker.prototype (if ObjMaker.prototype is later\n// assigned a new object value, obj1's [[prototype]] will not change, but you\n// can alter the properties of ObjMaker.prototype to add to both the\n// prototype and [[prototype]]). The ObjMaker function was executed, with\n// obj1 in place of this... so obj1.a was set to 'first'.\n\nobj1.a;\n// returns 'first'\nobj1.b;\n// obj1 doesn't have a property called 'b', so JavaScript checks \n// its [[prototype]]. Its [[prototype]] is the same as ObjMaker.prototype\n// ObjMaker.prototype has a property called 'b' with value 'second'\n// returns 'second'\n</code></pre>\n\n<p>It's like class inheritance because now, any objects you make using <code>new ObjMaker()</code> will also appear to have inherited the 'b' property.</p>\n\n<p>If you want something like a subclass, then you do this:</p>\n\n<pre><code>SubObjMaker = function () {};\nSubObjMaker.prototype = new ObjMaker(); // note: this pattern is deprecated!\n// Because we used 'new', the [[prototype]] property of SubObjMaker.prototype\n// is now set to the object value of ObjMaker.prototype.\n// The modern way to do this is with Object.create(), which was added in ECMAScript 5:\n// SubObjMaker.prototype = Object.create(ObjMaker.prototype);\n\nSubObjMaker.prototype.c = 'third';  \nobj2 = new SubObjMaker();\n// [[prototype]] property of obj2 is now set to SubObjMaker.prototype\n// Remember that the [[prototype]] property of SubObjMaker.prototype\n// is ObjMaker.prototype. So now obj2 has a prototype chain!\n// obj2 ---&gt; SubObjMaker.prototype ---&gt; ObjMaker.prototype\n\nobj2.c;\n// returns 'third', from SubObjMaker.prototype\n\nobj2.b;\n// returns 'second', from ObjMaker.prototype\n\nobj2.a;\n// returns 'first', from SubObjMaker.prototype, because SubObjMaker.prototype \n// was created with the ObjMaker function, which assigned a for us\n</code></pre>\n\n<hr>\n\n<p>I read a ton of rubbish on this subject before finally finding <a href=\"http://joost.zeekat.nl/constructors-considered-mildly-confusing.html\" rel=\"noreferrer\">this page</a>, where this is explained very well with nice diagrams.</p>\n",
    "score": 1861,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 42744707,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/42744707",
    "title": null,
    "body": "<p><a href=\"https://github.com/Rob--W/cors-anywhere/\" rel=\"nofollow noreferrer\">https://github.com/Rob--W/cors-anywhere/</a> provides (Node.js) code you can use to set up and run your own CORS proxy. It’s actively maintained and provides a number of features for controlling the proxy behavior beyond just the basic sending of the correct <code>Access-Control-*</code> response headers.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS</a> has details to explain how browsers handle cross-origin requests that client-side web applications make from JavaScript and what headers you must configure sending of by the server the request is made to, if you can.</p>\n\n<p>In the case where a site you need to make a request to and get a response from doesn’t return the <code>Access-Control-Allow-Origin</code> response header, browsers are <em>always</em> going to block cross-origin requests made to it directly by your client-side JavaScript code from working. And so if the site is not one you control and can configure behavior for, the only thing that <em>will</em> work in that case is proxying the requests—either through your own proxy you run yourself or through an open proxy.</p>\n\n<p>As mentioned in other comments here, there are good reasons for not trusting an open proxy with your requests. That said, if you know what you’re doing and you decide an open proxy works for your needs, <a href=\"https://cors-anywhere.herokuapp.com/\" rel=\"nofollow noreferrer\">https://cors-anywhere.herokuapp.com/</a> is one that’s reliably available, actively maintained, and that runs an instance of the <a href=\"https://github.com/Rob--W/cors-anywhere/\" rel=\"nofollow noreferrer\">https://github.com/Rob--W/cors-anywhere/</a> code.</p>\n\n<p>As with other open proxies mentioned here (a couple of which at least don’t seem to be available any longer), the way it works is that instead of having your client code send a request directly to, e.g., <code>http://foo.com</code> you send it to <code>https://cors-anywhere.herokuapp.com/http://foo.com</code> and the proxy adds the necessary <code>Access-Control-*</code> headers to the response the browser sees.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 441757,
      "name": "sideshowbarker",
      "reputation": 16239
    }
  },
  {
    "soID": 23768878,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/23768878",
    "title": null,
    "body": "<p><strong>jQuery 1.6+</strong></p>\n\n<pre><code>$('#isAgeSelected').prop('checked')\n</code></pre>\n\n<p><strong>jQuery 1.5 and below</strong></p>\n\n<pre><code>$('#isAgeSelected').attr('checked')\n</code></pre>\n\n<p><strong>Any version of jQuery</strong></p>\n\n<pre><code>// Assuming an event handler on a checkbox\nif (this.checked)\n</code></pre>\n\n<p>All credit goes to <a href=\"https://stackoverflow.com/a/426276/443427\">Xian</a>.</p>\n",
    "score": 137,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4778408,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/4778408",
    "title": null,
    "body": "<p>In a language implementing classical inheritance like Java, C# or C++ you start by creating a class--a blueprint for your objects--and then you can create new objects from that class or you can extend the class, defining a new class that augments the original class.</p>\n\n<p>In JavaScript you first create an object (there is no concept of class), then you can augment your own object or create new objects from it. It's not difficult, but a little foreign and hard to metabolize for somebody used to the classical way.</p>\n\n<p>Example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>//Define a functional object to hold persons in JavaScript\r\nvar Person = function(name) {\r\n  this.name = name;\r\n};\r\n\r\n//Add dynamically to the already defined object a new getter\r\nPerson.prototype.getName = function() {\r\n  return this.name;\r\n};\r\n\r\n//Create a new object of type Person\r\nvar john = new Person(\"John\");\r\n\r\n//Try the getter\r\nalert(john.getName());\r\n\r\n//If now I modify person, also John gets the updates\r\nPerson.prototype.sayMyName = function() {\r\n  alert('Hello, my name is ' + this.getName());\r\n};\r\n\r\n//Call the new method on john\r\njohn.sayMyName();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Until now I've been extending the base object, now I create another object and then inheriting from Person.</p>\n\n<pre><code>//Create a new object of type Customer by defining its constructor. It's not \n//related to Person for now.\nvar Customer = function(name) {\n    this.name = name;\n};\n\n//Now I link the objects and to do so, we link the prototype of Customer to \n//a new instance of Person. The prototype is the base that will be used to \n//construct all new instances and also, will modify dynamically all already \n//constructed objects because in JavaScript objects retain a pointer to the \n//prototype\nCustomer.prototype = new Person();     \n\n//Now I can call the methods of Person on the Customer, let's try, first \n//I need to create a Customer.\nvar myCustomer = new Customer('Dream Inc.');\nmyCustomer.sayMyName();\n\n//If I add new methods to Person, they will be added to Customer, but if I\n//add new methods to Customer they won't be added to Person. Example:\nCustomer.prototype.setAmountDue = function(amountDue) {\n    this.amountDue = amountDue;\n};\nCustomer.prototype.getAmountDue = function() {\n    return this.amountDue;\n};\n\n//Let's try:       \nmyCustomer.setAmountDue(2000);\nalert(myCustomer.getAmountDue());\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var Person = function (name) {\r\n    this.name = name;\r\n};\r\nPerson.prototype.getName = function () {\r\n    return this.name;\r\n};\r\nvar john = new Person(\"John\");\r\nalert(john.getName());\r\nPerson.prototype.sayMyName = function () {\r\n    alert('Hello, my name is ' + this.getName());\r\n};\r\njohn.sayMyName();\r\nvar Customer = function (name) {\r\n    this.name = name;\r\n};\r\nCustomer.prototype = new Person();\r\n\r\nvar myCustomer = new Customer('Dream Inc.');\r\nmyCustomer.sayMyName();\r\nCustomer.prototype.setAmountDue = function (amountDue) {\r\n    this.amountDue = amountDue;\r\n};\r\nCustomer.prototype.getAmountDue = function () {\r\n    return this.amountDue;\r\n};\r\nmyCustomer.setAmountDue(2000);\r\nalert(myCustomer.getAmountDue());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>While as said I can't call setAmountDue(), getAmountDue() on a Person.</p>\n\n<pre><code>//The following statement generates an error.\njohn.setAmountDue(1000);\n</code></pre>\n",
    "score": 1676,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 445543,
      "name": "stivlo",
      "reputation": 50139
    }
  },
  {
    "soID": 25137253,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/25137253",
    "title": null,
    "body": "<p>The setTimeout/setInterval solutions presented here will only work in specific circumstances.</p>\n\n<p>The problem shows up especially in older Internet Explorer versions up to 8.</p>\n\n<p>The variables affecting the success of these setTimeout/setInterval solutions are:</p>\n\n<pre><code>1) dynamic or static HTML\n2) cached or non cached requests\n3) size of the complete HTML document\n4) chunked or non chunked transfer encoding\n</code></pre>\n\n<p>the original (native Javascript) code solving this specific issue is here:</p>\n\n<pre><code>https://github.com/dperini/ContentLoaded\nhttp://javascript.nwbox.com/ContentLoaded (test)\n</code></pre>\n\n<p>this is the code from which the jQuery team have built their implementation.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 445673,
      "name": "Diego Perini",
      "reputation": 4155
    }
  },
  {
    "soID": 14561933,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/14561933",
    "title": null,
    "body": "<p>I think this workaround should work in IE, Chrome, Firefox, Safari, Opera -</p>\n\n<p><strong>Using jQuery</strong> :</p>\n\n<pre><code>&lt;xmp id=\"unique_id\" style=\"display:none;\"&gt;\n  Some plain text\n  Both type of quotes :  \" ' \" And  ' \" '\n  JS Code : alert(\"Hello World\");\n  HTML Code : &lt;div class=\"some_class\"&gt;&lt;/div&gt;\n&lt;/xmp&gt;\n&lt;script&gt;\n   alert($('#unique_id').html());\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>Using Pure Javascript :</strong></p>\n\n<pre><code>&lt;xmp id=\"unique_id\" style=\"display:none;\"&gt;\n  Some plain text\n  Both type of quotes :  \" ' \" And  ' \" '\n  JS Code : alert(\"Hello World\");\n  HTML Code : &lt;div class=\"some_class\"&gt;&lt;/div&gt;\n&lt;/xmp&gt;\n&lt;script&gt;\n   alert(document.getElementById('unique_id').innerHTML);\n&lt;/script&gt;\n</code></pre>\n\n<p>Cheers!!</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 446103,
      "name": "Aditya Hajare",
      "reputation": 143
    }
  },
  {
    "soID": 21789628,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/21789628",
    "title": null,
    "body": "<p>The shortest possible expression in terms of size to obtain a query object seems to be:</p>\n\n<pre><code>var params = {};\nlocation.search.substr(1).replace(/([^&amp;=]*)=([^&amp;]*)&amp;?/g,\n  function () { params[decodeURIComponent(arguments[1])] = decodeURIComponent(arguments[2]); });\n</code></pre>\n\n<p>You can make use of the <code>A</code> element to parse a URI from a string into its <code>location</code>-like components (to get rid of <code>#...</code>, for example):</p>\n\n<pre><code>var a = document.createElement('a');\na.href = url;\n// Parse a.search.substr(1)... as above\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 3765710,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/3765710",
    "title": null,
    "body": "<p>I was recently using this for a mobile site. This is John Resig's simplified version from \"Pro JavaScript Techniques\". It depends on addEvent.</p>\n\n<pre><code>var ready = ( function () {\n  function ready( f ) {\n    if( ready.done ) return f();\n\n    if( ready.timer ) {\n      ready.ready.push(f);\n    } else {\n      addEvent( window, \"load\", isDOMReady );\n      ready.ready = [ f ];\n      ready.timer = setInterval(isDOMReady, 13);\n    }\n  };\n\n  function isDOMReady() {\n    if( ready.done ) return false;\n\n    if( document &amp;&amp; document.getElementsByTagName &amp;&amp; document.getElementById &amp;&amp; document.body ) {\n      clearInterval( ready.timer );\n      ready.timer = null;\n      for( var i = 0; i &lt; ready.ready.length; i++ ) {\n        ready.ready[i]();\n      }\n      ready.ready = null;\n      ready.done = true;\n    }\n  }\n\n  return ready;\n})();\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 450857,
      "name": "James",
      "reputation": 151
    }
  },
  {
    "soID": 23518647,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/23518647",
    "title": null,
    "body": "<p>I have a solution very close to Peter's, but it deals with number and object case.</p>\n\n<pre><code>if (!String.prototype.format) {\n  String.prototype.format = function() {\n    var args;\n    args = arguments;\n    if (args.length === 1 &amp;&amp; args[0] !== null &amp;&amp; typeof args[0] === 'object') {\n      args = args[0];\n    }\n    return this.replace(/{([^}]*)}/g, function(match, key) {\n      return (typeof args[key] !== \"undefined\" ? args[key] : match);\n    });\n  };\n}\n</code></pre>\n\n<p>Maybe it could be even better to deal with the all deeps cases, but for my needs this is just fine.</p>\n\n<pre><code>\"This is an example from {name}\".format({name:\"Blaine\"});\n\"This is an example from {0}\".format(\"Blaine\");\n</code></pre>\n\n<p>PS: This function is very cool if you are using translations in templates frameworks like <a href=\"http://en.wikipedia.org/wiki/AngularJS\" rel=\"noreferrer\">AngularJS</a>:</p>\n\n<pre><code>&lt;h1&gt; {{('hello-message'|translate).format(user)}} &lt;h1&gt;\n&lt;h1&gt; {{('hello-by-name'|translate).format( user ? user.name : 'You' )}} &lt;h1&gt;\n</code></pre>\n\n<p>Where the en.json is something like</p>\n\n<pre><code>{\n    \"hello-message\": \"Hello {name}, welcome.\",\n    \"hello-by-name\": \"Hello {0}, welcome.\"\n}\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 26440383,
    "parentID": 1414365,
    "url": "https://stackoverflow.com/q/26440383",
    "title": null,
    "body": "<p>You can put this somewhere global in your code:</p>\n\n<pre><code>$.prototype.enable = function () {\n    $.each(this, function (index, el) {\n        $(el).removeAttr('disabled');\n    });\n}\n\n$.prototype.disable = function () {\n    $.each(this, function (index, el) {\n        $(el).attr('disabled', 'disabled');\n    });\n}\n</code></pre>\n\n<p>And then you can write stuff like:</p>\n\n<pre><code>$(\".myInputs\").enable();\n$(\"#otherInput\").disable();\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 460750,
      "name": "Nicolae Surdu",
      "reputation": 4047
    }
  },
  {
    "soID": 7786438,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/7786438",
    "title": null,
    "body": "<p>The following code will create an object which has two methods:</p>\n\n<ol>\n<li><code>isKeyExist</code>: Check if a particular parameter exist</li>\n<li><code>getValue</code>: Get the value of a particular parameter.</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<pre><code>var QSParam = new function() {\n       var qsParm = {};\n       var query = window.location.search.substring(1);\n       var params = query.split('&amp;');\n       for (var i = 0; i &lt; params.length; i++) {\n           var pos = params[i].indexOf('=');\n           if (pos &gt; 0) {\n               var key = params[i].substring(0, pos);\n               var val = params[i].substring(pos + 1);\n               qsParm[key] = val;\n           }\n       }\n       this.isKeyExist = function(query){\n           if(qsParm[query]){\n               return true;\n           }\n           else{\n              return false;\n           }\n       };\n       this.getValue = function(query){\n           if(qsParm[query])\n           {\n               return qsParm[query];\n           }\n           throw \"URL does not contain query \"+ query;\n       }\n};\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13403640,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/13403640",
    "title": null,
    "body": "<p>One-liner to get the query:</p>\n\n<pre><code>var value = location.search.match(new RegExp(key + \"=(.*?)($|\\&amp;)\", \"i\"))[1];\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 27890891,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/27890891",
    "title": null,
    "body": "<p>I started porting the <code>Java</code> <code>String.format</code> (actually new Formatter().format()) to javascript. The initial version is available at: </p>\n\n<p><a href=\"https://github.com/RobAu/javascript.string.format\" rel=\"nofollow\">https://github.com/RobAu/javascript.string.format</a></p>\n\n<p>You can simple add the javscript and call <code>StringFormat.format(\"%.2f\", [2.4]);</code> etc.</p>\n\n<p>Please note it is NOT finished yet, but feedback is welcome :) </p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 2465508,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/2465508",
    "title": null,
    "body": "<p>As of Flash 10, you can only copy to clipboard if the action originates from user interaction with a Flash object. (<a href=\"http://www.adobe.com/devnet/flashplayer/articles/fplayer10_security_changes_02.html#head31\" rel=\"noreferrer\">Read related section from Adobe's Flash 10 announcement</a>)</p>\n\n<p>The solution is to overly a flash object above the Copy button, or whatever element initiates the copy. Zero Clipboard is currently the best library with this implementation. Experienced Flash developers may just want to make their own library.</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 462610,
      "name": "matthuhiggins",
      "reputation": 1460
    }
  },
  {
    "soID": 3867610,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/3867610",
    "title": null,
    "body": "<p>Here's my stab at making Andy E's excellent solution into a full fledged jQuery plugin:</p>\n\n<pre><code>;(function ($) {\n    $.extend({      \n        getQueryString: function (name) {           \n            function parseParams() {\n                var params = {},\n                    e,\n                    a = /\\+/g,  // Regex for replacing addition symbol with a space\n                    r = /([^&amp;=]+)=?([^&amp;]*)/g,\n                    d = function (s) { return decodeURIComponent(s.replace(a, \" \")); },\n                    q = window.location.search.substring(1);\n\n                while (e = r.exec(q))\n                    params[d(e[1])] = d(e[2]);\n\n                return params;\n            }\n\n            if (!this.queryStringParams)\n                this.queryStringParams = parseParams(); \n\n            return this.queryStringParams[name];\n        }\n    });\n})(jQuery);\n</code></pre>\n\n<p>The syntax is:</p>\n\n<pre><code>var someVar = $.getQueryString('myParam');\n</code></pre>\n\n<p>Best of both worlds!</p>\n",
    "score": 91,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10297723,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/10297723",
    "title": null,
    "body": "<p>This is a really handy way to check for undefined, \"undefined\", null, \"null\", \"\"</p>\n\n<pre><code>if (!!var1 &amp;&amp; !!var2 &amp;&amp; !!var3 &amp;&amp; !!var4 ){\n   //... some code here\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 468855,
      "name": "rob_james",
      "reputation": 809
    }
  },
  {
    "soID": 3880607,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/3880607",
    "title": null,
    "body": "<pre><code>var someName = \"Test\";\n\n$(\"#&lt;%= ddltest.ClientID %&gt;\").each(function () {\n    $('option', this).each(function () {\n        if ($(this).text().toLowerCase() == someName) {\n            $(this).attr('selected', 'selected')\n        };\n    });\n});\n</code></pre>\n\n<p>That will help you to get right direction. Above code is fully tested if you need further help let me know.</p>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 468937,
      "name": "Zarni",
      "reputation": 247
    }
  },
  {
    "soID": 21248243,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/21248243",
    "title": null,
    "body": "<p>This will parse variables <strong>AND</strong> arrays from a URL string. It uses neither <em>regex</em> or any external library.</p>\n\n<pre><code>function url2json(url) {\n   var obj={};\n   function arr_vals(arr){\n      if (arr.indexOf(',') &gt; 1){\n         var vals = arr.slice(1, -1).split(',');\n         var arr = [];\n         for (var i = 0; i &lt; vals.length; i++)\n            arr[i]=vals[i];\n         return arr;\n      }\n      else\n         return arr.slice(1, -1);\n   }\n   function eval_var(avar){\n      if (!avar[1])\n          obj[avar[0]] = '';\n      else\n      if (avar[1].indexOf('[') == 0)\n         obj[avar[0]] = arr_vals(avar[1]);\n      else\n         obj[avar[0]] = avar[1];\n   }\n   if (url.indexOf('?') &gt; -1){\n      var params = url.split('?')[1];\n      if(params.indexOf('&amp;') &gt; 2){\n         var vars = params.split('&amp;');\n         for (var i in vars)\n            eval_var(vars[i].split('='));\n      }\n      else\n         eval_var(params.split('='));\n   }\n   return obj;\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>var url = \"http://www.x.com?luckyNums=[31,21,6]&amp;name=John&amp;favFoods=[pizza]&amp;noVal\"\nconsole.log(url2json(url));\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>[object]\n   noVal: \"\"\n   favFoods: \"pizza\"\n   name:     \"John\"\n   luckyNums:\n      0: \"31\"\n      1: \"21\"\n      2: \"6\"\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13723464,
    "parentID": 1279957,
    "url": "https://stackoverflow.com/q/13723464",
    "title": null,
    "body": "<p>You may also try:</p>\n\n<pre><code>$(\"#destination\").html($(\"#source\"))\n</code></pre>\n\n<p>But this will completely overwrite anything you have in <code>#destination</code>.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 475476,
      "name": "Tamas",
      "reputation": 89
    }
  },
  {
    "soID": 14360209,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/14360209",
    "title": null,
    "body": "<p>Don't forget to check out <a href=\"http://labjs.com\" rel=\"nofollow\">LAB.js</a>!</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n       $LAB\n       .script(\"jquery-1.8.3.js\").wait()\n       .script(\"scripts/clientscript.js\");      \n&lt;/script&gt;\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 476711,
      "name": "emolaus",
      "reputation": 476
    }
  },
  {
    "soID": 3944507,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/3944507",
    "title": null,
    "body": "<p><a href=\"http://github.com/dannycoates/node-inspector\" rel=\"noreferrer\">node-inspector</a> could save the day! Use it from any browser supporting <a href=\"http://en.wikipedia.org/wiki/WebSocket\" rel=\"noreferrer\">WebSocket</a>. Breakpoints, profiler, livecoding, etc... It is really awesome.</p>\n\n<p>Install it with:</p>\n\n<pre><code>npm install -g node-inspector\n</code></pre>\n\n<p>Then run:</p>\n\n<pre><code>node-debug app.js\n</code></pre>\n",
    "score": 1111,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 477157,
      "name": "daralthus",
      "reputation": 11561
    }
  },
  {
    "soID": 20876848,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/20876848",
    "title": null,
    "body": "<p>There is the new open-source <a href=\"http://www.nodeclipse.org/\" rel=\"nofollow noreferrer\">Nodeclipse</a> project (as a Eclipse plugin or <a href=\"http://sourceforge.net/projects/nodeclipse/files/\" rel=\"nofollow noreferrer\">Enide Studio</a>):</p>\n\n<p><a href=\"http://www.nodeclipse.org/img/Nodeclipse-1-debugging.png\" rel=\"nofollow noreferrer\">http://www.nodeclipse.org/img/Nodeclipse-1-debugging.png</a></p>\n\n<p>Nodeclipse became #1 in <a href=\"http://www.eclipse.org/community/eclipse_newsletter/2013/december/article2.php\" rel=\"nofollow noreferrer\">Eclipse Top 10 NEW Plugins for 2013</a>. It uses a modified <a href=\"http://en.wikipedia.org/wiki/V8_%28JavaScript_engine%29\" rel=\"nofollow noreferrer\">V8</a> debugger (from Google Chrome Developer Tools for Java).</p>\n\n<p>Nodeclipse is free open-source software <a href=\"http://www.nodeclipse.org/history\" rel=\"nofollow noreferrer\">released at the start of every month</a>.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 482717,
      "name": "Paul Verest",
      "reputation": 18962
    }
  },
  {
    "soID": 19925216,
    "parentID": 1098040,
    "url": "https://stackoverflow.com/q/19925216",
    "title": null,
    "body": "<p>Three ways to check if a property is present in a javascript object:</p>\n\n<ol>\n<li><strong>!!obj.theProperty</strong><br>\nWill convert value to bool. returns TRUE for all but the 'false' value</li>\n<li><strong>'theProperty' in obj</strong><br>\nWill return true if the property exists, no matter its value (even empty)</li>\n<li><strong>obj.hasOwnProperty('theProperty')</strong><br>\nDoes not check the prototype chain. (since all objects have the 'toString' method, 1 and 2 will return true on it, while 3 can return false on it.)</li>\n</ol>\n\n<p>Reference: </p>\n\n<blockquote>\n  <p><a href=\"http://book.mixu.net/node/ch5.html\">http://book.mixu.net/node/ch5.html</a></p>\n</blockquote>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 483647,
      "name": "Lavi Avigdor",
      "reputation": 1528
    }
  },
  {
    "soID": 4001713,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/4001713",
    "title": null,
    "body": "<p>This works for every browser:</p>\n\n<pre><code>window.location.href = 'your_url';\n</code></pre>\n",
    "score": 200,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 484764,
      "name": "Fred",
      "reputation": 2041
    }
  },
  {
    "soID": 34334339,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/34334339",
    "title": null,
    "body": "<p>A one-liner:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>'string'.replace(/(^[a-z])/,function (p) { return p.toUpperCase(); } )</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 486387,
      "name": "madeinstefano",
      "reputation": 1945
    }
  },
  {
    "soID": 43922095,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/43922095",
    "title": null,
    "body": "<p>Use below if you need to empty Angular 2+ FormArray. </p>\n\n<pre><code>public emptyFormArray(formArray:FormArray) {\n    for (let i = formArray.controls.length - 1; i &gt;= 0; i--) {\n        formArray.removeAt(i);\n    }\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 486867,
      "name": "Manish Jain",
      "reputation": 5568
    }
  },
  {
    "soID": 4256130,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/4256130",
    "title": null,
    "body": "<p>jsxt, Zippo</p>\n\n<p>This option fits better.</p>\n\n<pre><code>String.prototype.format = function() {\n    var formatted = this;\n    for (var i = 0; i &lt; arguments.length; i++) {\n        var regexp = new RegExp('\\\\{'+i+'\\\\}', 'gi');\n        formatted = formatted.replace(regexp, arguments[i]);\n    }\n    return formatted;\n};\n</code></pre>\n\n<p>With this option I can replace strings like these:</p>\n\n<pre><code>'The {0} is dead. Don\\'t code {0}. Code {1} that is open source!'.format('ASP', 'PHP');\n</code></pre>\n\n<p>With your code the second {0} wouldn't be replaced. ;)</p>\n",
    "score": 161,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31132925,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/31132925",
    "title": null,
    "body": "<p>If you want a simple <code>DD/MM/YYYY</code> format, I've just come up with this simple solution, although it doesn't prefix missing zeros.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var d = new Date();\r\ndocument.write( [d.getDate(), d.getMonth()+1, d.getFullYear()].join('/') );</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 487719,
      "name": "Phil Ricketts",
      "reputation": 1886
    }
  },
  {
    "soID": 8148541,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/8148541",
    "title": null,
    "body": "<p>I have an easy(but not generic) solution for this scenario : </p>\n\n<p>if you know a specific property name for your object , then you can easily check if that property exists. This way you would know if that object is empty or not , and you wouldn't need to traverse all the properties or use a library.</p>\n\n<p>Let me give an example : there is an object that , if its not empty, must have a property named \"myProperty\". Then you can check it like :</p>\n\n<pre><code>if(myObject['myProperty']){\nalert(\"NOT EMPTY\");\n}else{\n    alert(\"EMPTY\")\n}\n</code></pre>\n\n<p>this is not a generic solution but it's been doing all i need actually, as most times i know what to expect in an object that i'm performing an empty check.</p>\n",
    "score": -4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 489364,
      "name": "kommradHomer",
      "reputation": 2435
    }
  },
  {
    "soID": 4771084,
    "parentID": 1357118,
    "url": "https://stackoverflow.com/q/4771084",
    "title": null,
    "body": "<p>From my experience, there is at least one clear advantage when using event.preventDefault() over using return false. Suppose you are capturing the click event on an anchor tag, otherwise which it would be a big problem if the user were to be navigated away from the current page. If your click handler uses return false to prevent browser navigation, it opens the possibility that the interpreter will not reach the return statement and the browser will proceed to execute the anchor tag's default behavior.</p>\n\n<pre><code>$('a').click(function (e) {\n  // custom handling here\n\n  // oops...runtime error...where oh where will the href take me?\n\n  return false;\n});\n</code></pre>\n\n<p>The benefit to using event.preventDefault() is that you can add this as the first line in the handler, thereby guaranteeing that the anchor's default behavior will not fire, regardless if the last line of the function is not reached (eg. runtime error).</p>\n\n<pre><code>$('a').click(function (e) {\n  e.preventDefault();\n\n  // custom handling here\n\n  // oops...runtime error, but at least the user isn't navigated away.\n});\n</code></pre>\n",
    "score": 366,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 490006,
      "name": "Jeff Poulton",
      "reputation": 4747
    }
  },
  {
    "soID": 33888671,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/33888671",
    "title": null,
    "body": "<p>The <a href=\"http://en.wikipedia.org/wiki/NetBeans\" rel=\"nofollow\">NetBeans</a> IDE has had Node.js support since <a href=\"https://netbeans.org/community/releases/81/\" rel=\"nofollow\">version 8.1</a>:</p>\n\n<blockquote>\n  <p>&lt;...></p>\n  \n  <h1>New Feature Highlights</h1>\n  \n  <h2>Node.js Application Development</h2>\n  \n  <ul>\n  <li>New Node.js project wizard</li>\n  <li>New Node.js Express wizard</li>\n  <li>Enhanced JavaScript Editor</li>\n  <li>New support for running Node.js applications</li>\n  <li>New support for debugging Node.js applications.</li>\n  </ul>\n  \n  <p>&lt;...></p>\n</blockquote>\n\n<p>Additional references:</p>\n\n<ol>\n<li><a href=\"http://wiki.netbeans.org/NewAndNoteworthyNB81\" rel=\"nofollow\">NetBeans Wiki / NewAndNoteworthyNB81</a>.</li>\n<li><a href=\"https://blogs.oracle.com/geertjan/entry/express_js_in_netbeans_ide\" rel=\"nofollow\">Node.js Express App in NetBeans IDE, Geertjan-Oracle</a>.</li>\n</ol>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 490018,
      "name": "Sergey Brunov",
      "reputation": 7820
    }
  },
  {
    "soID": 40760281,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/40760281",
    "title": null,
    "body": "<pre><code>function cap(input) {\n    return input.replace(/[\\.\\r\\n\\t\\:\\;\\?\\!]\\W*(\\w)/g, function(match, capture) {\n                  // for other sentences in text\n                  return match.toUpperCase();\n                 }).replace(/^\\W*\\w/, function(match, capture) {\n                 // for first sentence in text\n                  return match.toUpperCase();\n                 });;\n}\n\nvar a = \"hi, dear user. it is a simple test. see you later!\\r\\nbye\";\nconsole.log(cap(a));\n//output: Hi, dear user. It is a simple test. See you later!\n//Bye\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 494344,
      "name": "SalmanAA",
      "reputation": 378
    }
  },
  {
    "soID": 12399125,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/12399125",
    "title": null,
    "body": "<p><a href=\"https://stackoverflow.com/q/9316612/497418\">A common way to write a <code>contains</code> method in JavaScript</a> is:</p>\n\n<pre><code>if (!String.prototype.contains) {\n    String.prototype.contains = function (arg) {\n        return !!~this.indexOf(arg);\n    };\n}\n</code></pre>\n\n<p>The bitwise negation operator (<code>~</code>) is used to turn <code>-1</code> into <code>0</code> (falsey), and all other values will be non-zero (truthy).</p>\n\n<p>The double boolean negation operators are used to cast the number into a boolean.</p>\n",
    "score": 60,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 497418,
      "name": "zzzzBov",
      "reputation": 111441
    }
  },
  {
    "soID": 32654955,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/32654955",
    "title": null,
    "body": "<p><em>I had the following configuration, resulting in the same error, when requesting responses from the server.</em></p>\n\n<p><strong>Server-side:</strong> <a href=\"http://sparkjava.com/\" rel=\"noreferrer\">SparkJava</a> --> provides the REST-API<br>\n<strong>Client-side:</strong> <a href=\"https://docs.sencha.com/extjs/6.0/6.0.0-classic\" rel=\"noreferrer\">ExtJs6</a> --> provides Browser rendering  </p>\n\n<p>On the <strong>server-side</strong> I had to add this to the response:  </p>\n\n<pre><code>Spark.get(\"/someRestCallToSpark\", (req, res) -&gt; {\n    res.header(\"Access-Control-Allow-Origin\", \"*\"); //important, otherwise its not working \n    return \"some text\";\n });\n</code></pre>\n\n<p>On the <strong>client-side</strong> I had to <em>add</em> this to the request:  </p>\n\n<pre><code>Ext.Ajax.request({\n    url: \"http://localhost:4567/someRestCallToSpark\",\n    useDefaultXhrHeader: false, //important, otherwise its not working\n    success: function(response, opts) {console.log(\"success\")},\n    failure: function(response, opts) {console.log(\"failure\")}\n});\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 504060,
      "name": "kiltek",
      "reputation": 1252
    }
  },
  {
    "soID": 17752917,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/17752917",
    "title": null,
    "body": "<p>For another case I need it to capitalize the first letter and lowercase the rest. The following cases made me change this function:</p>\n\n<pre><code>//es5\nfunction capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\ncapitalise(\"alfredo\")  // =&gt; \"Alfredo\"\ncapitalise(\"Alejandro\")// =&gt; \"Alejandro\ncapitalise(\"ALBERTO\")  // =&gt; \"Alberto\"\ncapitalise(\"ArMaNdO\")  // =&gt; \"Armando\"\n\n// es6 using destructuring \nconst capitalize = ([first,...rest]) =&gt; first.toUpperCase() + rest.join('').toLowerCase();\n</code></pre>\n",
    "score": 110,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 505002,
      "name": "alejandro",
      "reputation": 1763
    }
  },
  {
    "soID": 4374244,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/4374244",
    "title": null,
    "body": "<p>In JavaScript it's not advisable to loop through an Array with a for-in loop, but it's better using a for loop such as:</p>\n\n<pre><code>for(var i=0, len=myArray.length; i &lt; len; i++){}\n</code></pre>\n\n<p>It's optimized as well (\"caching\" the array length). If you'd like to learn more, <a href=\"http://blog.sebarmeli.com/2010/12/06/best-way-to-loop-through-an-array-in-javascript/\" rel=\"noreferrer\">read my post on the subject</a>.</p>\n",
    "score": 86,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 506570,
      "name": "sebarmeli",
      "reputation": 14323
    }
  },
  {
    "soID": 32353763,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/32353763",
    "title": null,
    "body": "<p>Another approach to return a value from an asynchronous function, is to pass in an object that will store the result from the asynchronous function.</p>\n\n<p>Here is an example of the same:</p>\n\n<pre><code>var async = require(\"async\");\n\n// This wires up result back to the caller\nvar result = {};\nvar asyncTasks = [];\nasyncTasks.push(function(_callback){\n    // some asynchronous operation\n    $.ajax({\n        url: '...',\n        success: function(response) {\n            result.response = response;\n            _callback();\n        }\n    });\n});\n\nasync.parallel(asyncTasks, function(){\n    // result is available after performing asynchronous operation\n    console.log(result)\n    console.log('Done');\n});\n</code></pre>\n\n<p>I am using the <code>result</code> object to store the value during the asynchronous operation. This allows the result be available even after the asynchronous job.</p>\n\n<p>I use this approach a lot. I would be interested to know how well this approach works where wiring the result back through consecutive modules is involved.</p>\n",
    "score": 36,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 507136,
      "name": "jsbisht",
      "reputation": 2555
    }
  },
  {
    "soID": 28866375,
    "parentID": 3437786,
    "url": "https://stackoverflow.com/q/28866375",
    "title": null,
    "body": "<p>If you need a truly bulletproof solution for the document width and height (the <code>pageWidth</code> and <code>pageHeight</code> in the picture), you might want to consider using a plugin of mine, <a href=\"https://github.com/hashchange/jquery.documentsize\" rel=\"nofollow noreferrer\">jQuery.documentSize</a>. </p>\n\n<p>It has just one purpose: to always return the correct document size, even in scenarios when jQuery and other methods <a href=\"https://github.com/hashchange/jquery.documentsize#what-does-it-do-that-jquery-doesnt\" rel=\"nofollow noreferrer\">fail</a>. Despite its name, you don't necessarily have to use jQuery – it is written in vanilla Javascript and <a href=\"https://github.com/hashchange/jquery.documentsize#dependencies-and-setup\" rel=\"nofollow noreferrer\">works without jQuery</a>, too.</p>\n\n<p>Usage:</p>\n\n<pre><code>var w = $.documentWidth(),\n    h = $.documentHeight();\n</code></pre>\n\n<p>for the global <code>document</code>. For other documents, e.g. in an embedded iframe you have access to, pass the document as a parameter:</p>\n\n<pre><code>var w = $.documentWidth( myIframe.contentDocument ),\n    h = $.documentHeight( myIframe.contentDocument );\n</code></pre>\n\n<p><strong>Update: now for window dimensions, too</strong></p>\n\n<p>Ever since version 1.1.0, jQuery.documentSize also handles window dimensions.</p>\n\n<p>That is necessary because </p>\n\n<ul>\n<li><code>$( window ).height()</code> is <a href=\"http://bugs.jquery.com/ticket/6724\" rel=\"nofollow noreferrer\" title=\"jQuery Ticket #6724: Wrong $(window).height() in mobile Safari (iPhone)\">buggy in iOS</a>, to the point of being useless</li>\n<li><code>$( window ).width()</code> and <code>$( window ).height()</code> are <a href=\"https://stackoverflow.com/questions/14388367/mobile-safari-window-height-url-bar-discrepancy/31655549#31655549\" title=\"Mobile Safari $(window).height() URL bar discrepancy – Stack Overflow\">unreliable on mobile</a> because they don't handle the effects of mobile zooming. </li>\n</ul>\n\n<p>jQuery.documentSize provides <code>$.windowWidth()</code> and <code>$.windowHeight()</code>, which solve these issues. For more, please check out <a href=\"https://github.com/hashchange/jquery.documentsize/blob/master/README.md#window-size\" rel=\"nofollow noreferrer\" title=\"Window size – jQuery.documentSize\">the documentation</a>.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 508355,
      "name": "hashchange",
      "reputation": 3438
    }
  },
  {
    "soID": 4194279,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/4194279",
    "title": null,
    "body": "<p>Code golf:</p>\n\n<pre><code>var a = location.search&amp;&amp;location.search.substr(1).replace(/\\+/gi,\" \").split(\"&amp;\");\nfor (var i in a) {\n    var s = a[i].split(\"=\");\n    a[i]  = a[unescape(s[0])] = unescape(s[1]);\n}\n</code></pre>\n\n<p>Display it!</p>\n\n<pre><code>for (i in a) {\n    document.write(i + \":\" + a[i] + \"&lt;br/&gt;\");   \n};\n</code></pre>\n\n<p>On my Mac: <code>test.htm?i=can&amp;has=cheezburger</code> displays</p>\n\n<pre><code>0:can\n1:cheezburger\ni:can\nhas:cheezburger\n</code></pre>\n",
    "score": 35,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 7202287,
    "parentID": 7202157,
    "url": "https://stackoverflow.com/q/7202287",
    "title": null,
    "body": "<p>If we split it up, the mess is equal to:</p>\n\n<pre><code>++[[]][+[]]\n+\n[+[]]\n</code></pre>\n\n<p>In JavaScript, it is true that <code>+[] === 0</code>. <code>+</code> converts something into a number, and in this case it will come down to <code>+\"\"</code> or <code>0</code> (see specification details below).</p>\n\n<p>Therefore, we can simplify it (<code>++</code> has precendence over <code>+</code>):</p>\n\n<pre><code>++[[]][0]\n+\n[0]\n</code></pre>\n\n<p>Because <code>[[]][0]</code> means: get the first element from <code>[[]]</code>, it is true that:</p>\n\n<ul>\n<li><code>[[]][0]</code> returns the inner array (<code>[]</code>). Due to references it's wrong to say <code>[[]][0] === []</code>, but let's call the inner array <code>A</code> to avoid the wrong notation.</li>\n<li><code>++[[]][0] == A + 1</code>, since <code>++</code> means 'increment by one'.</li>\n<li><code>++[[]][0] === +(A + 1)</code>; in other words, it will always be a number (<code>+1</code> does not necessarily return a number, whereas <code>++</code> always does - thanks to Tim Down for pointing this out).</li>\n</ul>\n\n<p>Again, we can simplify the mess into something more legible. Let's substitute <code>[]</code> back for <code>A</code>:</p>\n\n<pre><code>+([] + 1)\n+\n[0]\n</code></pre>\n\n<p>In JavaScript, this is true as well: <code>[] + 1 === \"1\"</code>,  because <code>[] == \"\"</code> (joining an empty array), so:</p>\n\n<ul>\n<li><code>+([] + 1) === +(\"\" + 1)</code>, and</li>\n<li><code>+(\"\" + 1) === +(\"1\")</code>, and</li>\n<li><code>+(\"1\") === 1</code></li>\n</ul>\n\n<p>Let's simplify it even more:</p>\n\n<pre><code>1\n+\n[0]\n</code></pre>\n\n<p>Also, this is true in JavaScript: <code>[0] == \"0\"</code>, because it's joining an array with one element. Joining will concatenate the elements separated by <code>,</code>. With one element, you can deduce that this logic will result in the first element itself.</p>\n\n<p>So, in the end we obtain (number + string = string):</p>\n\n<pre><code>1\n+\n\"0\"\n\n=== \"10\" // Yay!\n</code></pre>\n\n<hr>\n\n<p>Specification details for <code>+[]</code>:</p>\n\n<p>This is quite a maze, but to do <code>+[]</code>, first it is being converted to a string because that's what <code>+</code> says:</p>\n\n<blockquote>\n  <p>11.4.6 Unary + Operator</p>\n  \n  <p>The unary + operator converts its operand to Number type.</p>\n  \n  <p>The production UnaryExpression : + UnaryExpression is evaluated as follows:</p>\n  \n  <ol>\n  <li><p>Let expr be the result of evaluating UnaryExpression.</p></li>\n  <li><p>Return ToNumber(GetValue(expr)).</p></li>\n  </ol>\n</blockquote>\n\n<p><code>ToNumber()</code> says:</p>\n\n<blockquote>\n  <p>Object</p>\n  \n  <p>Apply the following steps:</p>\n  \n  <ol>\n  <li><p>Let primValue be ToPrimitive(input argument, hint String).</p></li>\n  <li><p>Return ToString(primValue).</p></li>\n  </ol>\n</blockquote>\n\n<p><code>ToPrimitive()</code> says:</p>\n\n<blockquote>\n  <p>Object</p>\n  \n  <p>Return a default value for the Object. The default value of an object is retrieved by calling the [[DefaultValue]] internal method of the object, passing the optional hint PreferredType. The behaviour of the [[DefaultValue]] internal method is defined by this specification for all native ECMAScript objects in 8.12.8.</p>\n</blockquote>\n\n<p><code>[[DefaultValue]]</code> says:</p>\n\n<blockquote>\n  <p>8.12.8 [[DefaultValue]] (hint)</p>\n  \n  <p>When the [[DefaultValue]] internal method of O is called with hint String, the following steps are taken:</p>\n  \n  <ol>\n  <li><p>Let toString be the result of calling the [[Get]] internal method of object O with argument \"toString\".</p></li>\n  <li><p>If IsCallable(toString) is true then,</p></li>\n  </ol>\n  \n  <p>a. Let str be the result of calling the [[Call]] internal method of toString, with O as the this value and an empty argument list.</p>\n  \n  <p>b. If str is a primitive value, return str.</p>\n</blockquote>\n\n<p>The <code>.toString</code> of an array says:</p>\n\n<blockquote>\n  <p>15.4.4.2 Array.prototype.toString ( )</p>\n  \n  <p>When the toString method is called, the following steps are taken:</p>\n  \n  <ol>\n  <li><p>Let array be the result of calling ToObject on the this value.</p></li>\n  <li><p>Let func be the result of calling the [[Get]] internal method of array with argument \"join\".</p></li>\n  <li><p>If IsCallable(func) is false, then let func be the standard built-in method Object.prototype.toString (15.2.4.2).</p></li>\n  <li><p>Return the result of calling the [[Call]] internal method of func providing array as the this value and an empty arguments list.</p></li>\n  </ol>\n</blockquote>\n\n<p>So <code>+[]</code> comes down to <code>+\"\"</code>, because <code>[].join() === \"\"</code>.</p>\n\n<p>Again, the <code>+</code> is defined as:</p>\n\n<blockquote>\n  <p>11.4.6 Unary + Operator</p>\n  \n  <p>The unary + operator converts its operand to Number type.</p>\n  \n  <p>The production UnaryExpression : + UnaryExpression is evaluated as follows:</p>\n  \n  <ol>\n  <li><p>Let expr be the result of evaluating UnaryExpression.</p></li>\n  <li><p>Return ToNumber(GetValue(expr)).</p></li>\n  </ol>\n</blockquote>\n\n<p><code>ToNumber</code> is defined for <code>\"\"</code> as:</p>\n\n<blockquote>\n  <p>The MV of StringNumericLiteral ::: [empty] is 0.</p>\n</blockquote>\n\n<p>So <code>+\"\" === 0</code>, and thus <code>+[] === 0</code>.</p>\n",
    "score": 1730,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 514749,
      "name": "pimvdb",
      "reputation": 99815
    }
  },
  {
    "soID": 9362596,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/9362596",
    "title": null,
    "body": "<p>If you're doing more URL manipulation than simply parsing the querystring, you may find <a href=\"http://medialize.github.com/URI.js/\" rel=\"noreferrer\">URI.js</a> helpful. It is a library for manipulating URLs - and comes with all the bells and whistles. (Sorry for self-advertising here)</p>\n\n<p>to convert your querystring into a map:</p>\n\n<pre><code>var data = URI('?foo=bar&amp;bar=baz&amp;foo=world').query(true);\ndata == {\n  \"foo\": [\"bar\", \"world\"],\n  \"bar\": \"baz\"\n}\n</code></pre>\n\n<p>(URI.js also \"fixes\" bad querystrings like <code>?&amp;foo&amp;&amp;bar=baz&amp;</code> to <code>?foo&amp;bar=baz</code>)</p>\n",
    "score": 69,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15209456,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/15209456",
    "title": null,
    "body": "<p>With sprintf.js in place - one can make a nifty little format-thingy </p>\n\n<pre><code>String.prototype.format = function(){\n    var _args = arguments \n    Array.prototype.unshift.apply(_args,[this])\n    return sprintf.apply(undefined,_args)\n}   \n// this gives you:\n\"{%1$s}{%2$s}\".format(\"1\", \"0\")\n// {1}{0}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11370933,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/11370933",
    "title": null,
    "body": "<p>One thing is certain... there is no elegant way. My contribution here is this link\n<a href=\"http://oranlooney.com/deep-copy-javascript/\" rel=\"noreferrer\">http://oranlooney.com/deep-copy-javascript/</a></p>\n\n<p>I think this library is the most comprehensive and elegant solution. It is particularly focused on the prototype chain of the cloned objects. It includes a mechanism to easy describe custom cloning behavior for particular classes. The author explains that most of the time the default cloning mechanism which is provided works fine.</p>\n\n<p>It also clones functions and handles cycles or multiple references.</p>\n\n<p>I have recently suggested the author a solution to optimize the mechanism which handles cycles, from O(n^2) to O(n).</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11462081,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/11462081",
    "title": null,
    "body": "<p>This is an adaptation of A. Levy's code to also handle the cloning of functions and multiple/cyclic references - what this means is that if two properties in the tree which is cloned are references of the same object, the cloned object tree will have these properties point to one and the same clone of the referenced object. This also solves the case of cyclic dependencies which, if left unhandled, leads to an infinite loop. The complexity of the algorithm is O(n)</p>\n\n<pre><code>function clone(obj){\n    var clonedObjectsArray = [];\n    var originalObjectsArray = []; //used to remove the unique ids when finished\n    var next_objid = 0;\n\n    function objectId(obj) {\n        if (obj == null) return null;\n        if (obj.__obj_id == undefined){\n            obj.__obj_id = next_objid++;\n            originalObjectsArray[obj.__obj_id] = obj;\n        }\n        return obj.__obj_id;\n    }\n\n    function cloneRecursive(obj) {\n        if (null == obj || typeof obj == \"string\" || typeof obj == \"number\" || typeof obj == \"boolean\") return obj;\n\n        // Handle Date\n        if (obj instanceof Date) {\n            var copy = new Date();\n            copy.setTime(obj.getTime());\n            return copy;\n        }\n\n        // Handle Array\n        if (obj instanceof Array) {\n            var copy = [];\n            for (var i = 0; i &lt; obj.length; ++i) {\n                copy[i] = cloneRecursive(obj[i]);\n            }\n            return copy;\n        }\n\n        // Handle Object\n        if (obj instanceof Object) {\n            if (clonedObjectsArray[objectId(obj)] != undefined)\n                return clonedObjectsArray[objectId(obj)];\n\n            var copy;\n            if (obj instanceof Function)//Handle Function\n                copy = function(){return obj.apply(this, arguments);};\n            else\n                copy = {};\n\n            clonedObjectsArray[objectId(obj)] = copy;\n\n            for (var attr in obj)\n                if (attr != \"__obj_id\" &amp;&amp; obj.hasOwnProperty(attr))\n                    copy[attr] = cloneRecursive(obj[attr]);                 \n\n            return copy;\n        }       \n\n\n        throw new Error(\"Unable to copy obj! Its type isn't supported.\");\n    }\n    var cloneObj = cloneRecursive(obj);\n\n\n\n    //remove the unique ids\n    for (var i = 0; i &lt; originalObjectsArray.length; i++)\n    {\n        delete originalObjectsArray[i].__obj_id;\n    };\n\n    return cloneObj;\n}\n</code></pre>\n\n<p>Some quick tests</p>\n\n<pre><code>var auxobj = {\n    prop1 : \"prop1 aux val\", \n    prop2 : [\"prop2 item1\", \"prop2 item2\"]\n    };\n\nvar obj = new Object();\nobj.prop1 = \"prop1_value\";\nobj.prop2 = [auxobj, auxobj, \"some extra val\", undefined];\nobj.nr = 3465;\nobj.bool = true;\n\nobj.f1 = function (){\n    this.prop1 = \"prop1 val changed by f1\";\n};\n\nobjclone = clone(obj);\n\n//some tests i've made\nconsole.log(\"test number, boolean and string cloning: \" + (objclone.prop1 == obj.prop1 &amp;&amp; objclone.nr == obj.nr &amp;&amp; objclone.bool == obj.bool));\n\nobjclone.f1();\nconsole.log(\"test function cloning 1: \" + (objclone.prop1 == 'prop1 val changed by f1'));\nobjclone.f1.prop = 'some prop';\nconsole.log(\"test function cloning 2: \" + (obj.f1.prop == undefined));\n\nobjclone.prop2[0].prop1 = \"prop1 aux val NEW\";\nconsole.log(\"test multiple references cloning 1: \" + (objclone.prop2[1].prop1 == objclone.prop2[0].prop1));\nconsole.log(\"test multiple references cloning 2: \" + (objclone.prop2[1].prop1 != obj.prop2[0].prop1));\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4261269,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/4261269",
    "title": null,
    "body": "<p>The <code>for</code>/<code>in</code> works with two types of variables: hashtables (associative arrays) and array (non-associative).</p>\n\n<p>JavaScript will automatically determine the way its passes through the items. So if you know that your array is really non-associative you can use <code>for (var i=0; i&lt;=arrayLen; i++)</code>, and skip the auto-detection iteration.</p>\n\n<p>But in my opinion, it's better to use <code>for</code>/<code>in</code>, the process required for that auto-detection is very small. </p>\n\n<p>A real answer for this will depend on how the browser parsers/interpret the JavaScript code. It can change between browsers.</p>\n\n<p>I can't think of other purposes to not using <code>for</code>/<code>in</code>;</p>\n\n<pre><code>//Non-associative\nvar arr = ['a', 'b', 'c'];\nfor (var i in arr)\n   alert(arr[i]);\n\n//Associative\nvar arr = {\n   item1 : 'a',\n   item2 : 'b',\n   item3 : 'c'\n};\n\nfor (var i in arr)\n   alert(arr[i]);\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 518070,
      "name": "Ricardo",
      "reputation": 69
    }
  },
  {
    "soID": 31550498,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/31550498",
    "title": null,
    "body": "<p>I wish someone shared this site with me long ago <a href=\"http://cors.io/\">http://cors.io/</a> it would have saved a ton of time compared to building and relying on my own proxy. However, as you move to production, having your own proxy is the best bet since you still control all aspects of your data.</p>\n\n<p>All you need:</p>\n\n<p><code>http://cors.io/?http://HTTP_YOUR_LINK_HERE</code></p>\n",
    "score": 93,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 523686,
      "name": "yoshyosh",
      "reputation": 7083
    }
  },
  {
    "soID": 15746133,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/15746133",
    "title": null,
    "body": "<p><a href=\"http://www.bobjs.com\" rel=\"nofollow\">bobjs</a> can do this:</p>\n\n<pre><code>var sFormat = \"My name is {0} and I am {1} years old.\"; \nvar result = bob.string.formatString(sFormat, \"Bob\", 29); \nconsole.log(result); \n//output: \n//========== \n// My name is Bob and I am 29 years old. \n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4929629,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/4929629",
    "title": null,
    "body": "<p>Use <code>new Date()</code> to generate a new <code>Date</code> object containing the current date and time.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var today = new Date();\r\nvar dd = today.getDate();\r\nvar mm = today.getMonth()+1; //January is 0!\r\nvar yyyy = today.getFullYear();\r\n\r\nif(dd&lt;10) {\r\n    dd = '0'+dd\r\n} \r\n\r\nif(mm&lt;10) {\r\n    mm = '0'+mm\r\n} \r\n\r\ntoday = mm + '/' + dd + '/' + yyyy;\r\ndocument.write(today);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>This will give you today's date in the format of mm/dd/yyyy.</p>\n\n<p>Simply change <code>today = mm +'/'+ dd +'/'+ yyyy;</code> to whatever format you wish.</p>\n",
    "score": 1650,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 525895,
      "name": "Samuel Meddows",
      "reputation": 17359
    }
  },
  {
    "soID": 32974789,
    "parentID": 894860,
    "url": "https://stackoverflow.com/q/32974789",
    "title": null,
    "body": "<p>As an update...with ECMAScript 6 you can <strong>FINALLY</strong> set default values in function parameter declarations like so:</p>\n\n<pre><code>function f (x, y = 7, z = 42) {\n  return x + y + z\n}\n\nf(1) === 50\n</code></pre>\n\n<p>As referenced by - <a href=\"http://es6-features.org/#DefaultParameterValues\" rel=\"nofollow noreferrer\">http://es6-features.org/#DefaultParameterValues</a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 526156,
      "name": "zillaofthegods",
      "reputation": 1083
    }
  },
  {
    "soID": 5821038,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/5821038",
    "title": null,
    "body": "<p>There actually <em>is</em> a way to load a JavaScript file <em>not</em> asynchronously, so you could use the functions included in your newly loaded file right after loading it, and I think it works in all browsers.</p>\n\n<p>You need to use <code>jQuery.append()</code> on the <code>&lt;head&gt;</code> element of your page, that is:</p>\n\n<pre><code>$(\"head\").append('&lt;script type=\"text/javascript\" src=\"' + script + '\"&gt;&lt;/script&gt;');\n</code></pre>\n\n<p>However, this method also has a problem: if an error happens in the imported JavaScript file, <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\" rel=\"noreferrer\">Firebug</a> (and also Firefox Error Console and <a href=\"https://developers.google.com/chrome-developer-tools/\" rel=\"noreferrer\">Chrome Developer Tools</a> as well) will report its place incorrectly, which is a big problem if you use Firebug to track JavaScript errors down a lot (I do). Firebug simply doesn't know about the newly loaded file for some reason, so if an error occurs in that file, it reports that it occurred in your main <a href=\"http://en.wikipedia.org/wiki/HTML\" rel=\"noreferrer\">HTML</a> file, and you will have trouble finding out the real reason for the error.</p>\n\n<p>But if that is not a problem for you, then this method should work.</p>\n\n<p>I have actually written a jQuery plugin called <em>$.import_js()</em> which uses this method:</p>\n\n<pre><code>(function($)\n{\n    /*\n     * $.import_js() helper (for JavaScript importing within JavaScript code).\n     */\n    var import_js_imported = [];\n\n    $.extend(true,\n    {\n        import_js : function(script)\n        {\n            var found = false;\n            for (var i = 0; i &lt; import_js_imported.length; i++)\n                if (import_js_imported[i] == script) {\n                    found = true;\n                    break;\n                }\n\n            if (found == false) {\n                $(\"head\").append('&lt;script type=\"text/javascript\" src=\"' + script + '\"&gt;&lt;/script&gt;');\n                import_js_imported.push(script);\n            }\n        }\n    });\n\n})(jQuery);\n</code></pre>\n\n<p>So all you would need to do to import JavaScript is:</p>\n\n<blockquote>\n  <p>$.import_js('/path_to_project/scripts/somefunctions.js');</p>\n</blockquote>\n\n<p>I also made a simple test for this at <a href=\"http://www.kipras.com/dev/import_js_test/\" rel=\"noreferrer\">http://www.kipras.com/dev/import_js_test/</a>.</p>\n\n<p>It includes a <code>main.js</code> file in the main HTML and then the script in <code>main.js</code> uses <code>$.import_js()</code> to import an additional file called <code>included.js</code>, which defines this function:</p>\n\n<pre><code>function hello()\n{\n    alert(\"Hello world!\");\n}\n</code></pre>\n\n<p>And right after including <code>included.js</code>, the hello() function is called, and you get the alert.</p>\n\n<p>(This answer is in response to e-satis' comment).</p>\n",
    "score": 133,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 532201,
      "name": "Kipras",
      "reputation": 1529
    }
  },
  {
    "soID": 4399440,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/4399440",
    "title": null,
    "body": "<p>I was having the same problem and none of the posted solutions seemed to work and then I found out that it's because ASP.NET renders the CheckBox control as a SPAN with INPUT inside, so the CheckBox ID is actually an ID of a SPAN, not an INPUT, so you should use:</p>\n\n<pre><code>$('#isAgeSelected input')\n</code></pre>\n\n<p>rather than</p>\n\n<pre><code>$('#isAgeSelected')\n</code></pre>\n\n<p>and then all methods listed above should work.</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6072388,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/6072388",
    "title": null,
    "body": "<p>to sum up, I have tried 2 approaches listed here in user javascript programming (Opera 11.01):</p>\n\n<ul>\n<li>this one didn't work: <a href=\"https://stackoverflow.com/questions/805107/multiline-strings-in-javascript/805111#805111\">Creating multiline strings in JavaScript</a></li>\n<li>this worked fairly well, I have also figured out how to make it look good in Notepad++ source view: <a href=\"https://stackoverflow.com/questions/805107/multiline-strings-in-javascript/5571069#5571069\">Creating multiline strings in JavaScript</a></li>\n</ul>\n\n<p>So I recommend the working approach for Opera user JS users. Unlike what the author was saying: </p>\n\n<blockquote>\n  <p>It doesn't work on firefox or opera; only on IE, chrome and safari. </p>\n</blockquote>\n\n<p>It DOES work in Opera 11. At least in user JS scripts. Too bad I can't comment on individual answers or upvote the answer, I'd do it immediately. If possible, someone with higher privileges please do it for me.</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 539300,
      "name": "Tyler",
      "reputation": 313
    }
  },
  {
    "soID": 14961657,
    "parentID": 1357118,
    "url": "https://stackoverflow.com/q/14961657",
    "title": null,
    "body": "<p>When using jQuery, <code>return false</code> is doing 3 separate things when you call it:</p>\n\n<ol>\n<li><code>event.preventDefault();</code></li>\n<li><code>event.stopPropagation();</code></li>\n<li>Stops callback execution and returns immediately when called.</li>\n</ol>\n\n<p>See <a href=\"http://fuelyourcoding.com/jquery-events-stop-misusing-return-false/\" rel=\"noreferrer\">jQuery Events: Stop (Mis)Using Return False</a> for more information and examples.</p>\n",
    "score": 45,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 543572,
      "name": "James Drinkard",
      "reputation": 7000
    }
  },
  {
    "soID": 9362358,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/9362358",
    "title": null,
    "body": "<p>Keep it simple in plain JavaScript code:</p>\n\n<pre><code>function qs(key) {\n    var vars = [], hash;\n    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&amp;');\n    for(var i = 0; i &lt; hashes.length; i++)\n    {\n        hash = hashes[i].split('=');\n        vars.push(hash[0]);\n        vars[hash[0]] = hash[1];\n    }\n    return vars[key];\n}\n</code></pre>\n\n<p>Call it from anywhere in the JavaScript code:</p>\n\n<pre><code>var result = qs('someKey');\n</code></pre>\n",
    "score": 48,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 25616937,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/25616937",
    "title": null,
    "body": "<p>If you just want a date without time info, use:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n\r\ndocument.write(today);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 83,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 548098,
      "name": "Marshal",
      "reputation": 1612
    }
  },
  {
    "soID": 12286303,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/12286303",
    "title": null,
    "body": "<p>The jQuery answer was pretty useful to me. With a little refactory it fitted my needs well.\nI hope it helps anybody else.</p>\n\n<pre><code>function onReady ( callback ){\n    var addListener = document.addEventListener || document.attachEvent,\n        removeListener =  document.removeEventListener || document.detachEvent\n        eventName = document.addEventListener ? \"DOMContentLoaded\" : \"onreadystatechange\"\n\n    addListener.call(document, eventName, function(){\n        removeListener( eventName, arguments.callee, false )\n        callback()\n    }, false )\n}\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 548685,
      "name": "Miere",
      "reputation": 827
    }
  },
  {
    "soID": 25424318,
    "parentID": 3437786,
    "url": "https://stackoverflow.com/q/25424318",
    "title": null,
    "body": "<p>You can also get the WINDOW width and height, avoiding browser toolbars and other stuff. It is the <strong>real usable area in browser's window</strong>.</p>\n\n<p>To do this, use:\n<code>window.innerWidth</code>  and  <code>window.innerHeight</code> properties (<a href=\"http://www.w3schools.com/jsref/prop_win_innerheight.asp\">see doc at w3schools</a>).</p>\n\n<p>In most cases it will be the best way, in example, to display a perfectly centred floating modal dialog. It allows you to calculate positions on window, no matter which resolution orientation or window size is using the browser.</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 551128,
      "name": "serfer2",
      "reputation": 1272
    }
  },
  {
    "soID": 16057095,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/16057095",
    "title": null,
    "body": "<p>I wrote a jQuery plugin for setting and getting radio-button values. It also respects the \"change\" event on them.</p>\n\n<pre><code>(function ($) {\n\n    function changeRadioButton(element, value) {\n        var name = $(element).attr(\"name\");\n        $(\"[type=radio][name=\" + name + \"]:checked\").removeAttr(\"checked\");\n        $(\"[type=radio][name=\" + name + \"][value=\" + value + \"]\").attr(\"checked\", \"checked\");\n        $(\"[type=radio][name=\" + name + \"]:checked\").change();\n    }\n\n    function getRadioButton(element) {\n        var name = $(element).attr(\"name\");\n        return $(\"[type=radio][name=\" + name + \"]:checked\").attr(\"value\");\n    }\n\n    var originalVal = $.fn.val;\n    $.fn.val = function(value) {\n\n        //is it a radio button? treat it differently.\n        if($(this).is(\"[type=radio]\")) {\n\n            if (typeof value != 'undefined') {\n\n                //setter\n                changeRadioButton(this, value);\n                return $(this);\n\n            } else {\n\n                //getter\n                return getRadioButton(this);\n\n            }\n\n        } else {\n\n            //it wasn't a radio button - let's call the default val function.\n            if (typeof value != 'undefined') {\n                return originalVal.call(this, value);\n            } else {\n                return originalVal.call(this);\n            }\n\n        }\n    };\n})(jQuery);\n</code></pre>\n\n<p>Put the code anywhere to enable the addin. Then enjoy! It just overrides the default val function without breaking anything.</p>\n\n<p>You can visit this jsFiddle to try it in action, and see how it works.</p>\n\n<p><a href=\"http://jsfiddle.net/ffMathy/MN856/\">Fiddle</a></p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 553609,
      "name": "Mathias Lykkegaard Lorenzen",
      "reputation": 6233
    }
  },
  {
    "soID": 33734301,
    "parentID": 894860,
    "url": "https://stackoverflow.com/q/33734301",
    "title": null,
    "body": "<p>that solution is work for me in js:</p>\n\n<pre><code>function read_file(file, delete_after) {\n    delete_after = delete_after || false;\n    // Code\n}\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 555167,
      "name": "Takács Zsolt",
      "reputation": 131
    }
  },
  {
    "soID": 18079794,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/18079794",
    "title": null,
    "body": "<p>@Jimbo, here is the simple ajax/session based clipboard for the same website.</p>\n\n<p>Note that the session must be enabled &amp; valid and this soln. works for the same site. I tested it on Codeigniter but ran into session/ajax problem but <a href=\"https://stackoverflow.com/questions/7980193/codeigniter-session-bugging-out-with-ajax-calls\">this</a> solved that problem too. If you dont want to play with sessions, use DB table.</p>\n\n<p><strong>js/jquery</strong></p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n$(document).ready(function() {\n\n    $(\"#copy_btn_id\").click(function(){\n\n      $.post(\"&lt;?php echo base_url();?&gt;ajax/foo_copy/\"+$(this).val(), null, \n        function(data){\n                //copied successfully\n            }, \"html\"\n      );\n    });\n\n    $(\"#paste_btn_id\").click(function() {\n\n       $.post(\"&lt;?php echo base_url();?&gt;ajax/foo_paste/\", null, \n         function(data) {\n           $('#paste_btn_id').val(data);\n         }, \"html\"\n       );\n    });\n\n\n  });\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>html</strong> </p>\n\n<pre><code>&lt;input type='text' id='copy_btn_id' onclick='this.select();'  value='myvalue' /&gt;\n&lt;input type='text' id='paste_btn_id' value='' /&gt;\n</code></pre>\n\n<p><strong>php</strong></p>\n\n<pre><code>&lt;?php \nclass Ajax extends CI_Controller {\n    public function foo_copy($val){\n        $this-&gt;session-&gt;set_userdata(array('clipboard_val' =&gt; $val));\n    }\n    public function foo_paste(){\n        echo $this-&gt;session-&gt;userdata('clipboard_val');\n        exit();\n    }\n}\n?&gt;\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 555467,
      "name": "Saad",
      "reputation": 663
    }
  },
  {
    "soID": 17314024,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/17314024",
    "title": null,
    "body": "<p>If the copied link has to be pasted on the same site, then simple solution is to,</p>\n\n<p>highlight the text before pressing the simple html copy button and then on pressing it, the text content is stored in a session. and wherever it is to be pasted, there is a paste button. </p>\n\n<p>**I know, its not persistent &amp; universal solution but its something :)</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 555467,
      "name": "Saad",
      "reputation": 663
    }
  },
  {
    "soID": 27888065,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/27888065",
    "title": null,
    "body": "<p>The universal solution is below:</p>\n\n<pre><code>Object.prototype.toString.call(obj)=='[object Array]'\n</code></pre>\n\n<p>Starting from ECMAScript 5, a formal solution is :</p>\n\n<pre><code>Array.isArray(arr)\n</code></pre>\n\n<p>Also, for old JavaScript libs, you can find below solution although it's not accurate enough:</p>\n\n<pre><code>var is_array = function (value) {\n    return value &amp;&amp;\n    typeof value === 'object' &amp;&amp;\n    typeof value.length === 'number' &amp;&amp;\n    typeof value.splice === 'function' &amp;&amp;\n    !(value.propertyIsEnumerable('length'));\n};\n</code></pre>\n\n<p>The solutions are from <a href=\"http://www.pixelstech.net/topic/85-How-to-check-whether-an-object-is-an-array-or-not-in-JavaScript\" rel=\"nofollow\">http://www.pixelstech.net/topic/85-How-to-check-whether-an-object-is-an-array-or-not-in-JavaScript</a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 558032,
      "name": "PixelsTech",
      "reputation": 1261
    }
  },
  {
    "soID": 10906132,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/10906132",
    "title": null,
    "body": "<p>In addition to the other problems, the \"for..in\" syntax is probably slower, because the index is a string, not an integer.</p>\n\n<pre><code>var a = [\"a\"]\nfor (var i in a)\n    alert(typeof i)  // 'string'\nfor (var i = 0; i &lt; a.length; i++)\n    alert(typeof i)  // 'number'\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 559554,
      "name": "dc1",
      "reputation": 61
    }
  },
  {
    "soID": 4948884,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/4948884",
    "title": null,
    "body": "<p>If you already have a reference to a radio button group, for example:</p>\n\n<pre><code>var myRadio = $('input[name=myRadio]');\n</code></pre>\n\n<p>Use the <code>filter()</code> function, not <code>find()</code>. (<code>find()</code> is for locating child/descendant elements, whereas <code>filter()</code> searches top-level elements in your selection.)</p>\n\n<pre><code>var checkedValue = myRadio.filter(':checked').val();\n</code></pre>\n\n<hr>\n\n<p><em>Note:</em> This answer was originally correcting another answer that recommended using <code>find()</code>, which seems to have since been changed. <code>find()</code> could still be useful in the situation where you already had a reference to a container element, but not to the radio buttons, e.g.:</p>\n\n<pre><code>var form = $('#mainForm');\n...\nvar checkedValue = form.find('input[name=myRadio]:checked').val();\n</code></pre>\n",
    "score": 220,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 560114,
      "name": "Matt Browne",
      "reputation": 7091
    }
  },
  {
    "soID": 7882048,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/7882048",
    "title": null,
    "body": "<p>This is an old question but having the same problem i found a very elegant solution that i want to share.</p>\n\n<p>Adding a prototype to Array makes it very simple</p>\n\n<pre><code>Array.prototype.isArray = true;\n</code></pre>\n\n<p>Now once if you have an object you want to test to see if its an array all you need is to check for the new property</p>\n\n<pre><code>var box = doSomething();\n\nif (box.isArray) {\n    // do something\n}\n</code></pre>\n\n<p>isArray is only available if its an array</p>\n",
    "score": 47,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 560299,
      "name": "Ibu",
      "reputation": 26924
    }
  },
  {
    "soID": 41105130,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/41105130",
    "title": null,
    "body": "<p>Many answers already but I like to add one (jQuery). Works like a charm on any browser, also mobile ones (ie prompts about security but when you accept it just works fine).</p>\n\n<pre><code>function appCopyToClipBoard( sText )\n{\n var oText = false,\n     bResult = false;\n try\n {\n  oText = document.createElement(\"textarea\");\n  $(oText).addClass('clipboardCopier').val(sText).insertAfter('body').focus();\n  oText.select();\n  document.execCommand(\"Copy\");\n  bResult = true;\n } catch(e) {}\n\n $(oText).remove();\n return bResult;\n}\n</code></pre>\n\n<p>In your code:</p>\n\n<pre><code>if( !appCopyToClipBoard( 'Hai there! This is copied to the clipboard.' ))\n { alert('Sorry, copy to clipboard failed.'); }\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 565244,
      "name": "Erwinus",
      "reputation": 2980
    }
  },
  {
    "soID": 4614440,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/4614440",
    "title": null,
    "body": "<p>This works for me:</p>\n\n<pre><code>/* isAgeSelected being id for checkbox */\n\n$(\"#isAgeSelected\").click(function(){\n  $(this).is(':checked') ? $(\"#txtAge\").show() : $(\"#txtAge\").hide();\n});\n</code></pre>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6247331,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/6247331",
    "title": null,
    "body": "<h2>Update:</h2>\n\n<p>With ES6/Babel, you can now create multi-line strings simply by using backticks:</p>\n\n<pre><code>var htmlString = `Say hello to \nmulti-line\nstrings!`;\n</code></pre>\n\n<h2>Original ES5 answer:</h2>\n\n<blockquote>\n  <p><a href=\"https://google.github.io/styleguide/javascriptguide.xml?showone=Multiline_string_literals#Multiline_string_literals\" rel=\"noreferrer\">Google's JavaScript style guide</a> recommends to use string concatenation instead of escaping newlines:</p>\n  \n  <p><strong>Do not do this:</strong></p>\n\n<pre><code>var myString = 'A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\'ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.';\n</code></pre>\n  \n  <p>The whitespace at the beginning of each line can't be safely stripped at compile time; whitespace after the slash will result in tricky errors; and while most script engines support this, it is not part of ECMAScript.</p>\n  \n  <p><strong>Use string concatenation instead:</strong></p>\n\n<pre><code>var myString = 'A rather long string of English text, an error message ' +\n               'actually that just keeps going and going -- an error ' +\n               'message to make the Energizer bunny blush (right through ' +\n               'those Schwarzenegger shades)! Where was I? Oh yes, ' +\n               'you\\'ve got an error and all the extraneous whitespace is ' +\n               'just gravy.  Have a nice day.';\n</code></pre>\n</blockquote>\n",
    "score": 987,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 565877,
      "name": "Devin G Rhode",
      "reputation": 11683
    }
  },
  {
    "soID": 8040293,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/8040293",
    "title": null,
    "body": "<p>While this is an old topic, I just wanted to point out that .call is slightly faster than .apply. I can't tell you exactly why.</p>\n\n<p>See jsPerf, <a href=\"http://jsperf.com/test-call-vs-apply/3\" rel=\"noreferrer\">http://jsperf.com/test-call-vs-apply/3</a></p>\n\n<hr>\n\n<p>[<code>UPDATE!</code>]</p>\n\n<p>Douglas Crockford mentions briefly the difference between the two, which may help explain the performance difference... <a href=\"http://youtu.be/ya4UHuXNygM?t=15m52s\" rel=\"noreferrer\">http://youtu.be/ya4UHuXNygM?t=15m52s</a></p>\n\n<p>Apply takes an array of arguments, while Call takes zero or more individual parameters! Ah hah!</p>\n\n<p><code>.apply(this, [...])</code></p>\n\n<p><code>.call(this, param1, param2, param3, param4...)</code></p>\n",
    "score": 85,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 566012,
      "name": "kmatheny",
      "reputation": 2638
    }
  },
  {
    "soID": 31934726,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/31934726",
    "title": null,
    "body": "<p>You can checkout this</p>\n\n<pre><code>var today = new Date();\ntoday = parseInt(today.getMonth()+1)+'/'+today.getDate()+'/'+today.getFullYear()+\"\\nTime : \"+today.getHours()+\":\"+today.getMinutes()+\":\"+today.getSeconds();\ndocument.write(today);\n</code></pre>\n\n<p>And see the documentation for Date() constructor.\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\" rel=\"nofollow\">link</a></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 571176,
      "name": "Akhil",
      "reputation": 186
    }
  },
  {
    "soID": 7113987,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/7113987",
    "title": null,
    "body": "<p>After looking through all the answers in here, hasOwnProperty isn't required for my own usage because my json object is clean; there's really no sense in adding any additional javascript processing. This is all I'm using:</p>\n\n<pre><code>for (var key in p) {\n    console.log(key + ' =&gt; ' + p[key]);\n    // key is key\n    // value is p[key]\n}\n</code></pre>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 572014,
      "name": "Francis Lewis",
      "reputation": 5185
    }
  },
  {
    "soID": 5040502,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/5040502",
    "title": null,
    "body": "<p>I can't post comment to THE answer, so I guess I'd bump the thread since it shows up high in Google.</p>\n\n<p>Since 1.8.5 it's possible to seal and freeze the object, so define the above as:</p>\n\n<pre><code>var DaysEnum = Object.freeze({\"monday\":1, \"tuesday\":2, \"wednesday\":3, ...})\n</code></pre>\n\n<p>or</p>\n\n<pre><code>var DaysEnum = {\"monday\":1, \"tuesday\":2, \"wednesday\":3, ...}\nObject.freeze(DaysEnum)\n</code></pre>\n\n<p>and voila! JS enums ;)</p>\n\n<p>source: <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/freeze\">https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/freeze</a></p>\n\n<p>IMHO quotes aren't needed but I kept them for consistency.</p>\n",
    "score": 365,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 572370,
      "name": "Artur Czajka",
      "reputation": 7243
    }
  },
  {
    "soID": 18001537,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/18001537",
    "title": null,
    "body": "<p>I needed a function which could format a price (given in cents) in a way preferred by the user, and the tricky part is that the format is specified by the user -- and I do not expect my users to understand printf-like syntax, or regexps, etc.\nMy solution is somewhat similar to that used in Basic, so the user just marks with # places for digits, for example:</p>\n\n<pre><code>simple_format(1234567,\"$ ###,###,###.##\")\n\"$ 12,345.67\"\nsimple_format(1234567,\"### ### ###,## pln\")\n\"12 345,67 pln\"\n</code></pre>\n\n<p>I believe this is quite easy to understand by user, and quite easy to implement:</p>\n\n<pre><code>function simple_format(integer,format){\n  var text = \"\";\n  for(var i=format.length;i--;){\n    if(format[i]=='#'){\n      text = (integer%10) + text;\n      integer=Math.floor(integer/10);\n      if(integer==0){\n        return format.substr(0,i).replace(/#(.*#)?/,\"\")+text;\n      }\n    }else{\n      text = format[i] + text;\n    }\n  }\n  return text;\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21510402,
    "parentID": 2669690,
    "url": "https://stackoverflow.com/q/21510402",
    "title": null,
    "body": "<p>It prevents disclosure of the response through JSON hijacking.</p>\n\n<p>In theory, the content of HTTP responses are protected by the Same Origin Policy: pages from one domain cannot get any informations from pages on an other domain (unless explicitly allowed).</p>\n\n<p>An attacker can request pages on other domains on your behalf, e.g. by using a <code>&lt;script src=...&gt;</code> or <code>&lt;img&gt;</code>tag, but it can't get any information about the result (headers, contents).</p>\n\n<p>Thus, if you visit an attacker's page, it couldn't read your email from gmail.com.</p>\n\n<p>Except that when using a script tag to request JSON content, the JSON is executed as Javascript in an attacker's controlled environment. If the attacker can replace the Array or Object constructor or some other method used during object construction, anything in the JSON would pass through the attacker's code, and be disclosed.  </p>\n\n<p>Note that this happens at the time the JSON is executed as Javascript, not at the time it's parsed.</p>\n\n<p>There are multiple counter measures:</p>\n\n<h1>Making sure the JSON never executes</h1>\n\n<p>By placing a <code>while(1);</code> statement before the JSON data, Google makes sure that the JSON data is never executed as Javascript.</p>\n\n<p>Only a legitimate page could actually get the whole content, strip the <code>while(1);</code>, and parse the remainder as JSON.</p>\n\n<p>Things like <code>for(;;);</code> have been seen at Facebook for instance, with the same results.</p>\n\n<h1>Making sure the JSON is not valid Javascript</h1>\n\n<p>Similarly, adding invalid tokens before the JSON, like <code>&amp;&amp;&amp;START&amp;&amp;&amp;</code>, makes sure that it is never executed.</p>\n\n<h1>Always return JSON with an Object on the outside</h1>\n\n<p>This is <a href=\"https://www.owasp.org/index.php/OWASP_AJAX_Security_Guidelines#Always_return_JSON_with_an_Object_on_the_outside\" rel=\"noreferrer\"><strong><code>OWASP</code></strong> recommended way</a> to protect from JSON hijacking, and is the less intrusive one.</p>\n\n<p>Similarly to the the previous counter-measures, it makes sure that the JSON is never executed as Javascript.</p>\n\n<p>A valid JSON object, when not enclosed by anything, is not valid in Javascript:</p>\n\n<pre><code>eval('{\"foo\":\"bar\"}')\n// SyntaxError: Unexpected token :\n</code></pre>\n\n<p>This is however valid JSON:</p>\n\n<pre><code>JSON.parse('{\"foo\":\"bar\"}')\n// Object {foo: \"bar\"}\n</code></pre>\n\n<p>So, making sure you always return an Object at the top level of the response makes sure that the JSON is not valid Javascript, while still being valid JSON.</p>\n\n<p>As noted by @hvd in the comments, the empty object <code>{}</code> is valid Javascript, and knowing the object is empty may itself be valuable information.</p>\n\n<h1>Comparison of above methods</h1>\n\n<p>The OWASP way is less intrusive, as it needs no client library changes, and transfers valid JSON. It is unsure whether past or future browser bugs could defeat this, however.  As noted by @oriadam, it is unclear whether data could be leaked in a parse error through an error handling or not (e.g. window.onerror).</p>\n\n<p>Google's way requires client library in order for it to support automatic de-serialization, and can be considered to be safer with regard to browser bugs.</p>\n\n<p>Both methods require server side changes in order to avoid developers from accidentally sending vulnerable JSON.</p>\n",
    "score": 335,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 576875,
      "name": "arnaud576875",
      "reputation": 59725
    }
  },
  {
    "soID": 4703227,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/4703227",
    "title": null,
    "body": "<p>Node.js version 0.3.4+ has built-in debugging support.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Manual: <a href=\"http://nodejs.org/api/debugger.html\" rel=\"noreferrer\">http://nodejs.org/api/debugger.html</a></p>\n",
    "score": 78,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 577178,
      "name": "JulianW",
      "reputation": 819
    }
  },
  {
    "soID": 17595560,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/17595560",
    "title": null,
    "body": "<p>If you're only dealing with EcmaScript 5 and above then you can use the built in <code>Array.isArray</code> function</p>\n\n<p>e.g.,</p>\n\n<pre><code>Array.isArray([])    // true\nArray.isArray(\"foo\") // false\nArray.isArray({})    // false\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 577926,
      "name": "JaredMcAteer",
      "reputation": 9734
    }
  },
  {
    "soID": 4715825,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/4715825",
    "title": null,
    "body": "<p>I had the same problem building a custom grid edit from (something like Excel) and compatibility with Excel. I had to support selecting multiple cells, copying and pasting. </p>\n\n<p>Solution: create a textarea where you will be inserting data for the user to copy (for me when the user is selecting cells), set focus on it (for example, when user press <kbd>Ctrl</kbd>) and select the whole text. </p>\n\n<p>So, when the user hit <kbd>Ctrl</kbd> + <kbd>C</kbd> he gets copied cells he selected. After testing just resizing the textarea to 1 pixel (I didn't test if it will be working on display:none). It works nicely on all browsers, and it is transparent to the user.</p>\n\n<p>Pasting - you could do same like this (differs on your target) - keep focus on textarea and catch paste events using onpaste (in my project I use textareas in cells to edit).</p>\n\n<p>I can't paste an example (commercial project), but you got the idea.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 578815,
      "name": "xiniu",
      "reputation": 59
    }
  },
  {
    "soID": 4726918,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/4726918",
    "title": null,
    "body": "<p>If I may alter the code a little. I found that if I run an all caps string through this function, nothing happens. So... here is my tid bit. Force the string to lower case first. </p>\n\n<pre><code>String.prototype.capitalize = function(){\n    return this.toLowerCase().replace( /(^|\\s)([a-z])/g , function(m, p1, p2) {\n        return p1 + p2.toUpperCase();\n    });\n}\n</code></pre>\n",
    "score": -4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 580292,
      "name": "Steve",
      "reputation": 43
    }
  },
  {
    "soID": 38817619,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/38817619",
    "title": null,
    "body": "<p>I have the requirement to asynchronously load an array of JavaScript files and at the final make a callback. Basically my best approach is the following:</p>\n\n<pre><code>// Load a JavaScript file from other JavaScript file\nfunction loadScript(urlPack, callback) {\n    var url = urlPack.shift();\n    var subCallback;\n\n    if (urlPack.length == 0) subCallback = callback;\n    else subCallback = function () {\n        console.log(\"Log script: \" + new Date().getTime());\n        loadScript(urlPack, callback);\n    }\n\n    // Adding the script tag to the head as suggested before\n    var head = document.getElementsByTagName('head')[0];\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = url;\n\n    // Then bind the event to the callback function.\n    // There are several events for cross browser compatibility.\n    script.onreadystatechange = subCallback;\n    script.onload = subCallback;\n\n    // Fire the loading\n    head.appendChild(script);\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>loadScript(\n[\n    \"js/DataTable/jquery.dataTables.js\",\n    \"js/DataTable/dataTables.bootstrap.js\",\n    \"js/DataTable/dataTables.buttons.min.js\",\n    \"js/DataTable/dataTables.colReorder.min.js\",\n    \"js/DataTable/dataTables.fixedHeader.min.js\",\n    \"js/DataTable/buttons.bootstrap.min.js\",\n    \"js/DataTable/buttons.colVis.min.js\",\n    \"js/DataTable/buttons.html5.min.js\"\n], function() { gpLoad(params); });\n</code></pre>\n\n<p>The second script will not load until the first is completely loaded, and so...</p>\n\n<p>Results:</p>\n\n<p><a href=\"https://i.stack.imgur.com/6Y3vU.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/6Y3vU.png\" alt=\"Result\"></a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 582614,
      "name": "MiBol",
      "reputation": 577
    }
  },
  {
    "soID": 28103202,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/28103202",
    "title": null,
    "body": "<p>For those who like <a href=\"http://nodejs.org\">Node.JS</a> and its <a href=\"http://nodejs.org/api/util.html#util_util_format_format\"><code>util.format</code></a> feature, I've just extracted it out into its vanilla JavaScript form (with only functions that util.format uses):</p>\n\n<pre><code>exports = {};\n\nfunction isString(arg) {\n    return typeof arg === 'string';\n}\nfunction isNull(arg) {\n    return arg === null;\n}\nfunction isObject(arg) {\n    return typeof arg === 'object' &amp;&amp; arg !== null;\n}\nfunction isBoolean(arg) {\n    return typeof arg === 'boolean';\n}\nfunction isUndefined(arg) {\n    return arg === void 0;\n}\nfunction stylizeNoColor(str, styleType) {\n    return str;\n}\nfunction stylizeWithColor(str, styleType) {\n    var style = inspect.styles[styleType];\n\n    if (style) {\n        return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n            '\\u001b[' + inspect.colors[style][3] + 'm';\n    } else {\n        return str;\n    }\n}\nfunction isFunction(arg) {\n    return typeof arg === 'function';\n}\nfunction isNumber(arg) {\n    return typeof arg === 'number';\n}\nfunction isSymbol(arg) {\n    return typeof arg === 'symbol';\n}\nfunction formatPrimitive(ctx, value) {\n    if (isUndefined(value))\n        return ctx.stylize('undefined', 'undefined');\n    if (isString(value)) {\n        var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                .replace(/'/g, \"\\\\'\")\n                .replace(/\\\\\"/g, '\"') + '\\'';\n        return ctx.stylize(simple, 'string');\n    }\n    if (isNumber(value)) {\n        // Format -0 as '-0'. Strict equality won't distinguish 0 from -0,\n        // so instead we use the fact that 1 / -0 &lt; 0 whereas 1 / 0 &gt; 0 .\n        if (value === 0 &amp;&amp; 1 / value &lt; 0)\n            return ctx.stylize('-0', 'number');\n        return ctx.stylize('' + value, 'number');\n    }\n    if (isBoolean(value))\n        return ctx.stylize('' + value, 'boolean');\n    // For some reason typeof null is \"object\", so special case here.\n    if (isNull(value))\n        return ctx.stylize('null', 'null');\n    // es6 symbol primitive\n    if (isSymbol(value))\n        return ctx.stylize(value.toString(), 'symbol');\n}\nfunction arrayToHash(array) {\n    var hash = {};\n\n    array.forEach(function (val, idx) {\n        hash[val] = true;\n    });\n\n    return hash;\n}\nfunction objectToString(o) {\n    return Object.prototype.toString.call(o);\n}\nfunction isDate(d) {\n    return isObject(d) &amp;&amp; objectToString(d) === '[object Date]';\n}\nfunction isError(e) {\n    return isObject(e) &amp;&amp;\n        (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nfunction isRegExp(re) {\n    return isObject(re) &amp;&amp; objectToString(re) === '[object RegExp]';\n}\nfunction formatError(value) {\n    return '[' + Error.prototype.toString.call(value) + ']';\n}\nfunction formatPrimitiveNoColor(ctx, value) {\n    var stylize = ctx.stylize;\n    ctx.stylize = stylizeNoColor;\n    var str = formatPrimitive(ctx, value);\n    ctx.stylize = stylize;\n    return str;\n}\nfunction isArray(ar) {\n    return Array.isArray(ar);\n}\nfunction hasOwnProperty(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n    var name, str, desc;\n    desc = Object.getOwnPropertyDescriptor(value, key) || {value: value[key]};\n    if (desc.get) {\n        if (desc.set) {\n            str = ctx.stylize('[Getter/Setter]', 'special');\n        } else {\n            str = ctx.stylize('[Getter]', 'special');\n        }\n    } else {\n        if (desc.set) {\n            str = ctx.stylize('[Setter]', 'special');\n        }\n    }\n    if (!hasOwnProperty(visibleKeys, key)) {\n        name = '[' + key + ']';\n    }\n    if (!str) {\n        if (ctx.seen.indexOf(desc.value) &lt; 0) {\n            if (isNull(recurseTimes)) {\n                str = formatValue(ctx, desc.value, null);\n            } else {\n                str = formatValue(ctx, desc.value, recurseTimes - 1);\n            }\n            if (str.indexOf('\\n') &gt; -1) {\n                if (array) {\n                    str = str.split('\\n').map(function (line) {\n                        return '  ' + line;\n                    }).join('\\n').substr(2);\n                } else {\n                    str = '\\n' + str.split('\\n').map(function (line) {\n                        return '   ' + line;\n                    }).join('\\n');\n                }\n            }\n        } else {\n            str = ctx.stylize('[Circular]', 'special');\n        }\n    }\n    if (isUndefined(name)) {\n        if (array &amp;&amp; key.match(/^\\d+$/)) {\n            return str;\n        }\n        name = JSON.stringify('' + key);\n        if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n            name = name.substr(1, name.length - 2);\n            name = ctx.stylize(name, 'name');\n        } else {\n            name = name.replace(/'/g, \"\\\\'\")\n                .replace(/\\\\\"/g, '\"')\n                .replace(/(^\"|\"$)/g, \"'\")\n                .replace(/\\\\\\\\/g, '\\\\');\n            name = ctx.stylize(name, 'string');\n        }\n    }\n\n    return name + ': ' + str;\n}\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n    var output = [];\n    for (var i = 0, l = value.length; i &lt; l; ++i) {\n        if (hasOwnProperty(value, String(i))) {\n            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n                String(i), true));\n        } else {\n            output.push('');\n        }\n    }\n    keys.forEach(function (key) {\n        if (!key.match(/^\\d+$/)) {\n            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n                key, true));\n        }\n    });\n    return output;\n}\nfunction reduceToSingleString(output, base, braces) {\n    var length = output.reduce(function (prev, cur) {\n        return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n    }, 0);\n\n    if (length &gt; 60) {\n        return braces[0] +\n            (base === '' ? '' : base + '\\n ') +\n            ' ' +\n            output.join(',\\n  ') +\n            ' ' +\n            braces[1];\n    }\n\n    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\nfunction formatValue(ctx, value, recurseTimes) {\n    // Provide a hook for user-specified inspect functions.\n    // Check that value is an object with an inspect function on it\n    if (ctx.customInspect &amp;&amp;\n        value &amp;&amp;\n        isFunction(value.inspect) &amp;&amp;\n            // Filter out the util module, it's inspect function is special\n        value.inspect !== exports.inspect &amp;&amp;\n            // Also filter out any prototype objects using the circular check.\n        !(value.constructor &amp;&amp; value.constructor.prototype === value)) {\n        var ret = value.inspect(recurseTimes, ctx);\n        if (!isString(ret)) {\n            ret = formatValue(ctx, ret, recurseTimes);\n        }\n        return ret;\n    }\n\n    // Primitive types cannot have properties\n    var primitive = formatPrimitive(ctx, value);\n    if (primitive) {\n        return primitive;\n    }\n\n    // Look up the keys of the object.\n    var keys = Object.keys(value);\n    var visibleKeys = arrayToHash(keys);\n\n    if (ctx.showHidden) {\n        keys = Object.getOwnPropertyNames(value);\n    }\n\n    // This could be a boxed primitive (new String(), etc.), check valueOf()\n    // NOTE: Avoid calling `valueOf` on `Date` instance because it will return\n    // a number which, when object has some additional user-stored `keys`,\n    // will be printed out.\n    var formatted;\n    var raw = value;\n    try {\n        // the .valueOf() call can fail for a multitude of reasons\n        if (!isDate(value))\n            raw = value.valueOf();\n    } catch (e) {\n        // ignore...\n    }\n\n    if (isString(raw)) {\n        // for boxed Strings, we have to remove the 0-n indexed entries,\n        // since they just noisey up the output and are redundant\n        keys = keys.filter(function (key) {\n            return !(key &gt;= 0 &amp;&amp; key &lt; raw.length);\n        });\n    }\n\n    // Some type of object without properties can be shortcutted.\n    if (keys.length === 0) {\n        if (isFunction(value)) {\n            var name = value.name ? ': ' + value.name : '';\n            return ctx.stylize('[Function' + name + ']', 'special');\n        }\n        if (isRegExp(value)) {\n            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n        }\n        if (isDate(value)) {\n            return ctx.stylize(Date.prototype.toString.call(value), 'date');\n        }\n        if (isError(value)) {\n            return formatError(value);\n        }\n        // now check the `raw` value to handle boxed primitives\n        if (isString(raw)) {\n            formatted = formatPrimitiveNoColor(ctx, raw);\n            return ctx.stylize('[String: ' + formatted + ']', 'string');\n        }\n        if (isNumber(raw)) {\n            formatted = formatPrimitiveNoColor(ctx, raw);\n            return ctx.stylize('[Number: ' + formatted + ']', 'number');\n        }\n        if (isBoolean(raw)) {\n            formatted = formatPrimitiveNoColor(ctx, raw);\n            return ctx.stylize('[Boolean: ' + formatted + ']', 'boolean');\n        }\n    }\n\n    var base = '', array = false, braces = ['{', '}'];\n\n    // Make Array say that they are Array\n    if (isArray(value)) {\n        array = true;\n        braces = ['[', ']'];\n    }\n\n    // Make functions say that they are functions\n    if (isFunction(value)) {\n        var n = value.name ? ': ' + value.name : '';\n        base = ' [Function' + n + ']';\n    }\n\n    // Make RegExps say that they are RegExps\n    if (isRegExp(value)) {\n        base = ' ' + RegExp.prototype.toString.call(value);\n    }\n\n    // Make dates with properties first say the date\n    if (isDate(value)) {\n        base = ' ' + Date.prototype.toUTCString.call(value);\n    }\n\n    // Make error with message first say the error\n    if (isError(value)) {\n        base = ' ' + formatError(value);\n    }\n\n    // Make boxed primitive Strings look like such\n    if (isString(raw)) {\n        formatted = formatPrimitiveNoColor(ctx, raw);\n        base = ' ' + '[String: ' + formatted + ']';\n    }\n\n    // Make boxed primitive Numbers look like such\n    if (isNumber(raw)) {\n        formatted = formatPrimitiveNoColor(ctx, raw);\n        base = ' ' + '[Number: ' + formatted + ']';\n    }\n\n    // Make boxed primitive Booleans look like such\n    if (isBoolean(raw)) {\n        formatted = formatPrimitiveNoColor(ctx, raw);\n        base = ' ' + '[Boolean: ' + formatted + ']';\n    }\n\n    if (keys.length === 0 &amp;&amp; (!array || value.length === 0)) {\n        return braces[0] + base + braces[1];\n    }\n\n    if (recurseTimes &lt; 0) {\n        if (isRegExp(value)) {\n            return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n        } else {\n            return ctx.stylize('[Object]', 'special');\n        }\n    }\n\n    ctx.seen.push(value);\n\n    var output;\n    if (array) {\n        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n    } else {\n        output = keys.map(function (key) {\n            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n        });\n    }\n\n    ctx.seen.pop();\n\n    return reduceToSingleString(output, base, braces);\n}\nfunction inspect(obj, opts) {\n    // default options\n    var ctx = {\n        seen: [],\n        stylize: stylizeNoColor\n    };\n    // legacy...\n    if (arguments.length &gt;= 3) ctx.depth = arguments[2];\n    if (arguments.length &gt;= 4) ctx.colors = arguments[3];\n    if (isBoolean(opts)) {\n        // legacy...\n        ctx.showHidden = opts;\n    } else if (opts) {\n        // got an \"options\" object\n        exports._extend(ctx, opts);\n    }\n    // set default options\n    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n    if (isUndefined(ctx.depth)) ctx.depth = 2;\n    if (isUndefined(ctx.colors)) ctx.colors = false;\n    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n    if (ctx.colors) ctx.stylize = stylizeWithColor;\n    return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n    'bold': [1, 22],\n    'italic': [3, 23],\n    'underline': [4, 24],\n    'inverse': [7, 27],\n    'white': [37, 39],\n    'grey': [90, 39],\n    'black': [30, 39],\n    'blue': [34, 39],\n    'cyan': [36, 39],\n    'green': [32, 39],\n    'magenta': [35, 39],\n    'red': [31, 39],\n    'yellow': [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n    'special': 'cyan',\n    'number': 'yellow',\n    'boolean': 'yellow',\n    'undefined': 'grey',\n    'null': 'bold',\n    'string': 'green',\n    'symbol': 'green',\n    'date': 'magenta',\n    // \"name\": intentionally not styling\n    'regexp': 'red'\n};\n\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function (f) {\n    if (!isString(f)) {\n        var objects = [];\n        for (var j = 0; j &lt; arguments.length; j++) {\n            objects.push(inspect(arguments[j]));\n        }\n        return objects.join(' ');\n    }\n\n    var i = 1;\n    var args = arguments;\n    var len = args.length;\n    var str = String(f).replace(formatRegExp, function (x) {\n        if (x === '%%') return '%';\n        if (i &gt;= len) return x;\n        switch (x) {\n            case '%s':\n                return String(args[i++]);\n            case '%d':\n                return Number(args[i++]);\n            case '%j':\n                try {\n                    return JSON.stringify(args[i++]);\n                } catch (_) {\n                    return '[Circular]';\n                }\n            default:\n                return x;\n        }\n    });\n    for (var x = args[i]; i &lt; len; x = args[++i]) {\n        if (isNull(x) || !isObject(x)) {\n            str += ' ' + x;\n        } else {\n            str += ' ' + inspect(x);\n        }\n    }\n    return str;\n};\n</code></pre>\n\n<p>Harvested from: <a href=\"https://github.com/joyent/node/blob/master/lib/util.js\">https://github.com/joyent/node/blob/master/lib/util.js</a></p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 26213408,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/26213408",
    "title": null,
    "body": "<p>I just wanted to share my approach, based on previously mentioned answers:</p>\n\n<p>Let's create a function that rounds any given numeric value to a given amount of decimal places:</p>\n\n<pre><code>function roundWDecimals(n, decimals) {\n    if (!isNaN(parseFloat(n)) &amp;&amp; isFinite(n)) {\n        if (typeof(decimals) == typeof(undefined)) {\n            decimals = 0;\n        }\n        var decimalPower = Math.pow(10, decimals);\n        return Math.round(parseFloat(n) * decimalPower) / decimalPower;\n    }\n    return NaN;\n}\n</code></pre>\n\n<p>And introduce a new \"round\" method for numbers prototype:</p>\n\n<pre><code>Object.defineProperty(Number.prototype, 'round', {\n    enumerable: false,\n    value: function(decimals) {\n        return roundWDecimals(this, decimals);\n    }\n});\n</code></pre>\n\n<p>And you can test it:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function roundWDecimals(n, decimals) {\r\n    if (!isNaN(parseFloat(n)) &amp;&amp; isFinite(n)) {\r\n        if (typeof(decimals) == typeof(undefined)) {\r\n            decimals = 0;\r\n        }\r\n        var decimalPower = Math.pow(10, decimals);\r\n        return Math.round(parseFloat(n) * decimalPower) / decimalPower;\r\n    }\r\n    return NaN;\r\n}\r\nObject.defineProperty(Number.prototype, 'round', {\r\n    enumerable: false,\r\n    value: function(decimals) {\r\n        return roundWDecimals(this, decimals);\r\n    }\r\n});\r\n\r\nvar roundables = [\r\n    {num: 10, decimals: 2},\r\n    {num: 1.7777777, decimals: 2},\r\n    {num: 9.1, decimals: 2},\r\n    {num: 55.55, decimals: 1},\r\n    {num: 55.549, decimals: 1},\r\n    {num: 55, decimals: 0},\r\n    {num: 54.9, decimals: 0},\r\n    {num: -55.55, decimals: 1},\r\n    {num: -55.551, decimals: 1},\r\n    {num: -55, decimals: 0},\r\n    {num: 1.005, decimals: 2},\r\n    {num: 1.005, decimals: 2},\r\n    {num: 19.8000000007, decimals: 2},\r\n  ],\r\n  table = '&lt;table border=\"1\"&gt;&lt;tr&gt;&lt;th&gt;Num&lt;/th&gt;&lt;th&gt;Decimals&lt;/th&gt;&lt;th&gt;Result&lt;/th&gt;&lt;/tr&gt;';\r\n$.each(roundables, function() {\r\n  table +=\r\n    '&lt;tr&gt;'+\r\n      '&lt;td&gt;'+this.num+'&lt;/td&gt;'+\r\n      '&lt;td&gt;'+this.decimals+'&lt;/td&gt;'+\r\n      '&lt;td&gt;'+this.num.round(this.decimals)+'&lt;/td&gt;'+\r\n    '&lt;/tr&gt;'\r\n  ;\r\n});\r\ntable += '&lt;/table&gt;';\r\n$('.results').append(table);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;div class=\"results\"&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 588973,
      "name": "Deele",
      "reputation": 3149
    }
  },
  {
    "soID": 4830088,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/4830088",
    "title": null,
    "body": "<p>This is a function I created a while back and I'm quite happy with. It is not case sensitive - which is handy. Also, if the requested QS doesn't exist, it just returns an empty string.</p>\n\n<p>I use a compressed version of this. I'm posting uncompressed for the novice types to better explain what's going on.</p>\n\n<p>I'm sure this could be optimized or done differently to work faster, but it's always worked great for what I need.</p>\n\n<p>Enjoy.</p>\n\n<pre><code>function getQSP(sName, sURL) {\n    var theItmToRtn = \"\";\n    var theSrchStrg = location.search;\n    if (sURL) theSrchStrg = sURL;\n    var sOrig = theSrchStrg;\n    theSrchStrg = theSrchStrg.toUpperCase();\n    sName = sName.toUpperCase();\n    theSrchStrg = theSrchStrg.replace(\"?\", \"&amp;\") theSrchStrg = theSrchStrg + \"&amp;\";\n    var theSrchToken = \"&amp;\" + sName + \"=\";\n    if (theSrchStrg.indexOf(theSrchToken) != -1) {\n        var theSrchTokenLth = theSrchToken.length;\n        var theSrchTokenLocStart = theSrchStrg.indexOf(theSrchToken) + theSrchTokenLth;\n        var theLocOfNextAndSign = theSrchStrg.indexOf(\"&amp;\", theSrchTokenLocStart);\n        theItmToRtn = unescape(sOrig.substring(theSrchTokenLocStart, theLocOfNextAndSign));\n    }\n    return unescape(theItmToRtn);\n}\n</code></pre>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9402569,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/9402569",
    "title": null,
    "body": "<p>Here's my own take on this. This first function decodes a URL string into an object of name/value pairs:</p>\n\n<pre><code>url_args_decode = function (url) {\n  var args_enc, el, i, nameval, ret;\n  ret = {};\n  // use the DOM to parse the URL via an 'a' element\n  el = document.createElement(\"a\");\n  el.href = url;\n  // strip off initial ? on search and split\n  args_enc = el.search.substring(1).split('&amp;');\n  for (i = 0; i &lt; args_enc.length; i++) {\n    // convert + into space, split on =, and then decode \n    args_enc[i].replace(/\\+/g, ' ');\n    nameval = args_enc[i].split('=', 2);\n    ret[decodeURIComponent(nameval[0])]=decodeURIComponent(nameval[1]);\n  }\n  return ret;\n};\n</code></pre>\n\n<p>And as an added bonus, if you change some of the args, you can use this second function to put the array of args back into the URL string:</p>\n\n<pre><code>url_args_replace = function (url, args) {\n  var args_enc, el, name;\n  // use the DOM to parse the URL via an 'a' element\n  el = document.createElement(\"a\");\n  el.href = url;\n  args_enc = [];\n  // encode args to go into url\n  for (name in args) {\n    if (args.hasOwnProperty(name)) {\n      name = encodeURIComponent(name);\n      args[name] = encodeURIComponent(args[name]);\n      args_enc.push(name + '=' + args[name]);\n    }\n  }\n  if (args_enc.length &gt; 0) {\n    el.search = '?' + args_enc.join('&amp;');\n  } else {\n    el.search = '';\n  }\n  return el.href;\n};\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10766780,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/10766780",
    "title": null,
    "body": "<p>You can clone an object and remove any reference from the previous one using a single line of code. Simply do:</p>\n\n<pre><code>var obj1 = { text: 'moo1' };\nvar obj2 = Object.create(obj1); // Creates a new clone without references\n\nobj2.text = 'moo2'; // Only updates obj2's text property\n\nconsole.log(obj1, obj2); // Outputs: obj1: {text:'moo1'}, obj2: {text:'moo2'}\n</code></pre>\n\n<p>For browsers / engines that do not currently support Object.create you can use this polyfill:</p>\n\n<pre><code>// Polyfill Object.create if it does not exist\nif (!Object.create) {\n    Object.create = function (o) {\n        var F = function () {};\n        F.prototype = o;\n        return new F();\n    };\n}\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 5404809,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/5404809",
    "title": null,
    "body": "<p>It simulates the behavior of the <code>Boolean()</code> casting function.\nThe first <code>NOT</code> returns a Boolean value no matter what operand it is given. The second <code>NOT</code> negates that <code>Boolean</code> value and so gives the <code>true</code> Boolean value of a variable. The end result is the same as using the <code>Boolean()</code> function on a value.</p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 602618,
      "name": "Prakash",
      "reputation": 5013
    }
  },
  {
    "soID": 5164215,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/5164215",
    "title": null,
    "body": "<p>With jQuery, you can <strong>shallow copy</strong> with <a href=\"http://api.jquery.com/jQuery.extend\">extend</a>:</p>\n\n<pre><code>var copiedObject = jQuery.extend({}, originalObject)\n</code></pre>\n\n<p>subsequent changes to the copiedObject will not affect the originalObject, and vice versa.</p>\n\n<p>Or to make a <strong>deep copy</strong>:</p>\n\n<pre><code>var copiedObject = jQuery.extend(true, {}, originalObject)\n</code></pre>\n",
    "score": 662,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44289206,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/44289206",
    "title": null,
    "body": "<p>A Generic Answer for all browsers and precisions:</p>\n\n<pre><code>function round(num, places) {\n      if(!places){\n       return Math.round(num);\n      }\n\n      var val = Math.pow(10, places);\n      return Math.round(num * val) / val;\n}\n\nround(num, 2);\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 614695,
      "name": "RBZ",
      "reputation": 708
    }
  },
  {
    "soID": 20342485,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/20342485",
    "title": null,
    "body": "<p>In Crockford's <a href=\"http://shop.oreilly.com/product/9780596517748.do\">JavaScript The Good Parts</a>, there is a function to check if the given argument is an array:</p>\n\n<pre><code>var is_array = function (value) {\n    return value &amp;&amp;\n        typeof value === 'object' &amp;&amp;\n        typeof value.length === 'number' &amp;&amp;\n        typeof value.splice === 'function' &amp;&amp;\n        !(value.propertyIsEnumerable('length'));\n};\n</code></pre>\n\n<p>He explains:</p>\n\n<blockquote>\n  <p>First, we ask if the value is truthy. We do this to reject null and other falsy values. Second, we ask if the typeof value is 'object'. This will be true for objects, arrays, and (weirdly) null. Third, we ask if the value has a length property that is a number. This will always be true for arrays, but usually not for objects. Fourth, we ask if the value contains a splice method. This again will be true for all arrays. Finally, we ask if the length property is enumerable (will length be produced by a for in loop?). That will be false for all arrays. This is the most reliable test for arrayness that I have found. It is unfortunate that it is so complicated.</p>\n</blockquote>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 618004,
      "name": "Yunzhou",
      "reputation": 420
    }
  },
  {
    "soID": 14994580,
    "parentID": 14994391,
    "url": "https://stackoverflow.com/q/14994580",
    "title": null,
    "body": "<blockquote>\n  <p>Can you describe the paradigm shift that is necessary?</p>\n</blockquote>\n\n<p><strong>Imperative vs Declarative</strong></p>\n\n<p>With <strong>jQuery</strong> you tell the DOM what needs to happen, step by step. With <strong><a href=\"http://en.wikipedia.org/wiki/AngularJS\" rel=\"nofollow noreferrer\">AngularJS</a></strong> you describe what results you want but not how to do it. More on this <a href=\"https://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-programming\">here</a>. Also, check out Mark Rajcok's answer.</p>\n\n<blockquote>\n  <p>How do I architect and design client-side web apps differently? </p>\n</blockquote>\n\n<p>AngularJS is an entire client-side framework that uses the <a href=\"http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\" rel=\"nofollow noreferrer\">MVC</a> pattern (check out their <a href=\"http://docs.angularjs.org/guide/concepts\" rel=\"nofollow noreferrer\">graphical representation</a>). It greatly focuses on separation of concerns.</p>\n\n<blockquote>\n  <p>What is the biggest difference? What should I stop doing/using; what should I start doing/using instead?</p>\n</blockquote>\n\n<p><strong>jQuery</strong> is a library </p>\n\n<p><strong>AngularJS</strong> is a beautiful client-side framework, highly testable, that combines tons of cool stuff such as MVC, <a href=\"http://en.wikipedia.org/wiki/Dependency_injection\" rel=\"nofollow noreferrer\">dependency injection</a>, data binding and much more. </p>\n\n<p>It focuses on <a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\" rel=\"nofollow noreferrer\">separation of concerns</a> and testing (<a href=\"http://en.wikipedia.org/wiki/Unit_testing\" rel=\"nofollow noreferrer\">unit testing</a> and end-to-end testing), which facilitates test-driven development.</p>\n\n<p>The best way to start is going through <a href=\"http://docs.angularjs.org/tutorial/\" rel=\"nofollow noreferrer\">their awesome tutorial</a>. You can go through the steps in a couple of hours; however, in case you want to master the concepts behind the scenes, they include a myriad of reference for further reading.</p>\n\n<blockquote>\n  <p>Are there any server-side considerations/restrictions?</p>\n</blockquote>\n\n<p>You may use it on existing applications where you are already using pure jQuery. However, if you want to fully take advantage of the AngularJS features you may consider coding the server side using a <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services\" rel=\"nofollow noreferrer\">RESTful</a> approach.</p>\n\n<p>Doing so will allow you to leverage their <a href=\"http://docs.angularjs.org/api/ngResource.$resource\" rel=\"nofollow noreferrer\">resource factory</a>, which creates an abstraction of your server side RESTful <a href=\"http://en.wikipedia.org/wiki/Application_programming_interface\" rel=\"nofollow noreferrer\">API</a> and makes server-side calls (get, save, delete, etc.) incredibly easy.</p>\n",
    "score": 153,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 620448,
      "name": "Ulises",
      "reputation": 10131
    }
  },
  {
    "soID": 29771692,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/29771692",
    "title": null,
    "body": "<p>Only JavaScript code without dependencies:</p>\n\n<pre><code>var p = {\"p1\": \"value1\", \"p2\": \"value2\", \"p3\": \"value3\"};\nkeys = Object.keys(p);   // [\"p1\", \"p2\", \"p3\"]\n\nfor(i = 0; i &lt; keys.length; i++){\n  console.log(keys[i] + \"=\" + p[keys[i]]);   // p1=value1, p2=value2, p3=value3\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 625348,
      "name": "mohamed-ibrahim",
      "reputation": 5426
    }
  },
  {
    "soID": 11744120,
    "parentID": 3437786,
    "url": "https://stackoverflow.com/q/11744120",
    "title": null,
    "body": "<p>This is everything you need to know: </p>\n\n<blockquote>\n  <p><a href=\"http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/\" rel=\"noreferrer\">http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/</a></p>\n</blockquote>\n\n<p>but in short:</p>\n\n<pre><code>var w = window,\n    d = document,\n    e = d.documentElement,\n    g = d.getElementsByTagName('body')[0],\n    x = w.innerWidth || e.clientWidth || g.clientWidth,\n    y = w.innerHeight|| e.clientHeight|| g.clientHeight;\nalert(x + ' × ' + y);\n</code></pre>\n\n<p><strong><a href=\"http://fiddle.jshell.net/L6uPV/show/4\" rel=\"noreferrer\">Fiddle</a></strong></p>\n",
    "score": 699,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 628700,
      "name": "sidonaldson",
      "reputation": 10426
    }
  },
  {
    "soID": 26633883,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/26633883",
    "title": null,
    "body": "<p>There are several ways of checking if an variable is an array or not. The best solution is the one you have chosen.</p>\n\n<pre><code>variable.constructor === Array\n</code></pre>\n\n<p>This is the fastest method on Chrome, and most likely all other browsers. All arrays are objects, so checking the constructor property is a fast process for JavaScript engines.</p>\n\n<p>If you are having issues with finding out if an objects property is an array, you must first check if the property is there.</p>\n\n<pre><code>variable.prop &amp;&amp; variable.prop.constructor === Array\n</code></pre>\n\n<p>Some other ways are:</p>\n\n<pre><code>variable instanceof Array\n</code></pre>\n\n<p>This method runs about a 1/3rd the speed as the first example. Still pretty solid, looks cleaner, if you're all about pretty code and not so much on performance. <strong>Update: <code>instanceof</code> This now goes 2/3rd the speed! However, for those wanting it to be a one stop shop, it does not work with numbers.</strong></p>\n\n<pre><code>Array.isArray(variable)\n</code></pre>\n\n<p>This last one is, in my opinion the ugliest, and it is one the slowest. Running about 1/5th the speed as the first example. Array.prototype, is actually an array. you can read more about it here <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray</a></p>\n\n<p><strong>So yet another update</strong></p>\n\n<pre><code>Object.prototype.toString.call(variable) === '[object Array]';\n</code></pre>\n\n<p>This guy is the slowest for trying to check for an Array. However, this is a one stop shop for any type you're looking for. However, since you're looking for an array, just use the fastest method above.</p>\n\n<p>Also, I ran some test: <a href=\"http://jsperf.com/instanceof-array-vs-array-isarray/33\">http://jsperf.com/instanceof-array-vs-array-isarray/33</a> So have some fun and check it out.</p>\n\n<p>Note: @EscapeNetscape has created another test as jsperf.com is down. <a href=\"http://jsben.ch/#/QgYAV\">http://jsben.ch/#/QgYAV</a> I wanted to make sure the original link stay for whenever jsperf comes back online.</p>\n",
    "score": 960,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 630496,
      "name": "JemiloII",
      "reputation": 11508
    }
  },
  {
    "soID": 8812157,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/8812157",
    "title": null,
    "body": "<p>I like <a href=\"https://stackoverflow.com/a/3867610/632117\">Ryan Phelan's solution</a>. But I don't see any point of extending jQuery for that? There is no usage of jQuery functionality.</p>\n\n<p>On other hand I like the built-in function in Google Chrome: window.location.getParameter.</p>\n\n<p>So why not to use this? Okay, other browsers don't have. So let's create this function if it does not exist:</p>\n\n<pre><code>if (!window.location.getParameter ) {\n  window.location.getParameter = function(key) {\n    function parseParams() {\n        var params = {},\n            e,\n            a = /\\+/g,  // Regex for replacing addition symbol with a space\n            r = /([^&amp;=]+)=?([^&amp;]*)/g,\n            d = function (s) { return decodeURIComponent(s.replace(a, \" \")); },\n            q = window.location.search.substring(1);\n\n        while (e = r.exec(q))\n            params[d(e[1])] = d(e[2]);\n\n        return params;\n    }\n\n    if (!this.queryStringParams)\n        this.queryStringParams = parseParams(); \n\n    return this.queryStringParams[key];\n  };\n}\n</code></pre>\n\n<p>This function is more or less from Ryan Phelan, but it is wrapped differently: clear name and no dependencies of other javascript libraries. <a href=\"http://sharepointkunskap.wordpress.com/2012/01/11/get-url-parameters-with-javascript/\" rel=\"nofollow noreferrer\">More about this function on my blog</a>.</p>\n",
    "score": 54,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44103318,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/44103318",
    "title": null,
    "body": "<p>The difference is in the <a href=\"https://en.wikipedia.org/wiki/Variable_(computer_science)#Scope_and_extent\" rel=\"nofollow noreferrer\">scope</a> of the variables declared with each.</p>\n\n<p>In practice, there are a number of useful consequences of the difference in scope:</p>\n\n<ol>\n<li><code>let</code> variables are only visible in their <em>nearest enclosing</em> block (<code>{ ... }</code>).</li>\n<li><code>let</code> variables are only usable in lines of code that occur <em>after</em> the variable is declared (even though <a href=\"/questions/33198849\">they are hoisted</a>!).</li>\n<li><code>let</code> variables may not be redeclared by a subsequent <code>var</code> or <code>let</code>.</li>\n<li>Global <code>let</code> variables are not added to the global <code>window</code> object.</li>\n<li><code>let</code> variables are <em>easy to use</em> with closures (they do not cause <a href=\"https://en.wikipedia.org/wiki/Race_condition#Software\" rel=\"nofollow noreferrer\">race conditions</a>).</li>\n</ol>\n\n<p>The restrictions imposed by <code>let</code> reduce the visibility of the variables and increase the likelihood that unexpected name collisions will be found early.  This makes it easier to track and reason about variables, including their <a href=\"https://en.wikipedia.org/wiki/Unreachable_memory\" rel=\"nofollow noreferrer\">reachability</a>(helping with reclaiming unused memory).</p>\n\n<p>Consequently, <code>let</code> variables are less likely to cause problems when used in large programs or when independently-developed frameworks are combined in new and unexpected ways.</p>\n\n<p><code>var</code> may still be useful if you are sure you want the single-binding effect when using a closure in a loop (#5) or for declaring externally-visible global variables in your code (#4).  Use of <code>var</code> for exports may be supplanted if <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\" rel=\"nofollow noreferrer\"><code>export</code></a> migrates out of transpiler space and into the core language.</p>\n\n<h1>Examples</h1>\n\n<p><strong>1. No use outside nearest enclosing block:</strong>\nThis block of code will throw a reference error because the second use of <code>x</code> occurs outside of the block where it is declared with <code>let</code>:\n</p>\n\n<pre><code>{\n    let x = 1;\n}\nconsole.log(`x is ${x}`);  // ReferenceError during parsing: \"x is not defined\".\n</code></pre>\n\n<p>In contrast, the same example with <code>var</code> works.</p>\n\n<p><strong>2. No use before declaration:</strong><br>\nThis block of code will throw a <code>ReferenceError</code> before the code can be run because <code>x</code> is used before it is declared: </p>\n\n<pre><code>{\n    x = x + 1;  // ReferenceError during parsing: \"x is not defined\".\n    let x;\n    console.log(`x is ${x}`);  // Never runs.\n}\n</code></pre>\n\n<p>In contrast, the same example with <code>var</code> parses and runs without throwing any exceptions.</p>\n\n<p><strong>3. No redeclaration:</strong>\nThe following code demonstrates that a variable declared with <code>let</code> may not be redeclared later: </p>\n\n<pre><code>let x = 1;\nlet x = 2;  // SyntaxError: Identifier 'x' has already been declared\n</code></pre>\n\n<p><strong>4. Globals not attached to <code>window</code>:</strong>\n</p>\n\n<pre><code>var button = \"I cause accidents because my name is too common.\";\nlet link = \"Though my name is common, I am harder to access from other JS files.\";\nconsole.log(link);  // OK\nconsole.log(window.link);  // undefined (GOOD!)\nconsole.log(window.button);  // OK\n</code></pre>\n\n<p><strong>5. Easy use with closures:</strong>\nVariables declared with <code>var</code> do not work well with closures inside loops.  Here is a simple loop that outputs the sequence of values that the variable <code>i</code> has at different points in time: </p>\n\n<pre><code>for (let i = 0; i &lt; 5; i++) {\n    console.log(`i is ${i}`), 125/*ms*/);\n}\n</code></pre>\n\n<p>Specifically, this outputs:</p>\n\n<pre><code>i is 0\ni is 1\ni is 2\ni is 3\ni is 4\n</code></pre>\n\n<p>In JavaScript we often use variables at a significantly later time than when they are created.  When we demonstrate this by delaying the output with a closure passed to <code>setTimeout</code>: </p>\n\n<pre><code>for (let i = 0; i &lt; 5; i++) {\n    setTimeout(_ =&gt; console.log(`i is ${i}`), 125/*ms*/);\n}\n</code></pre>\n\n<p>... the output remains unchanged as long as we stick with <code>let</code>.  In contrast, if we had used <code>var i</code> instead: </p>\n\n<pre><code>for (var i = 0; i &lt; 5; i++) {\n    setTimeout(_ =&gt; console.log(`i is ${i}`), 125/*ms*/);\n}\n</code></pre>\n\n<p>... the loop unexpectedly outputs \"i is 5\" five times:</p>\n\n<pre><code>i is 5\ni is 5\ni is 5\ni is 5\ni is 5\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 643826,
      "name": "mormegil",
      "reputation": 820
    }
  },
  {
    "soID": 7202301,
    "parentID": 7202157,
    "url": "https://stackoverflow.com/q/7202301",
    "title": null,
    "body": "<pre><code>++[[]][+[]] =&gt; 1 // [+[]] = [0], ++0 = 1\n[+[]] =&gt; [0]\n</code></pre>\n\n<p>Then we have a string concatenation</p>\n\n<pre><code>1+[0].toString() = 10\n</code></pre>\n",
    "score": 86,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 645186,
      "name": "Shef",
      "reputation": 32613
    }
  },
  {
    "soID": 25016093,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/25016093",
    "title": null,
    "body": "<p>We found a quick-and-dirty cross browser implementation of ours that may do the trick for most simple cases with a minimal implementation:</p>\n\n<pre><code>window.onReady = function onReady(fn){\n    document.body ? fn() : setTimeout(function(){ onReady(fn);},50);\n};\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 646056,
      "name": "malko",
      "reputation": 1760
    }
  },
  {
    "soID": 30416886,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/30416886",
    "title": null,
    "body": "<p>One way to achieve such a rounding <em>only if necessary</em> is to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\" rel=\"nofollow noreferrer\">Number.prototype.toLocaleString()</a>:</p>\n\n<pre><code>myNumber.toLocaleString('en', {maximumFractionDigits:2, useGrouping:false})\n</code></pre>\n\n<p>This will provide exactly the output you expect, but as strings. You can still convert those back to numbers if that's not the data type you expect.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 650104,
      "name": "Javarome",
      "reputation": 4216
    }
  },
  {
    "soID": 5256662,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/5256662",
    "title": null,
    "body": "<p>If you go with one of the regex answers, remember they will only work with ASCII characters. All your unicode letters will not be uppercased. The <a href=\"http://xregexp.com/plugins/\">XRegExp</a> library and its unicode plugins solve this problem if you want to stick with regexps. So something like this would work:</p>\n\n<pre><code>String.prototype.capitalize = function () {\n    return this.replace(XRegExp(\"^\\\\p{L}\"), function ($0) { return $0.toUpperCase(); })\n}\n</code></pre>\n\n<p>Considering that it still doesn't cover all possibilities (combined characters, see <a href=\"http://www.regular-expressions.info/unicode.html\">http://www.regular-expressions.info/unicode.html</a>) it seems easier to just use the .charAt(0).toUpperCase() approach.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 653021,
      "name": "Jakub Januszkiewicz",
      "reputation": 3394
    }
  },
  {
    "soID": 38934837,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/38934837",
    "title": null,
    "body": "<p>In my case I was using JEE7 JAX-RS application and following tricks worked perfectly for me:</p>\n\n<pre><code>@GET\n    @Path(\"{id}\")\n    public Response getEventData(@PathParam(\"id\") String id) throws FileNotFoundException {\n        InputStream inputStream = getClass().getClassLoader().getResourceAsStream(\"/eventdata/\" + id + \".json\");\n        JsonReader jsonReader = Json.createReader(inputStream);\n        return Response.ok(jsonReader.readObject()).header(\"Access-Control-Allow-Origin\", \"*\").build();\n    }\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 659949,
      "name": "Bhuwan Gautam",
      "reputation": 619
    }
  },
  {
    "soID": 26814160,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/26814160",
    "title": null,
    "body": "<p>ES6 contains <code>String.prototype.includes</code>.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\" rel=\"noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes</a></p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16028032,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/16028032",
    "title": null,
    "body": "<p>Consult <a href=\"http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#safe-passing-of-structured-data\" rel=\"nofollow\">http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#safe-passing-of-structured-data</a> for the W3C's \"Safe passing of structured data\" algorithm, intended to be implemented by browsers for passing data to eg web workers. However, it has some limitations, in that it does not handle functions. See <a href=\"https://developer.mozilla.org/en-US/docs/DOM/The_structured_clone_algorithm\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/DOM/The_structured_clone_algorithm</a> for more information, including an alternative algorithm in JS which gets you part of the way there.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44059078,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/44059078",
    "title": null,
    "body": "<p>I'm using jQuery 1.11.1 and I had troubles with setting and reading checkbox value as well.</p>\n\n<p>I finally solved it by these two functions:</p>\n\n<pre><code>function setCheckboxValue(checkBoxId, checked) {\n    if (checkBoxId &amp;&amp; (checked === true || checked === false)) {\n        var elem = $('#' + checkBoxId);\n        if (checked === true) {\n            elem.attr('checked', 'checked');\n        } else {\n            elem.removeAttr('checked');\n        }\n    }\n}\n\nfunction isChecked(checkBoxId) {\n    return $('#' + checkBoxId).attr('checked') != null;\n}\n</code></pre>\n\n<p>It might looks a little bit dirty but it solves all the wired issue I had among different types of browsers.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19084952,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/19084952",
    "title": null,
    "body": "<p>Random whole number between lowest and highest:</p>\n\n<pre><code>function randomRange(l,h){\n  var range = (h-l);\n  var random = Math.floor(Math.random()*range);\n  if (random === 0){random+=1;}\n  return l+random;\n}\n</code></pre>\n\n<p>Not the most elegant solution.. but something quick.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 667655,
      "name": "brooklynsweb",
      "reputation": 479
    }
  },
  {
    "soID": 23606512,
    "parentID": 14994391,
    "url": "https://stackoverflow.com/q/23606512",
    "title": null,
    "body": "<h1>AngularJS vs. jQuery</h1>\n\n<p>AngularJS and jQuery adopt very different ideologies. If you're coming from jQuery you may find some of the differences surprising. Angular may make you angry.</p>\n\n<p>This is normal, you should push through. Angular is worth it.</p>\n\n<h2>The big difference (TLDR)</h2>\n\n<p>jQuery gives you a toolkit for selecting arbitrary bits of the DOM and making ad-hoc changes to them. You can do pretty much anything you like piece by piece.</p>\n\n<p>AngularJS instead gives you a <strong>compiler</strong>.</p>\n\n<p>What this means is that AngularJS reads your entire DOM from top to bottom and treats it as code, literally as instructions to the compiler. As it traverses the DOM, It looks for specific <strong>directives</strong> (compiler directives) that tell the AngularJS compiler how to behave and what to do. Directives are little objects full of JavaScript which can match against attributes, tags, classes or even comments. </p>\n\n<p>When the Angular compiler determines that a piece of the DOM matches a particular directive, it calls the directive function, passing it the DOM element, any attributes, the current $scope (which is a local variable store), and some other useful bits. These attributes may contain expressions which can be interpreted by the Directive, and which tell it how to render, and when it should redraw itself.</p>\n\n<p>Directives can then in turn pull in additional Angular components such as controllers, services, etc. What comes out the bottom of the compiler is a fully formed web application, wired up and ready to go.</p>\n\n<p><strong>This means that Angular is Template Driven</strong>. Your template drives the JavaScript, not the other way around. This is a radical reversal of roles, and the complete opposite of the unobtrusive JavaScript we have been writing for the last 10 years or so. This can take some getting used to.</p>\n\n<p>If this sounds like it might be over-prescriptive and limiting, nothing could be farther from the truth. Because AngularJS treats your HTML as code, you get <strong>HTML level granularity in your web application</strong>. Everything is possible, and most things are surprisingly easy once you make a few conceptual leaps.</p>\n\n<p>Let's get down to the nitty gritty.</p>\n\n<h2>First up, Angular doesn't replace jQuery</h2>\n\n<p>Angular and jQuery do different things. AngularJS gives you a set of tools to produce web applications. jQuery mainly gives you tools for modifying the DOM. If jQuery is present on your page, AngularJS will use it automatically. If it isn't, AngularJS ships with jQuery Lite, which is a cut down, but still perfectly usable version of jQuery.</p>\n\n<p>Misko likes jQuery and doesn't object to you using it. However you will find as you advance that you can get a pretty much all of your work done using a combination of scope, templates and directives, and you should prefer this workflow where possible because your code will be more discrete, more configurable, and more Angular.</p>\n\n<p>If you do use jQuery, you shouldn't be sprinkling it all over the place. The correct place for DOM manipulation in AngularJS is in a directive. More on these later.</p>\n\n<h2>Unobtrusive JavaScript with Selectors vs. Declarative Templates</h2>\n\n<p>jQuery is typically applied unobtrusively. Your JavaScript code is linked in the header (or the footer), and this is the only place it is mentioned. We use selectors to pick out bits of the page and write plugins to modify those parts.</p>\n\n<p>The JavaScript is in control. The HTML has a completely independent existence. Your HTML remains semantic even without JavaScript. Onclick attributes are very bad practice.</p>\n\n<p>One of the first things your will notice about AngularJS is that <strong>custom attributes are everywhere</strong>. Your HTML will be littered with ng attributes, which are essentially onClick attributes on steroids. These are directives (compiler directives), and are one of the main ways in which the template is hooked to the model.</p>\n\n<p>When you first see this you might be tempted to write AngularJS off as old school intrusive JavaScript (like I did at first). In fact, AngularJS does not play by those rules. In AngularJS, your HTML5 is a template. It is compiled by AngularJS to produce your web page.</p>\n\n<p>This is the first big difference. To jQuery, your web page is a DOM to be manipulated. To AngularJS, your HTML is code to be compiled. AngularJS reads in your whole web page and literally compiles it into a new web page using its built in compiler.</p>\n\n<p>Your template should be declarative; its meaning should be clear simply by reading it. We use custom attributes with meaningful names. We make up new HTML elements, again with meaningful names. A designer with minimal HTML knowledge and no coding skill can read your AngularJS template and understand what it is doing. He or she can make modifications. <em>This is the Angular way.</em></p>\n\n<h2>The template is in the driving seat.</h2>\n\n<p>One of the first questions I asked myself when starting AngularJS and running through the tutorials is <strong>\"Where is my code?\"</strong>. I've written no JavaScript, and yet I have all this behaviour. The answer is obvious. Because AngularJS compiles the DOM, AngularJS is treating your HTML as code. For many simple cases it's often sufficient to just write a template and let AngularJS compile it into an application for you.</p>\n\n<p>Your template drives your application. It's treated as a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\" rel=\"nofollow noreferrer\">DSL</a>. You write AngularJS components, and AngularJS will take care of pulling them in and making them available at the right time based on the structure of your template. This is very different to a standard <a href=\"http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\" rel=\"nofollow noreferrer\">MVC</a> pattern, where the template is just for output.</p>\n\n<p>It's more similar to <a href=\"http://en.wikipedia.org/wiki/XSLT\" rel=\"nofollow noreferrer\">XSLT</a> than <a href=\"http://en.wikipedia.org/wiki/Ruby_on_Rails\" rel=\"nofollow noreferrer\">Ruby on Rails</a> for example.</p>\n\n<p>This is a radical inversion of control that takes some getting used to.</p>\n\n<p><strong>Stop trying to drive your application from your JavaScript. Let the template drive the application, and let AngularJS take care of wiring the components together. This also is the Angular way.</strong></p>\n\n<h2>Semantic HTML vs. Semantic Models</h2>\n\n<p>With jQuery your HTML page should contain semantic meaningful content. If the JavaScript is turned off (by a user or search engine) your content remains accessible.</p>\n\n<p>Because AngularJS treats your HTML page as a template. The template is not supposed to be semantic as your content is typically stored in your model which ultimately comes from your API. AngularJS compiles your DOM with the model to produce a semantic web page.</p>\n\n<p><strong>Your HTML source is no longer semantic, instead, your API and compiled DOM are semantic.</strong></p>\n\n<p>In AngularJS, meaning lives in the model, the HTML is just a template, for display only.</p>\n\n<p>At this point you likely have all sorts of questions concerning <a href=\"http://en.wikipedia.org/wiki/Search_engine_optimization\" rel=\"nofollow noreferrer\">SEO</a> and accessibility, and rightly so. There are open issues here. Most screen readers will now parse JavaScript. Search engines can also index <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\" rel=\"nofollow noreferrer\">AJAXed</a> content. Nevertheless, you will want to make sure you are using pushstate URLs and you have a decent sitemap. See here for a discussion of the issue: <a href=\"https://stackoverflow.com/a/23245379/687677\">https://stackoverflow.com/a/23245379/687677</a></p>\n\n<h2>Separation of concerns (SOC) vs. MVC</h2>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Separation_of_concerns\" rel=\"nofollow noreferrer\">Separation of concerns</a> (SOC) is a pattern that grew up over many years of web development for a variety of reasons including SEO, accessibility and browser incompatibility. It looks like this:</p>\n\n<ol>\n<li>HTML - Semantic meaning. The HTML should stand alone.</li>\n<li>CSS - Styling, without the CSS the page is still readable.</li>\n<li>JavaScript - Behaviour, without the script the content remains.</li>\n</ol>\n\n<p>Again, AngularJS does not play by their rules. In a stroke, <strong>AngularJS does away with a decade of received wisdom</strong> and instead implements an MVC pattern in which the template is no longer semantic, not even a little bit.</p>\n\n<p>It looks like this:</p>\n\n<ol>\n<li>Model - your models contains your semantic data. Models are usually <a href=\"http://en.wikipedia.org/wiki/JSON\" rel=\"nofollow noreferrer\">JSON</a> objects. Models exist as attributes of an object called $scope. You can also store handy utility functions on $scope which your templates can then access.</li>\n<li>View - Your views are written in HTML. The view is usually not semantic because your data lives in the model.</li>\n<li>Controller - Your controller is a JavaScript function which hooks the view to the model. Its function is to initialise $scope. Depending on your application, you may or may not need to create a controller. You can have many controllers on a page.</li>\n</ol>\n\n<p>MVC and SOC are not on opposite ends of the same scale, they are on completely different axes. SOC makes no sense in an AngularJS context. You have to forget it and move on.</p>\n\n<p>If, like me, you lived through the browser wars, you might find this idea quite offensive. Get over it, it'll be worth it, I promise.</p>\n\n<h2>Plugins vs. Directives</h2>\n\n<p><strong>Plugins extend jQuery. AngularJS Directives extend the capabilities of your browser.</strong></p>\n\n<p>In jQuery we define plugins by adding functions to the jQuery.prototype. We then hook these into the DOM by selecting elements and calling the plugin on the result. The idea is to extend the capabilities of jQuery.</p>\n\n<p>For example, if you want a carousel on your page, you might define an unordered list of figures, perhaps wrapped in a nav element. You might then write some jQuery to select the list on the page and restyle it as a gallery with timeouts to do the sliding animation.</p>\n\n<p>In AngularJS, we define directives. A directive is a function which returns a JSON object. This object tells AngularJS what DOM elements to look for, and what changes to make to them. Directives are hooked in to the template using either attributes or elements, which you invent. The idea is to extend the capabilities of HTML with new attributes and elements.</p>\n\n<p><em>The AngularJS way is to extend the capabilities of native looking HTML.</em> You should write HTML that looks like HTML, extended with custom attributes and elements.</p>\n\n<p>If you want a carousel, just use a <code>&lt;carousel /&gt;</code> element, then define a directive to pull in a template, and make that sucker work.</p>\n\n<h2>Lots of small directives vs. big plugins with configuration switches</h2>\n\n<p>The tendency with jQuery is to write great big plugins like lightbox which we then configure by passing in numerous values and options.</p>\n\n<p>This is a mistake in AngularJS.</p>\n\n<p>Take the example of a dropdown. When writing a dropdown plugin you might be tempted to code in click handlers, perhaps a function to add in a chevron which is either up or down, perhaps change the class of the unfolded element, show hide the menu, all helpful stuff.</p>\n\n<p>Until you want to make a small change.</p>\n\n<p>Say you have a menu that you want to unfold on hover. Well now we have a problem. Our plugin has wired in our click handler for us, we're going to need to add a configuration option to make it behave differently in this specific case.</p>\n\n<p>In AngularJS we write smaller directives. Our dropdown directive would be ridiculously small. It might maintain the folded state, and provide methods to fold(), unfold() or toggle(). These methods would simply update $scope.menu.visible which is a boolean holding the state.</p>\n\n<p>Now <strong>in our template</strong> we can wire this up:</p>\n\n<pre><code>&lt;a ng-click=\"toggle()\"&gt;Menu&lt;/a&gt;\n&lt;ul ng-show=\"menu.visible\"&gt;\n  ...\n&lt;/ul&gt;\n</code></pre>\n\n<p>Need to update on mouseover?</p>\n\n<pre><code>&lt;a ng-mouseenter=\"unfold()\" ng-mouseleave=\"fold()\"&gt;Menu&lt;/a&gt;\n&lt;ul ng-show=\"menu.visible\"&gt;\n  ...\n&lt;/ul&gt;\n</code></pre>\n\n<p>The template drives the application so we get HTML level granularity. If we want to make case by case exceptions, the template makes this easy.</p>\n\n<h2>Closure vs. $scope</h2>\n\n<p>JQuery plugins are created in a closure. Privacy is maintained within that closure. It's up to you to maintain your scope chain within that closure. You only really have access to the set of DOM nodes passed in to the plugin by jQuery, plus any local variables defined in the closure and any globals you have defined. This means that plugins are quite self contained. This is a good thing, but can get restrictive when creating a whole application. Trying to pass data between sections of a dynamic page becomes a chore.</p>\n\n<p>AngularJS has $scope objects. These are special objects created and maintained by AngularJS in which you store your model. Certain directives will spawn a new $scope, which by default inherits from its wrapping $scope using JavaScript prototypical inheritance. The $scope object is accessible in the controller and the view.</p>\n\n<p>This is the clever part. Because the structure of $scope inheritance roughly follows the structure of the DOM, elements have access to their own scope, and any containing scopes seamlessly, all the way up to the global $scope (which is not the same as the global scope).</p>\n\n<p>This makes it much easier to pass data around, and to store data at an appropriate level. If a dropdown is unfolded, only the dropdown $scope needs to know about it. If the user updates their preferences, you might want to update the global $scope, and any nested scopes listening to the user preferences would automatically be alerted.</p>\n\n<p>This might sound complicated, in fact, once you relax into it, it's like flying. You don't need to create the $scope object, AngularJS instantiates and configures it for you, correctly and appropriately based on your template hierarchy. AngularJS then makes it available to your component using the magic of dependency injection (more on this later).</p>\n\n<h2>Manual DOM changes vs. Data Binding</h2>\n\n<p>In jQuery you make all your DOM changes by hand. You construct new DOM elements programatically. If you have a JSON array and you want to put it to the DOM, you must write a function to generate the HTML and insert it.</p>\n\n<p>In AngularJS you can do this too, but you are encouraged to make use of data binding. Change your model, and because the DOM is bound to it via a template your DOM will automatically update, no intervention required.</p>\n\n<p>Because data binding is done from the template, using either an attribute or the curly brace syntax, it's super easy to do. There's little cognitive overhead associated with it so you'll find yourself doing it all the time.</p>\n\n<pre><code>&lt;input ng-model=\"user.name\" /&gt;\n</code></pre>\n\n<p>Binds the input element to <code>$scope.user.name</code>. Updating the input will update the value in your current scope, and vice-versa.</p>\n\n<p>Likewise:</p>\n\n<pre><code>&lt;p&gt;\n  {{user.name}}\n&lt;/p&gt;\n</code></pre>\n\n<p>will output the user name in a paragraph. It's a live binding, so if the <code>$scope.user.name</code> value is updated, the template will update too.</p>\n\n<h2>Ajax all of the time</h2>\n\n<p>In jQuery making an Ajax call is fairly simple, but it's still something you might think twice about. There's the added complexity to think about, and a fair chunk of script to maintain.</p>\n\n<p>In AngularJS, Ajax is your default go-to solution and it happens all the time, almost without you noticing. You can include templates with ng-include. You can apply a template with the simplest custom directive. You can wrap an Ajax call in a service and create yourself a <a href=\"http://en.wikipedia.org/wiki/GitHub\" rel=\"nofollow noreferrer\">GitHub</a> service, or a <a href=\"http://en.wikipedia.org/wiki/Flickr\" rel=\"nofollow noreferrer\">Flickr</a> service, which you can access with astonishing ease.</p>\n\n<h2>Service Objects vs Helper Functions</h2>\n\n<p>In jQuery, if we want to accomplish a small non-dom related task such as pulling a feed from an API, we might write a little function to do that in our closure. That's a valid solution, but what if we  want to access that feed often? What if we want to reuse that code in another application?</p>\n\n<p>AngularJS gives us service objects.</p>\n\n<p>Services are simple objects that contain functions and data. They are always singletons, meaning there can never be more than one of them. Say we want to access the Stack Overflow API, we might write a <code>StackOverflowService</code> which defines methods for doing so.</p>\n\n<p>Let's say we have a shopping cart. We might define a ShoppingCartService which maintains our cart and contains methods for adding and removing items. Because the service is a singleton, and is shared by all other components, any object that needs to can write to the shopping cart and pull data from it. It's always the same cart.</p>\n\n<p>Service objects are self-contained AngularJS components which we can use and reuse as we see fit. They are simple JSON objects containing functions and Data. They are always singletons, so if you store data on a service in one place, you can get that data out somewhere else just by requesting the same service.</p>\n\n<h2><a href=\"http://en.wikipedia.org/wiki/Dependency_injection\" rel=\"nofollow noreferrer\">Dependency injection</a> (DI) vs. Instatiation - aka de-spaghettification</h2>\n\n<p>AngularJS manages your dependencies for you. If you want an object, simply refer to it and AngularJS will get it for you.</p>\n\n<p>Until you start to use this, it's hard to explain just what a massive time boon this is. Nothing like AngularJS DI exists inside jQuery.</p>\n\n<p>DI means that instead of writing your application and wiring it together, you instead define a library of components, each identified by a string.</p>\n\n<p>Say I have a component called 'FlickrService' which defines methods for pulling JSON feeds from Flickr. Now, if I want to write a controller that can access Flickr, I just need to refer to the 'FlickrService' by name when I declare the controller. AngularJS will take care of instantiating the component and making it available to my controller.</p>\n\n<p>For example, here I define a service:</p>\n\n<pre><code>myApp.service('FlickrService', function() {\n  return {\n    getFeed: function() { // do something here }\n  }\n});\n</code></pre>\n\n<p>Now when I want to use that service I just refer to it by name like this:</p>\n\n<pre><code>myApp.controller('myController', ['FlickrService', function(FlickrService) {\n  FlickrService.getFeed()\n}]);\n</code></pre>\n\n<p>AngularJS will recognise that a FlickrService object is needed to instantiate the controller, and will provide one for us.</p>\n\n<p>This makes wiring things together very easy, and pretty much eliminates any tendency towards spagettification. We have a flat list of components, and AngularJS hands them to us one by one as and when we need them.</p>\n\n<h2>Modular service architecture</h2>\n\n<p>jQuery says very little about how you should organise your code. AngularJS has opinions.</p>\n\n<p>AngularJS gives you modules into which you can place your code. If you're writing a script that talks to Flickr for example, you might want to create a Flickr module to wrap all your Flickr related functions in. Modules can include other modules (DI). Your main application is usually a module, and this should include all the other modules your application will depend on.</p>\n\n<p>You get simple code reuse, if you want to write another application based on Flickr, you can just include the Flickr module and voila, you have access to all your Flickr related functions in your new application.</p>\n\n<p>Modules contain AngularJS components. <strong>When we include a module, all the components in that module become available to us as a simple list identified by their unique strings</strong>. We can then inject those components into each other using AngularJS's dependency injection mechanism.</p>\n\n<h2>To sum up</h2>\n\n<p>AngularJS and jQuery are not enemies. It's possible to use jQuery within AngularJS very nicely. If you're using AngularJS well (templates, data-binding, $scope, directives, etc.) you will find you need a <strong>lot</strong> less jQuery than you might otherwise require.</p>\n\n<p>The main thing to realise is that your template drives your application. Stop trying to write big plugins that do everything. Instead write little directives that do one thing, then write a simple template to wire them together.</p>\n\n<p>Think less about unobtrusive JavaScript, and instead think in terms of HTML extensions.</p>\n\n<h2>My little book</h2>\n\n<p>I got so excited about AngularJS, I wrote a short book on it which you're very welcome to read online <a href=\"http://nicholasjohnson.com/angular-book/\" rel=\"nofollow noreferrer\">http://nicholasjohnson.com/angular-book/</a>. I hope it's helpful.</p>\n",
    "score": 184,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 687677,
      "name": "superluminary",
      "reputation": 24131
    }
  },
  {
    "soID": 5558677,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/5558677",
    "title": null,
    "body": "<p>In theory, it is possible to store objects with functions:</p>\n\n<pre><code>function store (a)\n{\n  var c = {f: {}, d: {}};\n  for (var k in a)\n  {\n    if (a.hasOwnProperty(k) &amp;&amp; typeof a[k] === 'function')\n    {\n      c.f[k] = encodeURIComponent(a[k]);\n    }\n  }\n\n  c.d = a;\n  var data = JSON.stringify(c);\n  window.localStorage.setItem('CODE', data);\n}\n\nfunction restore ()\n{\n  var data = window.localStorage.getItem('CODE');\n  data = JSON.parse(data);\n  var b = data.d;\n\n  for (var k in data.f)\n  {\n    if (data.f.hasOwnProperty(k))\n    {\n      b[k] = eval(\"(\" + decodeURIComponent(data.f[k]) + \")\");\n    }\n  }\n\n  return b;\n}\n</code></pre>\n\n<p><strong>However, Function serialization/deserialization is unreliable because <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-15.3.4\">it is implementation-dependent</a>.</strong></p>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 693786,
      "name": "aster_x",
      "reputation": 239
    }
  },
  {
    "soID": 20058835,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/20058835",
    "title": null,
    "body": "<p>Cross-browser (old browsers too) and a simple solution:</p>\n\n<pre><code>var docLoaded = setInterval(function () {\n    if(document.readyState !== \"complete\") return;\n    clearInterval(docLoaded);\n\n    /*\n        Your code goes here i.e. init()\n    */\n}, 30);\n</code></pre>\n\n<p><a href=\"https://jsfiddle.net/z6Lq6oxg/\" rel=\"nofollow\">Showing alert in jsfiddle</a></p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 696535,
      "name": "Pawel",
      "reputation": 3329
    }
  },
  {
    "soID": 38442478,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/38442478",
    "title": null,
    "body": "<p>Cleaner, simpler version:</p>\n\n<pre><code>new Date().toLocaleString();\n</code></pre>\n\n<p>Result <strong>varies</strong> according to the user's <strong>locale</strong>:</p>\n\n<blockquote>\n  <p>2/27/2017, 9:15:41 AM</p>\n</blockquote>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 710284,
      "name": "WhereDatApp.com",
      "reputation": 14302
    }
  },
  {
    "soID": 20129136,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/20129136",
    "title": null,
    "body": "<p>I put together a short <a href=\"http://www.habdas.org/node-js-debugging-primer/\">Node.js debugging primer</a> on using the <a href=\"https://github.com/node-inspector/node-inspector\">node-inspector</a> for those who aren't sure where to get started.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 712334,
      "name": "Josh H",
      "reputation": 1611
    }
  },
  {
    "soID": 38438262,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/38438262",
    "title": null,
    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function capitalizeEachWord(str) {\r\n    return str.replace(/\\w\\S*/g, function(txt) {\r\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n    });\r\n}\r\n\r\ndocument.write(capitalizeEachWord('foo BAR God bAD'));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 717267,
      "name": "Eduardo Cuomo",
      "reputation": 6626
    }
  },
  {
    "soID": 28418627,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/28418627",
    "title": null,
    "body": "<p>Using <strong>xPrototype</strong>: <a href=\"https://github.com/reduardo7/xPrototype/blob/master/README.md#sortbycol1-col2-coln\" rel=\"nofollow\">https://github.com/reduardo7/xPrototype/blob/master/README.md#sortbycol1-col2-coln</a></p>\n\n<pre><code>var o = [ \n  { Name: 'Lazslo', LastName: 'Jamf'     },\n  { Name: 'Pig',    LastName: 'Bodine'   },\n  { Name: 'Pirate', LastName: 'Prentice' },\n  { Name: 'Pag',    LastName: 'Bodine'   }\n];\n\n\n// Original\no.each(function (a, b) { console.log(a, b); });\n/*\n 0 Object {Name: \"Lazslo\", LastName: \"Jamf\"}\n 1 Object {Name: \"Pig\", LastName: \"Bodine\"}\n 2 Object {Name: \"Pirate\", LastName: \"Prentice\"}\n 3 Object {Name: \"Pag\", LastName: \"Bodine\"}\n*/\n\n\n// Sort By LastName ASC, Name ASC\no.sortBy('LastName', 'Name').each(function(a, b) { console.log(a, b); });\n/*\n 0 Object {Name: \"Pag\", LastName: \"Bodine\"}\n 1 Object {Name: \"Pig\", LastName: \"Bodine\"}\n 2 Object {Name: \"Lazslo\", LastName: \"Jamf\"}\n 3 Object {Name: \"Pirate\", LastName: \"Prentice\"}\n*/\n\n\n// Sort by LastName ASC and Name ASC\no.sortBy('LastName'.asc, 'Name'.asc).each(function(a, b) { console.log(a, b); });\n/*\n 0 Object {Name: \"Pag\", LastName: \"Bodine\"}\n 1 Object {Name: \"Pig\", LastName: \"Bodine\"}\n 2 Object {Name: \"Lazslo\", LastName: \"Jamf\"}\n 3 Object {Name: \"Pirate\", LastName: \"Prentice\"}\n*/\n\n\n// Sort by LastName DESC and Name DESC\no.sortBy('LastName'.desc, 'Name'.desc).each(function(a, b) { console.log(a, b); });\n/*\n 0 Object {Name: \"Pirate\", LastName: \"Prentice\"}\n 1 Object {Name: \"Lazslo\", LastName: \"Jamf\"}\n 2 Object {Name: \"Pig\", LastName: \"Bodine\"}\n 3 Object {Name: \"Pag\", LastName: \"Bodine\"}\n*/\n\n\n// Sort by LastName DESC and Name ASC\no.sortBy('LastName'.desc, 'Name'.asc).each(function(a, b) { console.log(a, b); });\n/*\n 0 Object {Name: \"Pirate\", LastName: \"Prentice\"}\n 1 Object {Name: \"Lazslo\", LastName: \"Jamf\"}\n 2 Object {Name: \"Pag\", LastName: \"Bodine\"}\n 3 Object {Name: \"Pig\", LastName: \"Bodine\"}\n*/\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 717267,
      "name": "Eduardo Cuomo",
      "reputation": 6626
    }
  },
  {
    "soID": 5737136,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/5737136",
    "title": null,
    "body": "<p>Under ECMAScript 5, you can combine <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" rel=\"noreferrer\"><code>Object.keys()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"noreferrer\"><code>Array.prototype.forEach()</code></a>:</p>\n\n<pre><code>var obj = { first: \"John\", last: \"Doe\" };\n\nObject.keys(obj).forEach(function(key) {\n    console.log(key, obj[key]);\n});\n</code></pre>\n\n<p>ES2016 adds <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\" rel=\"noreferrer\"><code>for...of</code></a>:</p>\n\n<pre><code>for (const key of Object.keys(obj)) {\n    console.log(key, obj[key]);\n}\n</code></pre>\n\n<p>ES2017 adds <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\" rel=\"noreferrer\"><code>Object.entries()</code></a> which avoids having to look up each value in the original object:</p>\n\n<pre><code>Object.entries(obj).forEach(\n    ([key, value]) =&gt; console.log(key, value)\n);\n</code></pre>\n\n<p>Both <code>Object.keys()</code> and <code>Object.entries()</code> iterate properties in the same order as a <code>for...in</code> loop <em>but ignore the prototype chain</em>. Only the object's own enumerable properties are iterated.</p>\n",
    "score": 319,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 717950,
      "name": "Axel Rauschmayer",
      "reputation": 9034
    }
  },
  {
    "soID": 16567210,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/16567210",
    "title": null,
    "body": "<p>I like this method (it looks a little cleaner):</p>\n\n<pre><code>text = text.replace(new RegExp(\"cat\",\"g\"), \"dog\"); \n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 719038,
      "name": "Owen",
      "reputation": 1546
    }
  },
  {
    "soID": 31946063,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/31946063",
    "title": null,
    "body": "<p><a href=\"https://www.npmjs.com/package/clipboard-js\" rel=\"noreferrer\">clipboard.js</a> is a small, non-flash, utility that allows copying of text or html data to the clipboard.  It's very easy to use, just include the .js and use something like this: </p>\n\n<pre><code>&lt;button id='markup-copy'&gt;Copy Button&lt;/button&gt;\n\n&lt;script&gt;\ndocument.getElementById('markup-copy').addEventListener('click', function() {\n  clipboard.copy({\n    'text/plain': 'Markup text. Paste me into a rich text editor.',\n    'text/html': '&lt;i&gt;here&lt;/i&gt; is some &lt;b&gt;rich text&lt;/b&gt;'\n  }).then(\n    function(){console.log('success'); },\n    function(err){console.log('failure', err);\n  });\n\n});\n&lt;/script&gt;\n</code></pre>\n\n<p>clipboard.js is also on <a href=\"https://github.com/lgarron/clipboard.js\" rel=\"noreferrer\">GitHub</a></p>\n",
    "score": 39,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 721073,
      "name": "a coder",
      "reputation": 2977
    }
  },
  {
    "soID": 20117438,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/20117438",
    "title": null,
    "body": "<p>The function takes 2 arguments: \nstart -  the start index;\nlength - the length of substring to Capitalise</p>\n\n<pre><code>    String.prototype.subUpper = function () {\n        var result = this.toString();\n        var start = 0;\n        var length = 1;\n        if (arguments.length &gt; 0) {\n            start = arguments[0];\n            if (start &lt; this.length) {\n                if (arguments.length &gt; 1) { length = arguments[1]; }\n                if (start + length &gt; this.length) {\n                    length = this.length - start;\n                }\n                var startRest = start + length;\n                var prefix = start &gt; 0 ? this.substr(0, start) : String.empty;\n                var sub = this.substr(start, length);\n                var suffix = this.substr(startRest, this.length - startRest);\n                result = prefix + sub.toUpperCase() + suffix;\n            }\n        }\n        return result;\n    };\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 721704,
      "name": "Berezh",
      "reputation": 473
    }
  },
  {
    "soID": 6104973,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/6104973",
    "title": null,
    "body": "<p>Caveat! Beware of JSON's limitiations.</p>\n\n<pre><code>javascript:\n  obj={  f:function(){}  };\n  alert( \"Beware!! obj is NOT empty!\\n\\nobj = {  f:function(){}  }\" + \n               \"\\n\\nJSON.stringify( obj )\\n\\nreturns\\n\\n\" +\n                        JSON.stringify( obj ) );\n</code></pre>\n\n<p>displays</p>\n\n<pre>\n    Beware!! obj is NOT empty!\n\n    obj = {  f:function(){}  }\n\n    JSON.stringify( obj )\n\n    returns\n\n    {}\n</pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 725589,
      "name": "Ekim",
      "reputation": 477
    }
  },
  {
    "soID": 13491954,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/13491954",
    "title": null,
    "body": "<p>The HTML5 replaceState is the answer, as already mentioned by Vivart and geo1701. However it is not supported in all browsers/versions.\n<a href=\"https://github.com/balupton/history.js\" rel=\"noreferrer\">History.js</a> wraps HTML5 state features and provides additional support for HTML4 browsers.</p>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 735172,
      "name": "Thomas Stjernegaard Jeppesen",
      "reputation": 281
    }
  },
  {
    "soID": 5876374,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/5876374",
    "title": null,
    "body": "<p>From one of the projects I've been working on, a jQuery copy-to-clipboard plugin that utilizes the <a href=\"http://steamdev.com/zclip\">Zero Clipboard</a> library.</p>\n\n<p>It is easier to use than the native Zero Clipboard plugin if you're a heavy jQuery user.</p>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 736994,
      "name": "SteamDev",
      "reputation": 439
    }
  },
  {
    "soID": 22500311,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/22500311",
    "title": null,
    "body": "<p>If you are using Angular, you can use the angular.isArray() function</p>\n\n<pre><code>var myArray = [];\nangular.isArray(myArray); // returns true\n\nvar myObj = {};\nangular.isArray(myObj); //returns false\n</code></pre>\n\n<p><a href=\"http://docs.angularjs.org/api/ng/function/angular.isArray\" rel=\"noreferrer\">http://docs.angularjs.org/api/ng/function/angular.isArray</a></p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 740681,
      "name": "joseph.l.hunsaker",
      "reputation": 423
    }
  },
  {
    "soID": 15911908,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/15911908",
    "title": null,
    "body": "<p>You don't get much more elegant than this in pure JS:</p>\n\n<pre><code>function copy(variable)\n{\n    var newVariable= {};\n    for (var i in variable)\n        newVariable[i] = variable[i];\n\n    return newVariable;\n}\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23385176,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/23385176",
    "title": null,
    "body": "<p>Example Usage:</p>\n\n<pre><code>objs.sort(sortBy('last_nom'));\n</code></pre>\n\n<p>Script: </p>\n\n<pre><code>/**\n * @description \n * Returns a function which will sort an\n * array of objects by the given key.\n * \n * @param  {String}  key\n * @param  {Boolean} reverse\n * @return {Function}     \n */\nfunction sortBy(key, reverse) {\n\n  // Move smaller items towards the front\n  // or back of the array depending on if\n  // we want to sort the array in reverse\n  // order or not.\n  var moveSmaller = reverse ? 1 : -1;\n\n  // Move larger items towards the front\n  // or back of the array depending on if\n  // we want to sort the array in reverse\n  // order or not.\n  var moveLarger = reverse ? -1 : 1;\n\n  /**\n   * @param  {*} a\n   * @param  {*} b\n   * @return {Number}\n   */\n  return function(a, b) {\n    if (a[key] &lt; b[key]) {\n      return moveSmaller;\n    }\n    if (a[key] &gt; b[key]) {\n      return moveLarger;\n    }\n    return 0;\n  };\n\n}\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 745158,
      "name": "fold_left",
      "reputation": 1659
    }
  },
  {
    "soID": 34326063,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/34326063",
    "title": null,
    "body": "<p>May the following two functions show the difference:</p>\n\n<pre><code>function varTest() {\n    var x = 31;\n    if (true) {\n        var x = 71;  // Same variable!\n        console.log(x);  // 71\n    }\n    console.log(x);  // 71\n}\n\nfunction letTest() {\n    let x = 31;\n    if (true) {\n        let x = 71;  // Different variable\n        console.log(x);  // 71\n    }\n    console.log(x);  // 31\n}\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 747579,
      "name": "Abdennour TOUMI",
      "reputation": 17227
    }
  },
  {
    "soID": 20292655,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/20292655",
    "title": null,
    "body": "<pre><code>String.prototype.capitalize = function(allWords) {\n   return (allWords) ? // if all words\n      this.split(' ').map(word =&gt; word.capitalize()).join(' ') : //break down phrase to words then  recursive calls until capitalizing all words\n      this.charAt(0).toUpperCase() + this.slice(1); // if allWords is undefined , capitalize only the first word , mean the first char of the whole string\n}\n</code></pre>\n\n<p>And then:</p>\n\n<pre><code> \"capitalize just the first word\".capitalize(); ==&gt; \"Capitalize just the first word\"\n \"capitalize all words\".capitalize(true); ==&gt; \"Capitalize All Words\"\n</code></pre>\n\n<h2>Update Nov.2016 (ES6), just for FUN :</h2>\n\n<pre><code>const capitalize = (string = '') =&gt; [...string].map(    //convert to array with each item is a char of string by using spread operator (...)\n    (char, index) =&gt; index ? char : char.toUpperCase()  // index true means not equal 0 , so (!index) is the first char which is capitalized by `toUpperCase()` method\n ).join('')                                             //return back to string\n</code></pre>\n\n<p>then <code>capitalize(\"hello\") // Hello</code></p>\n",
    "score": 43,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 747579,
      "name": "Abdennour TOUMI",
      "reputation": 17227
    }
  },
  {
    "soID": 18234290,
    "parentID": 14994391,
    "url": "https://stackoverflow.com/q/18234290",
    "title": null,
    "body": "<p>They're apples and oranges. You don't want to compare them. They're two different things. AngularJs has already jQuery lite built in which allows you to perform basic DOM manipulation without even including the full blown jQuery version. </p>\n\n<p>jQuery is all about DOM manipulation. It solves all the cross browser pain otherwise you will have to deal with but it's not a framework that allows you to divide your app into components like AngularJS. </p>\n\n<p>A nice thing about AngularJs is that it allows you to separate/isolate the DOM manipulation in the directives.  There are built-in directives ready for you to use such as ng-click. You can create your own custom directives that will contain all your view logic or DOM manipulation so you don't end up mingle DOM manipulation code in the controllers or services that should take care of the business logic.</p>\n\n<p>Angular breaks down your app into \n- Controllers\n- Services\n- Views\n- etc.</p>\n\n<p>and there is one more thing, that's the directive. It's an attribute  you can attach to any DOM element and you can go nuts with jQuery within it without worrying about your jQuery ever conflicts with AngularJs components or messes up with its architecture. </p>\n\n<p>I heard from a meetup I attended, one of the founders of Angular said they worked really hard to separate out the DOM manipulation so do not try to include them back in. </p>\n",
    "score": 35,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 752891,
      "name": "Jin",
      "reputation": 999
    }
  },
  {
    "soID": 32469033,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/32469033",
    "title": null,
    "body": "<p><a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> has really nice Node.js debugging support. It is free, open source and cross-platform and runs on Linux, OS&nbsp;X and Windows.</p>\n\n<p>You can even debug <a href=\"https://hansrwindhoff.wordpress.com/debugging-task-runner-tasks-like-gulp-with-visual-studio-code-editordebugger/\">grunt and gulp tasks</a>, should you need to...</p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 754959,
      "name": "hans",
      "reputation": 744
    }
  },
  {
    "soID": 25656704,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/25656704",
    "title": null,
    "body": "<p>If it is just an empty div, this is sufficient:</p>\n\n<pre><code>$(\"#foo\").append(\"&lt;div&gt;\")\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(\"#foo\").append(\"&lt;div/&gt;\")\n</code></pre>\n\n<p>It gives the same result.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 756500,
      "name": "Vennsoh",
      "reputation": 2037
    }
  },
  {
    "soID": 23215494,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/23215494",
    "title": null,
    "body": "<pre><code>(function() { var d = new Date(); return new Date(d - d % 86400000); })()\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 757887,
      "name": "Andrea",
      "reputation": 535
    }
  },
  {
    "soID": 36585554,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/36585554",
    "title": null,
    "body": "<p>The following example I have written shows how to</p>\n\n<ul>\n<li>Handle asynchronous HTTP calls;</li>\n<li>Wait for response from each API call;</li>\n<li>Use <a href=\"https://en.wikipedia.org/wiki/Futures_and_promises\" rel=\"nofollow noreferrer\">Promise</a> pattern;</li>\n<li>Use Promise.All pattern to join multiple HTTP calls;</li>\n</ul>\n\n<p>This working example is self-contained. It will define a simple request object that uses the window <code>XMLHttpRequest</code> object to make calls. It will define a simple function to wait for a bunch of promises to be completed.</p>\n\n<p>Context. The example is querying the <a href=\"https://developer.spotify.com/web-api/endpoint-reference/\" rel=\"nofollow noreferrer\">Spotify Web API</a> endpoint in order to search for <code>playlist</code> objects for a given set of query strings:</p>\n\n<pre><code>[\n \"search?type=playlist&amp;q=%22doom%20metal%22\",\n \"search?type=playlist&amp;q=Adele\"\n]\n</code></pre>\n\n<p>For each item, a new Promise will fire a block - <code>ExecutionBlock</code>, parse the result, schedule a new set of promises based on the result array, that is a list of Spotify <code>user</code> objects and execute the new HTTP call within the <code>ExecutionProfileBlock</code> asynchronously.</p>\n\n<p>You can then see a nested Promise structure, that lets you spawn multiple and completely asynchronous nested HTTP calls, and join the results from each subset of calls through <code>Promise.all</code>.</p>\n\n<p><strong>NOTE</strong>\nRecent Spotify <code>search</code> APIs will require an access token to be specified in the request headers:</p>\n\n<pre><code>-H \"Authorization: Bearer {your access token}\" \n</code></pre>\n\n<p>So, you to run the following example you need to put your access token in the request headers:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var spotifyAccessToken = \"YourSpotifyAccessToken\";\r\nvar console = {\r\n    log: function(s) {\r\n        document.getElementById(\"console\").innerHTML += s + \"&lt;br/&gt;\"\r\n    }\r\n}\r\n\r\n// Simple XMLHttpRequest\r\n// based on https://davidwalsh.name/xmlhttprequest\r\nSimpleRequest = {\r\n    call: function(what, response) {\r\n        var request;\r\n        if (window.XMLHttpRequest) { // Mozilla, Safari, ...\r\n            request = new XMLHttpRequest();\r\n        } else if (window.ActiveXObject) { // Internet Explorer\r\n            try {\r\n                request = new ActiveXObject('Msxml2.XMLHTTP');\r\n            }\r\n            catch (e) {\r\n                try {\r\n                  request = new ActiveXObject('Microsoft.XMLHTTP');\r\n                } catch (e) {}\r\n            }\r\n        }\r\n\r\n        // State changes\r\n        request.onreadystatechange = function() {\r\n            if (request.readyState === 4) { // Done\r\n                if (request.status === 200) { // Complete\r\n                    response(request.responseText)\r\n                }\r\n                else\r\n                    response();\r\n            }\r\n        }\r\n        request.open('GET', what, true);\r\n        request.setRequestHeader(\"Authorization\", \"Bearer \" + spotifyAccessToken);\r\n        request.send(null);\r\n    }\r\n}\r\n\r\n//PromiseAll\r\nvar promiseAll = function(items, block, done, fail) {\r\n    var self = this;\r\n    var promises = [],\r\n                   index = 0;\r\n    items.forEach(function(item) {\r\n        promises.push(function(item, i) {\r\n            return new Promise(function(resolve, reject) {\r\n                if (block) {\r\n                    block.apply(this, [item, index, resolve, reject]);\r\n                }\r\n            });\r\n        }(item, ++index))\r\n    });\r\n    Promise.all(promises).then(function AcceptHandler(results) {\r\n        if (done) done(results);\r\n    }, function ErrorHandler(error) {\r\n        if (fail) fail(error);\r\n    });\r\n}; //promiseAll\r\n\r\n// LP: deferred execution block\r\nvar ExecutionBlock = function(item, index, resolve, reject) {\r\n    var url = \"https://api.spotify.com/v1/\"\r\n    url += item;\r\n    console.log( url )\r\n    SimpleRequest.call(url, function(result) {\r\n        if (result) {\r\n\r\n            var profileUrls = JSON.parse(result).playlists.items.map(function(item, index) {\r\n                return item.owner.href;\r\n            })\r\n            resolve(profileUrls);\r\n        }\r\n        else {\r\n            reject(new Error(\"call error\"));\r\n        }\r\n    })\r\n}\r\n\r\narr = [\r\n    \"search?type=playlist&amp;q=%22doom%20metal%22\",\r\n    \"search?type=playlist&amp;q=Adele\"\r\n]\r\n\r\npromiseAll(arr, function(item, index, resolve, reject) {\r\n    console.log(\"Making request [\" + index + \"]\")\r\n    ExecutionBlock(item, index, resolve, reject);\r\n}, function(results) { // Aggregated results\r\n\r\n    console.log(\"All profiles received \" + results.length);\r\n    //console.log(JSON.stringify(results[0], null, 2));\r\n\r\n    ///// promiseall again\r\n\r\n    var ExecutionProfileBlock = function(item, index, resolve, reject) {\r\n        SimpleRequest.call(item, function(result) {\r\n            if (result) {\r\n                var obj = JSON.parse(result);\r\n                resolve({\r\n                    name: obj.display_name,\r\n                    followers: obj.followers.total,\r\n                    url: obj.href\r\n                });\r\n            } //result\r\n        })\r\n    } //ExecutionProfileBlock\r\n\r\n    promiseAll(results[0], function(item, index, resolve, reject) {\r\n        //console.log(\"Making request [\" + index + \"] \" + item)\r\n        ExecutionProfileBlock(item, index, resolve, reject);\r\n    }, function(results) { // aggregated results\r\n        console.log(\"All response received \" + results.length);\r\n        console.log(JSON.stringify(results, null, 2));\r\n    }\r\n\r\n    , function(error) { // Error\r\n        console.log(error);\r\n    })\r\n\r\n    /////\r\n\r\n  },\r\n  function(error) { // Error\r\n      console.log(error);\r\n  });</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id=\"console\" /&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>I have extensively discussed this solution <a href=\"https://stackoverflow.com/questions/36536245/how-to-search-for-a-user-by-name-using-spotify-web-api/36537774#36537774\">here</a>.</p>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 758836,
      "name": "loretoparisi",
      "reputation": 5392
    }
  },
  {
    "soID": 36670493,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/36670493",
    "title": null,
    "body": "<p>To round at decimal positions <code>pos</code> (including no decimals) do <code>Math.round(num * Math.pow(10,pos)) / Math.pow(10,pos)</code></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var console = {\r\n log: function(s) {\r\n  document.getElementById(\"console\").innerHTML += s + \"&lt;br/&gt;\"\r\n }\r\n}\r\nvar roundDecimals=function(num,pos) {\r\n return (Math.round(num * Math.pow(10,pos)) / Math.pow(10,pos) );\r\n}\r\n//https://en.wikipedia.org/wiki/Pi\r\nvar pi=3.14159265358979323846264338327950288419716939937510;\r\nfor(var i=2;i&lt;15;i++) console.log(\"pi=\"+roundDecimals(pi,i));\r\nfor(var i=15;i&gt;=0;--i) console.log(\"pi=\"+roundDecimals(pi,i));</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id=\"console\" /&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 758836,
      "name": "loretoparisi",
      "reputation": 5392
    }
  },
  {
    "soID": 6055620,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/6055620",
    "title": null,
    "body": "<p>Automatic copying to clipboard may be dangerous, therefore most browsers (except IE) make it very difficult. Personally, I use the following simple trick:</p>\n\n<pre><code>function copyToClipboard(text) {\n  window.prompt(\"Copy to clipboard: Ctrl+C, Enter\", text);\n}\n</code></pre>\n\n<p>The user is presented with the prompt box, where the text to be copied is already selected. Now it's enough to press <kbd>Ctrl</kbd>+<kbd>C</kbd> and <kbd>Enter</kbd> (to close the box) -- and voila!</p>\n\n<p>Now the clipboard copy operation is SAFE, because the user does it manually (but in a pretty straightforward way). Of course, works in all browsers.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;button id=\"demo\" onclick=\"copyToClipboard(document.getElementById('demo').innerHTML)\"&gt;This is what I want to copy&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  function copyToClipboard(text) {\r\n    window.prompt(\"Copy to clipboard: Ctrl+C, Enter\", text);\r\n  }\r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 1143,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 760609,
      "name": "Jarek Milewski",
      "reputation": 12575
    }
  },
  {
    "soID": 4762411,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/4762411",
    "title": null,
    "body": "<p>Extending the Storage object is an awesome solution. For my API, I have created a facade for localStorage and then check if it is an object or not while setting and getting.</p>\n\n<pre><code>var data = {\n  set: function(key, value) {\n    if (!key || !value) {return;}\n\n    if (typeof value === \"object\") {\n      value = JSON.stringify(value);\n    }\n    localStorage.setItem(key, value);\n  },\n  get: function(key) {\n    var value = localStorage.getItem(key);\n\n    if (!value) {return;}\n\n    // assume it is an object that has been stringified\n    if (value[0] === \"{\") {\n      value = JSON.parse(value);\n    }\n\n    return value;\n  }\n}\n</code></pre>\n",
    "score": 50,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 761547,
      "name": "Alex Grande",
      "reputation": 4299
    }
  },
  {
    "soID": 12197444,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/12197444",
    "title": null,
    "body": "<p>Here is a fast way to get an object similar to the PHP <a href=\"http://php.net/manual/en/reserved.variables.get.php\">$_GET</a> array:</p>\n\n<pre><code>function get_query(){\n    var url = location.search;\n    var qs = url.substring(url.indexOf('?') + 1).split('&amp;');\n    for(var i = 0, result = {}; i &lt; qs.length; i++){\n        qs[i] = qs[i].split('=');\n        result[qs[i][0]] = decodeURIComponent(qs[i][1]);\n    }\n    return result;\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var $_GET = get_query();\n</code></pre>\n\n<p>For the query string <code>x=5&amp;y&amp;z=hello&amp;x=6</code> this returns the object:</p>\n\n<pre><code>{\n  x: \"6\",\n  y: undefined,\n  z: \"hello\"\n}\n</code></pre>\n",
    "score": 48,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22131225,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/22131225",
    "title": null,
    "body": "<p>Since the .length property is special for arrays in javascript you can simply say</p>\n\n<pre><code>obj.length === +obj.length // true if obj is an array\n</code></pre>\n\n<p>Underscorejs and several other libraries use this short and simple trick.</p>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 773355,
      "name": "TypingTurtle",
      "reputation": 144
    }
  },
  {
    "soID": 19722641,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/19722641",
    "title": null,
    "body": "<p>MarkG's answer is the correct one.  Here's a generic extension for any number of decimal places.</p>\n\n<pre><code>Number.prototype.round = function(places) {\n  return +(Math.round(this + \"e+\" + places)  + \"e-\" + places);\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var n = 1.7777;    \nn.round(2); // 1.78\n</code></pre>\n\n<p>Unit test:</p>\n\n<pre><code>it.only('should round floats to 2 places', function() {\n\n  var cases = [\n    { n: 10,      e: 10,    p:2 },\n    { n: 1.7777,  e: 1.78,  p:2 },\n    { n: 1.005,   e: 1.01,  p:2 },\n    { n: 1.005,   e: 1,     p:0 },\n    { n: 1.77777, e: 1.8,   p:1 }\n  ]\n\n  cases.forEach(function(testCase) {\n    var r = testCase.n.round(testCase.p);\n    assert.equal(r, testCase.e, 'didn\\'t get right number');\n  });\n})\n</code></pre>\n",
    "score": 97,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 775800,
      "name": "Lavamantis",
      "reputation": 1571
    }
  },
  {
    "soID": 28434935,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/28434935",
    "title": null,
    "body": "<p>This is my current favorite, because it's both flexible and modular. It's a collection of (at least) three simple functions:</p>\n\n<pre><code>/**\n * Returns an array with date / time information\n * Starts with year at index 0 up to index 6 for milliseconds\n * \n * @param {Date} date   date object. If falsy, will take current time.\n * @returns {[]}\n */\ngetDateArray = function(date) {\n    date = date || new Date();\n    return [\n        date.getFullYear(),\n        exports.pad(date.getMonth()+1, 2),\n        exports.pad(date.getDate(), 2),\n        exports.pad(date.getHours(), 2),\n        exports.pad(date.getMinutes(), 2),\n        exports.pad(date.getSeconds(), 2),\n        exports.pad(date.getMilliseconds(), 2)\n    ];\n};\n</code></pre>\n\n<p>Here's the pad function:</p>\n\n<pre><code> /**\n * Pad a number with n digits\n *\n * @param {number} number   number to pad\n * @param {number} digits   number of total digits\n * @returns {string}\n */\nexports.pad = function pad(number, digits) {\n    return new Array(Math.max(digits - String(number).length + 1, 0)).join(0) + number;\n};\n</code></pre>\n\n<p>Finally I can either build my date string by hand, or use a simple functions to do it for me:</p>\n\n<pre><code>/**\n * Returns nicely formatted date-time\n * @example 2015-02-10 16:01:12\n *\n * @param {object} date\n * @returns {string}\n */\nexports.niceDate = function(date) {\n    var d = exports.getDateArray(date);\n    return d[0] + '-' + d[1] + '-' + d[2] + ' ' + d[3] + ':' + d[4] + ':' + d[5];\n};\n\n/**\n * Returns a formatted date-time, optimized for machines\n * @example 2015-02-10_16-00-08\n *\n * @param {object} date\n * @returns {string}\n */\nexports.roboDate = function(date) {\n    var d = exports.getDateArray(date);\n    return d[0] + '-' + d[1] + '-' + d[2] + '_' + d[3] + '-' + d[4] + '-' + d[5];\n};\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 776425,
      "name": "Fannon",
      "reputation": 170
    }
  },
  {
    "soID": 25075575,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/25075575",
    "title": null,
    "body": "<p>A precise rounding method. Source: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\" rel=\"noreferrer\">Mozilla</a></p>\n\n<pre><code>(function(){\n\n    /**\n     * Decimal adjustment of a number.\n     *\n     * @param   {String}    type    The type of adjustment.\n     * @param   {Number}    value   The number.\n     * @param   {Integer}   exp     The exponent (the 10 logarithm of the adjustment base).\n     * @returns {Number}            The adjusted value.\n     */\n    function decimalAdjust(type, value, exp) {\n        // If the exp is undefined or zero...\n        if (typeof exp === 'undefined' || +exp === 0) {\n            return Math[type](value);\n        }\n        value = +value;\n        exp = +exp;\n        // If the value is not a number or the exp is not an integer...\n        if (isNaN(value) || !(typeof exp === 'number' &amp;&amp; exp % 1 === 0)) {\n            return NaN;\n        }\n        // Shift\n        value = value.toString().split('e');\n        value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));\n        // Shift back\n        value = value.toString().split('e');\n        return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));\n    }\n\n    // Decimal round\n    if (!Math.round10) {\n        Math.round10 = function(value, exp) {\n            return decimalAdjust('round', value, exp);\n        };\n    }\n    // Decimal floor\n    if (!Math.floor10) {\n        Math.floor10 = function(value, exp) {\n            return decimalAdjust('floor', value, exp);\n        };\n    }\n    // Decimal ceil\n    if (!Math.ceil10) {\n        Math.ceil10 = function(value, exp) {\n            return decimalAdjust('ceil', value, exp);\n        };\n    }\n})();\n</code></pre>\n\n<p>Examples:</p>\n\n<pre><code>// Round\nMath.round10(55.55, -1); // 55.6\nMath.round10(55.549, -1); // 55.5\nMath.round10(55, 1); // 60\nMath.round10(54.9, 1); // 50\nMath.round10(-55.55, -1); // -55.5\nMath.round10(-55.551, -1); // -55.6\nMath.round10(-55, 1); // -50\nMath.round10(-55.1, 1); // -60\nMath.round10(1.005, -2); // 1.01 -- compare this with Math.round(1.005*100)/100 above\n// Floor\nMath.floor10(55.59, -1); // 55.5\nMath.floor10(59, 1); // 50\nMath.floor10(-55.51, -1); // -55.6\nMath.floor10(-51, 1); // -60\n// Ceil\nMath.ceil10(55.51, -1); // 55.6\nMath.ceil10(51, 1); // 60\nMath.ceil10(-55.59, -1); // -55.5\nMath.ceil10(-59, 1); // -50\n</code></pre>\n",
    "score": 45,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 781695,
      "name": "Medorator",
      "reputation": 8377
    }
  },
  {
    "soID": 15171167,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/15171167",
    "title": null,
    "body": "<p>Include jQuery from the local file system. I used Google's <a href=\"http://en.wikipedia.org/wiki/Content_delivery_network\" rel=\"noreferrer\">CDN</a>, and there are also many CDNs to choose from.</p>\n\n<pre><code>&lt;script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>The code will execute as soon as a checkbox inside <code>mycheck</code> class is clicked. If the current clicked checkbox is checked then it will disable all others and enable the current one. If the current one is unchecked, it will again enable all checkboxes for rechecking.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    $(document).ready(function() {\n\n        var checkbox_selector = '.mycheck input[type=checkbox]';\n\n        $(checkbox_selector).click(function() {\n            if ($($(this)).is(':checked')) {\n\n                // Disable all checkboxes\n                $(checkbox_selector).attr('disabled', 'disabled');\n\n                // Enable current one\n                $($(this)).removeAttr('disabled');\n            }\n            else {\n                // If unchecked open all checkbox\n                $(checkbox_selector).removeAttr('disabled');\n            }\n        });\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>Simple form to test</p>\n\n<pre><code>&lt;form method=\"post\" action=\"\"&gt;\n    &lt;div class=\"mycheck\"&gt;\n        &lt;input type=\"checkbox\" value=\"1\" /&gt; Television\n        &lt;input type=\"checkbox\" value=\"2\" /&gt; Computer\n        &lt;input type=\"checkbox\" value=\"3\" /&gt; Laptop\n        &lt;input type=\"checkbox\" value=\"4\" /&gt; Camera\n        &lt;input type=\"checkbox\" value=\"5\" /&gt; Music Systems\n    &lt;/div&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Output screen:</p>\n\n<p><img src=\"https://i.stack.imgur.com/SM7V9.png\" alt=\"Enter image description here\"></p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 45101066,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/45101066",
    "title": null,
    "body": "<p>I have put together the solution presented by @dean-taylor here along with some other select / unselect code from elsewhere into a jQuery plugin available on NPM:</p>\n\n<p><a href=\"https://www.npmjs.com/package/jquery.text-select\" rel=\"nofollow noreferrer\">https://www.npmjs.com/package/jquery.text-select</a></p>\n\n<h3>Install:</h3>\n\n<p><code>npm install --save jquery.text-select</code></p>\n\n<h3>Usage:</h3>\n\n<pre><code>&lt;script&gt;\n    $(document).ready(function(){\n        $(\"#selectMe\").selectText(); // Hightlight / select the text\n        $(\"#selectMe\").selectText(false); // Clear the selection\n\n        $(\"#copyMe\").copyText(); // Copy text to clipboard\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>Futher info on methods / events can be found at the NPM registry page above.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 786415,
      "name": "Gruffy",
      "reputation": 433
    }
  },
  {
    "soID": 20679463,
    "parentID": 3390396,
    "url": "https://stackoverflow.com/q/20679463",
    "title": null,
    "body": "<p>In <a href=\"http://flippinawesome.org/2013/12/09/exploring-the-abyss-of-null-and-undefined-in-javascript/\" rel=\"noreferrer\">this article</a> I read that frameworks like <a href=\"https://en.wikipedia.org/wiki/Underscore.js\" rel=\"noreferrer\">Underscore.js</a> use this function:</p>\n\n<pre><code>function isUndefined(obj){\n    return obj === void 0;\n}\n</code></pre>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 788840,
      "name": "Marthijn",
      "reputation": 2259
    }
  },
  {
    "soID": 7083794,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/7083794",
    "title": null,
    "body": "<p>It seems I misread the question, but for reference, you can extract a range of the DOM (not to clipboard; compatible with all modern browsers), and combine it with the oncopy and onpaste and onbeforepaste events to get clipboard behaviour. Here's the code to achieve this: </p>\n\n<pre><code>function clipBoard(sCommand) {\n  var oRange=contentDocument.createRange();\n  oRange.setStart(startNode, startOffset);\n  oRange.setEnd(endNode, endOffset);\n/* This is where the actual selection happens.\nin the above, startNode and endNode are dom nodes defining the beginning \nand end of the \"selection\" respectively. startOffset and endOffset are \nconstants that are defined as follows:\n\nEND_TO_END: 2\nEND_TO_START: 3\nNODE_AFTER: 1\nNODE_BEFORE: 0\nNODE_BEFORE_AND_AFTER: 2\nNODE_INSIDE: 3\nSTART_TO_END: 1\nSTART_TO_START: 0\n\nand would be used like oRange.START_TO_END */\n      switch(sCommand) {\n    case \"cut\":\n          this.oFragment=oRange.extractContents();\n      oRange.collapse();\n      break;\n    case \"copy\":\n      this.oFragment=oRange.cloneContents();\n      break;\n    case \"paste\":\n      oRange.deleteContents();\n      var cloneFragment=this.oFragment.cloneNode(true)\n      oRange.insertNode(cloneFragment);\n      oRange.collapse();\n      break;\n  }\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 791686,
      "name": "mrBorna",
      "reputation": 1323
    }
  },
  {
    "soID": 43935938,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/43935938",
    "title": null,
    "body": "<pre><code>let clone = Object.assign( Object.create( Object.getPrototypeOf(obj)), obj)\n</code></pre>\n\n<p>ES6 solution if you want to (shallow) clone a <strong>class instance</strong> and not just a property object.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6333148,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/6333148",
    "title": null,
    "body": "<p><code>arg</code> function: </p>\n\n<pre><code>/**\n * Qt stil arg()\n * var scr = \"&lt;div id='%1' class='%2'&gt;&lt;/div&gt;\".arg(\"mydiv\").arg(\"mydivClass\");\n */\nString.prototype.arg = function() {\n    var signIndex = this.indexOf(\"%\");\n    var result = this;\n    if (signIndex &gt; -1 &amp;&amp; arguments.length &gt; 0) {\n        var argNumber = this.charAt(signIndex + 1);\n        var _arg = \"%\"+argNumber;\n        var argCount = this.split(_arg);\n        for (var itemIndex = 0; itemIndex &lt; argCount.length; itemIndex++) {\n            result = result.replace(_arg, arguments[0]);\n        }\n    }\n    return result;\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10167931,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/10167931",
    "title": null,
    "body": "<p>Yes, but only if your implementation includes the <code>for</code>...<code>of</code> feature introduced in <a href=\"http://www.ecma-international.org/ecma-262/6.0/\" rel=\"noreferrer\">ECMAScript 2015</a> (the \"Harmony\" release).</p>\n\n<p>It works like this:</p>\n\n<pre><code>// REQUIRES ECMASCRIPT 2015+\nvar s, myStringArray = [\"Hello\", \"World\"];\nfor (s of myStringArray) {\n  // ... do something with s ...\n}\n</code></pre>\n\n<p>Or better yet, since ECMAScript 2015 also provides block-scoped variables via <code>let</code>:</p>\n\n<pre><code>// REQUIRES ECMASCRIPT 2015+\nvar myStringArray = [\"Hello\", \"World\"];\nfor (let s of myStringArray) {\n  // ... do something with s ...\n}\n// s is no longer defined here\n</code></pre>\n\n<p>Many JavaScript developers are still working in an environment that's not there yet, however - especially if writing code to run in web browsers, where the site developers often can't be sure what browser/version their clients will be using.</p>\n\n<p>If you can assume the JavaScript interpreter is compliant with the <em>previous</em> edition of the ECMAScript specification (which rules out, for example, versions of Internet Explorer before 9), then you can use the <code>forEach</code> iterator method instead of a loop. In that case, you pass a function to be called on each item in the array:</p>\n\n<pre><code>var myStringArray = [ \"Hello\", \"World\" ];\nmyStringArray.forEach( function(s) { \n     // ... do something with s ...\n} );\n</code></pre>\n\n<p>But if even that is too much to assume, and you want something that works in <em>all</em> versions of JavaScript, then you have to use an explicit counting loop.  The safest version, which handles sparse arrays properly, is something like this:</p>\n\n<pre><code>var i, s, myStringArray = [ \"Hello\", \"World\" ], len = myStringArray.length;\nfor (i=0; i&lt;len; ++i) {\n  if (i in myStringArray) {\n    s = myStringArray[i];\n    // ... do something with s ...\n  }\n}\n</code></pre>\n\n<p>Assigning the length value to the local variable (as opposed to including the full <code>myStringArray.length</code> expression in the loop condition) can make a significant difference in performance since it skips a property lookup each time through; using Rhino on my machine, the speedup is 43%. </p>\n\n<p>You will often see the length caching done in the loop initialization clause, like this:</p>\n\n<pre><code>var i, len, myStringArray = [ \"Hello\", \"World\" ];\nfor (len = myStringArray.length, i=0; i&lt;len; ++i) {\n</code></pre>\n\n<p>The <code>for</code>...<code>in</code> syntax mentioned by others is for looping over an object's properties; since an Array in JavaScript is just an object with numeric property names (and an automatically-updated \"length\" property), you can theoretically loop over an Array with it.  But the problem is that it doesn't restrict itself to the numeric property values (remember that even methods are actually just properties whose value is a closure), nor does it iterate over those in numeric order. Therefore, the <code>for</code>...<code>in</code> syntax should <em>not</em> be used for looping through Arrays. </p>\n",
    "score": 622,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 797049,
      "name": "Mark Reed",
      "reputation": 52922
    }
  },
  {
    "soID": 31633281,
    "parentID": 18641899,
    "url": "https://stackoverflow.com/q/31633281",
    "title": null,
    "body": "<p><strong>TL;DR: The biggest difference in everyday use isn't nested dependencies... it's the difference between modules and globals.</strong></p>\n\n<p>I think the previous posters have covered well some of the basic distinctions. (npm's use of nested dependencies is indeed very helpful in managing large, complex applications, though I don't think it's the most important distinction.)</p>\n\n<p>I'm surprised, however, that nobody has explicitly explained one of the most fundamental distinctions between Bower and npm. If you read the answers above, you'll see the word 'modules' used often in the context of npm. But it's mentioned casually, as if it might even just be a syntax difference. </p>\n\n<p>But this distinction of <strong>modules vs. globals</strong> (or modules vs. 'scripts') is possibly the most important difference between Bower and npm. <em>The npm approach of putting everything in modules requires you to change the way you write Javascript for the browser, almost certainly for the better.</em></p>\n\n<h3>The Bower Approach: Global Resources, Like <code>&lt;script&gt;</code> Tags</h3>\n\n<p>At root, Bower is about loading plain-old script files. Whatever those script files contain, Bower will load them. Which basically means that Bower is just like including all your scripts in plain-old <code>&lt;script&gt;</code>'s in the <code>&lt;head&gt;</code> of your HTML. </p>\n\n<p>So, same basic approach you're used to, but you get some nice automation conveniences: </p>\n\n<ul>\n<li>You used to need to include JS dependencies in your project repo (while developing), or get them via CDN. Now, you can skip that extra download weight in the repo, and somebody can do a quick <code>bower install</code> and instantly have what they need, locally.</li>\n<li>If a Bower dependency then specifies its own dependencies in its <code>bower.json</code>, those'll be downloaded for you as well.</li>\n</ul>\n\n<p>But beyond that, <em>Bower doesn't change how we write javascript</em>. Nothing about what goes inside the files loaded by Bower needs to change at all. In particular, this means that the resources provided in scripts loaded by Bower will (usually, but not always) still be defined as <em>global variables</em>, available from anywhere in the browser execution context.</p>\n\n<h3>The npm Approach: Common JS Modules, Explicit Dependency Injection</h3>\n\n<p>All code in Node land (and thus all code loaded via npm) is structured as modules (specifically, as an implementation of the <a href=\"http://wiki.commonjs.org/wiki/Modules\" rel=\"noreferrer\">CommonJS module format</a>, or now, as an ES6 module). So, if you use NPM to handle browser-side dependencies (via Browserify or something else that does the same job), you'll structure your code the same way Node does.</p>\n\n<p>Smarter people than I have tackled the question of 'Why modules?', but here's a capsule summary:</p>\n\n<ul>\n<li>Anything inside a module is effectively <em>namespaced</em>, meaning it's not a global variable any more, and you can't accidentally reference it without intending to.</li>\n<li>Anything inside a module must be intentionally injected into a particular context (usually another module) in order to make use of it</li>\n<li>This means you can have multiple versions of the same external dependency (lodash, let's say) in various parts of your application, and they won't collide/conflict. (This happens surprisingly often, because your own code wants to use one version of a dependency, but one of your external dependencies specifies another that conflicts. Or you've got two external dependencies that each want a different version.)</li>\n<li>Because all dependencies are manually injected into a particular module, it's very easy to reason about them. You know for a fact: <em>\"The only code I need to consider when working on this is what I have intentionally chosen to inject here\"</em>.</li>\n<li>Because even the content of injected modules is <em>encapsulated</em> behind the variable you assign it to, and all code executes inside a limited scope, surprises and collisions become very improbable. It's much, much less likely that something from one of your dependencies will accidentally redefine a global variable without you realizing it, or that you will do so. (It <em>can</em> happen, but you usually have to go out of your way to do it, with something like <code>window.variable</code>. The one accident that still tends to occur is assigning <code>this.variable</code>, not realizing that <code>this</code> is actually <code>window</code> in the current context.)</li>\n<li>When you want to test an individual module, you're able to very easily know: exactly what else (dependencies) is affecting the code that runs inside the module? And, because you're explicitly injecting everything, you can easily mock those dependencies.</li>\n</ul>\n\n<p>To me, the use of modules for front-end code boils down to: working in a much narrower context that's easier to reason about and test, and having greater certainty about what's going on. </p>\n\n<hr>\n\n<p>It only takes about 30 seconds to learn how to use the CommonJS/Node module syntax. Inside a given JS file, which is going to be a module, you first declare any outside dependencies you want to use, like this:</p>\n\n<p><code>var React = require('react');</code></p>\n\n<p>Inside the file/module, you do whatever you normally would, and create some object or function that you'll want to expose to outside users, calling it perhaps <code>myModule</code>. </p>\n\n<p>At the end of a file, you export whatever you want to share with the world, like this:</p>\n\n<p><code>module.exports = myModule;</code></p>\n\n<p>Then, to use a CommonJS-based workflow in the browser, you'll use tools like Browserify to grab all those individual module files, encapsulate their contents at runtime, and inject them into each other as needed. </p>\n\n<p>AND, since ES6 modules (which you'll likely transpile to ES5 with Babel or similar) are gaining wide acceptance, and work both in the browser or in Node 4.0, we should mention a <a href=\"https://24ways.org/2014/javascript-modules-the-es6-way/\" rel=\"noreferrer\">good overview</a> of those as well. </p>\n\n<p>More about patterns for working with modules in <a href=\"http://darrenderidder.github.io/talks/ModulePatterns/\" rel=\"noreferrer\">this deck</a>.</p>\n\n<hr>\n\n<p>EDIT (Feb 2017): Facebook's <a href=\"http://yarnpkg.com\" rel=\"noreferrer\">Yarn</a> is a very important potential replacement/supplement for npm these days: fast, deterministic, offline package-management that builds on what npm gives you. It's worth a look for any JS project, particularly since it's so easy to swap it in/out.</p>\n",
    "score": 230,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 800457,
      "name": "XML",
      "reputation": 13539
    }
  },
  {
    "soID": 11832963,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/11832963",
    "title": null,
    "body": "<p>This may help you:</p>\n\n<pre><code>var result = (Math.round(input*100)/100);\n</code></pre>\n\n<p>for more information, you can have a look at this link</p>\n\n<p><a href=\"https://stackoverflow.com/questions/566564/javascript-functions-math-roundnum-vs-num-tofixed0-and-browser-inconsistenci\">Math.round(num) vs num.toFixed(0) and browser inconsistencies</a></p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 802997,
      "name": "totten",
      "reputation": 1171
    }
  },
  {
    "soID": 38640998,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/38640998",
    "title": null,
    "body": "<p>You can use <a href=\"https://docs.meteor.com/api/ejson.html\" rel=\"nofollow\">ejson</a> to store the objects as strings.</p>\n\n<blockquote>\n  <p>EJSON is an extension of JSON to support more types. It supports all JSON-safe types, as well as:</p>\n  \n  <ul>\n  <li>Date (JavaScript <code>Date</code>)</li>\n  <li>Binary (JavaScript <code>Uint8Array</code> or the result of <a href=\"https://docs.meteor.com/api/ejson.html#ejson_new_binary\" rel=\"nofollow\">EJSON.newBinary</a>)</li>\n  <li>User-defined types (see <a href=\"https://docs.meteor.com/api/ejson.html#ejson_add_type\" rel=\"nofollow\">EJSON.addType</a>. For example, <a href=\"https://docs.meteor.com/api/ejson.html#mongo_object_id\" rel=\"nofollow\">Mongo.ObjectID</a> is implemented this way.)</li>\n  </ul>\n  \n  <p>All EJSON serializations are also valid JSON. For example an object with a date and a binary buffer would be serialized in EJSON as:</p>\n\n<pre><code>{\n  \"d\": {\"$date\": 1358205756553},\n  \"b\": {\"$binary\": \"c3VyZS4=\"}\n}\n</code></pre>\n</blockquote>\n\n<p>Here is my localStorage wrapper using ejson</p>\n\n<p><a href=\"https://github.com/UziTech/storage.js\" rel=\"nofollow\">https://github.com/UziTech/storage.js</a></p>\n\n<p>I added some types to my wrapper including regular expressions and functions</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 806777,
      "name": "Tony Brix",
      "reputation": 2300
    }
  },
  {
    "soID": 20099782,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/20099782",
    "title": null,
    "body": "<p>If you have <a href=\"https://en.wikipedia.org/wiki/Underscore.js\" rel=\"nofollow\">Underscore.js</a> or <a href=\"http://lodash.com/docs#zipObject\" rel=\"nofollow\">lodash</a>, a quick and dirty way to get this done is:</p>\n\n<pre><code>_.object(window.location.search.slice(1).split('&amp;').map(function (val) { return val.split('='); }));\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 14180407,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/14180407",
    "title": null,
    "body": "<p>I was using this line of code:</p>\n\n<pre><code>if (variable.push) {\n   // variable is array, since AMAIK only arrays have push() method.\n}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 811785,
      "name": "Saeed Neamati",
      "reputation": 19270
    }
  },
  {
    "soID": 6976126,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/6976126",
    "title": null,
    "body": "<pre><code>d = document.createElement('div');\n$(d).addClass(classname)\n    .html(text)\n    .appendTo($(\"#myDiv\")) //main div\n.click(function () {\n    $(this).remove();\n})\n    .hide()\n    .slideToggle(300)\n    .delay(2500)\n    .slideToggle(300)\n    .queue(function () {\n    $(this).remove();\n});\n</code></pre>\n",
    "score": 172,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 811984,
      "name": "celoron",
      "reputation": 1885
    }
  },
  {
    "soID": 9713750,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/9713750",
    "title": null,
    "body": "<p>A version adding isEmpty() to the object prototype:</p>\n\n<pre><code>// As a prototype:\nObject.prototype.isEmpty = function() {\n    for(var i in this) \n        return false;\n    return true;\n}\n\n// As a function\nfunction objectIsEmpty(obj) {\n    for (var i in obj) return false;\n    return true;\n}\n\nvar obj = {};\nif (obj.isEmpty()) console.log('empty');\nif (objectIsEmpty(obj)) console.log('empty');\n</code></pre>\n",
    "score": -4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 812991,
      "name": "will Farrell",
      "reputation": 1278
    }
  },
  {
    "soID": 25501002,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/25501002",
    "title": null,
    "body": "<h2>Angular1</h2>\n\n<p>For people who are using <a href=\"http://en.wikipedia.org/wiki/AngularJS\" rel=\"noreferrer\">AngularJS</a>, can handle this situation using <code>Promises</code>.</p>\n\n<p><a href=\"http://liamkaufman.com/blog/2013/09/09/using-angularjs-promises/\" rel=\"noreferrer\">Here</a> it says,</p>\n\n<blockquote>\n  <p>Promises can be used to unnest asynchronous functions and allows one to chain multiple functions together.</p>\n</blockquote>\n\n<p>You can find a nice explanation <a href=\"http://andyshora.com/promises-angularjs-explained-as-cartoon.html\" rel=\"noreferrer\">here</a> also.</p>\n\n<p>Example found in <a href=\"https://docs.angularjs.org/api/ng/service/$q\" rel=\"noreferrer\">docs</a> mentioned below.</p>\n\n<pre><code>  promiseB = promiseA.then(\n    function onSuccess(result) {\n      return result + 1;\n    }\n    ,function onError(err) {\n      //Handle error\n    }\n  );\n\n // promiseB will be resolved immediately after promiseA is resolved \n // and its value will be the result of promiseA incremented by 1.\n</code></pre>\n\n<h2>Angular2 and Later</h2>\n\n<p>In <code>Angular2</code> with look at the following example, but its <a href=\"https://angular-2-training-book.rangle.io/handout/observables/observables_vs_promises.html\" rel=\"noreferrer\">recommended</a> to use <code>Observables</code> with <code>Angular2</code>.</p>\n\n<pre><code> search(term: string) {\n     return this.http\n  .get(`https://api.spotify.com/v1/search?q=${term}&amp;type=artist`)\n  .map((response) =&gt; response.json())\n  .toPromise();\n</code></pre>\n\n<p>}</p>\n\n<p>You can consume that in this way,</p>\n\n<pre><code>search() {\n    this.searchService.search(this.searchField.value)\n      .then((result) =&gt; {\n    this.result = result.artists.items;\n  })\n  .catch((error) =&gt; console.error(error));\n}\n</code></pre>\n\n<p>See the <a href=\"https://angular-2-training-book.rangle.io/handout/http/requests_as_promises.html\" rel=\"noreferrer\">original</a> post here. But Typescript does not support <a href=\"http://www.datchley.name/es6-promises/\" rel=\"noreferrer\">native es6 Promises</a>, if you want to use it, you might need plugin for that.</p>\n\n<p>Additionally here is the promises <a href=\"https://github.com/promises-aplus/promises-spec\" rel=\"noreferrer\">spec</a> define here.</p>\n",
    "score": 62,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 814025,
      "name": "Maleen Abewardana",
      "reputation": 3176
    }
  },
  {
    "soID": 24103413,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/24103413",
    "title": null,
    "body": "<p>Besause the asker's ['<em>ultimate goal is to loop through some key value pairs</em>'] and finally don't looking for a loop.</p>\n\n<pre><code>var p ={\"p1\":\"value1\",\"p2\":\"value2\",\"p3\":\"value3\"};\nif('p1' in p){\n  var val=p['p1'];\n  ...\n}\n</code></pre>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 817152,
      "name": "B.F.",
      "reputation": 349
    }
  },
  {
    "soID": 19493536,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/19493536",
    "title": null,
    "body": "<p>In case your are reading text from clipboard in a Chrome extension, with 'clipboardRead' permission allowed, you can use below code:</p>\n\n<pre><code>function readTextFromClipboardInChromeExtension() {\n    var ta = $('&lt;textarea/&gt;');\n    $('body').append(ta);\n    ta.focus();\n    document.execCommand('paste');\n    var text = ta.val();\n    ta.blur();\n    ta.remove();\n    return text;\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 818319,
      "name": "supNate",
      "reputation": 290
    }
  },
  {
    "soID": 21067750,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/21067750",
    "title": null,
    "body": "<p>The optimized approach is to cache the length of array and using single var pattern initializing all variables with single var keyword.</p>\n\n<pre><code>var i, max, myStringArray = [\"Hello\",\"World\"];\nfor (i = 0, max = myStringArray.length; i &lt; max; i++) {\n    alert(myStringArray[i]);\n   //Do something\n}\n</code></pre>\n\n<p>If order of iteration does not matter than you should try reversed loop, it is fastest as it reduce overhead condition testing and decrement is in one statement:</p>\n\n<pre><code>var i,myStringArray = [\"item1\",\"item2\"];\nfor (i =  myStringArray.length; i--) {\n    alert(myStringArray[i]);\n}\n</code></pre>\n\n<p>or better and cleaner to use while loop:</p>\n\n<pre><code>var myStringArray = [\"item1\",\"item2\"],i = myStringArray.length;\nwhile(i--) {\n   // do something with fruits[i]\n}\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 821057,
      "name": "Zaheer Ahmed",
      "reputation": 19521
    }
  },
  {
    "soID": 13377128,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/13377128",
    "title": null,
    "body": "<p>One possible solution:</p>\n\n<pre><code>function ConvertFirstCharacterToUpperCase(text) {\n    return text.substr(0, 1).toUpperCase() + text.substr(1);    \n}\n</code></pre>\n\n<p>Use this:</p>\n\n<pre><code> alert(ConvertFirstCharacterToUpperCase(\"this is string\"));\n</code></pre>\n\n<p>Here is working <a href=\"http://jsfiddle.net/zaheerahmed/ffVpc/1/\" rel=\"nofollow noreferrer\">JS Fiddle</a></p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 821057,
      "name": "Zaheer Ahmed",
      "reputation": 19521
    }
  },
  {
    "soID": 17177624,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/17177624",
    "title": null,
    "body": "<p>Every object has an internal property, [[Prototype]], linking it to another object:</p>\n\n<pre><code>object [[Prototype]] -&gt; anotherObject\n</code></pre>\n\n<p>Some environments expose that property as <code>__proto__</code>:</p>\n\n<pre><code>anObject.__proto__ === anotherObject\n</code></pre>\n\n<p>You create the [[Prototype]] link when creating an object:</p>\n\n<pre><code>var object = Object.create( anotherObject )\n// imagine:\n// object.__proto__ = anotherObject\n</code></pre>\n\n<p>In traditional javascript, the linked object is the <code>prototype</code> property of a function:</p>\n\n<pre><code>object [[Prototype]] -&gt; aFunction.prototype\n</code></pre>\n\n<p>and you create the [[Prototype]] link with <code>new</code> (but this isn't obvious):</p>\n\n<pre><code>var object = new aFunction;\n// imagine:\n// object.__proto__ = aFunction.prototype;\n</code></pre>\n\n<p>Remember:</p>\n\n<ul>\n<li>Every object has a link, [[Prototype]], sometimes exposed as <code>__proto__</code>.</li>\n<li>Every function has a <code>prototype</code> property. It may be a <strong>source</strong> of values shared with other objects, or it may go unused.</li>\n</ul>\n",
    "score": 27,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 822138,
      "name": "sam",
      "reputation": 13397
    }
  },
  {
    "soID": 14624061,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/14624061",
    "title": null,
    "body": "<p>Old question, but just had the issue. Including JQuery is not really a good idea if your only purpose is to check if the object is not empty. Instead, just deep into <a href=\"http://code.jquery.com/jquery-1.9.0.js\" rel=\"nofollow noreferrer\">JQuery's code</a>, and you will get the answer:</p>\n\n<pre><code>function isEmptyObject(obj) {\n    var name;\n    for (name in obj) {\n        if (obj.hasOwnProperty(name)) {\n            return false;\n        }\n    }\n    return true;\n}\n</code></pre>\n",
    "score": 45,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 828414,
      "name": "Jonathan Petitcolas",
      "reputation": 1621
    }
  },
  {
    "soID": 30672275,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/30672275",
    "title": null,
    "body": "<p>Another alternative is to use <a href=\"http://arasatasaygin.github.io/is.js/\" rel=\"nofollow noreferrer\">is.js</a> (14kB) as opposed to <a href=\"http://jquery.com/\" rel=\"nofollow noreferrer\">jquery</a> (32kB), <a href=\"https://lodash.com/\" rel=\"nofollow noreferrer\">lodash</a> (50kB), or <a href=\"http://underscorejs.org/\" rel=\"nofollow noreferrer\">underscore</a> (16.4kB). is.js proved to be the fastest library among aforementioned libraries that could be used to determine whether an object is empty.</p>\n\n<p><a href=\"http://jsperf.com/check-empty-object-using-libraries\" rel=\"nofollow noreferrer\">http://jsperf.com/check-empty-object-using-libraries</a></p>\n\n<p>Obviously all these libraries are not exactly the same so if you need to easily manipulate the DOM then <a href=\"http://jquery.com/\" rel=\"nofollow noreferrer\">jquery</a> might still be a good choice or if you need more than just type checking then <a href=\"https://lodash.com/\" rel=\"nofollow noreferrer\">lodash</a> or <a href=\"http://underscorejs.org/\" rel=\"nofollow noreferrer\">underscore</a> might be good. As for <a href=\"http://arasatasaygin.github.io/is.js/\" rel=\"nofollow noreferrer\">is.js</a>, here is the syntax:</p>\n\n<pre><code>var a = {};\nis.empty(a); // true\nis.empty({\"hello\": \"world\"}) // false\n</code></pre>\n\n<p>Like underscore's and lodash's <code>_.isObject()</code>, this is not exclusively for <code>objects</code> but also applies to <code>arrays</code> and <code>strings</code>.</p>\n\n<p>Under the hood this library is using <code>Object.getOwnPropertyNames</code> which is similar to <code>Object.keys</code> but <code>Object.getOwnPropertyNames</code> is a more thorough since it will return enumerable and non-enumerable properties as described <a href=\"https://stackoverflow.com/questions/22658488/object-getownpropertynames-vs-object-keys\">here</a>.</p>\n\n<pre><code>is.empty = function(value) {\n    if(is.object(value)){\n        var num = Object.getOwnPropertyNames(value).length;\n        if(num === 0 || (num === 1 &amp;&amp; is.array(value)) || (num === 2 &amp;&amp; is.arguments(value))){\n            return true;\n        }\n        return false;\n    } else {\n        return value === '';\n    }\n};\n</code></pre>\n\n<p>If you don't want to bring in a library (which is understandable) and you know that you are only checking objects (not arrays or strings) then the following function should suit your needs.</p>\n\n<pre><code>function isEmptyObject( obj ) {\n    return Object.getOwnPropertyNames(obj).length === 0;\n}\n</code></pre>\n\n<p>This is only a bit faster than is.js though just because you aren't checking whether it is an object.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 837017,
      "name": "cwadding",
      "reputation": 642
    }
  },
  {
    "soID": 38204889,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/38204889",
    "title": null,
    "body": "<p>I'll add one more approach to this.</p>\n\n<pre><code>number = 16.6666666;\nconsole.log(parseFloat(number.toFixed(2)));\n\"16.67\"\n\nnumber = 16.6;\nconsole.log(parseFloat(number.toFixed(2)));\n\"16.6\"\n\nnumber = 16;\nconsole.log(parseFloat(number.toFixed(2)));\n\"16\"\n</code></pre>\n\n<p><code>.toFixed(2)</code> returns a string with exactily 2 decimal points, that may or may not be trailing zeros. Doing a <code>parseFloat()</code> will eliminate those trailing zeros.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 841151,
      "name": "Marcos Lima",
      "reputation": 478
    }
  },
  {
    "soID": 6672823,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/6672823",
    "title": null,
    "body": "<p>Here's what we all want:</p>\n\n<pre><code>function Enum(constantsList) {\n    for (var i in constantsList) {\n        this[constantsList[i]] = i;\n    }\n}\n</code></pre>\n\n<p>Now you can create your enums:</p>\n\n<pre><code>var YesNo = new Enum(['NO', 'YES']);\nvar Color = new Enum(['RED', 'GREEN', 'BLUE']);\n</code></pre>\n\n<p>By doing this, constants can be acessed in the usual way (YesNo.YES, Color.GREEN) and they get a sequential int value (NO = 0, YES = 1; RED = 0, GREEN = 1, BLUE = 2).</p>\n\n<p>You can also add methods, by using Enum.prototype:</p>\n\n<pre><code>Enum.prototype.values = function() {\n    return this.allValues;\n    /* for the above to work, you'd need to do\n            this.allValues = constantsList at the constructor */\n};\n</code></pre>\n\n<p><br>\nEdit - small improvement - now with varargs: (unfortunately it doesn't work properly on IE :S... should stick with previous version then)</p>\n\n<pre><code>function Enum() {\n    for (var i in arguments) {\n        this[arguments[i]] = i;\n    }\n}\n\nvar YesNo = new Enum('NO', 'YES');\nvar Color = new Enum('RED', 'GREEN', 'BLUE');\n</code></pre>\n",
    "score": 42,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 841793,
      "name": "Andre 'Fi'",
      "reputation": 421
    }
  },
  {
    "soID": 10183130,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/10183130",
    "title": null,
    "body": "<p>I would thoroughly recommend making use of the <a href=\"http://documentcloud.github.com/underscore\">underscore.js</a> library. It provides you with various functions that you can use to iterate over arrays/collections.</p>\n\n<p>For instance:</p>\n\n<pre><code>_.each([1, 2, 3], function(num){ alert(num); });\n=&gt; alerts each number in turn...\n</code></pre>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 845240,
      "name": "Andrew Thomson",
      "reputation": 960
    }
  },
  {
    "soID": 40141457,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/40141457",
    "title": null,
    "body": "<p>I just wanted to add that</p>\n\n<pre><code>if(variableThing){\n  // do something\n}\n</code></pre>\n\n<p>is the same as</p>\n\n<pre><code>if(!!variableThing){\n  // do something\n}\n</code></pre>\n\n<p>But this can be an issue when something is undefined.</p>\n\n<pre><code>// a is undefined, b is empty object.\nvar a, b = {};\n\n// Both of these give error a.foo is not defined etc.\n// you'd see the same behavior for !!a.foo and !!b.foo.bar\n\na.foo \nb.foo.bar\n\n// This works -- these return undefined\n\na &amp;&amp; a.foo\nb.foo &amp;&amp; b.foo.bar\nb &amp;&amp; b.foo &amp;&amp; b.foo.bar\n</code></pre>\n\n<p>The trick here is the chain of <code>&amp;&amp;</code>s will return <strong>the first falsey value</strong> it finds -- and this can be fed to an if statement etc.  So if b.foo is undefined, it will return undefined and skip the <code>b.foo.bar</code> statement, and we get no error.</p>\n\n<p>The above return undefined but if you have an empty string, false, null, 0, undefined those values will return and soon as we encounter them in the chain -- <code>[]</code> and <code>{}</code> are both truthy.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 845413,
      "name": "Ryan Taylor",
      "reputation": 2690
    }
  },
  {
    "soID": 23867090,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/23867090",
    "title": null,
    "body": "<p>There are multiple ways to achieve this</p>\n\n<p><strong>1. Slash concatenation</strong></p>\n\n<pre><code>  var MultiLine=  '1\\\n    2\\\n    3\\\n    4\\\n    5\\\n    6\\\n    7\\\n    8\\\n    9';\n</code></pre>\n\n<p><strong>2. regular concatenation</strong></p>\n\n<pre><code>var MultiLine = '1'\n+'2'\n+'3'\n+'4'\n+'5';\n</code></pre>\n\n<p><strong>3. Array Join concatenation</strong></p>\n\n<pre><code>var MultiLine = [\n'1',\n'2',\n'3',\n'4',\n'5'\n].join('');\n</code></pre>\n\n<p>Performance wise, <strong>Slash concatenation</strong> (first one) is the fastest.</p>\n\n<p><strong>Refer</strong> <a href=\"http://jsperf.com/zp-string-concatenation/6\">this test case</a> for more details regarding the performance </p>\n\n<p><strong>Update:</strong></p>\n\n<p>With the <strong>ES2015</strong>, we can take advantage of its Template strings feature. With it, we just need to use back-ticks for creating multi line strings</p>\n\n<p>Example:</p>\n\n<pre><code> `&lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;h2&gt;{{hero.name}} details!&lt;/h2&gt;\n  &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;&lt;label&gt;name: &lt;/label&gt;{{hero.name}}&lt;/div&gt;\n  `\n</code></pre>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 848841,
      "name": "vignesh",
      "reputation": 3037
    }
  },
  {
    "soID": 6879319,
    "parentID": 2067472,
    "url": "https://stackoverflow.com/q/6879319",
    "title": null,
    "body": "<p><strong>JSONP</strong> is really a simple trick to overcome the <strong>XMLHttpRequest</strong> same domain policy. (As you know one cannot send <strong>AJAX (XMLHttpRequest)</strong> request to a different domain.)</p>\n\n<p>So - instead of using <strong>XMLHttpRequest</strong> we have to use <strong>script</strong> HTML tags, the ones you usually use to load js files, in order for js to get data from another domain. Sounds weird?</p>\n\n<p>Thing is - turns out <strong>script</strong> tags can be used in a fashion similar to <strong>XMLHttpRequest</strong>! Check this out:</p>\n\n<pre><code>script = document.createElement('script');\nscript.type = 'text/javascript';\nscript.src = 'http://www.someWebApiServer.com/some-data';\n</code></pre>\n\n<p>You will end up with a <strong>script</strong> segment that looks like this after it loads the data:</p>\n\n<pre><code>&lt;script&gt;\n{['some string 1', 'some data', 'whatever data']}\n&lt;/script&gt;\n</code></pre>\n\n<p>However this is a bit inconvenient, because we have to fetch this array from <strong>script</strong> tag. So <strong>JSONP</strong> creators decided that this will work better(and it is):</p>\n\n<pre><code>script = document.createElement('script');\nscript.type = 'text/javascript';\nscript.src = 'http://www.someWebApiServer.com/some-data<b>?callback=my_callback</b>';\n</code></pre>\n\n<p>Notice the <strong>my_callback</strong> function over there? So - when <strong>JSONP</strong> server receives your request and finds callback parameter - instead of returning plain js array it'll return this:</p>\n\n<pre><code>my_callback({['some string 1', 'some data', 'whatever data']});\n</code></pre>\n\n<p><strong>See where the profit is:</strong> now we get automatic callback (my_callback) that'll be triggered once we get the data.<br>\nThat's all there is to know about <strong>JSONP</strong>: it's a callback and script tags.</p>\n\n<p><strong>NOTE: these are simple examples of JSONP usage,  these are not production ready scripts.</strong></p>\n\n<p><strong>Basic JavaScript example (simple Twitter feed using JSONP)</strong></p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id = 'twitterFeed'&gt;&lt;/div&gt;\n        &lt;script&gt;\n        function myCallback(dataWeGotViaJsonp){\n            var text = '';\n            var len = dataWeGotViaJsonp.length;\n            for(var i=0;i&lt;len;i++){\n                twitterEntry = dataWeGotViaJsonp[i];\n                text += '&lt;p&gt;&lt;img src = \"' + twitterEntry.user.profile_image_url_https +'\"/&gt;' + twitterEntry['text'] + '&lt;/p&gt;'\n            }\n            document.getElementById('twitterFeed').innerHTML = text;\n        }\n        &lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"http://twitter.com/status/user_timeline/padraicb.json?count=10&amp;callback=myCallback\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><strong>Basic jQuery example (simple Twitter feed using JSONP)</strong></p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js\"&gt;&lt;/script&gt;\n        &lt;script&gt;\n            $(document).ready(function(){\n                $.ajax({\n                    url: 'http://twitter.com/status/user_timeline/padraicb.json?count=10',\n                    dataType: 'jsonp',\n                    success: function(dataWeGotViaJsonp){\n                        var text = '';\n                        var len = dataWeGotViaJsonp.length;\n                        for(var i=0;i&lt;len;i++){\n                            twitterEntry = dataWeGotViaJsonp[i];\n                            text += '&lt;p&gt;&lt;img src = \"' + twitterEntry.user.profile_image_url_https +'\"/&gt;' + twitterEntry['text'] + '&lt;/p&gt;'\n                        }\n                        $('#twitterFeed').html(text);\n                    }\n                });\n            })\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id = 'twitterFeed'&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><br>\n<strong>JSONP</strong> stands for <strong>JSON with Padding</strong>. (very poorly named technique as it really has nothing to do with what most people would think of as “padding”.)</p>\n",
    "score": 596,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 849004,
      "name": "ThatGuy",
      "reputation": 11890
    }
  },
  {
    "soID": 25180214,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/25180214",
    "title": null,
    "body": "<p>This is what I use religiously: </p>\n\n<pre><code>function capitalizeMe(str,force){\n    str=force ? str.toLowerCase() : str;  \n    return str.replace(/(\\b)([a-zA-Z])/g,\n    function(firstLetter){\n        return firstLetter.toUpperCase();\n    });\n}\n\nvar firstName = capitalizeMe($firstName.val());\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 860326,
      "name": "kaleazy",
      "reputation": 2429
    }
  },
  {
    "soID": 19352068,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/19352068",
    "title": null,
    "body": "<p>My version of array-based join for string concat:</p>\n\n<pre><code>var c = []; //c stands for content\nc.push(\"&lt;div id='thisDiv' style='left:10px'&gt;&lt;/div&gt;\");\nc.push(\"&lt;div onclick='showDo(\\'something\\');'&gt;&lt;/div&gt;\");\n$(body).append(c.join('\\n'));\n</code></pre>\n\n<p>This has worked well for me, especially as I often insert values into the html constructed this way. But it has lots of limitations. Indentation would be nice. Not having to deal with nested quotation marks would be really nice, and just the bulkyness of it bothers me.</p>\n\n<p>Is the .push() to add to the array taking up a lot of time? See this related answer:</p>\n\n<p>(<a href=\"https://stackoverflow.com/questions/15649899/is-there-a-reason-javascript-developers-dont-use-array-push\">Is there a reason JavaScript developers don&#39;t use Array.push()?</a>) </p>\n\n<p>After looking at these (opposing) test runs, it looks like .push() is fine for string arrays which will not likely grow over 100 items - I will avoid it in favor of indexed adds for larger arrays.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 870687,
      "name": "KTys",
      "reputation": 155
    }
  },
  {
    "soID": 30577649,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/30577649",
    "title": null,
    "body": "<p>Pretty Print The Date Like This.</p>\n\n<blockquote>\n  <p>June 1st, 2015 11:36:48 AM</p>\n</blockquote>\n\n<p><a href=\"https://gist.github.com/Gerst20051/7d72693f722bbb0f6b58\" rel=\"nofollow\">https://gist.github.com/Gerst20051/7d72693f722bbb0f6b58</a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 882371,
      "name": "Andrew Anthony Gerst",
      "reputation": 1839
    }
  },
  {
    "soID": 8337001,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/8337001",
    "title": null,
    "body": "<p>I came to this question because I was looking for a simple way to maintain a collection of useful JavaScript plugins. After seeing some of the solutions here, I came up with this:</p>\n\n<p>1) Set up a file called \"plugins.js\" (or extentions.js or what have you). Keep your plugin files together with that one master file.</p>\n\n<p>2) plugins.js will have an array called \"pluginNames[]\" that we will iterate over each(),\nthen append a  tag to the head for each plugin</p>\n\n<pre><code>//set array to be updated when we add or remove plugin files\n var pluginNames = [\"lettering\", \"fittext\", \"butterjam\", etc.];\n//one script tag for each plugin\n $.each(pluginNames, function(){\n   $('head').append('&lt;script src=\"js/plugins/' + this + '.js\"&gt;&lt;/script&gt;');\n });\n</code></pre>\n\n<p>3) manually call just the one file in your head:<br>\n<code>&lt;script src=\"js/plugins/plugins.js\"&gt;&lt;/script&gt;</code></p>\n\n<p>UPDATE: I found that even though all of the plugins were getting dropped into the head tag the way they ought to, they weren't always being run by the browser when you click into the page or refresh.</p>\n\n<p>I found it's more reliable to just write the script tags in a PHP include. You only have to write it once and that's just as much work as calling the plugin using JavaScript.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 891126,
      "name": "rgb_life",
      "reputation": 118
    }
  },
  {
    "soID": 7582340,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/7582340",
    "title": null,
    "body": "<p>It is worth looking in <em><a href=\"http://www.dustindiaz.com/rock-solid-addevent/\" rel=\"nofollow\">Rock Solid addEvent()</a></em> and <a href=\"http://www.braksator.com/how-to-make-your-own-jquery\" rel=\"nofollow\">http://www.braksator.com/how-to-make-your-own-jquery</a>.</p>\n\n<p>Here is the code in case the site goes down</p>\n\n<pre><code>function addEvent(obj, type, fn) {\n    if (obj.addEventListener) {\n        obj.addEventListener(type, fn, false);\n        EventCache.add(obj, type, fn);\n    }\n    else if (obj.attachEvent) {\n        obj[\"e\"+type+fn] = fn;\n        obj[type+fn] = function() { obj[\"e\"+type+fn]( window.event ); }\n        obj.attachEvent( \"on\"+type, obj[type+fn] );\n        EventCache.add(obj, type, fn);\n    }\n    else {\n        obj[\"on\"+type] = obj[\"e\"+type+fn];\n    }\n}\n\nvar EventCache = function(){\n    var listEvents = [];\n    return {\n        listEvents : listEvents,\n        add : function(node, sEventName, fHandler){\n            listEvents.push(arguments);\n        },\n        flush : function(){\n            var i, item;\n            for(i = listEvents.length - 1; i &gt;= 0; i = i - 1){\n                item = listEvents[i];\n                if(item[0].removeEventListener){\n                    item[0].removeEventListener(item[1], item[2], item[3]);\n                };\n                if(item[1].substring(0, 2) != \"on\"){\n                    item[1] = \"on\" + item[1];\n                };\n                if(item[0].detachEvent){\n                    item[0].detachEvent(item[1], item[2]);\n                };\n                item[0][item[1]] = null;\n            };\n        }\n    };\n}();\n\n// Usage\naddEvent(window, 'unload', EventCache.flush);\naddEvent(window, 'load', function(){alert(\"I'm ready\");});\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 893032,
      "name": "Ben",
      "reputation": 1075
    }
  },
  {
    "soID": 23087471,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/23087471",
    "title": null,
    "body": "<p>For <a href=\"http://en.wikipedia.org/wiki/Node.js\">Node.js</a> users there is <a href=\"http://nodejs.org/api/util.html#util_util_format_format\"><code>util.format</code></a> which has printf-like functionality:</p>\n\n<pre><code>util.format(\"%s world\", \"Hello\")\n</code></pre>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13554835,
    "parentID": 1279957,
    "url": "https://stackoverflow.com/q/13554835",
    "title": null,
    "body": "<p>If the <code>div</code> where you want to put your element has content inside, and you want the element to show <em>after</em> the main content:</p>\n\n<pre><code>  $(\"#destination\").append($(\"#source\"));\n</code></pre>\n\n<p>If the <code>div</code> where you want to put your element has content inside, and you want to show the element <em>before</em> the main content:</p>\n\n<pre><code>$(\"#destination\").prepend($(\"#source\"));\n</code></pre>\n\n<p>If the <code>div</code> where you want to put your element is empty, or you want to <em>replace</em> it entirely:</p>\n\n<pre><code>$(\"#element\").html('&lt;div id=\"source\"&gt;...&lt;/div&gt;');\n</code></pre>\n\n<hr>\n\n<p>If you want to duplicate an element before any of the above:</p>\n\n<pre><code>$(\"#destination\").append($(\"#source\").clone());\n// etc.\n</code></pre>\n",
    "score": 75,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23877420,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/23877420",
    "title": null,
    "body": "<p><strong>0)</strong> Two different things can be called \"prototype\":</p>\n\n<ul>\n<li><p>the prototype property, as in <code>obj.prototype</code></p></li>\n<li><p>the prototype internal property, denoted as <code>[[Prototype]]</code> <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2\" rel=\"noreferrer\">in ES5</a>.</p>\n\n<p>It can be retrieved via the ES5 <code>Object.getPrototypeOf()</code>.</p>\n\n<p>Firefox makes it accessible through the <code>__proto__</code> property as an extension. <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-additional-ecmascript-features-for-web-browsers\" rel=\"noreferrer\">ES6 now mentions</a> some optional requirements for <code>__proto__</code>.</p></li>\n</ul>\n\n<hr>\n\n<p><strong>1)</strong> Those concepts exist to answer the question:</p>\n\n<blockquote>\n  <p>When I do <code>obj.property</code>, where does JS look for <code>.property</code>?</p>\n</blockquote>\n\n<p>Intuitively, classical inheritance should affect property lookup.</p>\n\n<hr>\n\n<p><strong>2)</strong></p>\n\n<ul>\n<li><code>__proto__</code> is used for the dot <code>.</code> property lookup as in <code>obj.property</code>. </li>\n<li><code>.prototype</code> is <em>not</em> used for lookup directly, only indirectly as it determines <code>__proto__</code> at object creation with <code>new</code>.</li>\n</ul>\n\n<p>Lookup order is:</p>\n\n<ul>\n<li><code>obj</code> properties added with <code>obj.p = ...</code> or <code>Object.defineProperty(obj, ...)</code></li>\n<li>properties of <code>obj.__proto__</code></li>\n<li>properties of <code>obj.__proto__.__proto__</code>, and so on</li>\n<li>if some <code>__proto__</code> is <code>null</code>, return <code>undefined</code>.</li>\n</ul>\n\n<p>This is the so-called <em>prototype chain</em>.</p>\n\n<p>You can avoid <code>.</code> lookup with <code>obj.hasOwnProperty('key')</code> and <code>Object.getOwnPropertyNames(f)</code></p>\n\n<hr>\n\n<p><strong>3)</strong> There are two main ways to set <code>obj.__proto__</code>:</p>\n\n<ul>\n<li><p><code>new</code>:</p>\n\n<pre><code>var F = function() {}\nvar f = new F()\n</code></pre>\n\n<p>then <code>new</code> has set:</p>\n\n<pre><code>f.__proto__ === F.prototype\n</code></pre>\n\n<p><em>This</em> is where <code>.prototype</code> gets used.</p></li>\n<li><p><code>Object.create</code>:</p>\n\n<pre><code> f = Object.create(proto)\n</code></pre>\n\n<p>sets:</p>\n\n<pre><code>f.__proto__ === proto\n</code></pre></li>\n</ul>\n\n<hr>\n\n<p><strong>4)</strong> The code:</p>\n\n<pre><code>var F = function() {}\nvar f = new F()\n</code></pre>\n\n<p>Corresponds to the following diagram:</p>\n\n<pre><code>(Function)       (  F  )                                      (f)\n |  ^             | | ^                                        |\n |  |             | | |                                        |\n |  |             | | +-------------------------+              |\n |  |constructor  | |                           |              |\n |  |             | +--------------+            |              |\n |  |             |                |            |              |\n |  |             |                |            |              |\n |[[Prototype]]   |[[Prototype]]   |prototype   |constructor   |[[Prototype]]\n |  |             |                |            |              |\n |  |             |                |            |              |\n |  |             |                | +----------+              |\n |  |             |                | |                         |\n |  |             |                | | +-----------------------+\n |  |             |                | | |\n v  |             v                v | v\n(Function.prototype)              (F.prototype)\n |                                 |\n |                                 |\n |[[Prototype]]                    |[[Prototype]]\n |                                 |\n |                                 |\n | +-------------------------------+\n | |\n v v\n(Object.prototype)\n | | ^\n | | |\n | | +---------------------------+\n | |                             |\n | +--------------+              |\n |                |              |\n |                |              |\n |[[Prototype]]   |constructor   |prototype\n |                |              |\n |                |              |\n |                | -------------+\n |                | |\n v                v |\n(null)           (Object)\n</code></pre>\n\n<p>This diagram shows many language predefined object nodes: <code>null</code>, <code>Object</code>, <code>Object.prototype</code>, <code>Function</code> and <code>Function.prototype</code>. Our 2 lines of code only created <code>f</code>, <code>F</code> and <code>F.prototype</code>.</p>\n\n<hr>\n\n<p><strong>5)</strong> <code>.constructor</code> normally comes from <code>F.prototype</code> through the <code>.</code> lookup:</p>\n\n<pre><code>f.constructor === F\n!f.hasOwnProperty('constructor')\nObject.getPrototypeOf(f) === F.prototype\nF.prototype.hasOwnProperty('constructor')\nF.prototype.constructor === f.constructor\n</code></pre>\n\n<p>When we write <code>f.constructor</code>, JavaScript does the <code>.</code> lookup as:</p>\n\n<ul>\n<li><code>f</code> does not have <code>.constructor</code></li>\n<li><code>f.__proto__ === F.prototype</code> has <code>.constructor === F</code>, so take it</li>\n</ul>\n\n<p>The result <code>f.constructor == F</code> is intuitively correct, since <code>F</code> is used to construct <code>f</code>, e.g. set fields, much like in classic OOP languages. </p>\n\n<hr>\n\n<p><strong>6)</strong> If you modify <code>prototype</code>, you add new properties to all objects that have it as <code>[[Prototype]]</code> because of the <code>.</code> lookup, even if they were created before changing the prototype.</p>\n\n<pre><code>f = new F()\nF.prototype.a = 1\nf.a === 1\n</code></pre>\n\n<p>You could also set <code>prototype</code> to any object:</p>\n\n<pre><code>f = new F()\nF.prototype = {a:1}\nf.a === 1\n</code></pre>\n\n<p>But that wouldn't be cool because then:</p>\n\n<pre><code>f.constructor === Object\n</code></pre>\n\n<p>and not <code>F</code> as conventional. This happens because on the <code>.</code> lookup for <code>constructor</code>:</p>\n\n<ul>\n<li><code>f</code> does not have <code>.constructor</code></li>\n<li><code>f.__proto__ === {a:1}</code> is a <code>new Object</code> and does not have <code>.constructor</code> either</li>\n<li><code>f.__proto__.__proto__</code> is <code>Object.prototype</code>, which has <code>.constructor === Object</code>. So JavaScript takes it.</li>\n</ul>\n\n<hr>\n\n<p><strong>7)</strong> Classical inheritance syntax can be achieved by manipulating prototypes chains.</p>\n\n<p>ES6 adds the <code>class</code> and <code>extends</code> keywords, which are simply syntax sugar for previously possible prototype manipulation madness.</p>\n\n<pre><code>class C {\n    constructor(i) {\n        this.i = i\n    }\n    inc() {\n        return this.i + 1\n    }\n}\n\nclass D extends C {\n    constructor(i) {\n        super(i)\n    }\n    inc2() {\n        return this.i + 2\n    }\n}\n</code></pre>\n\n\n\n<pre><code>// Inheritance syntax works as expected.\n(new C(1)).inc() === 2\n(new D(1)).inc() === 2\n(new D(1)).inc2() === 3\n</code></pre>\n\n\n\n<pre><code>// \"Classes\" are just function objects.\nC.constructor === Function\nC.__proto__ === Function.prototype\nD.constructor === Function\n// D is a function \"indirectly\" through the chain.\nD.__proto__ === C\nD.__proto__.__proto__ === Function.prototype\n</code></pre>\n\n\n\n<pre><code>// \"extends\" sets up the prototype chain so that base class\n// lookups will work as expected\nvar d = new D(1)\nd.__proto__ === D.prototype\nD.prototype.__proto__ === C.prototype\n// This is what `d.inc` actually does.\nd.__proto__.__proto__.inc === C.prototype.inc\n</code></pre>\n\n\n\n<pre><code>// Class variables\n// No ES6 syntax sugar apparently:\n// http://stackoverflow.com/questions/22528967/es6-class-variable-alternatives\nC.c = 1\nC.c === 1\n// Because `D.__proto__ === C`.\nD.c === 1\n// Nothing makes this work.\nd.c === undefined\n</code></pre>\n\n<p>Simplified diagram without all predefined objects:</p>\n\n<pre><code>      __proto__\n(C)&lt;---------------(D)         (d)\n| |                |           |\n| |                |           |\n| |prototype       |prototype  |__proto__\n| |                |           |\n| |                |           |\n| |                | +---------+\n| |                | |\n| |                | |\n| |                v v\n|__proto__        (D.prototype)\n| |                |\n| |                |\n| |                |__proto__\n| |                |\n| |                |\n| | +--------------+\n| | |\n| | |\n| v v\n| (C.prototype)---&gt;(inc)\n|\nv\nFunction.prototype\n</code></pre>\n",
    "score": 39,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 895245,
      "name": "Ciro Santilli 刘晓波死 六四事件 法轮功",
      "reputation": 82635
    }
  },
  {
    "soID": 7082706,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/7082706",
    "title": null,
    "body": "<pre><code>$(\"option:selected\", $(\"#TipoRecorde\")).text()\n</code></pre>\n",
    "score": 56,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 897238,
      "name": "Rafael",
      "reputation": 561
    }
  },
  {
    "soID": 9229385,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/9229385",
    "title": null,
    "body": "<blockquote>\n  <p><strong><em>UPDATED!</em></strong>, Scroll Down</p>\n</blockquote>\n\n<p>If you want something simple pretty to the end user ... <em><code>Also, fixed a small suffix issue in the first version below. Now properly returns suffix.</code></em></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var objToday = new Date(),\r\n\tweekday = new Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'),\r\n\tdayOfWeek = weekday[objToday.getDay()],\r\n\tdomEnder = function() { var a = objToday; if (/1/.test(parseInt((a + \"\").charAt(0)))) return \"th\"; a = parseInt((a + \"\").charAt(1)); return 1 == a ? \"st\" : 2 == a ? \"nd\" : 3 == a ? \"rd\" : \"th\" }(),\r\n\tdayOfMonth = today + ( objToday.getDate() &lt; 10) ? '0' + objToday.getDate() + domEnder : objToday.getDate() + domEnder,\r\n\tmonths = new Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'),\r\n\tcurMonth = months[objToday.getMonth()],\r\n\tcurYear = objToday.getFullYear(),\r\n\tcurHour = objToday.getHours() &gt; 12 ? objToday.getHours() - 12 : (objToday.getHours() &lt; 10 ? \"0\" + objToday.getHours() : objToday.getHours()),\r\n\tcurMinute = objToday.getMinutes() &lt; 10 ? \"0\" + objToday.getMinutes() : objToday.getMinutes(),\r\n\tcurSeconds = objToday.getSeconds() &lt; 10 ? \"0\" + objToday.getSeconds() : objToday.getSeconds(),\r\n\tcurMeridiem = objToday.getHours() &gt; 12 ? \"PM\" : \"AM\";\r\nvar today = curHour + \":\" + curMinute + \".\" + curSeconds + curMeridiem + \" \" + dayOfWeek + \" \" + dayOfMonth + \" of \" + curMonth + \", \" + curYear;\r\n\r\ndocument.getElementsByTagName('h1')[0].textContent = today;</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;h1&gt;&lt;/h1&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<blockquote>\n  <p><strong>UBBER UPDATE</strong> After much procrastination, I've finally <a href=\"https://github.com/JDMcKinstry/JavaScriptDateFormat\"><strong>GitHubbed</strong></a> and updated this with the final solution I've been using for myself. It's even had some last minute edits to make it sweeter! If you're looking for the old <a href=\"http://jsfiddle.net/SpYk3/rYzAY/\">jsFiddle, please see this</a>.</p>\n</blockquote>\n\n<p>This update comes in <s>2</s> flavors, still relatively small, though not as small as my above, original answer. If you want extremely small, go with that. <br /> Also Note: This is still less bloated than moment.js. While moment.js is nice, imo, it has to many secular methods, which require learning moment as if it were a language. Mine here uses the same common format as <a href=\"http://php.net/manual/en/function.date.php\">PHP:date</a>.</p>\n\n<h3>Quick Links</h3>\n\n<ul>\n<li><a href=\"https://cdn.rawgit.com/JDMcKinstry/JavaScriptDateFormat/master/Date.format.min.js\">Date.format.min.js</a> 5.08 KB</li>\n<li><a href=\"https://cdn.rawgit.com/JDMcKinstry/JavaScriptDateFormat/master/dateFormat.min.js\">dateFormat.min.js</a> 4.16 KB</li>\n</ul>\n\n<blockquote>\n  <p><strong>Flavor 1 <a href=\"http://jsfiddle.net/SpYk3/smdz6d43/\"><code>new Date().format(String)</code></a></strong>\n  My Personal Fav. I know the taboo, but works great on the Date Object. Just be aware of any other mods you may have to the Date Object.</p>\n</blockquote>\n\n<pre><code>//  use as simple as\nnew Date().format('m-d-Y h:i:s');   //  07-06-2016 06:38:34\n</code></pre>\n\n<blockquote>\n  <p><strong>Flavor 2 <a href=\"http://jsfiddle.net/SpYk3/tcqpw5d7/\"><code>dateFormat(Date, String)</code></a></strong>\n  More traditional all-in-one method. Has all the ability of the previous, but is called via method with Date param.</p>\n</blockquote>\n\n<pre><code>//  use as simple as\ndateFormat(new Date(), 'm-d-Y h:i:s');  //  07-06-2016 06:38:34\n</code></pre>\n\n<blockquote>\n  <p><strong>BONUS Flavor (requires jQuery) <a href=\"https://github.com/JDMcKinstry/jQuery-Date\"><code>$.date(Date, String)</code></a></strong>\n  This contains much more than just a simple <code>format</code> option. It extends the base Date object and includes methods such as <code>addDays</code>. For more information, please see the <a href=\"https://github.com/JDMcKinstry/jQuery-Date\"><em>Git</em></a>.</p>\n</blockquote>\n\n<p>In this mod, the format characters are inspired by <a href=\"http://php.net/manual/en/function.date.php\">PHP:date</a>. For a complete list, please see my <a href=\"https://github.com/JDMcKinstry/JavaScriptDateFormat/blob/master/README.md\">README</a></p>\n\n<p>This mod also has a much longer list of pre-made formats. To use a premade format, simply enter its key name. <code>dateFormat(new Date(), 'pretty-a');</code></p>\n\n<ul>\n<li>'compound'\n\n<ul>\n<li>'commonLogFormat' == 'd/M/Y:G:i:s'</li>\n<li>'exif' == 'Y:m:d G:i:s'</li>\n<li>'isoYearWeek' == 'Y\\\\WW'</li>\n<li>'isoYearWeek2' == 'Y-\\\\WW'</li>\n<li>'isoYearWeekDay' == 'Y\\\\WWj'</li>\n<li>'isoYearWeekDay2' == 'Y-\\\\WW-j'</li>\n<li>'mySQL' == 'Y-m-d h:i:s'</li>\n<li>'postgreSQL' == 'Y.z'</li>\n<li>'postgreSQL2' == 'Yz'</li>\n<li>'soap' == 'Y-m-d\\\\TH:i:s.u'</li>\n<li>'soap2' == 'Y-m-d\\\\TH:i:s.uP'</li>\n<li>'unixTimestamp' == '@U'</li>\n<li>'xmlrpc' == 'Ymd\\\\TG:i:s'</li>\n<li>'xmlrpcCompact' == 'Ymd\\\\tGis'</li>\n<li>'wddx' == 'Y-n-j\\\\TG:i:s'</li>\n</ul></li>\n<li>'constants'\n\n<ul>\n<li>'AMERICAN' == 'F j Y'</li>\n<li>'AMERICANSHORT' == 'm/d/Y'</li>\n<li>'AMERICANSHORTWTIME' == 'm/d/Y h:i:sA'</li>\n<li>'ATOM' == 'Y-m-d\\\\TH:i:sP'</li>\n<li>'COOKIE' == 'l d-M-Y H:i:s T'</li>\n<li>'EUROPEAN' == 'j F Y'</li>\n<li>'EUROPEANSHORT' == 'd.m.Y'</li>\n<li>'EUROPEANSHORTWTIME' == 'd.m.Y H:i:s'</li>\n<li>'ISO8601' == 'Y-m-d\\\\TH:i:sO'</li>\n<li>'LEGAL' == 'j F Y'</li>\n<li>'RFC822' == 'D d M y H:i:s O'</li>\n<li>'RFC850' == 'l d-M-y H:i:s T'</li>\n<li>'RFC1036' == 'D d M y H:i:s O'</li>\n<li>'RFC1123' == 'D d M Y H:i:s O'</li>\n<li>'RFC2822' == 'D d M Y H:i:s O'</li>\n<li>'RFC3339' == 'Y-m-d\\\\TH:i:sP'</li>\n<li>'RSS' == 'D d M Y H:i:s O'</li>\n<li>'W3C' == 'Y-m-d\\\\TH:i:sP'</li>\n</ul></li>\n<li>'pretty'\n\n<ul>\n<li>'pretty-a' == 'g:i.sA l jS \\\\o\\\\f F Y'</li>\n<li>'pretty-b' == 'g:iA l jS \\\\o\\\\f F Y'</li>\n<li>'pretty-c' == 'n/d/Y g:iA'</li>\n<li>'pretty-d' == 'n/d/Y'</li>\n<li>'pretty-e' == 'F jS - g:ia'</li>\n<li>'pretty-f' == 'g:iA'</li>\n</ul></li>\n</ul>\n\n<p><em>As you may notice, you can use double <code>\\</code> to escape a character.</em></p>\n\n<hr>\n",
    "score": 161,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 900807,
      "name": "SpYk3HH",
      "reputation": 17651
    }
  },
  {
    "soID": 14484742,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/14484742",
    "title": null,
    "body": "<p>Use:</p>\n\n<pre><code>$(this).toggle($(\"input:checkbox\", $(this))[0].checked);\n</code></pre>\n\n<p>When you are selecting out of context, remember you need the [0] to access the checkbox.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8677465,
    "parentID": 7202157,
    "url": "https://stackoverflow.com/q/8677465",
    "title": null,
    "body": "<ol>\n<li>Unary plus given string converts to number </li>\n<li>Increment operator given string converts and increments by 1</li>\n<li>[] == ''. Empty String</li>\n<li><p>+'' or  +[] evaluates 0.</p>\n\n<pre><code>++[[]][+[]]+[+[]] = 10 \n++[''][0] + [0] : First part is gives zeroth element of the array which is empty string \n1+0 \n10\n</code></pre></li>\n</ol>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 910614,
      "name": "Praveen Vedanth",
      "reputation": 42
    }
  },
  {
    "soID": 9308103,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/9308103",
    "title": null,
    "body": "<p>I think this is the best way to add a div:</p>\n\n<p>To append a test div to the div element with ID div_id:</p>\n\n<pre><code>$(\"#div_id\").append(\"div name along with id will come here, for example, test\");\n</code></pre>\n\n<p>Now append <a href=\"http://en.wikipedia.org/wiki/HTML\" rel=\"nofollow\">HTML</a> to this added test div:</p>\n\n<pre><code>$(\"#test\").append(\"Your HTML\");\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 912644,
      "name": "Atul",
      "reputation": 627
    }
  },
  {
    "soID": 40035233,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/40035233",
    "title": null,
    "body": "<p>If I read the specs right then <code>let</code> <strong>thankfully</strong> can also be leveraged to avoid self invoking functions used to simulate private only members - <em>a popular design pattern that decreases code readability, complicates debugging, that adds no real code protection or other benefit - except maybe satisfying someone's desire for semantics, so stop using it. /rant</em></p>\n\n<pre><code>var SomeConstructor;\n\n{\n    let privateScope = {};\n\n    SomeConstructor = function SomeConstructor () {\n        this.someProperty = \"foo\";\n        privateScope.hiddenProperty = \"bar\";\n    }\n\n    SomeConstructor.prototype.showPublic = function () {\n        console.log(this.someProperty); // foo\n    }\n\n    SomeConstructor.prototype.showPrivate = function () {\n        console.log(privateScope.hiddenProperty); // bar\n    }\n\n}\n\nvar myInstance = new SomeConstructor();\n\nmyInstance.showPublic();\nmyInstance.showPrivate();\n\nconsole.log(privateScope.hiddenProperty); // error\n</code></pre>\n\n<p>See '<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/let#Emulating_private_interfaces\" rel=\"nofollow\">Emulating private interfaces</a>'</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 913223,
      "name": "Daniel Sokolowski",
      "reputation": 6348
    }
  },
  {
    "soID": 23598591,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/23598591",
    "title": null,
    "body": "<p>If you were looking for an alternative to write the ugly -1 check, you prepend a ~ tilde instead. </p>\n\n<pre><code>if (~haystack.indexOf('needle')) alert('found');\n</code></pre>\n\n<blockquote>\n  <p><strong><a href=\"http://www.joezimjs.com/authors/joe-zimmerman/\">Joe Zimmerman</a></strong> - you'll see that using ~ on -1 converts it to 0. The number 0 is a\n  falsey value, meaning that it will evaluate to false when converted to\n  a Boolean. That might not seem like a big insight at first, but\n  remember functions like indexOf will return -1 when the query is not\n  found. This means that instead of writing something similar to this:</p>\n\n<pre><code>if (someStr.indexOf(\"a\") &gt;= 0) {\n  // Found it\n} else  {\n  // Not Found\n}\n</code></pre>\n  \n  <p>You can now have fewer characters in your code so you can write it\n  like this:</p>\n\n<pre><code>if (~someStr.indexOf(\"a\")) {\n  // Found it\n} else  {\n  // Not Found\n}\n</code></pre>\n</blockquote>\n\n<p>More <a href=\"http://www.joezimjs.com/javascript/great-mystery-of-the-tilde/\">details here</a></p>\n",
    "score": 91,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 18471537,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/18471537",
    "title": null,
    "body": "<p>I think I discovered another way to do it inline without any invasive syntax on every line. Use Javascript's ability to convert a function to string and create a multiline comment with the <code>/**/</code> syntax then remove the \"function() {/*\\n\" and \"\\n*/}\".</p>\n\n<pre><code>var multiline = function(string) { return string.toString().replace(/(^[^\\n]*\\n)|(\\n\\*\\/\\})/g, \"\"); };\n\nconsole.log(multiline(function() {/*\nHello world!\nI'm a multiline string!\n\nTada!\n*/}));\n</code></pre>\n\n<p>The only pitfall I can see in this is the syntax highlighting.</p>\n\n<p>EDIT: Had I scrolled down a little more, I would have seen this answer doing exactly the same thing: <a href=\"https://stackoverflow.com/a/5571069/916553\">https://stackoverflow.com/a/5571069/916553</a></p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 916553,
      "name": "AdrianCooney",
      "reputation": 529
    }
  },
  {
    "soID": 11444416,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/11444416",
    "title": null,
    "body": "<p>The difference is scoping. <code>var</code> is scoped to the nearest function block and <code>let</code> is scoped to the nearest <em>enclosing</em> block, which can be smaller than a function block. Both are global if outside any block.</p>\n\n<p>Also, variables declared with <code>let</code> are not accessible before they are declared in their enclosing block. As seen in the demo, this will throw a ReferenceError exception.</p>\n\n<p><strong><a href=\"http://jsfiddle.net/tcCp5/182/\" rel=\"noreferrer\">Demo</a>:</strong> </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var html = '';\r\n\r\nwrite('#### global ####\\n');\r\nwrite('globalVar: ' + globalVar); //undefined, but visible\r\n\r\ntry {\r\n  write('globalLet: ' + globalLet); //undefined, *not* visible\r\n} catch (exception) {\r\n  write('globalLet: exception');\r\n}\r\n\r\nwrite('\\nset variables');\r\n\r\nvar globalVar = 'globalVar';\r\nlet globalLet = 'globalLet';\r\n\r\nwrite('\\nglobalVar: ' + globalVar);\r\nwrite('globalLet: ' + globalLet);\r\n\r\nfunction functionScoped() {\r\n  write('\\n#### function ####');\r\n  write('\\nfunctionVar: ' + functionVar); //undefined, but visible\r\n\r\n  try {\r\n    write('functionLet: ' + functionLet); //undefined, *not* visible\r\n  } catch (exception) {\r\n    write('functionLet: exception');\r\n  }\r\n\r\n  write('\\nset variables');\r\n\r\n  var functionVar = 'functionVar';\r\n  let functionLet = 'functionLet';\r\n\r\n  write('\\nfunctionVar: ' + functionVar);\r\n  write('functionLet: ' + functionLet);\r\n}\r\n\r\nfunction blockScoped() {\r\n  write('\\n#### block ####');\r\n  write('\\nblockVar: ' + blockVar); //undefined, but visible\r\n\r\n  try {\r\n    write('blockLet: ' + blockLet); //undefined, *not* visible\r\n  } catch (exception) {\r\n    write('functionLet: exception');\r\n  }\r\n\r\n  for (var blockVar = 'blockVar', blockIndex = 0; blockIndex &lt; 1; blockIndex++) {\r\n    write('\\nblockVar: ' + blockVar); // visible here and whole function\r\n  };\r\n\r\n  for (let blockLet = 'blockLet', letIndex = 0; letIndex &lt; 1; letIndex++) {\r\n    write('blockLet: ' + blockLet); // visible only here\r\n  };\r\n\r\n  write('\\nblockVar: ' + blockVar);\r\n\r\n  try {\r\n    write('blockLet: ' + blockLet); //undefined, *not* visible\r\n  } catch (exception) {\r\n    write('functionLet: exception');\r\n  }\r\n}\r\n\r\nfunction write(line) {\r\n  html += (line ? line : '') + '&lt;br /&gt;';\r\n}\r\n\r\nfunctionScoped();\r\nblockScoped();\r\n\r\ndocument.getElementById('results').innerHTML = html;</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;pre id=\"results\"&gt;&lt;/pre&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h3>Global:</h3>\n\n<p>They are very similar when used like this outside a function block.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>let me = 'go';  // globally scoped\nvar i = 'able'; // globally scoped\n</code></pre>\n\n<p>However, global variables defined with <code>let</code> will not be added as properties on the global <code>window</code> object like those defined with <code>var</code>.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>console.log(window.me); // undefined\nconsole.log(window.i); // 'able'\n</code></pre>\n\n<h3>Function:</h3>\n\n<p>They are identical when used like this in a function block.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function ingWithinEstablishedParameters() {\n    let terOfRecommendation = 'awesome worker!'; //function block scoped\n    var sityCheerleading = 'go!'; //function block scoped\n}\n</code></pre>\n\n<h3>Block:</h3>\n\n<p>Here is the difference. <code>let</code> is only visible in the <code>for()</code> loop and <code>var</code> is visible to the whole function.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function allyIlliterate() {\n    //tuce is *not* visible out here\n\n    for( let tuce = 0; tuce &lt; 5; tuce++ ) {\n        //tuce is only visible in here (and in the for() parentheses)\n        //and there is a separate tuce variable for each iteration of the loop\n    }\n\n    //tuce is *not* visible out here\n}\n\nfunction byE40() {\n    //nish *is* visible out here\n\n    for( var nish = 0; nish &lt; 5; nish++ ) {\n        //nish is visible to the whole function\n    }\n\n    //nish *is* visible out here\n}\n</code></pre>\n\n<h3>Redeclaration:</h3>\n\n<p>Assuming strict mode, <code>var</code> will let you re-declare the same variable in the same scope. On the other hand, <code>let</code> will not:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>'use strict';\nlet me = 'foo';\nlet me = 'bar'; // SyntaxError: Identifier 'me' has already been declared\n</code></pre>\n\n<pre class=\"lang-js prettyprint-override\"><code>'use strict';\nvar me = 'foo';\nvar me = 'bar'; // No problem, `me` is replaced.\n</code></pre>\n",
    "score": 3329,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8681149,
    "parentID": 7202157,
    "url": "https://stackoverflow.com/q/8681149",
    "title": null,
    "body": "<p>Let’s make it simple:</p>\n\n<pre><code>++[[]][+[]]+[+[]] = \"10\"\n\nvar a = [[]][+[]];\nvar b = [+[]];\n\n// so a == [] and b == [0]\n\n++a;\n\n// then a == 1 and b is still that array [0]\n// when you sum the var a and an array, it will sum b as a string just like that:\n\n1 + \"0\" = \"10\"\n</code></pre>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 919647,
      "name": "renatoluna",
      "reputation": 376
    }
  },
  {
    "soID": 20131443,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/20131443",
    "title": null,
    "body": "<p>ZeroClipboard is the best cross-browser solution I've found:</p>\n\n<pre><code>&lt;div id=\"copy\" data-clipboard-text=\"Copy Me!\"&gt;Click to copy&lt;/div&gt;    \n&lt;script src=\"ZeroClipboard.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  var clip = new ZeroClipboard( document.getElementById('copy') );\n&lt;/script&gt;\n</code></pre>\n\n<p>If you need non-flash support for iOS you just add a fall-back:</p>\n\n<pre><code>clip.on( 'noflash', function ( client, args ) {\n    $(\"#copy\").click(function(){            \n        var txt = $(this).attr('data-clipboard-text');\n        prompt (\"Copy link, then click OK.\", txt);\n    });\n});  \n</code></pre>\n\n<p><a href=\"http://zeroclipboard.org/\">http://zeroclipboard.org/</a></p>\n\n<p><a href=\"https://github.com/zeroclipboard/ZeroClipboard\">https://github.com/zeroclipboard/ZeroClipboard</a></p>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 922522,
      "name": "Justin",
      "reputation": 12837
    }
  },
  {
    "soID": 7311088,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/7311088",
    "title": null,
    "body": "<p>This works with jQuery:</p>\n\n<pre><code>$(window).attr(\"location\", \"http://google.fr\");\n</code></pre>\n",
    "score": 93,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 929302,
      "name": "xloadx",
      "reputation": 1003
    }
  },
  {
    "soID": 18540978,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/18540978",
    "title": null,
    "body": "<p>If you want just the boolean value, i.e. if it's checked or not try this:</p>\n\n<pre><code>$(\"#Myradio\").is(\":checked\")\n</code></pre>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 931665,
      "name": "Juan",
      "reputation": 493
    }
  },
  {
    "soID": 15694751,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/15694751",
    "title": null,
    "body": "<p>A very lightweight jQuery method: </p>\n\n<pre><code>var qs = window.location.search.replace('?','').split('&amp;'),\n    request = {};\n$.each(qs, function(i,v) {\n    var initial, pair = v.split('=');\n    if(initial = request[pair[0]]){\n        if(!$.isArray(initial)) {\n            request[pair[0]] = [initial]\n        }\n        request[pair[0]].push(pair[1]);\n    } else {\n        request[pair[0]] = pair[1];\n    }\n    return;\n});\nconsole.log(request);\n</code></pre>\n\n<p>And to alert, for example ?q</p>\n\n<pre><code>alert(request.q)\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 26481205,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/26481205",
    "title": null,
    "body": "<p>For example, I used in a Firefox console:</p>\n\n<pre><code>[].forEach.call(document.getElementsByTagName('pre'), function(e){ \n   console.log(e);\n})\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 936661,
      "name": "victorq10",
      "reputation": 131
    }
  },
  {
    "soID": 7924558,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/7924558",
    "title": null,
    "body": "<p>My implementation, very self explanatory</p>\n\n<pre><code>function replaceAll(string, token, newtoken) {\n    if(token!=newtoken)\n    while(string.indexOf(token) &gt; -1) {\n        string = string.replace(token, newtoken);\n    }\n    return string;\n}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 938822,
      "name": "Vitim.us",
      "reputation": 7657
    }
  },
  {
    "soID": 15275614,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/15275614",
    "title": null,
    "body": "<p>Now, I may be totally misguided, but here's what I've recently started doing... \nStart and end your JavaScript files with a carriage return, place in the PHP script, followed by one more carriage return.\nThe JavaScript comment \"//\" is ignored by PHP so the inclusion happens anyway. The purpose for the carriage returns is so that the first line of your included JavaScript isn't commented out.</p>\n\n<p>Technically, you don't need the comment, but it posts errors in <a href=\"http://en.wikipedia.org/wiki/Adobe_Dreamweaver\" rel=\"nofollow\">Dreamweaver</a> that annoy me. If you're scripting in an IDE that doesn't post errors, you shouldn't need the comment or the carriage returns.</p>\n\n<pre><code>\\n\n//&lt;?php require_once(\"path/to/javascript/dependency.js\"); ?&gt;\n\nfunction myFunction(){\n    // stuff\n}\n\\n\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 945011,
      "name": "Duncan",
      "reputation": 1133
    }
  },
  {
    "soID": 9937764,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/9937764",
    "title": null,
    "body": "<p>Jan Turoň's answer above is very close, and may be the best to use in a browser due to compatibility issues, but it will potentially cause some strange enumeration issues.  For instance, executing:</p>\n\n<pre><code>for ( var i in someArray ) { ... }\n</code></pre>\n\n<p>Will assign the clone() method to i after iterating through the elements of the array.  Here's an adaptation that avoids the enumeration and works with node.js:</p>\n\n<pre><code>Object.defineProperty( Object.prototype, \"clone\", {\n    value: function() {\n        if ( this.cloneNode )\n        {\n            return this.cloneNode( true );\n        }\n\n        var copy = this instanceof Array ? [] : {};\n        for( var attr in this )\n        {\n            if ( typeof this[ attr ] == \"function\" || this[ attr ] == null || !this[ attr ].clone )\n            {\n                copy[ attr ] = this[ attr ];\n            }\n            else if ( this[ attr ] == this )\n            {\n                copy[ attr ] = copy;\n            }\n            else\n            {\n                copy[ attr ] = this[ attr ].clone();\n            }\n        }\n        return copy;\n    }\n});\n\nObject.defineProperty( Date.prototype, \"clone\", {\n    value: function() {\n        var copy = new Date();\n        copy.setTime( this.getTime() );\n        return copy;\n    }\n});\n\nObject.defineProperty( Number.prototype, \"clone\", { value: function() { return this; } } );\nObject.defineProperty( Boolean.prototype, \"clone\", { value: function() { return this; } } );\nObject.defineProperty( String.prototype, \"clone\", { value: function() { return this; } } );\n</code></pre>\n\n<p>This avoids making the clone() method enumerable because defineProperty() defaults enumerable to false.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11290751,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/11290751",
    "title": null,
    "body": "<p>The following function returns an object version of your queryString. \nYou can simply write <code>obj.key1</code> and  <code>obj.key2</code> to access values of <code>key1</code> and <code>key2</code> in parameter.</p>\n\n<pre><code>function getQueryStringObject()\n{\n    var querystring = document.location.search.replace('?','').split( '&amp;' );\n    var objQueryString={};\n    var key=\"\",val=\"\";\n    if(typeof querystring == 'undefined')\n    {\n        return (typeof querystring);\n    }\n    for(i=0;i&lt;querystring.length;i++)\n    {\n        key=querystring[i].split(\"=\")[0];\n        val=querystring[i].split(\"=\")[1];\n        objQueryString[key] = val;\n    }\n    return objQueryString;\n}\n</code></pre>\n\n<p>And to use this function you can write</p>\n\n<pre><code>var obj= getQueryStringObject();\nalert(obj.key1);\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11312069,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/11312069",
    "title": null,
    "body": "<p>There is a good news for you. Very soon you will be able to load JavaScript code easily. It will become a standard way of importing modules of JavaScript code and will be part of core JavaScript itself. </p>\n\n<p>You simply have to write <code>import cond from 'cond.js';</code> to load a macro named <code>cond</code> from a file <code>cond.js</code>.</p>\n\n<p>So you don't have to rely upon any JavaScript framework nor do you have to explicitly make <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\">Ajax</a> calls.</p>\n\n<p>Refer to:</p>\n\n<ul>\n<li><p><em><a href=\"http://calculist.org/blog/2012/06/29/static-module-resolution/\">Static module resolution</a></em></p></li>\n<li><p><em><a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:module_loaders\">Module loaders</a></em></p></li>\n</ul>\n",
    "score": 69,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 946170,
      "name": "Imdad",
      "reputation": 4258
    }
  },
  {
    "soID": 15457506,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/15457506",
    "title": null,
    "body": "<p>I believe this to be an accurate and concise way to achieve this (modified from <a href=\"http://css-tricks.com/snippets/javascript/get-url-variables/\" rel=\"nofollow\">http://css-tricks.com/snippets/javascript/get-url-variables/</a>):</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function getQueryVariable(variable) {\n\n    var query = window.location.search.substring(1),            // Remove the ? from the query string.\n        vars = query.split(\"&amp;\");                                // Split all values by ampersand.\n\n    for (var i = 0; i &lt; vars.length; i++) {                     // Loop through them...\n        var pair = vars[i].split(\"=\");                          // Split the name from the value.\n        if (pair[0] == variable) {                              // Once the requested value is found...\n            return ( pair[1] == undefined ) ? null : pair[1];   // Return null if there is no value (no equals sign), otherwise return the value.\n        }\n    }\n\n    return undefined;                                           // Wasn't found.\n\n}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 18615402,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/18615402",
    "title": null,
    "body": "<p>Here's a good mnemonic.  <b>A</b>pply uses <b>A</b>rrays and <b>A</b>lways takes one or two Arguments.  When you use <b>C</b>all you have to <b>C</b>ount the number of arguments.</p>\n",
    "score": 90,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 953068,
      "name": "Joe",
      "reputation": 3962
    }
  },
  {
    "soID": 27639544,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/27639544",
    "title": null,
    "body": "<p>Use this module of NodeJS <a href=\"http://stringjs.com/\" rel=\"nofollow\">http://stringjs.com/</a> package to capitalize your String </p>\n\n<pre><code>var S = require('string');\nS('jon').capitalize().s; //'Jon'\nS('JP').capitalize().s; //'Jp'\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 953966,
      "name": "mfq",
      "reputation": 974
    }
  },
  {
    "soID": 9161683,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/9161683",
    "title": null,
    "body": "<p>My way of doing this is:</p>\n\n<pre><code>if ( $(\"#checkbox:checked\").length ) {       \n    alert(\"checkbox is checked\");\n} else {\n    alert(\"checkbox is not checked\");\n}\n</code></pre>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43237732,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/43237732",
    "title": null,
    "body": "<h2>CSS only</h2>\n\n<pre><code>p::first-letter {\n  text-transform: uppercase;\n}\n</code></pre>\n\n<ul>\n<li>Despite being called <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::first-letter\" rel=\"noreferrer\"><code>::first-letter</code></a>, it applies to the first <strong>character</strong>, i.e. in case of <code>%a</code>, selector would apply to <code>%</code> and <code>a</code> would not be capitalized.</li>\n<li>Supported by IE9+ or IE5.5+ in legacy notation with only one colon (<code>:first-letter</code>).</li>\n</ul>\n\n<h2>ES6 one-liner</h2>\n\n<p>Since there are numerous answers, but none in ES6 that would solve original problem efficiently, I came up with mine. I also have few remarks and performed a benchmark.</p>\n\n<pre><code>const capitalizeFirstChar = string =&gt; string.charAt(0).toUpperCase() + string.substring(1);\n</code></pre>\n\n<h3>Remarks</h3>\n\n<ul>\n<li><code>parameters =&gt; function</code> is so called <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" rel=\"noreferrer\">arrow function</a>.</li>\n<li>I went with name <code>capitalizeFirstChar</code> instead of <code>capitalizeFirstLetter</code>, because OP didn't asked for code that capitalizes the first letter in the entire string, but about code that capitalizes the very first char if it's letter.</li>\n<li><code>const</code> gives us the ability to declare <code>capitalizeFirstChar</code> to be constant, which is wanted because as a programmer you should always explicitly state your intentions.</li>\n<li>In the benchmark I performed there was no significant difference between <code>string.charAt(0)</code> and <code>string[0]</code>. Note however, that <code>string[0]</code> would be <code>undefined</code> for empty string, so it should be rewritten to <code>string &amp;&amp; string[0]</code>.</li>\n<li><code>string.substring(1)</code> is faster than <code>string.slice(1)</code>.</li>\n</ul>\n\n<h3>Benchmark</h3>\n\n<ul>\n<li>4,956,962 ops/s ±3.03% for ES6,</li>\n<li>4,577,946 ops/s ±1.2% for most voted answer.</li>\n<li>Created with <a href=\"https://jsbench.me/\" rel=\"noreferrer\">JSBench.me</a> on Google Chrome 57.</li>\n</ul>\n\n<p><a href=\"https://i.stack.imgur.com/FlIac.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/FlIac.png\" alt=\"Solutions&#39; comparison\"></a></p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 959552,
      "name": "Przemek",
      "reputation": 1178
    }
  },
  {
    "soID": 29924251,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/29924251",
    "title": null,
    "body": "<p><strong>Here is the shortest and complete answer:</strong></p>\n\n<pre><code>function round(num, decimals) {\n        var n = Math.pow(10, decimals);\n        return Math.round( (n * num).toFixed(decimals) )  / n;\n};\n</code></pre>\n\n<p><strong>This also takes care of the example case 1.005 which will return 1.01.</strong></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 961018,
      "name": "momomo",
      "reputation": 5607
    }
  },
  {
    "soID": 13451971,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/13451971",
    "title": null,
    "body": "<p>You can also use HTML5 <strong>replaceState</strong> if you want to change the url but don't want to add the entry to the browser history:</p>\n\n<pre><code>if (window.history.replaceState) {\n   //prevents browser from storing history with each change:\n   window.history.replaceState(statedata, title, url);\n}\n</code></pre>\n\n<p>This would 'break' the back button functionality. This may be required in some instances such as an image gallery (where you want the back button to return back to the gallery index page instead of moving back through each and every image you viewed) whilst giving each image its own unique url.</p>\n",
    "score": 69,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 961333,
      "name": "geo1701",
      "reputation": 8651
    }
  },
  {
    "soID": 27126711,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/27126711",
    "title": null,
    "body": "<pre><code>$(document).ready(function() {    \n    $('#agecheckbox').click(function() {\n        if($(this).is(\":checked\"))\n        {\n            $('#agetextbox').show();\n        } else {\n            $('#agetextbox').hide();\n        }\n    });\n});\n</code></pre>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 14884254,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/14884254",
    "title": null,
    "body": "<p>I needed an object from the query string, and I hate lots of code. It may not be the most robust in the universe, but it's just a few lines of code.</p>\n\n<pre><code>var q = {};\nlocation.href.split('?')[1].split('&amp;').forEach(function(i){\n    q[i.split('=')[0]]=i.split('=')[1];\n});\n</code></pre>\n\n<p>A URL like <code>this.htm?hello=world&amp;foo=bar</code> will create:</p>\n\n<pre><code>{hello:'world', foo:'bar'}\n</code></pre>\n",
    "score": 31,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21105346,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/21105346",
    "title": null,
    "body": "<p>If jQuery and the web browser is not available, there is also an isEmpty function in underscore.js.</p>\n\n<pre><code>_.isEmpty({}) // returns true\n</code></pre>\n\n<p>Additionally, it does not assume the input parameter to be an object. For a list or string or undefined, it will also turn the correct answer.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 970086,
      "name": "jichi",
      "reputation": 2499
    }
  },
  {
    "soID": 13459923,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/13459923",
    "title": null,
    "body": "<pre><code>yourString.replace(/^[a-z]/, function(m){ return m.toUpperCase() });\n</code></pre>\n\n<p>(You may encapsulate it in a function or even add it to the String prototype if you use it frequently.)</p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 976686,
      "name": "Simon",
      "reputation": 730
    }
  },
  {
    "soID": 19321705,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/19321705",
    "title": null,
    "body": "<p>To not deal with many 0s, use this variant:</p>\n\n<pre><code>Math.round(num * 1e2) / 1e2\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 980442,
      "name": "Daniel De León",
      "reputation": 7565
    }
  },
  {
    "soID": 14529966,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/14529966",
    "title": null,
    "body": "<p>I developed a small library using techniques listed here to create an easy to use, drop-in solution to anyones troubles; It can be found here: </p>\n\n<p><a href=\"https://github.com/Nijikokun/query-js\" rel=\"noreferrer\">https://github.com/Nijikokun/query-js</a></p>\n\n<p><strong>Usage</strong></p>\n\n<p>Fetching specific parameter/key:</p>\n\n<pre><code>query.get('param');\n</code></pre>\n\n<p>Using the builder to fetch the entire object:</p>\n\n<pre><code>var storage = query.build();\nconsole.log(storage.param);\n</code></pre>\n\n<p>and tons more... check the github link for more examples.</p>\n\n<p><strong>Features</strong></p>\n\n<ol>\n<li>Caching on both decoding and parameters</li>\n<li>Supports hash query strings <code>#hello?page=3</code></li>\n<li>Supports passing custom queries</li>\n<li>Supports Array / Object Parameters <code>user[]=\"jim\"&amp;user[]=\"bob\"</code></li>\n<li>Supports empty management <code>&amp;&amp;</code></li>\n<li>Supports declaration parameters without values <code>name&amp;hello=\"world\"</code></li>\n<li>Supports repeated parameters <code>param=1&amp;param=2</code></li>\n<li>Clean, compact, and readable source <code>4kb</code></li>\n<li>AMD, Require, Node support</li>\n</ol>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31552759,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/31552759",
    "title": null,
    "body": "<p>I had a simple issue, but I was baffled by responses to this question.</p>\n\n<p>I had to use a variable (myVar1) defined in one JavaScript file (myvariables.js) in another JavaScript file (main.js).</p>\n\n<p>For this I did as below:</p>\n\n<p>Loaded the JavaScript code in the HTML file, in the correct order, myvariables.js first, then main.js:</p>\n\n<pre><code>&lt;html&gt;\n    &lt;body onload=\"bodyReady();\" &gt;\n\n        &lt;script src=\"myvariables.js\" &gt; &lt;/script&gt;\n        &lt;script src=\"main.js\" &gt; &lt;/script&gt;\n\n        &lt;!-- Some other code --&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>File: myvariables.js</p>\n\n<pre><code>var myVar1 = \"I am variable from myvariables.js\";\n</code></pre>\n\n<p>File: main.js</p>\n\n<pre><code>// ...\nfunction bodyReady() {\n    // ...\n    alert (myVar1);    // This shows \"I am variable from myvariables.js\", which I needed\n    // ...\n}\n// ...\n</code></pre>\n\n<p>As you saw, I had use a variable in one JavaScript file in another JavaScript file, but I didn't need to include one in another. I just needed to ensure that the first JavaScript file loaded before the second JavaScript file, and, the first JavaScript file's variables are accessible in the second JavaScript file, automatically.</p>\n\n<p>This saved my day. I hope this helps.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 984471,
      "name": "Manohar Reddy Poreddy",
      "reputation": 1586
    }
  },
  {
    "soID": 12189963,
    "parentID": 586182,
    "url": "https://stackoverflow.com/q/12189963",
    "title": null,
    "body": "<p>If you want to insert multiple elements into an array at once check out this Stack Overflow answer: <a href=\"https://stackoverflow.com/questions/1348178/a-better-way-to-splice-an-arrray-into-an-array-in-javascript\">A better way to splice an array into an array in javascript</a></p>\n\n<p>Also here are some functions to illustrate both examples:</p>\n\n<pre><code>function insertAt(array, index) {\n    var arrayToInsert = Array.prototype.splice.apply(arguments, [2]);\n    return insertArrayAt(array, index, arrayToInsert);\n}\n\nfunction insertArrayAt(array, index, arrayToInsert) {\n    Array.prototype.splice.apply(array, [index, 0].concat(arrayToInsert));\n    return array;\n}\n</code></pre>\n\n<p>Finally here is a jsFiddle so you can see it for youself: <a href=\"http://jsfiddle.net/luisperezphd/Wc8aS/\" rel=\"nofollow noreferrer\">http://jsfiddle.net/luisperezphd/Wc8aS/</a></p>\n\n<p>And this is how you use the functions:</p>\n\n<pre><code>// if you want to insert specific values whether constants or variables:\ninsertAt(arr, 1, \"x\", \"y\", \"z\");\n\n// OR if you have an array:\nvar arrToInsert = [\"x\", \"y\", \"z\"];\ninsertArrayAt(arr, 1, arrToInsert);\n</code></pre>\n",
    "score": 26,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 984780,
      "name": "Luis Perez",
      "reputation": 18389
    }
  },
  {
    "soID": 27281043,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/27281043",
    "title": null,
    "body": "<p>I have recently written a <a href=\"https://www.lucidchart.com/techblog/2014/12/02/definitive-guide-copying-pasting-javascript/\">technical blog post</a> on this very problem (I work at Lucidchart and we recently did an overhaul on our clipboard).</p>\n\n<p>Copying plain text to the clipboard is relatively simple, assuming you want to do it during a system copy event (user presses ctrl-c or uses the browser's menu). </p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var isIe = (navigator.userAgent.toLowerCase().indexOf(\"msie\") != -1 \n           || navigator.userAgent.toLowerCase().indexOf(\"trident\") != -1);\n\ndocument.addEventListener('copy', function(e) {\n    var textToPutOnClipboard = \"This is some text\";\n    if (isIe) {\n        window.clipboardData.setData('Text', textToPutOnClipboard);    \n    } else {\n        e.clipboardData.setData('text/plain', textToPutOnClipboard);\n    }\n    e.preventDefault();\n});\n</code></pre>\n\n<p>Putting text on the clipboard not during a system copy event is much more difficult. It looks like some of these other answers reference ways to do it via Flash, which is the only cross-browser way to do it (so far as I understand).</p>\n\n<p>Other than that, there are some options on a browser-by-browser basis.</p>\n\n<p>This is the most simple in IE, where you can access the clipboardData object at anytime from Javascript via:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>window.clipboardData\n</code></pre>\n\n<p>(When you attempt to do this outside of a system cut, copy, or paste event, however, IE will prompt the user to grant the web application clipboard permission.)</p>\n\n<p>In Chrome, you can create a chrome extension that will give you <a href=\"https://developer.chrome.com/extensions/declare_permissions\">clipboard permissions</a> (this is what we do for Lucidchart). Then for users with your extension installed you'll just need to fire the system event yourself:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>document.execCommand('copy');\n</code></pre>\n\n<p>It looks like Firefox has <a href=\"http://kb.mozillazine.org/Granting_JavaScript_access_to_the_clipboard\">some options</a> that allow users to grant permissions to certain sites to access the clipboard, but I haven't tried any of these personally.</p>\n",
    "score": 55,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 984924,
      "name": "Richard Shurtz",
      "reputation": 1043
    }
  },
  {
    "soID": 21152762,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/21152762",
    "title": null,
    "body": "<h1><em>tl;dr</em></h1>\n\n<p>A quick, <strong>complete solution</strong>, which handles <strong>multivalued keys</strong> and <strong>encoded characters</strong>.</p>\n\n<pre><code>var qd = {};\nif (location.search) location.search.substr(1).split(\"&amp;\").forEach(function(item) {var s = item.split(\"=\"), k = s[0], v = s[1] &amp;&amp; decodeURIComponent(s[1]); (qd[k] = qd[k] || []).push(v)})\n\n//using ES6   (23 characters cooler)\nvar qd = {};\nif (location.search) location.search.substr(1).split`&amp;`.forEach(item =&gt; {let [k,v] = item.split`=`; v = v &amp;&amp; decodeURIComponent(v); (qd[k] = qd[k] || []).push(v)})\n</code></pre>\n\nMulti-lined:\n\n<pre><code>var qd = {};\nif (location.search) location.search.substr(1).split(\"&amp;\").forEach(function(item) {\n    var s = item.split(\"=\"),\n        k = s[0],\n        v = s[1] &amp;&amp; decodeURIComponent(s[1]); //  null-coalescing / short-circuit\n    //(k in qd) ? qd[k].push(v) : qd[k] = [v]\n    (qd[k] = qd[k] || []).push(v) // null-coalescing / short-circuit\n})\n</code></pre>\n\n<p>What is all this code...<br>\n<em><a href=\"https://stackoverflow.com/q/476436/985454\">\"null-coalescing\"</a>, <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Short-Circuit_Evaluation\" rel=\"nofollow noreferrer\">short-circuit evaluation</a><br>\nES6 <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" rel=\"nofollow noreferrer\">Destructuring assignments</a>, <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" rel=\"nofollow noreferrer\">Arrow functions</a>, <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals#Tagged_template_literals\" rel=\"nofollow noreferrer\">Template strings</a></em></p>\n\nExample:\n\n<pre><code>\"?a=1&amp;b=0&amp;c=3&amp;d&amp;e&amp;a=5&amp;a=t%20e%20x%20t&amp;e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dståle%26car%3Dsaab\"\n&gt; qd\na: [\"1\", \"5\", \"t e x t\"]\nb: [\"0\"]\nc: [\"3\"]\nd: [undefined]\ne: [undefined, \"http://w3schools.com/my test.asp?name=ståle&amp;car=saab\"]\n\n&gt; qd.a[1]    // \"5\"\n&gt; qd[\"a\"][1] // \"5\"\n</code></pre>\n\n<p><br></p>\n\n<hr>\n\n<h1>Read more... about the Vanilla JavaScript solution.</h1>\n\n<p><em>To access different parts of a URL use <code>location.(search|hash)</code></em></p>\n\n<h2>Easiest (dummy) solution</h2>\n\n<pre><code>var queryDict = {};\nlocation.search.substr(1).split(\"&amp;\").forEach(function(item) {queryDict[item.split(\"=\")[0]] = item.split(\"=\")[1]})\n</code></pre>\n\n<ul>\n<li>Handles <b>empty keys</b> correctly.</li>\n<li>Overrides <b>multi-keys</b> with <b>last</b> value found.</li>\n</ul>\n\n<pre><code>\"?a=1&amp;b=0&amp;c=3&amp;d&amp;e&amp;a=5\"\n&gt; queryDict\na: \"5\"\nb: \"0\"\nc: \"3\"\nd: undefined\ne: undefined\n</code></pre>\n\n<h2>Multi-valued keys</h2>\n\n<p>Simple key check <code>(item in dict) ? dict.item.push(val) : dict.item = [val]</code></p>\n\n<pre><code>var qd = {};\nlocation.search.substr(1).split(\"&amp;\").forEach(function(item) {(item.split(\"=\")[0] in qd) ? qd[item.split(\"=\")[0]].push(item.split(\"=\")[1]) : qd[item.split(\"=\")[0]] = [item.split(\"=\")[1]]})\n</code></pre>\n\n<ul>\n<li>Now returns <b>arrays</b> instead.</li>\n<li>Access values by <code>qd.key[index]</code> or <code>qd[key][index]</code></li>\n</ul>\n\n<pre><code>&gt; qd\na: [\"1\", \"5\"]\nb: [\"0\"]\nc: [\"3\"]\nd: [undefined]\ne: [undefined]\n</code></pre>\n\n<h2>Encoded characters?</h2>\n\n<p>Use <code>decodeURIComponent()</code> for the second <em>or both</em> splits.</p>\n\n<pre><code>var qd = {};\nlocation.search.substr(1).split(\"&amp;\").forEach(function(item) {var k = item.split(\"=\")[0], v = decodeURIComponent(item.split(\"=\")[1]); (k in qd) ? qd[k].push(v) : qd[k] = [v]})\n</code></pre>\n\nExample:\n\n<pre><code>\"?a=1&amp;b=0&amp;c=3&amp;d&amp;e&amp;a=5&amp;a=t%20e%20x%20t&amp;e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dståle%26car%3Dsaab\"\n&gt; qd\na: [\"1\", \"5\", \"t e x t\"]\nb: [\"0\"]\nc: [\"3\"]\nd: [\"undefined\"]  // decodeURIComponent(undefined) returns \"undefined\" !!!*\ne: [\"undefined\", \"http://w3schools.com/my test.asp?name=ståle&amp;car=saab\"]\n</code></pre>\n\n<p><br>\n<hr></p>\n\n<h1>From comments</h1>\n\n<p><strong>*!!!</strong> Please note, that <code>decodeURIComponent(undefined)</code> returns string <code>\"undefined\"</code>. The solution lies in a simple usage of <a href=\"https://stackoverflow.com/a/476445/985454\"><code>&amp;&amp;</code></a>, which ensures that <code>decodeURIComponent()</code> is not called on undefined values. <em>(See the \"complete solution\" at the top.)</em></p>\n\n<pre><code>v = v &amp;&amp; decodeURIComponent(v);\n</code></pre>\n\n<p><br>\nIf the querystring is empty (<code>location.search == \"\"</code>), the result is somewhat misleading <code>qd == {\"\": undefined}</code>. It is suggested to check the querystring before launching the parsing function likeso:</p>\n\n<pre><code>if (location.search) location.search.substr(1).split(\"&amp;\").forEach(...)\n</code></pre>\n",
    "score": 179,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13784818,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/13784818",
    "title": null,
    "body": "<p>via <strong>prototype</strong> with <strong>forEach()</strong> which should skip the <strong>prototype chain</strong> properties:</p>\n\n<pre><code>Object.prototype.each = function(f) {\n    var obj = this\n    Object.keys(obj).forEach( function(key) { \n        f( key , obj[key] ) \n    });\n}\n\n\n//print all keys and values\nvar obj = {a:1,b:2,c:3}\nobj.each(function(key,value) { console.log(key + \" \" + value) });\n// a 1\n// b 2\n// c 3\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 985526,
      "name": "bitstrider",
      "reputation": 1766
    }
  },
  {
    "soID": 12652006,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/12652006",
    "title": null,
    "body": "<p>Another option of doing this is:</p>\n\n<p>You can use the match function, that is, something like:</p>\n\n<pre><code>x = \"teststring\";\n\nif (x.match(\"test\")) {\n     // Code\n}\n</code></pre>\n",
    "score": 37,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 36298671,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/36298671",
    "title": null,
    "body": "<p>If you want to use jQuery, it has a nice example in its documentation:</p>\n\n<pre><code>$.each([ 52, 97 ], function( index, value ) {\n  alert( index + \": \" + value );\n});\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 988591,
      "name": "jj_",
      "reputation": 1149
    }
  },
  {
    "soID": 10795023,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/10795023",
    "title": null,
    "body": "<p>This piece of code should work well:</p>\n\n<pre><code>var str=\"This is testing for javascript search !!!\";\nif(str.search(\"for\") != -1) {\n   //logic\n} \n</code></pre>\n",
    "score": 62,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 989119,
      "name": "vaibhav",
      "reputation": 739
    }
  },
  {
    "soID": 17306971,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/17306971",
    "title": null,
    "body": "<p><s>Here the fastest working implementation</s> while <strong>keeping the same array</strong>:</p>\n\n<pre><code>Array.prototype.clear = function() {\n  while (this.length) {\n    this.pop();\n  }\n};\n</code></pre>\n\n<p>FYI <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\" rel=\"noreferrer\">Map</a> defines <code>clear()</code> so it would seem logical to have <code>clear()</code> for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" rel=\"noreferrer\">Array</a> too.</p>\n\n<p>Or as an <a href=\"http://underscorejs.org/#mixin\" rel=\"noreferrer\">Underscore.js mixin</a>:</p>\n\n<pre><code>_.mixin({\n  clearArray: function(array) {\n    while (array.length) {\n      array.pop();\n    }\n  }\n});\n</code></pre>\n\n<p>Or a simple function:</p>\n\n<pre><code>function clearArray(array) {\n  while (array.length) {\n    array.pop();\n  }\n}\n</code></pre>\n\n<p>FYI it cannot be simplified to <code>while (array.pop())</code>: the tests will fail.</p>\n\n<p>And the tests that goes with it:</p>\n\n<pre><code>describe('Array', function() {\n  it('should clear the array', function() {\n    var array = [1, 2, 3, 4, 5];\n    array.clear();\n    expect(array.length).toEqual(0);\n    expect(array[0]).toEqual(undefined);\n    expect(array[4]).toEqual(undefined);\n\n    // Even with undefined or null inside\n    array = [1, undefined, 3, null, 5];\n    array.clear();\n    expect(array.length).toEqual(0);\n    expect(array[0]).toEqual(undefined);\n    expect(array[4]).toEqual(undefined);\n  });\n});\n</code></pre>\n\n<p>Here the updated jsPerf: <s><a href=\"http://jsperf.com/array-destroy/32\" rel=\"noreferrer\">http://jsperf.com/array-destroy/32</a></s> <a href=\"http://jsperf.com/array-destroy/152\" rel=\"noreferrer\">http://jsperf.com/array-destroy/152</a></p>\n",
    "score": 233,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 990356,
      "name": "tanguy_k",
      "reputation": 5050
    }
  },
  {
    "soID": 10720518,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/10720518",
    "title": null,
    "body": "<p>You can do that without jQuery as:</p>\n\n<pre><code>window.location = \"http://yourdomain.com\";\n</code></pre>\n\n<p>And if you want only jQuery then you can do it like:</p>\n\n<pre><code>$jq(window).attr(\"location\",\"http://yourdomain.com\");\n</code></pre>\n",
    "score": 94,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 995113,
      "name": "ScoRpion",
      "reputation": 5954
    }
  },
  {
    "soID": 17634471,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/17634471",
    "title": null,
    "body": "<p>Most of solutions shown here imply dynamical loading. I was searching instead for a compiler which assemble all the depended files into a single output file. The same as <a href=\"http://en.wikipedia.org/wiki/Less_%28stylesheet_language%29\">Less</a>/<a href=\"http://en.wikipedia.org/wiki/Sass_%28stylesheet_language%29\">Sass</a> preprocessors deal with the CSS <code>@import</code> at-rule. Since I didn't find anything decent of this sort, I wrote a simple tool solving the issue.</p>\n\n<p>So here is the compiler, <a href=\"https://github.com/dsheiko/jsic\">https://github.com/dsheiko/jsic</a>, which replaces <code>$import(\"file-path\")</code> with the requested file content securely. Here is the corresponding <a href=\"http://gruntjs.com/\">Grunt</a> plugin: <a href=\"https://github.com/dsheiko/grunt-jsic\">https://github.com/dsheiko/grunt-jsic</a>.</p>\n\n<p>On the jQuery master branch, they simply concatenate atomic source files into a single one starting with <code>intro.js</code> and ending with <code>outtro.js</code>. That doesn't suits me as it provides no flexibility on the source code design. Check out how it works with jsic:</p>\n\n<p><em>src/main.js</em></p>\n\n<pre><code>var foo = $import(\"./Form/Input/Tel\");\n</code></pre>\n\n<p><em>src/Form/Input/Tel.js</em></p>\n\n<pre><code>function() {\n    return {\n          prop: \"\",\n          method: function(){}\n    }\n}\n</code></pre>\n\n<p>Now we can run the compiler:</p>\n\n<pre><code>node jsic.js src/main.js build/mail.js\n</code></pre>\n\n<p>And get the combined file</p>\n\n<p><em>build/main.js</em></p>\n\n<pre><code>var foo = function() {\n    return {\n          prop: \"\",\n          method: function(){}\n    }\n};\n</code></pre>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 998008,
      "name": "Dmitry Sheiko",
      "reputation": 561
    }
  },
  {
    "soID": 30976920,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/30976920",
    "title": null,
    "body": "<blockquote>\n  <p>Object.keys(obj) : Array</p>\n  \n  <p>retrieves all string-valued keys of all enumerable own (non-inherited) properties.</p>\n</blockquote>\n\n<p>So it gives the same list of keys as you intend by testing each object key with hasOwnProperty. You don't need that extra test operation than and <code>Object.keys( obj ).forEach(function( key ){})</code> is supposed to be faster. Let's prove it:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var uniqid = function(){\r\n\t\t\tvar text = \"\",\r\n\t\t\t\t\ti = 0,\r\n\t\t\t\t\tpossible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\r\n\t\t\tfor( ; i &lt; 32; i++ ) {\r\n\t\t\t\t\ttext += possible.charAt( Math.floor( Math.random() * possible.length ) );\r\n\t\t\t}\r\n\t\t\treturn text;\r\n\t\t}, \r\n\t\tCYCLES = 100000,\r\n\t\tobj = {}, \r\n\t\tp1,\r\n\t\tp2,\r\n\t\tp3,\r\n\t\tkey;\r\n\r\n// Populate object with random properties\r\nArray.apply( null, Array( CYCLES ) ).forEach(function(){\r\n\tobj[ uniqid() ] = new Date()\r\n});\r\n\r\n// Approach #1\r\np1 = performance.now();\r\nObject.keys( obj ).forEach(function( key ){\r\n\tvar waste = obj[ key ];\r\n});\r\n\r\np2 = performance.now();\r\nconsole.log( \"Object.keys approach took \" + (p2 - p1) + \" milliseconds.\");\r\n\r\n// Approach #2\r\nfor( key in obj ) {\r\n\tif ( obj.hasOwnProperty( key ) ) {\r\n\t\tvar waste = obj[ key ];\r\n\t}\r\n}\r\n\r\np3 = performance.now();\r\nconsole.log( \"for...in/hasOwnProperty approach took \" + (p3 - p2) + \" milliseconds.\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>In my Firefox I have following results</p>\n\n<ul>\n<li>Object.keys approach took 40.21101451665163 milliseconds.</li>\n<li>for...in/hasOwnProperty approach took 98.26163508463651 milliseconds.</li>\n</ul>\n\n<p>PS. on Chrome the difference even bigger <a href=\"http://codepen.io/dsheiko/pen/JdrqXa\" rel=\"noreferrer\">http://codepen.io/dsheiko/pen/JdrqXa</a></p>\n\n<p>PS2: In ES6 (EcmaScript 2015) you can iterate iterable object nicer: </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let map = new Map().set('a', 1).set('b', 2);\r\nfor (let pair of map) {\r\n    console.log(pair);\r\n}\r\n\r\n// OR \r\nlet map = new Map([\r\n    [false, 'no'],\r\n    [true,  'yes'],\r\n]);\r\nmap.forEach((value, key) =&gt; {\r\n    console.log(key, value);\r\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 998008,
      "name": "Dmitry Sheiko",
      "reputation": 561
    }
  },
  {
    "soID": 45218814,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/45218814",
    "title": null,
    "body": "<p>In modern language it would be </p>\n\n<pre><code>function loadJs( url ){\n  return new Promise( resolve =&gt; {\n    const script = document.createElement( \"script\" );\n    script.src = url;\n    script.onload = resolve;\n    document.head.appendChild( script );\n  });\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 998008,
      "name": "Dmitry Sheiko",
      "reputation": 561
    }
  },
  {
    "soID": 21277220,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/21277220",
    "title": null,
    "body": "<p>This will work... You need to call this function where you need get the parameter by passing its name...</p>\n\n<pre><code>function getParameterByName(name)\n{\n  name = name.replace(/[\\[]/,\"\\\\\\[\").replace(/[\\]]/,\"\\\\\\]\");\n  var regexS = \"[\\\\?&amp;]\"+name+\"=([^&amp;#]*)\";\n  var regex = new RegExp( regexS );\n  var results = regex.exec( window.location.href );\n  alert(results[1]);\n  if (results == null)\n    return \"\";\n  else\n    return results[1];\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 7842708,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/7842708",
    "title": null,
    "body": "<p>This just worked for me. It selects for strings that do not contain the term \"Deleted:\"</p>\n\n<pre><code>if (eventString.indexOf(\"Deleted:\") == -1)\n</code></pre>\n",
    "score": 42,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1006114,
      "name": "writtinfool",
      "reputation": 445
    }
  },
  {
    "soID": 12995510,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/12995510",
    "title": null,
    "body": "<p>If you're using the jQuery library, consider using \n<a href=\"http://api.jquery.com/jQuery.each/\" rel=\"nofollow noreferrer\">http://api.jquery.com/jQuery.each/</a></p>\n\n<p>From the documentation:</p>\n\n<blockquote>\n  <p><strong><code>jQuery.each( collection, callback(indexInArray, valueOfElement) )</code></strong> </p>\n  \n  <p><strong>Returns:</strong> <em>Object</em></p>\n  \n  <p><strong>Description:</strong> <em>A generic iterator function, which can be used to\n  seamlessly iterate over both objects and arrays. Arrays and array-like\n  objects with a length property (such as a function's arguments object)\n  are iterated by numeric index, from 0 to length-1. Other objects are\n  iterated via their named properties.</em></p>\n  \n  <p>The <code>$.each()</code> function is not the same as <code>$(selector).each()</code>, which is\n  used to iterate, exclusively, over a jQuery object. The <code>$.each()</code>\n  function can be used to iterate over any collection, whether it is a\n  map (JavaScript object) or an array. In the case of an array, the\n  callback is passed an array index and a corresponding array value each\n  time. (The value can also be accessed through the <code>this</code> keyword, but\n  Javascript will always wrap the <code>this</code> value as an <code>Object</code> even if it is\n  a simple string or number value.) The method returns its first\n  argument, the object that was iterated.</p>\n</blockquote>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1009332,
      "name": "justingordon",
      "reputation": 5226
    }
  },
  {
    "soID": 37864649,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/37864649",
    "title": null,
    "body": "<p>I already use the function redirect() of JavaScript. It's working.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    $(function () {\n        //It's similar to HTTP redirect\n        window.location.replace(\"http://www.Technomark.in\");\n\n        //It's similar to clicking on a link\n        window.location.href = \"Http://www.Technomark.in\";\n    })\n&lt;/script&gt;\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1012506,
      "name": "user1012506",
      "reputation": 419
    }
  },
  {
    "soID": 42427815,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/42427815",
    "title": null,
    "body": "<h1>Using Javascript:</h1>\n\n<h3>Method 1:</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>window.location.href=\"http://google.com\";</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h3>Method 2:</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>window.location.replace(\"http://google.com\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h1>Using jQuery:</h1>\n\n<h3>Method 1: $(location)</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(location).attr('href', 'http://google.com');</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h3>Method 2: Reusable Function</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>jQuery.fn.redirectTo = function(url){\r\n\twindow.location.href = url;\r\n}\r\n\r\njQuery(window).redirectTo(\"http://google.com\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1019089,
      "name": "Kalpesh Panchal",
      "reputation": 339
    }
  },
  {
    "soID": 18499890,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/18499890",
    "title": null,
    "body": "<p>You were looking for <code>.indexOf</code><sup><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\">MDN</a></sup>.</p>\n\n<p><code>indexOf</code> is going to return an index to the matched substring. The index will correlate to where the substring starts. If there is no match, a -1 is returned. Here is a <strong><a href=\"http://jsfiddle.net/BFT5T/\">simple demo</a></strong> of that concept:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var str = \"Hello World\"; // For example, lets search this string,\r\nvar term = \"World\"; // for the term \"World\",\r\nvar index = str.indexOf(term); // and get its index.\r\nif (index != -1) { // If the index is not -1 then the term was matched in the string,\r\n  alert(index); // and we can do some work based on that logic. (6 is alerted)\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 44,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1026459,
      "name": "Travis J",
      "reputation": 56451
    }
  },
  {
    "soID": 29951409,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/29951409",
    "title": null,
    "body": "<p>So many answers doing half the work. Yes, <code>!!X</code> could be read as \"the truthiness of X [represented as a boolean]\". But <code>!!</code> isn't, practically speaking, so important for figuring out whether a single variable is (or even if many variables are) truthy or falsy. <code>!!myVar === true</code> is the same as just <code>myVar</code>. Comparing <code>!!X</code> to a \"real\" boolean isn't really useful.</p>\n\n<p>What you gain with <code>!!</code> is the ability to check the truthiness of multiple variables <em>against each other</em> in a repeatable, standardized (and JSLint friendly) fashion.</p>\n\n<h3>Simply casting :(</h3>\n\n<p>That is...</p>\n\n<ul>\n<li><code>0 === false</code> is <code>false</code>. </li>\n<li><code>!!0 === false</code> is <code>true</code>.</li>\n</ul>\n\n<p>The above's not so useful. <code>if (!0)</code> gives you the same results as <code>if (!!0 === false)</code>. I can't think of a good case for casting a variable to boolean and then comparing to a \"true\" boolean.</p>\n\n<p>See \"== and !=\" from <a href=\"http://old.jslint.com/lint.html\" rel=\"nofollow noreferrer\">JSLint's directions</a> (note: Crockford is moving his site around a bit; that link is liable to die at some point) for a little on why:</p>\n\n<blockquote>\n  <p>The == and != operators do type coercion before comparing. This is bad because it causes ' \\t\\r\\n' == 0 to be true. This can mask type errors. JSLint cannot reliably determine if == is being used correctly, so it is best to not use == and != at all and to always use the more reliable === and !== operators instead.</p>\n  \n  <p>If you only care that a value is truthy or falsy, then use the short form. Instead of<br>\n  <code>(foo != 0)</code></p>\n  \n  <p>just say<br>\n  <code>(foo)</code></p>\n  \n  <p>and instead of<br>\n  <code>(foo == 0)</code></p>\n  \n  <p>say<br>\n  <code>(!foo)</code></p>\n</blockquote>\n\n<p>Note that there are some <a href=\"https://stackoverflow.com/a/3619813/1028230\">unintuitive cases</a> where a boolean will be cast to a number (<code>true</code> is cast to <code>1</code> and <code>false</code> to <code>0</code>) when comparing a boolean to a number. In this case, <code>!!</code> might be mentally useful. Though, again, <strong>these are cases where you're comparing a non-boolean to a hard-typed boolean, which is, imo, a serious mistake.</strong> <code>if (-1)</code> is still the way to go here.</p>\n\n<pre><code>╔═══════════════════════════════════════╦═══════════════════╦═══════════╗\n║               Original                ║    Equivalent     ║  Result   ║\n╠═══════════════════════════════════════╬═══════════════════╬═══════════╣\n║ if (-1 == true) console.log(\"spam\")   ║ if (-1 == 1)      ║ undefined ║\n║ if (-1 == false) console.log(\"spam\")  ║ if (-1 == 0)      ║ undefined ║\n║   Order doesn't matter...             ║                   ║           ║\n║ if (true == -1) console.log(\"spam\")   ║ if (1 == -1)      ║ undefined ║\n╠═══════════════════════════════════════╬═══════════════════╬═══════════╣\n║ if (!!-1 == true) console.log(\"spam\") ║ if (true == true) ║ spam      ║ better\n╠═══════════════════════════════════════╬═══════════════════╬═══════════╣\n║ if (-1) console.log(\"spam\")           ║ if (truthy)       ║ spam      ║ still best\n╚═══════════════════════════════════════╩═══════════════════╩═══════════╝\n</code></pre>\n\n<p>And things get even crazier depending on your engine. WScript, for instance, wins the prize.</p>\n\n<pre><code>function test()\n{\n    return (1 === 1);\n}\nWScript.echo(test());\n</code></pre>\n\n<p>Because of <a href=\"https://stackoverflow.com/a/14462348/1028230\">some historical Windows jive</a>, that'll output -1 in a message box! Try it in a cmd.exe prompt and see! But <code>WScript.echo(-1 == test())</code> still gives you 0, or WScript's <code>false</code>. <a href=\"https://www.google.com/search?q=look+away+I%27m+hideous\" rel=\"nofollow noreferrer\">Look away. It's hideous.</a></p>\n\n<h3>Comparing truthiness :)</h3>\n\n<p>But what if I have two values I need to check for equal truthi/falsi-ness?</p>\n\n<p>Pretend we have <code>myVar1 = 0;</code> and <code>myVar2 = undefined;</code>.</p>\n\n<ul>\n<li><code>myVar1 === myVar2</code> is <code>0 === undefined</code> and is obviously false.</li>\n<li><code>!!myVar1 === !!myVar2</code> is <code>!!0 === !!undefined</code> and is true! Same truthiness! (In this case, both \"have a truthiness of falsy\".)</li>\n</ul>\n\n<p>So the only place you'd really need to use \"boolean-cast variables\" would be if you had a situation where you're checking if both variables have the <em>same</em> truthiness, right? That is, <b>use <code>!!</code> if you need to see if two vars are <em>both truthy or both falsy</em> (or not), that is, <em>of equal</em> (or not) <em>truthiness</em>.</b></p>\n\n<p>I can't think of a great, non-contrived use case for that offhand. Maybe you have \"linked\" fields in a form? </p>\n\n<pre><code>if (!!customerInput.spouseName !== !!customerInput.spouseAge ) {\n    errorObjects.spouse = \"Please either enter a valid name AND age \" \n        + \"for your spouse or leave all spouse fields blank.\";\n}\n</code></pre>\n\n<p>So now if you have a truthy for both <em>or</em> a falsy for both spouse name and age, you can continue. Otherwise you've only got one field with a value (or a very early arranged marriage) and need to create an extra error on your <code>errorObjects</code> collection.</p>\n\n<p>Or, admittedly, in some cases, you gain increased readability, as in the <code>q</code> lib <a href=\"https://github.com/kriskowal/q/blob/v1/q.js#L72\" rel=\"nofollow noreferrer\">here</a>:</p>\n\n<pre><code>try {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n</code></pre>\n\n<p>We're not interested in <code>e.stack</code> when we deal with <code>hasStacks</code> later. We just want to lossily retain truthiness. </p>\n\n<p>That said, operationally, we could have left out the <code>!!</code> and had the same thing happen. <a href=\"https://github.com/kriskowal/q/blob/v1/q.js#L362\" rel=\"nofollow noreferrer\">One example</a>:</p>\n\n<pre><code>if (hasStacks &amp;&amp;\n    promise.stack &amp;&amp;...\n</code></pre>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1028230,
      "name": "ruffin",
      "reputation": 7196
    }
  },
  {
    "soID": 21273362,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/21273362",
    "title": null,
    "body": "<p>The standard way to catch <code>null</code> and <code>undefined</code> simultaneously is this:</p>\n\n<pre><code>if (variable == null) {\n     // do something \n}\n</code></pre>\n\n<p>--which is 100% equivalent to the more explicit but less concise:</p>\n\n<pre><code>if (variable === undefined || variable === null) {\n     // do something \n}\n</code></pre>\n\n<p>When writing professional JS, it's taken for granted that <a href=\"https://dorey.github.io/JavaScript-Equality-Table/\" rel=\"noreferrer\">type equality and the behavior of <code>==</code> vs <code>===</code></a> is understood. Therefore we use <code>==</code> and only compare to <code>null</code>.</p>\n\n<hr>\n\n<h2><strong><em>Edit again</em></strong></h2>\n\n<p>The comments suggesting the use of <code>typeof</code> are simply <em>wrong.</em> Yes, my solution above will cause a ReferenceError if the variable doesn't exist. <em>This is a good thing.</em> This ReferenceError is desirable: it will help you find your mistakes and fix them before you ship your code, just like compiler errors would in other languages.</p>\n\n<p><strong>You should not have any references to undeclared variables in your code.</strong></p>\n\n<p>Several people have attempted to make the argument that their code \"interacts with other people's code and/or data input,\" whose completeness they cannot guarantee, and that this somehow justifies the need for <code>typeof</code>. This is, again, incorrect. You will not find this technique used anywhere in the source of any major framework or library such as Angular, React, Underscore, jQuery, Meteor, Node, Express, etc. Do you sincerely believe your code interacts with more other things than those frameworks? Yet somehow they avoided the use of <code>typeof</code>.</p>\n\n<p>At any rate, the method I described above is for identifying whether a <em>declared</em> variable has a value of <code>null</code> or <code>undefined</code>, <em>not</em> for checking whether a variable has been declared. But <code>typeof</code> wouldn't tell you whether a variable had been declared, either. Such a determination can only be safely accomplished at runtime using <code>try</code>/<code>catch</code>, like so:</p>\n\n<pre><code>try {\n    nameOfMyPossiblyDeclaredVariable;\n} catch(err) {\n    // caught the reference error\n    // code here will execute **only** if variable was never declared\n}\n</code></pre>\n\n<p>I have no idea why you would ever need to do this, but I've included it for curiosity's sake. If you find yourself doing this in practice, you have almost <strong>certainly</strong> done something wrong.</p>\n\n<p>A construct like <code>if (typeof var == 'undefined')</code> will <em>only</em> tell you that one  of the following is true, but not which: either that 1) the variable or property is undeclared, or 2) the variable or property is declared and set to <code>undefined</code>. This is a major flaw, not knowing which it is. It will also not catch <code>null</code> at all, since <code>typeof null</code> is <code>\"object\"</code>.</p>\n",
    "score": 786,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1029146,
      "name": "Aerovistae",
      "reputation": 13301
    }
  },
  {
    "soID": 9340119,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/9340119",
    "title": null,
    "body": "<p>It's possible without using hashes, have a look to the <a href=\"http://www.asual.com/jquery/address/\" rel=\"nofollow\">asual jQuery Address plugin</a>:</p>\n\n<p>Example <a href=\"http://lab.laukstein.com/ajax-seo/\" rel=\"nofollow\">here</a>.</p>\n\n<p>Note that it will use hashes in IE, there is no workaround for it.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1031658,
      "name": "satoshi",
      "reputation": 1548
    }
  },
  {
    "soID": 10869215,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/10869215",
    "title": null,
    "body": "<p>I just wanted to add to all the <code>Object.create</code> solutions in this post, that this does not work in the desired way with nodejs. </p>\n\n<p>In Firefox the result of</p>\n\n<pre><code>var a = {\"test\":\"test\"};\nvar b = Object.create(a);\nconsole.log(b);´\n</code></pre>\n\n<p>is </p>\n\n<p><code>{test:\"test\"}</code>.</p>\n\n<p>In nodejs it is </p>\n\n<pre><code>{}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10869248,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/10869248",
    "title": null,
    "body": "<p>If you do not use functions within your object, a very simple one liner can be the following:</p>\n\n<pre><code>var cloneOfA = JSON.parse(JSON.stringify(a));\n</code></pre>\n\n<p>This works for all kind of objects containing objects, arrays, strings, booleans and numbers.</p>\n\n<p>See also <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/The_structured_clone_algorithm\" rel=\"noreferrer\">this article about the structured clone algorithm of browsers</a> which is used when posting messages to and from a worker. It also contains a function for deep cloning.</p>\n",
    "score": 554,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 20518446,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/20518446",
    "title": null,
    "body": "<p>Here is a <strong>synchronous</strong> version <strong>without jQuery</strong>:</p>\n\n<pre><code>function myRequire( url ) {\n    var ajax = new XMLHttpRequest();\n    ajax.open( 'GET', url, false ); // &lt;-- the 'false' makes it synchronous\n    ajax.onreadystatechange = function () {\n        var script = ajax.response || ajax.responseText;\n        if (ajax.readyState === 4) {\n            switch( ajax.status) {\n                case 200:\n                    eval.apply( window, [script] );\n                    console.log(\"script loaded: \", url);\n                    break;\n                default:\n                    console.log(\"ERROR: script not loaded: \", url);\n            }\n        }\n    };\n    ajax.send(null);\n}\n</code></pre>\n\n<p>Note that to get this working cross-domain, the server will need to set <code>allow-origin</code> header in its response.</p>\n",
    "score": 35,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1031916,
      "name": "heinob",
      "reputation": 4682
    }
  },
  {
    "soID": 19486875,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/19486875",
    "title": null,
    "body": "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\"><code>String.prototype.includes()</code></a> was introduced in ES6.</p>\n\n<blockquote>\n  <p>Determines whether one string may be found within another string, \n  returning true or false as appropriate.</p>\n</blockquote>\n\n<h2>Syntax</h2>\n\n<pre><code>var contained = str.includes(searchString [, position]);  \n</code></pre>\n\n<h2>Parameters</h2>\n\n<pre><code>searchString\n</code></pre>\n\n<p>A string to be searched for within this string.</p>\n\n<pre><code>position\n</code></pre>\n\n<p>The position in this string at which to begin searching for <code>searchString</code> defaults to 0.  </p>\n\n<h2>Example</h2>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var str = \"To be, or not to be, that is the question.\";\r\n\r\nconsole.log(str.includes(\"To be\"));    // true\r\nconsole.log(str.includes(\"question\")); // true\r\nconsole.log(str.includes(\"To be\", 1)); // false  </code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h2>Note</h2>\n\n<p>This may require ES6 shim in older browsers.</p>\n",
    "score": 141,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1031945,
      "name": "Aniket Kulkarni",
      "reputation": 8798
    }
  },
  {
    "soID": 29335245,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/29335245",
    "title": null,
    "body": "<p>A selector returns multiple objects, and it must take the first item in the array:</p>\n\n<pre><code>// Collection\nvar chckremember = $(\"#chckremember\");\n\n\n// Result boolen\nvar ischecked=chckremember[0].checked;\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28422131,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/28422131",
    "title": null,
    "body": "<p>Via jQuery:</p>\n\n<pre><code>var url = 'http://www.w3schools.com/';\n$(location).attr('href',url);\n</code></pre>\n\n<p>jsfiddle: <a href=\"http://jsfiddle.net/n09tL235/1/\" rel=\"noreferrer\">http://jsfiddle.net/n09tL235/1/</a></p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1037073,
      "name": "Razan Paul",
      "reputation": 5713
    }
  },
  {
    "soID": 22711660,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/22711660",
    "title": null,
    "body": "<p>Return a random number between 1 and 10:</p>\n\n<pre><code>Math.floor((Math.random()*10) + 1); \n</code></pre>\n\n<p>Return a random number between 1 and 100:</p>\n\n<pre><code>Math.floor((Math.random()*100) + 1)\n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1037363,
      "name": "Prasobh.K",
      "reputation": 550
    }
  },
  {
    "soID": 24533791,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/24533791",
    "title": null,
    "body": "<p>In Chrome you can use <a href=\"http://anti-code.com/devtools-cheatsheet/#command-line-api\" rel=\"nofollow\"><code>copy('the text or variable etc')</code></a>.  While this isn't cross-browser (and <a href=\"https://code.google.com/p/chromium/issues/detail?id=260401\" rel=\"nofollow\">doesn't work in a snippet?</a>), you could add it to the other cross-browser answers.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1037948,
      "name": "drzaus",
      "reputation": 12141
    }
  },
  {
    "soID": 14305002,
    "parentID": 3390396,
    "url": "https://stackoverflow.com/q/14305002",
    "title": null,
    "body": "<p>Some scenarios illustrating the results of the various answers:\n<a href=\"http://jsfiddle.net/drzaus/UVjM4/\">http://jsfiddle.net/drzaus/UVjM4/</a></p>\n\n<p><em>(Note that the use of <code>var</code> for <code>in</code> tests make a difference when in a scoped wrapper)</em></p>\n\n<p>Code for reference:</p>\n\n<pre><code>(function(undefined) {\n    var definedButNotInitialized;\n    definedAndInitialized = 3;\n    someObject = {\n        firstProp: \"1\"\n        , secondProp: false\n        // , undefinedProp not defined\n    }\n    // var notDefined;\n\n    var tests = [\n        'definedButNotInitialized in window',\n        'definedAndInitialized in window',\n        'someObject.firstProp in window',\n        'someObject.secondProp in window',\n        'someObject.undefinedProp in window',\n        'notDefined in window',\n\n        '\"definedButNotInitialized\" in window',\n        '\"definedAndInitialized\" in window',\n        '\"someObject.firstProp\" in window',\n        '\"someObject.secondProp\" in window',\n        '\"someObject.undefinedProp\" in window',\n        '\"notDefined\" in window',\n\n        'typeof definedButNotInitialized == \"undefined\"',\n        'typeof definedButNotInitialized === typeof undefined',\n        'definedButNotInitialized === undefined',\n        '! definedButNotInitialized',\n        '!! definedButNotInitialized',\n\n        'typeof definedAndInitialized == \"undefined\"',\n        'typeof definedAndInitialized === typeof undefined',\n        'definedAndInitialized === undefined',\n        '! definedAndInitialized',\n        '!! definedAndInitialized',\n\n        'typeof someObject.firstProp == \"undefined\"',\n        'typeof someObject.firstProp === typeof undefined',\n        'someObject.firstProp === undefined',\n        '! someObject.firstProp',\n        '!! someObject.firstProp',\n\n        'typeof someObject.secondProp == \"undefined\"',\n        'typeof someObject.secondProp === typeof undefined',\n        'someObject.secondProp === undefined',\n        '! someObject.secondProp',\n        '!! someObject.secondProp',\n\n        'typeof someObject.undefinedProp == \"undefined\"',\n        'typeof someObject.undefinedProp === typeof undefined',\n        'someObject.undefinedProp === undefined',\n        '! someObject.undefinedProp',\n        '!! someObject.undefinedProp',\n\n        'typeof notDefined == \"undefined\"',\n        'typeof notDefined === typeof undefined',\n        'notDefined === undefined',\n        '! notDefined',\n        '!! notDefined'\n    ];\n\n    var output = document.getElementById('results');\n    var result = '';\n    for(var t in tests) {\n        if( !tests.hasOwnProperty(t) ) continue; // bleh\n\n        try {\n            result = eval(tests[t]);\n        } catch(ex) {\n            result = 'Exception--' + ex;\n        }\n        console.log(tests[t], result);\n        output.innerHTML += \"\\n\" + tests[t] + \": \" + result;\n    }\n})();\n</code></pre>\n\n<p>And results:</p>\n\n<pre><code>definedButNotInitialized in window: true\ndefinedAndInitialized in window: false\nsomeObject.firstProp in window: false\nsomeObject.secondProp in window: false\nsomeObject.undefinedProp in window: true\nnotDefined in window: Exception--ReferenceError: notDefined is not defined\n\"definedButNotInitialized\" in window: false\n\"definedAndInitialized\" in window: true\n\"someObject.firstProp\" in window: false\n\"someObject.secondProp\" in window: false\n\"someObject.undefinedProp\" in window: false\n\"notDefined\" in window: false\ntypeof definedButNotInitialized == \"undefined\": true\ntypeof definedButNotInitialized === typeof undefined: true\ndefinedButNotInitialized === undefined: true\n! definedButNotInitialized: true\n!! definedButNotInitialized: false\ntypeof definedAndInitialized == \"undefined\": false\ntypeof definedAndInitialized === typeof undefined: false\ndefinedAndInitialized === undefined: false\n! definedAndInitialized: false\n!! definedAndInitialized: true\ntypeof someObject.firstProp == \"undefined\": false\ntypeof someObject.firstProp === typeof undefined: false\nsomeObject.firstProp === undefined: false\n! someObject.firstProp: false\n!! someObject.firstProp: true\ntypeof someObject.secondProp == \"undefined\": false\ntypeof someObject.secondProp === typeof undefined: false\nsomeObject.secondProp === undefined: false\n! someObject.secondProp: true\n!! someObject.secondProp: false\ntypeof someObject.undefinedProp == \"undefined\": true\ntypeof someObject.undefinedProp === typeof undefined: true\nsomeObject.undefinedProp === undefined: true\n! someObject.undefinedProp: true\n!! someObject.undefinedProp: false\ntypeof notDefined == \"undefined\": true\ntypeof notDefined === typeof undefined: true\nnotDefined === undefined: Exception--ReferenceError: notDefined is not defined\n! notDefined: Exception--ReferenceError: notDefined is not defined\n!! notDefined: Exception--ReferenceError: notDefined is not defined\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1037948,
      "name": "drzaus",
      "reputation": 12141
    }
  },
  {
    "soID": 10211903,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/10211903",
    "title": null,
    "body": "<p>It's not 100% identical, but similar:</p>\n\n<pre><code>var myStringArray = ['Hello', 'World']; // array uses [] not {}\nfor (var i in myStringArray) {\n    console.log(i + ' -&gt; ' + myStringArray[i]); // i is the index/key, not the item\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1040080,
      "name": "Muhammad Alvin",
      "reputation": 608
    }
  },
  {
    "soID": 36555927,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/36555927",
    "title": null,
    "body": "<pre><code>function replaceAll(str, find, replace) {\n    var $r=\"\";\n    while($r!=str){ \n        $r = str;\n        str = str.replace(find, replace);\n    }\n    return str;\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1040315,
      "name": "theWalker",
      "reputation": 1259
    }
  },
  {
    "soID": 9733676,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/9733676",
    "title": null,
    "body": "<p>Thought I would add another option for those who might already be using the Underscore.js library in their script.  Underscore.js has an isArray() function (see <a href=\"http://underscorejs.org/#isArray\" rel=\"noreferrer\">http://underscorejs.org/#isArray</a>).</p>\n\n<pre><code>_.isArray(object) \n</code></pre>\n\n<blockquote>\n  <p>Returns true if object is an Array.</p>\n</blockquote>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1043012,
      "name": "Benjen",
      "reputation": 1294
    }
  },
  {
    "soID": 8119455,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/8119455",
    "title": null,
    "body": "<p><code>$(\"#DropDownID\").val()</code>  will give the selected index value.</p>\n",
    "score": 52,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1045279,
      "name": "Neeraj",
      "reputation": 633
    }
  },
  {
    "soID": 14515902,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/14515902",
    "title": null,
    "body": "<p><em><strong>This the most simple and small function JavaScript to get int ans String parameter value from URL</em></strong></p>\n\n<pre><code>/* THIS FUNCTION IS TO FETCH INT PARAMETER VALUES */\n\nfunction getParameterint(param) {\n            var val = document.URL;\n            var url = val.substr(val.indexOf(param))  \n            var n=parseInt(url.replace(param+\"=\",\"\"));\n            alert(n); \n}\ngetParameteraint(\"page\");\ngetParameteraint(\"pagee\");\n\n/*THIS FUNCTION IS TO FETCH STRING PARAMETER*/\nfunction getParameterstr(param) {\n            var val = document.URL;\n            var url = val.substr(val.indexOf(param))  \n            var n=url.replace(param+\"=\",\"\");\n            alert(n); \n}\ngetParameterstr(\"str\");\n</code></pre>\n\n<p><strong>Source And DEMO :</strong> <a href=\"http://bloggerplugnplay.blogspot.in/2012/08/how-to-get-url-parameter-in-javascript.html\" rel=\"nofollow\">http://bloggerplugnplay.blogspot.in/2012/08/how-to-get-url-parameter-in-javascript.html</a></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 8134354,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/8134354",
    "title": null,
    "body": "<p>A more cross-browser friendly and more optimal solution will be to use the <code>splice</code> method to empty the content of the array A as below:</p>\n\n<p><code>A.splice(0, A.length);</code></p>\n",
    "score": 148,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1047275,
      "name": "Anthony",
      "reputation": 1585
    }
  },
  {
    "soID": 8139323,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/8139323",
    "title": null,
    "body": "<p>Also, check if the user does not select anything.</p>\n\n<pre><code>var radioanswer = 'none';\nif ($('input[name=myRadio]:checked').val() != null) {           \n   radioanswer = $('input[name=myRadio]:checked').val();\n}\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1047961,
      "name": "Mark",
      "reputation": 131
    }
  },
  {
    "soID": 20023119,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/20023119",
    "title": null,
    "body": "<p>In ECMAScript 5 you have new approach in iteration fields of literal - <code>Object.keys</code></p>\n\n<p>More information you can see on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" rel=\"noreferrer\">MDN</a></p>\n\n<p>My choice is below as a faster solution in current versions of browsers (Chrome30, IE10, FF25)</p>\n\n<pre><code>var keys = Object.keys(p),\n    len = keys.length,\n    i = 0,\n    prop,\n    value;\nwhile (i &lt; len) {\n    prop = keys[i];\n    value = p[prop];\n    i += 1;\n}\n</code></pre>\n\n<p>You can compare performance of this approach with different implementations on <a href=\"http://jsperf.com/\" rel=\"noreferrer\">jsperf.com</a>:</p>\n\n<ul>\n<li><a href=\"http://jsperf.com/extendimplementations/2\" rel=\"noreferrer\">Extend Implementations</a></li>\n<li><a href=\"http://jsperf.com/object-keys-iteration/30\" rel=\"noreferrer\">Object keys iteration</a></li>\n<li><a href=\"http://jsperf.com/object-literal-iteration/5\" rel=\"noreferrer\">object literal iteration</a></li>\n</ul>\n\n<p>Browser support you can see on <a href=\"http://kangax.github.io/es5-compat-table/#Object.keys\" rel=\"noreferrer\">Kangax's compat table</a></p>\n\n<p>For old browser you have <a href=\"http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html\" rel=\"noreferrer\">simple</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" rel=\"noreferrer\">full</a> polyfill</p>\n\n<p><strong>UPD:</strong></p>\n\n<p>performance comparison for all most popular cases in this question on <code>perfjs.info</code>:</p>\n\n<p><a href=\"http://perfjs.info/#!/384A61CA-DA2E-4FD2-A113-080010D4A42B\" rel=\"noreferrer\">object literal iteration</a></p>\n",
    "score": 38,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1053480,
      "name": "Pencroff",
      "reputation": 784
    }
  },
  {
    "soID": 14400148,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/14400148",
    "title": null,
    "body": "<pre><code>if( undefined == $('#isAgeSelected').attr('checked') ) {\n    $(\"#txtAge\").hide();\n} else {\n    $(\"#txtAge\").show();\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28241682,
    "parentID": 3437786,
    "url": "https://stackoverflow.com/q/28241682",
    "title": null,
    "body": "<p>Here is a cross browser solution with pure <strong>JavaScript</strong> (<a href=\"http://www.w3schools.com/jsref/prop_win_innerheight.asp\" rel=\"noreferrer\">Source</a>): </p>\n\n<pre><code>var width = window.innerWidth\n|| document.documentElement.clientWidth\n|| document.body.clientWidth;\n\nvar height = window.innerHeight\n|| document.documentElement.clientHeight\n|| document.body.clientHeight;\n</code></pre>\n",
    "score": 284,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1055664,
      "name": "confile",
      "reputation": 10973
    }
  },
  {
    "soID": 23785342,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/23785342",
    "title": null,
    "body": "<p>I've created a complete function to determine if object is empty.</p>\n\n<p>It uses <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" rel=\"nofollow noreferrer\"><code>Object.keys</code></a> from <a href=\"http://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition\" rel=\"nofollow noreferrer\">ECMAScript 5</a> (ES5) functionality if possible to achieve the best performance (see <a href=\"http://kangax.github.io/compat-table/es5/#Object.keys\" rel=\"nofollow noreferrer\">compatibility table</a>) and fallbacks to the most compatible approach for older engines (browsers).</p>\n\n<h1>Solution</h1>\n\n<pre><code>/**\n * Returns true if specified object has no properties,\n * false otherwise.\n *\n * @param {object} object\n * @returns {boolean}\n */\nfunction isObjectEmpty(object)\n{\n    if ('object' !== typeof object) {\n        throw new Error('Object must be specified.');\n    }\n\n    if (null === object) {\n        return true;\n    }\n\n    if ('undefined' !== Object.keys) {\n        // Using ECMAScript 5 feature.\n        return (0 === Object.keys(object).length);\n    } else {\n        // Using legacy compatibility mode.\n        for (var key in object) {\n            if (object.hasOwnProperty(key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n</code></pre>\n\n<p>Here's the <a href=\"https://gist.github.com/slavafomin/c7ab7f7e45431748ad8c#file-object-empty-js\" rel=\"nofollow noreferrer\">Gist</a> for this code.</p>\n\n<p>And here's the <a href=\"http://jsfiddle.net/slavafomin/b2rw4/\" rel=\"nofollow noreferrer\">JSFiddle</a> with demonstration and a simple test.</p>\n\n<p>I hope it will help someone. Cheers!</p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1056679,
      "name": "Slava Fomin II",
      "reputation": 7420
    }
  },
  {
    "soID": 17083793,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/17083793",
    "title": null,
    "body": "<p><strong>None of the answers found here is correct</strong>. @stinkycheeseman asked to <strong>round up</strong>, you all rounded the number.</p>\n\n<p>To round up, use this:</p>\n\n<pre><code>Math.ceil(num * 100)/100;\n</code></pre>\n",
    "score": 51,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1057527,
      "name": "machineaddict",
      "reputation": 2340
    }
  },
  {
    "soID": 34571216,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/34571216",
    "title": null,
    "body": "<pre><code>/**\n * Format string by replacing placeholders with value from element with\n * corresponsing index in `replacementArray`.\n * Replaces are made simultaneously, so that replacement values like\n * '{1}' will not mess up the function.\n *\n * Example 1:\n * ('{2} {1} {0}', ['three', 'two' ,'one']) -&gt; 'one two three'\n *\n * Example 2:\n * ('{0}{1}', ['{1}', '{0}']) -&gt; '{1}{0}'\n */\nfunction stringFormat(formatString, replacementArray) {\n    return formatString.replace(\n        /\\{(\\d+)\\}/g, // Matches placeholders, e.g. '{1}'\n        function formatStringReplacer(match, placeholderIndex) {\n            // Convert String to Number\n            placeholderIndex = Number(placeholderIndex);\n\n            // Make sure that index is within replacement array bounds\n            if (placeholderIndex &lt; 0 ||\n                placeholderIndex &gt; replacementArray.length - 1\n            ) {\n                return placeholderIndex;\n            }\n\n            // Replace placeholder with value from replacement array\n            return replacementArray[placeholderIndex];\n        }\n    );\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31503304,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/31503304",
    "title": null,
    "body": "<p>My 5 cents contribution for a specific case:</p>\n\n<pre><code>var bUndef = ($('#' + selectedNodeID).position() === undefined)\nif (bUndef)\n....\n</code></pre>\n\n<p>The property is undefided not the element!</p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1071572,
      "name": "Caesar",
      "reputation": 167
    }
  },
  {
    "soID": 8330107,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/8330107",
    "title": null,
    "body": "<p>Capitalize the first letter of all words in a string: </p>\n\n<pre><code>function ucFirstAllWords( str )\n{\n    var pieces = str.split(\" \");\n    for ( var i = 0; i &lt; pieces.length; i++ )\n    {\n        var j = pieces[i].charAt(0).toUpperCase();\n        pieces[i] = j + pieces[i].substr(1);\n    }\n    return pieces.join(\" \");\n}\n</code></pre>\n",
    "score": 56,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1073883,
      "name": "Dan",
      "reputation": 641
    }
  },
  {
    "soID": 15686540,
    "parentID": 2067472,
    "url": "https://stackoverflow.com/q/15686540",
    "title": null,
    "body": "<p>JSONP is a great away to get around cross-domain scripting errors. You can consume a JSONP service purely with JS without having to implement a AJAX proxy on the server side. </p>\n\n<p>You can use the <a href=\"http://b1t.co\" rel=\"noreferrer\">b1t.co</a> service to see how it works. This is a free JSONP service that alllows you to minify your URLs. Here is the url to use for the service:</p>\n\n<p><a href=\"http://b1t.co/Site/api/External/MakeUrlWithGet?callback=[resultsCallBack]&amp;url=[escapedUrlToMinify]\" rel=\"noreferrer\">http://b1t.co/Site/api/External/MakeUrlWithGet?callback=[resultsCallBack]&amp;url=[escapedUrlToMinify]</a></p>\n\n<p>For example the call, <a href=\"http://b1t.co/Site/api/External/MakeUrlWithGet?callback=whateverJavascriptName&amp;url=google.com\" rel=\"noreferrer\">http://b1t.co/Site/api/External/MakeUrlWithGet?callback=whateverJavascriptName&amp;url=google.com</a></p>\n\n<p>would return</p>\n\n<pre><code>whateverJavascriptName({\"success\":true,\"url\":\"http://google.com\",\"shortUrl\":\"http://b1t.co/54\"});\n</code></pre>\n\n<p>And thus when that get's loaded in your js as a src, it will automatically run whateverJavascriptName which you should implement as your callback function:</p>\n\n<pre><code>function minifyResultsCallBack(data)\n{\n    document.getElementById(\"results\").innerHTML = JSON.stringify(data);\n}\n</code></pre>\n\n<p>To actually make the JSONP call, you can do it about several ways (including using jQuery) but here is a pure JS example:</p>\n\n<pre><code>function minify(urlToMinify)\n{\n   url = escape(urlToMinify);\n   var s = document.createElement('script');\n   s.id = 'dynScript';\n   s.type='text/javascript';\n   s.src = \"http://b1t.co/Site/api/External/MakeUrlWithGet?callback=resultsCallBack&amp;url=\" + url;\n   document.getElementsByTagName('head')[0].appendChild(s);\n}\n</code></pre>\n\n<p>A step by step example and a jsonp web service to practice on is available at: <a href=\"http://b1t.co/5f\" rel=\"noreferrer\">this post</a></p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1082412,
      "name": "dardawk",
      "reputation": 333
    }
  },
  {
    "soID": 24911172,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/24911172",
    "title": null,
    "body": "<p>There are various way to loop through array in JavaScript.  </p>\n\n<p><strong>Generic loop:</strong></p>\n\n<pre><code>var i;\nfor (i = 0; i &lt; substr.length; ++i) {\n    // Do something with `substr[i]`\n}\n</code></pre>\n\n<p><strong>ES5's forEach:</strong></p>\n\n<pre><code>substr.forEach(function(item) {\n    // Do something with `item`\n});\n</code></pre>\n\n<p><strong>jQuery.each:</strong></p>\n\n<pre><code>jQuery.each(substr, function(index, item) {\n    // Do something with `item` (or `this` is also `item` if you like)\n});\n</code></pre>\n\n<p>Have a look <a href=\"https://stackoverflow.com/questions/3943494/how-to-loop-through-array-in-jquery\">this</a> for detailed information or you can also check <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\" rel=\"nofollow noreferrer\">MDN</a> for looping through an array in JavaScript &amp; using jQuery check <a href=\"http://api.jquery.com/jquery.each/\" rel=\"nofollow noreferrer\">jQuery for each</a>.</p>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1085396,
      "name": "RizN81",
      "reputation": 622
    }
  },
  {
    "soID": 8439617,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/8439617",
    "title": null,
    "body": "<p>It seems to be easier in CSS: </p>\n\n<pre><code>&lt;style type=\"text/css\"&gt;\n    p.capitalize {text-transform:capitalize;}\n&lt;/style&gt;\n&lt;p class=\"capitalize\"&gt;This is some text.&lt;/p&gt;\n</code></pre>\n\n<p>This is from <em><a href=\"http://www.w3schools.com/cssref/pr_text_text-transform.asp\" rel=\"nofollow\">CSS text-transform Property</a></em> (at <a href=\"http://en.wikipedia.org/wiki/W3Schools\" rel=\"nofollow\">W3Schools</a>).</p>\n",
    "score": 35,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1088819,
      "name": "Ryan",
      "reputation": 975
    }
  },
  {
    "soID": 29559192,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/29559192",
    "title": null,
    "body": "<p>A simple loop:</p>\n\n<pre><code>var is_empty = true;\nfor(var i in obj) {\n    is_empty = false;\n    break;\n}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1091644,
      "name": "Vad",
      "reputation": 2303
    }
  },
  {
    "soID": 12652478,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/12652478",
    "title": null,
    "body": "<p>This one works with {0}, {1} and {}.</p>\n\n<pre><code>String.prototype.format = function format()\n{                                                                                                               \n  var msg = this;\n  for(var i in arguments)\n    msg = msg.replace(/\\{\\}/,arguments[i]).replace(new RegExp('\\\\{'+i+'\\\\}','g'),arguments[i]);\n  return msg;\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11832969,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/11832969",
    "title": null,
    "body": "<p>It may work for you,</p>\n\n<pre><code>Math.round(num * 100)/100;\n</code></pre>\n\n<p>to know the difference between toFixed and round. You can have a look at <em><a href=\"https://stackoverflow.com/questions/566564/javascript-functions-math-roundnum-vs-num-tofixed0-and-browser-inconsistenci\">Math.round(num) vs num.toFixed(0) and browser inconsistencies</a></em>.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1101534,
      "name": "Shreedhar",
      "reputation": 3612
    }
  },
  {
    "soID": 13138776,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/13138776",
    "title": null,
    "body": "<p>But if someone wants to redirect back to home page then he may use the following snippet.</p>\n\n<pre><code>window.location = window.location.host\n</code></pre>\n\n<p>It would be helpful if you have three different environments as development, staging, and production.</p>\n\n<p>You can explore this window or window.location object by just putting these words in Chrome Console or <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\">Firebug</a>'s Console.</p>\n",
    "score": 137,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1103486,
      "name": "Nadeem Yasin",
      "reputation": 2516
    }
  },
  {
    "soID": 21265933,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/21265933",
    "title": null,
    "body": "<p>Call() takes comma-separated arguments, ex: </p>\n\n<p><code>.call(scope, arg1, arg2, arg3)</code> </p>\n\n<p>and apply() takes an array of arguments, ex: </p>\n\n<p><code>.apply(scope, [arg1, arg2, arg3])</code> </p>\n\n<p>here are few more usage examples: \n<a href=\"http://blog.i-evaluation.com/2012/08/15/javascript-call-and-apply/\">http://blog.i-evaluation.com/2012/08/15/javascript-call-and-apply/</a></p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1104572,
      "name": "Mark Karwowski",
      "reputation": 489
    }
  },
  {
    "soID": 21636975,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/21636975",
    "title": null,
    "body": "<p>This is how I use it.</p>\n\n<pre><code>   window.location.replace('yourPage.aspx');   \n   // If you're on root and redirection page is also on the root\n\n   window.location.replace(window.location.host + '/subDirectory/yourPage.aspx');\n\n   // If you're in sub directory and redirection page is also in some other sub directory.\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1106625,
      "name": "dnxit",
      "reputation": 3144
    }
  },
  {
    "soID": 9181943,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/9181943",
    "title": null,
    "body": "<p>I verified in Firefox 9.0.1 that the following works for catching the state of a checkbox post change:</p>\n\n<pre><code>$(\"#mycheckbox\").change(function() {\n    var value = $(this).prop(\"checked\") ? 'true' : 'false';                     \n    alert(value);\n});\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12151322,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/12151322",
    "title": null,
    "body": "<h1>URLSearchParams</h1>\n\n<p>Firefox 44+, Opera 36+ and Chrome 49+ support the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams\" rel=\"noreferrer\">URLSearchParams</a> API:</p>\n\n<ul>\n<li><a href=\"https://developers.google.com/web/updates/2016/01/urlsearchparams\" rel=\"noreferrer\">Chrome Announcement and details</a></li>\n<li><a href=\"https://dev.opera.com/blog/opera-36/\" rel=\"noreferrer\">Opera Announcement and details</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/Firefox/Releases/44#Miscellaneous\" rel=\"noreferrer\">Firefox Announcement and details</a></li>\n</ul>\n\n<p><a href=\"https://trac.webkit.org/browser/trunk/Source/WebCore/html/URLSearchParams.cpp\" rel=\"noreferrer\">Safari Nightly</a> has implemented it, and it is in development <a href=\"https://developer.microsoft.com/en-us/microsoft-edge/platform/status/urlapi/\" rel=\"noreferrer\">for Microsoft Edge</a> as well. There is a google-suggested <strong><a href=\"https://github.com/WebReflection/url-search-params\" rel=\"noreferrer\">URLSearchParams polyfill</a></strong> for the stable versions of Safari, Edge, and IE.</p>\n\n<p>It is not standardized by <a href=\"https://www.w3.org/TR/2014/WD-url-1-20141209/#interface-urlsearchparams\" rel=\"noreferrer\">W3C</a>, but it is a living standard by <a href=\"https://url.spec.whatwg.org\" rel=\"noreferrer\">WhatWG</a>.</p>\n\n<p>You can use it on location, but you need to remove the <code>?</code> question mark (for example, with <code>.slice(1)</code>):</p>\n\n<pre><code>let params = new URLSearchParams(location.search.slice(1));\n</code></pre>\n\n<p>or</p>\n\n<pre><code>let params = (new URL(location)).searchParams;\n</code></pre>\n\n<p>Or of course on any URL:</p>\n\n<pre><code>let url = new URL('https://example.com?foo=1&amp;bar=2');\nlet params = new URLSearchParams(url.search.slice(1));\n</code></pre>\n\n<p>You can get params also using a shorthand <code>.searchParams</code> property on the URL object, like this:</p>\n\n<pre><code>let params = new URL('https://example.com?foo=1&amp;bar=2').searchParams;\nparams.get('foo'); // \"1\"\nparams.get('bar'); // \"2\" \n</code></pre>\n\n<p>You read/set parameters through the <code>get(KEY)</code>, <code>set(KEY, VALUE)</code>, <code>append(KEY, VALUE)</code> API. You can also iterate over all values <code>for (let p of params) {}</code>.</p>\n\n<p>A <a href=\"https://trac.webkit.org/browser/trunk/Source/WebCore/platform/URLParser.cpp\" rel=\"noreferrer\">reference implementation</a> and a <a href=\"https://googlechrome.github.io/samples/urlsearchparams/\" rel=\"noreferrer\">sample page</a> are available for auditing and testing.</p>\n",
    "score": 249,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11412761,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/11412761",
    "title": null,
    "body": "<p>Simple and quick solution to this problem using prototype inheritance:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>Array.prototype.sortBy = function(p) {\n  return this.slice(0).sort(function(a,b) {\n    return (a[p] &gt; b[p]) ? 1 : (a[p] &lt; b[p]) ? -1 : 0;\n  });\n}\n</code></pre>\n\n<p><strong>Example / Usage</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>objs = [{age:44,name:'vinay'},{age:24,name:'deepak'},{age:74,name:'suresh'}];\n\nobjs.sortBy('age');\n// Returns\n// [{\"age\":24,\"name\":\"deepak\"},{\"age\":44,\"name\":\"vinay\"},{\"age\":74,\"name\":\"suresh\"}]\n\nobjs.sortBy('name');\n// Returns\n// [{\"age\":24,\"name\":\"deepak\"},{\"age\":74,\"name\":\"suresh\"},{\"age\":44,\"name\":\"vinay\"}]\n</code></pre>\n\n<p><strong>Update:</strong> No longer modifies original array.</p>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1115957,
      "name": "Vinay Aggarwal",
      "reputation": 822
    }
  },
  {
    "soID": 21605159,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/21605159",
    "title": null,
    "body": "<p>Here is my attempt to make a universal function that can capitalize only the first letter, or the first letter of each word, including words separated by a dash (like some first names in French).</p>\n\n<p>By default, the function capitalizes only the first letter and leave the rest untouched.</p>\n\n<p><strong>Parameters</strong>:</p>\n\n<p><strong>lc</strong>: <em>true</em> to lowercase the rest of the word(s)\n<strong>all</strong>: <em>true</em> to capitalize each words</p>\n\n<pre><code>if (typeof String.prototype.capitalize !== 'function') {\n    String.prototype.capitalize = function(lc, all) {\n        if (all) {\n            return this.split( \" \" ).map( function(currentValue, index, array ) {\n                return currentValue.capitalize( lc );\n            }, this).join(\" \").split(\"-\").map(function(currentValue, index, array) {\n                return currentValue.capitalize(false);\n            }, this).join(\"-\");\n        }\n        else {\n            return lc ? this.charAt(0).toUpperCase() + this.slice(1 ).toLowerCase() : this.charAt(0).toUpperCase() + this.slice(1);\n        }\n    }\n}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1117685,
      "name": "Gabriel Hautclocq",
      "reputation": 384
    }
  },
  {
    "soID": 26319078,
    "parentID": 18641899,
    "url": "https://stackoverflow.com/q/26319078",
    "title": null,
    "body": "<p>For many people working with node.js, a major benefit of bower is for managing dependencies that are not javascript at all. If they are working with languages that compile to javascript, npm can be used to manage some of their dependencies. however, not all their dependencies are going to be node.js modules. Some of those that compile to javascript may have weird source language specific mangling that makes passing them around compiled to javascript an inelegant option when users are expecting source code.</p>\n\n<p>Not everything in an npm package needs to be user-facing javascript, but for npm library packages, at least some of it should be.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1119217,
      "name": "jessopher",
      "reputation": 72
    }
  },
  {
    "soID": 8662346,
    "parentID": 7202157,
    "url": "https://stackoverflow.com/q/8662346",
    "title": null,
    "body": "<p>This one evaluates to the same but a bit smaller</p>\n\n<pre><code>+!![]+''+(+[])\n</code></pre>\n\n<ul>\n<li>[] - is an array is converted that is converted to 0 when you add or subtract from it, so hence +[] = 0</li>\n<li>![] - evaluates to false, so hence !![] evaluates to true</li>\n<li>+!![] - converts the true to a numeric value that evaluates to true, so in this case 1</li>\n<li>+'' - appends an empty string to the expression causing the number to be converted to string</li>\n<li>+[] - evaluates to 0</li>\n</ul>\n\n<p>so is evaluates to</p>\n\n<pre><code>+(true) + '' + (0)\n1 + '' + 0\n\"10\"\n</code></pre>\n\n<p>So now you got that, try this one:</p>\n\n<pre><code>_=$=+[],++_+''+$\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1120161,
      "name": "Vlad Shlosberg",
      "reputation": 89
    }
  },
  {
    "soID": 18195920,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/18195920",
    "title": null,
    "body": "<pre><code>var getUrlParameters = function (name, url) {\n    if (!name) {\n        return undefined;\n    }\n\n    name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\n    url = url || location.search;\n\n    var regex = new RegExp('[\\\\?&amp;#]' + name + '=?([^&amp;#]*)', 'gi'), result, resultList = [];\n\n    while (result = regex.exec(url)) {\n        resultList.push(decodeURIComponent(result[1].replace(/\\+/g, ' ')));\n    }\n\n    return resultList.length ? resultList.length === 1 ? resultList[0] : resultList : undefined;\n};\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 20575032,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/20575032",
    "title": null,
    "body": "<p>Instead of using code snippets found here and there on the web, you can also use a well-tested and documented library. Two Options I would recommend:</p>\n\n<hr>\n\n<p><strong>1st option:</strong> Use <a href=\"https://lodash.com/\" rel=\"noreferrer\">Lodash</a>: It has an <a href=\"https://lodash.com/docs#includes\" rel=\"noreferrer\"><code>includes</code></a> method:</p>\n\n<pre><code>_.includes('foobar', 'ob');\n// → true\n</code></pre>\n\n<p>Lodash is the most popular javascript library dependency for npm and has loads of handy javascript utility methods. So for many projects you would want this anyway ;-)</p>\n\n<hr>\n\n<p><strong>2nd option:</strong> Or use <a href=\"http://epeli.github.io/underscore.string/\" rel=\"noreferrer\">Underscore.string</a>: It has an <a href=\"https://github.com/epeli/underscore.string#includestring-substring--boolean\" rel=\"noreferrer\"><code>include</code></a> method: </p>\n\n<pre><code>_.str.include('foobar', 'ob');\n// → true\n</code></pre>\n\n<p>Here is the description of Underscore.string, it just adds 9kb but gives you all the advantages a well-tested and documented library has over copy'n'paste code snippets:</p>\n\n<blockquote>\n  <p>Underscore.string is JavaScript library for comfortable manipulation\n  with strings, extension for Underscore.js inspired by Prototype.js,\n  Right.js, Underscore and beautiful Ruby language.</p>\n  \n  <p>Underscore.string provides you several useful functions: capitalize,\n  clean, includes, count, escapeHTML, unescapeHTML, insert, splice,\n  startsWith, endsWith, titleize, trim, truncate and so on.</p>\n</blockquote>\n\n<p>Note well, Underscore.string is influenced by <a href=\"http://underscorejs.org/\" rel=\"noreferrer\">Underscore.js</a> but can be used without it.</p>\n\n<hr>\n\n<p><strong>Last not Least:</strong> With JavaScript version ES6 comes an built-in <a href=\"https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/String/includes\" rel=\"noreferrer\"><code>includes</code></a> method:</p>\n\n<pre><code>'foobar'.includes('ob');\n// → true\n</code></pre>\n\n<p>Most modern browsers already support it, have an eye on the <a href=\"http://kangax.github.io/compat-table/es6/#test-String.prototype_methods_String.prototype.includes\" rel=\"noreferrer\">ES6 compatibility table</a>.</p>\n",
    "score": 48,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1129950,
      "name": "nachtigall",
      "reputation": 1232
    }
  },
  {
    "soID": 23054168,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/23054168",
    "title": null,
    "body": "<p>For those who wants a short method (with limitations):</p>\n\n<pre><code>location.search.split('myParameter=')[1]\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 26463364,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/26463364",
    "title": null,
    "body": "<p>Try this <strong>light weight</strong> solution:</p>\n\n<pre><code>function round(x, digits){\n  return parseFloat(x.toFixed(digits))\n}\n\n round(1.222,  2) ;\n // 1.22\n round(1.222, 10) ;\n // 1.222\n</code></pre>\n",
    "score": 27,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1144966,
      "name": "petermeissner",
      "reputation": 4735
    }
  },
  {
    "soID": 42210261,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/42210261",
    "title": null,
    "body": "<p>I got this error with <code>$http.get</code> in Angular. I needed to use <strong><code>$http.jsonp</code></strong> instead.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1152809,
      "name": "Travis Heeter",
      "reputation": 2538
    }
  },
  {
    "soID": 27891634,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/27891634",
    "title": null,
    "body": "<p>There are a lot of potential answers for this question. My answer is obviously based on a number of them. Thank you for all the help. This is what I ended up with after reading through all the answers.</p>\n\n<p>The problem with <code>$.getScript</code> and really any other solution that requires a callback when loading is complete is that if you have multiple files that use it and depend on each other you no longer have a way to know when all scripts have been loaded (once they are nested in multiple files).</p>\n\n<h3>Example:</h3>\n\n<p>file3.js</p>\n\n<pre><code>var f3obj = \"file3\";\n\n// Define other stuff\n</code></pre>\n\n<p>file2.js:</p>\n\n<pre><code>var f2obj = \"file2\";\n$.getScript(\"file3.js\", function(){\n\n    alert(f3obj);\n\n    // Use anything defined in file3.\n});\n</code></pre>\n\n<p>file1.js:</p>\n\n<pre><code>$.getScript(\"file2.js\", function(){\n    alert(f3obj); //This will probably fail because file3 is only guaranteed to have loaded inside the callback in file2.\n    alert(f2obj);\n\n    // Use anything defined in the loaded script...\n});\n</code></pre>\n\n<p>You are right when you say that you could specify Ajax to run synchronously or use <a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\" rel=\"nofollow noreferrer\">XMLHttpRequest</a>, but the current trend appears to be to deprecate synchronous requests, so you may not get full browser support now or in the future.</p>\n\n<p>You could try to use <code>$.when</code> to check an array of deferred objects, but now you are doing this in every file and file2 will be considered loaded as soon as the <code>$.when</code> is executed not when the callback is executed, so file1 still continues execution before file3 is loaded. This really still has the same problem.</p>\n\n<p>I decided to go backwards instead of forwards. Thank you <code>document.writeln</code>. I know it's taboo, but as long as it is used correctly this works well. You end up with code that can be debugged easily, shows in the DOM correctly and can ensure the order the dependencies are loaded correctly.</p>\n\n<p>You can of course use $(\"body\").append(), but then you can no longer debug correctly any more.</p>\n\n<p>NOTE: You must use this only while the page is loading, otherwise you get a blank screen. In other words, <strong>always place this before / outside of document.ready</strong>. I have not tested using this after the page is loaded in a click event or anything like that, but I am pretty sure it'll fail.</p>\n\n<p>I liked the idea of extending jQuery, but obviously you don't need to.</p>\n\n<p>Before calling <code>document.writeln</code>, it checks to make sure the script has not already been loading by evaluating all the script elements.</p>\n\n<p>I assume that a script is not fully executed until its <code>document.ready</code> event has been executed. (I know using <code>document.ready</code> is not required, but many people use it, and handling this is a safeguard.)</p>\n\n<p>When the additional files are loaded the <code>document.ready</code> callbacks will get executed in the wrong order. To address this when a script is actually loaded, the script that imported it is re-imported itself and execution halted. This causes the originating file to now have its <code>document.ready</code> callback executed after any from any scripts that it imports.</p>\n\n<p>Instead of this approach you could attempt to modify the jQuery <code>readyList</code>, but this seemed like a worse solution.</p>\n\n<p>Solution:</p>\n\n<pre><code>$.extend(true,\n{\n    import_js : function(scriptpath, reAddLast)\n    {\n        if (typeof reAddLast === \"undefined\" || reAddLast === null)\n        {\n            reAddLast = true; // Default this value to true. It is not used by the end user, only to facilitate recursion correctly.\n        }\n\n        var found = false;\n        if (reAddLast == true) // If we are re-adding the originating script we do not care if it has already been added.\n        {\n            found = $('script').filter(function () {\n                return ($(this).attr('src') == scriptpath);\n            }).length != 0; // jQuery to check if the script already exists. (replace it with straight JavaScript if you don't like jQuery.\n        }\n\n        if (found == false) {\n\n            var callingScriptPath = $('script').last().attr(\"src\"); // Get the script that is currently loading. Again this creates a limitation where this should not be used in a button, and only before document.ready.\n\n            document.writeln(\"&lt;script type='text/javascript' src='\" + scriptpath + \"'&gt;&lt;/script&gt;\"); // Add the script to the document using writeln\n\n            if (reAddLast)\n            {\n                $.import_js(callingScriptPath, false); // Call itself with the originating script to fix the order.\n                throw 'Readding script to correct order: ' + scriptpath + ' &lt; ' + callingScriptPath; // This halts execution of the originating script since it is getting reloaded. If you put a try / catch around the call to $.import_js you results will vary.\n            }\n            return true;\n        }\n        return false;\n    }\n});\n</code></pre>\n\n<p>Usage:</p>\n\n<p>file3:</p>\n\n<pre><code>var f3obj = \"file3\";\n\n// Define other stuff\n$(function(){\n    f3obj = \"file3docready\";\n});\n</code></pre>\n\n<p>file2:</p>\n\n<pre><code>$.import_js('js/file3.js');\nvar f2obj = \"file2\";\n$(function(){\n    f2obj = \"file2docready\";\n});\n</code></pre>\n\n<p>file1:</p>\n\n<pre><code>$.import_js('js/file2.js');\n\n// Use objects from file2 or file3\nalert(f3obj); // \"file3\"\nalert(f2obj); // \"file2\"\n\n$(function(){\n    // Use objects from file2 or file3 some more.\n    alert(f3obj); //\"file3docready\"\n    alert(f2obj); //\"file2docready\"\n});\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1154453,
      "name": "curlyhairedgenius",
      "reputation": 154
    }
  },
  {
    "soID": 44987903,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/44987903",
    "title": null,
    "body": "<p>If you are using a server like <code>ipage.com</code>, you can put inside the API directory a  <code>.htaccess</code> file to configure the behaviour just inside this directory.</p>\n\n<p>I'm going to show you through as an example:</p>\n\n<p><strong>1) On the server side I put a <code>.htaccess</code> just to configure this directory:</strong></p>\n\n<p><a href=\"https://i.stack.imgur.com/ee07P.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/ee07P.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>2) The <code>.htaccess</code> file was written down like that:</strong></p>\n\n<pre><code># Begin cache control #\nExpiresActive on\nExpiresActive off\n&lt;FilesMatch \".*\"&gt;\nHeader unset Cache-Control\nHeader unset Expires\nHeader unset Last-Modified\nFileETag None\nHeader unset Pragma\n&lt;/FilesMatch&gt;\n# End cache control #\nDirectoryIndex index.php index.html\n\n#ErrorDocument 404 Custom Message : \"404 page not found\"\n\nOptions -Indexes\n</code></pre>\n\n<p>I added a line before the end-tag <code>&lt;/FilesMatch&gt;</code> and it became like that:</p>\n\n<pre><code># Begin cache control #\nExpiresActive on\nExpiresActive off\n&lt;FilesMatch \".*\"&gt;\nHeader unset Cache-Control\nHeader unset Expires\nHeader unset Last-Modified\nFileETag None\nHeader unset Pragma\nHeader set Access-Control-Allow-Origin \"*\"\n&lt;/FilesMatch&gt;\n# End cache control #\nDirectoryIndex index.php index.html\n\n#ErrorDocument 404 Custom Message : \"404 page not found\"\n\nOptions -Indexes\n</code></pre>\n\n<p><strong>3) Just save this file and upload it to the server. Now your request is ok.</strong></p>\n\n<p><strong>4) Results(when the button GET is clicked):</strong></p>\n\n<blockquote>\n  <p>Before:</p>\n</blockquote>\n\n<p><a href=\"https://i.stack.imgur.com/oMcZM.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/oMcZM.png\" alt=\"enter image description here\"></a></p>\n\n<blockquote>\n  <p>NOW:</p>\n</blockquote>\n\n<p><a href=\"https://i.stack.imgur.com/VqUSN.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/VqUSN.png\" alt=\"enter image description here\"></a></p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1156752,
      "name": "Claudio Guirunas",
      "reputation": 1014
    }
  },
  {
    "soID": 29363036,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/29363036",
    "title": null,
    "body": "<p>Another example with Call, Apply and Bind.\nThe difference between Call and Apply is evident, but <strong>Bind</strong> works like this:</p>\n\n<ol>\n<li>Bind returns an instance of a function that can be executed</li>\n<li>First Parameter is '<em>this</em>'</li>\n<li>Second parameter is a <em>Comma separated</em> list of arguments (like <em>Call</em>)</li>\n</ol>\n\n<p>} </p>\n\n<pre><code>function Person(name) {\n    this.name = name; \n}\nPerson.prototype.getName = function(a,b) { \n     return this.name + \" \" + a + \" \" + b; \n}\n\nvar reader = new Person('John Smith');\n\nreader.getName = function() {\n   // Apply and Call executes the function and returns value\n   var baseName = Object.getPrototypeOf(this).getName.apply(this,[\"is a\", \"boy\"]); console.log(\"Apply \" + baseName);\n   var baseName = Object.getPrototypeOf(reader).getName.call(this, \"is a\", \"boy\"); console.log(\"Call \" + baseName);\n   // Bind returns function which can be invoked\n   var baseName = Person.prototype.getName.bind(this, \"is a\", \"boy\"); console.log(\"Bind \" + baseName());\n        return('Hello reader'); \n    }\n\n    console.log(reader.getName());\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1161370,
      "name": "Mahesh",
      "reputation": 1240
    }
  },
  {
    "soID": 15753745,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/15753745",
    "title": null,
    "body": "<p>If you want array-style parameters <a href=\"https://github.com/kevincox/url.js\" rel=\"nofollow\">URL.js</a> supports arbitrarily nested array-style parameters as well as string indexes (maps). It also handles URL decoding.</p>\n\n<pre><code>url.get(\"val[0]=zero&amp;val[1]=one&amp;val[2]&amp;val[3]=&amp;val[4]=four&amp;val[5][0]=n1&amp;val[5][1]=n2&amp;val[5][2]=n3&amp;key=val\", {array:true});\n// Result\n{\n    val: [\n        'zero',\n        'one',\n        true,\n        '',\n        'four',\n        [ 'n1', 'n2', 'n3' ]\n    ]\n    key: 'val'\n}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16543587,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/16543587",
    "title": null,
    "body": "<p>If you are using Browserify, you can use the <code>url</code> module from <em>Node.js</em>:</p>\n\n<pre><code>var url = require('url');\n\nurl.parse('http://example.com/?bob=123', true).query;\n\n// returns { \"bob\": \"123\" }\n</code></pre>\n\n<p>Further reading: <a href=\"http://nodejs.org/api/url.html\"><strong>URL Node.js v0.12.2 Manual &amp; Documentation</strong></a></p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12066351,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/12066351",
    "title": null,
    "body": "<pre><code>var js = document.createElement(\"script\");\n\njs.type = \"text/javascript\";\njs.src = jsFilePath;\n\ndocument.body.appendChild(js);\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1169253,
      "name": "Sam4Code",
      "reputation": 293
    }
  },
  {
    "soID": 38318360,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/38318360",
    "title": null,
    "body": "<p>To handle circular objects that that <code>JSON.stringify</code> can't handle, you can bring in a library called <a href=\"https://github.com/jsog/jsog\" rel=\"nofollow\">JSOG</a>, that serializes and deserializes arbitrary graphs into JSON format. </p>\n\n<pre><code>var clone = JSOG.parse(JSOG.stringify(original));\n</code></pre>\n\n<p>It might also be interesting to try patching JSOG for cloning with this trick (don't have time at the moment, but if someone wants to give it a shot...):</p>\n\n<p>Serialize a simple function : </p>\n\n<pre><code>foo.f = function(a) { return a }\nvar stringForm = foo.f.toString() // \"function (a) { return a }\"\n</code></pre>\n\n<p>Deserialize a function :</p>\n\n<pre><code>eval(\"foo.f = \" + stringForm)\n</code></pre>\n\n<p>Some conventions (probably in the name of the property) to identify functions vs regular strings would be needed (<code>@func_f</code> perhaps). </p>\n\n<p>Of course if the function calls a second function the second function will need to exist just as it would for the original.</p>\n\n<p>The above however is quite dangerous if you are to accept the serialized form from an untrusted source, but then accepting any function in any form from an untrusted source would be dangerous, so if you're interested in cloning functions trust must have already been established (or you're already intent on writing a security flaw!).</p>\n\n<p><strong>Disclaimer:</strong> I have not tested the speed of JSOG stringify/parse vs JSON stringify/parse, but It does work on the simple (circular) objects I tested it with.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15327425,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/15327425",
    "title": null,
    "body": "<p>Adding to <code>zippoxer</code>'s answer, I use this function:</p>\n\n<pre><code>String.prototype.format = function(){\n    var a = this, b;\n    for(b in arguments){\n        a = a.replace(/%[a-z]/,arguments[b]);\n    }\n    return a; // Make chainable\n};\n\nvar s = 'Hello %s The magic number is %d.';\ns.format('world!', 12); // Hello World! The magic number is 12.\n</code></pre>\n\n<p>I also have a non-prototype version which I use more often for its Java-like syntax:</p>\n\n<pre><code>function format(){\n    var a,b,c;\n    a = arguments[0];\n    b = [];\n    for(c = 1; c &lt; arguments.length; c++){\n        b.push(arguments[c]);\n    }\n    for(c in b){\n        a = a.replace(/%[a-z]/,b[c]);\n    }\n    return a;\n};\nformat('%d ducks, 55 %s', 12, 'cats'); // 12 ducks, 55 cats\n</code></pre>\n\n<h2>ES 2015 update</h2>\n\n<p>All the cool new stuff in ES 2015 makes this a lot easier:</p>\n\n<pre><code>function format(fmt, ...args){\n    return fmt\n        .split(\"%%\")\n        .reduce((aggregate, chunk, i) =&gt;\n            aggregate + chunk + (args[i] || \"\"), \"\");\n}\n\nformat(\"Hello %%! I ate %% apples today.\", \"World\", 44);\n// \"Hello World, I ate 44 apples today.\"\n</code></pre>\n\n<p>I figured that since this, like the older ones, doesn't actually parse the letters, it might as well just use a single token <code>%%</code>. This has the benefit of being obvious and not making it difficult to use a single <code>%</code>. However, if you need <code>%%</code> for some reason, you would need to replace it with itself:</p>\n\n<pre><code>format(\"I love percentage signs! %%\", \"%%\");\n// \"I love percentage signs! %%\"\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33888842,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/33888842",
    "title": null,
    "body": "<p>Call and apply both are used to force the <code>this</code> value when a function is executed. The only difference is that <code>call</code> takes <code>n+1</code> arguments where 1 is <code>this</code> and <code>'n' arguments</code>. <code>apply</code> takes only two arguments, one is <code>this</code> the other is argument array.</p>\n\n<p>The advantage I see in <code>apply</code> over <code>call</code> is that we can easily delegate a function call to other function without much effort;</p>\n\n<pre><code>function sayHello() {\n  console.log(this, arguments);\n}\n\nfunction hello() {\n  sayHello.apply(this, arguments);\n}\n\nvar obj = {name: 'my name'}\nhello.call(obj, 'some', 'arguments');\n</code></pre>\n\n<p>Observe how easily we delegated <code>hello</code> to <code>sayHello</code> using <code>apply</code>, but with <code>call</code> this is very difficult to achieve.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1177295,
      "name": "Raghavendra",
      "reputation": 3057
    }
  },
  {
    "soID": 16269962,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/16269962",
    "title": null,
    "body": "<p>Assuming you have node-inspector installed on your computer (if not, just type 'npm install -g node-inspector') you just have to run:</p>\n\n<pre><code>node-inspector &amp; node --debug-brk scriptFileName.js\n</code></pre>\n\n<p>And paste the URI from the command line into a WebKit (Chrome / Safari) browser.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1179897,
      "name": "Shaheen Ghiassy",
      "reputation": 4152
    }
  },
  {
    "soID": 27382532,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/27382532",
    "title": null,
    "body": "<p>I created a neat little tool called <a href=\"https://github.com/blainesch/pry.js\">pry.js</a> that can help you out.</p>\n\n<p>Put a simple statement somewhere in your code, run your script normally and node will halt the current thread giving you access to all your variables and functions. View/edit/delete them at will!</p>\n\n<pre><code>pry = require('pryjs')\n\nclass FizzBuzz\n\n  run: -&gt;\n    for i in [1..100]\n      output = ''\n      eval(pry.it) # magic\n      output += \"Fizz\" if i % 3 is 0\n      output += \"Buzz\" if i % 5 is 0\n      console.log output || i\n\n  bar: -&gt;\n    10\n\nfizz = new FizzBuzz()\nfizz.run()\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1182020,
      "name": "BlaineSch",
      "reputation": 99
    }
  },
  {
    "soID": 25812796,
    "parentID": 1414365,
    "url": "https://stackoverflow.com/q/25812796",
    "title": null,
    "body": "<p>If you just want to invert the current state (like a toggle button behaviour):</p>\n\n<pre><code>$(\"input\").prop('disabled', ! $(\"input\").prop('disabled') );\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1182592,
      "name": "daVe",
      "reputation": 651
    }
  },
  {
    "soID": 9131519,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/9131519",
    "title": null,
    "body": "<pre><code>$(\"&lt;div/&gt;\").attr('id','new').appendTo('body');    \n</code></pre>\n\n<p>This will create new div with id \"new\" into body.</p>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1187920,
      "name": "Ajay",
      "reputation": 251
    }
  },
  {
    "soID": 10945139,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/10945139",
    "title": null,
    "body": "<p>I am using this.</p>\n\n<pre><code>function isObjectEmpty(object)\n{\n  var isEmpty = true;\n  for(keys in object)\n  {\n     isEmpty = false;\n     break; // exiting since we found that the object is not empty\n  }\n  return isEmpty;\n}\n</code></pre>\n\n<p>Eg:</p>\n\n<pre><code>var myObject = {}; // Object is empty\nvar isEmpty  = isObjectEmpty(myObject); // will return true;\n\n// populating the object\nmyObject = {\"name\":\"John Smith\",\"Address\":\"Kochi, Kerala\"}; \n\n// check if the object is empty\nisEmpty  = isObjectEmpty(myObject); // will return false;\n</code></pre>\n\n<p><a href=\"http://www.einternals.com/blog/web-development/how-to-check-if-an-object-is-empty\">from here</a></p>\n\n<p><strong>Update</strong></p>\n\n<p>OR</p>\n\n<p>you can use the jQuery implementation of isEmptyObject</p>\n\n<pre><code>function isEmptyObject ( obj ) {\n        var name;\n        for ( name in obj ) {\n            return false;\n        }\n        return true;\n    }\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1188322,
      "name": "kiranvj",
      "reputation": 7225
    }
  },
  {
    "soID": 19721006,
    "parentID": 3390396,
    "url": "https://stackoverflow.com/q/19721006",
    "title": null,
    "body": "<p>In Google Chrome, the following was ever so slightly faster than a <code>typeof</code> test:</p>\n\n<pre><code>if (abc === void 0) {\n    // Undefined\n}\n</code></pre>\n\n<p>The difference was negligible.  However, this code is more concise, and clearer at a glance to someone who knows what <code>void 0</code> means.  Note, however, that <code>abc</code> must still be declared.</p>\n\n<p>Both <code>typeof</code> and <code>void</code> were significantly faster than comparing directly against <code>undefined</code>.  I used the following test format in the Chrome developer console:</p>\n\n<pre><code>var abc;\nstart = +new Date();\nfor (var i = 0; i &lt; 10000000; i++) {\n    if (TEST) {\n        void 1;\n    }\n}\nend = +new Date();\nend - start;\n</code></pre>\n\n<p>The results were as follows:</p>\n\n<pre><code>Test: | abc === undefined      abc === void 0      typeof abc == 'undefined'\n------+---------------------------------------------------------------------\nx10M  |     13678 ms               9854 ms                 9888 ms\n  x1  |    1367.8 ns              985.4 ns                988.8 ns\n</code></pre>\n\n<p>Note that the first row is in <em>milli</em>seconds, while the second row is in <em>nano</em>seconds.  A difference of 3.4 nanoseconds is nothing.  The times were pretty consistent in subsequent tests.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1188377,
      "name": "Zenexer",
      "reputation": 9225
    }
  },
  {
    "soID": 18229527,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/18229527",
    "title": null,
    "body": "<p>You may need to convert them to the lower case in order to prevent from confusion.</p>\n\n<pre><code>objs.sort(function (a,b) {\n\nvar nameA=a.last_nom.toLowerCase(), nameB=b.last_nom.toLowerCase()\n\nif (nameA &lt; nameB)\n  return -1;\nif (nameA &gt; nameB)\n  return 1;\nreturn 0;  //no sorting\n\n})\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1190943,
      "name": "Burak Keceli",
      "reputation": 613
    }
  },
  {
    "soID": 9376680,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/9376680",
    "title": null,
    "body": "<pre><code>var p =\n    {\n        \"p1\": \"value1\",\n        \"p2\": \"value2\",\n        \"p3\": \"value3\"\n    };\n\nfor (var key in p) \n{\n    if (p.hasOwnProperty(key))\n    {\n    alert(key + \" = \" + p[key]);\n    }\n}\n---------------------------\n---------------------------\nOutput:\np1 = values1\np2 = values2\np3 = values3\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1192220,
      "name": "ParaMeterz",
      "reputation": 3359
    }
  },
  {
    "soID": 33494037,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/33494037",
    "title": null,
    "body": "<p>If you are using <a href=\"http://en.wikipedia.org/wiki/ADO.NET_Entity_Framework\" rel=\"nofollow noreferrer\">Entity Framework</a>, it seems that this error will sometimes be thrown even if you have <code>CORS</code> enabled. I figured out that the error occurred because of a missing finalization of the query. I'm hoping this will help others in the same situation.</p>\n\n<p>The following code can throw the <code>XMLHttpRequest cannot load http://myApiUrl/login. No 'Access-Control-Allow-Origin' header is present on the requested resource.</code> error:</p>\n\n<pre><code>using (DBContext db = new DBContext())\n{\n    return db.Customers.Select(x =&gt; new\n    {\n        Name = x.Name,\n        CustomerId = x.CustomerId,\n    });\n}\n</code></pre>\n\n<p>To fix it, a finalization call like <code>.ToList()</code> or <code>.FirstOrDefault()</code> at the end of the query is required, like so:</p>\n\n<pre><code>using (DBContext db = new DBContext())\n{\n    return db.Customers.Select(x =&gt; new\n    {\n        Name = x.Name,\n        CustomerId = x.CustomerId,\n    }).ToList();\n}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1192427,
      "name": "Loyalar",
      "reputation": 1485
    }
  },
  {
    "soID": 32685802,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/32685802",
    "title": null,
    "body": "<p>I hope that helps code. :) (I use)</p>\n\n<pre><code>function generateParameterForm(fieldName, promptText, valueType) {\n    //&lt;div class=\"form-group\"&gt;\n    //&lt;label for=\"yyy\" class=\"control-label\"&gt;XXX&lt;/label&gt;\n    //&lt;input type=\"text\" class=\"form-control\" id=\"yyy\" name=\"yyy\"/&gt;\n    //&lt;/div&gt;\n\n    // Add new div tag\n    var form = $(\"&lt;div/&gt;\").addClass(\"form-group\");\n\n    // Add label for prompt text\n    var label = $(\"&lt;label/&gt;\").attr(\"for\", fieldName).addClass(\"control-label\").text(promptText);\n\n    // Add text field\n    var input = $(\"&lt;input/&gt;\").attr(\"type\", \"text\").addClass(\"form-control\").addClass(valueType).attr(\"id\", fieldName).attr(\"name\", fieldName);\n\n    // lbl and inp =&gt; form\n    $(form).append(label).append(input);\n\n    return $(form);\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1194261,
      "name": "Cagdas",
      "reputation": 362
    }
  },
  {
    "soID": 25967279,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/25967279",
    "title": null,
    "body": "<p>I just ran into a similar situation. I didn't want to use JQuery, and wanted to do this using pure Javascript.</p>\n\n<p>And what I did was, used the following condition, and it worked for me.</p>\n\n<pre><code>var obj = {};\nif(JSON.stringify(obj) === '{}') { //This will check if the object is empty\n   //Code here..\n}\n</code></pre>\n\n<p>For not equal to, use this : <code>JSON.stringify(obj) !== '{}'</code></p>\n\n<p>Check out this <a href=\"http://jsfiddle.net/anish_nair/8fr4r508/\" rel=\"noreferrer\">JSFiddle</a></p>\n",
    "score": 31,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1196714,
      "name": "Anish Nair",
      "reputation": 1381
    }
  },
  {
    "soID": 9290264,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/9290264",
    "title": null,
    "body": "<p>Try this:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var currentDate = new Date()\r\nvar day = currentDate.getDate()\r\nvar month = currentDate.getMonth() + 1\r\nvar year = currentDate.getFullYear()\r\ndocument.write(\"&lt;b&gt;\" + day + \"/\" + month + \"/\" + year + \"&lt;/b&gt;\")</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The result will be like</p>\n\n<pre><code>15/2/2012\n</code></pre>\n",
    "score": 79,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1197059,
      "name": "Jimmy M",
      "reputation": 1018
    }
  },
  {
    "soID": 9769502,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/9769502",
    "title": null,
    "body": "<p>The answers posted here, for example,</p>\n\n<pre><code>$('#yourdropdownid option:selected').text();\n</code></pre>\n\n<p>didn't work for me, but this did:</p>\n\n<pre><code>$('#yourdropdownid').find('option:selected').text();\n</code></pre>\n\n<p>It is possibly an older version of jQuery.</p>\n",
    "score": 167,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1199713,
      "name": "JYX",
      "reputation": 1731
    }
  },
  {
    "soID": 13166991,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/13166991",
    "title": null,
    "body": "<p>There is a nice little <code>url</code> utility for this with some cool sugaring:</p>\n\n<pre><code>http://www.example.com/path/index.html?silly=willy#chucky=cheese\n\nurl();            // http://www.example.com/path/index.html?silly=willy#chucky=cheese\nurl('domain');    // example.com\nurl('1');         // path\nurl('-1');        // index.html\nurl('?');         // silly=willy\nurl('?silly');    // willy\nurl('?poo');      // (an empty string)\nurl('#');         // chucky=cheese\nurl('#chucky');   // cheese\nurl('#poo');      // (an empty string)\n</code></pre>\n\n<p>Check out more examples and download here: <a href=\"https://github.com/websanova/js-url#url\">https://github.com/websanova/js-url#url</a></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 34021424,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/34021424",
    "title": null,
    "body": "<pre><code>location.replace('URL')\n</code></pre>\n\n<p>doesn't update the browser's history; you can't press the back button.</p>\n\n<pre><code>location.attr('href','url')\n</code></pre>\n\n<p>is pretty much like clicking on a link. Here we can go back to the previous page by pressing the back button.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1201544,
      "name": "sarath",
      "reputation": 170
    }
  },
  {
    "soID": 26952804,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/26952804",
    "title": null,
    "body": "<p><a href=\"https://github.com/asafdav/ng-clip\" rel=\"noreferrer\"><code>ng-clip</code></a> was the simplest solution for AngularJS.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1202371,
      "name": "Nikolay Melnikov",
      "reputation": 986
    }
  },
  {
    "soID": 9237810,
    "parentID": 3437786,
    "url": "https://stackoverflow.com/q/9237810",
    "title": null,
    "body": "<pre><code>function wndsize(){\n  var w = 0;var h = 0;\n  //IE\n  if(!window.innerWidth){\n    if(!(document.documentElement.clientWidth == 0)){\n      //strict mode\n      w = document.documentElement.clientWidth;h = document.documentElement.clientHeight;\n    } else{\n      //quirks mode\n      w = document.body.clientWidth;h = document.body.clientHeight;\n    }\n  } else {\n    //w3c\n    w = window.innerWidth;h = window.innerHeight;\n  }\n  return {width:w,height:h};\n}\nfunction wndcent(){\n  var hWnd = (arguments[0] != null) ? arguments[0] : {width:0,height:0};\n  var _x = 0;var _y = 0;var offsetX = 0;var offsetY = 0;\n  //IE\n  if(!window.pageYOffset){\n    //strict mode\n    if(!(document.documentElement.scrollTop == 0)){offsetY = document.documentElement.scrollTop;offsetX = document.documentElement.scrollLeft;}\n    //quirks mode\n    else{offsetY = document.body.scrollTop;offsetX = document.body.scrollLeft;}}\n    //w3c\n    else{offsetX = window.pageXOffset;offsetY = window.pageYOffset;}_x = ((wndsize().width-hWnd.width)/2)+offsetX;_y = ((wndsize().height-hWnd.height)/2)+offsetY;\n    return{x:_x,y:_y};\n}\nvar center = wndcent({width:350,height:350});\ndocument.write(center.x+';&lt;br&gt;');\ndocument.write(center.y+';&lt;br&gt;');\ndocument.write('&lt;DIV align=\"center\" id=\"rich_ad\" style=\"Z-INDEX: 10; left:'+center.x+'px;WIDTH: 350px; POSITION: absolute; TOP: '+center.y+'px; HEIGHT: 350px\"&gt;&lt;!--К сожалению, у Вас не установлен flash плеер.--&gt;&lt;/div&gt;');\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1203342,
      "name": "dude",
      "reputation": 183
    }
  },
  {
    "soID": 31007976,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/31007976",
    "title": null,
    "body": "<p>I'm surprised no one used <code>reduce</code>, this is a native JavaScript way of doing things, is very concise and powerful.</p>\n\n<pre><code>var _r=function(p,c){return p.replace(/%s/,c);}\n\nvar x = [\"a\", \"b\", \"c\"].reduce(_r, \"[%s], [%s] and [%s]\"); // [a], [b] and [c]\n\nvar y = [1, 2, 3].reduce(_r, \"%s+%s=%s\"); // 1+2=3\n\nvar z = [\"cool\", 1337, \"stuff\"].reduce(_r, \"%s %s %s\"); // cool 1337 stuff\n</code></pre>\n\n<p>Edit: here is a function that you can insert anywhere to do replace.</p>\n\n<pre><code>function interpolate(theString, argumentArray) {\n    var regex = /%s/;\n    var _r=function(p,c){return p.replace(regex,c);}\n    return argumentArray.reduce(_r, theString);\n}\n\ninterpolate(\"%s, %s and %s\", [\"Me\", \"myself\", \"I\"]); // \"Me, myself and I\"\n</code></pre>\n",
    "score": 24,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11677514,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/11677514",
    "title": null,
    "body": "<p>I like <a href=\"http://jquery-howto.blogspot.co.uk/2009/09/get-url-parameters-values-with-jquery.html\">this one</a> (taken from jquery-howto.blogspot.co.uk):</p>\n\n<pre><code>// get an array with all querystring values\n// example: var valor = getUrlVars()[\"valor\"];\nfunction getUrlVars() {\n    var vars = [], hash;\n    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&amp;');\n    for (var i = 0; i &lt; hashes.length; i++) {\n        hash = hashes[i].split('=');\n        vars.push(hash[0]);\n        vars[hash[0]] = hash[1];\n    }\n    return vars;\n}\n</code></pre>\n\n<p>Works great for me.</p>\n",
    "score": 33,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19999322,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/19999322",
    "title": null,
    "body": "<p>I'm sure it's not some revelation, but I didn't see it all in one example:</p>\n\n<p>Selector for all checked checkboxes(on the page):</p>\n\n<pre><code>$('input[type=checkbox]:checked')\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12007670,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/12007670",
    "title": null,
    "body": "<p>I solved this by outputting a div, making it hidden, and calling the div id by jQuery when I needed it.</p>\n\n<p>e.g.</p>\n\n<pre><code>&lt;div id=\"UniqueID\" style=\"display:none;\"&gt;\n     Strings\n     On\n     Multiple\n     Lines\n     Here\n&lt;/div&gt;\n</code></pre>\n\n<p>Then when I need to get the string, I just use the following jQuery:</p>\n\n<pre><code>$('#UniqueID').html();\n</code></pre>\n\n<p>Which returns my text on multiple lines. If I call </p>\n\n<pre><code>alert($('#UniqueID').html());\n</code></pre>\n\n<p>I get:</p>\n\n<p><img src=\"https://i.stack.imgur.com/vIVFc.png\" alt=\"enter image description here\"></p>\n",
    "score": 41,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1211743,
      "name": "Tom Beech",
      "reputation": 1069
    }
  },
  {
    "soID": 19799526,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/19799526",
    "title": null,
    "body": "<p>For those who are using <a href=\"http://en.wikipedia.org/wiki/Microsoft_SharePoint\">SharePoint</a> lists and don't want to use the long generated id, this will work: </p>\n\n<pre><code>var e = $('select[title=\"IntenalFieldName\"] option:selected').text();\n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1212739,
      "name": "FAA",
      "reputation": 394
    }
  },
  {
    "soID": 13831142,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/13831142",
    "title": null,
    "body": "<p>If you're looking for a lot more granular control over the date formats, I thoroughly recommend  checking out momentjs. Terrific library - and only 5KB.\n<a href=\"http://momentjs.com/\">http://momentjs.com/</a></p>\n",
    "score": 48,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1217608,
      "name": "benjamin.keen",
      "reputation": 1014
    }
  },
  {
    "soID": 9514142,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/9514142",
    "title": null,
    "body": "<p><em><strong>Update:</strong></em></p>\n\n<p>It's somewhat late for an update, but since I just stumbled on this question, and noticed that my previous answer is not one I'm happy with. Since the question involved replaceing a single word, it's incredible nobody thought of using word boundaries (<code>\\b</code>)</p>\n\n<pre><code>'a cat is not a caterpillar'.replace(/\\bcat\\b/gi,'dog');\n//\"a dog is not a caterpillar\"\n</code></pre>\n\n<p>This is a simple regex that avoids replacing parts of words in most cases. However, a dash <code>-</code> is still considered a word boundary. So conditionals can be used in this case to avoid replacing strings like <code>cool-cat</code>:</p>\n\n<pre><code>'a cat is not a cool-cat'.replace(/\\bcat\\b/gi,'dog');//wrong\n//\"a dog is not a cool-dog\" -- nips\n'a cat is not a cool-cat'.replace(/(?:\\b([^-]))cat(?:\\b([^-]))/gi,'$1dog$2');\n//\"a dog is not a cool-cat\"\n</code></pre>\n\n<hr>\n\n<p>basically, this question is the same as the question here:\n<a href=\"https://stackoverflow.com/questions/9499075/javascript-replace-with/9499926\">Javascript replace &quot; &#39; &quot; with &quot; &#39;&#39; &quot;</a></p>\n\n<p>@Mike, check the answer I gave there... regexp isn't the only way to replace multiple occurrences of a subsrting, far from it. Think flexible, think split!</p>\n\n<pre><code>var newText = \"the cat looks like a cat\".split('cat').join('dog');\n</code></pre>\n\n<p>Alternatively, to prevent replacing word parts -which the approved answer will do, too! You can get around this issue using regular expressions that are, I admit, somewhat more complex and as an upshot of that, a tad slower, too:</p>\n\n<pre><code>var regText = \"the cat looks like a cat\".replace(/(?:(^|[^a-z]))(([^a-z]*)(?=cat)cat)(?![a-z])/gi,\"$1dog\");\n</code></pre>\n\n<p>The output is the same as the accepted answer, however, using the /cat/g expression on this string:</p>\n\n<pre><code>var oops = 'the cat looks like a cat, not a caterpillar or coolcat'.replace(/cat/g,'dog');\n//returns \"the dog looks like a dog, not a dogerpillar or cooldog\" ?? \n</code></pre>\n\n<p>Oops indeed, this probably isn't what you want. What is, then? IMHO, a regex that only replaces 'cat' conditionally. (ie not part of a word), like so:</p>\n\n<pre><code>var caterpillar = 'the cat looks like a cat, not a caterpillar or coolcat'.replace(/(?:(^|[^a-z]))(([^a-z]*)(?=cat)cat)(?![a-z])/gi,\"$1dog\");\n//return \"the dog looks like a dog, not a caterpillar or coolcat\"\n</code></pre>\n\n<p>My guess is, this meets your needs. It's not fullproof, of course, but it should be enough to get you started. I'd recommend reading some more on these pages. This'll prove useful in perfecting this expression to meet your specific needs.</p>\n\n<p><a href=\"http://www.javascriptkit.com/jsref/regexp.shtml\" rel=\"nofollow noreferrer\">http://www.javascriptkit.com/jsref/regexp.shtml</a></p>\n\n<p><a href=\"http://www.regular-expressions.info\" rel=\"nofollow noreferrer\">http://www.regular-expressions.info</a></p>\n\n<hr>\n\n<p><strong>Final addition:</strong></p>\n\n<p>Given that this question still gets a lot of views, I thought I might add an example of <code>.replace</code> used with a callback function. In this case, it dramatically simplifies the expression <em>and</em> provides even more flexibility, like replacing with correct capitalisation or replacing both <code>cat</code> and <code>cats</code> in one go:</p>\n\n<pre><code>'Two cats are not 1 Cat! They\\'re just cool-cats, you caterpillar'\n   .replace(/(^|.\\b)(cat)(s?\\b.|$)/gi,function(all,char1,cat,char2)\n    {\n       //check 1st, capitalize if required\n       var replacement = (cat.charAt(0) === 'C' ? 'D' : 'd') + 'og';\n       if (char1 === ' ' &amp;&amp; char2 === 's')\n       {//replace plurals, too\n           cat = replacement + 's';\n       }\n       else\n       {//do not replace if dashes are matched\n           cat = char1 === '-' || char2 === '-' ? cat : replacement;\n       }\n       return char1 + cat + char2;//return replacement string\n    });\n//returns:\n//Two dogs are not 1 Dog! They're just cool-cats, you caterpillar\n</code></pre>\n",
    "score": 71,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1230836,
      "name": "Elias Van Ootegem",
      "reputation": 49924
    }
  },
  {
    "soID": 16404343,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/16404343",
    "title": null,
    "body": "<p>My favorite &amp; elegant JS objects <strong>clone</strong> solution is</p>\n\n<pre><code>function CloneObject() {}\nfunction cloneObject(o) {\n   CloneObject.prototype = o;\n   return new CloneObject();\n}\n</code></pre>\n\n<p>Use <code>cloneObject(object)</code> to get a clone of JS object.</p>\n\n<p>Unlike many <strong>copy</strong> solutions this clone keeps prototype relationship in cloned object.</p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 27700300,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/27700300",
    "title": null,
    "body": "<p>I tried the following solution. This method work only when your <strong>server is running locally</strong>.</p>\n\n<ol>\n<li><p>Put following line in file <code>web.xml</code>.</p>\n\n<pre><code>&lt;filter&gt;\n    &lt;filter-name&gt;CORS&lt;/filter-name&gt;\n    &lt;filter-class&gt;com.thetransactioncompany.cors.CORSFilter&lt;/filter-class&gt;\n&lt;/filter&gt;\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;CORS&lt;/filter-name&gt;\n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n</code></pre></li>\n<li>Download <a href=\"http://software.dzhuvinov.com/download.html#download-cors\" rel=\"nofollow\">cors-filter-2.1.2</a> and <a href=\"https://www.versioneye.com/java/com.thetransactioncompany:java-property-utils/1.9.1\" rel=\"nofollow\">java-property-utils-1.9.1</a> and put in library</li>\n<li><p>Open a browser to allow access control with following code in terminal (Mac)</p>\n\n<pre><code>/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --allow-file-access-from-files\n</code></pre></li>\n</ol>\n",
    "score": -6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1232051,
      "name": "rinkesh",
      "reputation": 1894
    }
  },
  {
    "soID": 21558566,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/21558566",
    "title": null,
    "body": "<p>Mainly two reasons:</p>\n\n<p><strong>One</strong></p>\n\n<p>Like others have said, You might get keys which aren't in your array or that are inherited from the prototype. So if, let's say, a library adds a property to the Array or Object prototypes:</p>\n\n<pre><code>Array.prototype.someProperty = true\n</code></pre>\n\n<p>You'll get it as part of every array:</p>\n\n<pre><code>for(var item in [1,2,3]){\n  console.log(item) // will log 1,2,3 but also \"someProperty\"\n}\n</code></pre>\n\n<p>you could solve this with the hasOwnProperty method:</p>\n\n<pre><code>var ary = [1,2,3];\nfor(var item in ary){\n   if(ary.hasOwnProperty(item)){\n      console.log(item) // will log only 1,2,3\n   }\n}\n</code></pre>\n\n<p>but this is true for iterating over any object with a for-in loop.</p>\n\n<p><strong>Two</strong></p>\n\n<p>Usually the order of the items in an array is important, but the for-in loop won't necessarily iterate in the right order, that's because it treats the array as an object, which is the way it is implemented in JS, and not as an array.\nThis seems like a small thing, but it can really screw up applications and is hard to debug.</p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1233630,
      "name": "Lior",
      "reputation": 1242
    }
  },
  {
    "soID": 16099285,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/16099285",
    "title": null,
    "body": "<p>I did a small URL library for my needs here: <a href=\"https://github.com/Mikhus/jsurl\" rel=\"nofollow\">https://github.com/Mikhus/jsurl</a></p>\n\n<p>It's a more common way of manipulating the URLs in JavaScript. Meanwhile it's really lightweight (minified and gzipped &lt; 1&nbsp;KB) and has a very simple and clean API. And it does not need any other library to work.</p>\n\n<p>Regarding the initial question, it's very simple to do:</p>\n\n<pre><code>var u = new Url; // Current document URL\n// or\nvar u = new Url('http://user:pass@example.com:8080/some/path?foo=bar&amp;bar=baz#anchor');\n\n// Looking for query string parameters\nalert( u.query.bar);\nalert( u.query.foo);\n\n// Modifying query string parameters\nu.query.foo = 'bla';\nu.query.woo = ['hi', 'hey']\n\nalert(u.query.foo);\nalert(u.query.woo);\nalert(u);\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 13612285,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/13612285",
    "title": null,
    "body": "<p>Since <a href=\"https://stackoverflow.com/users/49695/mindeavor\">mindeavor</a> stated that the object to be cloned is a 'literal-constructed' object, a solution might be to simply <em>generate</em> the object multiple times rather than cloning an instance of the object:</p>\n\n<pre><code>function createMyObject()\n{\n    var myObject =\n    {\n        ...\n    };\n    return myObject;\n}\n\nvar myObjectInstance1 = createMyObject();\nvar myObjectInstance2 = createMyObject();\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 18021444,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/18021444",
    "title": null,
    "body": "<p>I program this way:</p>\n\n<pre><code>sys = {\n    layout: null,\n    makeLayout: function (obCLS) {\n        this.layout = $('&lt;div /&gt;').addClass('editor').appendTo($(obCLS)).append(\n\n            /* Cargador */\n            /* @this.layout.find('&gt; div:nth-of-child(1)'); */\n            '&lt;div&gt;' +\n            '   &lt;p&gt;Seleccione la imagen que desea procesar.&lt;/p&gt;' +\n            '   &lt;input type=\"button\" value=\"Seleccionar\" class=\"btn btn-xlarge btn-success\" /&gt;' +\n            '   &lt;span&gt;&lt;/span&gt;' +\n            '&lt;/div&gt;' +\n\n            /* Cargador - Progreso */\n            /* @this.layout.find('&gt; div:nth-of-child(2)'); */\n            '&lt;div&gt;' +\n            '   &lt;div&gt;' +\n            '       &lt;div&gt;&lt;/div&gt;' +\n            '       &lt;div&gt;' +\n            '           &lt;div&gt;&lt;/div&gt;' +\n            '       &lt;/div&gt;' +\n            '   &lt;/div&gt;' +\n            '&lt;/div&gt;' +\n\n            /* Editor */\n            /* @this.layout.find('&gt; div:nth-of-child(3)');\n             * @sidebar = this.layout.find('&gt; div:nth-of-child(3) &gt; div &gt; div &gt; div:nth-of-type(1)');\n             * @body    = this.layout.find('&gt; div:nth-of-child(3) &gt; div &gt; div &gt; div:nth-of-type(2) &gt; div'); */\n            '&lt;div&gt;' +\n            '   &lt;div&gt;' +\n            '       &lt;div&gt;' +\n            '           &lt;div&gt;&lt;/div&gt;' +\n            '           &lt;div&gt;' +\n            '               &lt;div&gt;&lt;/div&gt;' +\n            '           &lt;/div&gt;' +\n            '       &lt;/div&gt;' +\n            '   &lt;/div&gt;' +\n            '&lt;/div&gt;'\n        );\n    }\n}\n\nsys.makeLayout('#div');\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1243068,
      "name": "e-info128",
      "reputation": 723
    }
  },
  {
    "soID": 18358056,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/18358056",
    "title": null,
    "body": "<p>You can use</p>\n\n<pre><code>function roundToTwo(num) {    \n    return +(Math.round(num + \"e+2\")  + \"e-2\");\n}\n</code></pre>\n\n<p>I found this over on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\" rel=\"noreferrer\">MDN</a>. Their way avoids the problem with 1.005 that was <a href=\"https://stackoverflow.com/questions/11832914/round-up-to-2-decimal-places-in-javascript#comment24719818_11832950\">mentioned</a>.</p>\n\n<pre><code>roundToTwo(1.005)\n1.01\nroundToTwo(10)\n10\nroundToTwo(1.7777777)\n1.78\nroundToTwo(9.1)\n9.1\n</code></pre>\n",
    "score": 264,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1243836,
      "name": "MarkG",
      "reputation": 3204
    }
  },
  {
    "soID": 19899768,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/19899768",
    "title": null,
    "body": "<p>For unchecking purposes this might help:</p>\n\n<pre><code>$('#chkbox').removeAttr('checked');\n</code></pre>\n",
    "score": -10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 18775818,
    "parentID": 14994391,
    "url": "https://stackoverflow.com/q/18775818",
    "title": null,
    "body": "<p>I find this question interesting, because my first serious exposure to JavaScript programming was <a href=\"http://en.wikipedia.org/wiki/Node.js\" rel=\"noreferrer\">Node.js</a> and AngularJS. I never learned jQuery, and I guess that's a good thing, because I don't have to unlearn anything. In fact, I actively avoid jQuery solutions to my problems, and instead, solely look for an \"AngularJS way\" to solve them. So, I guess my answer to this question would essentially boil down to, \"think like someone who never learned jQuery\" and avoid any temptation to incorporate jQuery directly (obviously AngularJS uses it to some extent behind the scenes).</p>\n",
    "score": 31,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1245418,
      "name": "Evan Zamir",
      "reputation": 1852
    }
  },
  {
    "soID": 15621345,
    "parentID": 586182,
    "url": "https://stackoverflow.com/q/15621345",
    "title": null,
    "body": "<h1>Custom array <code>insert</code> methods</h1>\n\n<h3><em>1. With multiple arguments and chaining support</em></h3>\n\n<pre><code>/* Syntax:\n   array.insert(index, value1, value2, ..., valueN) */\n\nArray.prototype.insert = function(index) {\n    this.splice.apply(this, [index, 0].concat(\n        Array.prototype.slice.call(arguments, 1)));\n    return this;\n};\n</code></pre>\n\n<p>It can insert multiple elements (as native <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice\" rel=\"noreferrer\"><code>splice</code></a> does) and supports chaining:</p>\n\n<pre><code>[\"a\", \"b\", \"c\", \"d\"].insert(2, \"X\", \"Y\", \"Z\").slice(1, 6);\n// [\"b\", \"X\", \"Y\", \"Z\", \"c\"]\n</code></pre>\n\n<hr>\n\n<h3><em>2. With array-type arguments merging and chaining support</em></h3>\n\n<pre><code>/* Syntax:\n   array.insert(index, value1, value2, ..., valueN) */\n\nArray.prototype.insert = function(index) {\n    index = Math.min(index, this.length);\n    arguments.length &gt; 1\n        &amp;&amp; this.splice.apply(this, [index, 0].concat([].pop.call(arguments)))\n        &amp;&amp; this.insert.apply(this, arguments);\n    return this;\n};\n</code></pre>\n\n<p>It can merge arrays from the arguments with the given array and also supports chaining:</p>\n\n<pre><code>[\"a\", \"b\", \"c\", \"d\"].insert(2, \"V\", [\"W\", \"X\", \"Y\"], \"Z\").join(\"-\");\n// \"a-b-V-W-X-Y-Z-c-d\"\n</code></pre>\n\n<p><strong>DEMO:</strong> <a href=\"http://jsfiddle.net/UPphH/\" rel=\"noreferrer\">http://jsfiddle.net/UPphH/</a></p>\n",
    "score": 56,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1249581,
      "name": "VisioN",
      "reputation": 96276
    }
  },
  {
    "soID": 14427449,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/14427449",
    "title": null,
    "body": "<p>The question won't be complete if we don't mention about alternative methods for looping through objects.</p>\n\n<p>Nowadays many well known JavaScript libraries provide their own methods for iterating over collections, i.e. over <em>arrays</em>, <em>objects</em>, and <em>array-like objects</em>. These methods are convenient to use and are entirely compatible with any browser.</p>\n\n<ol>\n<li><p>If you work with <strong>jQuery</strong>, you may use <a href=\"http://api.jquery.com/jQuery.each/\" rel=\"noreferrer\"><code>jQuery.each()</code></a> method. It can be used to seamlessly iterate over both objects and arrays:</p>\n\n<pre><code>$.each(obj, function(key, value) {\n    console.log(key, value);\n});\n</code></pre></li>\n<li><p>In <strong>Underscore.js</strong> you can find method <a href=\"http://underscorejs.org/#each\" rel=\"noreferrer\"><code>_.each()</code></a>, which iterates over a list of elements, yielding each in turn to a supplied function (pay attention to the order of arguments in <em>iteratee</em> function!):</p>\n\n<pre><code>_.each(obj, function(value, key) {\n    console.log(key, value);\n});\n</code></pre></li>\n<li><p><strong>Lo-Dash</strong> provides several methods for iterating over object properties. Basic <a href=\"http://lodash.com/docs#forEach\" rel=\"noreferrer\"><code>_.forEach()</code></a> (or it's alias <code>_.each()</code>) is useful for looping through both objects and arrays, however (!) objects with <code>length</code> property are treated like arrays, and to avoid this behavior it is suggested to use <a href=\"http://lodash.com/docs#forIn\" rel=\"noreferrer\"><code>_.forIn()</code></a> and <a href=\"http://lodash.com/docs#forOwn\" rel=\"noreferrer\"><code>_.forOwn()</code></a> methods (these also have <code>value</code> argument coming first):</p>\n\n<pre><code>_.forIn(obj, function(value, key) {\n    console.log(key, value);\n});\n</code></pre>\n\n<p><code>_.forIn()</code> iterates over <em>own and inherited</em> enumerable properties of an object, while <code>_.forOwn()</code> iterates only over <em>own</em> properties of an object (basically checking against <code>hasOwnProperty</code> function). For simple objects and object literals any of these methods will work fine.</p></li>\n</ol>\n\n<p>Generally all described methods have the same behaviour with any supplied objects. Besides using native <code>for..in</code> loop will usually be <em>faster</em> than any abstraction, such as <code>jQuery.each()</code>, these methods are considerably easier to use, require less coding and provide better error handling.</p>\n",
    "score": 206,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1249581,
      "name": "VisioN",
      "reputation": 96276
    }
  },
  {
    "soID": 14889651,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/14889651",
    "title": null,
    "body": "<p>We could get the first character with one of my favorite <code>RegExp</code>, looks like a cute smiley: <code>/^./</code></p>\n\n<pre><code>String.prototype.capitalize = function () {\n  return this.replace(/^./, function (match) {\n    return match.toUpperCase();\n  });\n};\n</code></pre>\n\n<p>And for all coffee-junkies:</p>\n\n<pre><code>String::capitalize = -&gt;\n  @replace /^./, (match) -&gt;\n    match.toUpperCase()\n</code></pre>\n\n<p>...and for all guys who think that there's a better way of doing this, without extending native prototypes:</p>\n\n<pre><code>var capitalize = function (input) {\n  return input.replace(/^./, function (match) {\n    return match.toUpperCase();\n  });\n};\n</code></pre>\n",
    "score": 41,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1250044,
      "name": "yckart",
      "reputation": 16826
    }
  },
  {
    "soID": 19574037,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/19574037",
    "title": null,
    "body": "<p>For those who code-golf, an unreliable test with fewest characters:</p>\n\n<pre><code>function isArray(a) {\n  return a.map;\n}\n</code></pre>\n\n<p>This is commonly used when traversing/flattening a hierarchy:</p>\n\n<pre><code>function golf(a) {\n  return a.map?[].concat.apply([],a.map(golf)):a;\n}\n\ninput: [1,2,[3,4,[5],6],[7,[8,[9]]]]\noutput: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1253312,
      "name": "Joe Frambach",
      "reputation": 19940
    }
  },
  {
    "soID": 13267099,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/13267099",
    "title": null,
    "body": "<p>After reading this thread, I feel confused with JavaScript Prototype Chain, then I found these charts </p>\n\n<p><a href=\"http://iwiki.readthedocs.org/en/latest/javascript/js_core.html#inheritance\" rel=\"noreferrer\">http://iwiki.readthedocs.org/en/latest/javascript/js_core.html#inheritance</a>\n<img src=\"https://i.stack.imgur.com/rcGmc.png\" alt=\"*[[protytype]]* and &lt;code&gt;prototype&lt;/code&gt; property of function objects\"></p>\n\n<p><em>it's a clear chart to show JavaScript Inheritance by Prototype Chain</em></p>\n\n<p>and </p>\n\n<p><a href=\"http://www.javascriptbank.com/javascript/article/JavaScript_Classical_Inheritance/\" rel=\"noreferrer\">http://www.javascriptbank.com/javascript/article/JavaScript_Classical_Inheritance/</a></p>\n\n<p><em>this one contains a example with code and several nice diagrams.</em></p>\n\n<blockquote>\n  <p>prototype chain ultimately falls back to Object.prototype. </p>\n  \n  <p>prototype chain can be technically extended as long as you want, each time by setting the prototype of the subclass equal to an object of the parent class.</p>\n</blockquote>\n\n<p>Hope it's also helpful for you to understand JavaScript Prototype Chain.</p>\n",
    "score": 56,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1254006,
      "name": "rockXrock",
      "reputation": 2599
    }
  },
  {
    "soID": 16811507,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/16811507",
    "title": null,
    "body": "<p>This is an implementation of <a href=\"https://stackoverflow.com/a/4673436/1258486\">https://stackoverflow.com/a/4673436/1258486</a> for CoffeeScript.</p>\n\n<p><a href=\"https://gist.github.com/eces/5669361\" rel=\"nofollow noreferrer\">https://gist.github.com/eces/5669361</a></p>\n\n<pre><code>if String.prototype.format is undefined\n  String.prototype.format = () -&gt;\n    _arguments = arguments\n    this.replace /{(\\d+)}/g, (match, number) -&gt;\n      if typeof _arguments[number] isnt 'undefined' then _arguments[number] else match\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17225654,
    "parentID": 1646698,
    "url": "https://stackoverflow.com/q/17225654",
    "title": null,
    "body": "<p>In addition to Daniel Howard's answer, here is what <code>new</code> does (or at least seems to do):</p>\n\n<pre><code>function New(func) {\n    var res = {};\n    if (func.prototype !== null) {\n        res.__proto__ = func.prototype;\n    }\n    var ret = func.apply(res, Array.prototype.slice.call(arguments, 1));\n    if ((typeof ret === \"object\" || typeof ret === \"function\") &amp;&amp; ret !== null) {\n        return ret;\n    }\n    return res;\n}\n</code></pre>\n\n<p>While</p>\n\n<pre><code>var obj = New(A, 1, 2);\n</code></pre>\n\n<p>is equivalent to</p>\n\n<pre><code>var obj = new A(1, 2);\n</code></pre>\n",
    "score": 129,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1258878,
      "name": "basilikum",
      "reputation": 7232
    }
  },
  {
    "soID": 18543953,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/18543953",
    "title": null,
    "body": "<pre><code>function clone(obj)\n{\n    var cloneObj = Object.create(obj);\n\n    return cloneObj;\n}\n</code></pre>\n\n<p>In Javascript objects individually inherit another object (Prototypal inheritance). Object.create(obj) returns an object that is a sub-object or child object of obj. In the above function it will effectively return a copy of the object.</p>\n\n<p>However, This is a very odd way to clone because I am not using inheritance for its real purpose.</p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17141819,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/17141819",
    "title": null,
    "body": "<p>Here is a function I came up with to do \"round up\". I used double Math.round to compensate for JavaScript's inaccurate multiplying, so 1.005 will be correctly rounded as 1.01.</p>\n\n<pre><code>function myRound(number, decimalplaces){\n    if(decimalplaces &gt; 0){\n        var multiply1 = Math.pow(10,(decimalplaces + 4));\n        var divide1 = Math.pow(10, decimalplaces);\n        return Math.round(Math.round(number * multiply1)/10000 )/divide1;\n    }\n    if(decimalplaces &lt; 0){\n        var divide2 = Math.pow(10, Math.abs(decimalplaces));\n        var multiply2 = Math.pow(10, Math.abs(decimalplaces));\n        return Math.round(Math.round(number / divide2) * multiply2);\n    }\n    return Math.round(number);\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1268893,
      "name": "Andrei",
      "reputation": 479
    }
  },
  {
    "soID": 31219726,
    "parentID": 18641899,
    "url": "https://stackoverflow.com/q/31219726",
    "title": null,
    "body": "<h2>2017-May update</h2>\n\n<p>Bower has finally been <a href=\"https://github.com/bower/bower/issues/2298\" rel=\"noreferrer\">deprecated</a>. End of story.</p>\n\n<h2>Older answer</h2>\n\n<p><a href=\"https://www.quora.com/Why-use-Bower-when-there-is-npm/answer/Mattias-Petter-Johansson\" rel=\"noreferrer\">From Mattias Petter Johansson, JavaScript developer at Spotify</a>:</p>\n\n<blockquote>\n  <p>In almost all cases, it's more appropriate to use Browserify and npm over Bower. It is simply a better packaging solution for front-end apps than Bower is. At Spotify, we use npm to package entire web modules (html, css, js) and it works very well.</p>\n  \n  <p>Bower brands itself as the package manager for the web. It would be awesome if this was true  - a package manager that made my life better as a front-end developer would be awesome. The problem is that Bower offers no specialized tooling for the purpose. It offers NO tooling that I know of that npm doesn't, and especially none that is specifically useful for front-end developers. <strong>There is simply no benefit for a front-end developer to use Bower over npm.</strong></p>\n  \n  <p>We should stop using bower and consolidate around npm. Thankfully, that is what <a href=\"http://www.modulecounts.com/\" rel=\"noreferrer\">is happening</a>:</p>\n</blockquote>\n\n<p><a href=\"https://i.stack.imgur.com/HLBsP.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/HLBsP.png\" alt=\"Module counts - bower vs. npm\"></a></p>\n\n<blockquote>\n  <p>With browserify or webpack, it becomes super-easy to concatenate all your modules into big minified files, which is awesome for performance, especially for mobile devices. Not so with Bower, which will require significantly more labor to get the same effect.</p>\n  \n  <p>npm also offers you the ability to use multiple versions of modules simultaneously. If you have not done much application development, this might initially strike you as a bad thing, but once you've gone through a few bouts of <a href=\"http://en.wikipedia.org/wiki/Dependency_hell\" rel=\"noreferrer\">Dependency hell</a> you will realize that having the ability to have multiple versions of one module is a pretty darn great feature. Note that npm includes a very handy <a href=\"https://docs.npmjs.com/cli/dedupe\" rel=\"noreferrer\">dedupe tool</a> that automatically makes sure that you only use two versions of a module if you actually <em>have</em> to - if two modules both <em>can</em> use the same version of one module, they will. But if they <em>can't</em>, you have a very handy out.</p>\n</blockquote>\n\n<p>(Note that <a href=\"https://www.reddit.com/r/javascript/comments/2is81v/why_is_not_systemjs_dominating_the_field_of/cla66t3\" rel=\"noreferrer\">Webpack</a> and <a href=\"https://nolanlawson.com/2016/08/15/the-cost-of-small-modules/\" rel=\"noreferrer\">rollup</a> are widely regarded to be better than Browserify as of Aug 2016.)</p>\n",
    "score": 80,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1269037,
      "name": "Dan Dascalescu",
      "reputation": 45495
    }
  },
  {
    "soID": 31282622,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/31282622",
    "title": null,
    "body": "<p>Here's the generalized version of how Facebook does it for their ubiquitous Like button:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script&gt;\r\n  var firstScript = document.getElementsByTagName('script')[0],\r\n      js = document.createElement('script');\r\n  js.src = 'https://cdnjs.cloudflare.com/ajax/libs/Snowstorm/20131208/snowstorm-min.js';\r\n  js.onload = function () {\r\n    // do stuff with your dynamically loaded script\r\n    snowStorm.snowColor = '#99ccff';\r\n  };\r\n  firstScript.parentNode.insertBefore(js, firstScript);\r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>If it works for Facebook, it will work for you.</p>\n\n<p>The reason why we look for the first <code>script</code> element instead of <code>head</code> or <code>body</code> is because some browsers don't create one if missing, but we're guaranteed to have a <code>script</code> element - this one. Read more at <a href=\"http://www.jspatterns.com/the-ridiculous-case-of-adding-a-script-element/\">http://www.jspatterns.com/the-ridiculous-case-of-adding-a-script-element/</a>.</p>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1269037,
      "name": "Dan Dascalescu",
      "reputation": 45495
    }
  },
  {
    "soID": 36268846,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/36268846",
    "title": null,
    "body": "<p>ES6 allows you to use a backtick to specify a string on multiple lines.  It's called a Template Literal.  Like this:</p>\n\n<pre><code>var multilineString = `One line of text\n    second line of text\n    third line of text\n    fourth line of text`;\n</code></pre>\n\n<p>Using the backtick works in NodeJS, and it's supported by Chrome, Firefox, Edge, Safari, and Opera.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals</a></p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1269900,
      "name": "earl3s",
      "reputation": 1642
    }
  },
  {
    "soID": 31320370,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/31320370",
    "title": null,
    "body": "<p>I would like to share my solution too, it's a bit of a combination between the other answers.</p>\n\n<pre><code>var copyToClipboard = function(textToCopy){\n    $(\"body\")\n        .append($('&lt;input type=\"text\" name=\"fname\" class=\"textToCopyInput\"/&gt;' )\n        .val(textToCopy))\n        .find(\".textToCopyInput\")\n        .select();\n      try {\n        var successful = document.execCommand('copy');\n        var msg = successful ? 'successful' : 'unsuccessful';\n        alert('Text copied to clipboard!');\n      } catch (err) {\n        window.prompt(\"To copy the text to clipboard: Ctrl+C, Enter\", textToCopy);\n      }\n     $(\".textToCopyInput\").remove();\n}\n</code></pre>\n\n<p>It uses jQuery but it doesn't have to be ofcourse, you can change that if you want. I just had jQuery to my disposal. You can also add some CSS to make sure the input doesn't show. For instance something like:</p>\n\n<pre><code>.textToCopyInput{opacity: 0; position: absolute;}\n</code></pre>\n\n<p>Or ofcourse you could also do some inline styling</p>\n\n<pre><code>.append($('&lt;input type=\"text\" name=\"fname\" style=\"opacity: 0;  position: absolute;\" class=\"textToCopyInput\"/&gt;' )\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1274398,
      "name": "Bart Burg",
      "reputation": 2371
    }
  },
  {
    "soID": 43401028,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/43401028",
    "title": null,
    "body": "<p>In ES-6 you can simply use Object.assign(...).\nEx:</p>\n\n<pre><code>let obj = {person: 'Thor Odinson'};\nlet clone = Object.assign({}, obj);\n</code></pre>\n\n<p>A good reference is here:\n<a href=\"https://googlechrome.github.io/samples/object-assign-es6/\" rel=\"noreferrer\">https://googlechrome.github.io/samples/object-assign-es6/</a></p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21173669,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/21173669",
    "title": null,
    "body": "<p>You can use functional closure to gain all the benefits of a deep copy, without a deep copy. It's a very different paradigm, but works well. Instead of trying to copy an existing object, just use a function to instantiate a new object when you need one.</p>\n\n<p>First, create an function that returns an object</p>\n\n<pre><code>function template() {\n  return {\n    values: [1, 2, 3],\n    nest: {x: {a: \"a\", b: \"b\"}, y: 100}\n  };\n}\n</code></pre>\n\n<p>Then create a simple shallow copy function</p>\n\n<pre><code>function copy(a, b) {\n  Object.keys(b).forEach(function(key) {\n    a[key] = b[key];\n  });\n}\n</code></pre>\n\n<p>Create a new object, and copy the template's properties onto it</p>\n\n<pre><code>var newObject = {}; \ncopy(newObject, template());\n</code></pre>\n\n<p>But the above copy step is not necessary. All you need to do is this:</p>\n\n<pre><code>var newObject = template();\n</code></pre>\n\n<p>Now that you have a new object, test to see what its properties are:</p>\n\n<pre><code>console.log(Object.keys(newObject));\n</code></pre>\n\n<p>This displays:</p>\n\n<pre><code>[\"values\", \"nest\"]\n</code></pre>\n\n<p>Yes, those are the newObject's own properties, not references to properties on another object.\nLet's just check:</p>\n\n<pre><code>console.log(newObject.nest.x.b);\n</code></pre>\n\n<p>This displays:</p>\n\n<pre><code>\"b\"\n</code></pre>\n\n<p>The newObject has acquired all of the template object's properties, but is free of any dependency chain.</p>\n\n<p><a href=\"http://jsbin.com/ISUTIpoC/1/edit?js,console\" rel=\"nofollow\">http://jsbin.com/ISUTIpoC/1/edit?js,console</a></p>\n\n<p>I added this example to encourage some debate, so please add some comments :)</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10733654,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/10733654",
    "title": null,
    "body": "<p>This one works fine</p>\n\n<pre><code>function getQuerystring(key) {\n    var query = window.location.search.substring(1);\n    alert(query);\n    var vars = query.split(\"&amp;\");\n    for (var i = 0; i &lt; vars.length; i++) {\n        var pair = vars[i].split(\"=\");\n        if (pair[0] == key) {\n            return pair[1];\n        }\n    }\n}\n</code></pre>\n\n<p>taken from <a href=\"http://forums.asp.net/t/1771251.aspx/1\">here</a></p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 42573585,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/42573585",
    "title": null,
    "body": "<p>I'm surprised no one has suggested this yet:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>let xs = [1,2,3,4];\nfor (let i in xs)\n    delete xs[i];\n</code></pre>\n\n<p>This yields an array in quite a different state from the other solutions. In a sense, the array has been 'emptied':</p>\n\n<pre><code>xs\n=&gt; Array [ &lt;4 empty slots&gt; ]\n\n[...xs]\n=&gt; Array [ undefined, undefined, undefined, undefined ]\n\nxs.length\n=&gt; 4\n\nxs[0]\n=&gt; ReferenceError: reference to undefined property xs[0]\n</code></pre>\n\n<p>You can produce an equivalent array with <code>[,,,,]</code> or <code>Array(4)</code></p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1288130,
      "name": "Cauterite",
      "reputation": 897
    }
  },
  {
    "soID": 14284081,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/14284081",
    "title": null,
    "body": "<p>To get the value of the selected radio that uses a class:</p>\n\n<pre><code>$('.class:checked').val()\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1288268,
      "name": "Rodrigo Dias",
      "reputation": 998
    }
  },
  {
    "soID": 41540122,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/41540122",
    "title": null,
    "body": "<p>I had to copy the non-input boxes text (text within any div/span tag) from the page and came up with following code. Only trick is to have a hidden field but as type TEXT, wont work with type hidden. </p>\n\n<pre><code>    function copyToClipboard(sID) {\n        var aField = document.getElementById(\"hiddenField\");\n\n        aField.hidden   = false;\n        aField.value    = document.getElementById(sID).textContent;\n        aField.select();\n        document.execCommand(\"copy\");\n        alert(\"Following text has been copied to the clipboard.\\n\\n\" + aField.value);\n        aField.hidden = true;\n    }\n</code></pre>\n\n<p>And in the HTML add the following</p>\n\n<p>input type=\"text\" id=\"hiddenField\" style=\"width:5px;border:0\" />\n...</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1290076,
      "name": "NewToIOS",
      "reputation": 81
    }
  },
  {
    "soID": 30755218,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/30755218",
    "title": null,
    "body": "<p>You can define you own object prototype, just before its usage or at the beginning of your code.</p>\n\n<p>The definition should look like this:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>Object.prototype.hasOwnProperties = function()\r\n{ \r\n  for (var k in this)\r\n  { \r\n    if ( this.hasOwnProperty(k) )\r\n    { \r\n      return true;\r\n    } \r\n  }\r\n  return false;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Here is a usage example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var a = {};\r\n\r\nwhile ( a.status !== \"finished\" )\r\n{  \r\n  if ( status === \"processing\" )\r\n  {\r\n    a.status = \"finished\";  \r\n  }\r\n  \r\n  if ( status === \"starting\" )\r\n  {\r\n    a.status = \"processing\";  \r\n  }\r\n  \r\n  if ( !a.hasOwnProperties() )\r\n  {\r\n    a.status = \"starting\";\r\n  }\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Enjoy! :-)</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1291121,
      "name": "Slavik Meltser",
      "reputation": 2392
    }
  },
  {
    "soID": 25466456,
    "parentID": 1279957,
    "url": "https://stackoverflow.com/q/25466456",
    "title": null,
    "body": "<p>I noticed huge memory leak &amp; performance difference between insertAfter &amp; after or insertBefore &amp; before .. If you have tons of DOM elements, or you need to use after() or before() inside a MouseMove event, the browser memory will probably increase and next operations will run really slow. The solution I've just experienced is to use inserBefore instead before() and insertAfter instead after().</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1292555,
      "name": "spetsnaz",
      "reputation": 186
    }
  },
  {
    "soID": 12534304,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/12534304",
    "title": null,
    "body": "<p>Here's how I would write the form and handle the getting of the checked radio.</p>\n\n<p>Using a form called myForm:</p>\n\n<pre><code>&lt;form id='myForm'&gt;\n    &lt;input type='radio' name='radio1' class='radio1' value='val1' /&gt;\n    &lt;input type='radio' name='radio1' class='radio1' value='val2' /&gt;\n    ...\n&lt;/form&gt;\n</code></pre>\n\n<p>Get the value from the form:</p>\n\n<pre><code>$('#myForm .radio1:checked').val();\n</code></pre>\n\n<p>If you're not posting the form, I would simplify it further by using:</p>\n\n<pre><code>&lt;input type='radio' class='radio1' value='val1' /&gt;\n&lt;input type='radio' class='radio1' value='val2' /&gt;\n</code></pre>\n\n<p>Then getting the checked value becomes:</p>\n\n<pre><code>    $('.radio1:checked').val();\n</code></pre>\n\n<p>Having a class name on the input allows me to easily style the inputs...</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1296245,
      "name": "Darin Peterson",
      "reputation": 577
    }
  },
  {
    "soID": 13795253,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/13795253",
    "title": null,
    "body": "<p>The top answer didn't do it for me. This did though:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    $(document).ready(function(){\n\n        $(\"#li_13\").click(function(){\n            if($(\"#agree\").attr('checked')){\n                $(\"#saveForm\").fadeIn();\n            }\n            else\n            {\n                $(\"#saveForm\").fadeOut();\n            }\n        });\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>Basically when the element #li_13 is clicked, it checks if the element # agree (which is the checkbox) is checked by using the <code>.attr('checked')</code> function. If it is then fadeIn the #saveForm element, and if not fadeOut the saveForm element.</p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23647927,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/23647927",
    "title": null,
    "body": "<p>Performance test:</p>\n\n<p><a href=\"http://jsperf.com/array-clear-methods/3\">http://jsperf.com/array-clear-methods/3</a></p>\n\n<pre><code>a = []; // 37% slower\na.length = 0; // 89% slower\na.splice(0, a.length)  // 97% slower\nwhile (a.length &gt; 0) {\n    a.pop();\n} // Fastest\n</code></pre>\n",
    "score": 54,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1299597,
      "name": "kenshou.html",
      "reputation": 714
    }
  },
  {
    "soID": 24079713,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/24079713",
    "title": null,
    "body": "<p>Most pretty but basic:</p>\n\n<pre><code>data = {};\n$.each(\n    location.search.substr(1).split('&amp;').filter(Boolean).map(function(kvpairs){\n        return kvpairs.split('=')\n    }),\n    function(i,values) {\n        data[values.shift()] = values.join('=')\n    }\n);\n</code></pre>\n\n<p>It doesn't handle values lists such as <code>?a[]=1&amp;a[]2</code></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21341006,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/21341006",
    "title": null,
    "body": "<p>Don't get why people make it so complicated:</p>\n\n<pre><code>objs.sort(function(a, b){\n  return a.last_nom &gt; b.last_nom;\n});\n</code></pre>\n\n<p>For stricter engines:</p>\n\n<pre><code>objs.sort(function(a, b){\n  return a.last_nom == b.last_nom ? 0 : +(a.last_nom &gt; b.last_nom) || -1;\n});\n</code></pre>\n\n<p>Swap the operator to have it sorted by reverse alphabetical order.</p>\n",
    "score": 89,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1307116,
      "name": "p3lim",
      "reputation": 1039
    }
  },
  {
    "soID": 24942977,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/24942977",
    "title": null,
    "body": "<p>I didn't see <a href=\"https://www.npmjs.org/package/pyformat\" rel=\"nofollow\">pyformat</a> in the list so I thought I'd throw it in:</p>\n\n<pre><code>console.log(pyformat( 'The {} {} jumped over the {}'\n                , ['brown' ,'fox' ,'foobar']\n                ))\nconsole.log(pyformat('The {0} {1} jumped over the {1}'\n                , ['brown' ,'fox' ,'foobar']\n                ))\nconsole.log(pyformat('The {color} {animal} jumped over the {thing}'\n                , [] ,{color: 'brown' ,animal: 'fox' ,thing: 'foobaz'}\n                ))\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 30606474,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/30606474",
    "title": null,
    "body": "<p>The accepted answer is missing a point:</p>\n\n<pre><code>{\n  let a = 123;\n};\n\nconsole.log(a); // ReferenceError: a is not defined\n</code></pre>\n",
    "score": 70,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1309106,
      "name": "Lcf.vs",
      "reputation": 869
    }
  },
  {
    "soID": 27660935,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/27660935",
    "title": null,
    "body": "<p>To just redirect to a page:</p>\n\n<pre><code>  window.location.href = \"/destination.html\";\n</code></pre>\n\n<p>Or if you need a delay:</p>\n\n<pre><code>setTimeout(function () {\n  window.location.href = \"/destination.html\";\n}, 2000);   // Time in milliseconds\n</code></pre>\n\n<p>jQuery allows you to select elements from a web page with ease. You can find anything you want in a page and then use jQuery to add special effects, react to user actions, or show and hide content inside or outside the element you have selected. All these tasks start with knowing <a href=\"http://learn.jquery.com/using-jquery-core/selecting-elements/\" rel=\"noreferrer\">how to select an element</a>.</p>\n\n<pre><code>function redirect () {\n    $('selection').animate({\n        marginLeft: 100px; //Put some CSS animation here\n    }, 500, function () {\n      // OK, finished jQuery staff, let's go redirect\n      window.location.href = \"/destination.html\";\n})\n</code></pre>\n\n<p>Imagine someone wrote a script/plugin that is 10000 lines of code?!\nWell, with jQuery you can connect to this code with just a line or two.</p>\n",
    "score": 35,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1316361,
      "name": "SergeDirect",
      "reputation": 625
    }
  },
  {
    "soID": 41183504,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/41183504",
    "title": null,
    "body": "<p>New answer to an old question!  If you have the pleasure of having using ECMAScript 2016 (ES6) with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\" rel=\"noreferrer\">Spread Syntax</a>, it's easy.</p>\n\n<pre><code>keepMeTheSame = {first: \"Me!\", second: \"You!\"};\ncloned = {...keepMeTheSame}\n</code></pre>\n\n<p>This provides a clean method for a shallow copy of an object.  Making a deep copy, meaning makign a new copy of every value in every recursively nested object, requires on of the heavier solutions above.</p>\n\n<p>JavaScript keeps evolving.</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 30101268,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/30101268",
    "title": null,
    "body": "<p>For the security reason you cant do that. You must choose flash for copying clipboard.I suggest this one;\n<a href=\"http://zeroclipboard.org/\" rel=\"nofollow\">http://zeroclipboard.org/</a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1321546,
      "name": "sinister",
      "reputation": 41
    }
  },
  {
    "soID": 15059200,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/15059200",
    "title": null,
    "body": "<p>This was my workaround:</p>\n\n<pre><code>$('#vcGoButton').click(function () {\n    var buttonStatus = $('#vcChangeLocation').prop('checked');\n    console.log(\"Status is \" + buttonStatus);\n    if (buttonStatus) {\n        var address = $('#vcNewLocation').val();\n        var cabNumber = $('#vcVehicleNumber').val();\n        $.get('postCabLocation.php',\n              {address: address, cabNumber: cabNumber},\n              function(data) {\n                  console.log(\"Changed vehicle \" + cabNumber + \" location to \" + address );\n              });\n    }\n    else {\n        console.log(\"VC go button clicked, but no location action\");\n    }\n});\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 14772229,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/14772229",
    "title": null,
    "body": "<p>You can use this</p>\n\n<pre><code>&lt;script&gt;\nfunction my_curr_date() {      \n    var currentDate = new Date()\n    var day = currentDate.getDate();\n    var month = currentDate.getMonth() + 1;\n    var year = currentDate.getFullYear();\n    var my_date = month+\"-\"+day+\"-\"+year;\n    document.getElementById(\"dateField\").value=my_date;    \n}\n&lt;/script&gt;\n</code></pre>\n\n<p>The HTML is</p>\n\n<pre><code>&lt;body onload='return my_curr_date();'&gt;\n    &lt;input type='text' name='dateField' id='dateField' value='' /&gt;\n&lt;/body&gt;\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1326169,
      "name": "Roger",
      "reputation": 1317
    }
  },
  {
    "soID": 14488421,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/14488421",
    "title": null,
    "body": "<p>How about using JSON.stringify? It is almost available in all modern browsers.</p>\n\n<pre><code>function isEmptyObject(obj){\n    return JSON.stringify(obj) === '{}';\n}\n</code></pre>\n",
    "score": 57,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1327409,
      "name": "Ateszki",
      "reputation": 1544
    }
  },
  {
    "soID": 40643616,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/40643616",
    "title": null,
    "body": "<p>Another approach is to use HTML imports. These can contain script references as well as stylesheet references.</p>\n\n<p>You can just link an HTML file like</p>\n\n<pre><code>&lt;link rel=\"import\" href=\"vendorScripts.html\"/&gt;\n</code></pre>\n\n<p>Within the <code>vendorScripts.html</code> file you can include your script references like:</p>\n\n<pre><code>&lt;script src=\"scripts/vendors/jquery.js\"&gt;&lt;/script&gt;\n&lt;script src=\"scripts/vendors/bootstrap.js\"&gt;&lt;/script&gt;\n&lt;script src=\"scripts/vendors/angular.js\"&gt;&lt;/script&gt;\n&lt;script src=\"scripts/vendors/angular-route.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Look at <a href=\"https://www.html5rocks.com/en/tutorials/webcomponents/imports/\" rel=\"nofollow noreferrer\">https://www.html5rocks.com/en/tutorials/webcomponents/imports/</a> for more details.</p>\n\n<p>Unfortunately this only works in Chrome.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1328944,
      "name": "gabriel211",
      "reputation": 21
    }
  },
  {
    "soID": 31934378,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/31934378",
    "title": null,
    "body": "<p><a href=\"https://stackoverflow.com/a/19079030/1338062\">Varun's answer</a> does not account for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset\" rel=\"nofollow noreferrer\">TimezoneOffset</a>. Here is a version that does:</p>\n\n<pre><code>var d = new Date()\nnew Date(d.getTime() - d.getTimezoneOffset() * 60000).toJSON().slice(0, 10) // 2015-08-11\n</code></pre>\n\n<p>The <code>TimezoneOffset</code> is minutes, while the Date constructor takes milliseconds, thus the multiplication by <code>60000</code>.</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1338062,
      "name": "user1338062",
      "reputation": 5515
    }
  },
  {
    "soID": 10222389,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/10222389",
    "title": null,
    "body": "<p>I found another nice solution LMCButton - small animated flash cross browser button. One JavaScript functions and swf button. Simple options (caption, custom JavaScript).  </p>\n\n<p>Link: <a href=\"http://www.lettersmarket.com/view_blog/a-3-copy_to_clipboard_lmcbutton.html\" rel=\"nofollow\">Copy to Clipboard LMCButton</a></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1343124,
      "name": "Denis",
      "reputation": 392
    }
  },
  {
    "soID": 20062925,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/20062925",
    "title": null,
    "body": "<p>Try this:</p>\n\n<pre><code>location.assign(\"http://www.google.com\");\n</code></pre>\n\n<p><a href=\"http://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_loc_assign\" rel=\"noreferrer\">Code snippet of example</a>.</p>\n",
    "score": 42,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1343736,
      "name": "tilak",
      "reputation": 2330
    }
  },
  {
    "soID": 16825593,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/16825593",
    "title": null,
    "body": "<h1>If you're <em>not</em> using jQuery in your code, this answer is for you</h1>\n\n<p>Your code should be something along the lines of this:</p>\n\n<pre><code>function foo() {\n    var httpRequest = new XMLHttpRequest();\n    httpRequest.open('GET', \"/echo/json\");\n    httpRequest.send();\n    return httpRequest.responseText;\n}\n\nvar result = foo(); // always ends up being 'undefined'\n</code></pre>\n\n<p>Felix Kling did a fine job writing an answer for people using jQuery for AJAX, I've decided to provide an alternative for people who aren't.</p>\n\n<p>(<a href=\"https://stackoverflow.com/a/30180679/1348195\">Note, for those using the new <code>fetch</code> API, Angular or promises I've added another answer below</a>)</p>\n\n<hr>\n\n<h1>What you're facing</h1>\n\n<p>This is a short summary of \"Explanation of the problem\" from the other answer, if you're not sure after reading this, read that.</p>\n\n<p>The <strong>A</strong> in AJAX stands for <strong>asynchronous</strong>. That means sending the request (or rather receiving the response) is taken out of the normal execution flow. In your example, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#send%28%29\" rel=\"noreferrer\"><code>.send</code></a> returns immediately and the next statement, <code>return result;</code>, is executed before the function you passed as <code>success</code> callback was even called.</p>\n\n<p>This means when you're returning, the listener you've defined did not execute yet, which means the value you're returning has not been defined. </p>\n\n<p>Here is a simple analogy</p>\n\n<pre><code>function getFive(){ \n    var a;\n    setTimeout(function(){\n         a=5;\n    },10);\n    return a;\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/7RK3k/\" rel=\"noreferrer\">(Fiddle)</a></p>\n\n<p>The value of <code>a</code> returned is <code>undefined</code> since the <code>a=5</code> part has not executed yet. AJAX acts like this, you're returning the value before the server got the chance to tell your browser what that value is.</p>\n\n<p>One possible solution to this problem is to code <em>re-actively</em> , telling your program what to do when the calculation completed.</p>\n\n<pre><code>function onComplete(a){ // When the code completes, do this\n    alert(a);\n}\n\nfunction getFive(whenDone){ \n    var a;\n    setTimeout(function(){\n         a=5;\n         whenDone(a);\n    },10);\n}\n</code></pre>\n\n<p>This is called <a href=\"http://en.wikipedia.org/wiki/Continuation-passing_style\" rel=\"noreferrer\">CPS</a>. Basically, we're passing <code>getFive</code> an action to perform when it completes, we're telling our code how to react when an event completes (like our AJAX call, or in this case the timeout).</p>\n\n<p>Usage would be:</p>\n\n<pre><code>getFive(onComplete);\n</code></pre>\n\n<p>Which should alert \"5\" to the screen. <a href=\"http://jsfiddle.net/PAjZR/\" rel=\"noreferrer\">(Fiddle)</a>.</p>\n\n<h1>Possible solutions</h1>\n\n<p>There are basically two ways how to solve this:</p>\n\n<ol>\n<li>Make the AJAX call synchronous (lets call it SJAX).</li>\n<li>Restructure your code to work properly with callbacks.</li>\n</ol>\n\n<h2>1. Synchronous AJAX - Don't do it!!</h2>\n\n<p>As for synchronous AJAX, <strong>don't do it!</strong> Felix's answer raises some compelling arguments about why it's a bad idea. To sum it up, it'll freeze the user's browser until the server returns the response and create a very bad user experience. Here is another short summary taken from MDN on why:</p>\n\n<blockquote>\n  <p>XMLHttpRequest supports both synchronous and asynchronous communications. In general, however, asynchronous requests should be preferred to synchronous requests for performance reasons.</p>\n  \n  <p>In short, synchronous requests block the execution of code... ...this can cause serious issues...</p>\n</blockquote>\n\n<p>If you <em>have</em> to do it, you can pass a flag: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests#Synchronous_request\" rel=\"noreferrer\">Here is how:</a></p>\n\n<pre><code>var request = new XMLHttpRequest();\nrequest.open('GET', 'yourURL', false);  // `false` makes the request synchronous\nrequest.send(null);\n\nif (request.status === 200) {// That's HTTP for 'ok'\n  console.log(request.responseText);\n}\n</code></pre>\n\n<h2>2. Restructure code</h2>\n\n<p>Let your function accept a callback. In the example code <code>foo</code> can be made to accept a callback. We'll be telling our code how to <em>react</em> when <code>foo</code> completes. </p>\n\n<p>So:</p>\n\n<pre><code>var result = foo();\n// code that depends on `result` goes here\n</code></pre>\n\n<p>Becomes:</p>\n\n<pre><code>foo(function(result) {\n    // code that depends on `result`\n});\n</code></pre>\n\n<p>Here we passed an anonymous function, but we could just as easily pass a reference to an existing function, making it look like:</p>\n\n<pre><code>function myHandler(result) {\n    // code that depends on `result`\n}\nfoo(myHandler);\n</code></pre>\n\n<p>For more details on how this sort of callback design is done, check Felix's answer. </p>\n\n<p>Now, let's define foo itself to act accordingly</p>\n\n<pre><code>function foo(callback) {\n    var httpRequest = new XMLHttpRequest();\n    httpRequest.onload = function(){ // when the request is loaded\n       callback(httpRequest.responseText);// we're calling our method\n    };\n    httpRequest.open('GET', \"/echo/json\");\n    httpRequest.send();\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/DAcWT/\" rel=\"noreferrer\">(fiddle)</a></p>\n\n<p>We have now made our foo function accept an action to run when the AJAX completes successfully, we can extend this further by checking if the response status is not 200 and acting accordingly (create a fail handler and such). Effectively solving our issue.</p>\n\n<p>If you're still having a hard time understanding this <a href=\"https://developer.mozilla.org/en-US/docs/AJAX/Getting_Started\" rel=\"noreferrer\">read the AJAX getting started guide</a> at MDN.</p>\n",
    "score": 684,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1348195,
      "name": "Benjamin Gruenbaum",
      "reputation": 149274
    }
  },
  {
    "soID": 30180679,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/30180679",
    "title": null,
    "body": "<h1>If you're using promises, this answer is for you.</h1>\n\n<p>This means AngularJS, jQuery (with deferred), native XHR's replacement (fetch), EmberJS, BackboneJS's save or any node library that returns promises.</p>\n\n<p>Your code should be something along the lines of this:</p>\n\n<pre><code>function foo() {\n    var data;\n    // or $.get(...).then, or request(...).then, or query(...).then\n    fetch(\"/echo/json\").then(function(response){\n        data = response.json();\n    });\n    return data;\n}\n\nvar result = foo(); // result is always undefined no matter what.\n</code></pre>\n\n<p>Felix Kling did a fine job writing an answer for people using jQuery with callbacks for AJAX. I have an answer for native XHR. This answer is for generic usage of promises either on the frontend or backend. </p>\n\n<hr>\n\n<h1>The core issue</h1>\n\n<p>The JavaScript concurrency model in the browser and on the server with NodeJS/io.js is <em>asynchronous</em> and <em>reactive</em>.</p>\n\n<p>Whenever you call a method that returns a promise, the <code>then</code> handlers are <em>always</em> executed asynchronously - that is, <strong>after</strong> the code below them that is not in a <code>.then</code> handler.</p>\n\n<p>This means when you're returning <code>data</code> the <code>then</code> handler you've defined did not execute yet. This in turn means that the value you're returning has not been set to the correct value in time. </p>\n\n<p>Here is a simple analogy for the issue:\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>    function getFive(){\r\n        var data;\r\n        setTimeout(function(){ // set a timer for one second in the future\r\n           data = 5; // after a second, do this\r\n        }, 1000);\r\n        return data;\r\n    }\r\n    document.body.innerHTML = getFive(); // `undefined` here and not 5</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The value of <code>data</code> is <code>undefined</code> since the <code>data = 5</code> part has not executed yet. It will likely execute in a second but by that time it is irrelevant to the returned value.</p>\n\n<p>Since the operation did not happen yet (AJAX, server call, IO, timer) you're returning the value before the request got the chance to tell your code what that value is.</p>\n\n<p>One possible solution to this problem is to code <em>re-actively</em> , telling your program what to do when the calculation completed. Promises actively enable this by being temporal (time-sensitive) in nature.</p>\n\n<h1>Quick recap on promises</h1>\n\n<p>A Promise is a <em>value over time</em>. Promises have state, they start as pending with no value and can settle to:</p>\n\n<ul>\n<li><strong>fulfilled</strong> meaning that the computation completed successfully.</li>\n<li><strong>rejected</strong> meaning that the computation failed.</li>\n</ul>\n\n<p>A promise can only change states <em>once</em> after which it will always stay at the same state forever. You can attach <code>then</code> handlers to promises to extract their value and handle errors. <code>then</code> handlers allow <a href=\"https://stackoverflow.com/questions/22539815/arent-promises-just-callbacks\">chaining</a> of calls. Promises are created by <a href=\"https://stackoverflow.com/questions/22519784/how-do-i-convert-an-existing-callback-api-to-promises\">using APIs that return them</a>. For example, the more modern AJAX replacement <code>fetch</code> or jQuery's <code>$.get</code> return promises.</p>\n\n<p>When we call <code>.then</code> on a promise and <em>return</em> something from it - we get a promise for <em>the processed value</em>. If we return another promise we'll get amazing things, but let's hold our horses.</p>\n\n<h1>With promises</h1>\n\n<p>Let's see how we can solve the above issue with promises. First, let's demonstrate our understanding of promise states from above by using the <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/Promise.jsm/Promise\" rel=\"noreferrer\">Promise constructor</a> for creating a delay function:</p>\n\n<pre><code>function delay(ms){ // takes amount of milliseconds\n    // returns a new promise\n    return new Promise(function(resolve, reject){\n        setTimeout(function(){ // when the time is up\n            resolve(); // change the promise to the fulfilled state\n        }, ms);\n    });\n}\n</code></pre>\n\n<p>Now, after we converted setTimeout to use promises, we can use <code>then</code> to make it count:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function delay(ms){ // takes amount of milliseconds\r\n  // returns a new promise\r\n  return new Promise(function(resolve, reject){\r\n    setTimeout(function(){ // when the time is up\r\n      resolve(); // change the promise to the fulfilled state\r\n    }, ms);\r\n  });\r\n}\r\n\r\nfunction getFive(){\r\n  // we're RETURNING the promise, remember, a promise is a wrapper over our value\r\n  return delay(100).then(function(){ // when the promise is ready\r\n      return 5; // return the value 5, promises are all about return values\r\n  })\r\n}\r\n// we _have_ to wrap it like this in the call site, we can't access the plain value\r\ngetFive().then(function(five){ \r\n   document.body.innerHTML = five;\r\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Basically, instead of returning a <em>value</em> which we can't do because of the concurrency model - we're returning a <em>wrapper</em> for a value that we can <em>unwrap</em> with <code>then</code>. It's like a box you can open with <code>then</code>.</p>\n\n<h3>Applying this</h3>\n\n<p>This stands the same for your original API call, you can:</p>\n\n<pre><code>function foo() {\n    // RETURN the promise\n    return fetch(\"/echo/json\").then(function(response){\n        return response.json(); // process it inside the `then`\n    });\n}\n\nfoo().then(function(response){\n    // access the value inside the `then`\n})\n</code></pre>\n\n<p>So this works just as well. We've learned we can't return values from already asynchronous calls but we can use promises and chain them to perform processing. We now know how to return the response from an asynchronous call.</p>\n\n<h1>ES2015 (ES6)</h1>\n\n<p>ES6 introduces <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\" rel=\"noreferrer\">generators</a> which are functions that can return in the middle and then resume the point they were at. This is typically useful for sequences, for example:</p>\n\n<pre><code>function* foo(){ // notice the star, this is ES6 so new browsers/node/io only\n    yield 1;\n    yield 2;\n    while(true) yield 3;\n}\n</code></pre>\n\n<p>Is a function that returns an <em>iterator</em> over the sequence <code>1,2,3,3,3,3,....</code> which can be iterated. While this is interesting on its own and opens room for a lot of possibility there is one particular interesting case.</p>\n\n<p>If the sequence we're producing is a sequence of actions rather than numbers - we can pause the function whenever an action is yielded and wait for it before we resume the function. So instead of a sequence of numbers, we need a sequence of <em>future</em> values - that is: promises.</p>\n\n<p>This somewhat tricky but very powerful trick lets us write asynchronous code in a synchronous manner. There are several \"runners\" that do this for you, writing one is a short few lines of code but is beyond the scope of this answer. I'll be using Bluebird's <code>Promise.coroutine</code> here, but there are other wrappers like <code>co</code> or <code>Q.async</code>. </p>\n\n<pre><code>var foo = coroutine(function*(){\n    var data = yield fetch(\"/echo/json\"); // notice the yield\n    // code here only executes _after_ the request is done\n    return data.json(); // data is defined\n});\n</code></pre>\n\n<p>This method returns a promise itself, which we can consume from other coroutines. For example:</p>\n\n<pre><code>var main = coroutine(function*(){\n   var bar = yield foo(); // wait our earlier coroutine, it returns a promise\n   // server call done here, code below executes when done\n   var baz = yield fetch(\"/api/users/\"+bar.userid); // depends on foo's result\n   console.log(baz); // runs after both requests done\n});\nmain();\n</code></pre>\n\n<h1>ES2016 (ES7)</h1>\n\n<p>In ES7, this is further standardized, there are several proposals right now but in all of them you can <code>await</code> promise. This is just \"sugar\" (nicer syntax) for the ES6 proposal above by adding the <code>async</code> and <code>await</code> keywords. Making the above example:</p>\n\n<pre><code>async function foo(){\n    var data = await fetch(\"/echo/json\"); // notice the await\n    // code here only executes _after_ the request is done\n    return data.json(); // data is defined\n}\n</code></pre>\n\n<p>It still returns a promise just the same :)</p>\n",
    "score": 214,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1348195,
      "name": "Benjamin Gruenbaum",
      "reputation": 149274
    }
  },
  {
    "soID": 29102452,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/29102452",
    "title": null,
    "body": "<p>You could also override the Math.round function to do the rounding correct and add a parameter for decimals and use it like: Math.round(Number, Decimals). Keep in mind that this overrides the built in component Math.round and giving it another property then it original is.</p>\n\n<pre><code>var round = Math.round;\nMath.round = function (value, decimals) {\n  decimals = decimals || 0;\n  return Number(round(value + 'e' + decimals) + 'e-' + decimals);\n}\n</code></pre>\n\n<p>Then you can simply use it like this:</p>\n\n<pre><code>Math.round(1.005, 2);\n</code></pre>\n\n<p><a href=\"https://jsfiddle.net/k5tpq3pd/3/\" rel=\"nofollow\">https://jsfiddle.net/k5tpq3pd/3/</a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1350598,
      "name": "Arne HB",
      "reputation": 1348
    }
  },
  {
    "soID": 33415164,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/33415164",
    "title": null,
    "body": "<pre><code>function compare(propName) {\n    return function(a,b) {\n        if (a[propName] &lt; b[propName])\n            return -1;\n        if (a[propName] &gt; b[propName])\n            return 1;\n        return 0;\n    };\n}\n\nobjs.sort(compare(\"last_nom\"));\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1351103,
      "name": "Evgeny",
      "reputation": 1206
    }
  },
  {
    "soID": 18638299,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/18638299",
    "title": null,
    "body": "<p>As pointed out by Thomas Stjernegaard Jeppesen, you could use <a href=\"https://github.com/browserstate/history.js\" rel=\"noreferrer\">History.js</a> to modify URL parameters whilst the user navigates through your Ajax links and apps. </p>\n\n<p>Almost an year has passed since that answer, and History.js grew and became more stable and cross-browser. Now it can be used to manage history states in HTML5-compliant as well as in many HTML4-only browsers. <a href=\"http://browserstate.github.io/history.js/demo/?state=1\" rel=\"noreferrer\">In this demo</a> You can see an example of how it works (as well as being able to try its functionalities and limits. </p>\n\n<p>Should you need any help in how to use and implement this library, i suggest you to take a look at the source code of the demo page: you will see it's very easy to do.</p>\n\n<p>Finally, for a comprehensive explanation of what can be the issues about using hashes (and hashbangs), check out <a href=\"https://github.com/browserstate/history.js/wiki/Intelligent-State-Handling\" rel=\"noreferrer\">this link</a> by Benjamin Lupton. </p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1356098,
      "name": "Erenor Paz",
      "reputation": 1486
    }
  },
  {
    "soID": 17606289,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/17606289",
    "title": null,
    "body": "<p>For the sake of completeness, I got to thinking about which method I should use to do this. There are basically two ways to do this as suggested by the other answers on this page.</p>\n\n<p><strong>Note:</strong> In general, extending the built-in prototypes in JavaScript is generally not recommended. I am providing as extensions on the String prototype simply for purposes of illustration, showing different implementations of a hypothetical standard method on the <code>String</code> built-in prototype.</p>\n\n<hr>\n\n<h3>Regular Expression Based Implementation</h3>\n\n<pre><code>String.prototype.replaceAll = function(search, replacement) {\n    var target = this;\n    return target.replace(new RegExp(search, 'g'), replacement);\n};\n</code></pre>\n\n<h3>Split and Join (Functional) Implementation</h3>\n\n<pre><code>String.prototype.replaceAll = function(search, replacement) {\n    var target = this;\n    return target.split(search).join(replacement);\n};\n</code></pre>\n\n<hr>\n\n<p>Not knowing too much about how regular expressions work behind the scenes in terms of efficiency, I tended to lean toward the split and join implementation in the past without thinking about performance. When I did wonder which was more efficient, and by what margin, I used it as an excuse to find out.</p>\n\n<p>On my Chrome Windows&nbsp;8 machine, <strong>the regular expression based implementation is the fastest</strong>, with the <strong>split and join implementation being 53% slower</strong>. Meaning the regular expressions are twice as fast for the lorem ipsum input I used.</p>\n\n<p>Check out this <a href=\"http://jsben.ch/#/LFfWA\" rel=\"noreferrer\"><strong>benchmark</strong></a> running these two implementations against each other.</p>\n\n<hr>\n\n<p>As noted in the comment below by @ThomasLeduc and others, there could be an issue with the regular expression-based implementation if <code>search</code> contains certain characters which are reserved as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters\" rel=\"noreferrer\">special characters in regular expressions</a>. The implementation assumes that the caller will escape the string beforehand or will only pass strings that are without the characters in the table in <em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters\" rel=\"noreferrer\">Regular Expressions</a></em> (MDN).</p>\n\n<p>MDN also provides an implementation to escape our strings. It would be nice if this was also standardized as <code>RegExp.escape(str)</code>, but alas, it does not exist:</p>\n\n<pre><code>function escapeRegExp(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&amp;\"); // $&amp; means the whole matched string\n}\n</code></pre>\n\n<p>We could call <code>escapeRegExp</code> within our <code>String.prototype.replaceAll</code> implementation, however, I'm not sure how much this will affect the performance (potentially even for strings for which the escape is not needed, like all alphanumeric strings).</p>\n",
    "score": 1020,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1359785,
      "name": "Cory Gross",
      "reputation": 16632
    }
  },
  {
    "soID": 10418396,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/10418396",
    "title": null,
    "body": "<p>Okay, so I am new to JavaScript. I wasn't able to get the above to work for me. So I started putting it together myself. Here's my idea (about the same, different and working syntax): </p>\n\n<pre><code>String name = request.getParameter(\"name\");\nname = name.toUpperCase().charAt(0) + name.substring(1);\nout.println(name);\n</code></pre>\n\n<p>Here I get the variable from a form (it also works manually):</p>\n\n<pre><code>String name = \"i am a Smartypants...\";\nname = name.toUpperCase().charAt(0) + name.substring(1);\nout.println(name);\n</code></pre>\n\n<p>Output: \"I am a Smartypants...\";</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1370612,
      "name": "Alex",
      "reputation": 49
    }
  },
  {
    "soID": 26830003,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/26830003",
    "title": null,
    "body": "<p>Let me tell you my understanding of prototypes. I am not going to compare the inheritance here with other languages. I wish people would stop comparing languages, and just understand the language as itself. Understanding prototypes and prototypal inheritance is so simple, as I will show you below.</p>\n\n<p>Prototype is like a model, based on which you create a product. The crucial point to understand is that when you create an object using another object as it's prototype, the link between the prototype and the product is ever-lasting. For instance:</p>\n\n<pre><code>var model = {x:2};\nvar product = Object.create(model);\nmodel.y = 5;\nproduct.y\n=&gt;5\n</code></pre>\n\n<p>Every object contains an internal property called the [[prototype]], which can be accessed by the <code>Object.getPrototypeOf()</code> function. <code>Object.create(model)</code> creates a new object and sets it's [[prototype]] property to the object <strong>model</strong>. Hence when you do <code>Object.getPrototypeOf(product)</code>, you will get the object <strong>model</strong>.</p>\n\n<p>Properties in the <strong>product</strong> are handled in the following way:</p>\n\n<ul>\n<li>When a property is accessed to just read it's value, its looked up in the scope chain. The search for the variable starts from the <strong>product</strong> upwards to it's prototype. If such a variable is found in the search, the search is stopped right there, and the value is returned. If such a variable cannot be found in the scope chain, undefined is returned.</li>\n<li>When a property is written(altered), then the property is always written on the <strong>product</strong> object. If the <strong>product</strong> does not have such a property already, it is implicitly created and written.</li>\n</ul>\n\n<p>Such a linking of objects using the prototype property is called prototypal inheritance. There, it is so simple, agree?</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1376717,
      "name": "Aravind",
      "reputation": 2200
    }
  },
  {
    "soID": 22342505,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/22342505",
    "title": null,
    "body": "<p>I would use <a href=\"https://github.com/spumko/good\" rel=\"nofollow\">GOOD</a> by Walmart Labs. It will do the job, and it's very flexible:</p>\n\n<pre><code>var hapi = require('hapi');\nvar good = require('good');\nvar server = hapi.createServer('localhost', 5000,{});\nserver.route({SOME ROUTE HERE});\nserver.start();\n\nvar options = {\nsubscribers: {\n    'console':               ['ops', 'request', 'log', 'error'],\n    'http://localhost/logs': ['log']\n    }\n};\nserver.pack.require('good', options, function (err) {\n\n    if (!err) {\n        console.log('Plugin loaded successfully');\n    }\n});\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1377728,
      "name": "Doron Segal",
      "reputation": 1275
    }
  },
  {
    "soID": 16600410,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/16600410",
    "title": null,
    "body": "<p>If you do not wish to use a JavaScript library you can use the JavaScript string functions to parse <code>window.location</code>. Keep this code in an external .js file and you can use it over and over again in different projects.</p>\n\n<pre><code>// Example - window.location = \"index.htm?name=bob\";\n\nvar value = getParameterValue(\"name\");\n\nalert(\"name = \" + value);\n\nfunction getParameterValue(param)\n{\n    var url = window.location;\n    var parts = url.split('?');\n    var params = parts[1].split('&amp;');\n    var val = \"\";\n\n    for ( var i=0; i&lt;params.length; i++)\n    {\n        var paramNameVal = params[i].split('=');\n\n        if ( paramNameVal[0] == param )\n        {\n            val = paramNameVal[1];\n        }\n    }\n    return val;\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15461303,
    "parentID": 2067472,
    "url": "https://stackoverflow.com/q/15461303",
    "title": null,
    "body": "<p>JSONP works by constructing a “script” element (either in HTML markup or inserted into the DOM via JavaScript), which requests to a remote data service location. The response is a javascript loaded on to your browser with name of the pre-defined function along with parameter being passed that is tht JSON data being requested. When the script executes, the function is called along with JSON data, allowing the requesting page to receive and process the data.</p>\n\n<p><strong>For Further Reading Visit:</strong> <a href=\"https://blogs.sap.com/2013/07/15/secret-behind-jsonp/\" rel=\"nofollow noreferrer\">https://blogs.sap.com/2013/07/15/secret-behind-jsonp/</a></p>\n\n<p><strong>client side snippet of code</strong></p>\n\n<pre><code>    &lt;!DOCTYPE html&gt;\n    &lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n     &lt;title&gt;AvLabz - CORS : The Secrets Behind JSONP &lt;/title&gt;\n     &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;input type=\"text\" id=\"username\" placeholder=\"Enter Your Name\"/&gt;\n      &lt;button type=\"submit\" onclick=\"sendRequest()\"&gt; Send Request to Server &lt;/button&gt;\n    &lt;script&gt;\n    \"use strict\";\n    //Construct the script tag at Runtime\n    function requestServerCall(url) {\n      var head = document.head;\n      var script = document.createElement(\"script\");\n\n      script.setAttribute(\"src\", url);\n      head.appendChild(script);\n      head.removeChild(script);\n    }\n\n    //Predefined callback function    \n    function jsonpCallback(data) {\n      alert(data.message); // Response data from the server\n    }\n\n    //Reference to the input field\n    var username = document.getElementById(\"username\");\n\n    //Send Request to Server\n    function sendRequest() {\n      // Edit with your Web Service URL\n      requestServerCall(\"http://localhost/PHP_Series/CORS/myService.php?callback=jsonpCallback&amp;message=\"+username.value+\"\");\n    }    \n\n  &lt;/script&gt;\n   &lt;/body&gt;\n   &lt;/html&gt;\n</code></pre>\n\n<p><strong>Server side piece of PHP code</strong></p>\n\n<pre><code>&lt;?php\n    header(\"Content-Type: application/javascript\");\n    $callback = $_GET[\"callback\"];\n    $message = $_GET[\"message\"].\" you got a response from server yipeee!!!\";\n    $jsonResponse = \"{\\\"message\\\":\\\"\" . $message . \"\\\"}\";\n    echo $callback . \"(\" . $jsonResponse . \")\";\n?&gt;\n</code></pre>\n",
    "score": 30,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1384741,
      "name": "Ajain Vivek",
      "reputation": 475
    }
  },
  {
    "soID": 39744900,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/39744900",
    "title": null,
    "body": "<p>I made another minimalistic wrapper with only 20 lines of code to allow using it like it should:</p>\n\n<pre><code>localStorage.set('myKey',{a:[1,2,5], b: 'ok'});\nlocalStorage.has('myKey');   // --&gt; true\nlocalStorage.get('myKey');   // --&gt; {a:[1,2,5], b: 'ok'}\nlocalStorage.keys();         // --&gt; ['myKey']\nlocalStorage.remove('myKey');\n</code></pre>\n\n<p><a href=\"https://github.com/zevero/simpleWebstorage\" rel=\"nofollow\">https://github.com/zevero/simpleWebstorage</a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1385546,
      "name": "zevero",
      "reputation": 518
    }
  },
  {
    "soID": 33796009,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/33796009",
    "title": null,
    "body": "<p>Select Text and selected value on dropdown/select change event in jQuery</p>\n\n<pre><code>$(\"#yourdropdownid\").change(function() {\n    console.log($(\"option:selected\", this).text()); //text\n    console.log($(this).val()); //value\n})\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1390850,
      "name": "Sandeep Shekhawat",
      "reputation": 292
    }
  },
  {
    "soID": 20701430,
    "parentID": 3390396,
    "url": "https://stackoverflow.com/q/20701430",
    "title": null,
    "body": "<p>Personally, I always use the following:</p>\n\n<pre><code>var x;\nif( x === undefined) {\n    //Do something here\n}\nelse {\n   //Do something else here\n}\n</code></pre>\n\n<p>The window.undefined property is non-writable in all modern browsers (JavaScript 1.8.5 or later). From Mozilla's documentation: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\" rel=\"noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined</a>, I see this: One reason to use typeof() is that it does not throw an error if the variable has not been defined.</p>\n\n<p>I prefer to have the approach of using</p>\n\n<pre><code>x === undefined \n</code></pre>\n\n<p>because it fails and blows up in my face rather than silently passing/failing if x has not been declared before. This alerts me that x is not declared. I believe all variables used in JavaScript should be declared.</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1394294,
      "name": "Hrishi",
      "reputation": 5070
    }
  },
  {
    "soID": 23705087,
    "parentID": 14994391,
    "url": "https://stackoverflow.com/q/23705087",
    "title": null,
    "body": "<p>Those are some very nice, but lengthy answers.</p>\n\n<p>To sum up my experiences:</p>\n\n<ol>\n<li>Controllers and providers (services, factories, etc.) are for modifying the data model, NOT HTML.</li>\n<li>HTML and directives define the layout and binding to the model.</li>\n<li>If you need to share data between controllers, create a service or factory - they are singletons that are shared across the application.</li>\n<li>If you need an HTML widget, create a directive.</li>\n<li><strong>If you have some data and are now trying to update HTML... STOP! update the model, and make sure your HTML is bound to the model.</strong></li>\n</ol>\n",
    "score": 46,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1394392,
      "name": "Dan",
      "reputation": 1081
    }
  },
  {
    "soID": 19386579,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/19386579",
    "title": null,
    "body": "<p>I've just had this problem i.e. checking if an object is null.<br>\nI simply use this:</p>\n\n<pre><code>if (object) { Somecode}\n</code></pre>\n\n<p>i.e.</p>\n\n<pre><code>if (document.getElementById(\"enterJob\")) \n  document.getElementById(\"enterJob\").className += ' current';\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1408110,
      "name": "Welshboy",
      "reputation": 114
    }
  },
  {
    "soID": 17028176,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/17028176",
    "title": null,
    "body": "<p>Write the below code after the PHP, HTML or jQuery section. If in the middle of the PHP or HTML section, then use the &lt;script> tag.</p>\n\n<pre><code>location.href = \"http://google.com\"\n</code></pre>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1412912,
      "name": "Bidyut",
      "reputation": 301
    }
  },
  {
    "soID": 10735089,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/10735089",
    "title": null,
    "body": "<p>This is perhaps the biggest weakness of JavaScript in my opinion. It's caused me no end of problems over the years with dependency tracing. Anyhow, it does appear that the only <em>practical</em> solution is to use script includes in the HTML file and thus horribly making your JavaScript code dependent upon the user including the source you need and making reuse unfriendly.</p>\n\n<p>Sorry if this comes across as a lecture ;) It's a (bad) habit of mine, but I want to make this point.</p>\n\n<p>The problem comes back to the same as everything else with the web, the history of JavaScript. It really wasn't designed to be used in the widespread manner it's used in today. <a href=\"http://en.wikipedia.org/wiki/Netscape\" rel=\"noreferrer\">Netscape</a> made a language that would allow you to control a few things, but they didn't envisage its widespread use for so many things as it is put to now and for one reason or another it's expanded from there, without addressing some of the fundamental weaknesses of the original strategy.</p>\n\n<p>It's not alone of course. HTML wasn't designed for the modern webpage; it was designed to be a way of expressing the logic of a document, so that readers (browsers in the modern world) could display this in an applicable form that was within the capabilities of the system, and it took years for a solution (other than the hacks of MS and Netscape) to come along. <a href=\"http://en.wikipedia.org/wiki/Cascading_Style_Sheets\" rel=\"noreferrer\">CSS</a> solves this problem, but it was a long time coming and even longer to get people to use it rather than the established BAD techniques. It happened though, praise be.</p>\n\n<p>Hopefully JavaScript (especially now it's part of the standard) will develop to take on board the concept of proper modularity (as well as some other things) as every other (extant) programming language in the world does and this stupidity will go away. Until then you just have to not like it and lump it, I'm afraid.</p>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1414677,
      "name": "Stephen Whipp",
      "reputation": 219
    }
  },
  {
    "soID": 12097933,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/12097933",
    "title": null,
    "body": "<p>Using script tags:</p>\n\n<ul>\n<li>add a <code>&lt;script&gt;...&lt;/script&gt;</code> block containing your multiline text into <code>head</code> tag;</li>\n<li><p>get your multiline text as is... (watch out for text encoding: UTF-8, ASCII)</p>\n\n<pre><code>&lt;script&gt;\n\n    // pure javascript\n    var text = document.getElementById(\"mySoapMessage\").innerHTML ;\n\n    // using JQuery's document ready for safety\n    $(document).ready(function() {\n\n        var text = $(\"#mySoapMessage\").html(); \n\n    });\n\n&lt;/script&gt;\n\n&lt;script id=\"mySoapMessage\" type=\"text/plain\"&gt;\n\n    &lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:typ=\"...\"&gt;\n       &lt;soapenv:Header/&gt;\n       &lt;soapenv:Body&gt;\n          &lt;typ:getConvocadosElement&gt;\n             ...\n          &lt;/typ:getConvocadosElement&gt;\n       &lt;/soapenv:Body&gt;\n    &lt;/soapenv:Envelope&gt;\n\n    &lt;!-- this comment will be present on your string --&gt;\n    //uh-oh, javascript comments...  SOAP request will fail \n\n\n&lt;/script&gt;\n</code></pre></li>\n</ul>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1416458,
      "name": "jpfreire",
      "reputation": 934
    }
  },
  {
    "soID": 13517037,
    "parentID": 3390396,
    "url": "https://stackoverflow.com/q/13517037",
    "title": null,
    "body": "<p>Since none of the other answers helped me, I suggest doing this. It worked for me in Internet&nbsp;Explorer&nbsp;8:</p>\n\n<pre><code>if (typeof variable_name.value === 'undefined') {\n    // variable_name is undefined\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1416980,
      "name": "anmarti",
      "reputation": 2725
    }
  },
  {
    "soID": 15040229,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/15040229",
    "title": null,
    "body": "<p>Just add this to the bottom of your HTML page...</p>\n\n<pre><code>&lt;script&gt;\n    Your_Function();\n&lt;/script&gt;\n</code></pre>\n\n<p>Because, HTML documents are parsed by top-bottom.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1425040,
      "name": "davefrassoni",
      "reputation": 155
    }
  },
  {
    "soID": 20035319,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/20035319",
    "title": null,
    "body": "<p>If I understood it right you are doing an <a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\">XMLHttpRequest</a> to a different domain than your page is on. So the browser is blocking it as it usually allows a request in the same origin for security reasons. You need to do something different when you want to do a cross-domain request. A tutorial about how to achieve that is <em><a href=\"http://www.html5rocks.com/en/tutorials/cors/\">Using CORS</a></em>.</p>\n\n<p>When you are using postman they are not restricted by this policy. Quoted from <em><a href=\"http://developer.chrome.com/extensions/xhr.html\">Cross-Origin XMLHttpRequest</a></em>:</p>\n\n<blockquote>\n  <p>Regular web pages can use the XMLHttpRequest object to send and receive data from remote servers, but they're limited by the same origin policy. Extensions aren't so limited. An extension can talk to remote servers outside of its origin, as long as it first requests cross-origin permissions.</p>\n</blockquote>\n",
    "score": 781,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1426743,
      "name": "MD. Sahib Bin Mahboob",
      "reputation": 10843
    }
  },
  {
    "soID": 13697768,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/13697768",
    "title": null,
    "body": "<p>You can use this function</p>\n\n<pre><code>            String.prototype.format = function (args) {\n            var str = this;\n            return str.replace(String.prototype.format.regex, function(item) {\n                var intVal = parseInt(item.substring(1, item.length - 1));\n                var replace;\n                if (intVal &gt;= 0) {\n                    replace = args[intVal];\n                } else if (intVal === -1) {\n                    replace = \"{\";\n                } else if (intVal === -2) {\n                    replace = \"}\";\n                } else {\n                    replace = \"\";\n                }\n                return replace;\n            });\n        };\n        String.prototype.format.regex = new RegExp(\"{-?[0-9]+}\", \"g\");\n\n        // Sample usage.\n        var str = \"She {1} {0}{2} by the {0}{3}. {-1}^_^{-2}\";\n        str = str.format([\"sea\", \"sells\", \"shells\", \"shore\"]);\n        alert(str);\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 39493551,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/39493551",
    "title": null,
    "body": "<h1>Node has its own <a href=\"https://nodejs.org/api/debugger.html#debugger_v8_inspector_integration_for_node_js\" rel=\"noreferrer\">built in</a> GUI debugger as of version 6.3 (using Chrome's DevTools)</h1>\n\n<p><a href=\"https://i.stack.imgur.com/eZAzW.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/eZAzW.png\" alt=\"Nodes builtin GUI debugger\"></a></p>\n\n<p>Simply pass the inspector flag and you'll be provided with a URL to the inspector:</p>\n\n<pre><code>node --inspect server.js\n</code></pre>\n\n<p>You can also break on the first line by passing <code>--inspect-brk</code> instead.</p>\n\n<p>To open a Chrome window automatically, use the <a href=\"https://github.com/jaridmargolin/inspect-process\" rel=\"noreferrer\">inspect-process</a> module.</p>\n\n<pre><code># install inspect-process globally\nnpm install -g inspect-process\n\n# start the debugger with inspect\ninspect script.js\n</code></pre>\n",
    "score": 102,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1432509,
      "name": "Alister Norris",
      "reputation": 3426
    }
  },
  {
    "soID": 19863518,
    "parentID": 14994391,
    "url": "https://stackoverflow.com/q/19863518",
    "title": null,
    "body": "<p>Listen to the podcast <em><a href=\"http://javascriptjabber.com/032-jsj-angular-js/\">JavaScript Jabber: Episode #32</a></em> that features the original creators of AngularJS: Misko Hevery &amp; Igor Minar. They talk a lot about what it's like to come to AngularJS from other JavaScript backgrounds, especially jQuery.</p>\n\n<p>One of the points made in the podcast made a lot of things click for me with respects to your question:</p>\n\n<blockquote>\n  <p><strong>MISKO</strong>: [...] one of the things we thought about very hardly in Angular is, how do we provide lots of escape hatches so that you can get out and basically figure out a way out of this. So to us, the answer is this thing called “Directives”. <strong>And with directives, you essentially become a regular little jQuery JavaScript, you can do whatever you want.</strong></p>\n  \n  <p><strong>IGOR</strong>: So think of directive as the instruction to the compiler that tells it whenever you come across this certain element or this CSS in the template, and you keep this kind of code and that code is in charge of the element and everything below that element in the DOM tree.</p>\n</blockquote>\n\n<p>A transcript of the entire episode is available at the link provided above.</p>\n\n<p>So, to directly answer your question: AngularJS is -very- opinionated and is a true MV* framework. However, you can still do all of the really cool stuff you know and love with jQuery inside of directives. It's not a matter of \"How do I do what I used to in jQuery?\" as much as it's a matter of \"How do I supplement AngularJS with all of the stuff I used to do in jQuery?\"</p>\n\n<p>It's really two very different states of mind.</p>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1438604,
      "name": "codevinsky",
      "reputation": 1093
    }
  },
  {
    "soID": 21451323,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/21451323",
    "title": null,
    "body": "<p>A simple solution with plain JavaScript and <a href=\"http://en.wikipedia.org/wiki/Regular_expression\" rel=\"nofollow\">regular expressions</a>:</p>\n\n<pre><code>alert(getQueryString(\"p2\"));\n\nfunction getQueryString (Param) {\n    return decodeURI(\"http://www.example.com/?p1=p11&amp;p2=p2222\".replace(new RegExp(\"^(?:.*[&amp;?]\" + encodeURI(Param).replace(/[.+*]/g, \"$&amp;\") + \"(?:=([^&amp;]*))?)?.*$\", \"i\"), \"$1\"));\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/QeLF3/\" rel=\"nofollow\">JsFiddle</a></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10925802,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/10925802",
    "title": null,
    "body": "<p>If you have Multiple radio buttons in single form then </p>\n\n<pre><code>var myRadio1 = $('input[name=radioButtonName1]');\nvar value1 = myRadio1.filter(':checked').val();\n\nvar myRadio2 = $('input[name=radioButtonName2]');\nvar value2 = myRadio2.filter(':checked').val();\n</code></pre>\n\n<p>This is working for me.</p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1441310,
      "name": "Ramesh",
      "reputation": 139
    }
  },
  {
    "soID": 43901236,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/43901236",
    "title": null,
    "body": "<p>You can use my DATE API given below for everyday use of date formatting along with getting current date, yesterday etc. \nHow to use \n  e.g. </p>\n\n<pre><code> var dt = new Date();  \n       /// ANY DATE YOU WANT --  dt = new Date(\"\"July 21, 1983 01:15:00\"\")\n\n       dateObj = dt.getFormattedDate();\n\n       alert( dateObj.isToday() );\n       alert( dateObj.todayDay() );\n       alert( dateObj.monthNameDayYear() );\n</code></pre>\n\n<hr>\n\n<pre><code>(function () {\n\n    fnDateProcessor = function () {\n        var that = this;\n\n        return {\n\n            yyyymmdd: function (separator) {\n                var fdate = this.formatDate(true, true) ,\n                    separator = separator ? separator : \"-\";\n                return fdate.year + separator + fdate.month + separator + fdate.day;\n            },\n\n            monthNameDayYear: function () {\n                var fdate = this.formatDate(true, true);\n                return fdate.monthName + \" \" + fdate.day + \", \" + fdate.year;\n            },\n\n            ddmmyyyy: function (separator) {\n                var fdate = this.formatDate(true, true) ,\n                    separator = separator ? separator : \"/\";\n                return fdate.day + separator + fdate.month + separator + fdate.year;\n            },\n\n            meridianTime: function () {\n                var fdate = this.formatDate();\n                return fdate.hour + \":\" + fdate.minute + \" \" + fdate.meridian;\n            },\n\n            monthDay: function (separator) {\n\n                var fdate = this.formatDate();\n                separator = checkSeparator(separator);\n                return fdate.monthName.substring(0, 3) + separator + fdate.day;\n\n            },\n\n            weekMonthDayYear: function () {\n                var fdate = this.formatDate();\n                //separator = checkSeparator(separator);\n\n                return fdate.weekDay + \" \" + fdate.monthName.substring(0, 3) +\n                    fdate.day + \" ,\" + fdate.year;\n            },\n\n            timeZoneInclusive: function () {\n\n                return new Date(that);\n            },\n\n            todayDay: function () { return new Date().getDate(); },\n            todayMonth: function () { return new Date().getMonth() + 1; },\n            dateDay: function () { return this.formatDate().day; },\n            dateMonth: function () { return this.formatDate().month; },\n            isToday: function () { return this.sameDate(new Date()); },\n            isYesterday: function () {\n                d = new Date(); d.setDate(d.getDate() - 1);\n                return this.sameDate(d);\n            },\n\n            formatDate: function () {\n                var zeroPaddedMnth = true, zeroPaddedDay = false,\n                    zeroPaddedHr = false, zeroPaddedMin = true;\n                // Possible to take Options arg that overide / merge to defaults\n\n                var monthNames = [\n                    \"January\", \"February\", \"March\",\n                    \"April\", \"May\", \"June\", \"July\",\n                    \"August\", \"September\", \"October\",\n                    \"November\", \"December\"\n                ];\n                var weekDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n                var day = getFormattedDay(that.getDate(), zeroPaddedDay);\n                var monthIndex = that.getMonth();\n                var month = getFormattedMonth(monthIndex + 1, zeroPaddedMnth);\n                var year = that.getFullYear();\n                var wkDay = that.getDay();\n                var hour = getFormattedHour(that.getHours(), zeroPaddedHr);\n                var minute = getFormattedMinute(that.getMinutes(), zeroPaddedMin);\n                var meridian = getMeridian(that.getHours());\n\n                return {\n                    \"day\": day, \"monthName\": monthNames[monthIndex], \"month\": month,\n                    \"weekDay\": weekDays[wkDay], \"year\": year, \"hour\": hour, \"minute\": minute,\n                    \"meridian\": meridian\n                };\n            },\n\n            compareDate: function (d2) {     /// validates if caller is less than argument                            \n                d2 = _isString(d2) ? new Date(d2) : d2;\n\n                return !this.sameDate(d2)\n                    &amp;&amp; typeof d2 != \"number\"\n                    ? that &lt; d2 : false;\n            },\n\n            sameDate: function (d) {\n                return that.getFullYear() === d.getFullYear()\n                    &amp;&amp; that.getDate() === d.getDate()\n                    &amp;&amp; that.getMonth() === d.getMonth();\n            },\n\n            dateAfter: function (separator) {\n                var fdate = this.formatDate();\n                var separator = separator ? separator : \"-\";\n                return fdate.year + separator + fdate.month + separator + (fdate.day + 1);\n            }\n\n        };\n\n    };\n\n\n    function _isString(obj) {\n        var toString = Object.prototype.toString;\n        return toString.call(obj) == '[object String]';\n    }\n\n    function checkSeparator(separator) {\n        // NOT GENERIC ... NEEDS REVISION\n        switch (separator) {\n            case \" \": sep = separator; break;\n            case \",\": sep = \" ,\"; break;\n            default:\n                sep = \" \"; break;\n        }\n\n        return sep;\n    }\n\n    function getFormattedHour(h, zeroPadded) {\n        h = h % 12;\n        h = h ? h : 12;    //  12 instead of 00\n        return zeroPadded ? addZero(h) : h;\n    }\n\n    function getFormattedMinute(m, zeroPadded) {\n\n        return zeroPadded ? addZero(m) : m;\n    }\n\n    function getFormattedDay(dd, zeroPadded) {\n\n        return zeroPadded ? addZero(dd) : dd;\n    }\n    function getFormattedMonth(mm, zeroPadded) {\n\n        return zeroPadded ? addZero(mm) : mm;\n    }\n\n    function getMeridian(hr) {\n\n        return hr &gt;= 12 ? 'PM' : 'AM';\n    }\n\n    function addZero(i) {\n        if (i &lt; 10) {\n            i = \"0\" + i;\n        }\n        return i;\n    }\n\n\n    Date.prototype.getFormattedDate = fnDateProcessor;\n\n} ());\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1442898,
      "name": "Yergalem",
      "reputation": 115
    }
  },
  {
    "soID": 10939637,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/10939637",
    "title": null,
    "body": "<p>Or rather than including at run time, use a script to concatenate prior to upload.</p>\n\n<p>I use <a href=\"https://github.com/sstephenson/sprockets\" rel=\"noreferrer\">Sprockets</a> (I don't know if there are others). You build your JavaScript code in separate files and include comments that are processed by the Sprockets engine as includes. For development you can include files sequentially, then for production to merge them...</p>\n\n<p>See also:</p>\n\n<ul>\n<li><em><a href=\"http://37signals.com/svn/posts/1587-introducing-sprockets-javascript-dependency-management-and-concatenation\" rel=\"noreferrer\">Introducing Sprockets: JavaScript dependency management and concatenation</a></em></li>\n</ul>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1443203,
      "name": "JMawer",
      "reputation": 139
    }
  },
  {
    "soID": 31502652,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/31502652",
    "title": null,
    "body": "<p>I wrote a different approach to debug Node.js code which is stable and is extremely simple. It is available at <a href=\"https://github.com/s-a/iron-node\" rel=\"nofollow noreferrer\">https://github.com/s-a/iron-node</a>.</p>\n\n<p><img src=\"https://s-a.github.io/iron-node/iron-node-demo.gif\" alt=\"Enter image description here\"></p>\n\n<p>An opensource cross-platform visual debugger.</p>\n\n<p>Installation:</p>\n\n<p><code>npm install iron-node -g;</code></p>\n\n<p>Debug:</p>\n\n<p><code>iron-node yourscript.js;</code></p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1444743,
      "name": "Stephan Ahlf",
      "reputation": 1178
    }
  },
  {
    "soID": 25339906,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/25339906",
    "title": null,
    "body": "<p>You can use moment.js: <a href=\"http://momentjs.com/\" rel=\"noreferrer\">http://momentjs.com/</a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var m = moment().format(\"DD/MM/YYYY\");\r\n\r\ndocument.write(m);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.14.1/moment.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 39,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1444748,
      "name": "Morad",
      "reputation": 1000
    }
  },
  {
    "soID": 13372097,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/13372097",
    "title": null,
    "body": "<p>On your click function, just add:</p>\n\n<pre><code>window.location.href = \"The URL where you want to redirect\";\n$('#id').click(function(){\n    window.location.href = \"http://www.google.com\";\n});\n</code></pre>\n",
    "score": 49,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1445754,
      "name": "Swaprks",
      "reputation": 1039
    }
  },
  {
    "soID": 41342735,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/41342735",
    "title": null,
    "body": "<p>This article clearly defines the difference between var, let and const</p>\n\n<blockquote>\n  <p><code>const</code> is a signal that the identifier won’t be reassigned.</p>\n  \n  <p><code>let</code>, is a signal that the variable may be reassigned, such as a\n  counter in a loop, or a value swap in an algorithm. It also signals\n  that the variable will be used only in the block it’s defined in,\n  which is not always the entire containing function.</p>\n  \n  <p><code>var</code> is now the weakest signal available when you define a variable\n  in JavaScript. The variable may or may not be reassigned, and the\n  variable may or may not be used for an entire function, or just for\n  the purpose of a block or loop.</p>\n</blockquote>\n\n<p><a href=\"https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75#.esmkpbg9b\" rel=\"nofollow noreferrer\">https://medium.com/javascript-scene/javascript-es6-var-let-or-const-ba58b8dcde75#.esmkpbg9b</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1453965,
      "name": "anandharshan",
      "reputation": 986
    }
  },
  {
    "soID": 26171511,
    "parentID": 18641899,
    "url": "https://stackoverflow.com/q/26171511",
    "title": null,
    "body": "<p>Found this useful explanation from <a href=\"http://ng-learn.org/2013/11/Bower-vs-npm/\">http://ng-learn.org/2013/11/Bower-vs-npm/</a></p>\n\n<blockquote>\n  <p>On one hand npm was created to install modules used in a node.js environment, or development tools built using node.js such Karma, lint, minifiers and so on. npm can install modules locally in a project ( by default in node_modules ) or globally to be used by multiple projects. In large projects the way to specify dependencies is by creating a file called package.json which contains a list of dependencies. That list is recognized by npm when you run npm install, which then downloads and installs them for you.</p>\n  \n  <p>On the other hand bower was created to manage your frontend dependencies. Libraries like jQuery, AngularJS, underscore, etc. Similar to npm it has a file in which you can specify a list of dependencies called bower.json. In this case your frontend dependencies are installed by running bower install which by default installs them in a folder called bower_components.</p>\n  \n  <p>As you can see, although they perform a similar task they are targeted to a very different set of libraries.</p>\n</blockquote>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1457688,
      "name": "Henry Neo",
      "reputation": 1936
    }
  },
  {
    "soID": 33928558,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/33928558",
    "title": null,
    "body": "<p>The following approach works in Chrome, Firefox, Internet Explorer and Edge, and in recent versions of Safari (Copy support was added in version 10 which was released Oct 2016).</p>\n\n<ul>\n<li>Create a textarea and set its contents to the text you want copied to the clipboard.</li>\n<li>Append the textarea to the DOM.</li>\n<li>Select the text in the textarea.</li>\n<li>Call document.execCommand(\"copy\")</li>\n<li>Remove the textarea from the dom.</li>\n</ul>\n\n<p>Note: you will not see the textarea, as it is added and removed within the same synchronous invocation of Javascript code.</p>\n\n<p>Some things to watch out for if you are implementing this yourself:</p>\n\n<ul>\n<li>For security reasons, this can only called from an event handler such as click (Just as with opening windows).</li>\n<li>IE will show a permission dialog the first time the clipboard is updated.</li>\n<li>IE, and Edge will scroll when the textarea is focused.</li>\n<li>execCommand() may throw in some cases.</li>\n<li>Newlines and tabs can get swallowed unless you use a textarea. (Most articles seem to recommend using a div)</li>\n<li>The textarea will be visible while the IE dialog is shown, you either need to hide it, or use the IE specific clipboardData api.</li>\n<li>In IE system administrators can disable the clipboard API.</li>\n</ul>\n\n<p>The function below should handle all of the following issues as cleanly as possible. Please leave a comment if you find any problems or have any suggestions for improving it.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>// Copies a string to the clipboard. Must be called from within an \n// event handler such as click. May return false if it failed, but\n// this is not always possible. Browser support for Chrome 43+, \n// Firefox 42+, Safari 10+, Edge and IE 10+.\n// IE: The clipboard feature may be disabled by an administrator. By\n// default a prompt is shown the first time the clipboard is \n// used (per session).\nfunction copyToClipboard(text) {\n    if (window.clipboardData &amp;&amp; window.clipboardData.setData) {\n        // IE specific code path to prevent textarea being shown while dialog is visible.\n        return clipboardData.setData(\"Text\", text); \n\n    } else if (document.queryCommandSupported &amp;&amp; document.queryCommandSupported(\"copy\")) {\n        var textarea = document.createElement(\"textarea\");\n        textarea.textContent = text;\n        textarea.style.position = \"fixed\";  // Prevent scrolling to bottom of page in MS Edge.\n        document.body.appendChild(textarea);\n        textarea.select();\n        try {\n            return document.execCommand(\"copy\");  // Security exception may be thrown by some browsers.\n        } catch (ex) {\n            console.warn(\"Copy to clipboard failed.\", ex);\n            return false;\n        } finally {\n            document.body.removeChild(textarea);\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://jsfiddle.net/fx6a6n6x/\">https://jsfiddle.net/fx6a6n6x/</a></p>\n",
    "score": 106,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1460491,
      "name": "Greg Lowe",
      "reputation": 4742
    }
  },
  {
    "soID": 44212447,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/44212447",
    "title": null,
    "body": "<p>Another solution is to execute code via sequential executor <a href=\"https://github.com/amaksr/nsynjs\" rel=\"noreferrer\">nsynjs</a>.</p>\n\n<h2>If underlying function is promisified</h2>\n\n<p>nsynjs will evaluate all promises sequentially, and put promise result into <code>data</code> property:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function synchronousCode() {\r\n\r\n    var getURL = function(url) {\r\n        return window.fetch(url).data.text().data;\r\n    };\r\n    \r\n    var url = 'https://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js';\r\n    console.log('received bytes:',getURL(url).length);\r\n    \r\n};\r\n\r\nnsynjs.run(synchronousCode,{},function(){\r\n    console.log('synchronousCode done');\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://rawgit.com/amaksr/nsynjs/master/nsynjs.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h2>If underlying function is not promisified</h2>\n\n<p>Step 1. Wrap function with callback into nsynjs-aware wrapper (if it has promisified version, you can skip this test):</p>\n\n<pre><code>var ajaxGet = function (ctx,url) {\n    var res = {};\n    var ex;\n    $.ajax(url)\n    .done(function (data) {\n        res.data = data;\n    })\n    .fail(function(e) {\n        ex = e;\n    })\n    .always(function() {\n        ctx.resume(ex);\n    });\n    return res;\n};\najaxGet.nsynjsHasCallback = true;\n</code></pre>\n\n<p>Step 2. Put synchronous logic into function:</p>\n\n<pre><code>function process() {\n    console.log('got data:', ajaxGet(nsynjsCtx, \"data/file1.json\").data);\n}\n</code></pre>\n\n<p>Step 3. Run function in synchronous manner via nnsynjs:</p>\n\n<pre><code>nsynjs.run(process,this,function () {\n    console.log(\"synchronous function finished\");\n});\n</code></pre>\n\n<p>Nsynjs will evaluate all operators and expressions step-by-step, pausing execution in case if result of some slow function is not ready.</p>\n\n<p>More examples here: <a href=\"https://github.com/amaksr/nsynjs/tree/master/examples\" rel=\"noreferrer\">https://github.com/amaksr/nsynjs/tree/master/examples</a></p>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1464130,
      "name": "amaksr",
      "reputation": 3654
    }
  },
  {
    "soID": 11773587,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/11773587",
    "title": null,
    "body": "<pre><code>// Uppercase first letter\nfunction ucfirst(field) {\n    field.value = field.value.substr(0, 1).toUpperCase() + field.value.substr(1);\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&lt;input type=\"text\" onKeyup=\"ucfirst(this)\" /&gt;\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1475686,
      "name": "Pnobuts",
      "reputation": 104
    }
  },
  {
    "soID": 40751300,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/40751300",
    "title": null,
    "body": "<p>You can add a simple <em>forEach</em> function to all objects, so you can automatically loop through any object:</p>\n\n<pre><code>Object.defineProperty(Object.prototype, 'forEach', {\n    value: function (func) {\n        for (var key in this) {\n            if (!this.hasOwnProperty(key)) {\n                // skip loop if the property is from prototype\n                continue;\n            }\n            var value = this[key];\n            func(key, value);\n        }\n    },\n    enumerable: false\n});\n</code></pre>\n\n<p>For those people who don't like the \"<em>for ... in</em>\"-method:</p>\n\n<pre><code>Object.defineProperty(Object.prototype, 'forEach', {\n    value: function (func) {\n        var arr = Object.keys(this);\n        for (var i = 0; i &lt; arr.length; i++) {\n            var key = arr[i];\n            func(key, this[key]);\n        }\n    },\n    enumerable: false\n});\n</code></pre>\n\n<p>Now, you can simple call:</p>\n\n<pre><code>p.forEach (function(key, value){\n    console.log (\"Key: \" + key);\n    console.log (\"Value: \" + value);\n});\n</code></pre>\n\n<p>If you don't want to get conflicts with other forEach-Methods you can name it with your unique name.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1482247,
      "name": "Biber",
      "reputation": 536
    }
  },
  {
    "soID": 23050534,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/23050534",
    "title": null,
    "body": "<p>Quick, easy, and fast:</p>\n\n<p><strong>The function:</strong></p>\n\n<pre><code>function getUrlVar() {\n    var result = {};\n    var location = window.location.href.split('#');\n    var parts = location[0].replace(/[?&amp;]+([^=&amp;]+)=([^&amp;]*)/gi, function(m,key,value) {\n        result [key] = value;\n    });\n    return result;\n}\n</code></pre>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>var varRequest = getUrlVar()[\"theUrlVarName\"];\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11690095,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/11690095",
    "title": null,
    "body": "<blockquote>\n  <p><strong>Standard \"vanilla\" JavaScript way to redirect a page:</strong></p>\n  \n  <p><strong><code>window.location.href = 'newPage.html';</code></strong></p>\n</blockquote>\n\n<hr>\n\n<p><strong>If you are here because you are <em>losing</em> HTTP_REFERER when redirecting, keep reading:</strong></p>\n\n<hr>\n\n<p>The following section is for those using <code>HTTP_REFERER</code> as one of many secure measures (although it isn't a great protective measure). If you're using <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_8\">Internet&nbsp;Explorer&nbsp;8</a> or lower, these variables get lost when using any form of JavaScript page redirection (location.href,  etc.).</p>\n\n<blockquote>\n  <p>Below we are going to implement an alternative for <strong>IE8 &amp; lower</strong> so that we don't lose HTTP_REFERER. Otherwise you can almost always simply use <code>window.location.href</code>.</p>\n</blockquote>\n\n<p>Testing against <code>HTTP_REFERER</code> (URL pasting, session, etc.) <em>can</em> be helpful in telling whether a request is legitimate.\n<em>(<strong>Note:</strong> there are also ways to work-around / spoof these referrers, as noted by droop's link in the comments)</em></p>\n\n<hr>\n\n<p>Simple cross-browser testing solution (fallback to window.location.href for Internet&nbsp;Explorer&nbsp;9+ and all other browsers)</p>\n\n<p><strong>Usage: <code>redirect('anotherpage.aspx');</code></strong></p>\n\n<pre><code>function redirect (url) {\n    var ua        = navigator.userAgent.toLowerCase(),\n        isIE      = ua.indexOf('msie') !== -1,\n        version   = parseInt(ua.substr(4, 2), 10);\n\n    // Internet Explorer 8 and lower\n    if (isIE &amp;&amp; version &lt; 9) {\n        var link = document.createElement('a');\n        link.href = url;\n        document.body.appendChild(link);\n        link.click();\n    }\n\n    // All other browsers can use the standard window.location.href (they don't lose HTTP_REFERER like Internet Explorer 8 &amp; lower does)\n    else { \n        window.location.href = url; \n    }\n}\n</code></pre>\n",
    "score": 391,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1492009,
      "name": "Mark Pieszak",
      "reputation": 20563
    }
  },
  {
    "soID": 20989617,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/20989617",
    "title": null,
    "body": "<p>In modern browsers (and some legacy browsers), you can do</p>\n\n<pre><code>Array.isArray(obj)\n</code></pre>\n\n<p>(<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\" rel=\"noreferrer\">Supported by</a> Chrome 5, Firefox 4.0, IE 9, Opera 10.5 and Safari 5)</p>\n\n<p>If you need to support older versions of IE, you can use <a href=\"https://github.com/es-shims/es5-shim\" rel=\"noreferrer\">es5-shim</a> to polyfill Array.isArray; or add the following</p>\n\n<pre><code># only implement if no native implementation is available\nif (typeof Array.isArray === 'undefined') {\n  Array.isArray = function(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  }\n};\n</code></pre>\n\n<p>If you use jQuery you can use <code>jQuery.isArray(obj)</code> or <code>$.isArray(obj)</code>. If you use underscore you can use <code>_.isArray(obj)</code></p>\n\n<p>If you don't need to detect arrays created in different frames you can also just use <code>instanceof</code></p>\n\n<pre><code>obj instanceof Array\n</code></pre>\n\n<hr>\n\n<p><strong>Note</strong>: the <code>arguments</code> keyword that can be used to access the argument of a function isn't an Array, even though it (usually) behaves like one:</p>\n\n<pre><code>var func = function() {\n  console.log(arguments)        // [1, 2, 3]\n  console.log(arguments.length) // 3\n  console.log(Array.isArray(arguments)) // false !!!\n  console.log(arguments.slice)  // undefined (Array.prototype methods not available)\n  console.log([3,4,5].slice)    // function slice() { [native code] } \n}\nfunc(1, 2, 3)\n</code></pre>\n",
    "score": 46,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1494793,
      "name": "Fela Winkelmolen",
      "reputation": 5063
    }
  },
  {
    "soID": 18165006,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/18165006",
    "title": null,
    "body": "<p>Use this:</p>\n\n<pre><code>value = $('input[name=button-name]:checked').val();\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1495875,
      "name": "jeswin",
      "reputation": 382
    }
  },
  {
    "soID": 18173778,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/18173778",
    "title": null,
    "body": "<h1>for (var s of myStringArray) {</h1>\n\n<p>(Directly answering your question: now you can!)</p>\n\n<p>Most other answers are right, but they do not mention (as of this writing) that <strong><em>ECMA Script <strike>&nbsp;6&nbsp;</strike> 2015</em></strong> is bringing a new mechanism for doing iteration, the <strong><code>for..of</code></strong> loop. </p>\n\n<p>This new syntax is the most elegant way to iterate an array in javascript (as long you don't need the iteration index), but it is not yet widely supported by the browsers. </p>\n\n<p>It currently works with Firefox 13+, Chrome 37+ and it does not natively work with other browsers (see browser compatibility below). Luckily we have JS compilers (such as <a href=\"https://babeljs.io/\" rel=\"noreferrer\">Babel</a>) that allow us to use next-generation features today.</p>\n\n<p>It also works on Node (I tested it on version 0.12.0).</p>\n\n<p><strong>Iterating an array</strong></p>\n\n<pre><code>// You could also use \"let\" instead of \"var\" for block scope.\nfor (var letter of [\"a\", \"b\", \"c\"]) { \n   console.log(letter); \n}\n</code></pre>\n\n<p><strong>Iterating an array of objects</strong></p>\n\n<pre><code>var band = [\n  {firstName : 'John', lastName: 'Lennon'}, \n  {firstName : 'Paul', lastName: 'McCartney'}\n];\n\nfor(var member of band){\n  console.log(member.firstName + ' ' + member.lastName); \n}\n</code></pre>\n\n<p><strong>Iterating a generator:</strong></p>\n\n<p><em>(example extracted from <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\" rel=\"noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of</a>)</em></p>\n\n<pre><code>function* fibonacci() { // a generator function\n  let [prev, curr] = [1, 1];\n  while (true) {\n    [prev, curr] = [curr, prev + curr];\n    yield curr;\n  }\n}\n\nfor (let n of fibonacci()) {\n  console.log(n);\n  // truncate the sequence at 1000\n  if (n &gt;= 1000) {\n    break;\n  }\n}\n</code></pre>\n\n<hr>\n\n<p><em>Compatibility table:</em>\n<a href=\"http://kangax.github.io/es5-compat-table/es6/\" rel=\"noreferrer\">http://kangax.github.io/es5-compat-table/es6/#For..of loops</a></p>\n\n<p><em>Spec:</em> <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:iterators\" rel=\"noreferrer\">http://wiki.ecmascript.org/doku.php?id=harmony:iterators</a></p>\n\n<h1>}</h1>\n",
    "score": 74,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1497729,
      "name": "Marlon Bernardes",
      "reputation": 5351
    }
  },
  {
    "soID": 17024762,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/17024762",
    "title": null,
    "body": "<pre><code>if($(\"#checkkBoxId\").is(':checked')){\n  alert(\"Checked=true\");\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>if($(\"#checkkBoxId\").attr('checked') == true){\n  alert(\"checked=true\");\n}\n</code></pre>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19802593,
    "parentID": 1279957,
    "url": "https://stackoverflow.com/q/19802593",
    "title": null,
    "body": "<p>my solution:</p>\n\n<p>MOVE:</p>\n\n<pre><code>jQuery(\"#NodesToMove\").detach().appendTo('#DestinationContainerNode')\n</code></pre>\n\n<p>COPY:</p>\n\n<pre><code>jQuery(\"#NodesToMove\").appendTo('#DestinationContainerNode')\n</code></pre>\n\n<p>Note the usage of .detach(). When copying, be careful that you are not duplicating IDs.</p>\n",
    "score": 655,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1502613,
      "name": "Alejandro Illecas",
      "reputation": 6811
    }
  },
  {
    "soID": 11347714,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/11347714",
    "title": null,
    "body": "<p>I found the following solution:</p>\n\n<p>On key down handler creates \"pre\" tag. We set the content to copy to this tag, then make a selection on this tag and return true in handler. This calls standard handler of chrome and copies selected text.</p>\n\n<p>And if you need you may be set the timeout for function for restoring previous selection. My implementation on Mootools:</p>\n\n<pre><code>   function EnybyClipboard() {\n     this.saveSelection = false;\n     this.callback = false;\n     this.pastedText = false;\n\n     this.restoreSelection = function() {\n       if (this.saveSelection) {\n         window.getSelection().removeAllRanges();\n         for (var i = 0; i &lt; this.saveSelection.length; i++) {\n           window.getSelection().addRange(this.saveSelection[i]);\n         }\n         this.saveSelection = false;\n       }\n     };\n\n     this.copyText = function(text) {\n       var div = $('special_copy');\n       if (!div) {\n         div = new Element('pre', {\n           'id': 'special_copy',\n           'style': 'opacity: 0;position: absolute;top: -10000px;right: 0;'\n         });\n         div.injectInside(document.body);\n       }\n       div.set('text', text);\n       if (document.createRange) {\n         var rng = document.createRange();\n         rng.selectNodeContents(div);\n         this.saveSelection = [];\n         var selection = window.getSelection();\n         for (var i = 0; i &lt; selection.rangeCount; i++) {\n           this.saveSelection[i] = selection.getRangeAt(i);\n         }\n         window.getSelection().removeAllRanges();\n         window.getSelection().addRange(rng);\n         setTimeout(this.restoreSelection.bind(this), 100);\n       } else return alert('Copy not work. :(');\n     };\n\n     this.getPastedText = function() {\n       if (!this.pastedText) alert('Nothing to paste. :(');\n       return this.pastedText;\n     };\n\n     this.pasteText = function(callback) {\n       var div = $('special_paste');\n       if (!div) {\n         div = new Element('textarea', {\n           'id': 'special_paste',\n           'style': 'opacity: 0;position: absolute;top: -10000px;right: 0;'\n         });\n         div.injectInside(document.body);\n         div.addEvent('keyup', function() {\n           if (this.callback) {\n             this.pastedText = $('special_paste').get('value');\n             this.callback.call(null, this.pastedText);\n             this.callback = false;\n             this.pastedText = false;\n             setTimeout(this.restoreSelection.bind(this), 100);\n           }\n         }.bind(this));\n       }\n       div.set('value', '');\n       if (document.createRange) {\n         var rng = document.createRange();\n         rng.selectNodeContents(div);\n         this.saveSelection = [];\n         var selection = window.getSelection();\n         for (var i = 0; i &lt; selection.rangeCount; i++) {\n           this.saveSelection[i] = selection.getRangeAt(i);\n         }\n         window.getSelection().removeAllRanges();\n         window.getSelection().addRange(rng);\n         div.focus();\n         this.callback = callback;\n       } else return alert('Fail to paste. :(');\n     };\n   }\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>enyby_clip = new EnybyClipboard(); //init \n\nenyby_clip.copyText('some_text'); // place this in CTRL+C handler and return true;\n\nenyby_clip.pasteText(function callback(pasted_text) {\n        alert(pasted_text);\n}); // place this in CTRL+V handler and return true;\n</code></pre>\n\n<p>On paste it creates textarea and works the same way.</p>\n\n<p>PS may be this solution can be used for creating fully cross-browser solution without flash. Its works in FF and Chrome.</p>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1504248,
      "name": "Enyby",
      "reputation": 1531
    }
  },
  {
    "soID": 15558082,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/15558082",
    "title": null,
    "body": "<p>I came up with this very jimmy rigged method of a multi lined string. Since converting a function into a string also returns any comments inside the function you can use the comments as your string using a multilined comment /**/. You just have to trim off the ends and you have your string.</p>\n\n<pre><code>var myString = function(){/*\n    This is some\n    awesome multi-lined\n    string using a comment \n    inside a function \n    returned as a string.\n    Enjoy the jimmy rigged code.\n*/}.toString().slice(14,-3)\n\nalert(myString)\n</code></pre>\n",
    "score": 103,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1507460,
      "name": "Luke",
      "reputation": 1047
    }
  },
  {
    "soID": 31604044,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/31604044",
    "title": null,
    "body": "<p>If your intention to load the JavaScript file is <strong>using the functions from the imported/included file</strong>, you can also define a global object and set the functions as object items. For instance:</p>\n\n<h3>global.js</h3>\n\n<pre><code>A = {};\n</code></pre>\n\n<h3>file1.js</h3>\n\n<pre><code>A.func1 = function() {\n  console.log(\"func1\");\n}\n</code></pre>\n\n<h3>file2.js</h3>\n\n<pre><code>A.func2 = function() {\n  console.log(\"func2\");\n}\n</code></pre>\n\n<h3>main.js</h3>\n\n<pre><code>A.func1();\nA.func2();\n</code></pre>\n\n<p>You just need to be careful when you are including scripts in an HTML file. The order should be as in below:</p>\n\n<pre><code>&lt;head&gt;\n  &lt;script type=\"text/javascript\" src=\"global.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"file1.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"file2.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"main.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1507556,
      "name": "Adem İlhan",
      "reputation": 631
    }
  },
  {
    "soID": 20532013,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/20532013",
    "title": null,
    "body": "<p>In case you are interested in the memory allocation, you may compare each approach using something like <a href=\"http://jsfiddle.net/k9KGU/\">this jsfiddle</a> in conjunction with chrome dev tools' timeline tab. You will want to use the trash bin icon at the bottom to force a garbage collection after 'clearing' the array. This should give you a more definite answer for the browser of your choice. A lot of answers here are old and I wouldn't rely on them but rather test as in @tanguy_k's answer above.</p>\n\n<p><em>(for an intro to the aforementioned tab you can check out <a href=\"http://addyosmani.com/blog/taming-the-unicorn-easing-javascript-memory-profiling-in-devtools/\">here</a>)</em></p>\n\n<p>Stackoverflow forces me to copy the jsfiddle so here it is:</p>\n\n<pre><code>&lt;html&gt;\n&lt;script&gt;\nvar size = 1000*100\nwindow.onload = function() {\n  document.getElementById(\"quantifier\").value = size\n}\n\nfunction scaffold()\n{\n  console.log(\"processing Scaffold...\");\n  a = new Array\n}\nfunction start()\n{\n  size = document.getElementById(\"quantifier\").value\n  console.log(\"Starting... quantifier is \" + size);\n  console.log(\"starting test\")\n  for (i=0; i&lt;size; i++){\n    a[i]=\"something\"\n  }\n  console.log(\"done...\")\n}\n\nfunction tearDown()\n{\n  console.log(\"processing teardown\");\n  a.length=0\n}\n\n&lt;/script&gt;\n&lt;body&gt;\n    &lt;span style=\"color:green;\"&gt;Quantifier:&lt;/span&gt;\n    &lt;input id=\"quantifier\" style=\"color:green;\" type=\"text\"&gt;&lt;/input&gt;\n    &lt;button onclick=\"scaffold()\"&gt;Scaffold&lt;/button&gt;\n    &lt;button onclick=\"start()\"&gt;Start&lt;/button&gt;\n    &lt;button onclick=\"tearDown()\"&gt;Clean&lt;/button&gt;\n    &lt;br/&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>And you should take note that it may depend on the type of the array elements, as javascript manages strings differently than other primitive types, not to mention arrays of objects. The type may affect what happens.</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1509695,
      "name": "matanster",
      "reputation": 4740
    }
  },
  {
    "soID": 22223027,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/22223027",
    "title": null,
    "body": "<p>Calling typeof null returns a value of “object”, as the special value null is considered to be an empty object reference. Safari through version 5 and Chrome through version 7 have a quirk where calling typeof on a regular expression returns “function” while all other browsers return “object”.</p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1511639,
      "name": "Jones Agyemang",
      "reputation": 553
    }
  },
  {
    "soID": 11540723,
    "parentID": 1414365,
    "url": "https://stackoverflow.com/q/11540723",
    "title": null,
    "body": "<p>Just for the sake of new conventions &amp;&amp; making it adaptable going forward (unless things change drastically with ECMA6(????):</p>\n\n<pre><code>$(document).on('event_name', '#your_id', function() {\n    $(this).removeAttr('disabled');\n});\n</code></pre>\n\n<p>and</p>\n\n<pre><code>$(document).off('event_name', '#your_id', function() {\n    $(this).attr('disabled','disabled');   \n});\n</code></pre>\n",
    "score": 41,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1521182,
      "name": "geekbuntu",
      "reputation": 591
    }
  },
  {
    "soID": 32590087,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/32590087",
    "title": null,
    "body": "<p>A lot of great answers here, but I'd like to add my view (based on how my approach evolved)</p>\n\n<h2>Debug Logs</h2>\n\n<p>Let's face it, we all love a good <code>console.log('Uh oh, if you reached here, you better run.')</code> and sometimes that works great, so if you're reticent to move too far away from it at least add some bling to your logs with <a href=\"https://www.npmjs.com/package/debug\" rel=\"noreferrer\">Visionmedia's debug</a>. </p>\n\n<h2>Interactive Debugging</h2>\n\n<p>As handy as console logging can be, to debug professionally you need to roll up your sleeves and get stuck in. Set breakpoints, step through your code, inspect scopes and variables to see what's causing that weird behaviour. As others have mentioned, <a href=\"https://www.npmjs.com/package/node-inspector\" rel=\"noreferrer\">node-inspector</a> really is the bees-knees. It does everything you can do with the built-in debugger, but using that familiar Chrome DevTools interface.\nIf, like me, you use <strong>Webstorm</strong>, then <a href=\"https://www.jetbrains.com/webstorm/help/running-and-debugging-node-js.html#d186741e208\" rel=\"noreferrer\">here</a> is a handy guide to debugging from there.</p>\n\n<h2>Stack Traces</h2>\n\n<p>By default, we can't trace a series of operations across different cycles of the event loop (ticks). To get around this have a look at <a href=\"https://www.npmjs.com/package/longjohn\" rel=\"noreferrer\">longjohn</a> (but not in production!).</p>\n\n<h2>Memory Leaks</h2>\n\n<p>With Node.js we can have a server process expected to stay up for considerable time. What do you do if you think it has sprung some nasty leaks? Use <a href=\"https://www.npmjs.com/package/heapdump\" rel=\"noreferrer\">heapdump</a> and Chrome DevTools to compare some snapshots and see what's changing.</p>\n\n<hr>\n\n<p>For some useful articles, check out</p>\n\n<ul>\n<li><a href=\"https://blog.risingstack.com/node-hero-node-js-debugging-tutorial/\" rel=\"noreferrer\">RisingStack - Debugging Node.js Applications</a></li>\n<li><a href=\"http://www.nearform.com/nodecrunch/working-node-need-know/#more-3125\" rel=\"noreferrer\">Excellent article by David Mark Clements of nearForm</a></li>\n</ul>\n\n<p>If you feel like watching a video(s) then</p>\n\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=O1YP8QP9gLA\" rel=\"noreferrer\">Netflix JS Talks - Debugging Node.js in Production</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=xaKU6VRmdag\" rel=\"noreferrer\">Interesting video</a> from <a href=\"https://nodejs.org/en/about/working-groups/#tracing\" rel=\"noreferrer\">the tracing working group</a> on tracing and debugging node.js</li>\n<li><a href=\"https://www.youtube.com/watch?v=03qGA-GJXjI\" rel=\"noreferrer\">Really informative 15-minute video on node-inspector</a></li>\n</ul>\n\n<p>Whatever path you choose, just be sure you understand how you are debugging</p>\n\n<p><a href=\"https://i.stack.imgur.com/hBTOr.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/hBTOr.png\" alt=\"enter image description here\"></a></p>\n\n<blockquote>\n  <p>It is a painful thing<br>\n  To look at your own trouble and know<br>\n  That you yourself and no one else has made it  </p>\n  \n  <p><em>Sophocles, Ajax</em></p>\n</blockquote>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1521933,
      "name": "Philip O'Brien",
      "reputation": 1258
    }
  },
  {
    "soID": 11522053,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/11522053",
    "title": null,
    "body": "<pre><code> $(\".Stat\").click(function () {\n     var rdbVal1 = $(\"input[name$=S]:checked\").val();\n }\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1531709,
      "name": "Swadesh Bhattacharya",
      "reputation": 99
    }
  },
  {
    "soID": 11524251,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/11524251",
    "title": null,
    "body": "<p>In CSS:</p>\n\n<pre><code>p:first-letter {\n    text-transform:capitalize;\n}\n</code></pre>\n",
    "score": 313,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1532041,
      "name": "sam6ber",
      "reputation": 3331
    }
  },
  {
    "soID": 18775368,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/18775368",
    "title": null,
    "body": "<p>Three options:</p>\n\n<ol>\n<li>If <code>script</code> is the last tag of the body, the DOM would be ready before script tag executes</li>\n<li>When the DOM is ready, \"readyState\" will change to \"complete\"</li>\n<li>Put everything under 'DOMContentLoaded' event listener</li>\n</ol>\n\n<p><strong><em>onreadystatechange</em></strong></p>\n\n<pre><code>  document.onreadystatechange = function () {\n     if (document.readyState == \"complete\") {\n     // document is ready. Do your stuff here\n   }\n }\n</code></pre>\n\n<p>Source: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.readyState\" rel=\"noreferrer\">MDN</a></p>\n\n<p><strong><em>DOMContentLoaded</em></strong></p>\n\n<pre><code>document.addEventListener('DOMContentLoaded', function() {\n   console.log('document is ready. I can sleep now');\n});\n</code></pre>\n\n<p><strong><em>Concerned about stone age browsers:</em></strong>\nGo to the jQuery source code and use the <code>ready</code> function. In that case you are not parsing+executing the whole library you're are doing only a very small part of it.</p>\n",
    "score": 160,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1535443,
      "name": "KhanSharp",
      "reputation": 6211
    }
  },
  {
    "soID": 34816613,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/34816613",
    "title": null,
    "body": "<p>From <a href=\"https://stackoverflow.com/q/34815656/1541563\">this question</a>, I came up with an alternate way to access the currently selected <code>input</code> when you're within a <code>click</code> event for its respective label. The reason why is because the newly selected <code>input</code> isn't updated until after its <code>label</code>'s click event.</p>\n\n<p><strong>TL;DR</strong></p>\n\n<pre><code>$('label').click(function() {\n  var selected = $('#' + $(this).attr('for')).val();\n\n  ...\n});\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(function() {\r\n  // this outright does not work properly as explained above\r\n  $('#reported label').click(function() {\r\n    var query = $('input[name=\"filter\"]:checked').val();\r\n    var time = (new Date()).toString();\r\n\r\n    $('.query[data-method=\"click event\"]').html(query + ' at ' + time);\r\n  });\r\n\r\n  // this works, but fails to update when same label is clicked consecutively\r\n  $('#reported input[name=\"filter\"]').on('change', function() {\r\n    var query = $('input[name=\"filter\"]:checked').val();\r\n    var time = (new Date()).toString();\r\n\r\n    $('.query[data-method=\"change event\"]').html(query + ' at ' + time);\r\n  });\r\n\r\n  // here is the solution I came up with\r\n  $('#reported label').click(function() {\r\n    var query = $('#' + $(this).attr('for')).val();\r\n    var time = (new Date()).toString();\r\n\r\n    $('.query[data-method=\"click event with this\"]').html(query + ' at ' + time);\r\n  });\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>input[name=\"filter\"] {\r\n  display: none;\r\n}\r\n#reported label {\r\n  background-color: #ccc;\r\n  padding: 5px;\r\n  margin: 5px;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n.query {\r\n  padding: 5px;\r\n  margin: 5px;\r\n}\r\n.query:before {\r\n  content: \"on \" attr(data-method)\": \";\r\n}\r\n[data-method=\"click event\"] {\r\n  color: red;\r\n}\r\n[data-method=\"change event\"] {\r\n  color: #cc0;\r\n}\r\n[data-method=\"click event with this\"] {\r\n  color: green;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;form id=\"reported\"&gt;\r\n  &lt;input type=\"radio\" name=\"filter\" id=\"question\" value=\"questions\" checked=\"checked\"&gt;\r\n  &lt;label for=\"question\"&gt;Questions&lt;/label&gt;\r\n\r\n  &lt;input type=\"radio\" name=\"filter\" id=\"answer\" value=\"answers\"&gt;\r\n  &lt;label for=\"answer\"&gt;Answers&lt;/label&gt;\r\n\r\n  &lt;input type=\"radio\" name=\"filter\" id=\"comment\" value=\"comments\"&gt;\r\n  &lt;label for=\"comment\"&gt;Comments&lt;/label&gt;\r\n\r\n  &lt;input type=\"radio\" name=\"filter\" id=\"user\" value=\"users\"&gt;\r\n  &lt;label for=\"user\"&gt;Users&lt;/label&gt;\r\n\r\n  &lt;input type=\"radio\" name=\"filter\" id=\"company\" value=\"companies\"&gt;\r\n  &lt;label for=\"company\"&gt;Companies&lt;/label&gt;\r\n\r\n  &lt;div class=\"query\" data-method=\"click event\"&gt;&lt;/div&gt;\r\n  &lt;div class=\"query\" data-method=\"change event\"&gt;&lt;/div&gt;\r\n  &lt;div class=\"query\" data-method=\"click event with this\"&gt;&lt;/div&gt;\r\n&lt;/form&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1541563,
      "name": "Patrick Roberts",
      "reputation": 10553
    }
  },
  {
    "soID": 21204670,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/21204670",
    "title": null,
    "body": "<p>You can use <code>+=</code> to concatenate your string, seems like no one answered that, which will be readable, and also neat... something like this</p>\n\n<pre><code>var hello = 'hello' +\n            'world' +\n            'blah';\n</code></pre>\n\n<p>can be also written as</p>\n\n<pre><code>var hello = 'hello';\n    hello += ' world';\n    hello += ' blah';\n\nconsole.log(hello);\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1542290,
      "name": "Mr. Alien",
      "reputation": 102045
    }
  },
  {
    "soID": 11637397,
    "parentID": 1279957,
    "url": "https://stackoverflow.com/q/11637397",
    "title": null,
    "body": "<p>I just used:</p>\n\n<pre><code>$('#source').prependTo('#destination');\n</code></pre>\n\n<p>Which I grabbed from <a href=\"http://www.elated.com/articles/jquery-removing-replacing-moving-elements/\" rel=\"noreferrer\">here</a>.</p>\n",
    "score": 96,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1543335,
      "name": "kjc26ster",
      "reputation": 1064
    }
  },
  {
    "soID": 11621004,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/11621004",
    "title": null,
    "body": "<pre><code>function clone(src, deep) {\n\n    var toString = Object.prototype.toString;\n    if(!src &amp;&amp; typeof src != \"object\"){\n        //any non-object ( Boolean, String, Number ), null, undefined, NaN\n        return src;\n    }\n\n    //Honor native/custom clone methods\n    if(src.clone &amp;&amp; toString.call(src.clone) == \"[object Function]\"){\n        return src.clone(deep);\n    }\n\n    //DOM Elements\n    if(src.nodeType &amp;&amp; toString.call(src.cloneNode) == \"[object Function]\"){\n        return src.cloneNode(deep);\n    }\n\n    //Date\n    if(toString.call(src) == \"[object Date]\"){\n        return new Date(src.getTime());\n    }\n\n    //RegExp\n    if(toString.call(src) == \"[object RegExp]\"){\n        return new RegExp(src);\n    }\n\n    //Function\n    if(toString.call(src) == \"[object Function]\"){\n        //Wrap in another method to make sure == is not true;\n        //Note: Huge performance issue due to closures, comment this :)\n        return (function(){\n            src.apply(this, arguments);\n        });\n\n    }\n\n    var ret, index;\n    //Array\n    if(toString.call(src) == \"[object Array]\"){\n        //[].slice(0) would soft clone\n        ret = src.slice();\n        if(deep){\n            index = ret.length;\n            while(index--){\n                ret[index] = clone(ret[index], true);\n            }\n        }\n    }\n    //Object\n    else {\n        ret = src.constructor ? new src.constructor() : {};\n        for (var prop in src) {\n            ret[prop] = deep\n                ? clone(src[prop], true)\n                : src[prop];\n        }\n    }\n\n    return ret;\n};\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19602549,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/19602549",
    "title": null,
    "body": "<p>This script will add a JavaScript file to the top of any other <code>&lt;script&gt;</code> tag:</p>\n\n<pre><code>(function () {\n    var li = document.createElement('script'); \n    li.type = 'text/javascript'; \n    li.src= \"http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"; \n    li.async=true; \n    var s = document.getElementsByTagName('script')[0]; \n    s.parentNode.insertBefore(li, s);\n})();\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1548301,
      "name": "Vicky Gonsalves",
      "reputation": 7347
    }
  },
  {
    "soID": 28728643,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/28728643",
    "title": null,
    "body": "<p>Easiest way:</p>\n\n<p><code>+num.toFixed(2)</code></p>\n\n<p>It converts it to a string, and then back into an integer / float.</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1555312,
      "name": "Edmund",
      "reputation": 8058
    }
  },
  {
    "soID": 11832965,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/11832965",
    "title": null,
    "body": "<p>Consider <code>.toFixed()</code> and <code>.toPrecision()</code>:</p>\n\n<p><a href=\"http://www.javascriptkit.com/javatutors/formatnumber.shtml\">http://www.javascriptkit.com/javatutors/formatnumber.shtml</a></p>\n",
    "score": 44,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1556169,
      "name": "AceCorban",
      "reputation": 1237
    }
  },
  {
    "soID": 21862907,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/21862907",
    "title": null,
    "body": "<p>The simplest solution is create a JavaScript function and call it for the Ajax <code>success</code> callback.</p>\n\n<pre><code>function callServerAsync(){\n    $.ajax({\n        url: '...',\n        success: function(response) {\n\n            successCallback(response);\n        }\n    });\n}\n\nfunction successCallback(responseObj){\n    // Do something like read the response and show data\n    alert(JSON.stringify(responseObj)); // Only applicable to JSON response\n}\n\nfunction foo(callback) {\n\n    $.ajax({\n        url: '...',\n        success: function(response) {\n           return callback(null, response);\n        }\n    });\n}\n\nvar result = foo(function(err, result){\n          if (!err)\n           console.log(result);    \n}); \n</code></pre>\n",
    "score": 132,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1560518,
      "name": "Hemant Bavle",
      "reputation": 1707
    }
  },
  {
    "soID": 22024306,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/22024306",
    "title": null,
    "body": "<p>It is useful at times for one object to borrow the function of another object, meaning that the borrowing object simply executes the lent function as if it were its own.  </p>\n\n<p><strong>A small code example:</strong></p>\n\n<pre><code>var friend = {\n    car: false,\n    lendCar: function ( canLend ){\n      this.car = canLend;\n }\n\n}; \n\nvar me = {\n    car: false,\n    gotCar: function(){\n      return this.car === true;\n  }\n};\n\nconsole.log(me.gotCar()); // false\n\nfriend.lendCar.call(me, true); \n\nconsole.log(me.gotCar()); // true\n\nfriend.lendCar.apply(me, [false]);\n\nconsole.log(me.gotCar()); // false\n</code></pre>\n\n<p>These methods are very useful for giving objects temporary functionality.</p>\n",
    "score": 29,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1566315,
      "name": "tjacks3",
      "reputation": 390
    }
  },
  {
    "soID": 11833028,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/11833028",
    "title": null,
    "body": "<p>Here is a simple way to do it:</p>\n\n<pre><code>Math.round(value * 100) / 100\n</code></pre>\n\n<p>You might want to go ahead and make a separate function to do it for you though:</p>\n\n<pre><code>function roundToTwo(value) {\n    return(Math.round(value * 100) / 100);\n}\n</code></pre>\n\n<p>Then you would simply pass in the value.</p>\n\n<p>You could enhance it to round to any arbitrary number of decimals by adding a second parameter.</p>\n\n<pre><code>function myRound(value, places) {\n    var multiplier = Math.pow(10, places);\n\n    return (Math.round(value * multiplier) / multiplier);\n}\n</code></pre>\n",
    "score": 36,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1566501,
      "name": "JayDM",
      "reputation": 772
    }
  },
  {
    "soID": 25519985,
    "parentID": 14994391,
    "url": "https://stackoverflow.com/q/25519985",
    "title": null,
    "body": "<p>Actually, if you're using AngularJS, you don't need jQuery anymore. AngularJS itself has the binding and directive, which is a very good \"replacement\" for most things you can do with jQuery.</p>\n\n<p>I usually develop mobile applications using AngularJS and <a href=\"http://en.wikipedia.org/wiki/PhoneGap\" rel=\"noreferrer\">Cordova</a>. The ONLY thing from jQuery I needed is the Selector.</p>\n\n<p>By googling, I see that there is a standalone jQuery selector module out there. It's Sizzle. </p>\n\n<p>And I decided to make a tiny code snippet that help me quickly start a website using AngularJS with the power of jQuery Selector (using Sizzle).</p>\n\n<p>I shared my code here: <a href=\"https://github.com/huytd/Sizzular\" rel=\"noreferrer\">https://github.com/huytd/Sizzular</a></p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1567340,
      "name": "Huy Tran",
      "reputation": 536
    }
  },
  {
    "soID": 38036912,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/38036912",
    "title": null,
    "body": "<p>One more option:</p>\n\n<pre><code>var someArray = [...];\n\nfunction generateSortFn(prop, reverse) {\n    return function (a, b) {\n        if (a[prop] &lt; b[prop]) return reverse ? 1 : -1;\n        if (a[prop] &gt; b[prop]) return reverse ? -1 : 1;\n        return 0;\n    };\n}\n\nsomeArray.sort(generateSortFn('name', true));\n</code></pre>\n\n<p>sorts ascending by default.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1571527,
      "name": "Ravshan Samandarov",
      "reputation": 487
    }
  },
  {
    "soID": 11832950,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/11832950",
    "title": null,
    "body": "<p>Use <code>Math.round(num * 100) / 100</code></p>\n",
    "score": 1752,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1575238,
      "name": "ustasb",
      "reputation": 23034
    }
  },
  {
    "soID": 32137302,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/32137302",
    "title": null,
    "body": "<p>Simple workaround </p>\n\n<pre><code>if (!String.prototype.contains) {\n  String.prototype.contains= function() {\n    return String.prototype.indexOf.apply(this, arguments) !== -1;\n  };\n}\n</code></pre>\n\n<p>you can use in the following way</p>\n\n<pre><code>\"hello\".contains(\"he\") // true\n\"hello world\".contains(\"lo w\")//true\n\"hello world\".contains(\"lo wa\")//false\n\"hello world\".contains(\" \")//true\n\"hello world\".contains(\"  \")//false\n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\" rel=\"noreferrer\" title=\"MDN Reference\">MDN reference</a></p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 41291975,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/41291975",
    "title": null,
    "body": "<pre><code>function onDocReady(fn){\n    (function c(){document.readyState!==\"loading\"?fn():setTimeout(c,9)})();\n}   \n\nfunction onDocLoad(fn){\n    (function c(){document.readyState===\"complete\"?fn():setTimeout(c,30)})();\n}    \n</code></pre>\n\n<p><strong>onDocReady</strong> provides a callback when the HTML dom is ready to fully  access/parse/manipulate.</p>\n\n<p><strong>onDocLoad</strong> provides a callback when everything has loaded (images etc)</p>\n\n<ul>\n<li>These functions can be called whenever you want.</li>\n<li>Supports multiple \"listeners\". </li>\n<li>Will work in any browser.</li>\n</ul>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1576463,
      "name": "Jakob Sternberg",
      "reputation": 958
    }
  },
  {
    "soID": 11810957,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/11810957",
    "title": null,
    "body": "<p>Poor man's solution:</p>\n\n<pre><code>var checkLoad = function() {   \n    document.readyState !== \"complete\" ? setTimeout(checkLoad, 11) : alert(\"loaded!\");   \n};  \n\ncheckLoad();  \n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/squadjot/s4EzY/\" rel=\"noreferrer\">View Fiddle</a></p>\n\n<p>Added this one, a bit better I guess, own scope, and non recursive</p>\n\n<pre><code>(function(){\n    var tId = setInterval(function() {\n        if (document.readyState == \"complete\") onComplete()\n    }, 11);\n    function onComplete(){\n        clearInterval(tId);    \n        alert(\"loaded!\");    \n    };\n})()\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/squadjot/XD7ZF/\" rel=\"noreferrer\">View Fiddle</a></p>\n",
    "score": 68,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1576463,
      "name": "Jakob Sternberg",
      "reputation": 958
    }
  },
  {
    "soID": 25476051,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/25476051",
    "title": null,
    "body": "<p>I think using myObj.constructor==Object and myArray.constructor==Array is the best way.  Its almost 20x faster than using toString().  If you extend objects with your own constructors and want those creations to be considered \"objects\" as well than this doesn't work, but otherwise its way faster.  typeof is just as fast as the constructor method but typeof []=='object' returns true which will often be undesirable.  <a href=\"http://jsperf.com/constructor-vs-tostring\" rel=\"nofollow\">http://jsperf.com/constructor-vs-tostring</a></p>\n\n<p>one thing to note is that null.constructor will throw an error so if you might be checking for null values you will have to first do if(testThing!==null){}</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1585789,
      "name": "user1585789",
      "reputation": 463
    }
  },
  {
    "soID": 20152162,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/20152162",
    "title": null,
    "body": "<p>There is also <a href=\"http://headjs.com/\" rel=\"nofollow\">Head.js</a>. It is very easy to deal with:</p>\n\n<pre><code>head.load(\"js/jquery.min.js\",\n          \"js/jquery.someplugin.js\",\n          \"js/jquery.someplugin.css\", function() {\n  alert(\"Everything is ok!\");\n});\n</code></pre>\n\n<p>As you see, it's easier than Require.js and as convenient as jQuery's <code>$.getScript</code> method. It also has some advanced features, like conditional loading, feature detection and <a href=\"http://headjs.com/site/api/v1.00.html\" rel=\"nofollow\">much more</a>.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1593459,
      "name": "Ale",
      "reputation": 1346
    }
  },
  {
    "soID": 14948475,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/14948475",
    "title": null,
    "body": "<p>It's not extremely elegant but it's clean enough for me:</p>\n\n<pre><code>var myString = \"First line\" + \"\\n\";\nvar myString = myString + \"Second line\" + \"\\n\";\nvar myString = myString + \"Third line\" + \"\\n\";\n</code></pre>\n",
    "score": -10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 32159803,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/32159803",
    "title": null,
    "body": "<p>Though you have proposed a JavaScript solution for your problem (displaying a <code>textbox</code> when a <code>checkbox</code> is <code>checked</code>), this problem could be solved <strong>just by css</strong>. With this approach, your form works for users who have disabled JavaScript.</p>\n\n<p>Assuming that you have the following HTML:</p>\n\n<pre><code>&lt;label for=\"show_textbox\"&gt;Show Textbox&lt;/label&gt;\n&lt;input id=\"show_textbox\" type=\"checkbox\" /&gt;\n&lt;input type=\"text\" /&gt;\n</code></pre>\n\n<p>You can use the following CSS to achieve the desired functionality:</p>\n\n<pre><code> #show_textbox:not(:checked) + input[type=text] {display:none;}\n</code></pre>\n\n<p>For other scenarios, you may think of appropriate CSS selectors.</p>\n\n<p><a href=\"https://jsfiddle.net/gLztyn9x/4/\" rel=\"noreferrer\" title=\"fiddle\">Here is a Fiddle to demonstrate this approach</a>.</p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12001646,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/12001646",
    "title": null,
    "body": "<p>How about this solution?</p>\n\n<pre><code>// other onload attached earlier\nwindow.onload=function() {\n   alert('test');\n};\n\ntmpPreviousFunction=window.onload ? window.onload : null;\n\n// our onload function\nwindow.onload=function() {\n   alert('another message');\n\n   // execute previous one\n   if (tmpPreviousFunction) tmpPreviousFunction();\n};\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1606247,
      "name": "mike",
      "reputation": 39
    }
  },
  {
    "soID": 14512681,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/14512681",
    "title": null,
    "body": "<p>For the text of the selected item, use:</p>\n\n<pre><code>$('select[name=\"thegivenname\"] option:selected').text();\n</code></pre>\n\n<p>For the value of the selected item, use:</p>\n\n<pre><code>$('select[name=\"thegivenname\"] option:selected').val();\n</code></pre>\n",
    "score": 37,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1610651,
      "name": "Kamrul",
      "reputation": 3587
    }
  },
  {
    "soID": 18998929,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/18998929",
    "title": null,
    "body": "<p>This works for me:</p>\n\n<pre><code>$('#yourdropdownid').find('option:selected').text();\n</code></pre>\n\n<p><a href=\"http://en.wikipedia.org/wiki/JQuery\">jQuery</a> version: 1.9.1</p>\n",
    "score": 45,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1611714,
      "name": "Binita Bharati",
      "reputation": 1106
    }
  },
  {
    "soID": 31161724,
    "parentID": 1098040,
    "url": "https://stackoverflow.com/q/31161724",
    "title": null,
    "body": "<p>The <a href=\"https://stackoverflow.com/a/1098955/1619432\">accepted answer</a> refers to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"nofollow noreferrer\">Object</a>. Beware using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\" rel=\"nofollow noreferrer\"><code>in</code> operator</a> on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" rel=\"nofollow noreferrer\">Array</a> to find data instead of keys:</p>\n\n<pre><code>(\"true\" in [\"true\", \"false\"])\n// -&gt; false (Because the keys of the above Array are actually 0 and 1)\n</code></pre>\n\n<p>To test existing elements in an Array: <a href=\"https://stackoverflow.com/questions/143847/best-way-to-find-an-item-in-a-javascript-array\">Best way to find if an item is in a JavaScript array?</a></p>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1619432,
      "name": "handle",
      "reputation": 1829
    }
  },
  {
    "soID": 12125326,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/12125326",
    "title": null,
    "body": "<p>Better use the <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"nofollow\">jQuery</a> way. To delay the ready event, first call <code>$.holdReady(true)</code>.\nExample (<a href=\"http://jqapi.com/#p=jQuery.holdReady\" rel=\"nofollow\">source</a>):</p>\n\n<pre><code>$.holdReady(true);\n$.getScript(\"myplugin.js\", function() {\n    $.holdReady(false);\n});\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1625049,
      "name": "weageoo",
      "reputation": 59
    }
  },
  {
    "soID": 27631335,
    "parentID": 1279957,
    "url": "https://stackoverflow.com/q/27631335",
    "title": null,
    "body": "<p>Old question but got here because I need to move content from one container to another <strong>including all the event listeners</strong>.</p>\n\n<p>jQuery doesn't have a way to do it but standard DOM function appendChild does.</p>\n\n<pre><code>//assuming only one .source and one .target\n$('.source').on('click',function(){console.log('I am clicked');});\n$('.target')[0].appendChild($('.source')[0]);\n</code></pre>\n\n<p>Using appendChild removes the .source and places it into target including it's event listeners: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.appendChild\" rel=\"noreferrer\">https://developer.mozilla.org/en-US/docs/Web/API/Node.appendChild</a></p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1641941,
      "name": "HMR",
      "reputation": 7709
    }
  },
  {
    "soID": 19079935,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/19079935",
    "title": null,
    "body": "<p>Use:</p>\n\n<pre><code>&lt;input type=\"checkbox\" id=\"abc\" value=\"UDB\"&gt;UDB\n&lt;input type=\"checkbox\" id=\"abc\" value=\"Prasad\"&gt;Prasad\n\n$('input#abc').click(function(){\n  if($(this).is(':checked'))\n  {\n    var checkedOne=$(this).val()\n    alert(checkedOne);\n\n    // Do some other action\n  }\n})\n</code></pre>\n\n<p>This can help if you want that the required action has to be done only when you check the box not at the time you remove the check.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17906644,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/17906644",
    "title": null,
    "body": "<p>I still don't think anyone gave him the answer to how to only do the rounding if needed. The easiest way I see to do it is to check if there is even a decimal in the number, like so:</p>\n\n<pre><code>var num = 3.21;\nif ( (num+\"\").indexOf('.') &gt;= 0 ) { //at least assert to string first...\n    // whatever code you decide to use to round\n}\n</code></pre>\n",
    "score": -8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1642765,
      "name": "coreyavis",
      "reputation": 63
    }
  },
  {
    "soID": 19813797,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/19813797",
    "title": null,
    "body": "<pre><code>if(Object.getOwnPropertyNames(obj).length === 0){\n  //is empty\n}\n</code></pre>\n\n<p>see <a href=\"http://bencollier.net/2011/04/javascript-is-an-object-empty/\">http://bencollier.net/2011/04/javascript-is-an-object-empty/</a> </p>\n",
    "score": 96,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1646248,
      "name": "es cologne",
      "reputation": 1089
    }
  },
  {
    "soID": 27341994,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/27341994",
    "title": null,
    "body": "<p>There is a sleek and better way to do this and it is using the (BitWise NOT) operator.</p>\n\n<pre><code>if(~\"John\".indexOf(\"J\")) {\n  alert(\"Found\")\n}\nelse {\n  alert(\"Not Found\");\n}\n</code></pre>\n\n<p>The Bitwise Not converts \"x\" into -(x + 1) so, if the x turns out -1 from indexOf method.then it will be converted into -( -1 + 1) = -0 which is a falsy value .</p>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 20759804,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/20759804",
    "title": null,
    "body": "<p>For replacing all kind of characters, try this code:</p>\n\n<pre><code>Suppose we have need to send \" and \\ in my string, then we will convert it \" to \\\" and \\ to \\\\\n</code></pre>\n\n<p>So this method will solve this issue.</p>\n\n<pre><code>String.prototype.replaceAll = function (find, replace) {\n     var str = this;\n     return str.replace(new RegExp(find.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&amp;'), 'g'), replace);\n };\n\nvar message = $('#message').val();\n             message = message.replaceAll('\\\\', '\\\\\\\\'); /*it will replace \\ to \\\\ */\n             message = message.replaceAll('\"', '\\\\\"');   /*it will replace \" to \\\\\"*/\n</code></pre>\n\n<p>I was using Ajax, and I had the need to send parameters in JSON format. Then my method is looking like this:</p>\n\n<pre><code> function sendMessage(source, messageID, toProfileID, userProfileID) {\n\n     if (validateTextBox()) {\n         var message = $('#message').val();\n         message = message.replaceAll('\\\\', '\\\\\\\\');\n         message = message.replaceAll('\"', '\\\\\"');\n         $.ajax({\n             type: \"POST\",\n             async: \"false\",\n             contentType: \"application/json; charset=utf-8\",\n             url: \"services/WebService1.asmx/SendMessage\",\n             data: '{\"source\":\"' + source + '\",\"messageID\":\"' + messageID + '\",\"toProfileID\":\"' + toProfileID + '\",\"userProfileID\":\"' + userProfileID + '\",\"message\":\"' + message + '\"}',\n             dataType: \"json\",\n             success: function (data) {\n                 loadMessageAfterSend(toProfileID, userProfileID);\n                 $(\"#&lt;%=PanelMessageDelete.ClientID%&gt;\").hide();\n                 $(\"#message\").val(\"\");\n                 $(\"#delMessageContainer\").show();\n                 $(\"#msgPanel\").show();\n             },\n             error: function (result) {\n                 alert(\"message sending failed\");\n             }\n         });\n     }\n     else {\n         alert(\"Please type message in message box.\");\n         $(\"#message\").focus();\n\n     }\n }\n\n String.prototype.replaceAll = function (find, replace) {\n     var str = this;\n     return str.replace(new RegExp(find.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&amp;'), 'g'), replace);\n };\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1654020,
      "name": "SiwachGaurav",
      "reputation": 1028
    }
  },
  {
    "soID": 14201852,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/14201852",
    "title": null,
    "body": "<p>In my code I frequently define a function (_) to handle copies so that I can pass \"by value\" to functions. This code creates a deep copy but maintains inheritance. It also keeps track of sub-copies so that self-referential objects can be copied without an infinite loop. Feel free to use it.</p>\n\n<p>It might not be the most elegant, but it hasn't failed me yet.</p>\n\n<pre><code>_ = function(oReferance) {\n  var aReferances = new Array();\n  var getPrototypeOf = function(oObject) {\n    if(typeof(Object.getPrototypeOf)!==\"undefined\") return Object.getPrototypeOf(oObject);\n    var oTest = new Object();\n    if(typeof(oObject.__proto__)!==\"undefined\"&amp;&amp;typeof(oTest.__proto__)!==\"undefined\"&amp;&amp;oTest.__proto__===Object.prototype) return oObject.__proto__;\n    if(typeof(oObject.constructor)!==\"undefined\"&amp;&amp;typeof(oTest.constructor)!==\"undefined\"&amp;&amp;oTest.constructor===Object&amp;&amp;typeof(oObject.constructor.prototype)!==\"undefined\") return oObject.constructor.prototype;\n    return Object.prototype;\n  };\n  var recursiveCopy = function(oSource) {\n    if(typeof(oSource)!==\"object\") return oSource;\n    if(oSource===null) return null;\n    for(var i=0;i&lt;aReferances.length;i++) if(aReferances[i][0]===oSource) return aReferances[i][1];\n    var Copy = new Function();\n    Copy.prototype = getPrototypeOf(oSource);\n    var oCopy = new Copy();\n    aReferances.push([oSource,oCopy]);\n    for(sPropertyName in oSource) if(oSource.hasOwnProperty(sPropertyName)) oCopy[sPropertyName] = recursiveCopy(oSource[sPropertyName]);\n    return oCopy;\n  };\n  return recursiveCopy(oReferance);\n};\n\n// Examples:\nWigit = function(){};\nWigit.prototype.bInThePrototype = true;\nA = new Wigit();\nA.nCoolNumber = 7;\nB = _(A);\nB.nCoolNumber = 8; // A.nCoolNumber is still 7\nB.bInThePrototype // true\nB instanceof Wigit // true\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 38510931,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/38510931",
    "title": null,
    "body": "<p>Some hacks with <code>let</code>:</p>\n\n<p>1.</p>\n\n<pre><code>    let statistics = [16, 170, 10];\n    let [age, height, grade] = statistics;\n\n    console.log(height)\n</code></pre>\n\n<p>2.</p>\n\n<pre><code>    let x = 120,\n    y = 12;\n    [x, y] = [y, x];\n    console.log(`x: ${x} y: ${y}`);\n</code></pre>\n\n<p>3.</p>\n\n<pre><code>    let node = {\n                   type: \"Identifier\",\n                   name: \"foo\"\n               };\n\n    let { type, name, value } = node;\n\n    console.log(type);      // \"Identifier\"\n    console.log(name);      // \"foo\"\n    console.log(value);     // undefined\n\n    let node = {\n        type: \"Identifier\"\n    };\n\n    let { type: localType, name: localName = \"bar\" } = node;\n\n    console.log(localType);     // \"Identifier\"\n    console.log(localName);     // \"bar\"\n</code></pre>\n\n<h3>Getter and setter with <code>let</code>:</h3>\n\n<pre><code>let jar = {\n    numberOfCookies: 10,\n    get cookies() {\n        return this.numberOfCookies;\n    },\n    set cookies(value) {\n        this.numberOfCookies = value;\n    }\n};\n\nconsole.log(jar.cookies)\njar.cookies = 7;\n\nconsole.log(jar.cookies)\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1673376,
      "name": "zloctb",
      "reputation": 3044
    }
  },
  {
    "soID": 27729485,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/27729485",
    "title": null,
    "body": "<p>In case you are using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/basic_usage\" rel=\"nofollow noreferrer\">Web Workers</a> and want to include additional scripts in the scope of the worker, the other answers provided about adding scripts to the <code>head</code> tag, etc. will not work for you.</p>\n\n<p>Fortunately, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/basic_usage#Importing_scripts_and_libraries\" rel=\"nofollow noreferrer\">Web Workers have their own <code>importScripts</code> function</a> which is a global function in the scope of the Web Worker, native to the browser itself as it <a href=\"https://html.spec.whatwg.org/multipage/workers.html#importing-scripts-and-libraries\" rel=\"nofollow noreferrer\">is part of the specification</a>.</p>\n\n<p>Alternatively, <a href=\"https://stackoverflow.com/a/10939737/1676444\">as the second highest voted answer to your question highlights</a>, <a href=\"http://www.requirejs.org/\" rel=\"nofollow noreferrer\">RequireJS</a> can also handle including scripts inside a Web Worker (likely calling <code>importScripts</code> itself, but with a few other useful features).</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1676444,
      "name": "Turnerj",
      "reputation": 3190
    }
  },
  {
    "soID": 15314921,
    "parentID": 1357118,
    "url": "https://stackoverflow.com/q/15314921",
    "title": null,
    "body": "<p>i think the best way to do is use preventDefault because if some exception raised in the handler then the return false statement will be skipped and the behavior will be opposite to what you want so it's better to use event.preventDefault() method</p>\n\n<p>but if sure that the code wont trigger any exceptions then u can go with any of the method by your wish.</p>\n\n<p>if u still want to go with the return false\nthen you can put your entire handler code in try catch block like below</p>\n\n<pre><code>$('a').click(function (e) {\n  try{\n      your code here.........\n  }\n   catch(e){}\n  return false;\n});\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1676634,
      "name": "Naga Srinu Kapusetti",
      "reputation": 330
    }
  },
  {
    "soID": 25062595,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/25062595",
    "title": null,
    "body": "<p>Use:</p>\n\n<pre><code>('#yourdropdownid').find(':selected').text();\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1677896,
      "name": "kishore",
      "reputation": 645
    }
  },
  {
    "soID": 16166543,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/16166543",
    "title": null,
    "body": "<pre><code>$(\"select[id=yourDropdownid] option:selected\").text()\n</code></pre>\n\n<p>This works fine</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1679775,
      "name": "Thangamani  Palanisamy",
      "reputation": 3076
    }
  },
  {
    "soID": 45355271,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/45355271",
    "title": null,
    "body": "<p>If deleteCount is omitted, or if its value is larger than array.length - start, then all of the elements beginning with start index on through the end of the array will be deleted.</p>\n\n<pre><code>arr.splice(0)\n</code></pre>\n\n<p>See : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#Parameters\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice#Parameters</a></p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1682264,
      "name": "kortex",
      "reputation": 27
    }
  },
  {
    "soID": 28897059,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/28897059",
    "title": null,
    "body": "<p>Here is an example for the difference between the two (support just started for chrome):\n<img src=\"https://i.stack.imgur.com/dqNYW.png\" alt=\"enter image description here\"></p>\n\n<p>As you can see the <code>var j</code> variable is still having a value outside of the for loop scope, but the <code>let i</code> variable is undefined outside of the for loop scope.</p>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1691423,
      "name": "vlio20",
      "reputation": 3643
    }
  },
  {
    "soID": 35763524,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/35763524",
    "title": null,
    "body": "<p>To test if a variable is null or undefined I use the below code.</p>\n\n<pre><code>    if(sVal === '' || sVal === null ||typeof sVal === 'undefined'){\n    console.log('variable is undefined or null');\n    }\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1694616,
      "name": "DanKodi",
      "reputation": 2116
    }
  },
  {
    "soID": 38676273,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/38676273",
    "title": null,
    "body": "<p>This question is complicated.</p>\n\n<p>Suppose we have a function, <code>roundTo2DP(num)</code>, that takes a float as an argument and returns a value rounded to 2 decimal places. What should each of these expressions evaluate to?</p>\n\n<ul>\n<li><code>roundTo2DP(0.014999999999999999)</code></li>\n<li><code>roundTo2DP(0.0150000000000000001)</code></li>\n<li><code>roundTo2DP(0.015)</code></li>\n</ul>\n\n<p>The 'obvious' answer is that the first example should round to 0.01 (because it's closer to 0.01 than to 0.02) while the other two should round to 0.02 (because 0.0150000000000000001 is closer to 0.02 than to 0.01, and because 0.015 is exactly halfway between them and there is a mathematical convention that such numbers get rounded up).</p>\n\n<p>The catch, which you may have guessed, is that <code>roundTo2DP</code> <em>cannot possibly</em> be implemented to give those obvious answers, because all three numbers passed to it are <em>the same number</em>. IEEE 754 binary floating point numbers (the kind used by JavaScript) can't exactly represent most non-integer numbers, and so all three numeric literals above get rounded to a nearby valid floating point number. This number, as it happens, is <em>exactly</em></p>\n\n<p>0.01499999999999999944488848768742172978818416595458984375</p>\n\n<p>which is closer to 0.01 than to 0.02.</p>\n\n<p>You can see that all three numbers are the same at your browser console, Node shell, or other JavaScript interpreter. Just compare them:</p>\n\n<pre><code>> <b><i>0.014999999999999999 === 0.0150000000000000001</i></b>\ntrue</code></pre>\n\n<p>So when I write <code>m = 0.0150000000000000001</code>, the <em>exact value of <code>m</code></em> that I end up with is closer to <code>0.01</code> than it is to <code>0.02</code>. And yet, if I convert <code>m</code> to a String...</p>\n\n<pre><code>> <b><i>var m = 0.0150000000000000001;</i></b>\n> <b><i>console.log(String(m));</i></b>\n0.015\n> <b><i>var m = 0.014999999999999999;</i></b>\n> <b><i>console.log(String(m));</i></b>\n0.015</code></pre>\n\n<p>... I get 0.015, which should round to 0.02, and which is noticeably <em>not</em> the 56-decimal-place number I earlier said that all of these numbers were exactly equal to. So what dark magic is this?</p>\n\n<p>The answer can be found in the ECMAScript specification, in section <a href=\"http://www.ecma-international.org/ecma-262/7.0/#sec-tostring-applied-to-the-number-type\" rel=\"noreferrer\"><em>7.1.12.1: ToString applied to the Number type</em></a>. Here the rules for converting some Number <em>m</em> to a String are laid down. The key part is point 5, in which an integer <em>s</em> is generated whose digits will be used in the String representation of <em>m</em>:</p>\n\n<blockquote>\n  <p>let <em>n</em>, <em>k</em>, and <em>s</em> be integers such that <em>k</em> ≥ 1, 10<sup><i>k</i>-1</sup> ≤ <em>s</em> &lt; 10<sup><i>k</i></sup>, the Number value for <em>s</em> × 10<sup><i>n</i>-<i>k</i></sup> is <em>m</em>, and <em>k</em> is as small as possible. Note that k is the number of digits in the decimal representation of <em>s</em>, that <em>s</em> is not divisible by 10, and that the least significant digit of <em>s</em> is not necessarily uniquely determined by these criteria.</p>\n</blockquote>\n\n<p>The key part here is the requirement that \"<em>k</em> is as small as possible\". What that requirement amounts to is a requirement that, given a Number <code>m</code>, the value of <code>String(m)</code> must have <em>the least possible number of digits</em> while still satisfying the requirement that <code>Number(String(m)) === m</code>. Since we already know that <code>0.015 === 0.0150000000000000001</code>, it's now clear why <code>String(0.0150000000000000001) === '0.015'</code> must be true.</p>\n\n<p>Of course, none of this discussion has directly answered what <code>roundTo2DP(m)</code> <em>should</em> return. If <code>m</code>'s exact value is 0.01499999999999999944488848768742172978818416595458984375, but its String representation is '0.015', then what is the <em>correct</em> answer - mathematically, practically, philosophically, or whatever - when we round it to two decimal places?</p>\n\n<p>There is no single correct answer to this. It depends upon your use case. You probably want to respect the String representation and round upwards when:</p>\n\n<ul>\n<li>The value being represented is inherently discrete, e.g. an amount of currency in a 3-decimal-place currency like dinars. In this case, the <em>true</em> value of a Number like 0.015 <em>is</em> 0.015, and the 0.0149999999... representation that it gets in binary floating point is a rounding error. (Of course, many will argue, reasonably, that you should use a decimal library for handling such values and never represent them as binary floating point Numbers in the first place.)</li>\n<li>The value was typed by a user. In this case, again, the exact decimal number entered is more 'true' than the nearest binary floating point representation.</li>\n</ul>\n\n<p>On the other hand, you probably want to respect the binary floating point value and round downwards when your value is from an inherently continuous scale - for instance, if it's a reading from a sensor.</p>\n\n<p>These two approaches require different code. To respect the String representation of the Number, we can (with quite a bit of reasonably subtle code) implement our own rounding that acts directly on the String representation, digit by digit, using the same algorithm you would've used in school when you were taught how to round numbers. Below is an example which respects the OP's requirement of representing the number to 2 decimal places \"only when necessary\" by stripping trailing zeroes after the decimal point; you may, of course, need to tweak it to your precise needs.</p>\n\n<pre><code>/**\n * Converts num to a decimal string (if it isn't one already) and then rounds it\n * to at most dp decimal places.\n *\n * For explanation of why you'd want to perform rounding operations on a String\n * rather than a Number, see http://stackoverflow.com/a/38676273/1709587\n *\n * @param {(number|string)} num\n * @param {number} dp\n * @return {string}\n */\nfunction roundStringNumberWithoutTrailingZeroes (num, dp) {\n    if (arguments.length != 2) throw new Error(\"2 arguments required\");\n\n    num = String(num);\n    if (num.indexOf('e+') != -1) {\n        // Can't round numbers this large because their string representation\n        // contains an exponent, like 9.99e+37\n        throw new Error(\"num too large\");\n    }\n    if (num.indexOf('.') == -1) {\n        // Nothing to do\n        return num;\n    }\n\n    var parts = num.split('.'),\n        beforePoint = parts[0],\n        afterPoint = parts[1],\n        shouldRoundUp = afterPoint[dp] &gt;= 5,\n        finalNumber;\n\n    afterPoint = afterPoint.slice(0, dp);\n    if (!shouldRoundUp) {\n        finalNumber = beforePoint + '.' + afterPoint;\n    } else if (/^9+$/.test(afterPoint)) {\n        // If we need to round up a number like 1.9999, increment the integer\n        // before the decimal point and discard the fractional part.\n        finalNumber = Number(beforePoint)+1;\n    } else {\n        // Starting from the last digit, increment digits until we find one\n        // that is not 9, then stop\n        var i = dp-1;\n        while (true) {\n            if (afterPoint[i] == '9') {\n                afterPoint = afterPoint.substr(0, i) +\n                             '0' +\n                             afterPoint.substr(i+1);\n                i--;\n            } else {\n                afterPoint = afterPoint.substr(0, i) +\n                             (Number(afterPoint[i]) + 1) +\n                             afterPoint.substr(i+1);\n                break;\n            }\n        }\n\n        finalNumber = beforePoint + '.' + afterPoint;\n    }\n\n    // Remove trailing zeroes from fractional part before returning\n    return finalNumber.replace(/0+$/, '')\n}\n</code></pre>\n\n<p>Example usage:</p>\n\n<pre><code>> <b><i>roundStringNumberWithoutTrailingZeroes(1.6, 2)</i></b>\n'1.6'\n> <b><i>roundStringNumberWithoutTrailingZeroes(10000, 2)</i></b>\n'10000'\n> <b><i>roundStringNumberWithoutTrailingZeroes(0.015, 2)</i></b>\n'0.02'\n> <b><i>roundStringNumberWithoutTrailingZeroes('0.015000', 2)</i></b>\n'0.02'\n> <b><i>roundStringNumberWithoutTrailingZeroes(1, 1)</i></b>\n'1'\n> <b><i>roundStringNumberWithoutTrailingZeroes('0.015', 2)</i></b>\n'0.02'\n> <b><i>roundStringNumberWithoutTrailingZeroes(0.01499999999999999944488848768742172978818416595458984375, 2)</i></b>\n'0.02'\n> <b><i>roundStringNumberWithoutTrailingZeroes('0.01499999999999999944488848768742172978818416595458984375', 2)</i></b>\n'0.01'</code></pre>\n\n<p>The function above is <em>probably</em> what you want to use to avoid users ever witnessing numbers that they have entered being rounded wrongly.</p>\n\n<p>(As an alternative, you could also try the <a href=\"https://github.com/jhohlfeld/round10\" rel=\"noreferrer\">round10</a> library which provides a similarly-behaving function with a wildly different implementation.)</p>\n\n<p>But what if you have the second kind of Number - a value taken from a continuous scale, where there's no reason to think that approximate decimal representations with fewer decimal places are more <em>accurate</em> than those with more? In that case, we <em>don't</em> want to respect the String representation, because that representation (as explained in the spec) is already sort-of-rounded; we don't want to make the mistake of saying \"0.014999999...375 rounds up to 0.015, which rounds up to 0.02, so 0.014999999...375 rounds up to 0.02\".</p>\n\n<p>Here we can simply use the built-in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed\" rel=\"noreferrer\"><code>toFixed</code></a> method. Note that by calling <code>Number()</code> on the String returned by <code>toFixed</code>, we get a Number whose String representation has no trailing zeroes (thanks to the way JavaScript computes the String representation of a Number, discussed earlier in this answer).</p>\n\n<pre><code>/**\n * Takes a float and rounds it to at most dp decimal places. For example\n *\n *     roundFloatNumberWithoutTrailingZeroes(1.2345, 3)\n *\n * returns 1.234\n *\n * Note that since this treats the value passed to it as a floating point\n * number, it will have counterintuitive results in some cases. For instance,\n * \n *     roundFloatNumberWithoutTrailingZeroes(0.015, 2)\n *\n * gives 0.01 where 0.02 might be expected. For an explanation of why, see\n * http://stackoverflow.com/a/38676273/1709587. You may want to consider using the\n * roundStringNumberWithoutTrailingZeroes function there instead.\n *\n * @param {number} num\n * @param {number} dp\n * @return {number}\n */\nfunction roundFloatNumberWithoutTrailingZeroes (num, dp) {\n    var numToFixedDp = Number(num).toFixed(dp);\n    return Number(numToFixedDp);\n}\n</code></pre>\n",
    "score": 41,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1709587,
      "name": "Mark Amery",
      "reputation": 36097
    }
  },
  {
    "soID": 27740462,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/27740462",
    "title": null,
    "body": "<p><strong>You can now do this in most \"modern\" browsers!</strong></p>\n\n<p>1) Here is the original article:-</p>\n\n<p><a href=\"http://spoiledmilk.com/blog/html5-changing-the-browser-url-without-refreshing-page/\">HTML5: Changing the browser-URL without refreshing page.</a></p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history\">see the MDN docs.</a></p>\n\n<p>You can do this:</p>\n\n<pre><code>window.history.pushState(\"object or string\", \"Title\", \"/new-url\");\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1712304,
      "name": "Gaurang P",
      "reputation": 1192
    }
  },
  {
    "soID": 14640439,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/14640439",
    "title": null,
    "body": "<p>For use with jQuery.ajax() success functions.  Pass only a single argument and string replace with the properties of that object as {propertyName}:</p>\n\n<pre><code>String.prototype.format = function () {\n    var formatted = this;\n    for (var prop in arguments[0]) {\n        var regexp = new RegExp('\\\\{' + prop + '\\\\}', 'gi');\n        formatted = formatted.replace(regexp, arguments[0][prop]);\n    }\n    return formatted;\n};\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>var userInfo = (\"Email: {Email} - Phone: {Phone}\").format({ Email: \"someone@somewhere.com\", Phone: \"123-123-1234\" });\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 20375693,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/20375693",
    "title": null,
    "body": "<p>Follows an extract from <a href=\"http://rads.stackoverflow.com/amzn/click/1449381871\">Closure: The Definitive Guide by Michael Bolin</a>. It might look a bit lengthy, but it's saturated with a lot of insight. From \"Appendix B. Frequently Misunderstood JavaScript Concepts\":</p>\n\n<hr>\n\n<h1>What <code>this</code> Refers to When a Function is Called</h1>\n\n<p>When calling a function of the form <code>foo.bar.baz()</code>, the object <code>foo.bar</code> is referred to as the receiver. When the function is called, it is the receiver that is used as the value for <code>this</code>:</p>\n\n<pre><code>var obj = {};\nobj.value = 10;\n/** @param {...number} additionalValues */\nobj.addValues = function(additionalValues) {\n  for (var i = 0; i &lt; arguments.length; i++) {\n    this.value += arguments[i];\n  }\n  return this.value;\n};\n// Evaluates to 30 because obj is used as the value for 'this' when\n// obj.addValues() is called, so obj.value becomes 10 + 20.\nobj.addValues(20);\n</code></pre>\n\n<p>If there is no explicit receiver when a function is called, then the global object becomes the receiver. As explained in \"goog.global\" on page 47, window is the global object when JavaScript is executed in a web browser. This leads to some surprising behavior:</p>\n\n<pre><code>var f = obj.addValues;\n// Evaluates to NaN because window is used as the value for 'this' when\n// f() is called. Because and window.value is undefined, adding a number to\n// it results in NaN.\nf(20);\n// This also has the unintentional side effect of adding a value to window:\nalert(window.value); // Alerts NaN\n</code></pre>\n\n<p>Even though <code>obj.addValues</code> and <code>f</code> refer to the same function, they behave differently when called because the value of the receiver is different in each call. For this reason, when calling a function that refers to <code>this</code>, it is important to ensure that <code>this</code> will have the correct value when it is called. To be clear, if <code>this</code> were not referenced in the function body, then the behavior of <code>f(20)</code> and <code>obj.addValues(20)</code> would be the same.</p>\n\n<p>Because functions are first-class objects in JavaScript, they can have their own methods. All functions have the methods <code>call()</code> and <code>apply()</code> which make it possible to redefine the receiver (i.e., the object that <code>this</code> refers to) when calling the function. The method signatures are as follows:</p>\n\n<pre><code>/**\n* @param {*=} receiver to substitute for 'this'\n* @param {...} parameters to use as arguments to the function\n*/\nFunction.prototype.call;\n/**\n* @param {*=} receiver to substitute for 'this'\n* @param {Array} parameters to use as arguments to the function\n*/\nFunction.prototype.apply;\n</code></pre>\n\n<p>Note that the only difference between <code>call()</code> and <code>apply()</code> is that <code>call()</code> receives the function parameters as individual arguments, whereas <code>apply()</code> receives them as a single array:</p>\n\n<pre><code>// When f is called with obj as its receiver, it behaves the same as calling\n// obj.addValues(). Both of the following increase obj.value by 60:\nf.call(obj, 10, 20, 30);\nf.apply(obj, [10, 20, 30]);\n</code></pre>\n\n<p>The following calls are equivalent, as <code>f</code> and <code>obj.addValues</code> refer to the same function:</p>\n\n<pre><code>obj.addValues.call(obj, 10, 20, 30);\nobj.addValues.apply(obj, [10, 20, 30]);\n</code></pre>\n\n<p>However, since neither <code>call()</code> nor <code>apply()</code> uses the value of its own receiver to substitute for the receiver argument when it is unspecified, the following will not work:</p>\n\n<pre><code>// Both statements evaluate to NaN\nobj.addValues.call(undefined, 10, 20, 30);\nobj.addValues.apply(undefined, [10, 20, 30]);\n</code></pre>\n\n<p>The value of <code>this</code> can never be <code>null</code> or <code>undefined</code> when a function is called. When <code>null</code> or <code>undefined</code> is supplied as the receiver to <code>call()</code> or <code>apply()</code>, the global object is used as the value for receiver instead. Therefore, the previous code has the same undesirable side effect of adding a property named <code>value</code> to the global object.</p>\n\n<p>It may be helpful to think of a function as having no knowledge of the variable to which it is assigned. This helps reinforce the idea that the value of this will be bound when the function is called rather than when it is defined.</p>\n\n<hr>\n\n<p>End of extract.</p>\n",
    "score": 64,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1714997,
      "name": "Dominykas Mostauskis",
      "reputation": 3088
    }
  },
  {
    "soID": 12710609,
    "parentID": 586182,
    "url": "https://stackoverflow.com/q/12710609",
    "title": null,
    "body": "<p>You can implement the Array.insert method by doing this:</p>\n\n<pre><code>Array.prototype.insert = function ( index, item ) {\n    this.splice( index, 0, item );\n};\n</code></pre>\n\n<p>Then you can use it like:</p>\n\n<pre><code>var arr = [ 'A', 'B', 'D', 'E' ];\narr.insert(2, 'C');\n\n// =&gt; arr == [ 'A', 'B', 'C', 'D', 'E' ]\n</code></pre>\n",
    "score": 178,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1717410,
      "name": "FrEsC 81",
      "reputation": 1829
    }
  },
  {
    "soID": 33871169,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/33871169",
    "title": null,
    "body": "<p>I can't believe after two years of programming js it never clicked that empty objects and array's aren't falsey, the weirdest thing is it never caught me out.</p>\n\n<p>this will return <code>true</code> if the input is falsey by default or if it's an empty object or array. the inverse is the <code>trueish</code> function</p>\n\n<p><a href=\"http://codepen.io/synthet1c/pen/pjmoWL\" rel=\"nofollow\">http://codepen.io/synthet1c/pen/pjmoWL</a></p>\n\n<pre><code>function falsish( obj ){\n    if( (typeof obj === 'number' &amp;&amp; obj &gt; 0) || obj === true ){\n        return false;\n    }\n    return !!obj\n        ? !Object.keys( obj ).length\n        : true;\n}\n\nfunction trueish( obj ){\n    return !falsish( obj );\n}\n\nfalsish({})           //=&gt; true\nfalsish({foo:'bar'})  //=&gt; false\nfalsish([])           //=&gt; true\nfalsish(['foo'])      //=&gt; false\nfalsish(false)        //=&gt; true\nfalsish(true)         //=&gt; false\n// the rest are on codepen\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1733478,
      "name": "synthet1c",
      "reputation": 3468
    }
  },
  {
    "soID": 19323555,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/19323555",
    "title": null,
    "body": "<p>Combining the above answers, it seems the most complete answer would be:</p>\n\n<pre><code>if( typeof variable === 'undefined' || variable === null ){\n    // Do stuff\n}\n</code></pre>\n\n<p>This should work for any variable that is either undeclared or declared and explicitly set to null or undefined.  The boolean expression should evaluate to false for any declared variable that has an actual non-null value.</p>\n",
    "score": 127,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1735723,
      "name": "jkindwall",
      "reputation": 1517
    }
  },
  {
    "soID": 12830454,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/12830454",
    "title": null,
    "body": "<p>If the value is a text type:</p>\n\n<pre><code>parseFloat(\"123.456\").toFixed(2);\n</code></pre>\n\n<p>If the value is a number:</p>\n\n<pre><code>var numb = 123.23454;\nnumb = numb.toFixed(2);\n</code></pre>\n\n<p>There is a downside that values like 1.5 will give \"1.50\" as the output. A fix suggested by @minitech:</p>\n\n<pre><code>var numb = 1.5;\nnumb = +numb.toFixed(2);\n// Note the plus sign that drops any \"extra\" zeroes at the end.\n// It changes the result (which is a string) into a number again (think \"0 + foo\"),\n// which means that it uses only as many digits as necessary.\n</code></pre>\n\n<p>It seems like <code>Math.round</code> is a better solution. <strong>But it is not!</strong> In some cases it will <strong>NOT</strong> round correctly:</p>\n\n<pre><code>Math.round(1.005 * 1000)/1000 // Returns 1 instead of expected 1.01!\n</code></pre>\n\n<p>toFixed() also will <strong>NOT</strong> round correctly in some cases (tested in Chrome v.55.0.2883.87)!</p>\n\n<p>Examples:</p>\n\n<pre><code>parseFloat(\"1.555\").toFixed(2); // Returns 1.55 instead of 1.56.\nparseFloat(\"1.5550\").toFixed(2); // Returns 1.55 instead of 1.56.\n// However, it will return correct result if you round 1.5551.\nparseFloat(\"1.5551\").toFixed(2); // Returns 1.56 as expected.\n\n1.3555.toFixed(3) // Returns 1.355 instead of expected 1.356.\n// However, it will return correct result if you round 1.35551.\n1.35551.toFixed(2); // Returns 1.36 as expected.\n</code></pre>\n\n<p>I guess, this is because 1.555 is actually something like float 1.55499994 behind the scenes.</p>\n\n<p><strong>Solution 1</strong> is to use a script with required rounding algorithm, for example:</p>\n\n<pre><code>function roundNumber(num, scale) {\n  if(!(\"\" + num).includes(\"e\")) {\n    return +(Math.round(num + \"e+\" + scale)  + \"e-\" + scale);\n  } else {\n    var arr = (\"\" + num).split(\"e\");\n    var sig = \"\"\n    if(+arr[1] + scale &gt; 0) {\n      sig = \"+\";\n    }\n    return +(Math.round(+arr[0] + \"e\" + sig + (+arr[1] + scale)) + \"e-\" + scale);\n  }\n}\n</code></pre>\n\n<p><a href=\"https://plnkr.co/edit/uau8BlS1cqbvWPCHJeOy?p=preview\" rel=\"noreferrer\">https://plnkr.co/edit/uau8BlS1cqbvWPCHJeOy?p=preview</a></p>\n\n<p><strong>Solution 2</strong> is to avoid front end calculations and pull rounded values from the backend server.</p>\n",
    "score": 1895,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1736537,
      "name": "A Kunin",
      "reputation": 19239
    }
  },
  {
    "soID": 12843412,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/12843412",
    "title": null,
    "body": "<p>One very slightly different version, the one I prefer (this one uses {xxx} tokens rather than {0} numbered arguments, this is much more self-documenting and suits localization much better):</p>\n\n<pre><code>String.prototype.format = function(tokens) {\n  var formatted = this;\n  for (var token in tokens)\n    if (tokens.hasOwnProperty(token))\n      formatted = formatted.replace(RegExp(\"{\" + token + \"}\", \"g\"), tokens[token]);\n  return formatted;\n};\n</code></pre>\n\n<p>A variation would be:</p>\n\n<pre><code>  var formatted = l(this);\n</code></pre>\n\n<p>that calls an l() localization function first.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 29688912,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/29688912",
    "title": null,
    "body": "<p>Statement <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\" rel=\"noreferrer\"><code>import</code></a> is in ECMAScript 6.</p>\n\n<p>Syntax</p>\n\n<pre><code>import name from \"module-name\";\nimport { member } from \"module-name\";\nimport { member as alias } from \"module-name\";\nimport { member1 , member2 } from \"module-name\";\nimport { member1 , member2 as alias2 , [...] } from \"module-name\";\nimport name , { member [ , [...] ] } from \"module-name\";\nimport \"module-name\" as name;\n</code></pre>\n",
    "score": 46,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1740161,
      "name": "draupnie",
      "reputation": 575
    }
  },
  {
    "soID": 17567046,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/17567046",
    "title": null,
    "body": "<p>See this <a href=\"http://www.darlesson.com/jquery/querystring/\" rel=\"nofollow\">post</a> or use this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" language=\"javascript\"&gt;\n    $(document).ready(function()\n    {\n        var urlParams = {};\n        (function ()\n        {\n            var match,\n            pl= /\\+/g,  // Regular expression for replacing addition symbol with a space\n            search = /([^&amp;=]+)=?([^&amp;]*)/g,\n            decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n            query  = window.location.search.substring(1);\n\n            while (match = search.exec(query))\n                urlParams[decode(match[1])] = decode(match[2]);\n        })();\n\n        if (urlParams[\"q1\"] === 1)\n        {\n            return 1;\n        }\n    });\n&lt;/script&gt;\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 18194090,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/18194090",
    "title": null,
    "body": "<p>Here is a prototype method:</p>\n\n<pre><code>Number.prototype.round = function(places){\n    places = Math.pow(10, places); \n    return Math.round(this * places)/places;\n}\n\nvar yournum = 10.55555;\nyournum = yournum.round(2);\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1745435,
      "name": "arielf",
      "reputation": 171
    }
  },
  {
    "soID": 43515177,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/43515177",
    "title": null,
    "body": "<p>For <strong><a href=\"http://en.wikipedia.org/wiki/Opera_%28web_browser%29\" rel=\"nofollow noreferrer\">Opera</a></strong> (it works the same as <strong>Chrome</strong>), I started the browser with this command:</p>\n\n<pre><code>opera --user-data-dir=\"~/Downloads/opera-session\" --disable-web-security\n</code></pre>\n\n<p>The problem is solved! Now I can work on a local HTML file (on my hard disk drive) and call Ajax requests to remote origins in the same file.</p>\n\n<p><em>Note 1:</em> You can give any folder in your home directory as --user-data-dir.</p>\n\n<p><em>Note 2:</em> Tested on <a href=\"https://en.wikipedia.org/wiki/Debian#Release_timeline\" rel=\"nofollow noreferrer\">Debian&nbsp;8</a> (Jessie)/Opera 39</p>\n\n<p><a href=\"https://i.stack.imgur.com/gbksP.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/gbksP.png\" alt=\"Here is a screenshot\"></a></p>\n\n<p>When you start normally (without the parameters above), the same request falls into the error code block.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1750142,
      "name": "Onur Yılmaz",
      "reputation": 1037
    }
  },
  {
    "soID": 30479554,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/30479554",
    "title": null,
    "body": "<p><code>let</code> can also be used to avoid problems with closures. It binds fresh value rather than keeping an old reference as shown in examples below.</p>\n\n<p><a href=\"http://jsfiddle.net/rmXcF/5/\" rel=\"noreferrer\"><strong>DEMO</strong></a></p>\n\n<pre><code>for(var i = 1; i &lt; 6; i++) {\n  document.getElementById('my-element' + i)\n    .addEventListener('click', function() { alert(i) })\n}\n</code></pre>\n\n<p>Code above demonstrates a classic JavaScript closure problem. Reference to the <code>i</code> variable is being stored in the click handler closure, rather than the actual value of <code>i</code>.</p>\n\n<p>Every single click handler will refer to the same object because there’s only one counter object which holds 6 so you get six on each click.</p>\n\n<p>General workaround is to wrap this in an anonymous function and pass <code>i</code> as argument. Such issues can also be avoided now by using <code>let</code> instead <code>var</code> as shown in code below.</p>\n\n<p><a href=\"http://jsfiddle.net/rmXcF/4/\" rel=\"noreferrer\"><strong>DEMO</strong></a> (Tested in Chrome and Firefox 50)</p>\n\n<pre><code>'use strict';\n\nfor(let i = 1; i &lt; 6; i++) {\n  document.getElementById('my-element' + i)\n    .addEventListener('click', function() { alert(i) })\n}\n</code></pre>\n",
    "score": 284,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1750604,
      "name": "Gurpreet Singh",
      "reputation": 12323
    }
  },
  {
    "soID": 38517843,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/38517843",
    "title": null,
    "body": "<p>If anybody needs to loop through <strong>arrayObjects with condition</strong>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arrayObjects = [{\"building\":\"A\", \"status\":\"good\"},{\"building\":\"B\",\"status\":\"horrible\"}];\r\n\r\nfor (var i=0; i&lt; arrayObjects.length; i++) {\r\n  console.log(arrayObjects[i]);\r\n  \r\n  for(key in arrayObjects[i]) {      \r\n    \r\n      if (key == \"status\" &amp;&amp; arrayObjects[i][key] == \"good\") {\r\n        \r\n          console.log(key + \"-&gt;\" + arrayObjects[i][key]);\r\n      }else{\r\n          console.log(\"nothing found\");\r\n      }\r\n   }\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1751163,
      "name": "Tadas V.",
      "reputation": 124
    }
  },
  {
    "soID": 20276808,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/20276808",
    "title": null,
    "body": "<p>Here is a time-delay redirection. You can set the delay time to whatever you want:</p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Your Document Title&lt;/title&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function delayer(delay) {\n            onLoad = setTimeout('window.location.href = \"http://www.google.com/\"', delay);\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;script&gt;\n        delayer(8000)\n    &lt;/script&gt;\n    &lt;div&gt;You will be redirected in 8 seconds!&lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1751920,
      "name": "Stefan Gruenwald",
      "reputation": 1538
    }
  },
  {
    "soID": 18792024,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/18792024",
    "title": null,
    "body": "<p>This is very simple method to get parameter value(query string)</p>\n\n<p>Use <code>gV(para_name)</code> function to retrieve its value</p>\n\n<pre><code>var a=window.location.search;\na=a.replace(a.charAt(0),\"\"); //Removes '?'\na=a.split(\"&amp;\");\n\nfunction gV(x){\n for(i=0;i&lt;a.length;i++){\n  var b=a[i].substr(0,a[i].indexOf(\"=\"));\n  if(x==b){\n   return a[i].substr(a[i].indexOf(\"=\")+1,a[i].length)}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21544363,
    "parentID": 14994391,
    "url": "https://stackoverflow.com/q/21544363",
    "title": null,
    "body": "<h1>jQuery</h1>\n\n<p>jQuery makes ridiculously long JavaScript commands like <code>getElementByHerpDerp</code> shorter and cross-browser.</p>\n\n<h1>AngularJS</h1>\n\n<p>AngularJS allows you to make your own HTML tags/attributes that do things which work well with dynamic web applications (since HTML was designed for static pages).</p>\n\n<h1>Edit:</h1>\n\n<p>Saying \"I have a jQuery background how do I think in AngularJS?\" is like saying \"I have an HTML background how do I think in JavaScript?\" The fact that you're asking the question shows you most likely don't understand the fundamental purposes of these two resources. This is why I chose to answer the question by simply pointing out the fundamental difference rather than going through the list saying \"AngularJS makes use of directives whereas jQuery uses CSS selectors to make a jQuery object which does this and that etc....\". This question does not require a lengthy answer.</p>\n\n<p>jQuery is a way to make programming JavaScript in the browser easier. Shorter, cross-browser commands, etc.</p>\n\n<p>AngularJS extends HTML, so you don't have to put <code>&lt;div&gt;</code> all over the place just to make an application. It makes HTML actually work for applications rather than what it was designed for, which is static, educational web pages. It accomplishes this in a roundabout way using JavaScript, but fundamentally it is an extension of HTML, not JavaScript.</p>\n",
    "score": 69,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1763217,
      "name": "Nick Manning",
      "reputation": 1826
    }
  },
  {
    "soID": 13078158,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/13078158",
    "title": null,
    "body": "<p>For a random integer with a range, try:</p>\n\n<pre><code>function random(minimum, maximum) {\n  var bool = true;\n\n  while (bool) {\n    var number = (Math.floor(Math.random() * maximum + 1) + minimum);\n    if (number &gt; 20) {\n      bool = true;\n    } else {\n      bool = false;\n    }\n  }\n\n  return number;\n}\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1764199,
      "name": "user1764199",
      "reputation": 87
    }
  },
  {
    "soID": 41739286,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/41739286",
    "title": null,
    "body": "<h2>Yet another answer...</h2>\n\n<blockquote>\n  <p>Usually, I would expect a String.contains() method,...</p>\n</blockquote>\n\n<p>Depending on what <em>usually</em> mean, there is at least one way not already presented on all previous answer.</p>\n\n<p>This could be usefull on very specific cases, but:</p>\n\n<pre><code>var mystring=\"Foo bar baz\"\nvar searchstr=\"bar\"\nvar arraysplt=mystring.split(searchstr)\nvar containbool=typeof(arraysplt[1])==\"string\";\n</code></pre>\n\n<p>If <em><code>searchstr</code></em> is present at least once, even at end of <em><code>mystring</code></em>, then <code>typeof(split(...)[1])</code> is <strong><code>string</code></strong> (an empty string). If not present, then <code>typeof(split(...)[1])</code> become <strong><code>undefined</code></strong>.</p>\n\n<p>or</p>\n\n<pre><code>typeof( mystring.split( searchstr )[1] ) == \"string\";\n</code></pre>\n\n<p>But using this method could only be usefull only if <em><code>arraysplt</code></em>'s elements will be usefull lather in the script.</p>\n\n<p>... so this shorted method seem completely useless (I think)...</p>\n\n<p>But, if your goal is to split a string, using <code>indexOf</code> to ensure presence of <em>separator</em> is useless.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21940902,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/21940902",
    "title": null,
    "body": "<p>If you are loading jQuery near the bottom of BODY, but are having trouble with code that writes out jQuery(&lt;func>) or jQuery(document).ready(&lt;func>), check out <a href=\"https://github.com/withjam/jqshim-head\" rel=\"nofollow\">jqShim</a> on Github.</p>\n\n<p>Rather than recreate its own document ready function, it simply holds onto the functions until jQuery is available then proceeds with jQuery as expected. The point of moving jQuery to the bottom of body is to speed up page load, and you can still accomplish it by inlining the jqShim.min.js in the head of your template.</p>\n\n<p>I ended up writing this code to make moving all the scripts in <a href=\"http://en.wikipedia.org/wiki/WordPress\" rel=\"nofollow\">WordPress</a> to the footer, and just this shim code now sits directly in the header.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1769529,
      "name": "Matt Pileggi",
      "reputation": 5020
    }
  },
  {
    "soID": 19718827,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/19718827",
    "title": null,
    "body": "<p>I also wrote a JavaScript dependency manager for Java web applications: <a href=\"http://damonsmith.github.io/js-class-loader/\" rel=\"nofollow\">JS-Class-Loader</a>.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1787152,
      "name": "Damon Smith",
      "reputation": 1408
    }
  },
  {
    "soID": 42811314,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/42811314",
    "title": null,
    "body": "<p>Best way that I found:</p>\n\n<pre><code>function isEmpty(obj)\n{\n    if (!obj)\n    {\n        return true;\n    }\n\n    if (!(typeof(obj) === 'number') &amp;&amp; !Object.keys(obj).length)\n    {\n        return true;\n    }\n\n    return false;\n}\n</code></pre>\n\n<p>Works for:</p>\n\n<pre><code>    t1: {} -&gt; true\n    t2: {0:1} -: false\n    t3: [] -&gt; true\n    t4: [2] -&gt; false\n    t5: null -&gt; true\n    t6: undefined -&gt; true\n    t7: \"\" -&gt; true\n    t8: \"a\" -&gt; false\n    t9: 0 -&gt; true\n    t10: 1 -&gt; false\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1791308,
      "name": "DiegoAraujo",
      "reputation": 55
    }
  },
  {
    "soID": 28389515,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/28389515",
    "title": null,
    "body": "<p>Keep it nice, short, simple, and maintainable! :]</p>\n\n<pre><code>// 3rd party plugins / script (don't forget the full path is necessary)\nvar FULL_PATH = '', s =\n[\n    FULL_PATH + 'plugins/script.js'      // Script example\n    FULL_PATH + 'plugins/jquery.1.2.js', // jQuery Library \n    FULL_PATH + 'plugins/crypto-js/hmac-sha1.js',      // CryptoJS\n    FULL_PATH + 'plugins/crypto-js/enc-base64-min.js'  // CryptoJS\n];\n\nfunction load(url)\n{\n    var ajax = new XMLHttpRequest();\n    ajax.open('GET', url, false);\n    ajax.onreadystatechange = function ()\n    {\n        var script = ajax.response || ajax.responseText;\n        if (ajax.readyState === 4)\n        {\n            switch(ajax.status)\n            {\n                case 200:\n                    eval.apply( window, [script] );\n                    console.log(\"library loaded: \", url);\n                    break;\n                default:\n                    console.log(\"ERROR: library not loaded: \", url);\n            }\n        }\n    };\n    ajax.send(null);\n}\n\n // initialize a single load \nload('plugins/script.js');\n\n// initialize a full load of scripts\nif (s.length &gt; 0)\n{\n    for (i = 0; i &lt; s.length; i++)\n    {\n        load(s[i]);\n    }\n}\n</code></pre>\n\n<p>This code is simply a short functional example that <em>could</em> require additional feature functionality for full support on any (or given) platform.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1804013,
      "name": "tfont",
      "reputation": 5080
    }
  },
  {
    "soID": 20901688,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/20901688",
    "title": null,
    "body": "<p>This example is for button.</p>\n\n<p>Try the following:</p>\n\n<pre><code>&lt;input type=\"button\" class=\"check\" id=\"checkall\" value=\"Check All\" /&gt;  &amp;nbsp; &lt;input type=\"button\" id=\"remove\" value=\"Delete\" /&gt; &lt;br/&gt;\n\n&lt;input type=\"checkbox\" class=\"cb-element\"  value=\"1\" /&gt; Checkbox  1 &lt;br/&gt;\n&lt;input type=\"checkbox\" class=\"cb-element\"  value=\"2\" /&gt; Checkbox  2 &lt;br/&gt;\n&lt;input type=\"checkbox\" class=\"cb-element\"  value=\"3\" /&gt; Checkbox  3 &lt;br/&gt;\n\n\n$('#remove').attr('disabled', 'disabled'); \n\n$(document).ready(function() {  \n\n    $('.cb-element').click(function() {\n\n        if($(this).prop('checked'))\n        {\n            $('#remove').attr('disabled', false);\n        }\n        else\n        {\n            $('#remove').attr('disabled', true);\n        }\n    });   \n\n    $('.check:button').click(function()\n{\n    var checked = !$(this).data('checked');\n    $('input:checkbox').prop('checked', checked);\n    $(this).data('checked', checked);\n\n    if(checked == true)\n    {\n        $(this).val('Uncheck All');\n         $('#remove').attr('disabled', false);\n    }\n\n    else if(checked == false)\n    {\n        $(this).val('Check All');\n        $('#remove').attr('disabled', true);\n    }\n});\n});\n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 15379060,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/15379060",
    "title": null,
    "body": "<pre><code>function isArray(x){\n    return ((x != null) &amp;&amp; (typeof x.push != \"undefined\"));\n}\n</code></pre>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1806628,
      "name": "Lajos Meszaros",
      "reputation": 2210
    }
  },
  {
    "soID": 20689525,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/20689525",
    "title": null,
    "body": "<p>I have been trying to do same (that is; capitalize the first letter in a string while it is being typed) using jQuery. I searched all through the web for the answer but couldn't find it. However I was able to get a work around using the <code>on()</code> function in jQuery like so:</p>\n\n<pre><code>$(\"#FirstNameField\").on(\"keydown\",function(e){\n    var str = $(\"#FirstNameField\").val();\n    if(str.substring()===str.substring(0,1)){\n        $(\"#FirstNameField\").val(str.substring(0,1).toUpperCase());\n    } \n});\n</code></pre>\n\n<p>This function actually capitalizes the first letter while the data entrant is typing continuously.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1814572,
      "name": "user28864",
      "reputation": 1166
    }
  },
  {
    "soID": 38360119,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/38360119",
    "title": null,
    "body": "<p>Also do note that, when extending string over multiple lines using forward backslash at end of each line, any extra characters (mostly spaces, tabs and comments added by mistake) after forward backslash will cause unexpected character error, which i took an hour to find out</p>\n\n<pre><code>var string = \"line1\\  // comment, space or tabs here raise error\nline2\";\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1817755,
      "name": "Prakash GPz",
      "reputation": 835
    }
  },
  {
    "soID": 13439711,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/13439711",
    "title": null,
    "body": "<p>I want to share my solution for the 'problem'. I haven't re-invented the wheel but tries to find a solution based on what JavaScript already does. The advantage is, that you get all implicit conversions for free. Setting the prototype property $ of String gives a very nice and compact syntax (see examples below). It is maybe not the most efficient way, but in most cases dealing with output it does not have to be super optimized.</p>\n\n<pre><code>String.form = function(str, arr) {\n    var i = -1;\n    function callback(exp, p0, p1, p2, p3, p4) {\n        if (exp=='%%') return '%';\n        if (arr[++i]===undefined) return undefined;\n        var exp  = p2 ? parseInt(p2.substr(1)) : undefined;\n        var base = p3 ? parseInt(p3.substr(1)) : undefined;\n        var val;\n        switch (p4) {\n            case 's': val = arr[i]; break;\n            case 'c': val = arr[i][0]; break;\n            case 'f': val = parseFloat(arr[i]).toFixed(exp); break;\n            case 'p': val = parseFloat(arr[i]).toPrecision(exp); break;\n            case 'e': val = parseFloat(arr[i]).toExponential(exp); break;\n            case 'x': val = parseInt(arr[i]).toString(base?base:16); break;\n            case 'd': val = parseFloat(parseInt(arr[i], base?base:10).toPrecision(exp)).toFixed(0); break;\n        }\n        val = typeof(val)=='object' ? JSON.stringify(val) : val.toString(base);\n        var sz = parseInt(p1); /* padding size */\n        var ch = p1 &amp;&amp; p1[0]=='0' ? '0' : ' '; /* isnull? */\n        while (val.length&lt;sz) val = p0 !== undefined ? val+ch : ch+val; /* isminus? */\n       return val;\n    }\n    var regex = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd])/g;\n    return str.replace(regex, callback);\n}\n\nString.prototype.$ = function() {\n    return String.form(this, Array.prototype.slice.call(arguments));\n}\n</code></pre>\n\n<p>Here are a few examples:</p>\n\n<pre><code>String.format(\"%s %s\", [ \"This is a string\", 11 ]))\nconsole.out(\"%s %s\".$(\"This is a string\", 11))\nvar arr = [ \"12.3\", 13.6 ]; console.out(\"Array: %s\".$(arr));\nvar obj = { test:\"test\", id:12 }; console.out(\"Object: %s\".$(obj));\nconsole.out(\"%c\", \"Test\");\nconsole.out(\"%5d\".$(12)); // '   12'\nconsole.out(\"%05d\".$(12)); // '00012'\nconsole.out(\"%-5d\".$(12)); // '12   '\nconsole.out(\"%5.2d\".$(123)); // '  120'\nconsole.out(\"%5.2f\".$(1.1)); // ' 1.10'\nconsole.out(\"%10.2e\".$(1.1)); // '   1.10e+0'\nconsole.out(\"%5.3p\".$(1.12345)); // ' 1.12'\nconsole.out(\"%5x\".$(45054)); // ' affe'\nconsole.out(\"%20#2x\".$(\"45054\")); // '    1010111111111110'\nconsole.out(\"%6#2d\".$(\"111\")); // '     7'\nconsole.out(\"%6#16d\".$(\"affe\")); // ' 45054'\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28814243,
    "parentID": 3437786,
    "url": "https://stackoverflow.com/q/28814243",
    "title": null,
    "body": "<p>Sometimes you need to see the width/height changes while resizing the window and inner content.</p>\n\n<p>For that I've written a little script that adds a log box that dynamicly monitors all the resizing and almost immediatly updates.</p>\n\n<p>It adds a valid HTML with fixed position and high z-index, but is small enough, so <strong>you can</strong>:</p>\n\n<ul>\n<li>use it on an <strong><em>actual</em> site</strong> </li>\n<li>use it for testing <strong>mobile/responsive</strong>\nviews</li>\n</ul>\n\n<p><br>Tested on: Chrome 40, IE11, but it is highly possible to work on other/older browsers too ... :)</p>\n\n<pre><code>  function gebID(id){ return document.getElementById(id); }\n  function gebTN(tagName, parentEl){ \n     if( typeof parentEl == \"undefined\" ) var parentEl = document;\n     return parentEl.getElementsByTagName(tagName);\n  }\n  function setStyleToTags(parentEl, tagName, styleString){\n    var tags = gebTN(tagName, parentEl);\n    for( var i = 0; i&lt;tags.length; i++ ) tags[i].setAttribute('style', styleString);\n  }\n  function testSizes(){\n    gebID( 'screen.Width' ).innerHTML = screen.width;\n    gebID( 'screen.Height' ).innerHTML = screen.height;\n\n    gebID( 'window.Width' ).innerHTML = window.innerWidth;\n    gebID( 'window.Height' ).innerHTML = window.innerHeight;\n\n    gebID( 'documentElement.Width' ).innerHTML = document.documentElement.clientWidth;\n    gebID( 'documentElement.Height' ).innerHTML = document.documentElement.clientHeight;\n\n    gebID( 'body.Width' ).innerHTML = gebTN(\"body\")[0].clientWidth;\n    gebID( 'body.Height' ).innerHTML = gebTN(\"body\")[0].clientHeight;  \n  }\n\n  var table = document.createElement('table');\n  table.innerHTML = \n       \"&lt;tr&gt;&lt;th&gt;SOURCE&lt;/th&gt;&lt;th&gt;WIDTH&lt;/th&gt;&lt;th&gt;x&lt;/th&gt;&lt;th&gt;HEIGHT&lt;/th&gt;&lt;/tr&gt;\"\n      +\"&lt;tr&gt;&lt;td&gt;screen&lt;/td&gt;&lt;td id='screen.Width' /&gt;&lt;td&gt;x&lt;/td&gt;&lt;td id='screen.Height' /&gt;&lt;/tr&gt;\"\n      +\"&lt;tr&gt;&lt;td&gt;window&lt;/td&gt;&lt;td id='window.Width' /&gt;&lt;td&gt;x&lt;/td&gt;&lt;td id='window.Height' /&gt;&lt;/tr&gt;\"\n      +\"&lt;tr&gt;&lt;td&gt;document&lt;br&gt;.documentElement&lt;/td&gt;&lt;td id='documentElement.Width' /&gt;&lt;td&gt;x&lt;/td&gt;&lt;td id='documentElement.Height' /&gt;&lt;/tr&gt;\"\n      +\"&lt;tr&gt;&lt;td&gt;document.body&lt;/td&gt;&lt;td id='body.Width' /&gt;&lt;td&gt;x&lt;/td&gt;&lt;td id='body.Height' /&gt;&lt;/tr&gt;\"\n  ;\n\n  gebTN(\"body\")[0].appendChild( table );\n\n  table.setAttribute(\n     'style',\n     \"border: 2px solid black !important; position: fixed !important;\"\n     +\"left: 50% !important; top: 0px !important; padding:10px !important;\"\n     +\"width: 150px !important; font-size:18px; !important\"\n     +\"white-space: pre !important; font-family: monospace !important;\"\n     +\"z-index: 9999 !important;background: white !important;\"\n  );\n  setStyleToTags(table, \"td\", \"color: black !important; border: none !important; padding: 5px !important; text-align:center !important;\");\n  setStyleToTags(table, \"th\", \"color: black !important; border: none !important; padding: 5px !important; text-align:center !important;\");\n\n  table.style.setProperty( 'margin-left', '-'+( table.clientWidth / 2 )+'px' );\n\n  setInterval( testSizes, 200 );\n</code></pre>\n\n<p><strong>EDIT:</strong> Now styles are applied only to logger table element - not to all tables - also this is a <strong>jQuery-free</strong> solution :)</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1835470,
      "name": "jave.web",
      "reputation": 4347
    }
  },
  {
    "soID": 19595286,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/19595286",
    "title": null,
    "body": "<p>Also, due to semantics, the way <code>for, in</code> treats arrays (i.e. the same as any other JavaScript object) is not aligned with other popular languages.</p>\n\n<pre><code>// C#\nchar[] a = new char[] {'A', 'B', 'C'};\nforeach (char x in a) System.Console.Write(x); //Output: \"ABC\"\n\n// Java\nchar[] a = {'A', 'B', 'C'};\nfor (char x : a) System.out.print(x);          //Output: \"ABC\"\n\n// PHP\n$a = array('A', 'B', 'C');\nforeach ($a as $x) echo $x;                    //Output: \"ABC\"\n\n// JavaScript\nvar a = ['A', 'B', 'C'];\nfor (var x in a) document.write(x);            //Output: \"012\"\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1836314,
      "name": "matpop",
      "reputation": 1470
    }
  },
  {
    "soID": 25734853,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/25734853",
    "title": null,
    "body": "<p>If you happen to be running in Node only, you could use the fs module to read in the multi-line string from a file:</p>\n\n<pre><code>var diagram;\nvar fs = require('fs');\nfs.readFile( __dirname + '/diagram.txt', function (err, data) {\n  if (err) {\n    throw err; \n  }\n  diagram = data.toString();\n});\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1837496,
      "name": "Charles Brandt",
      "reputation": 163
    }
  },
  {
    "soID": 24179268,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/24179268",
    "title": null,
    "body": "<p>If you use <a href=\"http://underscorejs.org/\">underscore.js</a> or <a href=\"http://lodash.com/\">Lo-Dash</a>, the <a href=\"https://github.com/epeli/underscore.string\">underscore.string</a> library provides string extensions, including capitalize:</p>\n\n<blockquote>\n  <p>_.capitalize(string) Converts first letter of the string to\n  uppercase.</p>\n</blockquote>\n\n<p>Example:</p>\n\n<pre><code>_.capitalize(\"foo bar\") == \"Foo bar\"\n</code></pre>\n",
    "score": 38,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1838058,
      "name": "andersh",
      "reputation": 3656
    }
  },
  {
    "soID": 23081552,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/23081552",
    "title": null,
    "body": "<p>Or you could use <a href=\"http://sugarjs.com/\" rel=\"noreferrer\">Sugar.js</a> <a href=\"http://sugarjs.com/api/String/capitalize\" rel=\"noreferrer\">capitalize()</a></p>\n\n<p>Example:</p>\n\n<pre><code>'hello'.capitalize()           -&gt; 'Hello'\n'hello kitty'.capitalize()     -&gt; 'Hello kitty'\n'hello kitty'.capitalize(true) -&gt; 'Hello Kitty'\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1838058,
      "name": "andersh",
      "reputation": 3656
    }
  },
  {
    "soID": 13585078,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/13585078",
    "title": null,
    "body": "<p>Here's another technique for creating divs with jQuery.</p>\n\n<p><strong><em>ELEMENT CLONING</em></strong></p>\n\n<p>Say you have an existing div in your page that you want to clone using jQuery (e.g. to duplicate an input a number of times in a form).  You would do so as follows.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$('#clone_button').click(function() {\r\n  $('#clone_wrapper div:first')\r\n  .clone()\r\n  .append('clone')\r\n  .appendTo($('#clone_wrapper'));\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;div id=\"clone_wrapper\"&gt;\r\n  &lt;div&gt;\r\n    Div\r\n  &lt;/div&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;button id=\"clone_button\"&gt;Clone me!&lt;/button&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1838763,
      "name": "Steven Moseley",
      "reputation": 10384
    }
  },
  {
    "soID": 29246176,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/29246176",
    "title": null,
    "body": "<h1><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\">Math.random()</a></h1>\n\n<p>From the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random\">Mozilla</a> Developer Network documentation:</p>\n\n<pre><code>// Returns a random integer between min and max\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n</code></pre>\n\n<p>Useful examples:</p>\n\n<pre><code>// 0 - 10\nMath.floor(Math.random() * 11);\n\n// 1 - 10\nMath.floor(Math.random() * 10) + 1;\n\n// 5 - 20\nMath.floor(Math.random() * 16) + 5;\n\n// -10 - (-2)\nMath.floor(Math.random() * 9) - 10;\n</code></pre>\n",
    "score": 40,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1843451,
      "name": "Lior Elrom",
      "reputation": 4992
    }
  },
  {
    "soID": 37594085,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/37594085",
    "title": null,
    "body": "<p>Loop throught localstorage</p>\n\n<pre><code>var retrievedData = localStorage.getItem(\"MyCart\");                 \n\n                    retrievedData.forEach(function (item) {\n                        console.log(item.itemid);\n                    })\n</code></pre>\n",
    "score": -4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1845417,
      "name": "Vinod John",
      "reputation": 7
    }
  },
  {
    "soID": 17186243,
    "parentID": 7202157,
    "url": "https://stackoverflow.com/q/17186243",
    "title": null,
    "body": "<p>Perhaps the shortest possible ways to evaluate an expression into \"10\" without digits are:</p>\n\n<p><code>+!+[] + [+[]]</code> // \"10\"</p>\n\n<p><code>-~[] + [+[]]</code>  // \"10\"</p>\n\n<p>//========== Explanation ==========\\\\</p>\n\n<p><code>+!+[]</code> : <code>+[]</code> Converts  to 0. <code>!0</code> converts to <code>true</code>. <code>+true</code> converts to 1.\n<code>-~[]</code> = <code>-(-1)</code> which is 1</p>\n\n<p><code>[+[]]</code> : <code>+[]</code> Converts  to 0. <code>[0]</code> is an array with a single element 0.</p>\n\n<p>Then JS evaluates the <code>1 + [0]</code>, thus <code>Number + Array</code> expression. Then the ECMA specification works: <code>+</code> operator converts both operands to a string by calling the <code>toString()/valueOf()</code> functions from the base <code>Object</code> prototype. It operates as an additive function if both operands of an expression are numbers only. The trick is that arrays easily convert their elements into a concatenated string representation.</p>\n\n<p>Some examples:</p>\n\n<pre><code>1 + {} //    \"1[object Object]\"\n1 + [] //    \"1\"\n1 + new Date() //    \"1Wed Jun 19 2013 12:13:25 GMT+0400 (Caucasus Standard Time)\"\n</code></pre>\n\n<p>There's a nice exception that two <code>Objects</code> addition results in <code>NaN</code>:</p>\n\n<pre><code>[] + []   //    \"\"\n[1] + [2] //    \"12\"\n{} + {}   //    NaN\n{a:1} + {b:2}     //    NaN\n[1, {}] + [2, {}] //    \"1,[object Object]2,[object Object]\"\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23941557,
    "parentID": 1098040,
    "url": "https://stackoverflow.com/q/23941557",
    "title": null,
    "body": "<p>If you are using <a href=\"http://underscorejs.org/\" rel=\"noreferrer\">underscore.js</a> library then object/array operations become simple. </p>\n\n<p>In your case _.has method can be used. Example:</p>\n\n<pre><code>yourArray = {age: \"10\"}\n\n_.has(yourArray, \"age\")\n</code></pre>\n\n<p>returns <strong>true</strong> </p>\n\n<p>But,</p>\n\n<pre><code>_.has(yourArray, \"invalidKey\")\n</code></pre>\n\n<p>returns <strong>false</strong></p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1847764,
      "name": "vatsal",
      "reputation": 2235
    }
  },
  {
    "soID": 26464582,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/26464582",
    "title": null,
    "body": "<p>this one line code helps </p>\n\n<pre><code>var a = {}; //if empty returns false\n(Object.getOwnPropertyNames != undefined ? Object.getOwnPropertyNames(a).length != 0 : (function(){for(var key in a) break; return (key != null) &amp;&amp; (key != undefined);})()) //Returns False\n\nvar a = {b:2} //if not empty returns true\n(Object.getOwnPropertyNames != undefined ? Object.getOwnPropertyNames(a).length != 0 : (function(){for(var key in a) break; return (key != null) &amp;&amp; (key != undefined);})()) //Returns true\n</code></pre>\n\n<p><strong>Object.getOwnPropertyNames</strong> is implemented in ECMA-5. the above line works in older browsers with a fallback function.</p>\n\n<p><a href=\"http://jsfiddle.net/oLezku0t/\" rel=\"nofollow\">JSFiddler</a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1848109,
      "name": "Nirus",
      "reputation": 1571
    }
  },
  {
    "soID": 45043171,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/45043171",
    "title": null,
    "body": "<p>Just to mention another way of \"bypassing\" it - AJAX proxy. Send request to your server to fetch the data from another origin and send the request back to you.</p>\n\n<p>I prefer this approach over JSONP because it has some potential security issues.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1849975,
      "name": "carobnodrvo",
      "reputation": 136
    }
  },
  {
    "soID": 24075794,
    "parentID": 2067472,
    "url": "https://stackoverflow.com/q/24075794",
    "title": null,
    "body": "<p>A simple example for the usage of JSONP.</p>\n\n<p><strong>client.html</strong></p>\n\n<pre><code>    &lt;html&gt;\n    &lt;head&gt;\n   &lt;/head&gt;\n     body&gt;\n\n\n    &lt;input type=\"button\" id=\"001\" onclick=gO(\"getCompany\") value=\"Company\"  /&gt;\n    &lt;input type=\"button\" id=\"002\" onclick=gO(\"getPosition\") value=\"Position\"/&gt;\n    &lt;h3&gt;\n    &lt;div id=\"101\"&gt;\n\n    &lt;/div&gt;\n    &lt;/h3&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n\n    var elem=document.getElementById(\"101\");\n\n    function gO(callback){\n\n    script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = 'http://localhost/test/server.php?callback='+callback;\n    elem.appendChild(script);\n    elem.removeChild(script);\n\n\n    }\n\n    function getCompany(data){\n\n    var message=\"The company you work for is \"+data.company +\"&lt;img src='\"+data.image+\"'/   &gt;\";\n    elem.innerHTML=message;\n}\n\n    function getPosition(data){\n    var message=\"The position you are offered is \"+data.position;\n    elem.innerHTML=message;\n    }\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>\n\n<p><strong>server.php</strong></p>\n\n<pre><code>  &lt;?php\n\n    $callback=$_GET[\"callback\"];\n    echo $callback;\n\n    if($callback=='getCompany')\n    $response=\"({\\\"company\\\":\\\"Google\\\",\\\"image\\\":\\\"xyz.jpg\\\"})\";\n\n    else\n    $response=\"({\\\"position\\\":\\\"Development Intern\\\"})\";\n    echo $response;\n\n    ?&gt;    \n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1859536,
      "name": "sarath joseph",
      "reputation": 815
    }
  },
  {
    "soID": 34246349,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/34246349",
    "title": null,
    "body": "<pre><code>    &lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n            &lt;meta charset=\"utf-8\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;script&gt;\n            /*\n\n                assuming that window.crypto.getRandomValues is available\n                the real range would be fron 0 to 1,998 instead of 0 to 2,000\n                See javascript documentation for explanation\n                https://developer.mozilla.org/en-US/docs/Web/API/RandomSource/getRandomValues\n            */\n            var array = new Uint8Array(2);\n            window.crypto.getRandomValues(array);\n            console.log(array[0] + array[1]);\n\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Uint8Array create a array filled with a number up to 3 digits which would be a maximum of 999. This code is very short.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1864539,
      "name": "happy",
      "reputation": 444
    }
  },
  {
    "soID": 26546723,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/26546723",
    "title": null,
    "body": "<pre><code>result = 'GBP|1800';\n//if pipe delimeter is there it returns true else false.\nif(result.indexOf(\"|\"))\n{\n    console.log('go default:' +result);\n    var cur = result.substring(0, 3);//returns GBP\n    console.log('go default cur:' +cur);\n    var minmum_fee = result.substring(4);//gets the substring amount\n    console.log('go default minmum_fee:' +minmum_fee);\n\n}\nelse\n{\n    console.log('not found:' +result);\n}\n</code></pre>\n",
    "score": -6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33473763,
    "parentID": 1279957,
    "url": "https://stackoverflow.com/q/33473763",
    "title": null,
    "body": "<p>You can use following code to move source to destination   </p>\n\n<pre><code> jQuery(\"#source\")\n       .detach()\n       .appendTo('#destination');\n</code></pre>\n\n<p>try working <a href=\"http://codepen.io/subodhghulaxe/pen/ojMgKw\" rel=\"noreferrer\">codepen</a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function move() {\r\n jQuery(\"#source\")\r\n   .detach()\r\n   .appendTo('#destination');\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>#source{\r\n  background-color:red;\r\n  color: #ffffff;\r\n  display:inline-block;\r\n  padding:35px;\r\n}\r\n#destination{\r\n  background-color:blue;\r\n  color: #ffffff;\r\n  display:inline-block;\r\n  padding:50px;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;div id=\"source\"&gt;\r\nI am source\r\n&lt;/div&gt;\r\n\r\n&lt;div id=\"destination\"&gt;\r\nI am destination\r\n&lt;/div&gt;\r\n\r\n&lt;button onclick=\"move();\"&gt;Move&lt;/button&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1868660,
      "name": "Subodh Ghulaxe",
      "reputation": 11080
    }
  },
  {
    "soID": 17810898,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/17810898",
    "title": null,
    "body": "<p>Use:</p>\n\n<pre><code>  $(document).ready(function () {\n      var urlParams = {};\n      (function () {\n          var match,\n          pl = /\\+/g, // Regex for replacing addition symbol with a space\n              search = /([^&amp;=]+)=?([^&amp;]*)/g,\n              decode = function (s) {\n                  return decodeURIComponent(s.replace(pl, \" \"));\n              },\n              query = window.location.search.substring(1);\n\n          while (match = search.exec(query))\n              urlParams[decode(match[1])] = decode(match[2]);\n      })();\n      if (urlParams[\"q1\"] === 1) {\n          return 1;\n      }\n</code></pre>\n\n<p>Please check and let me know your comments. Also refer to <em><a href=\"http://jquerybyexample.blogspot.com/2012/05/how-to-get-querystring-value-using.html\" rel=\"nofollow\">How to get querystring value using jQuery</a></em>.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22074727,
    "parentID": 1098040,
    "url": "https://stackoverflow.com/q/22074727",
    "title": null,
    "body": "<h1>quick answer</h1>\n\n<blockquote>\n  <p>How do I check if a particular key exists in a JavaScript object or array?\n  If a key doesn't exist and I try to access it, will it return false? Or throw an error?</p>\n</blockquote>\n\n<p>Accessing directly a missing property using (associative) array style or object style will return an <em>undefined</em> constant.</p>\n\n<h2>The slow and reliable <em>in</em> operator and <em>hasOwnProperty</em> method</h2>\n\n<p>As people have already mentioned here, you could have an object with a property associated with an \"undefined\" constant. </p>\n\n<pre><code> var bizzareObj = {valid_key:  undefined};\n</code></pre>\n\n<p>In that case, you will have to use <em>hasOwnProperty</em> or <em>in</em> operator to know if the key is really there. But, <em>but at what price?</em></p>\n\n<p>so, I tell you...</p>\n\n<p><em>in</em> operator and <em>hasOwnProperty</em> are \"methods\" that use Property Descriptor mechanism in Javascript (similar to Java reflection in the Java language).</p>\n\n<p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8.10\" rel=\"noreferrer\">http://www.ecma-international.org/ecma-262/5.1/#sec-8.10</a></p>\n\n<blockquote>\n  <p>The Property Descriptor type is used to explain the manipulation and reification of named property attributes. Values of the Property Descriptor type are records composed of named fields where each field’s name is an attribute name and its value is a corresponding attribute value as specified in 8.6.1. In addition, any field may be present or absent.</p>\n</blockquote>\n\n<p>On the other hand, calling an object method or key will use Javascript [[Get]] mechanism. That is far way faster!</p>\n\n<h2>benchmark</h2>\n\n<p><a href=\"http://jsperf.com/checking-if-a-key-exists-in-a-javascript-array\" rel=\"noreferrer\">http://jsperf.com/checking-if-a-key-exists-in-a-javascript-array</a></p>\n\n<p><img src=\"https://i.stack.imgur.com/GjzNU.png\" alt=\"Comparing key access in JS\">.</p>\n\nUsing <em>in</em> operator\n\n<pre><code>var result = \"Impression\" in array;\n</code></pre>\n\n<p>The result was </p>\n\n<pre><code>12,931,832 ±0.21% ops/sec      92% slower \n</code></pre>\n\nUsing hasOwnProperty\n\n<pre><code>var result = array.hasOwnProperty(\"Impression\")\n</code></pre>\n\n<p>The result was</p>\n\n<pre><code>16,021,758 ±0.45% ops/sec     91% slower\n</code></pre>\n\nAccessing elements directly (brackets style)\n\n<pre><code>var result = array[\"Impression\"] === undefined\n</code></pre>\n\n<p>The result was</p>\n\n<pre><code>168,270,439 ±0.13 ops/sec     0.02% slower \n</code></pre>\n\nAccessing elements directly (object style)\n\n<pre><code>var result = array.Impression  === undefined;\n</code></pre>\n\n<p>The result was</p>\n\n<pre><code>168,303,172 ±0.20%     fastest\n</code></pre>\n\n<h2>EDIT: What is the reason to assign to a property the <code>undefined</code> value?</h2>\n\n<p>That question puzzles me. In Javascript, there are at least two references for absent objects to avoid problems like this: <code>null</code> and <code>undefined</code>. </p>\n\n<p><code>null</code> is the primitive value that represents the intentional absence of any object value, or in short terms, the <strong>confirmed</strong> lack of value. On the other hand, <code>undefined</code> is unknown value (not defined). If there is a property that will be used later with a <em>proper</em> value consider use <code>null</code> reference instead of <code>undefined</code> because in the initial moment the property is <strong>confirmed</strong> to lack a value.</p>\n\n<p>Compare: </p>\n\n<pre><code>var a = {1: null}; \nconsole.log(a[1] === undefined); // output: false. I know the value at position 1 of a[] is absent and this was by design, i.e.:  the value is defined. \nconsole.log(a[0] === undefined); // output: true. I cannot say anything about a[0] value. In this case, the key 0 was not in a[].\n</code></pre>\n\n<h2>Final Advise</h2>\n\n<p>Avoid objects with <code>undefined</code> values. Check directly whenever possible and use <code>null</code> to initialize property values. Otherwise, use the slow <code>in</code> operator or <code>hasOwnProperty()</code> method.</p>\n",
    "score": 164,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1879686,
      "name": "rdllopes",
      "reputation": 2410
    }
  },
  {
    "soID": 15988938,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/15988938",
    "title": null,
    "body": "<p>The problem with the top answer on that question is that it's not-supported parameters placed after #, but sometimes it's needed to get this value also.</p>\n\n<p>I modified the answer to let it parse a full query string with a hash sign also:</p>\n\n<pre><code>var getQueryStringData = function(name) {\n    var result = null;\n    var regexS = \"[\\\\?&amp;#]\" + name + \"=([^&amp;#]*)\";\n    var regex = new RegExp(regexS);\n    var results = regex.exec('?' + window.location.href.split('?')[1]);\n    if (results != null) {\n        result = decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n    }\n    return result;\n};\n</code></pre>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 35367521,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/35367521",
    "title": null,
    "body": "<p>If you are using <a href=\"http://en.wikipedia.org/wiki/Node.js\">Node.js</a>, try it:</p>\n\n<pre><code>app.use(function(req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n    next();\n});\n</code></pre>\n\n<p>More information: <em><a href=\"http://enable-cors.org/server_expressjs.html\">CORS on ExpressJS</a></em></p>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1888929,
      "name": "Nguyen Tran",
      "reputation": 607
    }
  },
  {
    "soID": 9249884,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/9249884",
    "title": null,
    "body": "<pre><code>$(selector).attr('checked') !== undefined\n</code></pre>\n\n<p>This returns <code>true</code> if the input is checked and <code>false</code> if it is not.</p>\n",
    "score": 26,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 41730184,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/41730184",
    "title": null,
    "body": "<p>If you want the result as a list, then use:</p>\n\n<pre><code>x=[];\n$(\"#list_id\").children(':selected').each(function(){x.push($(this).text());})\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1896222,
      "name": "max",
      "reputation": 2814
    }
  },
  {
    "soID": 15130199,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/15130199",
    "title": null,
    "body": "<p>JavaScript code to use the <code>contains</code> method in an array:</p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;h2&gt;Use of contains() method&lt;/h2&gt;\n        &lt;script&gt;\n            Array.prototype.contains = function (element) {\n                for (var i = 0; i &lt; this.length; i++) {\n                    if (this[i] == element) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n            arr1 = [\"Rose\", \"India\", \"Technologies\"];\n            document.write(\"The condition is \"+arr1.contains(\"India\")+\"&lt;br&gt;\");\n        &lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;b&gt;[If the specified element is present in the array, it returns true otherwise\n    returns false.]&lt;/b&gt;\n\n&lt;/html&gt;\n</code></pre>\n\n<p>In the given code the <code>contains</code> method determines whether the specified element is present in the array or not. If the specified element is present in the array, it returns true, otherwise it returns false.</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1896608,
      "name": "Tarun Gupta",
      "reputation": 4243
    }
  },
  {
    "soID": 18425292,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/18425292",
    "title": null,
    "body": "<p>If you are using an updated version of jquery, you must go for <code>.prop</code> method to resolve your issue:</p>\n\n<p><code>$('#isAgeSelected').prop('checked')</code> will return <code>true</code> if checked and <code>false</code> if unchecked. I confirmed it and I came across this issue earlier. <code>$('#isAgeSelected').attr('checked')</code> and <code>$('#isAgeSelected').is('checked')</code> is returning <code>undefined</code> which is not a worthy answer for the situation. So do as given below.</p>\n\n<pre><code>if($('#isAgeSelected').prop('checked')) {\n    $(\"#txtAge\").show();\n} else {\n    $(\"#txtAge\").hide();\n}\n</code></pre>\n\n<p>Hope it helps :)- Thanks.</p>\n",
    "score": 71,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24844920,
    "parentID": 18641899,
    "url": "https://stackoverflow.com/q/24844920",
    "title": null,
    "body": "<p>Bower maintains a single version of modules, it only tries to help you select the correct/best one for you.</p>\n\n<blockquote>\n  <p><a href=\"https://stackoverflow.com/questions/15092345/javascript-dependency-management-npm-vs-bower-vs-volo/22101165#22101165\">Javascript dependency management : npm vs bower vs volo?</a></p>\n</blockquote>\n\n<p>NPM is better for node modules because there is a module system and you're working locally.\nBower is good for the browser because currently there is only the global scope, and you want to be very selective about the version you work with.</p>\n",
    "score": 42,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1904390,
      "name": "Sagivf",
      "reputation": 540
    }
  },
  {
    "soID": 18542979,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/18542979",
    "title": null,
    "body": "<p>So, the question is how to make a redirect page, and not how to redirect to a website?</p>\n\n<p>You only need to use JavaScript for this. Here is some tiny code that will create a dynamic redirect page.</p>\n\n<pre><code>&lt;script&gt;\n    var url = window.location.search.split('url=')[1]; // Get the URL after ?url=\n    if( url ) window.location.replace(url);\n&lt;/script&gt;\n</code></pre>\n\n<p>So say you just put this snippet into a <code>redirect/index.html</code> file on your website you can use it like so.</p>\n\n<blockquote>\n  <p><code>http://www.mywebsite.com/redirect?url=http://stackoverflow.com</code></p>\n</blockquote>\n\n<p>And if you go to that link it will automatically redirect you to <strong>stackoverflow.com</strong>.</p>\n\n<blockquote>\n  <p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window.location\" rel=\"noreferrer\">Link to Documentation</a></strong></p>\n</blockquote>\n\n<p><strong>And that's how you make a <em>Simple</em> redirect page with JavaScript</strong></p>\n\n<p>Edit:</p>\n\n<p>There is also one thing to note. I have added <code>window.location.replace</code> in my code because I think it suits a redirect page, but, you must know that when using <code>window.location.replace</code> and you get redirected, when you press the back button in your browser it will <strong>not</strong> got back to the redirect page, and it will go back to the page before it, take a look at this little demo thing.</p>\n\n<p>Example:</p>\n\n<blockquote>\n  <p>The process: <strong>store home</strong> => <strong>redirect page to google</strong> => <strong>google</strong></p>\n  \n  <p>When at google: <strong>google</strong> => <strong>back button in browser</strong> => <strong>store home</strong></p>\n</blockquote>\n\n<p>So, if this suits your needs then everything should be fine. If you want to include the redirect page in the browser history replace this </p>\n\n<pre><code>if( url ) window.location.replace(url);\n</code></pre>\n\n<p>with </p>\n\n<pre><code>if( url ) window.location.href = url;\n</code></pre>\n",
    "score": 51,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1907358,
      "name": "iConnor",
      "reputation": 13155
    }
  },
  {
    "soID": 15976557,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/15976557",
    "title": null,
    "body": "<p>I wrote a simple module that automates the job of importing/including module scripts in JavaScript. For detailed explanation of the code, refer to the blog post <em><a href=\"http://stamat.wordpress.com/2013/04/12/javascript-require-import-include-modules/\" rel=\"noreferrer\">JavaScript require / import / include modules</a></em>.</p>\n\n<pre><code>// ----- USAGE -----\n\nrequire('ivar.util.string');\nrequire('ivar.net.*');\nrequire('ivar/util/array.js');\nrequire('http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js');\n\nready(function(){\n    //Do something when required scripts are loaded\n});\n\n    //--------------------\n\nvar _rmod = _rmod || {}; //Require module namespace\n_rmod.LOADED = false;\n_rmod.on_ready_fn_stack = [];\n_rmod.libpath = '';\n_rmod.imported = {};\n_rmod.loading = {\n    scripts: {},\n    length: 0\n};\n\n_rmod.findScriptPath = function(script_name) {\n    var script_elems = document.getElementsByTagName('script');\n    for (var i = 0; i &lt; script_elems.length; i++) {\n        if (script_elems[i].src.endsWith(script_name)) {\n            var href = window.location.href;\n            href = href.substring(0, href.lastIndexOf('/'));\n            var url = script_elems[i].src.substring(0, script_elems[i].length - script_name.length);\n            return url.substring(href.length+1, url.length);\n        }\n    }\n    return '';\n};\n\n_rmod.libpath = _rmod.findScriptPath('script.js'); //Path of your main script used to mark\n                                                   //the root directory of your library, any library.\n\n\n_rmod.injectScript = function(script_name, uri, callback, prepare) {\n\n    if(!prepare)\n        prepare(script_name, uri);\n\n    var script_elem = document.createElement('script');\n    script_elem.type = 'text/javascript';\n    script_elem.title = script_name;\n    script_elem.src = uri;\n    script_elem.async = true;\n    script_elem.defer = false;\n\n    if(!callback)\n        script_elem.onload = function() {\n            callback(script_name, uri);\n        };\n    document.getElementsByTagName('head')[0].appendChild(script_elem);\n};\n\n_rmod.requirePrepare = function(script_name, uri) {\n    _rmod.loading.scripts[script_name] = uri;\n    _rmod.loading.length++;\n};\n\n_rmod.requireCallback = function(script_name, uri) {\n    _rmod.loading.length--;\n    delete _rmod.loading.scripts[script_name];\n    _rmod.imported[script_name] = uri;\n\n    if(_rmod.loading.length == 0)\n        _rmod.onReady();\n};\n\n_rmod.onReady = function() {\n    if (!_rmod.LOADED) {\n        for (var i = 0; i &lt; _rmod.on_ready_fn_stack.length; i++){\n            _rmod.on_ready_fn_stack[i]();\n        });\n        _rmod.LOADED = true;\n    }\n};\n\n_.rmod = namespaceToUri = function(script_name, url) {\n    var np = script_name.split('.');\n    if (np.getLast() === '*') {\n        np.pop();\n        np.push('_all');\n    }\n\n    if(!url)\n        url = '';\n\n    script_name = np.join('.');\n    return  url + np.join('/')+'.js';\n};\n\n//You can rename based on your liking. I chose require, but it\n//can be called include or anything else that is easy for you\n//to remember or write, except \"import\", because it is reserved\n//for future use.\nvar require = function(script_name) {\n    var uri = '';\n    if (script_name.indexOf('/') &gt; -1) {\n        uri = script_name;\n        var lastSlash = uri.lastIndexOf('/');\n        script_name = uri.substring(lastSlash+1, uri.length);\n    } \n    else {\n        uri = _rmod.namespaceToUri(script_name, ivar._private.libpath);\n    }\n\n    if (!_rmod.loading.scripts.hasOwnProperty(script_name)\n     &amp;&amp; !_rmod.imported.hasOwnProperty(script_name)) {\n        _rmod.injectScript(script_name, uri,\n            _rmod.requireCallback,\n                _rmod.requirePrepare);\n    }\n};\n\nvar ready = function(fn) {\n    _rmod.on_ready_fn_stack.push(fn);\n};\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1909864,
      "name": "stamat",
      "reputation": 739
    }
  },
  {
    "soID": 26255127,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/26255127",
    "title": null,
    "body": "<p>Use this function Number(x).toFixed(2);</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1911824,
      "name": "Harish.bazee",
      "reputation": 217
    }
  },
  {
    "soID": 18998064,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/18998064",
    "title": null,
    "body": "<p>If you got an Object with Functions you can do it with JSONfn, see <a href=\"http://www.eslinstructor.net/jsonfn/\" rel=\"nofollow\">http://www.eslinstructor.net/jsonfn/</a>.</p>\n\n<pre><code>var obj= {\n    name:'Marvin',\n    getName :  function(){\n      return this.name;\n    }\n}\nvar cobj = JSONfn.parse(JSONfn.stringify(obj));\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 18178676,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/18178676",
    "title": null,
    "body": "<p>If you only have 1 set of radio buttons on 1 form, the jQuery code is as simple as this:</p>\n\n<pre><code>$( \"input:checked\" ).val()\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1925485,
      "name": "Randy Greencorn",
      "reputation": 2222
    }
  },
  {
    "soID": 22688912,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/22688912",
    "title": null,
    "body": "<p>I use this one:</p>\n\n<pre><code>String.prototype.format = function() {\n    var newStr = this, i = 0;\n    while (/%s/.test(newStr))\n        newStr = newStr.replace(\"%s\", arguments[i++])\n\n    return newStr;\n}\n</code></pre>\n\n<p>Then I call it:</p>\n\n<pre><code>\"&lt;h1&gt;%s&lt;/h1&gt;&lt;p&gt;%s&lt;/p&gt;\".format(\"Header\", \"Just a test!\");\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 32108184,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/32108184",
    "title": null,
    "body": "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys#Browser_compatibility\" rel=\"noreferrer\">ECMA 5+</a>:</p>\n\n<pre><code>// because Object.keys(new Date()).length === 0;\n// we have to do some additional check\nObject.keys(obj).length === 0 &amp;&amp; obj.constructor === Object\n</code></pre>\n\n<p>Pre-ECMA 5:</p>\n\n<pre><code>function isEmpty(obj) {\n    for(var prop in obj) {\n        if(obj.hasOwnProperty(prop))\n            return false;\n    }\n\n    return JSON.stringify(obj) === JSON.stringify({});\n}\n</code></pre>\n\n<p><a href=\"http://api.jquery.com/jQuery.isEmptyObject/\" rel=\"noreferrer\">jQuery</a>:</p>\n\n<pre><code>jQuery.isEmptyObject({}); // true\n</code></pre>\n\n<p><a href=\"https://lodash.com/docs#isEmpty\" rel=\"noreferrer\">lodash</a>:</p>\n\n<pre><code>_.isEmpty({}); // true\n</code></pre>\n\n<p><a href=\"http://underscorejs.org/#isEmpty\" rel=\"noreferrer\">Underscore</a>:</p>\n\n<pre><code>_.isEmpty({}); // true\n</code></pre>\n\n<p><a href=\"https://github.com/hapijs/hoek\" rel=\"noreferrer\">Hoek</a></p>\n\n<pre><code>Hoek.deepEqual({}, {}); // true\n</code></pre>\n\n<p><a href=\"http://docs.sencha.com/extjs/6.0.2/modern/Ext.html#method-isEmpty\" rel=\"noreferrer\">ExtJS</a></p>\n\n<pre><code>Ext.Object.isEmpty({}); // true\n</code></pre>\n\n<p><a href=\"https://docs.angularjs.org/api/ng/function/angular.equals\" rel=\"noreferrer\">AngularJS (version 1)</a></p>\n\n<pre><code>angular.equals({}, {}); // true\n</code></pre>\n\n<p><a href=\"http://ramdajs.com/docs/#isEmpty\" rel=\"noreferrer\">Ramda</a></p>\n\n<pre><code>R.isEmpty({}); // true\n</code></pre>\n",
    "score": 1891,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21600238,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/21600238",
    "title": null,
    "body": "<p><strong># HTML Page Redirect Using jQuery/JavaScript</strong></p>\n\n<p>Try this example code:</p>\n\n<pre><code>function YourJavaScriptFunction()\n{\n    var i = $('#login').val();\n    if (i == 'login')\n        window.location = \"login.php\";\n    else\n        window.location = \"Logout.php\";\n}\n</code></pre>\n\n<p>If you want to give a complete URL as <strong><code>window.location = \"www.google.co.in\";</code></strong>.</p>\n",
    "score": 57,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1931001,
      "name": "Sakthi Karthik",
      "reputation": 1347
    }
  },
  {
    "soID": 34491966,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/34491966",
    "title": null,
    "body": "<p>Using Object.keys(obj).length (as suggested above for ECMA 5+) is 10 times slower for empty objects!  keep with the old school (for...in) option.</p>\n\n<p>Tested under Node, Chrom, Firefox and IE 9, it becomes evident that for most use cases:</p>\n\n<ul>\n<li><strong>(for...in...) is the fastest option to use!</strong> </li>\n<li><strong>Object.keys(obj).length is 10 times slower for empty objects</strong></li>\n<li><strong>JSON.stringify(obj).length is always the slowest</strong> (not suprising)</li>\n<li><strong>Object.getOwnPropertyNames(obj).length takes longer than Object.keys(obj).length</strong> can be much longer on some systems.</li>\n</ul>\n\n<p>Bottom line performance wise, use:</p>\n\n<pre><code>function isEmpty(obj) { \n   for (var x in obj) { return false; }\n   return true;\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>function isEmpty(obj) {\n   for (var x in obj) { if (obj.hasOwnProperty(x))  return false; }\n   return true;\n}\n</code></pre>\n\n<p>See detailed testing results and test code at <a href=\"https://stackoverflow.com/questions/4994201/is-object-empty/34491287#34491287\">Is object empty?</a></p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1931538,
      "name": "davidhadas",
      "reputation": 1139
    }
  },
  {
    "soID": 20883439,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/20883439",
    "title": null,
    "body": "<p>This is a function to check if a substring is existing in a string or not:</p>\n\n<pre><code>function isStringMatch(str, str_to_match) {\n    return (str.indexOf(str_to_match) &gt; -1);\n}\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21323513,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/21323513",
    "title": null,
    "body": "<p>MarkG and Lavamantis offered a much better solution than the one that has been accepted. It's a shame they don't get more upvotes!</p>\n\n<p>Here is the function I use to solve the floating point decimals issues <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round#Example%3a_Decimal_rounding\">also based on MDN</a>. It is even more generic (but less concise) than Lavamantis's solution:</p>\n\n<pre><code>function round(value, exp) {\n  if (typeof exp === 'undefined' || +exp === 0)\n    return Math.round(value);\n\n  value = +value;\n  exp  = +exp;\n\n  if (isNaN(value) || !(typeof exp === 'number' &amp;&amp; exp % 1 === 0))\n    return NaN;\n\n  // Shift\n  value = value.toString().split('e');\n  value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp)));\n\n  // Shift back\n  value = value.toString().split('e');\n  return +(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp));\n}\n</code></pre>\n\n<p>Use it with:</p>\n\n<pre><code>round(10.8034, 2);      // Returns 10.8\nround(1.275, 2);        // Returns 1.28\nround(1.27499, 2);      // Returns 1.27\nround(1.2345678e+2, 2); // Returns 123.46\n</code></pre>\n\n<p>Compared to Lavamantis's solution, we can do...</p>\n\n<pre><code>round(1234.5678, -2); // Returns 1200\nround(\"123.45\");      // Returns 123\n</code></pre>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1935861,
      "name": "astorije",
      "reputation": 1547
    }
  },
  {
    "soID": 24341370,
    "parentID": 14994391,
    "url": "https://stackoverflow.com/q/24341370",
    "title": null,
    "body": "<p>As a JavaScript MV* beginner and purely focusing on the application architecture (not the server/client-side matters), I would certainly recommend the following resource (which I am surprised wasn't mentioned yet): <a href=\"http://addyosmani.com/resources/essentialjsdesignpatterns/book/\">JavaScript Design Patterns</a>, by Addy Osmani, as an introduction to different <strong>JavaScript Design Patterns</strong>. The terms used in this answer are taken from the linked document above. I'm not going to repeat what was worded really well in the accepted answer. Instead, this answer links back to the <strong>theoretical backgrounds</strong> which power AngularJS (and other libraries).</p>\n\n<p>Like me, you will quickly realize that AngularJS (or <a href=\"http://en.wikipedia.org/wiki/Ember.js\">Ember.js</a>, Durandal, &amp; other MV* frameworks for that matter) is one complex framework assembling many of the different JavaScript design patterns.</p>\n\n<p>I found it easier also, to test <strong>(1)</strong> native JavaScript code and <strong>(2)</strong> smaller libraries for each one of these patterns <strong>separately</strong> before diving into one global framework. This allowed me to better understand which crucial issues a framework adresses (because you are personally faced with the problem).</p>\n\n<p>For example:</p>\n\n<ul>\n<li><a href=\"https://www.google.be/search?q=js+oop\">JavaScript Object-oriented Programming</a> (this is a Google search link). It is not a library, but certainly a prerequisite to any application programming. It taught me the native implementations of the <strong>prototype, constructor, singleton &amp; decorator patterns</strong></li>\n<li><a href=\"http://jquery.com\">jQuery</a>/ <a href=\"http://underscorejs.org\">Underscore</a> for the <strong>facade pattern</strong> (like WYSIWYG's for manipulating the DOM)</li>\n<li><a href=\"http://prototypejs.org\">Prototype.js</a> for the <strong>prototype/ constructor/ mixin pattern</strong></li>\n<li><a href=\"http://requirejs.org\">RequireJS</a>/ <a href=\"https://github.com/cujojs/curl\">Curl.js</a> for the <strong>module pattern/ AMD</strong></li>\n<li><a href=\"http://knockoutjs.com\">KnockoutJS</a> for the <strong>observable, publish/subscribe pattern</strong></li>\n</ul>\n\n<p>NB: This list is not complete, nor 'the best libraries'; they just happen to be the libraries I used. These libraries also include more patterns, the ones mentioned are just their main focuses or original intents. If you feel something is missing from this list, please do mention it in the comments, and I will be glad to add it.</p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1938203,
      "name": "Tyblitz",
      "reputation": 3703
    }
  },
  {
    "soID": 23209359,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/23209359",
    "title": null,
    "body": "<p>Setter:</p>\n\n<pre><code>$(\"#chkmyElement\")[0].checked = true;\n</code></pre>\n\n<p>Getter:</p>\n\n<pre><code>if($(\"#chkmyElement\")[0].checked) {\n   alert(\"enabled\");\n} else {\n   alert(\"disabled\");\n}\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 34846375,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/34846375",
    "title": null,
    "body": "<p>From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" rel=\"noreferrer\"><strong>the MDN docs on Function.prototype.apply()</strong></a> :</p>\n\n<blockquote>\n  <p>The apply() method calls a function with a given <code>this</code> value and\n  arguments provided as an array (or an array-like object).</p>\n  \n  <h3>Syntax</h3>\n\n<pre><code>fun.apply(thisArg, [argsArray])\n</code></pre>\n</blockquote>\n\n<p>From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" rel=\"noreferrer\"><strong>the MDN docs on Function.prototype.call()</strong></a> :</p>\n\n<blockquote>\n  <p>The call() method calls a function with a given <code>this</code> value and arguments provided individually.</p>\n  \n  <h3>Syntax</h3>\n\n<pre><code>fun.call(thisArg[, arg1[, arg2[, ...]]])\n</code></pre>\n</blockquote>\n\n<p>From <a href=\"http://odetocode.com/blogs/scott/archive/2007/07/04/function-apply-and-function-call-in-javascript.aspx\" rel=\"noreferrer\"><strong>Function.apply and Function.call in JavaScript</strong></a> :</p>\n\n<blockquote>\n  <p>The apply() method is identical to call(), except apply() requires an\n  array as the second parameter. The array represents the arguments for\n  the target method.</p>\n</blockquote>\n\n<hr>\n\n<h3>Code example :</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var doSomething = function() {\r\n    var arr = [];\r\n    for(i in arguments) {\r\n        if(typeof this[arguments[i]] !== 'undefined') {\r\n            arr.push(this[arguments[i]]);\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nvar output = function(position, obj) {\r\n    document.body.innerHTML += '&lt;h3&gt;output ' + position + '&lt;/h3&gt;' + JSON.stringify(obj) + '\\n&lt;br&gt;\\n&lt;br&gt;&lt;hr&gt;';\r\n}\r\n\r\noutput(1, doSomething(\r\n    'one',\r\n    'two',\r\n    'two',\r\n    'one'\r\n));\r\n\r\noutput(2, doSomething.apply({one : 'Steven', two : 'Jane'}, [\r\n    'one',\r\n    'two',\r\n    'two',\r\n    'one'\r\n]));\r\n\r\noutput(3, doSomething.call({one : 'Steven', two : 'Jane'},\r\n    'one',\r\n    'two',\r\n    'two',\r\n    'one'\r\n));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>See also <a href=\"https://jsfiddle.net/k7y5o0d6/9/\" rel=\"noreferrer\"><strong>this Fiddle</strong></a>.</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1946501,
      "name": "John Slegers",
      "reputation": 19424
    }
  },
  {
    "soID": 34981197,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/34981197",
    "title": null,
    "body": "<h2>The basics</h2>\n\n<p>If you're happy with the format <code>Sun Jan 24 2016 21:23:07 GMT+0100 (CET)</code>, you could just use this code :</p>\n\n<pre><code>var today = new Date();\n</code></pre>\n\n<h2>Date.prototype.toLocaleDateString()</h2>\n\n<p>If you want to format your output, consider using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\" rel=\"nofollow\"><strong><code>Date.prototype.toLocaleDateString()</code></strong></a> :</p>\n\n<pre><code>var today = new Date().toLocaleDateString('de-DE', {     \n    weekday: 'long', \n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n});\n</code></pre>\n\n<p>If you executed that code today (january 24ᵗʰ, 2016) on a modern browser, it would produce the string <code>Sonntag, 24. Januar 2016</code>. Older browsers may generate a different result, though, as eg. IE&lt;11 doesn't support locales or options arguments.</p>\n\n<h2>Going custom</h2>\n\n<p>If <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\" rel=\"nofollow\"><strong><code>Date.prototype.toLocaleDateString()</code></strong></a> isn't flexible enough to fulfill whatever need you may have, you might want to consider creating a custom Date object that looks like this :</p>\n\n<pre><code>var DateObject = (function() {\n    var monthNames = [\n      \"January\", \"February\", \"March\",\n      \"April\", \"May\", \"June\", \"July\",\n      \"August\", \"September\", \"October\",\n      \"November\", \"December\"\n    ];\n    var date = function(str) {\n        this.set(str);\n    };\n    date.prototype = {\n        set : function(str) {\n            var dateDef = str ? new Date(str) : new Date();\n            this.day = dateDef.getDate();\n            this.dayPadded = (this.day &lt; 10) ? (\"0\" + this.day) : \"\" + this.day;\n            this.month = dateDef.getMonth() + 1;\n            this.monthPadded = (this.month &lt; 10) ? (\"0\" + this.month) : \"\" + this.month;\n            this.monthName = monthNames[this.month - 1];\n            this.year = dateDef.getFullYear();\n        }\n    };\n    return date;\n})();\n</code></pre>\n\n<p>If you included that code and executed <code>new DateObject()</code> today (january 24ᵗʰ, 2016), it would produce an object with the following properties :</p>\n\n<pre><code>day: 24\ndayPadded: \"24\"\nmonth: 1\nmonthPadded: \"01\"\nmonthName: \"January\"\nyear: 2016\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1946501,
      "name": "John Slegers",
      "reputation": 19424
    }
  },
  {
    "soID": 35538937,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/35538937",
    "title": null,
    "body": "<h3><code>String.prototype.indexOf()</code> or <code>String.prototype.search()</code>?!</h3>\n\n<p>As others have already mentioned, JavaScript strings have both an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\" rel=\"nofollow noreferrer\"><code>indexOf</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search\" rel=\"nofollow noreferrer\"><code>search</code></a> method.</p>\n\n<p>The key difference between both, is that <code>indexOf</code> is for plain substrings only, whereas <code>search</code> also supports regular expressions. Of course, an upside of using <code>indexOf</code> is that it's faster.</p>\n\n<p>See also <em><a href=\"https://stackoverflow.com/questions/354110/in-javascript-what-is-the-difference-between-indexof-and-search\">In JavaScript, what is the difference between indexOf() and search()?</a></em>.</p>\n\n<h3>Implementing your own <code>String.prototype.contains()</code> method</h3>\n\n<p>If you want to add your own <code>contains</code> method to every string, the best way to do it would be <a href=\"https://stackoverflow.com/users/497418/zzzzbov\">@zzzzBov</a>'s approach:</p>\n\n<pre><code>if (!String.prototype.contains) {\n    String.prototype.contains = function (arg) {\n        return !!~this.indexOf(arg);\n    };\n}\n</code></pre>\n\n<p>You would use it like this:</p>\n\n<pre><code>'Hello World'.contains('orl');\n</code></pre>\n\n<h3>Implementing a custom utility library</h3>\n\n<p>It is generally frowned upon to add your own custom methods to standard objects in JavaScript, for example, because it might break forward compatibility.</p>\n\n<p>If you really want your own <code>contains</code> method and/or other custom string methods, it's better to create your own utility library and add your custom string methods to that library:</p>\n\n<pre><code>var helper = {};\n\nhelper.string = {\n    contains : function (haystack, needle) {\n        return !!~haystack.indexOf(needle);\n    },\n    ...\n};\n</code></pre>\n\n<p>You would use it like this:</p>\n\n<pre><code>helper.string.contains('Hello World', 'orl');\n</code></pre>\n\n<h3>Using a third-party utility library</h3>\n\n<p>If you don't want to create your own custom helper library, there is - of course - always the option of using a third-party utility library. As mentioned by <a href=\"https://stackoverflow.com/users/1129950/nachtigall\">@nachtigall</a>, the most popular ones are <a href=\"https://lodash.com/\" rel=\"nofollow noreferrer\">Lodash</a> and <a href=\"http://underscorejs.org/\" rel=\"nofollow noreferrer\">Underscore.js</a>.</p>\n\n<p>In Lodash, you could use <code>_.includes()</code>, which you use like this:</p>\n\n<pre><code>_.includes('Hello World', 'orl');\n</code></pre>\n\n<p>In Underscore.js, you could use <code>_.str.include()</code>, which you use like this :</p>\n\n<pre><code>_.str.include('Hello World', 'orl');\n</code></pre>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 35541836,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/35541836",
    "title": null,
    "body": "<p>I don't think I have much to add to eg. <a href=\"https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-such-a-bad-idea/500531#500531\">Triptych's answer</a> or <a href=\"https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-such-a-bad-idea/4261096#4261096\">CMS's answer</a> on why using <code>for-in</code> should be avoided in some cases.</p>\n\n<p>I do, however, would like to add that <strong>in modern browsers</strong> there is an alternative to <code>for-in</code> that can be used in those cases where <code>for-in</code> can't be used. That alternative is <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\" rel=\"nofollow noreferrer\"><code>for-of</code></a> :</p>\n\n<pre><code>for (var item of items) {\n    console.log(item);\n}\n</code></pre>\n\n<hr>\n\n<h3>Note :</h3>\n\n<p>Unfortunately, no version of Internet Explorer supports this feature (<a href=\"https://www.microsoft.com/en-us/windows/microsoft-edge\" rel=\"nofollow noreferrer\">Edge 12+</a> does), so you'll have to wait a bit longer until you can use it in your client side production code. However, it should be safe to use in your server side JS code (if you use <a href=\"https://nodejs.org/en/\" rel=\"nofollow noreferrer\">Node.js</a>).</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1946501,
      "name": "John Slegers",
      "reputation": 19424
    }
  },
  {
    "soID": 35585468,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/35585468",
    "title": null,
    "body": "<h3>What's the difference between <code>let</code> and <code>var</code>?</h3>\n\n<ul>\n<li>A variable defined using a <code>var</code> statement is known throughout <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/function\"><strong>the function</strong></a> it is defined in, from the moment it is defined onward.</li>\n<li>A variable defined using a <code>let</code> statement is only known in <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/block\"><strong>the block</strong></a> it is defined in, from the moment it is defined onward.</li>\n</ul>\n\n<p>To understand the difference, consider the following code:</p>\n\n<pre><code>function loop(arr) {\n    // i IS NOT known here\n    // j IS NOT known here\n\n    for( var i = 0; i &lt; arr.length; i++ ) {\n        // i IS known here\n    }\n\n    // i IS known here\n    // j IS NOT known here\n\n    for( let j = 0; j &lt; arr.length; j++ ) {\n        // j IS known here\n    }\n\n    // i IS known here\n    // j IS NOT known here\n}\n</code></pre>\n\n<p>Here, we can see that our variable <code>j</code> is only known in the first <code>for</code> loop, but not before and after. Yet, our variable <code>i</code> is known in the entire function from the moment it is defined onward.</p>\n\n<hr>\n\n<h3>Is it safe to use <code>let</code> today?</h3>\n\n<p>Some people would argue that in the future we'll ONLY use let statements and that var statements will become obsolete. JavaScript guru <a href=\"https://twitter.com/getify\"><strong>Kyle Simpson</strong></a> wrote <a href=\"https://davidwalsh.name/for-and-against-let\"><strong>a very elaborate article on why that's not the case</strong></a>.</p>\n\n<p>Today, however, that is definitely not the case. In fact, we need actually to ask ourselves whether it's safe to use the <code>let</code> statement. The answer to that question depends on your environment:</p>\n\n<ul>\n<li><p>If you're writing server-side JavaScript code (<a href=\"https://nodejs.org/en/\"><strong>Node.js</strong></a>), you can safely use the <code>let</code> statement.</p></li>\n<li><p>If you're writing client-side JavaScript code and use a transpiler (like <a href=\"https://github.com/google/traceur-compiler\"><strong>Traceur</strong></a>), you can safely use the <code>let</code> statement, however your code is likely to be anything but optimal with respect to performance.</p></li>\n<li><p>If you're writing client-side JavaScript code and don't use a transpiler, you need to consider browser support.</p>\n\n<p>Today, Feb 23 2016, these are some browsers that either don't support <code>let</code> or have only partial support:</p>\n\n<ul>\n<li><strong>Internet explorer 10</strong> and below (no support)</li>\n<li><strong>Firefox 43</strong> and below (no support)</li>\n<li><strong>Safari 9</strong> and below (no support)</li>\n<li><strong>Opera Mini 8</strong> and below (no support)</li>\n<li><strong>Android browser 4</strong> and below (no support)</li>\n<li><strong>Opera 36</strong> and below (partial support)</li>\n<li><strong>Chrome 51</strong> and below (partial support)</li>\n</ul></li>\n</ul>\n\n<p><a href=\"https://i.stack.imgur.com/FVsEQ.png\"><img src=\"https://i.stack.imgur.com/FVsEQ.png\" alt=\"Enter image description here\"></a></p>\n\n<hr>\n\n<h3>How to keep track of browser support</h3>\n\n<p>For an up-to-date overview of which browsers support the <code>let</code> statement at the time of your reading this answer, see <a href=\"http://caniuse.com/#search=let\"><strong>this <code>Can I Use</code> page</strong></a>.</p>\n",
    "score": 57,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1946501,
      "name": "John Slegers",
      "reputation": 19424
    }
  },
  {
    "soID": 35707349,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/35707349",
    "title": null,
    "body": "<h3>Intro</h3>\n\n<p>Since my time in college, I've programmed in Java, JavaScript, Pascal, <a href=\"https://en.wikipedia.org/wiki/ABAP\" rel=\"nofollow noreferrer\">ABAP</a>, PHP, Progress 4GL, C/C++ and possibly a few other languages I can't think of right now.</p>\n\n<p>While they all have their own linguistic idiosyncrasies, each of these languages share many of the same basic concepts. Such concepts include procedures / functions, <code>IF</code>-statements, <code>FOR</code>-loops, and <code>WHILE</code>-loops.</p>\n\n<hr>\n\n<h3>A traditional <code>for</code>-loop</h3>\n\n<p>A traditional <code>for</code> loop has three components:</p>\n\n<ol>\n<li><strong>The initialization:</strong> executed before the look block is executed the first time</li>\n<li><strong>The condition:</strong> checks a condition every time before the loop block is executed, and quits the loop if false</li>\n<li><strong>The afterthought:</strong> performed every time after the loop block is executed</li>\n</ol>\n\n<p>These three components are separated from each other by a <code>;</code> symbol. Content for each of these three components is optional, which means that the following is the most minimal <code>for</code> loop possible:</p>\n\n<pre><code>for (;;) {\n    // Do stuff\n}\n</code></pre>\n\n<p>Of course, you will need to include an <code>if(condition === true) { break; }</code>  or an <code>if(condition === true) { return; }</code> somewhere inside that <code>for</code>-loop to get it to stop running.</p>\n\n<p>Usually, though, the initialization is used to declare an index, the condition is used to compare that index with a minimum or maximum value, and the afterthought is used to increment the index:</p>\n\n<pre><code>for (var i = 0, length = 10; i &lt; length; i++) {\n    console.log(i);\n}\n</code></pre>\n\n<hr>\n\n<h3>Using a traditional <code>for</code> loop to loop through an array</h3>\n\n<p>The traditional way to loop through an array, is this:</p>\n\n<pre><code>for (var i = 0, length = myArray.length; i &lt; length; i++) {\n    console.log(myArray[i]);\n}\n</code></pre>\n\n<p>Or, if you prefer to loop backwards, you do this:</p>\n\n<pre><code>for (var i = myArray.length - 1; i &gt; -1; i--) {\n    console.log(myArray[i]);\n}\n</code></pre>\n\n<p>There are, however, many variations possible, like for example this one:</p>\n\n<pre><code>for (var key = 0, value = myArray[key], length = myArray.length; key &lt; length; value = myArray[++key]) {\n    console.log(value);\n}\n</code></pre>\n\n<p>... or this one ...</p>\n\n<pre><code>var i = 0, length = myArray.length;\nfor (; i &lt; length;) {\n    console.log(myArray[i]);\n    i++;\n}\n</code></pre>\n\n<p>... or this one:</p>\n\n<pre><code>var key = 0, value;\nfor (; value = myArray[key++];){\n    console.log(value);\n}\n</code></pre>\n\n<p>Whichever works best is largely a matter of both personal taste and the specific use case you're implementing.</p>\n\n<p>Note that each of these variations is supported by all browsers, including very very old ones!</p>\n\n<hr>\n\n<h3>A <code>while</code> loop</h3>\n\n<p>One alternative to a <code>for</code> loop is a <code>while</code> loop. To loop through an array, you could do this:</p>\n\n<pre><code>var key = 0;\nwhile(value = myArray[key++]){\n    console.log(value);\n}\n</code></pre>\n\n<p>Like traditional <code>for</code> loops, <code>while</code> loops are supported by even the oldest of browsers.</p>\n\n<p>Also, note that every while loop can be rewritten as a <code>for</code> loop. For example, the <code>while</code> loop hereabove behaves the exact same way as this <code>for</code>-loop:</p>\n\n<pre><code>for(var key = 0; value = myArray[key++];){\n    console.log(value);\n}\n</code></pre>\n\n<hr>\n\n<h3><code>For...in</code> and <code>for...of</code></h3>\n\n<p>In JavaScript, you can also do this:</p>\n\n<pre><code>for (i in myArray) {\n    console.log(myArray[i]);\n}\n</code></pre>\n\n<p>This should be used with care, however, as it doesn't behave the same as a traditional <code>for</code> loop in all cases, and there are potential side-effects that need to be considered. See <strong><a href=\"https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-such-a-bad-idea\">Why is using &quot;for...in&quot; with array iteration a bad idea?</a></strong> for more details.</p>\n\n<p>As an alternative to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\" rel=\"nofollow noreferrer\"><strong><code>for...in</code></strong></a>, there's now also for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\" rel=\"nofollow noreferrer\"><strong><code>for...of</code></strong></a>. The following example shows the difference between a <code>for...of</code> loop and a <code>for...in</code> loop:</p>\n\n<pre><code>var myArray = [3, 5, 7];\nmyArray.foo = \"hello\";\n\nfor (var i in myArray) {\n  console.log(i); // logs 0, 1, 2, \"foo\"\n}\n\nfor (var i of myArray) {\n  console.log(i); // logs 3, 5, 7\n}\n</code></pre>\n\n<p>Additionally, you need to consider that no version of Internet Explorer supports <code>for...of</code> (<a href=\"https://www.microsoft.com/en-us/windows/microsoft-edge\" rel=\"nofollow noreferrer\"><strong>Edge 12+</strong></a> does) and that <code>for...in</code> requires at least Internet&nbsp;Explorer&nbsp;10.</p>\n\n<hr>\n\n<h3><code>Array.prototype.forEach()</code></h3>\n\n<p>An alternative to <code>for</code>-loops is <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"nofollow noreferrer\"><strong><code>Array.prototype.forEach()</code></strong></a>, which uses the following syntax:</p>\n\n<pre><code>myArray.forEach(function(value, key, myArray) {\n    console.log(value);\n});\n</code></pre>\n\n<p><code>Array.prototype.forEach()</code> is supported by all modern browsers, as well as Internet&nbsp;Explorer&nbsp;9 and later.</p>\n\n<hr>\n\n<h3>Libraries</h3>\n\n<p>Finally, many utility libraries also have their own <code>foreach</code> variation. AFAIK, the three most popular ones are these:</p>\n\n<p><a href=\"http://api.jquery.com/jquery.each/\" rel=\"nofollow noreferrer\"><strong><code>jQuery.each()</code></strong></a>, in <a href=\"https://jquery.com/\" rel=\"nofollow noreferrer\"><strong>jQuery</strong></a>:</p>\n\n<pre><code>$.each(myArray, function(key, value) {\n    console.log(value);\n});\n</code></pre>\n\n<p><a href=\"http://underscorejs.org/#each\" rel=\"nofollow noreferrer\"><strong><code>_.each()</code></strong></a>, in <a href=\"http://underscorejs.org/\" rel=\"nofollow noreferrer\"><strong>Underscore.js</strong></a>:</p>\n\n<pre><code>_.each(myArray, function(value, key, myArray) {\n    console.log(value);\n});\n</code></pre>\n\n<p><a href=\"https://lodash.com/docs#forEach\" rel=\"nofollow noreferrer\"><strong><code>_.forEach()</code></strong></a>, in <a href=\"https://lodash.com/\" rel=\"nofollow noreferrer\"><strong>Lodash.js</strong></a>:</p>\n\n<pre><code>_.forEach(myArray, function(value, key) {\n    console.log(value);\n});\n</code></pre>\n",
    "score": 27,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1946501,
      "name": "John Slegers",
      "reputation": 19424
    }
  },
  {
    "soID": 35948308,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/35948308",
    "title": null,
    "body": "<p>Consider the following <code>keyValueStore</code> object :</p>\n\n<pre><code>var keyValueStore = (function() {\n    var count = 0;\n    var kvs = function() {\n        count++;\n        this.data = {};\n        this.get = function(key) { return this.data[key]; };\n        this.set = function(key, value) { this.data[key] = value; };\n        this.delete = function(key) { delete this.data[key]; };\n        this.getLength = function() {\n            var l = 0;\n            for (p in this.data) l++;\n            return l;\n        }\n    };\n\n    return  { // Singleton public properties\n        'create' : function() { return new kvs(); },\n        'count' : function() { return count; }\n    };\n})();\n</code></pre>\n\n<p>I can create a new instance of this object by doing this :</p>\n\n<pre><code>kvs = keyValueStore.create();\n</code></pre>\n\n<p>Each instance of this object would have the following public properties :</p>\n\n<ul>\n<li><code>data</code></li>\n<li><code>get</code> </li>\n<li><code>set</code></li>\n<li><code>delete</code></li>\n<li><code>getLength</code></li>\n</ul>\n\n<p>Now, suppose we create 100 instances of this <code>keyValueStore</code> object. Even though <code>get</code>, <code>set</code>, <code>delete</code>, <code>getLength</code> will do the exact same thing for each of these 100 instances, every instance has its own copy of this function.</p>\n\n<p>Now, imagine if you could have just a single <code>get</code>, <code>set</code>, <code>delete</code> and <code>getLength</code> copy, and each instance would reference that same function. This would be better for performance and require less memory.</p>\n\n<p>That's where prototypes come in. A prototype is a \"blueprint\" of properties that is inherited but not copied by instances. So this means that it exists only once in memory for all instances of an object and is shared by all of those instances.</p>\n\n<p>Now, consider the <code>keyValueStore</code> object again. I could rewrite it like this :</p>\n\n<pre><code>var keyValueStore = (function() {\n    var count = 0;\n    var kvs = function() {\n        count++;\n        this.data = {};\n    };\n\n    kvs.prototype = {\n        'get' : function(key) { return this.data[key]; },\n        'set' : function(key, value) { this.data[key] = value; },\n        'delete' : function(key) { delete this.data[key]; },\n        'getLength' : function() {\n            var l = 0;\n            for (p in this.data) l++;\n            return l;\n        }\n    };\n\n    return  {\n        'create' : function() { return new kvs(); },\n        'count' : function() { return count; }\n    };\n})();\n</code></pre>\n\n<p>This does EXACTLY the same as the previous version of the <code>keyValueStore</code> object, except that all of its methods are now put in a prototype. What this means, is that all of the 100 instances now share these four methods instead of each having their own copy.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1946501,
      "name": "John Slegers",
      "reputation": 19424
    }
  },
  {
    "soID": 17210884,
    "parentID": 3437786,
    "url": "https://stackoverflow.com/q/17210884",
    "title": null,
    "body": "<p>A non-jQuery way to get the available screen dimension. <code>window.screen.width/height</code> has already been put up, but for responsive webdesign and completeness sake I think its worth to mention those attributes:</p>\n\n<pre><code>alert(window.screen.availWidth);\nalert(window.screen.availHeight);\n</code></pre>\n\n<p><a href=\"http://www.quirksmode.org/dom/w3c_cssom.html#t10\" rel=\"noreferrer\">http://www.quirksmode.org/dom/w3c_cssom.html#t10</a> :</p>\n\n<blockquote>\n  <p><strong>availWidth</strong> and <strong>availHeight</strong> - The available width and height on the\n  screen (excluding OS taskbars and such).</p>\n</blockquote>\n",
    "score": 66,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1948292,
      "name": "DanFromGermany",
      "reputation": 16696
    }
  },
  {
    "soID": 21428072,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/21428072",
    "title": null,
    "body": "<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar url = \"https://yourdomain.com\";\n\n// IE8 and lower fix\nif (navigator.userAgent.match(/MSIE\\s(?!9.0)/))\n{\n    var referLink = document.createElement(\"a\");\n    referLink.href = url;\n    document.body.appendChild(referLink);\n    referLink.click();\n}\n\n// All other browsers\nelse { window.location.replace(url); }\n&lt;/script&gt;\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1950954,
      "name": "Jaydeep Jadav",
      "reputation": 432
    }
  },
  {
    "soID": 39527045,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/39527045",
    "title": null,
    "body": "<p>I like using this : </p>\n\n<pre><code>if (!!variable) {\n   //do something\n}\n</code></pre>\n\n<p>It catches both <strong>null</strong> and <strong>undefined</strong></p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1951707,
      "name": "abyrne85",
      "reputation": 462
    }
  },
  {
    "soID": 24489760,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/24489760",
    "title": null,
    "body": "<p>This function will return a parsed JavaScript object with any arbitrarily nested values using recursion as necessary.</p>\n\n<p>Here's a <a href=\"http://jsfiddle.net/WZHm5/3/\" rel=\"nofollow\">jsfiddle</a> example.</p>\n\n<pre><code>[\n  '?a=a',\n  '&amp;b=a',\n  '&amp;b=b',\n  '&amp;c[]=a',\n  '&amp;c[]=b',\n  '&amp;d[a]=a',\n  '&amp;d[a]=x',\n  '&amp;e[a][]=a',\n  '&amp;e[a][]=b',\n  '&amp;f[a][b]=a',\n  '&amp;f[a][b]=x',\n  '&amp;g[a][b][]=a',\n  '&amp;g[a][b][]=b',\n  '&amp;h=%2B+%25',\n  '&amp;i[aa=b',\n  '&amp;i[]=b',\n  '&amp;j=',\n  '&amp;k',\n  '&amp;=l',\n  '&amp;abc=foo',\n  '&amp;def=%5Basf%5D',\n  '&amp;ghi=[j%3Dkl]',\n  '&amp;xy%3Dz=5',\n  '&amp;foo=b%3Dar',\n  '&amp;xy%5Bz=5'\n].join('');\n</code></pre>\n\n<p>Given any of the above test examples.</p>\n\n<pre><code>var qs = function(a) {\n  var b, c, e;\n  b = {};\n  c = function(d) {\n    return d &amp;&amp; decodeURIComponent(d.replace(/\\+/g, \" \"));\n  };\n  e = function(f, g, h) {\n    var i, j, k, l;\n    h = h ? h : null;\n    i = /(.+?)\\[(.+?)?\\](.+)?/g.exec(g);\n    if (i) {\n      [j, k, l] = [i[1], i[2], i[3]]\n      if (k === void 0) {\n        if (f[j] === void 0) {\n          f[j] = [];\n        }\n        f[j].push(h);\n      } else {\n        if (typeof f[j] !== \"object\") {\n          f[j] = {};\n        }\n        if (l) {\n          e(f[j], k + l, h);\n        } else {\n          e(f[j], k, h);\n        }\n      }\n    } else {\n      if (f.hasOwnProperty(g)) {\n        if (Array.isArray(f[g])) {\n          f[g].push(h);\n        } else {\n          f[g] = [].concat.apply([f[g]], [h]);\n        }\n      } else {\n        f[g] = h;\n      }\n      return f[g];\n    }\n  };\n  a.replace(/^(\\?|#)/, \"\").replace(/([^#&amp;=?]+)?=?([^&amp;=]+)?/g, function(m, n, o) {\n    n &amp;&amp; e(b, c(n), c(o));\n  });\n  return b;\n};\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22396258,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/22396258",
    "title": null,
    "body": "<p>The <code>@import</code> syntax for achieving CSS-like JavaScript importing is possible using a tool such as Mixture via their special <code>.mix</code> file type (see <a href=\"http://docs.mixture.io/preprocessors#mix\" rel=\"nofollow noreferrer\">here</a>). I imagine the application simply uses one of the aforementioned methods interally, though I don't know. </p>\n\n<p>From the Mixture documentation on <code>.mix</code> files: </p>\n\n<blockquote>\n  <p>Mix files are simply .js or .css files with .mix. in the file name. A\n  mix file simply     extends the functionality of a normal style or\n  script file and allows you to import and combine.</p>\n</blockquote>\n\n<p>Here's an example <code>.mix</code> file that combines multiple <code>.js</code> files into one:</p>\n\n<pre><code>// scripts-global.mix.js\n// Plugins - Global\n\n@import \"global-plugins/headroom.js\";\n@import \"global-plugins/retina-1.1.0.js\";\n@import \"global-plugins/isotope.js\";\n@import \"global-plugins/jquery.fitvids.js\";\n</code></pre>\n\n<p>Mixture outputs this as <code>scripts-global.js</code> and also as a minified version (<code>scripts-global.min.js</code>).</p>\n\n<p>Note: I'm not in any way affiliated with Mixture, other than using it as a front-end development tool. I came across this question upon seeing a <code>.mix</code> JavaScript file in action (in one of the Mixture boilerplates) and being a bit confused by it (\"you can do this?\" I thought to myself). Then I realized that it was an application-specific file type (somewhat disappointing, agreed). Nevertheless, figured the knowledge might be helpful for others.</p>\n\n<p><strong>UPDATE</strong>: Mixture is <a href=\"http://mixture.io/blog/free/\" rel=\"nofollow noreferrer\">now free</a>. </p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1971662,
      "name": "Isaac Gregson",
      "reputation": 735
    }
  },
  {
    "soID": 28034516,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/28034516",
    "title": null,
    "body": "<p>I think this is an old question but the easiest way would be the following:</p>\n\n<pre><code>var date = new Date();\nvar TimeStamp = date.toLocaleString();\n\nfunction CurrentTime(){\n  alert(TimeStamp);\n}\n</code></pre>\n\n<p>This will grab the current time, pass it to a string based on location and then you can call the function CurrentTime to display the time.  This would be, to me, the most effective way to get a time stamp for something.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1972631,
      "name": "Brock Davis",
      "reputation": 131
    }
  },
  {
    "soID": 19483767,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/19483767",
    "title": null,
    "body": "<p>I found it helpful to explain the \"prototype chain\" as recursive convention when <code>obj_n.prop_X</code> is being referenced:</p>\n\n<p>if <code>obj_n.prop_X</code> doesn't exist, check <code>obj_n+1.prop_X</code> where <code>obj_n+1 = obj_n.[[prototype]]</code></p>\n\n<p>If the <code>prop_X</code> is finally found in the k-th prototype object then</p>\n\n<p><code>obj_1.prop_X = obj_1.[[prototype]].[[prototype]]..(k-times)..[[prototype]].prop_X</code></p>\n\n<p>You can find a graph of the relation of Javascript objects by their properties here:</p>\n\n<p> <img src=\"https://i.stack.imgur.com/2tGyY.jpg\" alt=\"js objects graph\"> </p>\n\n<p><a href=\"http://jsobjects.org\" rel=\"noreferrer\">http://jsobjects.org</a></p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1977182,
      "name": "B M",
      "reputation": 891
    }
  },
  {
    "soID": 15033498,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/15033498",
    "title": null,
    "body": "<pre><code>Array.prototype.clear = function() {\n    this.length = 0;\n};\n</code></pre>\n\n<p>and call it: <code>array.clear();</code></p>\n\n<p>=)</p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1980508,
      "name": "Bendegúz",
      "reputation": 609
    }
  },
  {
    "soID": 26884413,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/26884413",
    "title": null,
    "body": "<p>One more function, <code>search</code>:</p>\n\n<pre><code>var str = \"Stack Overflow\";\nvar n = str.search(\"Overflow\");\nif (n != -1)\n    alert('String exists')\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17374627,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/17374627",
    "title": null,
    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var d = (new Date()).toString().split(' ').splice(1,3).join(' ');\r\n\r\ndocument.write(d)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>To break it down into steps:</p>\n\n<ol>\n<li><p><code>(new Date()).toString()</code> gives \"Fri Jun 28 2013 15:30:18 GMT-0700 (PDT)\"</p></li>\n<li><p><code>(new Date()).toString().split(' ')</code> divides the above string on each space and returns an array as follows: [\"Fri\", \"Jun\", \"28\", \"2013\", \"15:31:14\", \"GMT-0700\", \"(PDT)\"]</p></li>\n<li><p><code>(new Date()).toString().split(' ').splice(1,3).join(' ')</code> takes the second, third and fourth values from the above array, joins them with spaces, and returns a string \"Jun 28 2013\"</p></li>\n</ol>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1992239,
      "name": "Rishabh Marya",
      "reputation": 431
    }
  },
  {
    "soID": 14436080,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/14436080",
    "title": null,
    "body": "<pre><code>if( undefined == $('#isAgeSelected').attr('checked') ) {\n    $(\"#txtAge\").hide();\n} else {\n    $(\"#txtAge\").show();\n}\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23678757,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/23678757",
    "title": null,
    "body": "<p>Under the hood all empty check methods in all libraries use object keys checking logic. Its an odd way to make it understandable, which you can put in a method, Described <a href=\"https://stackoverflow.com/a/679937/2002079\">here</a>.</p>\n\n<pre><code>for(key in obj){\n   //your work here.\n break;\n}\n</code></pre>\n\n<p>Which has evolved in <a href=\"https://es5.github.io\" rel=\"nofollow noreferrer\">ES5</a>, now put simply you can check the object's keys length, using <code>Object.Keys</code> method:</p>\n\n<pre><code>if(Object.keys(obj).length&gt;1){\n //do your work here\n}\n</code></pre>\n\n<p>Or if you are using <a href=\"https://lodash.com/docs/\" rel=\"nofollow noreferrer\">Lodash</a> (you must be) then.</p>\n\n<pre><code> _.isEmpty(obj) //==true or false\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2002079,
      "name": "ahmadalibaloch",
      "reputation": 2479
    }
  },
  {
    "soID": 33724397,
    "parentID": 1279957,
    "url": "https://stackoverflow.com/q/33724397",
    "title": null,
    "body": "<p>What about a <strong>JavaScript</strong> solution?</p>\n\n<p>Declare a fragment:</p>\n\n<p><code>var fragment = document.createDocumentFragment();</code></p>\n\n<p>Append desired element to the fragment:</p>\n\n<p><code>fragment.appendChild(document.getElementById('source'));</code></p>\n\n<p>Append fragment to desired element:</p>\n\n<p><code>document.getElementById('destination').appendChild(fragment);</code></p>\n\n<p><strong><a href=\"https://jsfiddle.net/AliBassam/eyepyzrp/\" rel=\"noreferrer\">Check it out.</a></strong></p>\n",
    "score": 45,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2005622,
      "name": "Ali Bassam",
      "reputation": 4717
    }
  },
  {
    "soID": 38257233,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/38257233",
    "title": null,
    "body": "<p><code>let</code> is interesting, because it allows us to do something like this:</p>\n\n<pre><code>(() =&gt; {\n    var count = 0;\n\n    for (let i = 0; i &lt; 2; ++i) {\n        for (let i = 0; i &lt; 2; ++i) {\n            for (let i = 0; i &lt; 2; ++i) {\n                console.log(count++);\n            }\n        }\n    }\n})();\n</code></pre>\n\n<p>Which results in counting [0, 7].</p>\n\n<p>Whereas</p>\n\n<pre><code>(() =&gt; {\n    var count = 0;\n\n    for (var i = 0; i &lt; 2; ++i) {\n        for (var i = 0; i &lt; 2; ++i) {\n            for (var i = 0; i &lt; 2; ++i) {\n                console.log(count++);\n            }\n        }\n    }\n})();\n</code></pre>\n\n<p>Only counts [0, 1].</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2012715,
      "name": "Dmitry",
      "reputation": 1945
    }
  },
  {
    "soID": 17599971,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/17599971",
    "title": null,
    "body": "<p>jQuery is not needed. You can do this:</p>\n\n<pre><code>window.open(\"URL\",\"_self\",\"\",\"\")\n</code></pre>\n\n<p>It is that easy!</p>\n\n<p>The best way to initiate an HTTP request is with <code>document.loacation.href.replace('URL')</code>.</p>\n",
    "score": 39,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2016735,
      "name": "MayorMonty",
      "reputation": 2601
    }
  },
  {
    "soID": 14798181,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/14798181",
    "title": null,
    "body": "<p>After generating a random number using a computer program, it is still consider as a random number if the picked number is a part or the full one of the initial one. But if it was changed, then <strong>mathematicians are not accept it as a random number and they can call it a biased number.</strong> But if you are developing a program for a simple task, this will not be a case to consider. <strong>But if you are developing a program to generate a random number for a valuable stuff such as lottery program, or gambling game, then your program will be rejected by the management if you are not consider about the above case.</strong></p>\n\n<p>So for those kind of people, here is my suggestion:</p>\n\n<p>Generate a random number using <code>Math.random()</code>.(say this <code>n</code>)</p>\n\n<pre><code>Now for [0,10) ==&gt;  n*10 (i.e. one digit) and for[10,100) ==&gt; n*100 (i.e. two digits) and so on. Here squire bracket indicates that boundary is inclusive and round bracket indicates boundary is exclusive.\nThen remove the rest after the decimal point. (i.e. get floor) - using Math.floor(), this can be done.\n</code></pre>\n\n<p>If you know how to read random number table to pick a random number, you know above process(multiplying by 1, 10, 100 and so on) is not violates the one that I was mentioned at the beginning.( Because it changes only the place of the decimal point.)</p>\n\n<p>Study the following example and develop it to your needs.</p>\n\n<p>If you need a sample [0,9] then floor of n*10 is your answer and if need [0,99] then floor of n*100 is your answer and so on.</p>\n\n<p>Now let enter into your role:</p>\n\n<p>You've asked numbers among specific range. (In this case you are biased among that range. - By taking a number from [1,6] by roll a die, then you are biased into [1,6] but still it is a random if and only if die is unbiased.)</p>\n\n<p>So consider your range ==> [78, 247]\nnumber of elements of the range = 247 - 78 + 1 = 170; (since both the boundaries are inclusive.</p>\n\n<pre><code>/*Mthod 1:*/\n    var i = 78, j = 247, k = 170, a = [], b = [], c, d, e, f, l = 0;\n    for(; i &lt;= j; i++){ a.push(i); }\n    while(l &lt; 170){\n        c = Math.random()*100; c = Math.floor(c);\n        d = Math.random()*100; d = Math.floor(d);\n        b.push(a[c]); e = c + d;\n        if((b.length != k) &amp;&amp; (e &lt; k)){  b.push(a[e]); }\n        l = b.length;\n    }\n    console.log('Method 1:');\n    console.log(b);\n/*Method 2:*/\n\n    var a, b, c, d = [], l = 0;\n    while(l &lt; 170){\n        a = Math.random()*100; a = Math.floor(a);\n        b = Math.random()*100; b = Math.floor(b);\n        c = a + b;\n        if(c &lt;= 247 || c &gt;= 78){ d.push(c); }else{ d.push(a); }\n        l = d.length;\n    }\n    console.log('Method 2:');\n    console.log(d);\n</code></pre>\n\n<p>Note: In method one, first I created an array which contains numbers that you need and then randomly put them into another array.\nIn method two, generate numbers randomly and check those are in the range that you need. Then put it into an array. Here I generated two random numbers and used total of them to maximize the speed of the program by minimizing the failure rate that obtaining a useful number. However adding generated numbers will also give some biassness. So I would recommend my first method to generate random numbers within a specific range.</p>\n\n<p>In both methods, your console will show the result.(Press f12 in Chrome to open the console)</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2020193,
      "name": "Janaka R Rajapaksha",
      "reputation": 1428
    }
  },
  {
    "soID": 14725238,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/14725238",
    "title": null,
    "body": "<pre><code>function GetQueryStringParams(sParam)\n{\n    var sPageURL = window.location.search.substring(1);\n    var sURLVariables = sPageURL.split('&amp;');\n\n    for (var i = 0; i &lt; sURLVariables.length; i++)\n    {\n        var sParameterName = sURLVariables[i].split('=');\n        if (sParameterName[0] == sParam)\n        {\n            return sParameterName[1];\n        }\n    }\n}​\n</code></pre>\n\n<p>And this is how you can use this function assuming the URL is</p>\n\n<blockquote>\n  <p><code>http://dummy.com/?stringtext=jquery&amp;stringword=jquerybyexample</code></p>\n</blockquote>\n\n<pre><code>var tech = GetQueryStringParams('stringtext');\nvar blog = GetQueryStringParams('stringword');\n</code></pre>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 27230134,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/27230134",
    "title": null,
    "body": "<p>If you are using </p>\n\n<pre><code>a = []; \n</code></pre>\n\n<p>or</p>\n\n<pre><code>a.length = 0;\n</code></pre>\n\n<p>then you are just creating new array which points to specific memory location. This means previous array will be remain in memory till garbage collection. So its not the better way to use.\nInstead of these two solutions are better.</p>\n\n<pre><code>a.splice(0,a.length)\n</code></pre>\n\n<p>and</p>\n\n<pre><code>while(a.length &gt; 0) {\n    a.pop();\n}\n</code></pre>\n\n<p>As per previous answer by kenshou.html, second method is faster.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2034794,
      "name": "Laxmikant Dange",
      "reputation": 3342
    }
  },
  {
    "soID": 39029912,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/39029912",
    "title": null,
    "body": "<p>I think, that <strong>recurrence with caching</strong> is the best what we can do it here without libraries.</p>\n\n<p>And underestimated <strong>WeakMap</strong> comes to the problem of cycles, wherein storing  pairs of references to old and new object can help us to recreate pretty easily whole tree.</p>\n\n<p>I prevented deep cloning of the DOM elements, probably you don't want to clone entire page :)</p>\n\n<pre><code>function deepCopy(object) {\n    const cache = new WeakMap(); // Map of old - new references\n\n    function copy(obj) {\n        if (typeof obj !== 'object' ||\n            obj === null ||\n            obj instanceof HTMLElement\n        )\n            return obj; // primitive value or HTMLElement\n\n        if (obj instanceof Date) \n            return new Date().setTime(obj.getTime());\n\n        if (obj instanceof RegExp) \n            return new RegExp(obj.source, obj.flags);\n\n        if (cache.has(obj)) \n            return cache.get(obj);\n\n        const result = obj instanceof Array ? [] : {};\n\n        cache.set(obj, result); // store reference to object before the recursive starts\n\n        if (obj instanceof Array) {\n            for(const o of obj) {\n                 result.push(copy(o));\n            }\n            return result;\n        }\n\n        const keys = Object.keys(obj); \n\n        for (const key of keys)\n            result[key] = copy(obj[key]);\n\n        return result;\n    }\n\n    return copy(object);\n}\n</code></pre>\n\n<p>Some tests:</p>\n\n<pre><code>// #1\nconst obj1 = { };\nconst obj2 = { };\nobj1.obj2 = obj2;\nobj2.obj1 = obj1; // Trivial circular reference\n\nvar copy = deepCopy(obj1);\ncopy == obj1 // false\ncopy.obj2 === obj1.obj2 // false\ncopy.obj2.obj1.obj2 // and so on - no error (correctly cloned).\n\n// #2\nconst obj = { x: 0 }\nconst clone = deepCopy({ a: obj, b: obj });\nclone.a == clone.b // true\n\n// #3\nconst arr = [];\narr[0] = arr; // A little bit weird but who cares\nclone = deepCopy(arr)\nclone == arr // false;\nclone[0][0][0][0] == clone // true;\n</code></pre>\n\n<p>NOTE: I'm using constants, for of loop, => operator and WeakMaps to create more essential code. This syntax (ES6) is supported by today's browsers</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 17628458,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/17628458",
    "title": null,
    "body": "<p>I recommend <a href=\"http://www.darlesson.com/jquery/querystring/\" rel=\"nofollow\">Dar Lessons</a> as a good plugin. I have worked with it fo  a long time. You can also use the following code.\nJus put <code>var queryObj = {};</code> before document.ready and put the bellow code in the beginning of document.ready. After this code you can use <code>queryObj[\"queryObjectName\"]</code> for any query object you have</p>\n\n<pre><code>var querystring = location.search.replace('?', '').split('&amp;');\nfor (var i = 0; i &lt; querystring.length; i++) {\n    var name = querystring[i].split('=')[0];\n    var value = querystring[i].split('=')[1];\n    queryObj[name] = value;\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16962291,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/16962291",
    "title": null,
    "body": "<p>First write properly. You want to navigate within an application for another link from your application for another link. Here is the code:</p>\n\n<pre><code>window.location.href = \"http://www.google.com\";\n</code></pre>\n\n<p>And if you want to navigate pages within your application then I also have code, if you want.</p>\n",
    "score": 36,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2047151,
      "name": "Anup",
      "reputation": 2279
    }
  },
  {
    "soID": 17692557,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/17692557",
    "title": null,
    "body": "<pre><code>var string = \"hello world\";\nstring = string.charAt(0).toUpperCase() + string.slice(1);\nalert(string);\n</code></pre>\n",
    "score": 57,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2047151,
      "name": "Anup",
      "reputation": 2279
    }
  },
  {
    "soID": 29524405,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/29524405",
    "title": null,
    "body": "<p>The currently voted answer is right but doesn't trim or check the length of the string before capitalising the first character.</p>\n\n<pre><code>String.prototype.ucfirst = function(notrim) {\n    s = notrim ? this : this.replace(/(?:(?:^|\\n)\\s+|\\s+(?:$|\\n))/g,'').replace(/\\s+/g,' ');\n    return s.length &gt; 0 ? s.charAt(0).toUpperCase() + s.slice(1) : s;\n}\n</code></pre>\n\n<p>Set the notrim argument to prevent trimming the string first:</p>\n\n<pre><code>'pizza'.ucfirst()         =&gt; 'Pizza'\n'   pizza'.ucfirst()      =&gt; 'Pizza'\n'   pizza'.ucfirst(true)  =&gt; '   pizza'\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2051746,
      "name": "pizzamonster",
      "reputation": 506
    }
  },
  {
    "soID": 30947489,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/30947489",
    "title": null,
    "body": "<p>Simple...</p>\n\n<p>Replacing single quotes:</p>\n\n<pre><code>function JavaScriptEncode(text){\n    text = text.replace(/'/g,'&amp;apos;')\n    // More encode here if required\n\n    return text;\n}\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2058113,
      "name": "Chris OnDaRocks",
      "reputation": 602
    }
  },
  {
    "soID": 25690366,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/25690366",
    "title": null,
    "body": "<p>You can redirect in jQuery like this:</p>\n\n<pre><code>$(location).attr('href', 'http://yourPage.com/');\n</code></pre>\n",
    "score": 39,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2058408,
      "name": "Azam Alvi",
      "reputation": 2911
    }
  },
  {
    "soID": 15035152,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/15035152",
    "title": null,
    "body": "<p><strong>Brew some tea:</strong></p>\n\n<p><code>!!</code> is not an operator. It is the double-use of <code>!</code> -- which is the logical \"not\" operator. </p>\n\n<hr>\n\n<p><strong>In theory:</strong></p>\n\n<p><strong><code>!</code></strong> determines the \"truth\" of what a value is not:</p>\n\n<ul>\n<li><p>The truth is that <code>false</code> is not <code>true</code> (that's why <code>!false</code> results\nin <strong><code>true</code></strong>)</p></li>\n<li><p>The truth is that <code>true</code> is not <code>false</code> (that's why <code>!true</code> results\nin <strong><code>false</code></strong>)</p></li>\n</ul>\n\n<hr>\n\n<p><strong><code>!!</code></strong> determines the \"truth\" of what a value is <em>not</em> not:</p>\n\n<ul>\n<li><p>The truth is that <code>true</code> is not <em>not</em> <code>true</code> (that's why <code>!!true</code> results in <strong><code>true</code></strong>)</p></li>\n<li><p>The truth is that <code>false</code> is not <em>not</em> <code>false</code> (that's why <code>!!false</code> results in <strong><code>false</code></strong>)</p></li>\n</ul>\n\n<hr>\n\n<p>What we wish to determine in the comparison is the \"truth\" <em>about</em> the value of a reference, not the <em>value of</em> the reference itself. There is a use-case where we might want to know the truth about a value, even if we expect the value to be <em><code>false</code></em> (or falsey), or if we expect the value not to be typeof <code>boolean</code>. </p>\n\n<hr>\n\n<p><strong>In practice:</strong></p>\n\n<p>Consider a concise function which detects feature functionality (and in this case, platform compatibility) by way of <strong><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_typing\" rel=\"noreferrer\">dynamic typing</a></strong> (aka \"duck typing\"). We want to write a function that returns <code>true</code> if a user's browser supports the HTML5 <code>&lt;audio&gt;</code> element, but we don't want the function to throw an error if <code>&lt;audio&gt;</code> is undefined; and we don't want to use <code>try ... catch</code> to handle any possible errors (because they're gross); <em>and also</em> we don't want to use a check inside the function that won't consistently reveal the truth about the feature (for example, <code>document.createElement('audio')</code> will still create an element called <code>&lt;audio&gt;</code> even if HTML5 <code>&lt;audio&gt;</code> is not supported). </p>\n\n<hr>\n\n<p>Here are the three approaches:</p>\n\n<pre><code>// this won't tell us anything about HTML5 `&lt;audio&gt;` as a feature\nvar foo = function(tag, atr) { return document.createElement(tag)[atr]; }\n\n// this won't return true if the feature is detected (although it works just fine)\nvar bar = function(tag, atr) { return !document.createElement(tag)[atr]; }\n\n// this is the concise, feature-detecting solution we want\nvar baz = function(tag, atr) { return !!document.createElement(tag)[atr]; }\n\nfoo('audio', 'preload'); // returns \"auto\"\nbar('audio', 'preload'); // returns false\nbaz('audio', 'preload'); // returns true\n</code></pre>\n\n<p>Each function accepts an argument for a <code>&lt;tag&gt;</code> and an <code>attribute</code> to look for, but they each return different values based on what the comparisons determine. </p>\n\n<p><strong>But wait, there's more!</strong></p>\n\n<p>Some of you probably noticed that in this specific example, one could simply check for a property using the slightly <strong><a href=\"http://jsperf.com/hasownproperty-vs-comparison\" rel=\"noreferrer\">more performant</a></strong> means of checking if the object in question <em>has</em> a property. There are two ways to do this:</p>\n\n<pre><code>// the native `hasOwnProperty` method\nvar qux = function(tag, atr) { return document.createElement(tag).hasOwnProperty(atr); }\n\n// the `in` operator\nvar quux = function(tag, atr) { return atr in document.createElement(tag); }\n\nqux('audio', 'preload');  // returns true\nquux('audio', 'preload'); // returns true\n</code></pre>\n\n<p><strong>We digress...</strong></p>\n\n<p>However rare these situations may be, there may exist a few scenarios where the most concise, most performant, and thus most preferred means of getting <code>true</code> from a non-boolean, possibly undefined value is indeed by using <code>!!</code>. Hopefully this ridiculously clears it up.</p>\n",
    "score": 105,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2059983,
      "name": "benny",
      "reputation": 1638
    }
  },
  {
    "soID": 36714349,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/36714349",
    "title": null,
    "body": "<p>Please use the below function if you don't want to round off.</p>\n\n<pre><code>function ConvertToDecimal(num) {\n  num = num.toString(); // If it's not already a String\n  num = num.slice(0, (num.indexOf(\".\")) + 3); // With 3 exposing the hundredths place    \nalert('M : ' + Number(num)); // If you need it back as a Number     \n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2063564,
      "name": "Nimesh",
      "reputation": 1006
    }
  },
  {
    "soID": 24870296,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/24870296",
    "title": null,
    "body": "<p>The other answers don't account for the perfectly reasonable parameters of <code>0</code> and <code>1</code>. Instead you should use the <code>round</code> <strong>instead</strong> of <code>ceil</code> or <code>floor</code>:</p>\n\n<pre><code>function randomNumber(minimum, maximum){\n    return Math.round( Math.random() * (maximum - minimum) + minimum);\n}\n\nconsole.log(randomNumber(0,1));  # 0 1 1 0 1 0\nconsole.log(randomNumber(5,6));  # 5 6 6 5 5 6\nconsole.log(randomNumber(3,-1)); # 1 3 1 -1 -1 -1\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2069715,
      "name": "Starkers",
      "reputation": 2889
    }
  },
  {
    "soID": 27509707,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/27509707",
    "title": null,
    "body": "<p><strong>JavaScript</strong></p>\n\n<pre><code> var str = \"My big string contain apples and oranges\";\n var n = str.indexOf(\"apples\"); \n alert(n); //will alert 22, -1 if not found\n</code></pre>\n\n<p><strong>jQuery</strong></p>\n\n<pre><code>  &lt;p&gt;My big string contain apples and oranges&lt;/p&gt;\n  alert($(\"p:contains(apples)\")[0] != undefined); //will alert true if found\n</code></pre>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21682652,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/21682652",
    "title": null,
    "body": "<p>If the variable you want to check is a global, do</p>\n\n<pre><code>if (window.yourVarName) {\n    // Your code here\n}\n</code></pre>\n\n<p>This way to check will not throw an error even if the <code>yourVarName</code> variable doesn't exist.</p>\n\n<h2>Example: I want to know if my browser supports History API</h2>\n\n<pre><code>if (window.history) {\n    history.back();\n}\n</code></pre>\n\n<h2>How this works:</h2>\n\n<p><code>window</code> is an object which holds all global variables as its properties, and in JavaScript it is legal to try to access a non-existing object property. If <code>history</code> doesn't exist then <code>window.history</code> returns <code>undefined</code>. <code>undefined</code> is falsey, so code in an <code>if(undefined){}</code> block won't run.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2088061,
      "name": "DenisS",
      "reputation": 978
    }
  },
  {
    "soID": 17658411,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/17658411",
    "title": null,
    "body": "<p>This is the minimal amount of code I think I needed to do something like this effectively. I found this method to be useful; it returns an array of the check boxes that are checked and then you can use their value (this solution uses jQuery):</p>\n\n<pre><code>// This is how you get them\nvar output = \"\";\nvar checkedBoxes = $(\"DivCheckBoxesAreIn\").children(\"input:checked\");\nif(checkedBoxes.length &lt;= 0) {\n    alert('Please select check boxes');\n    return false;\n};\n\n// And this is how you use them:\ncheckedBoxes.each(function() {\n    output +=  this.value + \", \";\n};\n</code></pre>\n\n<p>Printing \"output\" will give you a comma-separated list of your values.</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22870785,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/22870785",
    "title": null,
    "body": "<p>This is the <strong>fastest</strong> version that <em>doesn't use regular expressions</em>.</p>\n\n<p><a href=\"http://jsperf.com/replace-all-vs-split-join/10\" rel=\"nofollow noreferrer\">Revised jsperf</a></p>\n\n<pre><code>replaceAll = function(string, omit, place, prevstring) {\n  if (prevstring &amp;&amp; string === prevstring)\n    return string;\n  prevstring = string.replace(omit, place);\n  return replaceAll(prevstring, omit, place, string)\n}\n</code></pre>\n\n<p>It is almost <strong>twice</strong> as fast as the split and join method.</p>\n\n<p>As pointed out in a comment here, this will not work if your <code>omit</code> variable contains <code>place</code>, as in: <code>replaceAll(\"string\", \"s\", \"ss\")</code>, because it will always be able to replace another occurrence of the word.</p>\n\n<p>There is another jsperf with variants on my recursive replace that go even faster (<a href=\"http://jsperf.com/replace-all-vs-split-join/12\" rel=\"nofollow noreferrer\">http://jsperf.com/replace-all-vs-split-join/12</a>)!</p>\n\n<ul>\n<li>Update July 27th 2017: It looks like RegExp now has the fastest performance in the recently released Chrome 59.</li>\n</ul>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2096729,
      "name": "Cole Lawrence",
      "reputation": 495
    }
  },
  {
    "soID": 13529824,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/13529824",
    "title": null,
    "body": "<p>Just tried the Anonymous answer and found there's a little trick here, it doesn't work if there's a space after backslash <code>\\</code> <br />\nSo the following solution doesn't work -</p>\n\n<pre><code>var x = { test:'&lt;?xml version=\"1.0\"?&gt;\\ &lt;-- One space here\n            &lt;?mso-application progid=\"Excel.Sheet\"?&gt;' \n};\n</code></pre>\n\n<p>But when space is removed it works - </p>\n\n<pre><code>var x = { test:'&lt;?xml version=\"1.0\"?&gt;\\&lt;-- No space here now\n          &lt;?mso-application progid=\"Excel.Sheet\"?&gt;' \n};\n\nalert(x.test);​\n</code></pre>\n\n<p>Hope it helps !!</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2103202,
      "name": "Anmol Saraf",
      "reputation": 6868
    }
  },
  {
    "soID": 25197817,
    "parentID": 3390396,
    "url": "https://stackoverflow.com/q/25197817",
    "title": null,
    "body": "<pre><code>// x has not been defined before\nif (typeof x === 'undefined') { // Evaluates to true without errors.\n   // These statements execute.\n}\n\nif (x === undefined) { // Throws a ReferenceError\n\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2123853,
      "name": "sourcecode",
      "reputation": 1365
    }
  },
  {
    "soID": 32166837,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/32166837",
    "title": null,
    "body": "<p>Checkout this solution:  </p>\n\n<pre><code>var stringVal = 'master';\nstringVal.replace(/^./, stringVal[0].toUpperCase()); // returns Master \n</code></pre>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2123996,
      "name": "Raju Bera",
      "reputation": 777
    }
  },
  {
    "soID": 19744363,
    "parentID": 14994391,
    "url": "https://stackoverflow.com/q/19744363",
    "title": null,
    "body": "<p>jQuery: you think a lot about 'QUERYing the <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\" rel=\"noreferrer\">DOM</a>' for DOM elements and doing something.</p>\n\n<p>AngularJS: THE model is the truth, and you always think from that ANGLE.</p>\n\n<p>For example, when you get data from THE server which you intend to display in some format in the DOM, in jQuery, you need to '1. FIND' where in the DOM you want to place this data, the '2. UPDATE/APPEND' it there by creating a new node or just setting its <a href=\"http://www.tizag.com/javascriptT/javascript-innerHTML.php\" rel=\"noreferrer\">innerHTML</a>. Then when you want to update this view, you then '3. FIND' the location and '4. UPDATE'. This cycle of find and update all done within the same context of getting and formatting data from server is gone in AngularJS.</p>\n\n<p>With AngularJS you have your model (JavaScript objects you are already used to) and the value of the model tells you about the model (obviously) and about the view, and an operation on the model automatically propagates to the view, so you don't have to think about it. You will find yourself in AngularJS no longer finding things in the DOM.</p>\n\n<p>To put in another way, in jQuery, you need to think about CSS selectors, that is, where is the <code>div</code> or <code>td</code> that has a class or attribute, etc., so that I can get their HTML or color or value, but in AngularJS, you will find yourself thinking like this: what model am I dealing with, I will set the model's value to true. You are not bothering yourself of whether the view reflecting this value is a checked box or resides in a <code>td</code> element (details you would have often needed to think about in jQuery).</p>\n\n<p>And with DOM manipulation in AngularJS, you find yourself adding directives and filters, which you can think of as valid HTML extensions.</p>\n\n<p>One more thing you will experience in AngularJS: in jQuery you call the jQuery functions a lot, in AngularJS, AngularJS will call your functions, so AngularJS will 'tell you how to do things', but the benefits are worth it, so learning AngularJS usually means learning what AngularJS wants or the way AngularJS requires that you present your functions and it will call it accordingly. This is one of the things that makes AngularJS a framework rather than a library.</p>\n",
    "score": 62,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2124293,
      "name": "Samuel",
      "reputation": 1083
    }
  },
  {
    "soID": 16864566,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/16864566",
    "title": null,
    "body": "<p>I did:</p>\n\n<pre><code>var require = function (src, cb) {\n    cb = cb || function () {};\n\n    var newScriptTag = document.createElement('script'),\n        firstScriptTag = document.getElementsByTagName('script')[0];\n    newScriptTag.src = src;\n    newScriptTag.async = true;\n    console.log(newScriptTag)\n    newScriptTag.onload = newScriptTag.onreadystatechange = function () {\n        (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete') &amp;&amp; (cb());\n    };\n    firstScriptTag.parentNode.insertBefore(newScriptTag, firstScriptTag);\n}\n</code></pre>\n\n<p>It works great and uses no page-reloads for me. I tried that Ajax thing, but it doesn't really work.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2124732,
      "name": "Christopher Dumas",
      "reputation": 530
    }
  },
  {
    "soID": 23646488,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/23646488",
    "title": null,
    "body": "<h3>Automated</h3>\n\n<pre><code>$(document).ready(function()\n{\n    $('#isAgeSelected').change(function()\n    {\n        alert( 'value =' + $('#chkSelect').attr('checked') );\n    });\n});\n</code></pre>\n\n<h3>HTML</h3>\n\n<pre><code>&lt;b&gt; &lt;input type=\"isAgeSelected\" id=\"chkSelect\" /&gt; Age Check &lt;/b&gt;\n\n&lt;br/&gt;&lt;br/&gt;\n\n&lt;input type=\"button\" id=\"btnCheck\" value=\"check\" /&gt;\n</code></pre>\n\n<h3>jQuery</h3>\n\n<pre><code>$(document).ready(function()\n{\n    $('#btnCheck').click(function()\n    {\n        var isChecked = $('#isAgeSelected').attr('checked');\n\n        if (isChecked == 'checked')\n            alert('check-box is checked');\n        else\n            alert('check-box is not checked');\n    })\n});\n</code></pre>\n\n<p><strong>Ajax</strong></p>\n\n<pre><code>function check()\n{\n    if (isAgeSelected())\n        alert('check-box is checked');\n    else\n        alert('check-box is not checked');\n}\n\nfunction isAgeSelected()\n{\n    return ($get(\"isAgeSelected\").checked == true);\n}\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24063905,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/24063905",
    "title": null,
    "body": "<p>A small example of a library that use localStorage for keeping track of received messages from contacts:</p>\n\n<pre><code>// This class is supposed to be used to keep a track of received message per contacts.\n// You have only four methods:\n\n// 1 - Tells you if you can use this library or not...\nfunction isLocalStorageSupported(){\n    if(typeof(Storage) !== \"undefined\" &amp;&amp; window['localStorage'] != null ) {\n         return true;\n     } else {\n         return false;\n     }\n }\n\n// 2 - Give the list of contacts, a contact is created when you store the first message\n function getContacts(){\n    var result = new Array();\n    for ( var i = 0, len = localStorage.length; i &lt; len; ++i ) {\n        result.push(localStorage.key(i));\n    }\n    return result;\n }\n\n // 3 - store a message for a contact\n function storeMessage(contact, message){\n    var allMessages;\n    var currentMessages = localStorage.getItem(contact);\n    if(currentMessages == null){\n        var newList = new Array();\n        newList.push(message);\n        currentMessages = JSON.stringify(newList);\n    }\n    else\n    {\n        var currentList =JSON.parse(currentMessages);\n        currentList.push(message);\n        currentMessages = JSON.stringify(currentList);\n    }\n    localStorage.setItem(contact, currentMessages);\n }\n\n // 4 - read the messages of a contact\n function readMessages(contact){\n\n    var result = new Array();\n    var currentMessages = localStorage.getItem(contact);\n\n    if(currentMessages != null){\n        result =JSON.parse(currentMessages);\n    }\n    return result;\n }\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2135045,
      "name": "Thomas",
      "reputation": 2163
    }
  },
  {
    "soID": 15267630,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/15267630",
    "title": null,
    "body": "<p>This is one fairly economical approach, at least in terms of the source code:</p>\n\n<pre><code>function s() {\n    var args = [],index;\n    for (index = 0; index&lt; arguments.length; index++) {\n        args.push (arguments [index]);\n    }\n    return args.join (\"\\n\");\n}\nconsole.log (s (\n    \"This is the first line\",\n    \"and this is the second\",\n    \"finally a third\"\n));\n\nfunction s() {return arguments.join (\"\\n\")} \n</code></pre>\n\n<p>would be nicer of course if the \"arguments\" property were a proper array.</p>\n\n<p>A second version might use \"\" to do the join for cases when you want to control the line breaks in a very long string.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2143618,
      "name": "Iain MacKay",
      "reputation": 17
    }
  },
  {
    "soID": 28484734,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/28484734",
    "title": null,
    "body": "<p>Even though <code>call</code> and <code>apply</code> achive the same thing, I think there is atleast one place where you cannot use <code>call</code> but can only use <code>apply</code>. That is when you want to support inheritance and want to call the constructor.</p>\n\n<p>Here is a function allows you to create classes which also supports creating classes by extending other classes.</p>\n\n<pre><code>function makeClass( properties ) {\n    var ctor = properties['constructor'] || function(){}\n    var Super = properties['extends'];\n    var Class = function () {\n                 // Here 'call' cannot work, only 'apply' can!!!\n                 if(Super)\n                    Super.apply(this,arguments);  \n                 ctor.apply(this,arguments);\n                }\n     if(Super){\n        Class.prototype = Object.create( Super.prototype );\n        Class.prototype.constructor = Class;\n     }\n     Object.keys(properties).forEach( function(prop) {\n           if(prop!=='constructor' &amp;&amp; prop!=='extends')\n            Class.prototype[prop] = properties[prop];\n     });\n   return Class; \n}\n\n//Usage\nvar Car = makeClass({\n             constructor: function(name){\n                         this.name=name;\n                        },\n             yourName: function() {\n                     return this.name;\n                   }\n          });\n//We have a Car class now\n var carInstance=new Car('Fiat');\ncarInstance.youName();// ReturnsFiat\n\nvar SuperCar = makeClass({\n               constructor: function(ignore,power){\n                     this.power=power;\n                  },\n               extends:Car,\n               yourPower: function() {\n                    return this.power;\n                  }\n              });\n//We have a SuperCar class now, which is subclass of Car\nvar superCar=new SuperCar('BMW xy',2.6);\nsuperCar.yourName();//Returns BMW xy\nsuperCar.yourPower();// Returns 2.6\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2147987,
      "name": "Dhana Krishnasamy",
      "reputation": 1502
    }
  },
  {
    "soID": 15322985,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/15322985",
    "title": null,
    "body": "<pre><code>var s=[\"Hscript.js\",\"checkRobert.js\",\"Hscript.js\"];\nfor(i=0;i&lt;s.length;i++){\n  var script=document.createElement(\"script\");\n  script.type=\"text/javascript\";\n  script.src=s[i];\n  document.getElementsByTagName(\"head\")[0].appendChild(script)\n};\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2153910,
      "name": "robert",
      "reputation": 97
    }
  },
  {
    "soID": 44013834,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/44013834",
    "title": null,
    "body": "<p>You can use <a href=\"https://github.com/macmcmeans/localDataStorage\" rel=\"nofollow noreferrer\">localDataStorage</a> to transparently store javascript data types (Array, Boolean, Date, Float, Integer, String and Object). It also provides lightweight data obfuscation, automatically compresses strings, facilitates query by key (name) as well as query by (key) value, and helps to enforce segmented shared storage within the same domain by prefixing keys.</p>\n\n<p>[DISCLAIMER] I am the author of the utility [/DISCLAIMER]</p>\n\n<p>Examples:</p>\n\n<pre><code>localDataStorage.set( 'key1', 'Belgian' )\nlocalDataStorage.set( 'key2', 1200.0047 )\nlocalDataStorage.set( 'key3', true )\nlocalDataStorage.set( 'key4', { 'RSK' : [1,'3',5,'7',9] } )\nlocalDataStorage.set( 'key5', null )\n\nlocalDataStorage.get( 'key1' )   --&gt;   'Belgian'\nlocalDataStorage.get( 'key2' )   --&gt;   1200.0047\nlocalDataStorage.get( 'key3' )   --&gt;   true\nlocalDataStorage.get( 'key4' )   --&gt;   Object {RSK: Array(5)}\nlocalDataStorage.get( 'key5' )   --&gt;   null\n</code></pre>\n\n<p>As you can see, the primitive values are respected.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2158270,
      "name": "Mac",
      "reputation": 390
    }
  },
  {
    "soID": 19079030,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/19079030",
    "title": null,
    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var utc = new Date().toJSON().slice(0,10).replace(/-/g,'/');\r\ndocument.write(utc);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Use the <code>replace</code> option if you're going to reuse the <code>utc</code> variable, such as <code>new Date(utc)</code>, as Firefox and Safari don't recognize a date with dashes.</p>\n",
    "score": 293,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2160475,
      "name": "Varun Natraaj",
      "reputation": 3741
    }
  },
  {
    "soID": 23269812,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/23269812",
    "title": null,
    "body": "<p>Tons of great answers here, but if you've read down this far, this helped me to 'get it'. Open the console on Chrome (etc), and start typing:</p>\n\n<pre><code>!(!(1))\n!(!(0))\n!(!('truthy')) \n!(!(null))\n!(!(''))\n!(!(undefined))\n!(!(new Object())\n!(!({}))\nwoo = 'hoo'\n!(!(woo))\n...etc, etc, until the light goes on ;)\n</code></pre>\n\n<p>Naturally, these are all the same as merely typing !!someThing, but the added parentheses might help make it more understandable.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2161009,
      "name": "Warren Davis",
      "reputation": 153
    }
  },
  {
    "soID": 31780517,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/31780517",
    "title": null,
    "body": "<p>Difference between these to methods are, how you want to pass the parameters.</p>\n\n<p>“A for array and C for comma” is a handy mnemonic.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2165104,
      "name": "venkat7668",
      "reputation": 1381
    }
  },
  {
    "soID": 32984172,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/32984172",
    "title": null,
    "body": "<p>this is my take on a random number in a range, as in I wanted to get a random number within a range of base to exponent.  e.g. base = 10, exponent = 2, gives a random number from 0 to 100, ideally, and so on.</p>\n\n<p>if it helps use it, here it is:</p>\n\n<pre><code>// get random number within provided base + exponent\n// by Goran Biljetina --&gt; 2012\n\nfunction isEmpty(value){\n    return (typeof value === \"undefined\" || value === null);\n}\nvar numSeq = new Array();\nfunction add(num,seq){\n    var toAdd = new Object();\n     toAdd.num = num;\n     toAdd.seq = seq;\n     numSeq[numSeq.length] = toAdd;\n}\nfunction fillNumSeq (num,seq){\n    var n;\n    for(i=0;i&lt;=seq;i++){\n        n = Math.pow(num,i);\n        add(n,i);\n    }\n}\nfunction getRandNum(base,exp){\n    if (isEmpty(base)){\n        console.log(\"Specify value for base parameter\");\n    }\n    if (isEmpty(exp)){\n        console.log(\"Specify value for exponent parameter\");\n    }\n    fillNumSeq(base,exp);\n    var emax;\n    var eseq;\n    var nseed;\n    var nspan;\n    emax = (numSeq.length);\n    eseq = Math.floor(Math.random()*emax)+1;\n    nseed = numSeq[eseq].num;\n    nspan = Math.floor((Math.random())*(Math.random()*nseed))+1;\n    return Math.floor(Math.random()*nspan)+1;\n}\n\nconsole.log(getRandNum(10,20),numSeq);\n//testing:\n//getRandNum(-10,20);\n//console.log(getRandNum(-10,20),numSeq);\n//console.log(numSeq);\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2175524,
      "name": "goranBiljetina",
      "reputation": 201
    }
  },
  {
    "soID": 25701485,
    "parentID": 1414365,
    "url": "https://stackoverflow.com/q/25701485",
    "title": null,
    "body": "<pre><code>$(\"input\")[0].disabled = true;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(\"input\")[0].disabled = false;\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2179157,
      "name": "Sajjad Shirazy",
      "reputation": 772
    }
  },
  {
    "soID": 35502852,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/35502852",
    "title": null,
    "body": "<p><strong><em><a href=\"https://code.visualstudio.com/\" rel=\"noreferrer\">Visual Studio Code</a></em></strong> will be my choice for debugging. No overhead of installing any tools or <code>npm install</code> stuff.\nJust set the starting point of your app in package.json and VSCode will automatically create a configuration file inside your solution. It's build on <a href=\"http://electron.atom.io/\" rel=\"noreferrer\">Electron</a>, on which editors like Atom are built.</p>\n\n<blockquote>\n  <p>VS Code gives similar debugging experience as you might have\n  had in other IDEs like VS, Eclipse, etc.</p>\n</blockquote>\n\n<p><a href=\"https://i.stack.imgur.com/gxSUW.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/gxSUW.png\" alt=\"enter image description here\"></a>\n<a href=\"https://i.stack.imgur.com/f0lks.gif\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/f0lks.gif\" alt=\"enter image description here\"></a></p>\n",
    "score": 33,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2187950,
      "name": "Shreyas",
      "reputation": 877
    }
  },
  {
    "soID": 16212050,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/16212050",
    "title": null,
    "body": "<p>I also think that <code>location.replace(URL)</code> is the best way, but if you want to notify the search engines about your redirection (they don't analyze JavaScript code to see the redirection) you should add the <code>rel=\"canonical\"</code> meta tag to your website.</p>\n\n<p>Adding a noscript section with a HTML refresh meta tag in it, is also a good solution. I suggest you to use this <a href=\"http://insider.zone/tools/client-side-url-redirect-generator/\">JavaScript redirection tool</a> to create redirections. It also has Internet&nbsp;Explorer support to pass the HTTP referrer.</p>\n\n<p>Sample code without delay looks like this:</p>\n\n<pre><code>&lt;!-- Pleace this snippet right after opening the head tag to make it work properly --&gt;\n\n&lt;!-- This code is licensed under GNU GPL v3 --&gt;\n&lt;!-- You are allowed to freely copy, distribute and use this code, but removing author credit is strictly prohibited --&gt;\n&lt;!-- Generated by http://insider.zone/tools/client-side-url-redirect-generator/ --&gt;\n\n&lt;!-- REDIRECTING STARTS --&gt;\n&lt;link rel=\"canonical\" href=\"https://yourdomain.com/\"/&gt;\n&lt;noscript&gt;\n    &lt;meta http-equiv=\"refresh\" content=\"0;URL=https://yourdomain.com/\"&gt;\n&lt;/noscript&gt;\n&lt;!--[if lt IE 9]&gt;&lt;script type=\"text/javascript\"&gt;var IE_fix=true;&lt;/script&gt;&lt;![endif]--&gt;\n&lt;script type=\"text/javascript\"&gt;\n    var url = \"https://yourdomain.com/\";\n    if(typeof IE_fix != \"undefined\") // IE8 and lower fix to pass the http referer\n    {\n        document.write(\"redirecting...\"); // Don't remove this line or appendChild() will fail because it is called before document.onload to make the redirect as fast as possible. Nobody will see this text, it is only a tech fix.\n        var referLink = document.createElement(\"a\");\n        referLink.href = url;\n        document.body.appendChild(referLink);\n        referLink.click();\n    }\n    else { window.location.replace(url); } // All other browsers\n&lt;/script&gt;\n&lt;!-- Credit goes to http://insider.zone/ --&gt;\n&lt;!-- REDIRECTING ENDS --&gt;\n</code></pre>\n",
    "score": 149,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2190252,
      "name": "Patartics Milán",
      "reputation": 2542
    }
  },
  {
    "soID": 36424020,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/36424020",
    "title": null,
    "body": "<p>Here is a working demo given for you:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>window.location.replace(\"http://www.tutorialrepublic.com/\");</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>Put any HTML you want, it will redirect to \"http://www.tutorialrepublic.com/\" in any case.</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>You can find more in <strong><a href=\"http://www.tutorialrepublic.com/faq/how-to-redirect-a-page-using-jquery.php\" rel=\"nofollow\">here</a></strong>.</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2193439,
      "name": "Abrar Jahin",
      "reputation": 1
    }
  },
  {
    "soID": 19682604,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/19682604",
    "title": null,
    "body": "<p><strong>1) If your HTML markup is:</strong></p>\n\n<pre><code>&lt;input type=\"checkbox\"  /&gt;\n</code></pre>\n\n<p>attr used:</p>\n\n<pre><code>$(element).attr(\"checked\"); // Will give you undefined as initial value of checkbox is not set\n</code></pre>\n\n<p>If prop is used:</p>\n\n<pre><code>$(element).prop(\"checked\"); // Will give you false whether or not initial value is set\n</code></pre>\n\n<p><strong>2) If your HTML markup is:</strong></p>\n\n<pre><code> &lt;input type=\"checkbox\"  checked=\"checked\" /&gt;// May be like this also  checked=\"true\"\n</code></pre>\n\n<p>attr used:</p>\n\n<pre><code>$(element).attr(\"checked\") // Will return checked whether it is checked=\"true\"\n</code></pre>\n\n<p>Prop used:</p>\n\n<pre><code>$(element).prop(\"checked\") // Will return true whether checked=\"checked\"\n</code></pre>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43390114,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/43390114",
    "title": null,
    "body": "<p>If you use Angular, then a plugin module <a href=\"https://oclazyload.readme.io/docs/getting-started\" rel=\"nofollow noreferrer\">$ocLazyLoad</a> can help you to do that. </p>\n\n<p>Here are some quotes from its documentation:</p>\n\n<blockquote>\n  <p>Load one or more modules &amp; components with multiple files:</p>\n\n<pre><code>$ocLazyLoad.load(['testModule.js', 'testModuleCtrl.js', 'testModuleService.js']);\n</code></pre>\n  \n  <p>Load one or more modules with multiple files and specify a type where necessary:\n  Note: When using the requireJS style formatting (with js! at the beginning for example), do not specify a file extension. Use one or the other.</p>\n\n<pre><code>$ocLazyLoad.load([\n  'testModule.js',\n   {type: 'css', path: 'testModuleCtrl'},\n   {type: 'html', path: 'testModuleCtrl.html'},\n   {type: 'js', path: 'testModuleCtrl'},\n   'js!testModuleService',\n   'less!testModuleLessFile'\n]);\n</code></pre>\n  \n  <p>You can load external libs (not angular):</p>\n\n<pre><code>$ocLazyLoad.load(['testModule.js', \n   'bower_components/bootstrap/dist/js/bootstrap.js', 'anotherModule.js']);\n</code></pre>\n  \n  <p>You can also load css and template files:</p>\n\n<pre><code> $ocLazyLoad.load([\n     'bower_components/bootstrap/dist/js/bootstrap.js',\n     'bower_components/bootstrap/dist/css/bootstrap.css',\n     'partials/template1.html'\n ]);\n</code></pre>\n</blockquote>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2197555,
      "name": "gm2008",
      "reputation": 2286
    }
  },
  {
    "soID": 42849525,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/42849525",
    "title": null,
    "body": "<p>Most people are likely doing this to encode a URL. To encode a URL, you shouldn't only consider spaces, but convert the entire string properly with <code>encodeURI</code>.</p>\n\n<pre><code>encodeURI(\"http://www.google.com/a file with spaces.html\")\n</code></pre>\n\n<p>to get:</p>\n\n<pre><code>http://www.google.com/a%20file%20with%20spaces.html\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2199852,
      "name": "User",
      "reputation": 5655
    }
  },
  {
    "soID": 23516713,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/23516713",
    "title": null,
    "body": "<p>I arrived at this post after hitting on another post that has been closed as a duplicate of this - titled 'how to store an array in localstorage?'.  Which is fine except neither thread actually provides a full answer as to how you can maintain an array in localStorage - however I have managed to craft a solution based on information contained in both threads.</p>\n\n<p>So if anyone else is wanting to be able to push/pop/shift items within an array, and they want that array stored in localStorage or indeed sessionStorage, here you go:</p>\n\n<pre><code>Storage.prototype.getArray = function(arrayName) {\n  var thisArray = [];\n  var fetchArrayObject = this.getItem(arrayName);\n  if (typeof fetchArrayObject !== 'undefined') {\n    if (fetchArrayObject !== null) { thisArray = JSON.parse(fetchArrayObject); }\n  }\n  return thisArray;\n}\n\nStorage.prototype.pushArrayItem = function(arrayName,arrayItem) {\n  var existingArray = this.getArray(arrayName);\n  existingArray.push(arrayItem);\n  this.setItem(arrayName,JSON.stringify(existingArray));\n}\n\nStorage.prototype.popArrayItem = function(arrayName) {\n  var arrayItem = {};\n  var existingArray = this.getArray(arrayName);\n  if (existingArray.length &gt; 0) {\n    arrayItem = existingArray.pop();\n    this.setItem(arrayName,JSON.stringify(existingArray));\n  }\n  return arrayItem;\n}\n\nStorage.prototype.shiftArrayItem = function(arrayName) {\n  var arrayItem = {};\n  var existingArray = this.getArray(arrayName);\n  if (existingArray.length &gt; 0) {\n    arrayItem = existingArray.shift();\n    this.setItem(arrayName,JSON.stringify(existingArray));\n  }\n  return arrayItem;\n}\n\nStorage.prototype.unshiftArrayItem = function(arrayName,arrayItem) {\n  var existingArray = this.getArray(arrayName);\n  existingArray.unshift(arrayItem);\n  this.setItem(arrayName,JSON.stringify(existingArray));\n}\n\nStorage.prototype.deleteArray = function(arrayName) {\n  this.removeItem(arrayName);\n}\n</code></pre>\n\n<p>example usage - storing simple strings in localStorage array:</p>\n\n<pre><code>localStorage.pushArrayItem('myArray','item one');\nlocalStorage.pushArrayItem('myArray','item two');\n</code></pre>\n\n<p>example usage - storing objects in sessionStorage array:</p>\n\n<pre><code>var item1 = {}; item1.name = 'fred'; item1.age = 48;\nsessionStorage.pushArrayItem('myArray',item1);\n\nvar item2 = {}; item2.name = 'dave'; item2.age = 22;\nsessionStorage.pushArrayItem('myArray',item2);\n</code></pre>\n\n<p>common methods to manipulate arrays:</p>\n\n<pre><code>.pushArrayItem(arrayName,arrayItem); -&gt; adds an element onto end of named array\n.unshiftArrayItem(arrayName,arrayItem); -&gt; adds an element onto front of named array\n.popArrayItem(arrayName); -&gt; removes &amp; returns last array element\n.shiftArrayItem(arrayName); -&gt; removes &amp; returns first array element\n.getArray(arrayName); -&gt; returns entire array\n.deleteArray(arrayName); -&gt; removes entire array from storage\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2208713,
      "name": "Andy Lorenz",
      "reputation": 553
    }
  },
  {
    "soID": 28710765,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/28710765",
    "title": null,
    "body": "<p>A short way of creating div is</p>\n\n<pre><code>var customDiv = $(\"&lt;div/&gt;\");\n</code></pre>\n\n<p>Now the custom div  can be appended to any other div.</p>\n",
    "score": 40,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2209468,
      "name": "maxspan",
      "reputation": 2702
    }
  },
  {
    "soID": 21459196,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/21459196",
    "title": null,
    "body": "<pre><code> $(\"#selectID option:selected\").text();\n</code></pre>\n\n<p>Instead of <code>#selectID</code> you can use any jQuery selector, like <code>.selectClass</code> using class.</p>\n\n<p>As mentioned in the documentation <a href=\"http://api.jquery.com/selected-selector/\">here</a>.</p>\n\n<p><em>The :selected selector works for &lt;option> elements. It does not work for checkboxes or radio inputs; use <code>:checked</code> for them.</em></p>\n\n<p><strong>.text()</strong> As per the documentation <a href=\"http://api.jquery.com/text/\">here</a>.</p>\n\n<p><em>Get the combined text contents of each element in the set of matched elements, including their descendants.</em></p>\n\n<p>So you can take text from any HTML element using the <code>.text()</code> method.</p>\n\n<p>Refer the documentation for a deeper explanation.</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2218452,
      "name": "Nikhil Agrawal",
      "reputation": 13082
    }
  },
  {
    "soID": 20744665,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/20744665",
    "title": null,
    "body": "<p>JavaScript provides you many methods to retrieve and change the current URL which is displayed in browser's address bar. All these methods uses the Location object, which is  a property of the Window object. You can create a new Location object that has the current URL as follows..</p>\n\n<pre><code>var currentLocation = window.location;\n</code></pre>\n\n<p><strong>Basic Structure of a URL</strong></p>\n\n<pre><code>&lt;protocol&gt;//&lt;hostname&gt;:&lt;port&gt;/&lt;pathname&gt;&lt;search&gt;&lt;hash&gt;\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/4kiBE.jpg\" alt=\"enter image description here\"></p>\n\n<ol>\n<li><p>Protocol -- Specifies the protocol name be used to access the resource on the Internet. (HTTP (without SSL) or HTTPS (with SSL))</p></li>\n<li><p>hostname -- Host name specifies the host that owns the resource. For example, www.stackoverflow.com. A server provides services using the name of the host.</p></li>\n<li><p>port -- A port number used to recognize a specific process to which an Internet or other network message is to be forwarded when it arrives at a server.</p></li>\n<li><p>pathname -- The path gives info about the specific resource within the host that the Web client wants to access. For example, stackoverflow.com/index.html.</p></li>\n<li><p>query --  A query string follows the path component, and provides a string of information that the resource can utilize for some purpose (for example, as parameters for a search or as data to be processed). </p></li>\n<li><p>hash -- The anchor portion of a URL, includes the hash sign (#).</p></li>\n</ol>\n\n<p>With these Location object properties you can access all of these URL components</p>\n\n<ol>\n<li><strong>hash</strong>   -Sets or returns the anchor portion of a URL.  </li>\n<li><strong>host</strong>   -Sets\nor returns the hostname and port of a URL.   </li>\n<li><strong>hostname</strong>   -Sets or\nreturns the hostname of a URL.   </li>\n<li><strong>href</strong>   -Sets or returns the entire\nURL.  </li>\n<li><strong>pathname</strong>   -Sets or returns the path name of a URL.   </li>\n<li><strong>port</strong> -Sets or returns the port number the server uses for a URL.  </li>\n<li><strong>protocol</strong>   -Sets or returns the protocol of a URL.   </li>\n<li><strong>search</strong>   -Sets\nor returns the query portion of a URL</li>\n</ol>\n\n<p>Now If you want to change a page or redirect the user to some other page you can use the <code>href</code> property of the Location object like this</p>\n\n<p>You can use the href property of the Location object.</p>\n\n<pre><code>window.location.href = \"http://www.stackoverflow.com\";\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/agrawalnikhil/7Ly8f/\">Demo Fiddle</a></p>\n\n<p><strong>Location Object</strong> also have these three methods</p>\n\n<ol>\n<li><strong>assign()</strong> -- Loads a new document.</li>\n<li><strong>reload()</strong> -- Reloads the current document.</li>\n<li><strong>replace()</strong> -- Replaces the current document with a new one</li>\n</ol>\n\n<p>You can use assign() and replace methods also to redirect to other pages like these</p>\n\n<pre><code>location.assign(\"http://www.stackoverflow.com\");\n\nlocation.replace(\"http://www.stackoverflow.com\");\n</code></pre>\n\n<p><strong><em>How assign() and replace() differs</strong> -- The difference between replace() method and assign() method(), is that replace() removes the URL of the current document from the document history, means it is not possible to use the \"back\" button to navigate back to the original document. So Use the assign() method if you want to load a new document, andwant to give the option to navigate back to the original document.</em></p>\n\n<p>You can change the location object href property using <strong>jQuery</strong> also  like this</p>\n\n<pre><code>$(location).attr('href',url);\n</code></pre>\n\n<p>And hence you can redirect the user to some other url.</p>\n",
    "score": 124,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2218452,
      "name": "Nikhil Agrawal",
      "reputation": 13082
    }
  },
  {
    "soID": 27013704,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/27013704",
    "title": null,
    "body": "<h2>Stringify doesn't solve all problems</h2>\n\n<p>It seems that the answers here don't cover all types that are possible in JavaScript, so here are some short examples on how to deal with them correctly: </p>\n\n<pre><code>//Objects and Arrays:\n    var obj = {key: \"value\"};\n    localStorage.object = JSON.stringify(obj);  //Will ignore private members\n    obj = JSON.parse(localStorage.object);\n//Boolean:\n    var bool = false;\n    localStorage.bool = bool;\n    bool = (localStorage.bool === \"true\");\n//Numbers:\n    var num = 42;\n    localStorage.num = num;\n    num = +localStorage.num;    //short for \"num = parseFloat(localStorage.num);\"\n//Dates:\n    var date = Date.now();\n    localStorage.date = date;\n    date = new Date(parseInt(localStorage.date));\n//Regular expressions:\n    var regex = /^No\\.[\\d]*$/i;     //usage example: \"No.42\".match(regex);\n    localStorage.regex = regex;\n    var components = localStorage.regex.match(\"^/(.*)/([a-z]*)$\");\n    regex = new RegExp(components[1], components[2]);\n//Functions (not recommended):\n    function func(){}\n    localStorage.func = func;\n    eval( localStorage.func );      //recreates the function with the name \"func\"\n</code></pre>\n\n<p><strong>I do not recommend</strong> to store functions because <code>eval()</code> is evil can lead to issues regarding security, optimisation and debugging.\n        In general, <code>eval()</code> should never be used in JavaScript code.</p>\n\n<h2>Private members</h2>\n\n<p>The problem with using <code>JSON.stringify()</code> for storing objects is, that this function can not serialise private members.\nThis issue can be solved by overwriting the <code>.toString()</code> method (which is called implicitly when storing data in web storage):</p>\n\n<pre><code>//Object with private and public members:\n    function MyClass(privateContent, publicContent){\n        var privateMember = privateContent || \"defaultPrivateValue\";\n        this.publicMember = publicContent  || \"defaultPublicValue\";\n\n        this.toString = function(){\n            return '{\"private\": \"' + privateMember + '\", \"public\": \"' + this.publicMember + '\"}';\n        };\n    }\n    MyClass.fromString = function(serialisedString){\n        var properties = JSON.parse(serialisedString || \"{}\");\n        return new MyClass( properties.private, properties.public );\n    };\n//Storing:\n    var obj = new MyClass(\"invisible\", \"visible\");\n    localStorage.object = obj;\n//Loading:\n    obj = MyClass.fromString(localStorage.object);\n</code></pre>\n\n<h2>Circular references</h2>\n\n<p>Another problem <code>stringify</code> can't deal with are circular references:</p>\n\n<pre><code>var obj = {};\nobj[\"circular\"] = obj;\nlocalStorage.object = JSON.stringify(obj);  //Fails\n</code></pre>\n\n<p>In this example, <code>JSON.stringify()</code> will throw a <code>TypeError</code> <em>\"Converting circular structure to JSON\"</em>.\n        If storing circular references should be supported, the second parameter of <code>JSON.stringify()</code> might be used:</p>\n\n<pre><code>var obj = {id: 1, sub: {}};\nobj.sub[\"circular\"] = obj;\nlocalStorage.object = JSON.stringify( obj, function( key, value) {\n    if( key == 'circular') {\n        return \"$ref\"+value.id+\"$\";\n    } else {\n        return value;\n    }\n});\n</code></pre>\n\n<p>However, finding an efficient solution for storing circular references highly depends on the tasks that need to be solved, and restoring such data is not trivial either.</p>\n\n<p>There are already some question on SO dealing with this problem: <a href=\"https://stackoverflow.com/questions/10392293/stringify-javascript-object-with-circular-reference/12659424#12659424\">Stringify (convert to JSON) a JavaScript object with circular reference</a></p>\n",
    "score": 41,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2224996,
      "name": "maja",
      "reputation": 5307
    }
  },
  {
    "soID": 40935867,
    "parentID": 1098040,
    "url": "https://stackoverflow.com/q/40935867",
    "title": null,
    "body": "<h3>We can use - <code>hasOwnProperty.call(obj, key);</code></h3>\n\n<p>The <a href=\"http://underscorejs.org/#has\" rel=\"nofollow noreferrer\">underscore.js</a> way - </p>\n\n<pre><code>if(_.has(this.options, 'login')){\n  //key 'login' exists in this.options \n}\n\n_.has = function(obj, key) {\n  return hasOwnProperty.call(obj, key);\n};\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2234618,
      "name": "Mohan Dere",
      "reputation": 1031
    }
  },
  {
    "soID": 38931349,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/38931349",
    "title": null,
    "body": "<h2>Here are some approaches to work with asynchronous requests:</h2>\n\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"nofollow noreferrer\">Browser Promise object</a></li>\n<li><a href=\"https://github.com/kriskowal/q\" rel=\"nofollow noreferrer\">Q</a> - A promise library for JavaScript</li>\n<li><a href=\"https://www.promisejs.org/\" rel=\"nofollow noreferrer\">A+ Promises.js</a></li>\n<li><a href=\"https://api.jquery.com/jquery.deferred/\" rel=\"nofollow noreferrer\">jQuery deferred</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\" rel=\"nofollow noreferrer\">XMLHttpRequest API</a></li>\n<li>Using callback concept - As implementation in first answer</li>\n</ol>\n\n<h3>Example: jQuery deferred implementation to work with multiple requests</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var App = App || {};\r\n\r\nApp = {\r\n    getDataFromServer: function(){\r\n\r\n      var self = this,\r\n                 deferred = $.Deferred(),\r\n                 requests = [];\r\n\r\n      requests.push($.getJSON('request/ajax/url/1'));\r\n      requests.push($.getJSON('request/ajax/url/2'));\r\n\r\n      $.when.apply(jQuery, requests).done(function(xhrResponse) {\r\n        return deferred.resolve(xhrResponse.result);\r\n      });\r\n      return deferred;\r\n    },\r\n\r\n    init: function(){\r\n\r\n        this.getDataFromServer().done(_.bind(function(resp1, resp2) {\r\n\r\n           // Do the operations which you wanted to do when you\r\n           // get a response from Ajax, for example, log response.\r\n        }, this));\r\n    }\r\n};\r\nApp.init();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2234618,
      "name": "Mohan Dere",
      "reputation": 1031
    }
  },
  {
    "soID": 16200403,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/16200403",
    "title": null,
    "body": "<pre><code>String.prototype.repeat = function(n) { \n    return new Array(++n).join(this); \n};\n\nString.prototype.pad = function(requiredLength, paddingStr, paddingType) {    \n    var n = requiredLength - this.length; \n\n    if (n) {\n        paddingType = paddingType ? paddingType.toLowerCase() : '';\n        paddingStr = paddingStr || ' ';\n        paddingStr = paddingStr.repeat( Math.ceil(n / paddingStr.length) ).substr(0, n);\n\n        if (paddingType == 'both') {\n            n /= 2;\n            return paddingStr.substr( 0, Math.ceil(n) ) + this + paddingStr.substr( 0, Math.floor(n) );\n        }   \n\n        if (paddingType == 'left') {\n            return paddingStr + this;\n        }\n\n        return this + paddingStr;\n    } \n\n    return this; \n}; \n\n// синтаксис аналогичен printf\n// 'Привет, %s!'.format('мир') -&gt; \"Привет, мир!\"\n// '%.1s.%.1s. %s'.format('Иван', 'Иванович', 'Иванов') -&gt; \"И.И. Иванов\"\nString.prototype.format = function() {\n    var i = 0, \n        params = arguments;\n\n    return this.replace(/%(?:%|(?:(|[+-]+)(|0|'.+?)([1-9]\\d*)?(?:\\.([1-9]\\d*))?)?(s|d|f))/g, function(match, sign, padding, width, precision, type) {\n        if (match == '%%') { \n            return '%'; \n        }\n\n        var v = params[i++];\n\n        if (type == 'd') { \n            v = Math.round(v); \n        }\n        else if (type == 'f') {\n            v = v.toFixed(precision ? precision : 6);\n        }\n\n        if (/\\+/.test(sign) &amp;&amp; v &gt; 0) {\n            v = '+' + v;\n        }\n\n        v += '';\n\n        if (type != 'f' &amp;&amp; precision) {\n            v = v.substr(0, precision);\n        }\n\n        if (width) {\n            v = v.pad(width, padding == '' ? ' ' : padding[0] == \"'\" ? padding.substr(1) : padding, /-/.test(sign) ? 'right' : 'left'); \n        }\n\n        return v;\n    });\n};\n\n// this.name = 'Вася';\n// console.log( 'Привет, ${name}!'.template(this) );\n// \"Привет, Вася!\"\nString.prototype.template = function(context) {\n    return this.replace(/\\$\\{(.*?)\\}/g, function(match, name) {\n        return context[name];\n    });\n};\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 37077982,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/37077982",
    "title": null,
    "body": "<p>Firstly just wanted to clear up what capitalize means in this context.\n \"<strong>T</strong>his <strong>S</strong>tring <strong>I</strong>s <strong>C</strong>apitalized\" <a href=\"https://en.wikipedia.org/wiki/Capitalization\" rel=\"nofollow\">Reliable source</a> </p>\n\n<p>You can see from the example provided this is not what the OP is looking for. What it should say is \"How do i make the first letter of a string uppercase\" (<strong>Not capitalize string</strong>)</p>\n\n<pre><code>function ucfirst (str) {\n    return typeof str !=\"undefined\"  ? (str += '', str[0].toUpperCase() + str.substr(1)) : '' ;\n}\n</code></pre>\n\n<p>Explained </p>\n\n<pre><code>typeof str !=\"undefined\" // is str set\n? // true \nstr += '' // turn the string variable into a string \nstr[0].toUpperCase() //get the first character and make it upper case\n+ // add\nstr.substr(1) // string starting from the index 1 ( starts at 0) \n: // false \n''; //return empty string\n</code></pre>\n\n<p>This will work with any argument or no argument at all.  </p>\n\n<pre><code>undefined         === \"\"\n\"\"                === \"\"\n\"my string\"       === \"My string\"\nnull              === \"Null\"\nundefined         === \"\";\nfalse             === \"False\"\n0                 === \"0\"\ntrue              === \"True\"\n[]                === \"\"\n[true,0,\"\",false] === \"True,0,,false\"\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2273611,
      "name": "TarranJones",
      "reputation": 1150
    }
  },
  {
    "soID": 19620045,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/19620045",
    "title": null,
    "body": "<p>Since the question is pretty popular, I thought I could add a little modern flavor to the code.</p>\n\n<pre><code>var allLinks = content.document.getElementsByTagName(\"a\")\n,   il       = allLinks.length\n,   i        = 0\n,   test\n,   alrt;\n\nwhile (i &lt; il) {\n    elm  = allLinks[i++];\n    test = elm.getAttribute(\"class\");\n\n    if (test.indexOf(\"title\") &gt; -1)\n        console.log(elm), foundLinks++;\n}\nalrt = foundLinks ? \"Found \" + foundLinks + \" title class\" : \"No title class found\";\nconsole.log(alrt);\n</code></pre>\n\n<p>BTW, the correct answer is misspelling <code>indexOf</code> or the non-standard <code>String.contains</code>.\nLoading an external library (especially if the code is written in pure JavaScript) or messing with <code>String.prototype</code> or using a <a href=\"http://en.wikipedia.org/wiki/Regular_expression\">regular expression</a> is a little overkill.</p>\n",
    "score": 24,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2284613,
      "name": "Jay Harris",
      "reputation": 3171
    }
  },
  {
    "soID": 18234317,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/18234317",
    "title": null,
    "body": "<p>It's funny because Stack&nbsp;Overflow actually has their own formatting function for the <code>String</code> prototype called <code>formatUnicorn</code>. Try it! Go into the console and type something like:</p>\n\n<pre><code>\"Hello, {name}, are you feeling {adjective}?\".formatUnicorn({name:\"Gabriel\", adjective: \"OK\"});\n</code></pre>\n\n<p><img src=\"https://i.stack.imgur.com/jYeIc.png\" alt=\"Firebug\"></p>\n\n<p>You get this output:</p>\n\n<p><code>Hello, Gabriel, are you feeling OK?</code></p>\n\n<p>You can use objects, arrays, and strings as arguments! I got its code and reworked it to produce a new version of <code>String.prototype.format</code>:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>String.prototype.formatUnicorn = String.prototype.formatUnicorn ||\nfunction () {\n    \"use strict\";\n    var str = this.toString();\n    if (arguments.length) {\n        var t = typeof arguments[0];\n        var key;\n        var args = (\"string\" === t || \"number\" === t) ?\n            Array.prototype.slice.call(arguments)\n            : arguments[0];\n\n        for (key in args) {\n            str = str.replace(new RegExp(\"\\\\{\" + key + \"\\\\}\", \"gi\"), args[key]);\n        }\n    }\n\n    return str;\n};\n</code></pre>\n\n<p>Note the clever <code>Array.prototype.slice.call(arguments)</code> call -- that means if you throw in arguments that are strings or numbers, not a single JSON-style object, you get C#'s <a href=\"https://msdn.microsoft.com/en-us/library/system.string.format(v=vs.110).aspx#Starting\"><code>String.Format</code></a> behavior almost exactly.</p>\n\n<pre><code>\"a{0}bcd{1}ef\".formatUnicorn(\"foo\", \"bar\"); // yields \"aFOObcdBARef\"\n</code></pre>\n\n<p>That's because <code>Array</code>'s <code>slice</code> will force whatever's in <code>arguments</code> into an <code>Array</code>, whether it was originally or not, and the <code>key</code> will be the index (0, 1, 2...) of each array element coerced into a string (eg, \"0\", so <code>\"\\\\{0\\\\}\"</code> for your first regexp pattern).</p>\n\n<p>Neat.</p>\n",
    "score": 282,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 37049593,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/37049593",
    "title": null,
    "body": "<p>There are many good answers here, but I would like to point out that they can be extended very simply to achieve a lot more complex sorting. The only thing you have to do is to use the OR operator to chain comparision functions like this:</p>\n\n<pre><code>objs.sort((a,b)=&gt; fn1(a,b) || fn2(a,b) || fn3(a,b) )\n</code></pre>\n\n<p>Where <code>fn1</code>, <code>fn2</code>, ... are the sort functions which return [-1,0,1]. This results in \"sorting by fn1\", \"sorting by fn2\" which is pretty much equal to ORDER BY in SQL.</p>\n\n<p>This solution is based on the behaviour of <code>||</code> operator which evaluates to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Logical_operators\" rel=\"noreferrer\">first evaluated expression which can be converted to true</a>.</p>\n\n<p><strong>The simplest form</strong> has only one inlined function like this:</p>\n\n<pre><code>// ORDER BY last_nom\nobjs.sort((a,b)=&gt; a.last_nom.localeCompare(b.last_nom) )\n</code></pre>\n\n<p>Having two steps with  <code>last_nom</code>,<code>first_nom</code> sort order would look like this:</p>\n\n<pre><code>// ORDER_BY last_nom, first_nom\nobjs.sort((a,b)=&gt; a.last_nom.localeCompare(b.last_nom) || \n                  a.first_nom.localeCompare(b.first_nom)  )\n</code></pre>\n\n<p><strong>A generic comparision function</strong> could be something like this:</p>\n\n<pre><code>// ORDER BY &lt;n&gt;\nlet cmp = (a,b,n)=&gt;a[n].localeCompare(b[n])\n</code></pre>\n\n<p>This function could be extended to support numeric fields, case sensitity, arbitary datatypes etc.</p>\n\n<p>You can them use it with chaining them by sort priority:</p>\n\n<pre><code>// ORDER_BY last_nom, first_nom\nobjs.sort((a,b)=&gt; cmp(a,b, \"last_nom\") || cmp(a,b, \"first_nom\") )\n// ORDER_BY last_nom, first_nom DESC\nobjs.sort((a,b)=&gt; cmp(a,b, \"last_nom\") || -cmp(a,b, \"first_nom\") )\n// ORDER_BY last_nom DESC, first_nom DESC\nobjs.sort((a,b)=&gt; -cmp(a,b, \"last_nom\") || -cmp(a,b, \"first_nom\") )\n</code></pre>\n\n<p>The point here is that pure JavaScript with functional approach can take you a long way without external libraries or complex code. It is also very effective, since no string parsing have to be done</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2287682,
      "name": "Tero Tolonen",
      "reputation": 2228
    }
  },
  {
    "soID": 34147785,
    "parentID": 2067472,
    "url": "https://stackoverflow.com/q/34147785",
    "title": null,
    "body": "<p>Before understanding JSONP, you need to know JSON format and XML. Currently the most frequently used data format on the web is XML, but XML is very complicated. It makes users inconvenient to process embedded in Web pages. </p>\n\n<p>To make JavaScript can easily exchange data, even as the data processing program, we use the wording according to JavaScript objects and developed a simple data exchange format, which is JSON. JSON can be used as data, or as a JavaScript program. </p>\n\n<p>JSON can be directly embedded in JavaScript, using them you can directly execute certain JSON program, but due to security constraints, the browser Sandbox mechanism disables cross-domain JSON code execution.</p>\n\n<p>To make JSON can be passed after the execution, we developed a JSONP. JSONP bypass the security limits of the browser with JavaScript Callback functionality and the &lt; script > tag. </p>\n\n<p>So in short it explains what JSONP is, what problem it solves (when to use it).</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2288882,
      "name": "Marcus Thornton",
      "reputation": 2286
    }
  },
  {
    "soID": 32382206,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/32382206",
    "title": null,
    "body": "<p>Try this, </p>\n\n<pre><code>$('#isAgeSelected').click(function() {\n    if(this.checked){\n        $(\"#txtAge\").show();\n    } else{\n        $(\"#txtAge\").hide();\n    } \n});\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16123067,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/16123067",
    "title": null,
    "body": "<p>I liked the Brian answer:</p>\n\n<pre><code>function is_array(o){\n    // make sure an array has a class attribute of [object Array]\n    var check_class = Object.prototype.toString.call([]);\n    if(check_class === '[object Array]')    {\n        // test passed, now check\n        return Object.prototype.toString.call(o) === '[object Array]';\n    } else{\n        // may want to change return value to something more desirable\n        return -1; \n    }\n}\n</code></pre>\n\n<p>but you could just do like this:</p>\n\n<pre><code>return Object.prototype.toString.call(o) === Object.prototype.toString.call([]);\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2302673,
      "name": "zeageorge",
      "reputation": 11
    }
  },
  {
    "soID": 22346348,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/22346348",
    "title": null,
    "body": "<p>There's a cross-domain issue using Ajax. You must be sure you are accessing your files on the same <code>http://</code> path without <code>www.</code> (or access from <code>http://www.</code> and post to the same path including <code>www.</code>) which the browser considers as another domain when accessing via a <code>www.</code> path, so you see where the problem is. You are posting to a different domain and the browser blocks the flow because of the origin issue.</p>\n\n<p>If the <a href=\"http://en.wikipedia.org/wiki/Application_programming_interface\">API</a> is not placed on the same host that you are requesting from, the flow is blocked, and you will need to find another way to communicate with the API.</p>\n",
    "score": 53,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2307600,
      "name": "Alin Razvan",
      "reputation": 745
    }
  },
  {
    "soID": 16174180,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/16174180",
    "title": null,
    "body": "<p>Combining Ege's dynamic solution with Vinay's idea, you get a nice robust solution:</p>\n\n<pre><code>Array.prototype.sortBy = function() {\n    function _sortByAttr(attr) {\n        var sortOrder = 1;\n        if (attr[0] == \"-\") {\n            sortOrder = -1;\n            attr = attr.substr(1);\n        }\n        return function(a, b) {\n            var result = (a[attr] &lt; b[attr]) ? -1 : (a[attr] &gt; b[attr]) ? 1 : 0;\n            return result * sortOrder;\n        }\n    }\n    function _getSortFunc() {\n        if (arguments.length == 0) {\n            throw \"Zero length arguments not allowed for Array.sortBy()\";\n        }\n        var args = arguments;\n        return function(a, b) {\n            for (var result = 0, i = 0; result == 0 &amp;&amp; i &lt; args.length; i++) {\n                result = _sortByAttr(args[i])(a, b);\n            }\n            return result;\n        }\n    }\n    return this.sort(_getSortFunc.apply(null, arguments));\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>// Utility for printing objects\nArray.prototype.print = function(title) {\n    console.log(\"************************************************************************\");\n    console.log(\"**** \"+title);\n    console.log(\"************************************************************************\");\n    for (var i = 0; i &lt; this.length; i++) {\n        console.log(\"Name: \"+this[i].FirstName, this[i].LastName, \"Age: \"+this[i].Age);\n    }\n}\n\n// Setup sample data\nvar arrObj = [\n    {FirstName: \"Zach\", LastName: \"Emergency\", Age: 35},\n    {FirstName: \"Nancy\", LastName: \"Nurse\", Age: 27},\n    {FirstName: \"Ethel\", LastName: \"Emergency\", Age: 42},\n    {FirstName: \"Nina\", LastName: \"Nurse\", Age: 48},\n    {FirstName: \"Anthony\", LastName: \"Emergency\", Age: 44},\n    {FirstName: \"Nina\", LastName: \"Nurse\", Age: 32},\n    {FirstName: \"Ed\", LastName: \"Emergency\", Age: 28},\n    {FirstName: \"Peter\", LastName: \"Physician\", Age: 58},\n    {FirstName: \"Al\", LastName: \"Emergency\", Age: 51},\n    {FirstName: \"Ruth\", LastName: \"Registration\", Age: 62},\n    {FirstName: \"Ed\", LastName: \"Emergency\", Age: 38},\n    {FirstName: \"Tammy\", LastName: \"Triage\", Age: 29},\n    {FirstName: \"Alan\", LastName: \"Emergency\", Age: 60},\n    {FirstName: \"Nina\", LastName: \"Nurse\", Age: 54}\n];\n\n//Unit Tests\narrObj.sortBy(\"LastName\").print(\"LastName Ascending\");\narrObj.sortBy(\"-LastName\").print(\"LastName Descending\");\narrObj.sortBy(\"LastName\", \"FirstName\", \"-Age\").print(\"LastName Ascending, FirstName Ascending, Age Descending\");\narrObj.sortBy(\"-FirstName\", \"Age\").print(\"FirstName Descending, Age Ascending\");\narrObj.sortBy(\"-Age\").print(\"Age Descending\");\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2312161,
      "name": "Mike R",
      "reputation": 83
    }
  },
  {
    "soID": 21378060,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/21378060",
    "title": null,
    "body": "<p>You need to put this line in your code</p>\n\n<pre><code>$(location).attr('href',\"http://stackoverflow.com\");\n</code></pre>\n\n<p>If u are not having the Jquery, go with javascript with</p>\n\n<pre><code>window.location.replace(\"http://stackoverflow.com\");\n</code></pre>\n",
    "score": 36,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2312605,
      "name": "Ashish Ratan",
      "reputation": 1724
    }
  },
  {
    "soID": 22952812,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/22952812",
    "title": null,
    "body": "<p>The <code>!!</code> construct is a simple way of turning any JavaScript expression into\nits Boolean equivalent. </p>\n\n<p>For example: <code>!!\"he shot me down\" === true</code> and <code>!!0 === false</code>.</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2313718,
      "name": "Navin Rauniyar",
      "reputation": 3110
    }
  },
  {
    "soID": 26098830,
    "parentID": 1357118,
    "url": "https://stackoverflow.com/q/26098830",
    "title": null,
    "body": "<p>My opinion from my experience saying, that it is always better to use </p>\n\n<pre><code>event.preventDefault() \n</code></pre>\n\n<p>Practically\n        to stop or prevent submit event, whenever we required rather than <code>return false</code>\n   <code>event.preventDefault()</code> works fine.</p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2318354,
      "name": "Dilip0165",
      "reputation": 2498
    }
  },
  {
    "soID": 16219225,
    "parentID": 1098040,
    "url": "https://stackoverflow.com/q/16219225",
    "title": null,
    "body": "<pre><code>\"key\" in obj\n</code></pre>\n\n<p>Is likely testing only object attribute values that are very different from array keys</p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2320522,
      "name": "user2320522",
      "reputation": 171
    }
  },
  {
    "soID": 19288491,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/19288491",
    "title": null,
    "body": "<p>The <code>checked</code> attribute of an <code>input type=\"checkbox\"</code> is mapped with the <code>defaultChecked</code> property, <strong>not</strong> with the <code>checked</code> property. </p>\n\n<p>So when doing something in a page when a checkbox is checked on uncheked, use the <code>prop()</code> method instead. It fetches the property value and changes as the state of the checkbox changes. </p>\n\n<p>Using <code>attr(</code>) or <code>getAttribute</code>(in pure JavaScript) in these cases are not the proper way of doing things. </p>\n\n<p>if <code>elem</code> is the concerned checkbox then do something like this to fetch the value:</p>\n\n<pre><code>elem.checked\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(elem).prop('checked')\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21812587,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/21812587",
    "title": null,
    "body": "<p>Try using:</p>\n\n<pre><code>location.href=\"http://www.domain.com/home.html\";\n</code></pre>\n\n<p>The following will open in a new tab if this is better for you</p>\n\n<pre><code>window.location(\"http://www.domain.com/home.html\");\n</code></pre>\n\n<p>Let me know if this helps</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2328185,
      "name": "Jesse",
      "reputation": 2145
    }
  },
  {
    "soID": 18480881,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/18480881",
    "title": null,
    "body": "<p><br>\nyou can use this simple code that did not use <em>jQuery</em> or other libraries</p>\n\n<pre><code>var a=({});\n\n//check is an empty object\nif(JSON.stringify(a)=='{}') {\n    alert('it is empty');\n} else {\n    alert('it is not empty');\n}\n</code></pre>\n\n<p><strong>JSON</strong> class and it's functions (<strong>parse</strong> and <strong>stringify</strong>) are very usefull but has some problems with <em>IE7</em> that you can fix it with this simple code <a href=\"http://www.json.org/js.html\">http://www.json.org/js.html</a>.\n<br/><br/>\n<strong>Other Simple Way (simplest Way) :</strong><br/>\nyou can use this way without using <strong>jQuery</strong> or <strong>JSON</strong> object.<br/></p>\n\n<pre><code>var a=({});\n\nfunction isEmptyObject(obj) {\n    if(typeof obj!='object') {\n        //it is not object, so is not empty\n        return false;\n    } else {\n        var x,i=0;\n        for(x in obj) {\n            i++;\n        }\n        if(i&gt;0) {\n            //this object has some properties or methods\n            return false;\n        } else {\n            //this object has not any property or method\n            return true;\n        }\n    }\n}\n\nalert(isEmptyObject(a));    //true is alerted\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2334465,
      "name": "iman",
      "reputation": 2983
    }
  },
  {
    "soID": 28581216,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/28581216",
    "title": null,
    "body": "<pre><code>    isEmpty = function(obj) {\n      if (obj == null) return true;\n      if (obj.constructor.name == \"Array\" || obj.constructor.name == \"String\") return obj.length === 0;\n      for (var key in obj) if (isEmpty(obj[key])) return true;\n      return false;\n    }\n</code></pre>\n\n<p>This will check the emptiness of String, Array or Object (Maps).</p>\n\n<p>Usage : </p>\n\n<pre><code>var a = {\"a\":\"xxx\",\"b\":[1],\"c\":{\"c_a\":\"\"}}\nisEmpty(a); // true, because a.c.c_a is empty.\nisEmpty(\"I am a String\"); //false\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2338449,
      "name": "Rahul Malhotra",
      "reputation": 31
    }
  },
  {
    "soID": 39791307,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/39791307",
    "title": null,
    "body": "<p>This is very easy to implement. You can use:</p>\n\n<pre><code>window.location.href = \"http://www.example.com/\";\n</code></pre>\n\n<p>This will remember the history of the previous page. So one can go back by clicking on the browser's back button.</p>\n\n<p>Or:</p>\n\n<pre><code>window.location.replace(\"http://www.example.com/\");\n</code></pre>\n\n<p>This method does not remember the history of the previous page. The back button becomes disabled in this case.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2343266,
      "name": "Abhishek K. Upadhyay",
      "reputation": 630
    }
  },
  {
    "soID": 28949149,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/28949149",
    "title": null,
    "body": "<pre><code>function capitalize(string) {\n    return string.replace(/^./, capitalize.call.bind(\"\".toUpperCase));\n}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2359289,
      "name": "Nicolò",
      "reputation": 580
    }
  },
  {
    "soID": 18583615,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/18583615",
    "title": null,
    "body": "<p>To retrieve all radio buttons values in JavaScript array use following jQuery code :</p>\n\n<pre><code>var values = jQuery('input:checkbox:checked.group1').map(function () {\n    return this.value;\n}).get();\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2384546,
      "name": "Nilesh",
      "reputation": 115
    }
  },
  {
    "soID": 27840946,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/27840946",
    "title": null,
    "body": "<p>Toggle: 0/1 or else</p>\n\n<pre><code>&lt;input type=\"checkbox\" id=\"nolunch\" /&gt;\n&lt;input id=\"checklunch /&gt;\"\n\n    $('#nolunch').change(function () {\n    if ($(this).is(':checked')) {\n        $('#checklunch').val('1');\n    };\n    if ($(this).is(':checked') == false) {\n        $('#checklunch').val('0');\n    };\n});\n</code></pre>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23946023,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/23946023",
    "title": null,
    "body": "<p>Here's what I'm using:</p>\n\n<pre><code>/**\n * Examples:\n * getUrlParams()['myparam']    // url defaults to the current page\n * getUrlParams(url)['myparam'] // url can be just a query string\n *\n * Results of calling `getUrlParams(url)['myparam']` with various urls:\n * example.com                               (undefined)\n * example.com?                              (undefined)\n * example.com?myparam                       (empty string)\n * example.com?myparam=                      (empty string)\n * example.com?myparam=0                     (the string '0')\n * example.com?myparam=0&amp;myparam=override    (the string 'override')\n *\n * Origin: http://stackoverflow.com/a/23946023/2407309\n */\nfunction getUrlParams (url) {\n    var urlParams = {} // return value\n    var queryString = getQueryString()\n    if (queryString) {\n        var keyValuePairs = queryString.split('&amp;')\n        for (var i = 0; i &lt; keyValuePairs.length; i++) {\n            var keyValuePair = keyValuePairs[i].split('=')\n            var paramName = keyValuePair[0]\n            var paramValue = keyValuePair[1] || ''\n            urlParams[paramName] = decodeURIComponent(paramValue.replace(/\\+/g, ' '))\n        }\n    }\n    return urlParams // functions below\n    function getQueryString () {\n        var reducedUrl = url || window.location.search\n        reducedUrl = reducedUrl.split('#')[0] // Discard fragment identifier.\n        var queryString = reducedUrl.split('?')[1]\n        if (!queryString) {\n            if (reducedUrl.search('=') !== false) { // URL is a query string.\n                queryString = reducedUrl\n            }\n        }\n        return queryString\n    } // getQueryString\n} // getUrlParams\n</code></pre>\n\n<p>Returning 'override' rather than '0' in the last case makes it consistent with PHP. Works in IE7.</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 34961622,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/34961622",
    "title": null,
    "body": "<p>For getting selected value use </p>\n\n<pre><code>$('#dropDownId').val();\n</code></pre>\n\n<p>and for getting selected item text use this line:</p>\n\n<pre><code>$(\"#dropDownId option:selected\").text();\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2424026,
      "name": "Mojtaba",
      "reputation": 304
    }
  },
  {
    "soID": 32101215,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/32101215",
    "title": null,
    "body": "<p>Using following code you can generate array of random numbers, without repeating, in a given range.</p>\n\n<pre><code>function genRandomNumber(how_many_number,min,max) {\n\n            // parameters\n            // how_many_number : how many numbers you want to generate. For example it is 5.\n            // min(inclusive) : minimum/low value of a range. it must be any positive integer but less than max. i.e 4\n            // max(inclusive) : maximun value of a range. it must be any positive integer. i.e 50\n            // return type: array\n\n            var random_number = [];\n            for (var i = 0; i &lt; how_many_number; i++) {\n                var gen_num = parseInt((Math.random() * (max-min+1)) + min);\n                do {\n                    var is_exist = random_number.indexOf(gen_num);\n                    if (is_exist &gt;= 0) {\n                        gen_num = parseInt((Math.random() * (max-min+1)) + min);\n                    }\n                    else {\n                        random_number.push(gen_num);\n                        is_exist = -2;\n                    }\n                }\n                while (is_exist &gt; -1);\n            }\n            document.getElementById('box').innerHTML = random_number;\n        }\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2425413,
      "name": "Yusuf",
      "reputation": 226
    }
  },
  {
    "soID": 29590606,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/29590606",
    "title": null,
    "body": "<pre><code>var dateTimeToday = new Date();\nvar dateToday = new Date(\n    dateTimeToday.getFullYear(), \n    (dateTimeToday.getMonth() + 1) /*Jan = 0! */, \n    dateTimeToday.getDate(), \n    0, \n    0, \n    0, \n    0);\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2428541,
      "name": "Jas",
      "reputation": 184
    }
  },
  {
    "soID": 44072255,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/44072255",
    "title": null,
    "body": "<p>Ok, I know it has many answers, but no one pointed out, EcmaScript5 has assign method, work on FF and Chrome, it copies enumerable and own properties and  Symbols.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" rel=\"nofollow noreferrer\">Object Assign</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 27781756,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/27781756",
    "title": null,
    "body": "<p>Wondered why no body mentioned below solution.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>if(myObject != null){\r\n  // not null; your code here\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": -9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2432102,
      "name": "Zaheen Sayyed",
      "reputation": 2
    }
  },
  {
    "soID": 30123193,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/30123193",
    "title": null,
    "body": "<p>Posting an edit of @salim's answer to include locale letter transformation.</p>\n\n<pre><code>var str = \"test string\";\nstr = str.substring(0,1).toLocaleUpperCase() + str.substring(1);\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2443719,
      "name": "ilter",
      "reputation": 2861
    }
  },
  {
    "soID": 29927210,
    "parentID": 805107,
    "url": "https://stackoverflow.com/q/29927210",
    "title": null,
    "body": "<p>If you're willing to use the escaped newlines, they can be used <em>nicely</em>.  <strong>It looks like a document with a page border</strong>.</p>\n\n<p><img src=\"https://i.stack.imgur.com/e51kg.png\" alt=\"enter image description here\"></p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2446285,
      "name": "seo",
      "reputation": 1282
    }
  },
  {
    "soID": 37990335,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/37990335",
    "title": null,
    "body": "<p>I've modified one of top-voted answer a little. I'm a fan of having single function instead of 2 if it's not needed.</p>\n\n<pre><code>Storage.prototype.object = function(key, val) {\n    if ( typeof val === \"undefined\" ) {\n        var value = this.getItem(key);\n        return value ? JSON.parse(value) : null;\n    } else {\n        this.setItem(key, JSON.stringify(val));\n    }\n}\n\nlocalStorage.object(\"test\", {a : 1}); //set value\nlocalStorage.object(\"test\"); //get value\n</code></pre>\n\n<p>Also, if no value is set, it's returning <code>null</code> instead of <code>false</code>. <code>false</code> has some meaning, <code>null</code> does not.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2446799,
      "name": "pie6k",
      "reputation": 3661
    }
  },
  {
    "soID": 18309057,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/18309057",
    "title": null,
    "body": "<p><strong><a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\">XMLHttpRequest</a> 2</strong> (first of all read the answers from Benjamin Gruenbaum &amp; Felix Kling)</p>\n\n<p>If you don't use jQuery, and want a nice short XMLHttpRequest 2 which works on the modern browsers and also on the mobile browsers I suggest to use it this way:</p>\n\n<pre><code>function ajax(a, b, c){ // URL, callback, just a placeholder\n  c = new XMLHttpRequest;\n  c.open('GET', a);\n  c.onload = b;\n  c.send()\n}\n</code></pre>\n\n<p>As you can see:</p>\n\n<ol>\n<li>It's shorter than all other functions Listed.</li>\n<li>The callback is set directly (so no extra unnecessary closures).</li>\n<li>It uses the new onload (so you don't have to check for readystate &amp;&amp; status)</li>\n<li>There are some other situations which I don't remember that make the XMLHttpRequest 1 annoying.</li>\n</ol>\n\n<p>There are two ways to get the response of this Ajax call (three using the XMLHttpRequest var name):</p>\n\n<p>The simplest:</p>\n\n<pre><code>this.response\n</code></pre>\n\n<p>Or if for some reason you <code>bind()</code> the callback to a class:</p>\n\n<pre><code>e.target.response\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>function callback(e){\n  console.log(this.response);\n}\najax('URL', callback);\n</code></pre>\n\n<p>Or (the above one is better anonymous functions are always a problem):</p>\n\n<pre><code>ajax('URL', function(e){console.log(this.response)});\n</code></pre>\n\n<p>Nothing easier.</p>\n\n<p>Now some people will probably say that it's better to use onreadystatechange or the even the XMLHttpRequest variable name. That's wrong.</p>\n\n<p>Check out <a href=\"http://caniuse.com/xhr2\">XMLHttpRequest advanced features</a></p>\n\n<p>It supported on all *modern browsers. And I can confirm as I'm using this approach since XMLHttpRequest 2 exists. I never had any type of problem on all browsers I use.</p>\n\n<p>onreadystatechange is only useful if you want to get the headers on state 2.</p>\n\n<p>Using the <code>XMLHttpRequest</code> variable name is another big error as you need to execute the callback inside the onload/oreadystatechange closures else you lost it.</p>\n\n<hr>\n\n<p>Now if you want something more complex using post and FormData you can easily extend this function:</p>\n\n<pre><code>function x(a, b, e, d, c){ // URL, callback, method, formdata or {key:val},placeholder\n  c = new XMLHttpRequest;\n  c.open(e||'get', a);\n  c.onload = b;\n  c.send(d||null)\n}\n</code></pre>\n\n<p>Again ... it's a very short function, but it does get &amp; post.</p>\n\n<p>Examples of usage:</p>\n\n<pre><code>x(url, callback); // By default it's get so no need to set\nx(url, callback, 'post', {'key': 'val'}); // No need to set post data\n</code></pre>\n\n<p>Or pass a full form element (<code>document.getElementsByTagName('form')[0]</code>):</p>\n\n<pre><code>var fd = new FormData(form);\nx(url, callback, 'post', fd);\n</code></pre>\n\n<p>Or set some custom values:</p>\n\n<pre><code>var fd = new FormData();\nfd.append('key', 'val')\nx(url, callback, 'post', fd);\n</code></pre>\n\n<p>As you can see I didn't implemented sync... it's a bad thing.</p>\n\n<p>Having said that ... why don't do it the easy way?</p>\n\n<hr>\n\n<p>As mentioned in the comment the use of error &amp;&amp; synchronous does completely break the point of the answer. Which is a nice short way to use Ajax in the proper way.</p>\n\n<p><em>Error handler</em></p>\n\n<pre><code>function x(a, b, e, d, c){ // URL, callback, method, formdata or {key:val}, placeholder\n  c = new XMLHttpRequest;\n  c.open(e||'get', a);\n  c.onload = b;\n  c.onerror = error;\n  c.send(d||null)\n}\n\nfunction error(e){\n  console.log('--Error--', this.type);\n  console.log('this: ', this);\n  console.log('Event: ', e)\n}\nfunction displayAjax(e){\n  console.log(e, this);\n}\nx('WRONGURL', displayAjax);\n</code></pre>\n\n<p>In the above script you have an error handler which is statically defined so it does not compromise the function. The error handler can be used for other functions too.</p>\n\n<p>But to really get out an error the <strong>only</strong> way is to write a wrong URL in which case every browsers throws an error.</p>\n\n<p>Error handlers are maybe useful if you set custom headers, set the responseType to blob arraybuffer or whatever....</p>\n\n<p>Even if you pass 'POSTAPAPAP' as the method it won't throw an error.</p>\n\n<p>Even if you pass 'fdggdgilfdghfldj' as formdata it won't throw an error.</p>\n\n<p>In the first case the error is inside the <code>displayAjax()</code> under <code>this.statusText</code> as <code>Method not Allowed</code>.</p>\n\n<p>In the second case it simply works. You have to check at the server side if you passed the right post data.</p>\n\n<p>crossdomain not allowed throws error automatically.</p>\n\n<p>In the error response there are no error codes.</p>\n\n<p>There is only the <code>this.type</code> which is set to error.</p>\n\n<p>Why add an errorhandler if you totally have no control over errors?\nMost of the errors are returned inside this in the callback function <code>displayAjax()</code>.</p>\n\n<p>So: No need for error checks if you're able to copy and paste the URL properly. ;)</p>\n\n<p><em>PS: As the first test I wrote x('x', displayAjax)..., and it totally got a response...??? So I checked the folder where the HTML is located, and there was a file called 'x.xml'. So even if you forget the extension of your file XMLHttpRequest 2 WILL FIND IT</em>. I LOL'd</p>\n\n<hr>\n\n<p><em>Read a file synchronous</em></p>\n\n<p><strong>Don't do that.</strong></p>\n\n<p>If you want to block the browser for a while load a nice big txt file synchronous.</p>\n\n<pre><code>function omg(a, c){ // URL\n  c = new XMLHttpRequest;\n  c.open('GET', a, true);\n  c.send();\n  return c; // Or c.response\n}\n</code></pre>\n\n<p>Now you can do</p>\n\n<pre><code> var res = omg('thisIsGonnaBlockThePage.txt');\n</code></pre>\n\n<p>There is no other way to do this in a non-asynchronous way. (Yeah, with setTimeout loop... but seriously?)</p>\n\n<p>Another point is... if you work with APIs or just you own list's files or whatever you always use different functions for each request...</p>\n\n<p>Only if you have a page where you load always the same XML/JSON or whatever you need only one function. In that case, modify a little the Ajax function and replace b with your special function.</p>\n\n<hr>\n\n<p>The functions above are for basic use.</p>\n\n<p>If you want to EXTEND the function...</p>\n\n<p>Yes, you can.</p>\n\n<p>I'm using a lot of APIs and one of the first functions I integrate in every HTML page is the first Ajax function in this answer, with GET only...</p>\n\n<p>But you can do a lot of stuff with XMLHttpRequest 2:</p>\n\n<p>I made a download manager (using ranges on both sides with resume, filereader, filesystem), various image resizers converters using canvas, populate websql databases with base64images and much more... But in these cases you should create a function only for that purpose... sometimes you need a blob, arraybuffers, you can set headers, override mimetype and there is a lot more...</p>\n\n<p>But the question here is how to return an Ajax response... (I added an easy way.)</p>\n",
    "score": 204,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2450730,
      "name": "cocco",
      "reputation": 10021
    }
  },
  {
    "soID": 21350778,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/21350778",
    "title": null,
    "body": "<p><strong>Get all querystring parameters including checkbox values (arrays).</strong></p>\n\n<p>Considering the correct &amp; normal use of GET parameters, the things I see it's missing, on most functions, is the support for arrays and removing the hash data.</p>\n\n<p>So I wrote this function:</p>\n\n<pre><code>function qs(a){\n if(!a)return {};\n a=a.split('#')[0].split('&amp;');\n var b=a.length,c={},d,k,v;\n while(b--){\n  d=a[b].split('=');\n  k=d[0].replace('[]',''),v=decodeURIComponent(d[1]||'');\n  c[k]?typeof c[k]==='string'?(c[k]=[v,c[k]]):(c[k].unshift(v)):c[k]=v;\n }\n return c\n}\n</code></pre>\n\n<p>Using shorthand operators &amp; while-- loop, the performance should be very good to.</p>\n\n<p><strong>Support:</strong></p>\n\n<ol>\n<li>Empty values (<em>key= / key</em>)</li>\n<li>Key value (<em>key=value</em>)</li>\n<li>Arrays (<em>key[]=value</em>)</li>\n<li>Hash (<em>the hash tag is split out</em>)</li>\n</ol>\n\n<p><strong>Notes:</strong></p>\n\n<p>It does not support object arrays (key[key]=value)</p>\n\n<p>If the space is + it remains a +.</p>\n\n<p>Add <code>.replace(/\\+/g, \" \")</code> if you need.</p>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>qs('array[]=1&amp;array[]=2&amp;key=value&amp;empty=&amp;empty2#hash')\n</code></pre>\n\n<p><strong>Return:</strong></p>\n\n<pre><code>{\n    \"empty\": \"\",\n    \"key\": \"value\",\n    \"array\": [\n        \"1\",\n        \"2\"\n    ]\n}\n</code></pre>\n\n<p><strong>Demo:</strong></p>\n\n<p><a href=\"http://jsfiddle.net/ZQMrt/1/\" rel=\"nofollow\">http://jsfiddle.net/ZQMrt/1/</a></p>\n\n<p><strong>Info</strong></p>\n\n<p>If you don't understand something or you can't read the function just ask. I'm happy to explain what I did here.</p>\n\n<p><em>If you think the function is unreadable and unmaintainable I'm happy to rewrite the function for you, but consider that shorthand &amp; bitwise operators are always faster than a standard syntax (maybe read about shorthands and bitwise operators in the ECMA-262 book or use your favorite search engine). Rewriting the code in a standard readable syntax means performance loss.</em></p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16931854,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/16931854",
    "title": null,
    "body": "<p>//loop it until number occurrences comes to 0. OR simply copy/paste</p>\n\n<pre><code>    function replaceAll(find, replace, str) \n    {\n      while( str.indexOf(find) &gt; -1)\n      {\n        str = str.replace(find, replace);\n      }\n      return str;\n    }\n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2454243,
      "name": "Raseela",
      "reputation": 179
    }
  },
  {
    "soID": 23486450,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/23486450",
    "title": null,
    "body": "<pre><code>var str = \"test string\";\nstr = str.substring(0,1).toUpperCase() + str.substring(1);\n</code></pre>\n",
    "score": 24,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2459296,
      "name": "Salim",
      "reputation": 8653
    }
  },
  {
    "soID": 25108386,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/25108386",
    "title": null,
    "body": "<p>Various ways</p>\n\n<pre><code>1. $(\"#myselect option:selected\").text();\n\n2. $(\"#myselect :selected\").text();\n\n3. $(\"#myselect\").children(\":selected\").text();\n\n4. $(\"#myselect\").find(\":selected\").text();\n</code></pre>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2459296,
      "name": "Salim",
      "reputation": 8653
    }
  },
  {
    "soID": 24647232,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/24647232",
    "title": null,
    "body": "<pre><code>var date = new Date().toLocaleDateString(\"en-US\");\n</code></pre>\n\n<p>Also, you can call method <code>toLocaleDateString</code> with two parameters:</p>\n\n<pre><code>var date = new Date().toLocaleDateString(\"en-US\", {\n    \"year\": \"numeric\",\n    \"month\": \"numeric\"\n});\n</code></pre>\n\n<p>Article on <a href=\"http://msdn.microsoft.com/en-US/library/kecw102f\">MSDN</a>. More about this method on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\">MDN</a>.</p>\n",
    "score": 30,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2463296,
      "name": "Dunaevsky Maxim",
      "reputation": 1143
    }
  },
  {
    "soID": 27669382,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/27669382",
    "title": null,
    "body": "<p>This cross-browser code will call a function once the DOM is ready:</p>\n\n<pre><code>var domReady=function(func){\n    var scriptText='('+func+')();';\n    var scriptElement=document.createElement('script');\n    scriptElement.innerText=scriptText;\n    document.body.appendChild(scriptElement);\n};\n</code></pre>\n\n<p>Here's how it works:</p>\n\n<ol>\n<li>The first line of <code>domReady</code> calls the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\" rel=\"nofollow\"><code>toString</code></a> method of the function to get a string representation of the function you pass in and wraps it in an expression that immediately calls the function.</li>\n<li>The rest of <code>domReady</code> creates a script element with the expression and appends it to the <code>body</code> of the document.</li>\n<li>The browser runs script tags appended to <code>body</code> after the DOM is ready.</li>\n</ol>\n\n<p>For example, if you do this: <code>domReady(function(){alert();});</code>, the following will appended to the <code>body</code> element:</p>\n\n<pre><code> &lt;script&gt;(function (){alert();})();&lt;/script&gt;\n</code></pre>\n\n<p>Note that this works only for user-defined functions. The following won't work: <code>domReady(alert);</code></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2482570,
      "name": "Max Heiber",
      "reputation": 2933
    }
  },
  {
    "soID": 35429122,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/35429122",
    "title": null,
    "body": "<p>Following function works for me:</p>\n\n<pre><code>String.prototype.replaceAllOccurence = function(str1, str2, ignore) \n{\n    return this.replace(new RegExp(str1.replace(/([\\/\\,\\!\\\\\\^\\$\\{\\}\\[\\]\\(\\)\\.\\*\\+\\?\\|\\&lt;\\&gt;\\-\\&amp;])/g,\"\\\\$&amp;\"),(ignore?\"gi\":\"g\")),(typeof(str2)==\"string\")?str2.replace(/\\$/g,\"$$$$\"):str2);\n} ;\n</code></pre>\n\n<p>now call the functions like this:</p>\n\n<pre><code>\"you could be a Project Manager someday, if you work like this.\".replaceAllOccurence (\"you\", \"I\");\n</code></pre>\n\n<p>Simply copy and paste this code in your browser console to TEST.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2488475,
      "name": "Sandeep Gantait",
      "reputation": 298
    }
  },
  {
    "soID": 42041975,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/42041975",
    "title": null,
    "body": "<p>Ok so this might be the very best option for shallow copying.  If follows the many examples using assign, but it also keeps the inheritance and prototype. It's so simple too and works for most array-like and Objects except those with constructor requirements or read-only properties. But that means it fails miserably for TypedArrays, RegExp, Date, Maps, Sets and Object versions of primitives (Boolean, String, etc..).</p>\n\n<pre><code>function copy ( a ) { return Object.assign( new a.constructor, a ) }\n</code></pre>\n\n<p>Where <code>a</code> can be any Object or class constructed instance, but again not be reliable for thingies that use specialized getters and setters or have constructor requirements, but for more simple situations it rocks.  It does work on arguments as well.  </p>\n\n<p>You can also apply it to primitives to get strange results, but then...  unless it just ends up being a useful hack, who cares.</p>\n\n<p>results from basic built-in Object and Array...</p>\n\n<pre><code>&gt; a = { a: 'A', b: 'B', c: 'C', d: 'D' }\n{ a: 'A', b: 'B', c: 'C', d: 'D' }\n&gt; b = copy( a )\n{ a: 'A', b: 'B', c: 'C', d: 'D' }\n&gt; a = [1,2,3,4]\n[ 1, 2, 3, 4 ]\n&gt; b = copy( a )\n[ 1, 2, 3, 4 ]\n</code></pre>\n\n<p>And fails because of mean get/setters, constructor required arguments or read-only properties, and sins against the father.</p>\n\n<pre><code>&gt; a = /\\w+/g\n/\\w+/g\n&gt; b = copy( a )  // fails because source and flags are read-only\n/(?:)/\n&gt; a = new Date ( '1/1/2001' )\n2000-12-31T16:00:00.000Z\n&gt; b = copy( a )  // fails because Date using methods to get and set things\n2017-02-04T14:44:13.990Z\n&gt; a = new Boolean( true )\n[Boolean: true]\n&gt; b = copy( a )  // fails because of of sins against the father\n[Boolean: false]\n&gt; a = new Number( 37 )\n[Number: 37]\n&gt; b = copy( a )  // fails because of of sins against the father\n[Number: 0]\n&gt; a = new String( 'four score and seven years ago our four fathers' )\n[String: 'four score and seven years ago our four fathers']\n&gt; b = copy( a )  // fails because of of sins against the father\n{ [String: ''] '0': 'f', '1': 'o', '2': 'u', '3': 'r', '4': ' ', '5': 's', '6': 'c', '7': 'o', '8': 'r', '9': 'e', '10': ' ', '11': 'a', '12': 'n', '13': 'd', '14': ' ', '15': 's', '16': 'e', '17': 'v', '18': 'e', '19': 'n', '20': ' ', '21': 'y', '22': 'e', '23': 'a', '24': 'r', '25': 's', '26': ' ', '27': 'a', '28': 'g', '29': 'o', '30': ' ', '31': 'o', '32': 'u', '33': 'r', '34': ' ', '35': 'f', '36': 'o', '37': 'u', '38': 'r', '39': ' ', '40': 'f', '41': 'a', '42': 't', '43': 'h', '44': 'e', '45': 'r', '46': 's' } \n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 40449774,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/40449774",
    "title": null,
    "body": "<p>I know this question is too old, but I didn't see any implementation similar to mine.<br>\nThis version is based on the <a href=\"https://en.wikipedia.org/wiki/Schwartzian_transform\" rel=\"noreferrer\">Schwartzian transform idiom</a>. </p>\n\n<pre><code>function sortByAttribute(array, ...attrs) {\n  // generate an array of predicate-objects contains\n  // property getter, and descending indicator\n  let predicates = attrs.map(pred =&gt; {\n    let descending = pred.charAt(0) === '-' ? -1 : 1;\n    pred = pred.replace(/^-/, '');\n    return {\n      getter: o =&gt; o[pred],\n      descend: descending\n    };\n  });\n  // schwartzian transform idiom implementation. aka: \"decorate-sort-undecorate\"\n  return array.map(item =&gt; {\n    return {\n      src: item,\n      compareValues: predicates.map(predicate =&gt; predicate.getter(item))\n    };\n  })\n  .sort((o1, o2) =&gt; {\n    let i = -1, result = 0;\n    while (++i &lt; predicates.length) {\n      if (o1.compareValues[i] &lt; o2.compareValues[i]) result = -1;\n      if (o1.compareValues[i] &gt; o2.compareValues[i]) result = 1;\n      if (result *= predicates[i].descend) break;\n    }\n    return result;\n  })\n  .map(item =&gt; item.src);\n}\n</code></pre>\n\n<p>Here's an example how to use it:</p>\n\n<pre><code>let games = [\n  { name: 'Pako',              rating: 4.21 },\n  { name: 'Hill Climb Racing', rating: 3.88 },\n  { name: 'Angry Birds Space', rating: 3.88 },\n  { name: 'Badland',           rating: 4.33 }\n];\n\n// sort by one attribute\nconsole.log(sortByAttribute(games, 'name'));\n// sort by mupltiple attributes\nconsole.log(sortByAttribute(games, '-rating', 'name'));\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2503796,
      "name": "a8m",
      "reputation": 6086
    }
  },
  {
    "soID": 24858543,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/24858543",
    "title": null,
    "body": "<p>Here's my version, I think it's easy to understand and elegant too.</p>\n\n<pre><code>var str = \"foo bar baz\";\n\n//capitalize\nstr.split(\" \").map(function(i){return i[0].toUpperCase() + i.substring(1)}).join(\" \");\n//return \"Foo Bar Baz\"\n\n//capitalize first letter\nstr.charAt(0).toUpperCase() + str.slice(1)\n//return \"Foo bar baz\"\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2503796,
      "name": "a8m",
      "reputation": 6086
    }
  },
  {
    "soID": 42702634,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/42702634",
    "title": null,
    "body": "<p>Using prototypes</p>\n\n<pre><code>String.prototype.capitalize = function () {\n    return this.charAt(0) + this.slice(1).toLowerCase();\n  }\n</code></pre>\n\n<p>or Using functions</p>\n\n<pre><code>function capitalize(str) {\nreturn str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n}\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2512216,
      "name": "daronwolff",
      "reputation": 671
    }
  },
  {
    "soID": 17273538,
    "parentID": 1279957,
    "url": "https://stackoverflow.com/q/17273538",
    "title": null,
    "body": "<p>You can use:</p>\n\n<p>To Insert After,</p>\n\n<pre><code>jQuery(\"#source\").insertAfter(\"#destination\");\n</code></pre>\n\n<p>To Insert inside another element,</p>\n\n<pre><code>jQuery(\"#source\").appendTo(\"#destination\");\n</code></pre>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2515903,
      "name": "Subrahmanyam",
      "reputation": 231
    }
  },
  {
    "soID": 18674283,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/18674283",
    "title": null,
    "body": "<p>I came to this page due to the same question but I'm neither using JQuery and none of the clone-Methods worked for my own objects.</p>\n\n<p>I'm aware my answer isn't related too strong to this question because it's a different approach. Instead of using clone-functions I use a create function. It worked for me for the following (unfortunately restricting) purposes:</p>\n\n<ol>\n<li>I use mostly JSP-generated Javascript</li>\n<li>I know in the beginning which Object must be generated (In my case it's Information from a Database which gets fetched once and needs to be deployed more often in the JS.</li>\n</ol>\n\n<p>First I defined my Objects like this:</p>\n\n<pre><code>var obj= new Object();\nobj.Type='Row';\nobj.ID=1;\nobj.Value='Blah blah';\n</code></pre>\n\n<p>Now I moved everything like:</p>\n\n<pre><code>function getObjSelektor(id_nummer,selected){\nvar obj = document.createElement(\"select\");\nobj.setAttribute(\"id\",\"Selektor_\"+id_nummer);\nobj.setAttribute(\"name\",\"Selektor\");\nobj.setAttribute(\"size\",\"1\");\n\nvar obj_opt_1 = document.createElement(\"option\");\nobj_opt_1.setAttribute(\"value\",\"1\");\nif(1==selected)\n    posopval_opt_1.setAttribute(\"selected\",\"selected\");\nobj_opt_1.innerHTML=\"Blah blah\";\nobj.appendChild(obj_opt_1);\n\nvar obj_opt_2 = document.createElement(\"option\");\nobj_opt_2.setAttribute(\"value\",\"2\");\nif(2==selected)\n    obj_opt_2.setAttribute(\"selected\",\"selected\");\nobj_opt_2.innerHTML=\"2nd Row\";\nobj.appendChild(obj_opt_2);\n\n...\n\nreturn obj;\n}\n</code></pre>\n\n<p>And call the function in the regular code:</p>\n\n<pre><code>myDiv.getObjSelektor(getObjSelektor(anotherObject.ID));\n</code></pre>\n\n<p>As said this is a different approach which solved my issue for my purposes. </p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 38072602,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/38072602",
    "title": null,
    "body": "<p>It's interesting people in these answers have touched on both <code>Object.keys()</code> and <code>for...of</code> but never combined them:</p>\n\n\n\n<pre><code>var map = {well:'hello', there:'!'};\nfor (let key of Object.keys(map))\n    console.log(key + ':' + map[key]);\n</code></pre>\n\n<p><sub>You can't just <code>for...of</code> an <code>Object</code> because it's not an iterator, and <code>for...index</code> or <code>.forEach()</code>ing the <code>Object.keys()</code> is ugly/inefficient.<br/>\nI'm glad most people are refraining from <code>for...in</code> (with or without checking <code>.hasOwnProperty()</code>) as that's also a bit messy, so other than my answer above, I'm here to say...</sub></p>\n\n<hr>\n\n<p><strong>You can make ordinary object associations iterate! Behaving just like <code>Map</code>s with direct use of the fancy <code>for...of</code></strong><br/>\n<a href=\"http://codepen.io/Hashbrown/pen/mEWadp\" rel=\"noreferrer\">DEMO</a> working in Chrome and FF (I assume ES6 only)</p>\n\n<pre><code>var ordinaryObject = {well:'hello', there:'!'};\nfor (let pair of ordinaryObject)\n    //key:value\n    console.log(pair[0] + ':' + pair[1]);\n\n//or\nfor (let [key, value] of ordinaryObject)\n    console.log(key + ':' + value);\n</code></pre>\n\n<p>So long as you include my shim below:</p>\n\n<pre><code>//makes all objects iterable just like Maps!!! YAY\n//iterates over Object.keys() (which already ignores prototype chain for us)\nObject.prototype[Symbol.iterator] = function() {\n    var keys = Object.keys(this)[Symbol.iterator]();\n    var obj = this;\n    var output;\n    return {next:function() {\n        if (!(output = keys.next()).done)\n            output.value = [output.value, obj[output.value]];\n        return output;\n    }};\n};\n</code></pre>\n\n<p>Without having to create a real Map object that doesn't have the nice syntactic sugar.</p>\n\n<pre><code>var trueMap = new Map([['well', 'hello'], ['there', '!']]);\nfor (let pair of trueMap)\n    console.log(pair[0] + ':' + pair[1]);\n</code></pre>\n\n<p>In fact, with this shim, if you still wanted to take advantage of Map's other functionality (without shimming them all in) but still wanted to use the neat object notation, since objects are now iterable you can now just make a Map from it!</p>\n\n<pre><code>//shown in demo\nvar realMap = new Map({well:'hello', there:'!'});\n</code></pre>\n\n<hr>\n\n<p>For those who don't like to shim, or mess with <code>prototype</code> in general, feel free to make the function on window instead, calling it something like <code>getObjIterator()</code> then;</p>\n\n<pre><code>var realMap = new Map(getObjIterator({well:'hello', there:'!'}))\n</code></pre>\n\n<p>or</p>\n\n<pre><code>for (let pair of getObjIterator(ordinaryObject))\n</code></pre>\n\n<p>There's no reason why that wouldn't work.</p>\n\n<p>Welcome to the future.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2518317,
      "name": "Hashbrown",
      "reputation": 4308
    }
  },
  {
    "soID": 33559693,
    "parentID": 3437786,
    "url": "https://stackoverflow.com/q/33559693",
    "title": null,
    "body": "<p>You can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Screen\" rel=\"nofollow\">Screen</a> object to get this.</p>\n\n<p>The following is an example of what it would return:</p>\n\n<pre><code>Screen {\n    availWidth: 1920,\n    availHeight: 1040,\n    width: 1920,\n    height: 1080,\n    colorDepth: 24,\n    pixelDepth: 24,\n    top: 414,\n    left: 1920,\n    availTop: 414,\n    availLeft: 1920\n}\n</code></pre>\n\n<p>To get your <code>screenWidth</code> variable, just use <code>screen.width</code>, same with <code>screenHeight</code>, you would just use <code>screen.height</code>.</p>\n\n<p>To get your window width and height, it would be <code>screen.availWidth</code> or <code>screen.availHeight</code> respectively.</p>\n\n<p>For the <code>pageX</code> and <code>pageY</code> variables, use <code>window.screenX or Y</code>. Note that this is from the <strong>VERY LEFT/TOP OF YOUR LEFT/TOP-est SCREEN</strong>. So if you have two screens of width <code>1920</code> then a window 500px from the left of the right screen would have an X value of <code>2420</code> (1920+500). <code>screen.width/height</code>, however, display the CURRENT screen's width or height.</p>\n\n<p>To get the width and height of your page, use jQuery's <code>$(window).height()</code> or <code>$(window).width()</code>.</p>\n\n<p>Again using jQuery, use <code>$(\"html\").offset().top</code> and <code>$(\"html\").offset().left</code> for your <code>pageX</code> and <code>pageY</code> values.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2518552,
      "name": "Zoweb",
      "reputation": 305
    }
  },
  {
    "soID": 31931350,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/31931350",
    "title": null,
    "body": "<p>It also appears that, at least in Visual Studio 2015, TypeScript 1.5, \"var\" allows multiple declarations of the same variable name in a block, and \"let\" doesn't.</p>\n\n<p>This won't generate a compile error:</p>\n\n<pre><code>var x = 1;\nvar x = 2;\n</code></pre>\n\n<p>This will:</p>\n\n<pre><code>let x = 1;\nlet x = 2;\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2532992,
      "name": "RDoc",
      "reputation": 57
    }
  },
  {
    "soID": 45304824,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/45304824",
    "title": null,
    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var myArray = [1, 2, 3, 4, 5, 6];\r\n\r\nvar arrayRemoveReducer = function (total, current, i) {\r\nreturn total.splice(i, 1);\r\n}\r\n\r\nvar NewArray = myArray.reduce(arrayRemoveReducer);\r\n\r\n// or\r\n\r\nmyArray.filter(function() { return false; });\r\n\r\n// or \r\n\r\nmyArray.splice(0, myArray.length);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2538318,
      "name": "Davlat Shavkatoff",
      "reputation": 29
    }
  },
  {
    "soID": 31892762,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/31892762",
    "title": null,
    "body": "<p>In <strong>ES5</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var s = \"foo\";\r\nalert(s.indexOf(\"oo\") &gt; -1);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>In <strong>ES6</strong> there are three new methods: <code>includes()</code>, <code>startsWith()</code>, <code>endsWith()</code>.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var msg = \"Hello world!\";\r\n\r\nconsole.log(msg.startsWith(\"Hello\"));       // true\r\nconsole.log(msg.endsWith(\"!\"));             // true\r\nconsole.log(msg.includes(\"o\"));             // true\r\n\r\nconsole.log(msg.startsWith(\"o\", 4));        // true\r\nconsole.log(msg.endsWith(\"o\", 8));          // true\r\nconsole.log(msg.includes(\"o\", 8));          // false</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 61,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 18074739,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/18074739",
    "title": null,
    "body": "<pre><code>var x = [4, 5, 6];\nfor (i = 0, j = x[i]; i &lt; x.length; j = x[++i]) {\n    console.log(i,j);\n}\n</code></pre>\n\n<p>A lot cleaner...</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2563264,
      "name": "staticd",
      "reputation": 811
    }
  },
  {
    "soID": 25537534,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/25537534",
    "title": null,
    "body": "<p><strong>Before I start, jQuery is a JavaScript library used for DOM manipulation. So you should not be using jQuery for a page redirect.</strong></p>\n\n<p>A quote from Jquery.com:</p>\n\n<blockquote>\n  <p>While jQuery might run without major issues in older browser versions,\n  we do not actively test jQuery in them and generally do not fix bugs\n  that may appear in them.</p>\n</blockquote>\n\n<p>It was found here:\n<a href=\"https://jquery.com/browser-support/\">https://jquery.com/browser-support/</a></p>\n\n<p>So jQuery is not an end-all and be-all solution for backwards compatibility.</p>\n\n<blockquote>\n  <p>The following solution using raw JavaScript works in all browsers and have been standard for a long time so you don't need any libraries for cross browser support.</p>\n</blockquote>\n\n<p>This page will redirect to <strong><a href=\"http://www.google.com\">Google</a></strong> after 3000 milliseconds</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;example&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;p&gt;You will be redirected to google shortly.&lt;/p&gt;\n        &lt;script&gt;\n            setTimeout(function(){\n                window.location.href=\"http://www.google.com\"; // The URL that will be redirected too.\n            }, 3000); // The bigger the number the longer the delay.\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Different options are as follows:</p>\n\n<pre><code>window.location.href=\"url\"; // Simulates normal navigation to a new page\nwindow.location.replace(\"url\"); // Removes current URL from history and replaces it with a new URL\nwindow.location.assign(\"url\"); // Adds new URL to the history stack and redirects to the new URL\n\nwindow.history.back(); // Simulates a back button click\nwindow.history.go(-1); // Simulates a back button click\nwindow.history.back(-1); // Simulates a back button click\nwindow.navigate(\"page.html\"); // Same as window.location=\"url\"\n</code></pre>\n\n<p>When using replace, the back button will not go back to the redirect page, as if it was never in the history. If you want the user to be able to go back to the redirect page then use <code>window.location.href</code> or <code>window.location.assign</code>. If you do use an option that lets the user go back to the redirect page, remember that when you enter the redirect page it will redirect you back. So put that into consideration when picking an option for your redirect. Under conditions where the page is only redirecting when an action is done by the user then having the page in the back button history will be okay. But if the page auto redirects then you should use replace so that the user can use the back button without getting forced back to the page the redirect sends.</p>\n\n<p>You can also use meta data to run a page redirect as followed.</p>\n\n<p><strong>META Refresh</strong></p>\n\n<pre><code>&lt;meta http-equiv=\"refresh\" content=\"0;url=http://evil.com/\" /&gt;\n</code></pre>\n\n<p><strong>META Location</strong></p>\n\n<pre><code>&lt;meta http-equiv=\"location\" content=\"URL=http://evil.com\" /&gt;\n</code></pre>\n\n<p><strong>BASE Hijacking</strong></p>\n\n<pre><code>&lt;base href=\"http://evil.com/\" /&gt;\n</code></pre>\n\n<p>Many more methods to redirect your unsuspecting client to a page they may not wish to go can be found on this page (not one of them is reliant on jQuery):</p>\n\n<blockquote>\n  <p><a href=\"https://code.google.com/p/html5security/wiki/RedirectionMethods\">https://code.google.com/p/html5security/wiki/RedirectionMethods</a></p>\n</blockquote>\n\n<p>I would also like to point out, people don't like to be randomly redirected. Only redirect people when absolutely needed. If you start redirecting people randomly they will never go to your site again.</p>\n\n<p>The next part is hypothetical:</p>\n\n<blockquote>\n  <p>You also may get reported as a malicious site. If that happens then when people click on a link to your site the users browser may warn them that your site is malicious. What may also happen is search engines may start dropping your rating if people are reporting a bad experience on your site.</p>\n</blockquote>\n\n<p>Please review Google Webmaster Guidelines about redirects:\n<a href=\"https://support.google.com/webmasters/answer/2721217?hl=en&amp;ref_topic=6001971\">https://support.google.com/webmasters/answer/2721217?hl=en&amp;ref_topic=6001971</a></p>\n\n<p>Here is a fun little page that kicks you out of the page.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Go Away&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Go Away&lt;/h1&gt;\n        &lt;script&gt;\n            setTimeout(function(){\n                window.history.back();\n            }, 3000);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>If you combine the two page examples together you would have an infant loop of rerouting that will guarantee that your user will never want to use your site ever again.</p>\n",
    "score": 107,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2576539,
      "name": "Patrick W. McMahon",
      "reputation": 1684
    }
  },
  {
    "soID": 17780816,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/17780816",
    "title": null,
    "body": "<p>To get a random number say between 1 and 6, first do:</p>\n\n<pre><code>    0.5 + (Math.random() * ((6 - 1) + 1))\n</code></pre>\n\n<p>This multiplies a random number by 6 and then adds 0.5 to it. Next round the number to a positive integer by doing:</p>\n\n<pre><code>    Math.round(0.5 + (Math.random() * ((6 - 1) + 1))\n</code></pre>\n\n<p>This round the number to the nearest whole number.</p>\n\n<p>Or to make it more understandable do this:</p>\n\n<pre><code>    var value = 0.5 + (Math.random() * ((6 - 1) + 1))\n    var roll = Math.round(value);\n    return roll;\n</code></pre>\n\n<p>In general the code for doing this using variables is:</p>\n\n<pre><code>    var value = (Min - 0.5) + (Math.random() * ((Max - Min) + 1))\n    var roll = Math.round(value);\n    return roll;\n</code></pre>\n\n<p>The reason for taking away 0.5 from the minimum value is because using the minimum value alone would allow you to get an integer that was one more than your maximum value. By taking away 0.5 from the minimum value you are essentially preventing the maximum value from being rounded up.</p>\n\n<p><strong>Hope that helps.</strong></p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2603540,
      "name": "Learner.js",
      "reputation": 51
    }
  },
  {
    "soID": 20491497,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/20491497",
    "title": null,
    "body": "<p>You can use it like in the following code where <code>getGuestHouseRequestToForward</code> is the request mapping (<a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\">URL</a>). You can also use your URL.</p>\n\n<pre><code>function savePopUp(){\n    $.blockUI();\n    $.ajax({\n        url:\"saveForwardingInformationForGuestHouse?roomType=\"+$(\"#roomType\").val(),\n        data: $(\"#popForm\").serialize(),\n        dataType: \"json\",\n        error: (function() {\n            alert(\"Server Error\");\n            $.unblockUI();\n    }),\n    success: function(map) {\n        $(\"#layer1\").hide();\n        $.unblockUI();\n        window.location = \"getGuestHouseRequestToForward\";\n    }\n});\n</code></pre>\n\n<p>This is for the same context of the application.</p>\n\n<p>If you want to use only jquery specific code then following code may help:</p>\n\n<pre><code> $(location).attr('href',\"http://www.google.com\");\n $jq(window).attr(\"location\",\"http://www.google.com\");\n $(location).prop('href',\"http://www.google.com\"); \n</code></pre>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2605850,
      "name": "Vinay Sharma",
      "reputation": 364
    }
  },
  {
    "soID": 30226631,
    "parentID": 1646698,
    "url": "https://stackoverflow.com/q/30226631",
    "title": null,
    "body": "<p>Well JavaScript per si can differ greatly from platform to platform as it is always an implementation of the original specification EcmaScript.</p>\n\n<p>In any case, independently of the implementation all JavaScript implementations that follow the EcmaScript specification right, will give you an Object Oriented Language. According to the ES standard:</p>\n\n<blockquote>\n  <p>ECMAScript  is  an  object-oriented  programming  language  for \n  performing  computations and  manipulating computational  objects \n  within  a  host  environment.</p>\n</blockquote>\n\n<p>So now that we have agreed that JavaScript is an implementation of EcmaScript and therefore it is an object-oriented language. The definition of the <code>new</code> operation in any Object-oriented language, says that such keyword is used to create an object instance from a class of a certain type (including anonymous types, in cases like C#).</p>\n\n<p>In EcmaScript we don't use classes, as you can read from the specs:</p>\n\n<blockquote>\n  <p>ECMAScript does not use classes such as those in C++, Smalltalk, or Java. Instead objects may be created in various ways including via\n  a literal notation or via constructors which create objects and then execute code that initializes all or part of them by assigning initial\n  values to their properties. Each constructor is a function that has a\n  property named ―\n      prototype ‖ that is used to implement prototype - based inheritance and shared properties. Objects   are   created   by<br>\n  using   constructors   in new expressions;   for   example, new\n  Date(2009,11) creates a new Date object. Invoking a constructor\n  without using new has consequences that depend  on  the  constructor. \n  For  example, Date() produces  a  string  representation  of  the \n  current  date  and time rather than an object.</p>\n</blockquote>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2606833,
      "name": "João Pinho",
      "reputation": 2875
    }
  },
  {
    "soID": 26616528,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/26616528",
    "title": null,
    "body": "<p>I've tried this in the case of a scalar object and it works for me:</p>\n\n<pre><code>function binder(i) {\n  return function () {\n    return i;\n  };\n}\n\na=1;\nb=binder(a)(); // copy value of a into b\n\nalert(++a); // 2\nalert(b); // still 1\n</code></pre>\n\n<p>Regards.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44935441,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/44935441",
    "title": null,
    "body": "<p>Of course there are many approaches like synchronous request, promise, but from my experience I think you should use the callback approach. It's natural to asynchronous behavior of Javascript.\nSo, your code snippet can be rewrite a little different:</p>\n\n<pre><code>function foo() {\n    var result;\n\n    $.ajax({\n        url: '...',\n        success: function(response) {\n            myCallback(response);\n        }\n    });\n\n    return result;\n}\n\nfunction myCallback(response) {\n    // Does something.\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2612644,
      "name": "Khoa Bui",
      "reputation": 70
    }
  },
  {
    "soID": 30867001,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/30867001",
    "title": null,
    "body": "<p>Simply in JavaScript, you can redirect to a specific page by using the following:</p>\n\n<pre><code>window.location.replace(\"http://www.test.com\");\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>location.replace(\"http://www.test.com\");\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>window.location.href = \"http://www.test.com\";\n</code></pre>\n\n<p>Using jQuery:</p>\n\n<pre><code>$(window).attr(\"location\",\"http://www.test.com\");\n</code></pre>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2613306,
      "name": "vipul sorathiya",
      "reputation": 909
    }
  },
  {
    "soID": 41776292,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/41776292",
    "title": null,
    "body": "<p>There are many possibilities...</p>\n\n<ul>\n<li><a href=\"https://nodejs.org/api/debugger.html\" rel=\"nofollow noreferrer\">node</a> includes a <a href=\"https://nodejs.org/api/debugger.html\" rel=\"nofollow noreferrer\">debugging utility</a></li>\n<li><a href=\"https://github.com/node-inspector/node-inspector\" rel=\"nofollow noreferrer\">node-inspector</a></li>\n<li>Code editors / IDEs (see debug instructions for one of the following)\n\n<ul>\n<li><a href=\"https://atom.io/packages/node-debugger\" rel=\"nofollow noreferrer\">Atom</a>, </li>\n<li><a href=\"https://code.visualstudio.com/Docs/editor/debugging\" rel=\"nofollow noreferrer\">VSCode</a></li>\n<li><a href=\"https://www.jetbrains.com/help/webstorm/2016.3/running-and-debugging-node-js.html\" rel=\"nofollow noreferrer\">Webstorm</a></li>\n<li>and more</li>\n</ul></li>\n</ul>\n\n<p>Debug support is often implemented using the <a href=\"https://github.com/v8/v8/wiki/Debugging-Protocol\" rel=\"nofollow noreferrer\">v8 Debugging Protocol</a> or the newer <a href=\"https://developer.chrome.com/devtools/docs/debugger-protocol\" rel=\"nofollow noreferrer\">Chrome Debugging Protocol</a>.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2616755,
      "name": "cmd",
      "reputation": 7040
    }
  },
  {
    "soID": 33280259,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/33280259",
    "title": null,
    "body": "<p>Like it:</p>\n\n<pre><code>function capitalize(string,a) {\n    var tempstr = string.toLowerCase();\n    if (a == false || a == undefined)\n        return tempstr.replace(tempstr[0], tempstr[0].toUpperCase());\n    else {\n        return tempstr.split(\" \").map(function (i) { return i[0].toUpperCase() + i.substring(1) }).join(\" \");\n    }\n}\n\n\ncapitalize('stack overflow yeah!',true)); //Stack Overflow Yeah!\n\ncapitalize('stack stack stack stack overflow yeah!'));//Stack overflow yeah!\n</code></pre>\n\n<p><a href=\"https://jsfiddle.net/dgmLgv7b/\" rel=\"nofollow\">https://jsfiddle.net/dgmLgv7b/</a></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2618741,
      "name": "ISFO",
      "reputation": 73
    }
  },
  {
    "soID": 36604292,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/36604292",
    "title": null,
    "body": "<h1>ECMAScript 6 + jQuery, 85 bytes</h1>\n\n<pre><code>$({jQueryCode:(url)=&gt;location.replace(url)}).attr(\"jQueryCode\")(\"http://example.com\")\n</code></pre>\n\n<p>Please don't kill me, this is a joke. It's a joke. <em>This is a joke.</em></p>\n\n<p>This did \"provide an answer to the question\", in the sense that it asked for a solution \"using jQuery\" which in this case entails forcing it into the equation somehow.</p>\n\n<p>Ferrybig apparently needs the joke explained (still joking, I'm sure there are limited options on the review form), so without further ado:</p>\n\n<p>Other answers are using jQuery's <code>attr()</code> on the <code>location</code> or <code>window</code> objects unnecessarily.</p>\n\n<p>This answer also abuses it, but in a more ridiculous way. Instead of using it to set the location, this uses <code>attr()</code> to retrieve a function that sets the location.</p>\n\n<p>The function is named <code>jQueryCode</code> even though there's nothing jQuery about it, and calling a function <code>somethingCode</code> is just horrible, especially when the something is not even a language.</p>\n\n<p>The \"85 bytes\" is a reference to Code Golf. Golfing is obviously not something you should do outside of code golf, and furthermore this answer is clearly not actually golfed.</p>\n\n<p>Basically, cringe.</p>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2624876,
      "name": "1j01",
      "reputation": 1027
    }
  },
  {
    "soID": 17899651,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/17899651",
    "title": null,
    "body": "<pre><code>//\n// creates 'clone' method on context object\n//\n//  var \n//     clon = Object.clone( anyValue );\n//\n!((function (propertyName, definition) {\n    this[propertyName] = definition();\n}).call(\n    Object,\n    \"clone\",\n    function () {\n        function isfn(fn) {\n            return typeof fn === \"function\";\n        }\n\n        function isobj(o) {\n            return o === Object(o);\n        }\n\n        function isarray(o) {\n            return Object.prototype.toString.call(o) === \"[object Array]\";\n        }\n\n        function fnclon(fn) {\n            return function () {\n                fn.apply(this, arguments);\n            };\n        }\n\n        function owns(obj, p) {\n            return obj.hasOwnProperty(p);\n        }\n\n        function isemptyobj(obj) {\n            for (var p in obj) {\n                return false;\n            }\n            return true;\n        }\n\n        function isObject(o) {\n            return Object.prototype.toString.call(o) === \"[object Object]\";\n        }\n        return function (input) {\n            if (isfn(input)) {\n                return fnclon(input);\n            } else if (isobj(input)) {\n                var cloned = {};\n                for (var p in input) {\n                    owns(Object.prototype, p)\n                    || (\n                        isfn(input[p])\n                        &amp;&amp; ( cloned[p] = function () { return input[p].apply(input, arguments); } )\n                        || ( cloned[p] = input[p] )\n                    );\n                }\n                if (isarray(input)) {\n                    cloned.length = input.length;\n                    \"concat every filter forEach indexOf join lastIndexOf map pop push reduce reduceRight reverse shift slice some sort splice toLocaleString toString unshift\"\n                    .split(\" \")\n                    .forEach(\n                      function (methodName) {\n                        isfn( Array.prototype[methodName] )\n                        &amp;&amp; (\n                            cloned[methodName] =\n                            function () {\n                                return Array.prototype[methodName].apply(cloned, arguments);\n                            }\n                        );\n                      }\n                    );\n                }\n                return isemptyobj(cloned)\n                       ? (\n                          isObject(input)\n                          ? cloned\n                          : input\n                        )\n                       : cloned;\n            } else {\n                return input;\n            }\n        };\n    }\n));\n//\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 29576346,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/29576346",
    "title": null,
    "body": "<pre><code>$('#id').find('option:selected').text();\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2637371,
      "name": "Nikul",
      "reputation": 767
    }
  },
  {
    "soID": 19756134,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/19756134",
    "title": null,
    "body": "<p>This works every time:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>    var now = new Date();\r\n    var day = (\"0\" + now.getDate()).slice(-2);\r\n    var month = (\"0\" + (now.getMonth() + 1)).slice(-2);\r\n    var today = now.getFullYear() + \"-\" + (month) + \"-\" + (day);\r\n    \r\n    document.write(today);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 26,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2658276,
      "name": "roshan",
      "reputation": 1309
    }
  },
  {
    "soID": 33806642,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/33806642",
    "title": null,
    "body": "<p>This is a simple problem, don't know why people have such complex solution.<br>\nA simple sort function (based on <strong>quick-sort</strong> algorithm):</p>\n\n<pre><code>function sortObjectsArray(objectsArray, sortKey)\n        {\n            // Quick Sort:\n            var retVal;\n\n            if (1 &lt; objectsArray.length)\n            {\n                var pivotIndex = Math.floor((objectsArray.length - 1) / 2);  // middle index\n                var pivotItem = objectsArray[pivotIndex];                    // value in the middle index\n                var less = [], more = [];\n\n                objectsArray.splice(pivotIndex, 1);                          // remove the item in the pivot position\n                objectsArray.forEach(function(value, index, array)\n                {\n                    value[sortKey] &lt;= pivotItem[sortKey] ?                   // compare the 'sortKey' proiperty\n                        less.push(value) :\n                        more.push(value) ;\n                });\n\n                retVal = sortObjectsArray(less, sortKey).concat([pivotItem], sortObjectsArray(more, sortKey));\n            }\n            else\n            {\n                retVal = objectsArray;\n            }\n\n            return retVal;\n        }\n</code></pre>\n\n<p>Use example:</p>\n\n<pre><code>var myArr = \n        [\n            { val: 'x', idx: 3 },\n            { val: 'y', idx: 2 },\n            { val: 'z', idx: 5 },\n        ];\nmyArr = sortObjectsArray(myArr, 'idx');\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2658683,
      "name": "Gil Epshtain",
      "reputation": 858
    }
  },
  {
    "soID": 33050199,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/33050199",
    "title": null,
    "body": "<p>I was going to use clipboard.js, but it doesn't have any mobile solution in place (yet) ... so I wrote a super small library:</p>\n\n<p><a href=\"https://github.com/ryanpcmcquen/cheval\" rel=\"nofollow noreferrer\">https://github.com/ryanpcmcquen/cheval</a></p>\n\n<p>This will either copy the text (Desktop/Android/Safari 10+), or at the very least, select the text (older versions of iOS). Minified it is just over 1kB. In desktop Safari (Press Command + C to copy. You also don't need to write any JavaScript to use it.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2662028,
      "name": "ryanpcmcquen",
      "reputation": 1888
    }
  },
  {
    "soID": 19115350,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/19115350",
    "title": null,
    "body": "<p>Use a modified version of <a href=\"https://stackoverflow.com/users/2039571/jan\">Jan</a>'s initial suggestion:</p>\n\n<pre><code>var originalLength = A.length;\nfor (var i = originalLength; i &gt; 0; i--) {\n     A.pop();\n}\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2668568,
      "name": "cssimsek",
      "reputation": 683
    }
  },
  {
    "soID": 34294740,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/34294740",
    "title": null,
    "body": "<h1>An elegant way to clone a Javascript object in one line of code</h1>\n\n<p>An <code>Object.assign</code> method is part of the ECMAScript 2015 (ES6) standard and does exactly what you need.</p>\n\n<pre><code>var clone = Object.assign({}, obj);\n</code></pre>\n\n<blockquote>\n  <p>The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object.</p>\n</blockquote>\n\n<p><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\">Read more...</a></p>\n\n<p>The <strong>polyfill</strong> to support older browsers:</p>\n\n<pre><code>if (!Object.assign) {\n  Object.defineProperty(Object, 'assign', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function(target) {\n      'use strict';\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert first argument to object');\n      }\n\n      var to = Object(target);\n      for (var i = 1; i &lt; arguments.length; i++) {\n        var nextSource = arguments[i];\n        if (nextSource === undefined || nextSource === null) {\n          continue;\n        }\n        nextSource = Object(nextSource);\n\n        var keysArray = Object.keys(nextSource);\n        for (var nextIndex = 0, len = keysArray.length; nextIndex &lt; len; nextIndex++) {\n          var nextKey = keysArray[nextIndex];\n          var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n          if (desc !== undefined &amp;&amp; desc.enumerable) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n      return to;\n    }\n  });\n}\n</code></pre>\n",
    "score": 85,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33704783,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/33704783",
    "title": null,
    "body": "<h3>If you're interested in the performance of a few different methods posted:</h3>\n\n<p>Here are the fastest methods based on <a href=\"http://jsperf.com/capitalize-the-first-letter-of-string-in-javascript/2\" rel=\"noreferrer\">this jsperf test</a> (ordered from fastest to slowest).</p>\n\n<p>As you can see, the first two methods are essentially comparable in terms of performance, whereas altering the <code>String.prototype</code> is by far the slowest in terms of performance.</p>\n\n<pre><code>// 10,889,187 operations/sec\nfunction capitalizeFirstLetter(string) {\n    return string[0].toUpperCase() + string.slice(1);\n}\n\n// 10,875,535 operations/sec\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n// 4,632,536 operations/sec\nfunction capitalizeFirstLetter(string) {\n    return string.replace(/^./, string[0].toUpperCase());\n}\n\n// 1,977,828 operations/sec\nString.prototype.capitalizeFirstLetter = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/tNwKk.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/tNwKk.png\" alt=\"enter image description here\"></a></p>\n",
    "score": 104,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2680216,
      "name": "Josh Crozier",
      "reputation": 121329
    }
  },
  {
    "soID": 28489544,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/28489544",
    "title": null,
    "body": "<p>Something I just came up with:</p>\n\n<p><code>if (item.length)\n    //This is an array\n else\n    //not an array</code></p>\n",
    "score": -13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2683527,
      "name": "trololol",
      "reputation": 8
    }
  },
  {
    "soID": 36037915,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/36037915",
    "title": null,
    "body": "<p>I came into problem of sorting array of objects, with changing priority of values, basically I want to sort array of peoples by their Age, and then by surname - or just by surname, name. \nI think that this is most simple solution compared to another answers.</p>\n\n<p>it' is used by calling sortPeoples(['array', 'of', 'properties'], reverse=false)</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>///////////////////////example array of peoples ///////////////////////\r\n\r\nvar peoples = [\r\n    {name: \"Zach\", surname: \"Emergency\", age: 1},\r\n    {name: \"Nancy\", surname: \"Nurse\", age: 1},\r\n    {name: \"Ethel\", surname: \"Emergency\", age: 1},\r\n    {name: \"Nina\", surname: \"Nurse\", age: 42},\r\n    {name: \"Anthony\", surname: \"Emergency\", age: 42},\r\n    {name: \"Nina\", surname: \"Nurse\", age: 32},\r\n    {name: \"Ed\", surname: \"Emergency\", age: 28},\r\n    {name: \"Peter\", surname: \"Physician\", age: 58},\r\n    {name: \"Al\", surname: \"Emergency\", age: 58},\r\n    {name: \"Ruth\", surname: \"Registration\", age: 62},\r\n    {name: \"Ed\", surname: \"Emergency\", age: 38},\r\n    {name: \"Tammy\", surname: \"Triage\", age: 29},\r\n    {name: \"Alan\", surname: \"Emergency\", age: 60},\r\n    {name: \"Nina\", surname: \"Nurse\", age: 58}\r\n];\r\n\r\n\r\n\r\n//////////////////////// Sorting function /////////////////////\r\nfunction sortPeoples(propertyArr, reverse) {\r\n        function compare(a,b) {\r\n            var i=0;\r\n            while (propertyArr[i]) {\r\n                if (a[propertyArr[i]] &lt; b[propertyArr[i]])  return -1;\r\n                if (a[propertyArr[i]] &gt; b[propertyArr[i]])  return 1;\r\n                i++;\r\n            }\r\n            return 0;\r\n            }\r\n        peoples.sort(compare);\r\n        if (reverse){\r\n            peoples.reverse();\r\n        }\r\n    };\r\n\r\n////////////////end of sorting method///////////////\r\nfunction printPeoples(){\r\n  $('#output').html('');\r\npeoples.forEach( function(person){\r\n $('#output').append(person.surname+\" \"+person.name+\" \"+person.age+\"&lt;br&gt;\");\r\n} )\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;head&gt;\r\n&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;/head&gt;\r\n  &lt;html&gt;\r\n  &lt;body&gt;\r\n&lt;button onclick=\"sortPeoples(['surname']); printPeoples()\"&gt;sort by ONLY by surname ASC results in mess with same name cases&lt;/button&gt;&lt;br&gt;\r\n&lt;button onclick=\"sortPeoples(['surname', 'name'], true); printPeoples()\"&gt;sort by surname then name DESC&lt;/button&gt;&lt;br&gt;\r\n&lt;button onclick=\"sortPeoples(['age']); printPeoples()\"&gt;sort by AGE ASC. Same issue as in first case&lt;/button&gt;&lt;br&gt;\r\n&lt;button onclick=\"sortPeoples(['age', 'surname']); printPeoples()\"&gt;sort by AGE and Surname ASC. Adding second field fixed it.&lt;/button&gt;&lt;br&gt;\r\n        \r\n    &lt;div id=\"output\"&gt;&lt;/div&gt;\r\n    &lt;/body&gt;\r\n  &lt;/html&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2687375,
      "name": "user2687375",
      "reputation": 98
    }
  },
  {
    "soID": 23889974,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/23889974",
    "title": null,
    "body": "<p>The easyest way is indeed using <strong>indexOf</strong>. To just check a string <code>string</code> for a substring <code>substr</code> you can use this method:</p>\n\n<pre><code>string = \"asdf\";\nsubstr = \"as\";\nalert(string.indexOf(substr) == -1 ? false : true);\n</code></pre>\n\n<hr>\n\n<p>As you wanted the function <code>string.contains()</code>, you can implement it yourself like this:</p>\n\n<pre><code>String.prototype.contains = function(test) {\n    return this.indexOf(test) == -1 ? false : true;\n};\n</code></pre>\n\n<p>Now you can use this ecen shorter method to check if a string contains a special substring:</p>\n\n<pre><code>string = \"asdf\";\nalert(string.contains(\"as\"));\n</code></pre>\n\n<p>Here is a <a href=\"http://jsfiddle.net/Lfvga/\">JSFiddle</a> as well.</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21657856,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/21657856",
    "title": null,
    "body": "<p>The problem with copying an object that, eventually, may point at itself, can be solved with a simple check. Add this check, every time there is a copy action. It may be <strong>slow</strong>, but it <em>should</em> work.</p>\n\n<p>I use a <strong>toType()</strong> function to return the object type, explicitly. I also have my own <strong>copyObj()</strong> function, which is rather similar in logic, which answers all three Object(), Array(), and Date() cases.</p>\n\n<p>I run it in NodeJS.</p>\n\n<p><strong>NOT TESTED, YET.</strong></p>\n\n<pre><code>// Returns true, if one of the parent's children is the target.\n// This is useful, for avoiding copyObj() through an infinite loop!\nfunction isChild(target, parent) {\n  if (toType(parent) == '[object Object]') {\n    for (var name in parent) {\n      var curProperty = parent[name];\n\n      // Direct child.\n      if (curProperty = target) return true;\n\n      // Check if target is a child of this property, and so on, recursively.\n      if (toType(curProperty) == '[object Object]' || toType(curProperty) == '[object Array]') {\n        if (isChild(target, curProperty)) return true;\n      }\n    }\n  } else if (toType(parent) == '[object Array]') {\n    for (var i=0; i &lt; parent.length; i++) {\n      var curItem = parent[i];\n\n      // Direct child.\n      if (curItem = target) return true;\n\n      // Check if target is a child of this property, and so on, recursively.\n      if (toType(curItem) == '[object Object]' || toType(curItem) == '[object Array]') {\n        if (isChild(target, curItem)) return true;\n      }\n    }\n  }\n\n  return false;     // Not the target.\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 32781029,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/32781029",
    "title": null,
    "body": "<p>You can use <code>.add()</code> to create a new <strong><em>jQuery</em></strong> <em>object</em> and add to the targeted element. Use chaining then to proceed further.</p>\n\n<p>For eg <a href=\"https://api.jquery.com/add/\" rel=\"nofollow\">jQueryApi</a>: </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$( \"div\" ).css( \"border\", \"2px solid red\" )\r\n  .add( \"p\" )\r\n  .css( \"background\", \"yellow\" );</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code> div {\r\n    width: 60px;\r\n    height: 60px;\r\n    margin: 10px;\r\n    float: left;\r\n  }</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2692688,
      "name": "Tushar",
      "reputation": 8032
    }
  },
  {
    "soID": 42664529,
    "parentID": 586182,
    "url": "https://stackoverflow.com/q/42664529",
    "title": null,
    "body": "<p>I tried this and it is working fine!!!!</p>\n\n<pre><code>var initialArr = [\"India\",\"China\",\"Japan\",\"USA\"];\ninitialArr.splice(index, 0, item);\n</code></pre>\n\n<p>Index is the position where you want to insert or delete the element.\n0 i.e the second parameters defines the number of element from the index to be removed\nitem are the new entries which you want to make in array. It can be one or more than one.</p>\n\n<pre><code>initialArr.splice(2, 0, \"Nigeria\");\ninitialArr.splice(2, 0, \"Australia\",\"UK\");\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2693541,
      "name": "Pawan",
      "reputation": 67
    }
  },
  {
    "soID": 18438418,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/18438418",
    "title": null,
    "body": "<p>You can create separate tags using the <code>.jquery()</code> method. And create child tags by using the <code>.append()</code> method. As jQuery supports chaining, you can also apply CSS in two ways. \nEither specify it in the class or just call <code>.attr()</code>:</p>\n\n<pre><code>var lTag = jQuery(\"&lt;li/&gt;\")\n.appendTo(\".div_class\").html(data.productDisplayName);\n\nvar aHref = jQuery('&lt;a/&gt;',{         \n}).appendTo(lTag).attr(\"href\", data.mediumImageURL);\n\njQuery('&lt;img/&gt;',{                                               \n}).appendTo(aHref).attr(\"src\", data.mediumImageURL).attr(\"alt\", data.altText);\n</code></pre>\n\n<p>Firstly I am appending a list tag to my div tag and inserting JSON data into it. Next, I am creating a child tag of list, provided some attribute. I have assigned the value to a variable, so that it would be easy for me to append it.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2717152,
      "name": "Shruthi Acharya",
      "reputation": 41
    }
  },
  {
    "soID": 33523979,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/33523979",
    "title": null,
    "body": "<p>This article is long. But I am sure it will clear most of your queries \nregarding the \"prototypical\" nature of JavaScript Inheritance. And even more. Please read the complete article.</p>\n\n<p>JavaScript basically has two kinds of data types</p>\n\n<ul>\n<li><strong><em>Non objects</em></strong> </li>\n<li><strong><em>Objects</em></strong></li>\n</ul>\n\n<p><strong><em>Non objects</em></strong></p>\n\n<p>Following are the <strong><em>Non object</em></strong> data types</p>\n\n<ul>\n<li><strong>string</strong></li>\n<li><strong>number (including NaN and Infinity)</strong></li>\n<li><strong>boolean values(true,false)</strong> </li>\n<li><strong>undefined</strong></li>\n</ul>\n\n<p>These data types return following when you use the <strong>typeof</strong> operator </p>\n\n<p><strong>typeof</strong> <em>\"string literal\"</em> (or a variable containing string literal)  === <strong>'string'</strong></p>\n\n<p><strong>typeof</strong> <em>5</em> (or any numeric literal or a variable containing numeric literal or <strong><em>NaN or Infynity</em></strong>)  === <strong>'number'</strong></p>\n\n<p><strong>typeof</strong> <em>true</em> (or <em>false</em> or a variable containing <em>true</em> or <em>false</em>)  === <strong>'boolean'</strong></p>\n\n<p><strong>typeof</strong> <em>undefined</em> (or an undefined variable or a variable containing <em>undefined</em>) === <strong>'undefined'</strong></p>\n\n<p>The <strong>string</strong>,<strong>number</strong> and <strong>boolean</strong> data types can be represented both as <strong>Objects</strong> and <strong>Non objects</strong>.When they are represented as objects their typeof is always === 'object'. We shall come back to this once we understand the object data types.</p>\n\n<p><strong><em>Objects</em></strong></p>\n\n<p>The object datatypes can be further divided into two types</p>\n\n<ol>\n<li><strong>Function type objects</strong></li>\n<li><strong>Non Function type objects</strong></li>\n</ol>\n\n<p>The <strong>Function type objects</strong> are the ones that return the string <strong>'function'</strong> with <strong>typeof</strong> operator. \nAll the user defined functions and all the JavaScript built in objects that can create new objects by using new operator fall into this category. For eg.</p>\n\n<ul>\n<li><strong>Object</strong></li>\n<li><strong>String</strong> </li>\n<li><strong>Number</strong>  </li>\n<li><strong>Boolean</strong></li>\n<li><strong>Array</strong> </li>\n<li><strong>Typed Arrays</strong></li>\n<li><strong>RegExp</strong></li>\n<li><strong>Function</strong> </li>\n<li>All the other built in objects that can create new objects by using new operator</li>\n<li><em>function</em> <strong>UserDefinedFunction</strong>(){ /*user defined code */ }</li>\n</ul>\n\n<p>So,\n<strong>typeof(Object)</strong> === <strong>typeof(String)</strong> === <strong>typeof(Number)</strong> === <strong>typeof(Boolean)</strong> === <strong>typeof(Array)</strong>  === <strong>typeof(RegExp)</strong> === <strong>typeof(Function)</strong>  === <strong>typeof(UserDefinedFunction)</strong> === <strong>'function'</strong></p>\n\n<p>All the <strong><em>Function type objects</em></strong> are actually instances of the built in JavaScript object <strong>Function</strong> (including the <strong>Function</strong> object i.e it is recursively defined). It is as if the these objects have been defined in the following way</p>\n\n<pre><code>var Object= new Function ([native code for object Object])\nvar String= new Function ([native code for object String])\nvar Number= new Function ([native code for object Number])\nvar Boolean= new Function ([native code for object Boolean])\nvar Array= new Function ([native code for object Array])\nvar RegExp= new Function ([native code for object RegExp])\nvar Function= new Function ([native code  for object Function])\nvar UserDefinedFunction= new Function (\"user defined code\")\n</code></pre>\n\n<p>As mentioned, the <strong><em>Function type objects</em></strong> can further create new objects using the <strong>new operator</strong>. For e.g an object of type <strong>Object</strong>, <strong>String</strong>, <strong>Number</strong>, <strong>Boolean</strong>, <strong>Array</strong>, <strong>RegExp</strong>  Or <strong>UserDefinedFunction</strong> can be created by using</p>\n\n<pre><code>var a=new Object() or var a=Object() or var a={} //Create object of type Object\nvar a=new String() //Create object of type String\nvar a=new Number() //Create object of type Number\nvar a=new Boolean() //Create object of type Boolean\nvar a=new Array() or var a=Array() or var a=[]  //Create object of type Array\nvar a=new RegExp() or var a=RegExp() //Create object of type RegExp\nvar a=new UserDefinedFunction() \n</code></pre>\n\n<p>The objects thus created are all <strong><em>Non Function type objects</em></strong> and return their <strong>typeof</strong>===<strong>'object'</strong>. In all these cases the object \"a\" cannot further create \nobjects using operator new. So the following is wrong</p>\n\n<pre><code>var b=new a() //error. a is not typeof==='function'\n</code></pre>\n\n<p>The built in object <strong>Math</strong> is <strong>typeof</strong>===<strong>'object'</strong>. Hence a new object of type Math cannot be created by new operator.</p>\n\n<pre><code>var b=new Math() //error. Math is not typeof==='function'\n</code></pre>\n\n<p>Also notice that <strong>Object</strong>,<strong>Array</strong> and <strong>RegExp</strong> functions can create a new object without even using <strong>operator new</strong>. However the follwing ones don't.</p>\n\n<pre><code>var a=String() // Create a new Non Object string. returns a typeof==='string' \nvar a=Number() // Create a new Non Object Number. returns a typeof==='number'\nvar a=Boolean() //Create a new Non Object Boolean. returns a typeof==='boolean'\n</code></pre>\n\n<p>The user defined functions are special case. </p>\n\n<pre><code>var a=UserDefinedFunction() //may or may not create an object of type UserDefinedFunction() based on how it is defined.\n</code></pre>\n\n<p>Since the <strong><em>Function type objects</em></strong> can create new objects they are also called <strong><em>Constructors</em></strong>.</p>\n\n<p>Every <strong>Constructor/Function</strong> (whether built in or user defined) when defined automatically has a property called <strong>\"prototype\"</strong> whose value by default is set as an object. This object itself has a property called <strong>\"constructor\"</strong> which by default references back the <strong>Constructor/Function</strong> .</p>\n\n<p>For example when we define a function</p>\n\n<pre><code>function UserDefinedFunction()\n{\n}\n</code></pre>\n\n<p>following automatically happens</p>\n\n<pre><code>UserDefinedFunction.prototype={constructor:UserDefinedFunction}\n</code></pre>\n\n<p>This <strong>\"prototype\" property</strong> is only present in the <strong>Function type objects</strong> \n(and never in <strong>Non Function type objects</strong>). </p>\n\n<p>This is because <strong>when a new object is created (using new operator)it inherits all properties and methods from Constructor function's current prototype object i.e. an</strong> <strong><em>internal reference</em></strong> <strong>is created in the newly created object that references the object referenced by Constructor function's current prototype object.</strong></p>\n\n<p>This <strong>\"internal reference\"</strong> that is created in the object for referencing inherited properties is known as the <strong>object's prototype</strong> (which references the object referenced by Constructor's <strong>\"prototype\"</strong> property but is different from it). For any object (Function or Non Function) this can be retrieved using <strong>Object.getPrototypeOf()</strong> method. Using this method one can trace the prototype chain of an object. </p>\n\n<p>Also, <strong>every object that is created</strong> (<strong>Function type</strong> or <strong>Non Function type</strong>) has a <strong>\"constructor\"</strong> property which is inherited from the object referenced by prototype  property of the Constructor function. By default this <strong>\"constructor\"</strong> property references the <strong>Constructor function</strong> that created it (if the <strong>Constructor Function's</strong> default \"prototype\" is not changed). </p>\n\n<p>For all <strong><em>Function type objects</em></strong> the constructor function is always\n<strong><em>function Function(){}</em></strong></p>\n\n<p>For <strong><em>Non Function type objects</em></strong> (e.g Javascript Built in  Math object) the constructor function is the function that created it.\nFor <strong>Math</strong> object it is <strong><em>function Object(){}</em></strong>. </p>\n\n<p>All the concept explained above can be a little daunting to understand without any supporting code. Please go through the following code line by line to understand the concept. Try to execute it to have a better understanding.</p>\n\n<pre><code>function UserDefinedFunction()\n{ \n\n} \n\n/* creating the above function automatically does the following as mentioned earlier\n\nUserDefinedFunction.prototype={constructor:UserDefinedFunction}\n\n*/\n\n\nvar newObj_1=new UserDefinedFunction()\n\nalert(Object.getPrototypeOf(newObj_1)===UserDefinedFunction.prototype)  //Displays true\n\nalert(newObj_1.constructor) //Displays function UserDefinedFunction\n\n//Create a new property in UserDefinedFunction.prototype object\n\nUserDefinedFunction.prototype.TestProperty=\"test\"\n\nalert(newObj_1.TestProperty) //Displays \"test\"\n\nalert(Object.getPrototypeOf(newObj_1).TestProperty)// Displays \"test\"\n\n//Create a new Object\n\nvar objA = {\n        property1 : \"Property1\",\n        constructor:Array\n\n}\n\n\n//assign a new object to UserDefinedFunction.prototype\nUserDefinedFunction.prototype=objA\n\nalert(Object.getPrototypeOf(newObj_1)===UserDefinedFunction.prototype)  //Displays false. The object referenced by UserDefinedFunction.prototype has changed\n\n//The internal reference does not change\nalert(newObj_1.constructor) // This shall still Display function UserDefinedFunction\n\nalert(newObj_1.TestProperty) //This shall still Display \"test\" \n\nalert(Object.getPrototypeOf(newObj_1).TestProperty) //This shall still Display \"test\"\n\n\n//Create another object of type UserDefinedFunction\nvar newObj_2= new UserDefinedFunction();\n\nalert(Object.getPrototypeOf(newObj_2)===objA) //Displays true.\n\nalert(newObj_2.constructor) //Displays function Array()\n\nalert(newObj_2.property1) //Displays \"Property1\"\n\nalert(Object.getPrototypeOf(newObj_2).property1) //Displays \"Property1\"\n\n//Create a new property in objA\nobjA.property2=\"property2\"\n\nalert(objA.property2) //Displays \"Property2\"\n\nalert(UserDefinedFunction.prototype.property2) //Displays \"Property2\"\n\nalert(newObj_2.property2) // Displays Property2\n\nalert(Object.getPrototypeOf(newObj_2).property2) //Displays  \"Property2\"\n</code></pre>\n\n<p>The prototype chain of every object ultimately traces back to Object.prototype (which itself does not have any prototype object) .\nFollowing code can be used for tracing the prototype chain of an object</p>\n\n<pre><code>var o=Starting object;\n\ndo {\n    alert(o + \"\\n\" + Object.getOwnPropertyNames(o))\n\n}while(o=Object.getPrototypeOf(o))\n</code></pre>\n\n<p>The prototype chain for various objects work out as follows.</p>\n\n<ul>\n<li>Every Function object (including built in Function object)->\nFunction.prototype -> Object.prototype -> null   </li>\n<li>Simple Objects (created By new Object() or {} including built in Math  object)->   Object.prototype -> null</li>\n<li>Object created with new or Object.create -> One or More prototype chains -> Object.prototype -> null</li>\n</ul>\n\n<p>For creating an object without any prototype use the following:</p>\n\n<pre><code>var o=Object.create(null)\nalert(Object.getPrototypeOf(o)) //Displays null\n</code></pre>\n\n<p>One might think that setting the prototype property of the Constructor to null shall create an object with a null prototype. However in such cases the newly created object's prototype is set to Object.prototype and its constructor is set to function Object. This is demonstrated by the following code</p>\n\n<pre><code>function UserDefinedFunction(){}\nUserDefinedFunction.prototype=null// Can be set to any non object value (number,string,undefined etc.)\n\nvar o=new UserDefinedFunction()\nalert(Object.getPrototypeOf(o)==Object.prototype)   //Displays true\nalert(o.constructor)    //Displays Function Object\n</code></pre>\n\n<p>Following in the summary of this article</p>\n\n<ul>\n<li>There are two types of objects <strong>Function types</strong> and <strong>Non Function types</strong></li>\n<li><p>Only <strong>Function type objects</strong> can create a new object using the <strong>operator new</strong>. The objects thus created are <strong>Non Function type</strong> objects. The <strong>Non Function type objects</strong> cannot further create an object using <strong>operator new</strong>.</p></li>\n<li><p>All <strong>Function type objects</strong> by default have a <strong>\"prototype\"</strong> property. This <strong>\"prototype\"</strong> property references an object that has a <strong>\"constructor\"</strong> property that by default references the <strong>Function type object</strong> itself.  </p></li>\n<li><p>All objects (<strong>Function type</strong> and <strong>Non Function type</strong>) have a \"constructor\" property that by default references the <strong>Function type object</strong>/<strong>Constructor</strong> that created it.</p></li>\n<li><p>Every object that gets created internally references the object referenced by\n<strong>\"prototype\"</strong> property of the Constructor that created it. This object is known as the created <strong><em>object's prototype</em></strong> (which is different from Function type objects \"prototype\" property which it references) . This way the created object can directly access the methods and properties defined in object referenced by the Constructor's \"prototype\" property (at the time of object creation).</p></li>\n<li><p>An <strong>object's prototype</strong> (and hence its inherited property names) can be retrieved using the <strong>Object.getPrototypeOf()</strong>   method. In fact this method \ncan be used for navigating the entire prototype chain of the object.</p></li>\n<li><p>The prototype chain of every object ultimately traces back to Object.prototype (Unless the object is created using Object.create(null) in which case the object has no prototype).</p></li>\n<li><p><strong>typeof(new Array())==='object'</strong> is by design of language and not a mistake as pointed by <a href=\"http://javascript.crockford.com/survey.html\">Douglas Crockford</a>  </p></li>\n<li><p>Setting the prototype property of the Constructor to null(or undefined,number,true,false,string) shall not create an object with a null prototype. In such cases the newly created object's prototype is set to Object.prototype and its constructor is set to function Object. </p></li>\n</ul>\n\n<p>Hope this helps.</p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2730018,
      "name": "Arup Hore",
      "reputation": 531
    }
  },
  {
    "soID": 30764409,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/30764409",
    "title": null,
    "body": "<p>Here is my solution: (newUrl is your new url which you want to replace current one)</p>\n\n<pre><code>history.pushState({}, null, newUrl);\n</code></pre>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2730862,
      "name": "Haimei",
      "reputation": 7391
    }
  },
  {
    "soID": 35828265,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/35828265",
    "title": null,
    "body": "<p>The <code>if</code> and <code>while</code> statements and the <code>?</code> operator use truth values to determine which branch of code to run. For example, zero and NaN numbers and the empty string are false, but other numbers and strings are true. Objects are true, but the undefined value and <code>null</code> are both false.</p>\n\n<p>The double negation operator <code>!!</code> calculates the truth value of a value. It's actually two operators, where <code>!!x</code> means <code>!(!x)</code>, and behaves as follows:</p>\n\n<ul>\n<li>If <code>x</code> is a false value, <code>!x</code> is <code>true</code>, and <code>!!x</code> is <code>false</code>.</li>\n<li>If <code>x</code> is a true value, <code>!x</code> is <code>false</code>, and <code>!!x</code> is <code>true</code>.</li>\n</ul>\n\n<p>When used at the top level of a Boolean context (<code>if</code>, <code>while</code>, or <code>?</code>), the <code>!!</code> operator is behaviorally a no-op. For example, <code>if (x)</code> and <code>if (!!x)</code> mean the same thing.</p>\n\n<h2>Practical uses</h2>\n\n<p>However it has several practical uses.</p>\n\n<p>One use is to lossily compress an object to its truth value, so that your code isn't holding a reference to a big object and keeping it alive. Assigning <code>!!some_big_object</code> to a variable instead of <code>some_big_object</code> lets go of it for the garbage collector. This is useful for cases that produce either an object or a false value such as <code>null</code> or the undefined value, such as browser feature detection.</p>\n\n<p>Another use, which I mentioned in an <a href=\"https://stackoverflow.com/a/35525827/2738262\">answer about C's corresponding <code>!!</code> operator</a>, is with \"lint\" tools that look for common typos and print diagnostics. For example, in both C and JavaScript, a few common typos for Boolean operations produce other behaviors whose output isn't quite as Boolean:</p>\n\n<ul>\n<li><code>if (a = b)</code> is assignment followed by use of the truth value of <code>b</code>; <code>if (a == b)</code> is an equality comparison.</li>\n<li><code>if (a &amp; b)</code> is a bitwise AND; <code>if (a &amp;&amp; b)</code> is a logical AND. <code>2 &amp; 5</code> is <code>0</code> (a false value); <code>2 &amp;&amp; 5</code> is true.</li>\n</ul>\n\n<p>The <code>!!</code> operator reassures the lint tool that what you wrote is what you meant: do this operation, then take the truth value of the result.</p>\n\n<p>A third use is to produce logical XOR and logical XNOR. In both C and JavaScript, <code>a &amp;&amp; b</code> performs a logical AND (true if both sides are true), and <code>a &amp; b</code> performs a bitwise AND. <code>a || b</code> performs a logical OR (true if at least one are true), and <code>a | b</code> performs a bitwise OR. There's a bitwise XOR (exclusive OR) as <code>a ^ b</code>, but there's no built-in operator for logical XOR (true if exactly one side is true). You might, for example, want to allow the user to enter text in exactly one of two fields. What you can do is convert each to a truth value and compare them: <code>!!x !== !!y</code>.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2738262,
      "name": "Damian Yerrick",
      "reputation": 3078
    }
  },
  {
    "soID": 43971846,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/43971846",
    "title": null,
    "body": "<p>It's very simple. Suppose you want to import file A.js in file B.js.</p>\n\n<p><strong>Now it's sure you have linked B.js in an HTML file, then just link A.js before B.js in that HTML file. Then the public variables of A.js will be available inside the B.js</strong></p>\n\n<p>This does not require a complicated answer.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2761641,
      "name": "Akshay Vijay Jain",
      "reputation": 820
    }
  },
  {
    "soID": 19811406,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/19811406",
    "title": null,
    "body": "<p>We can differentiate call and apply methods as below</p>\n\n<p>CALL : A function with argument provide individually.\nIf you know the arguments to be passed or there are no argument to pass you can use call.</p>\n\n<p>APPLY : Call a function with argument provided as an array. You can use apply if you don't know how many argument are going to pass to the function.</p>\n\n<p>There is a advantage of using apply over call, we don't need to change the number of argument only we can change a array that is passed.</p>\n\n<p>There is not big difference in performance. But we can say call is bit faster as compare to apply because an array need to evaluate in apply method.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2772743,
      "name": "Praveen D",
      "reputation": 1540
    }
  },
  {
    "soID": 28571978,
    "parentID": 1279957,
    "url": "https://stackoverflow.com/q/28571978",
    "title": null,
    "body": "<p>If you want a quick demo and more details about how you move elements, try this link:</p>\n\n<p><a href=\"http://html-tuts.com/move-div-in-another-div-with-jquery\">http://html-tuts.com/move-div-in-another-div-with-jquery</a></p>\n\n<hr>\n\n<p><strong>Here is a short example:</strong></p>\n\n<p>To move ABOVE an element:</p>\n\n<pre><code>$('.whatToMove').insertBefore('.whereToMove');\n</code></pre>\n\n<p>To move AFTER an element:</p>\n\n<pre><code>$('.whatToMove').insertAfter('.whereToMove');\n</code></pre>\n\n<p>To move inside an element, ABOVE ALL elements inside that container:</p>\n\n<pre><code>$('.whatToMove').prependTo('.whereToMove');\n</code></pre>\n\n<p>To move inside an element, AFTER ALL elements inside that container:</p>\n\n<pre><code>$('.whatToMove').appendTo('.whereToMove');\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2778159,
      "name": "Dan",
      "reputation": 446
    }
  },
  {
    "soID": 34976934,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/34976934",
    "title": null,
    "body": "<p>This is not an exact duplicate of <code>sprintf</code>; however, it is similar and more powerful: <a href=\"https://github.com/anywhichway/stringformatter\" rel=\"nofollow\">https://github.com/anywhichway/stringformatter</a></p>\n\n<p>Format expressions using this library take the form of embedded Javascript objects, e.g.</p>\n\n<pre><code>format(\"I have {number: {currency: \"$\", precision:2}}.\",50.2); \n</code></pre>\n\n<p>will return <code>\"I have $50.20.\"</code>.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23819901,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/23819901",
    "title": null,
    "body": "<p>You are using Ajax incorrectly. The idea is not to have it return anything, but instead hand off the data to something called a callback function, which handles the data.</p>\n\n<p>That is:</p>\n\n<pre><code>function handleData( responseData ) {\n\n    // Do what you want with the data\n    console.log(responseData);\n}\n\n$.ajax({\n    url: \"hi.php\",\n    ...\n    success: function ( data, status, XHR ) {\n        handleData(data);\n    }\n});\n</code></pre>\n\n<p>Returning anything in the submit handler will not do anything. You must instead either hand off the data, or do what you want with it directly inside the success function.</p>\n",
    "score": 137,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2802187,
      "name": "Nic",
      "reputation": 1283
    }
  },
  {
    "soID": 25355080,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/25355080",
    "title": null,
    "body": "<p>Here's an interesting example to add on to what others have already written. Suppose you want to make an array of functions, <code>adderFunctions</code>, where each function takes a single Number argument and returns the sum of the argument and the function's index in the array. Trying to generate <code>adderFunctions</code> with a loop using the <code>var</code> keyword causes problems:</p>\n\n<pre><code>var adderFunctions = [];\n\nfor (var i = 0; i &lt; 1000; i++) {\n  adderFunctions[i] = function(x) {\n    return x + i;\n  };\n}\n\nvar result = adderFunctions[12](8);\n\nconsole.log(result === 20); // =&gt; false\nconsole.log(result === 1007); // =&gt; true\nconsole.log(i); // =&gt; 999\n</code></pre>\n\n<p>The process above doesn't generate the desired array of functions because <code>i</code>'s scope extends beyond the <code>for</code> block. Now, try the same using the Harmony (ECMAScript 6) spec and the <code>let</code> keyword:</p>\n\n<pre><code>const adderFunctions = [];\n\nfor (let i = 0; i &lt; 1000; i++) {\n  adderFunctions[i] = x =&gt; x + i;\n}\n\nconst result = adderFunctions[12](8);\n\nconsole.log(result === 20); // =&gt; true\nconsole.log(i); // =&gt; ReferenceError: i is not defined\n</code></pre>\n\n<p>This time, <code>i</code>'s scope is limited to the <code>for</code> block and <code>adderFunctions</code> contains the desired function at each index.</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2803080,
      "name": "abroz",
      "reputation": 101
    }
  },
  {
    "soID": 39403111,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/39403111",
    "title": null,
    "body": "<pre><code>var arr = [1,2,3,5];\n</code></pre>\n\n<p>You can use:</p>\n\n<pre><code>1. arr.length = 0;\n2. arr.splice(0);\n3. arr = arr.constructor();\n4. arr = [];\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2811975,
      "name": "Wings",
      "reputation": 91
    }
  },
  {
    "soID": 38165470,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/38165470",
    "title": null,
    "body": "<p>Based on <a href=\"https://stackoverflow.com/a/28848096/2813238\">shruti's answer</a>, I've created a shortcut of Chrome browser with needed arguments:\n<a href=\"https://i.stack.imgur.com/eZbpy.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/eZbpy.png\" alt=\"enter image description here\"></a>\n<a href=\"https://i.stack.imgur.com/tQerZ.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/tQerZ.png\" alt=\"enter image description here\"></a></p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2813238,
      "name": "Mohammad",
      "reputation": 895
    }
  },
  {
    "soID": 39657225,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/39657225",
    "title": null,
    "body": "<p>With ECMAScript 2015, we can use <code>includes()</code></p>\n\n<pre><code>let s = \"foo\";\nconsole.log(s.includes(\"oo\"));\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43186772,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/43186772",
    "title": null,
    "body": "<p>I was looking to insert/append simply/easily an <code>id</code> to the <code>div</code> too. So here's what worked for me:</p>\n\n<pre><code>$(\"#id_to_append_div_to\").append(\"&lt;div id='new_id_of_div'&gt;\");\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2817442,
      "name": "iorgu",
      "reputation": 71
    }
  },
  {
    "soID": 25996700,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/25996700",
    "title": null,
    "body": "<p>Simply use any one of the following:</p>\n\n<pre><code>window.location = \"Your required URL\";\n</code></pre>\n\n<p>or</p>\n\n<pre><code>window.location.href = \"Your required URL\";\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2818411,
      "name": "Vidhya Krishnan",
      "reputation": 169
    }
  },
  {
    "soID": 20171099,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/20171099",
    "title": null,
    "body": "<p>Instead of redirecting, you can replace the window the user is on with the page you want to redirect to using JavaScript code like this:</p>\n\n<pre><code>window.open('url', '_self');\n</code></pre>\n\n<p>You can also do this:</p>\n\n<pre><code>window.location.href = \"http://example.com\";\n</code></pre>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2827296,
      "name": "Oliver Ni",
      "reputation": 930
    }
  },
  {
    "soID": 20274613,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/20274613",
    "title": null,
    "body": "<p>Try this:</p>\n\n<pre><code>if ('Hello, World!'.indexOf('orl') !== -1)\n    alert(\"The string 'Hello World' contains the substring 'orl'!\");\nelse\n    alert(\"The string 'Hello World' does not contain the substring 'orl'!\");\n</code></pre>\n\n<p>Here is an example: <a href=\"http://jsfiddle.net/oliverni/cb8xw/\" rel=\"noreferrer\">jsfiddle</a></p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2827296,
      "name": "Oliver Ni",
      "reputation": 930
    }
  },
  {
    "soID": 31106634,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/31106634",
    "title": null,
    "body": "<p>For older versions of jQuery, I had to use following,</p>\n\n<pre><code>$('#change_plan').live('click', function() {\n     var checked = $('#change_plan').attr('checked');\n     if(checked) {\n          //Code       \n     }\n     else {\n          //Code       \n     }\n});\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28244753,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/28244753",
    "title": null,
    "body": "<p>Clone an object based on a 'template'. What do you do if you don't want an exact copy, but you do want the robustness of some kind of reliable clone operation but you only want bits cloned or you want to make sure you can control the existence or format of each attribute value cloned?</p>\n\n<p>I am contributing this because it's useful for us and we created it because we could not find something similar. You can use it to clone an object based on a 'template' object which specifies what attributes of the object I want to clone, and the template allows for functions to transform those attributes into something different if they don't exist on the source object or however you want to handle the clone. If it's not useful I am sure someone can delete this answer.</p>\n\n<pre><code>   function isFunction(functionToCheck) {\n       var getType = {};\n       return functionToCheck &amp;&amp; getType.toString.call(functionToCheck) === '[object Function]';\n   }\n\n   function cloneObjectByTemplate(obj, tpl, cloneConstructor) {\n       if (typeof cloneConstructor === \"undefined\") {\n           cloneConstructor = false;\n       }\n       if (obj == null || typeof (obj) != 'object') return obj;\n\n       //if we have an array, work through it's contents and apply the template to each item...\n       if (Array.isArray(obj)) {\n           var ret = [];\n           for (var i = 0; i &lt; obj.length; i++) {\n               ret.push(cloneObjectByTemplate(obj[i], tpl, cloneConstructor));\n           }\n           return ret;\n       }\n\n       //otherwise we have an object...\n       //var temp:any = {}; // obj.constructor(); // we can't call obj.constructor because typescript defines this, so if we are dealing with a typescript object it might reset values.\n       var temp = cloneConstructor ? new obj.constructor() : {};\n\n       for (var key in tpl) {\n           //if we are provided with a function to determine the value of this property, call it...\n           if (isFunction(tpl[key])) {\n               temp[key] = tpl[key](obj); //assign the result of the function call, passing in the value\n           } else {\n               //if our object has this property...\n               if (obj[key] != undefined) {\n                   if (Array.isArray(obj[key])) {\n                       temp[key] = [];\n                       for (var i = 0; i &lt; obj[key].length; i++) {\n                           temp[key].push(cloneObjectByTemplate(obj[key][i], tpl[key], cloneConstructor));\n                       }\n                   } else {\n                       temp[key] = cloneObjectByTemplate(obj[key], tpl[key], cloneConstructor);\n                   }\n               }\n           }\n       }\n\n       return temp;\n   }\n</code></pre>\n\n<p>A simple way to call it would be like this:</p>\n\n<pre><code>var source = {\n       a: \"whatever\",\n       b: {\n           x: \"yeah\",\n           y: \"haha\"\n       }\n   };\n   var template = {\n       a: true, //we want to clone \"a\"\n       b: {\n           x: true //we want to clone \"b.x\" too\n       }\n   }; \n   var destination = cloneObjectByTemplate(source, template);\n</code></pre>\n\n<p>If you wanted to use a function to make sure an attribute is returned or to make sure it's a particular type, use a template like this. Instead of using { ID: true } we are providing a function which still just copies the ID attribute of the source object but it makes sure that it's a number even if it does not exist on the source object.</p>\n\n<pre><code> var template = {\n    ID: function (srcObj) {\n        if(srcObj.ID == undefined){ return -1; }\n        return parseInt(srcObj.ID.toString());\n    }\n}\n</code></pre>\n\n<p>Arrays will clone fine but if you want to you can have your own function handle those individual attributes too, and do something special like this:</p>\n\n<pre><code> var template = {\n    tags: function (srcObj) {\n        var tags = [];\n        if (process.tags != undefined) {\n            for (var i = 0; i &lt; process.tags.length; i++) {\n\n                tags.push(cloneObjectByTemplate(\n                  srcObj.tags[i],\n                  { a : true, b : true } //another template for each item in the array\n                );\n            }\n        }\n        return tags;\n    }\n }\n</code></pre>\n\n<p>So in the above, our template just copies the 'tags' attribute of the source object if it exists, (it's assumed to be an array), and for each element in that array the clone function is called to individually clone it based on a second template which just copies the 'a' and 'b' attributes of each of those tag elements. </p>\n\n<p>If you are taking objects in and out of node and you want to control which attributes of those objects are cloned then this is a great way of controlling that in node.js and the code works in the browser too.</p>\n\n<p>Here is an example of it's use: <a href=\"http://jsfiddle.net/hjchyLt1/\" rel=\"nofollow\">http://jsfiddle.net/hjchyLt1/</a></p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21328170,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/21328170",
    "title": null,
    "body": "<p>Before HTML5 we can use:</p>\n\n<pre><code>parent.location.hash = \"hello\";\n</code></pre>\n\n<p>and:</p>\n\n<pre><code>window.location.replace(\"http:www.example.com\");\n</code></pre>\n\n<p>This method will reload your page, but HTML5 introduced the <code>history.pushState(page, caption, replace_url)</code> that should not reload your page.</p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2848901,
      "name": "Shine",
      "reputation": 586
    }
  },
  {
    "soID": 32024458,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/32024458",
    "title": null,
    "body": "<p>Use <code>history.pushState()</code>  from HTML 5 History API</p>\n\n<p>refer  link for more details\n<a href=\"http://diveintohtml5.info/history.html\" rel=\"nofollow\">HTML5 History API</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2853681,
      "name": "Prathamesh Rasam",
      "reputation": 162
    }
  },
  {
    "soID": 25651922,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/25651922",
    "title": null,
    "body": "<p>For those using AngularJS, there is also direct method for cloning or extending of the objects in this library.</p>\n\n<pre><code>var destination = angular.copy(source);\n</code></pre>\n\n<p>or</p>\n\n<pre><code>angular.copy(source, destination);\n</code></pre>\n\n<p>More in angular.copy <a href=\"https://docs.angularjs.org/api/ng/function/angular.copy\">documentation</a>...</p>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 36329327,
    "parentID": 3437786,
    "url": "https://stackoverflow.com/q/36329327",
    "title": null,
    "body": "<p>I wrote a small javascript bookmarklet you can use to display the size. You can  easily add it to your browser and whenever you click it you will see the size in the right corner of your browser window.</p>\n\n<p>Here you find information how to use a bookmarklet \n<a href=\"https://en.wikipedia.org/wiki/Bookmarklet\" rel=\"noreferrer\">https://en.wikipedia.org/wiki/Bookmarklet</a> </p>\n\n<h2>Bookmarklet</h2>\n\n<pre><code>javascript:(function(){!function(){var i,n,e;return n=function(){var n,e,t;return t=\"background-color:azure; padding:1rem; position:fixed; right: 0; z-index:9999; font-size: 1.2rem;\",n=i('&lt;div style=\"'+t+'\"&gt;&lt;/div&gt;'),e=function(){return'&lt;p style=\"margin:0;\"&gt;width: '+i(window).width()+\" height: \"+i(window).height()+\"&lt;/p&gt;\"},n.html(e()),i(\"body\").prepend(n),i(window).resize(function(){n.html(e())})},(i=window.jQuery)?(i=window.jQuery,n()):(e=document.createElement(\"script\"),e.src=\"http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js\",e.onload=n,document.body.appendChild(e))}()}).call(this);\n</code></pre>\n\n<h2>Original Code</h2>\n\n<p>The original code is in coffee:</p>\n\n<pre><code>(-&gt;\n  addWindowSize = ()-&gt;\n    style = 'background-color:azure; padding:1rem; position:fixed; right: 0; z-index:9999; font-size: 1.2rem;'\n    $windowSize = $('&lt;div style=\"' + style + '\"&gt;&lt;/div&gt;')\n\n    getWindowSize = -&gt;\n      '&lt;p style=\"margin:0;\"&gt;width: ' + $(window).width() + ' height: ' + $(window).height() + '&lt;/p&gt;'\n\n    $windowSize.html getWindowSize()\n    $('body').prepend $windowSize\n    $(window).resize -&gt;\n      $windowSize.html getWindowSize()\n      return\n\n  if !($ = window.jQuery)\n    # typeof jQuery=='undefined' works too\n    script = document.createElement('script')\n    script.src = 'http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js'\n    script.onload = addWindowSize\n    document.body.appendChild script\n  else\n    $ = window.jQuery\n    addWindowSize()\n)()\n</code></pre>\n\n<p>Basically the code is prepending a small div which updates when you resize your window.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2876990,
      "name": "Andi Giga",
      "reputation": 1099
    }
  },
  {
    "soID": 21763808,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/21763808",
    "title": null,
    "body": "<p><em>I play a role as a JavaScript teacher and the prototype concept has always been a controversial topic to cover when I teach. It took me a while to come up with a good method to clarify the concept, and now in this text I'm gonna be trying to explain How does JavaScript .prototype work.</em></p>\n\n<hr>\n\n<p>This is a very simple prototype based object model that would be considered as a sample during the explanation, with no comment yet:</p>\n\n<pre><code>function Person(name){\n    this.name = name;\n}\nPerson.prototype.getName = function(){\n    console.log(this.name);\n}\nvar person = new Person(\"George\");\n</code></pre>\n\n<hr>\n\n<p>There are some crucial points that we have to consider before going through the prototype concept.</p>\n\n<h1>1- How JavaScript functions actually work:</h1>\n\n<p>To take the first step we have to figure out, how JavaScript functions actually work , as a class like function using <strong><code>this</code></strong> keyword in it or just as a regular function with its arguments, what it does and what it returns.</p>\n\n<p>Let's say we want to create a <code>Person</code> object model. but in this step I'm gonna be trying to <strong>do the same exact thing without using <code>prototype</code> and <code>new</code> keyword</strong>.</p>\n\n<p>So in this step <strong><code>functions</code></strong>, <strong><code>objects</code></strong> and <strong><code>this</code></strong> keyword, are all we have.</p>\n\n<p>The first question would be <strong>how <code>this</code> keyword could be useful without using <code>new</code> keyword</strong>.</p>\n\n<p>So to answer that let's say we have an empty object, and two functions like:</p>\n\n<pre><code>var person = {};\nfunction Person(name){  this.name = name;  }\n\nfunction getName(){\n    console.log(this.name);\n}\n</code></pre>\n\n<p>and now <strong>without using <code>new</code> keyword</strong> how we could use these functions. So JavaScript has 3 different ways to do that:</p>\n\n<h2>a. first way is just to call the function as a regular function:</h2>\n\n<pre><code>Person(\"George\");\ngetName();//would print the \"George\" in the console\n</code></pre>\n\n<p>in this case, this would be the current context object, which is usually is the global  <code>window</code> object in the browser or <code>GLOBAL</code> in <code>Node.js</code>. It means we would have, window.name in browser or GLOBAL.name in Node.js, with \"George\" as its value.</p>\n\n<h2>b. We can <strong>attach</strong> them to an object, as its properties</h2>\n\n<p>-<strong>The easiest way</strong> to do this is modifying the empty <code>person</code> object, like:</p>\n\n<pre><code>person.Person = Person;\nperson.getName = getName;\n</code></pre>\n\n<p>this way we can call them like:</p>\n\n<pre><code>person.Person(\"George\");\nperson.getName();// --&gt;\"George\"\n</code></pre>\n\n<p>and now the <code>person</code> object is like:</p>\n\n<pre><code>Object {Person: function, getName: function, name: \"George\"}\n</code></pre>\n\n<hr>\n\n<p>-<strong>The other way to attach a property</strong> to an object is using the <code>prototype</code> of that object that can be find in any JavaScript object with the name of <code>__proto__</code>, and I have tried to explain it a bit on the summary part. So we could get the similar result by doing:</p>\n\n<pre><code>person.__proto__.Person = Person;\nperson.__proto__.getName = getName;\n</code></pre>\n\n<p><strong>But</strong> this way what we actually are doing is modifying the <code>Object.prototype</code>, because whenever we create a JavaScript object using literals (<code>{ ... }</code>), it gets created based on <code>Object.prototype</code>, which means it gets attached to the newly created object as an attribute named <strong><code>__proto__</code></strong> , so if we change it, as we have done on our previous code snippet, all the JavaScript objects would get changed, not a good practice. So what could be the better practice now:</p>\n\n<pre><code>person.__proto__ = {\n    Person: Person,\n    getName: getName\n};\n</code></pre>\n\n<p>and now other objects are in peace, but it still doesn't seem to be a good practice. So we have still one more solutions, but to use this solution we should get back to that line of code where <code>person</code> object got created (<code>var person = {};</code>) then change it like:</p>\n\n<pre><code>var propertiesObject = {\n    Person: Person,\n    getName: getName\n};\nvar person = Object.create(propertiesObject);\n</code></pre>\n\n<p>what it does is creating a new JavaScript <code>Object</code> and attach the <code>propertiesObject</code> to the <code>__proto__</code> attribute. So to make sure you can do:</p>\n\n<pre><code>console.log(person.__proto__===propertiesObject); //true\n</code></pre>\n\n<p>But the tricky point here is you have access to all the properties defined in <code>__proto__</code> on the first level of the <code>person</code> object(read the summary part for more detail).</p>\n\n<hr>\n\n<p>as you see using any of these two way <code>this</code> would exactly point to the <code>person</code> object.</p>\n\n<h2>c. JavaScript has another way to provide the function with <code>this</code>, which is using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\">call</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\">apply</a> to invoke the function.</h2>\n\n<blockquote>\n  <p>The apply() method calls a function with a given this value and\n  arguments provided as an array (or an array-like object).</p>\n</blockquote>\n\n<p>and</p>\n\n<blockquote>\n  <p>The call() method calls a function with a given this value and\n  arguments provided individually.</p>\n</blockquote>\n\n<p>this way which is my favorite, we can easily call our functions like:</p>\n\n<pre><code>Person.call(person, \"George\");\n</code></pre>\n\n<p>or</p>\n\n<pre><code>//apply is more useful when params count is not fixed\nPerson.apply(person, [\"George\"]);\n\ngetName.call(person);   \ngetName.apply(person);\n</code></pre>\n\n<p>these 3 methods are the important initial steps to figure out the .prototype functionality.</p>\n\n<hr>\n\n<h1>2- How does the <code>new</code> keyword works?</h1>\n\n<p>this is the second step to understand the <code>.prototype</code> functionality.this is what I use to simulate the process:</p>\n\n<pre><code>function Person(name){  this.name = name;  }\nmy_person_prototype = { getName: function(){ console.log(this.name); } };\n</code></pre>\n\n<p>in this part I'm gonna be trying to take all the steps which JavaScript takes, without using the <code>new</code> keyword and <code>prototype</code>, when you use <code>new</code> keyword. so when we do <code>new Person(\"George\")</code>, <code>Person</code> function serves as a constructor, These are what JavaScript does, one by one:</p>\n\n<h2>a. first of all it makes an empty object, basically an empty hash like:</h2>\n\n<pre><code>var newObject = {};\n</code></pre>\n\n<h2>b. the next step that JavaScript takes is to <strong>attach</strong> the all prototype objects to the newly created object</h2>\n\n<p>we have <code>my_person_prototype</code> here similar to the prototype object.</p>\n\n<pre><code>for(var key in my_person_prototype){\n    newObject[key] = my_person_prototype[key];\n}\n</code></pre>\n\n<p>It is not the way that JavaScript actually attaches the properties that are defined in the prototype. The actual way is related to the prototype chain concept.</p>\n\n<hr>\n\n<h2>a. &amp; b. Instead of these two steps you can have the exact same result by doing:</h2>\n\n<pre><code>var newObject = Object.create(my_person_prototype);\n//here you can check out the __proto__ attribute\nconsole.log(newObject.__proto__ === my_person_prototype); //true\n//and also check if you have access to your desired properties\nconsole.log(typeof newObject.getName);//\"function\"\n</code></pre>\n\n<p>now we can call the <code>getName</code> function in our <code>my_person_prototype</code>:</p>\n\n<pre><code>newObject.getName();\n</code></pre>\n\n<h2>c. then it gives that object to the constructor,</h2>\n\n<p>we can do this with our sample like:</p>\n\n<pre><code>Person.call(newObject, \"George\");\n</code></pre>\n\n<p>or</p>\n\n<pre><code>Person.apply(newObject, [\"George\"]);\n</code></pre>\n\n<p>then the constructor can do whatever it wants, because <strong>this</strong> inside of that constructor is the object that was just created.</p>\n\n<p>now the end result before simulating the other steps:\n    Object {name: \"George\"}</p>\n\n<hr>\n\n<h2>Summary:</h2>\n\n<p>Basically, when you use the <strong>new</strong> keyword on a function, you are calling on that and that function serves as a constructor, so when you say:</p>\n\n<pre><code>new FunctionName()\n</code></pre>\n\n<p>JavaScript internally makes an object, an empty hash and then it gives that object to the constructor, then the constructor can do whatever it wants, because <strong>this</strong> inside of that constructor is the object that was just created and then it gives you that object of course if you haven't used the return statement in your function or if you've put a <code>return undefined;</code> at the end of your function body.</p>\n\n<p>So when JavaScript goes to look up a property on an object, the first thing it does, is it looks it up on that object. And then there is a secret property <strong><code>[[prototype]]</code></strong> which we usually have it like <strong><code>__proto__</code></strong> and that property is what JavaScript looks at next. And when it looks through the <strong><code>__proto__</code></strong>, as far as it is again another JavaScript object, it has its own <strong><code>__proto__</code></strong> attribute, it goes up and up until it gets to the point where the next <strong><code>__proto__</code></strong> is null. The point is the only object in JavaScript that its <strong><code>__proto__</code></strong> attribute is null is <code>Object.prototype</code> object:</p>\n\n<pre><code>console.log(Object.prototype.__proto__===null);//true\n</code></pre>\n\n<p>and that's how inheritance works in JavaScript.</p>\n\n<p><img src=\"https://i.stack.imgur.com/JnpBV.png\" alt=\"The prototype chain\"></p>\n\n<p>In other words, when you have a prototype property on a function and you call a new on that, after JavaScript finishes looking at that newly created object for properties, it will go look at the function's <code>.prototype</code> and also it is possible that this object has its own internal prototype. and so on.</p>\n",
    "score": 140,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2877719,
      "name": "Mehran Hatami",
      "reputation": 7635
    }
  },
  {
    "soID": 19949820,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/19949820",
    "title": null,
    "body": "<p>If you want in pure JavaScript, you can use document.write.</p>\n\n<pre><code>document.write('&lt;script src=\"myscript.js\" type=\"text/javascript\"&gt;&lt;/script&gt;');\n</code></pre>\n\n<p>If you use the jQuery library, you can use the <a href=\"https://api.jquery.com/jquery.getscript/\" rel=\"noreferrer\">$.getScript method</a>.</p>\n\n<pre><code>$.getScript(\"another_script.js\");\n</code></pre>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2889843,
      "name": "Venu immadi",
      "reputation": 1104
    }
  },
  {
    "soID": 26140049,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/26140049",
    "title": null,
    "body": "<p><a href=\"http://rhaboo.org\" rel=\"nofollow\">http://rhaboo.org</a> is a localStorage sugar layer that lets you write things like this:</p>\n\n<pre><code>var store = Rhaboo.persistent('Some name');\nstore.write('count', store.count ? store.count+1 : 1);\nstore.write('somethingfancy', {\n  one: ['man', 'went'],\n  2: 'mow',\n  went: [  2, { mow: ['a', 'meadow' ] }, {}  ]\n});\nstore.somethingfancy.went[1].mow.write(1, 'lawn');\n</code></pre>\n\n<p>It doesn't use JSON.stringify/parse because that would be inaccurate and slow on big objects. Instead, each terminal value has its own localStorage entry.</p>\n\n<p>You can probably guess that I might have something to do with rhaboo ;-)</p>\n\n<p>Adrian.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2910747,
      "name": "Adrian May",
      "reputation": 1301
    }
  },
  {
    "soID": 20128022,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/20128022",
    "title": null,
    "body": "<p>Use:      </p>\n\n<pre><code>$(\"#parentDiv\").append(\"&lt;div id='childDiv'&gt;new div to be produced&lt;/div&gt;\");\n</code></pre>\n\n<p>I think it will help.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2917625,
      "name": "Johnfranklien",
      "reputation": 134
    }
  },
  {
    "soID": 42265700,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/42265700",
    "title": null,
    "body": "<p><strong>Here is best solutions:</strong></p>\n\n<p><strong>First Solution</strong> In CSS:</p>\n\n<pre><code>p:first-letter {\n    text-transform:capitalize;\n}\n</code></pre>\n\n<p><strong>Second solution</strong> :</p>\n\n<pre><code>function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\n</code></pre>\n\n<p>You could also add it to the <code>String.prototype</code> so you could chain it with other methods:</p>\n\n<pre><code>String.prototype.capitalizeFirstLetter = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1).toLowerCase();\n}\n</code></pre>\n\n<p>and use it like this:</p>\n\n<pre><code>'string'.capitalizeFirstLetter() // String\n</code></pre>\n\n<p><strong>Third Solution</strong>:</p>\n\n<pre><code>function ucFirstAllWords( str )\n{\n    var pieces = str.split(\" \");\n    for ( var i = 0; i &lt; pieces.length; i++ )\n    {\n        var j = pieces[i].charAt(0).toUpperCase();\n        pieces[i] = j + pieces[i].substr(1).toLowerCase();\n    }\n    return pieces.join(\" \");\n}\n</code></pre>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2919276,
      "name": "Kamil Ibadov",
      "reputation": 470
    }
  },
  {
    "soID": 42613248,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/42613248",
    "title": null,
    "body": "<p>Simple answer, works 100%</p>\n\n<pre><code>if (!String.prototype.contains) {\n  String.prototype.contains= function() {\n    return String.prototype.indexOf.apply(this, arguments) !== -1;\n  };\n}\n</code></pre>\n\n<p>some examples</p>\n\n<pre><code>\"hello\".contains(\"he\") // true\n\"hello world\".contains(\"lo w\")//true\n\"hello world\".contains(\"lo wa\")//false\n\"hello world\".contains(\" \")//true\n\"hello world\".contains(\"  \")//false\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 34093201,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/34093201",
    "title": null,
    "body": "<p>In JavaScript and jQuery we use this following code to redirect the page:</p>\n\n<pre><code>window.location.href=\"http://google.com\";\nwindow.location.replace(\"page1.html\");\n</code></pre>\n\n<p>But you can make a function in jQuery to redirect the page:</p>\n\n<pre><code>jQuery.fn.redirect=function(url)\n{\n    window.location.href=url;\n}\n</code></pre>\n\n<p>And call this function:</p>\n\n<pre><code>jQuery(window).redirect(\"http://stackoverflow.com/\")\n</code></pre>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2924013,
      "name": "Muhammad Waqas",
      "reputation": 1082
    }
  },
  {
    "soID": 27033710,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/27033710",
    "title": null,
    "body": "<p>Using JSON objects for local storage:</p>\n\n<p>//SET</p>\n\n<pre><code>var m={name:'Hero',Title:'developer'};\nlocalStorage.setItem('us', JSON.stringify(m));\n</code></pre>\n\n<p>//GET</p>\n\n<pre><code>var gm =JSON.parse(localStorage.getItem('us'));\nconsole.log(gm.name);\n</code></pre>\n\n<p>// Iteration of all local storage keys and values</p>\n\n<pre><code>for (var i = 0, len = localStorage.length; i &lt; len; ++i) {\n  console.log(localStorage.getItem(localStorage.key(i)));\n}\n</code></pre>\n\n<p>// DELETE</p>\n\n<pre><code>localStorage.removeItem('us');\ndelete window.localStorage[\"us\"];\n</code></pre>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2936264,
      "name": "Shujaath Khan",
      "reputation": 537
    }
  },
  {
    "soID": 34805157,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/34805157",
    "title": null,
    "body": "<pre><code>var url = \"http://yyy.com\";\n$(location).attr('href',url);\n</code></pre>\n\n<p>OR </p>\n\n<pre><code>window.location.replace(\"http://xxx.yyy.com\");\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2956998,
      "name": "AnasChavadi",
      "reputation": 166
    }
  },
  {
    "soID": 28848096,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/28848096",
    "title": null,
    "body": "<blockquote>\n  <p>This is not a fix for production or when application has to be shown to the client, this is only helpful when UI and Backend <strong>development</strong>  are on different <strong>servers</strong> and in production they are actually on same server. For example: While developing UI for any application if there is a need to test it locally pointing it to backend server, in that scenario this is the perfect fix. <strong><em>For production fix, CORS headers has to be added to the backend server to allow cross origin access.</em></strong></p>\n</blockquote>\n\n<p>The easy way is to just add the extension in google chrome to allow access using CORS.</p>\n\n<p>(<a href=\"https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en-US\">https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en-US</a>)</p>\n\n<p>Just enable this extension whenever you want allow access to no <strong>'access-control-allow-origin'</strong> header request.</p>\n\n<p><strong>Or</strong> </p>\n\n<p>In Windows, paste this command in <strong>run</strong> window </p>\n\n<pre><code>chrome.exe --user-data-dir=\"C:/Chrome dev session\" --disable-web-security\n</code></pre>\n\n<p>this will open a new <strong>chrome</strong> browser which allow access to no <strong>'access-control-allow-origin'</strong> header request.</p>\n",
    "score": 340,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2963297,
      "name": "shruti",
      "reputation": 3886
    }
  },
  {
    "soID": 30094430,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/30094430",
    "title": null,
    "body": "<pre><code>if (typeof EmpName != 'undefined' &amp;&amp; EmpName) {\n</code></pre>\n\n<p>will evaluate to true if value is not:</p>\n\n<ul>\n<li><p><strong>null</strong></p></li>\n<li><p><strong>undefined</strong></p></li>\n<li><p><strong>NaN</strong></p></li>\n<li><p><strong>empty string (\"\")</strong></p></li>\n<li><p><strong>0</strong></p></li>\n<li><p><strong>false</strong></p></li>\n</ul>\n\n<blockquote>\n  <p>Update:</p>\n</blockquote>\n\n<p>Checking <code>undefined</code> brings more confidence </p>\n",
    "score": 47,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2975952,
      "name": "Thamaraiselvam",
      "reputation": 2217
    }
  },
  {
    "soID": 21948020,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/21948020",
    "title": null,
    "body": "<p>If you can deal with <a href=\"http://en.wikipedia.org/wiki/JSON\" rel=\"noreferrer\">JSON</a> in return, then try using <a href=\"http://en.wikipedia.org/wiki/JSONP\" rel=\"noreferrer\">JSONP</a> (note the <strong>P</strong> at the end) for speaking between domains:</p>\n\n<pre><code>$.ajax({\n  type: \"POST\",\n  dataType: 'jsonp',\n  ...... etc ......\n</code></pre>\n\n<p>Learn more about working with JSONP <a href=\"https://learn.jquery.com/ajax/working-with-jsonp/\" rel=\"noreferrer\">here</a>:</p>\n\n<blockquote>\n  <p>The advent of JSONP — essentially a consensual cross-site scripting hack — has opened the door to powerful mashups of content. Many prominent sites provide JSONP services, allowing you access to their content via a predefined API.</p>\n</blockquote>\n",
    "score": 273,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2980938,
      "name": "Gavin",
      "reputation": 3105
    }
  },
  {
    "soID": 21181015,
    "parentID": 901115,
    "url": "https://stackoverflow.com/q/21181015",
    "title": null,
    "body": "<p>Doing this reliably is more involved than one may think at first.</p>\n\n<ol>\n<li><code>location.search</code>, which is used in other answers, is brittle and\nshould be avoided - for example, it returns empty if someone screws\nup and puts a <code>#fragment</code> identifier before the <code>?query</code> string.</li>\n<li>There are a number of ways URLs get automatically escaped in the\nbrowser, which makes <code>decodeURIComponent</code> pretty much mandatory, in\nmy opinion.</li>\n<li>Many query strings are generated from user input, which means\nassumptions about the URL content are very bad. Including very basic\nthings like that each key is unique or even has a value.</li>\n</ol>\n\n<p>To solve this, here is a configurable API with a healthy dose of <a href=\"http://en.wikipedia.org/wiki/Defensive_programming\" rel=\"nofollow\" title=\"Wiki article on programming with less assumptions.\">defensive programming</a>. Note that it can be made half the size if you are willing to hardcode some of the variables, or if the input can never include <code>hasOwnProperty</code>, etc.</p>\n\n<p><strong>Version 1:</strong> Returns a data object with names and values for each parameter. It effectively de-duplicates them and always respects the first one found from left-to-right.</p>\n\n<pre><code>function getQueryData(url, paramKey, pairKey, missingValue, decode) {\n\n    var query, queryStart, fragStart, pairKeyStart, i, len, name, value, result;\n\n    if (!url || typeof url !== 'string') {\n        url = location.href; // more robust than location.search, which is flaky\n    }\n    if (!paramKey || typeof paramKey !== 'string') {\n        paramKey = '&amp;';\n    }\n    if (!pairKey || typeof pairKey !== 'string') {\n        pairKey = '=';\n    }\n    // when you do not explicitly tell the API...\n    if (arguments.length &lt; 5) {\n        // it will unescape parameter keys and values by default...\n        decode = true;\n    }\n\n    queryStart = url.indexOf('?');\n    if (queryStart &gt;= 0) {\n        // grab everything after the very first ? question mark...\n        query = url.substring(queryStart + 1);\n    } else {\n        // assume the input is already parameter data...\n        query = url;\n    }\n    // remove fragment identifiers...\n    fragStart = query.indexOf('#');\n    if (fragStart &gt;= 0) {\n        // remove everything after the first # hash mark...\n        query = query.substring(0, fragStart);\n    }\n    // make sure at this point we have enough material to do something useful...\n    if (query.indexOf(paramKey) &gt;= 0 || query.indexOf(pairKey) &gt;= 0) {\n        // we no longer need the whole query, so get the parameters...\n        query = query.split(paramKey);\n        result = {};\n        // loop through the parameters...\n        for (i = 0, len = query.length; i &lt; len; i = i + 1) {\n            pairKeyStart = query[i].indexOf(pairKey);\n            if (pairKeyStart &gt;= 0) {\n                name = query[i].substring(0, pairKeyStart);\n            } else {\n                name = query[i];\n            }\n            // only continue for non-empty names that we have not seen before...\n            if (name &amp;&amp; !Object.prototype.hasOwnProperty.call(result, name)) {\n                if (decode) {\n                    // unescape characters with special meaning like ? and #\n                    name = decodeURIComponent(name);\n                }\n                if (pairKeyStart &gt;= 0) {\n                    value = query[i].substring(pairKeyStart + 1);\n                    if (value) {\n                        if (decode) {\n                            value = decodeURIComponent(value);\n                        }\n                    } else {\n                        value = missingValue;\n                    }\n                } else {\n                    value = missingValue;\n                }\n                result[name] = value;\n            }\n        }\n        return result;\n    }\n}\n</code></pre>\n\n<p><strong>Version 2:</strong> Returns a data map object with two identical length arrays, one for names and one for values, with an index for each parameter. This one supports duplicate names and intentionally does not de-duplicate them, because that is probably why you would want to use this format.</p>\n\n<pre><code>function getQueryData(url, paramKey, pairKey, missingValue, decode) {\n\n   var query, queryStart, fragStart, pairKeyStart, i, len, name, value, result;\n\n   if (!url || typeof url !== 'string') {\n       url = location.href; // more robust than location.search, which is flaky\n   }\n   if (!paramKey || typeof paramKey !== 'string') {\n       paramKey = '&amp;';\n   }\n   if (!pairKey || typeof pairKey !== 'string') {\n       pairKey = '=';\n   }\n   // when you do not explicitly tell the API...\n   if (arguments.length &lt; 5) {\n       // it will unescape parameter keys and values by default...\n       decode = true;\n   }\n\n   queryStart = url.indexOf('?');\n   if (queryStart &gt;= 0) {\n       // grab everything after the very first ? question mark...\n       query = url.substring(queryStart + 1);\n   } else {\n       // assume the input is already parameter data...\n       query = url;\n   }\n   // remove fragment identifiers...\n   fragStart = query.indexOf('#');\n   if (fragStart &gt;= 0) {\n       // remove everything after the first # hash mark...\n       query = query.substring(0, fragStart);\n   }\n   // make sure at this point we have enough material to do something useful...\n   if (query.indexOf(paramKey) &gt;= 0 || query.indexOf(pairKey) &gt;= 0) {\n       // we no longer need the whole query, so get the parameters...\n       query = query.split(paramKey);\n       result = {\n           names: [],\n           values: []\n       };\n       // loop through the parameters...\n       for (i = 0, len = query.length; i &lt; len; i = i + 1) {\n           pairKeyStart = query[i].indexOf(pairKey);\n           if (pairKeyStart &gt;= 0) {\n               name = query[i].substring(0, pairKeyStart);\n           } else {\n               name = query[i];\n           }\n           // only continue for non-empty names...\n           if (name) {\n               if (decode) {\n                   // unescape characters with special meaning like ? and #\n                   name = decodeURIComponent(name);\n               }\n               if (pairKeyStart &gt;= 0) {\n                   value = query[i].substring(pairKeyStart + 1);\n                   if (value) {\n                       if (decode) {\n                           value = decodeURIComponent(value);\n                       }\n                   } else {\n                       value = missingValue;\n                   }\n               } else {\n                   value = missingValue;\n               }\n               result.names.push(name);\n               result.values.push(value);\n           }\n       }\n       return result;\n   }\n</code></pre>\n\n<p>}</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 39280209,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/39280209",
    "title": null,
    "body": "<p>Considering ES6 I'd like to add my own spoon of sugar and provide one more approach to iterate over object's properties.</p>\n\n<p>Since plain JS object isn't <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Iteration_protocols\" rel=\"nofollow\">iterable</a> just out of box, we aren't able to use <code>for..of</code> loop for iterating over its content. But no one can stop us <strong>to make it iterable</strong>.</p>\n\n<p>Let's we have <code>book</code> object.</p>\n\n<pre><code>let book = {\n  title: \"Amazing book\",\n  author: \"Me\",\n  pages: 3\n}\n\nbook[Symbol.iterator] = function(){\n\n  let properties = Object.keys(this); // returns an array with property names\n  let counter = 0;\n  let isDone = false;\n\n  let next = () =&gt; {\n    if(counter &gt;= properties.length){\n      isDone = true;\n    }\n    return { done: isDone, value: this[properties[counter++]] }\n  }\n\n  return { next };\n}\n</code></pre>\n\n<p>Since we've made it we can use it this way:</p>\n\n<pre><code>for(let pValue of book){\n  console.log(pValue);\n}\n------------------------\nAmazing book\nMe\n3\n</code></pre>\n\n<p>Or if you know the power of ES6 <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/function*\" rel=\"nofollow\">generators</a>, so you certainly can make the code above much shorter.</p>\n\n<pre><code>book[Symbol.iterator] = function *(){\n\n  let properties = Object.keys(this);\n  for (let p of properties){\n    yield this[p];\n  }\n\n}\n</code></pre>\n\n<p>Sure, you can apply such behavior for all objects with making <code>Object</code> iterable on <code>prototype</code> level.</p>\n\n<pre><code>Object.prototype[Symbol.iterator] = function() {...}\n</code></pre>\n\n<p>Also, objects that comply with the iterable protocol can be used with the new ES2015 feature <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator\" rel=\"nofollow\">spread</a> operator thus we can read object property values as an array.</p>\n\n<pre><code>let pValues = [...book];\nconsole.log(pValues);\n-------------------------\n[\"Amazing book\", \"Me\", 3]\n</code></pre>\n\n<p>Or you can use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" rel=\"nofollow\">destructuring</a> assignment:</p>\n\n<pre><code>let [title, , pages] = book; // notice that we can just skip unnecessary values\nconsole.log(title);\nconsole.log(pages);\n------------------\nAmazing book\n3\n</code></pre>\n\n<p>You can check out <a href=\"http://www.es6fiddle.net/isksh68n/\" rel=\"nofollow\"><strong>JSFiddle</strong></a> with all code I've provided above.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3006185,
      "name": "Artyom Pranovich",
      "reputation": 4151
    }
  },
  {
    "soID": 39521601,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/39521601",
    "title": null,
    "body": "<p>If there's <code>Lodash</code> in your project, use <code>upperFirst</code>.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3010879,
      "name": "medik",
      "reputation": 310
    }
  },
  {
    "soID": 34839890,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/34839890",
    "title": null,
    "body": "<ul>\n<li><p><del><strong>Variable Not Hoisting</strong></del></p>\n\n<p><del><code>let</code> will <strong>not hoist</strong> to the entire scope of the block they appear in. By contrast, <code>var</code> could hoist as below.</del></p>\n\n<pre><code>{\n   console.log(cc); // undefined. Caused by hoisting\n   var cc = 23;\n}\n\n{\n   console.log(bb); // ReferenceError: bb is not defined\n   let bb = 23;\n}\n</code></pre>\n\n<p>Actually, Per @Bergi, <a href=\"https://stackoverflow.com/questions/31219420/are-variables-declared-with-let-or-const-not-hoisted-in-es6\">Both <code>var</code> and <code>let</code> are hoisted</a>.</p></li>\n<li><p><strong>Garbage Collection</strong></p>\n\n<p>Block scope of <code>let</code> is useful relates to closures and garbage collection to reclaim memory. Consider,</p>\n\n<pre><code>function process(data) {\n    //...\n}\n\nvar hugeData = { .. };\n\nprocess(hugeData);\n\nvar btn = document.getElementById(\"mybutton\");\nbtn.addEventListener( \"click\", function click(evt){\n    //....\n});\n</code></pre>\n\n<p>The <code>click</code> handler callback does not need the <code>hugeData</code> variable at all. Theoretically, after <code>process(..)</code> runs, the huge data structure <code>hugeData</code> could be garbage collected. However, it's possible that some JS engine will still have to keep this huge structure, since the <code>click</code> function has a closure over the entire scope.</p>\n\n<p>However, the block scope can make this huge data structure to garbage collected.</p>\n\n<pre><code>function process(data) {\n    //...\n}\n\n{ // anything declared inside this block can be garbage collected\n    let hugeData = { .. };\n    process(hugeData);\n}\n\nvar btn = document.getElementById(\"mybutton\");\nbtn.addEventListener( \"click\", function click(evt){\n    //....\n});\n</code></pre></li>\n<li><p><strong><code>let</code> loops</strong></p>\n\n<p><code>let</code> in the loop can <strong>re-binds it</strong> to each iteration of the loop, making sure to re-assign it the value from the end of the previous loop iteration. Consider,</p>\n\n<pre><code>// print '5' 5 times\nfor (var i = 0; i &lt; 5; ++i) {\n    setTimeout(function () {\n        console.log(i);\n    }, 1000);  \n}\n</code></pre>\n\n<p>However, replace <code>var</code> with <code>let</code></p>\n\n<pre><code>// print 1, 2, 3, 4, 5. now\nfor (let i = 0; i &lt; 5; ++i) {\n    setTimeout(function () {\n        console.log(i);\n    }, 1000);  \n}\n</code></pre>\n\n<p>Because <code>let</code> create a new lexical environment with those names for a) the initialiser expression b) each iteration (previosly to evaluating the increment expression), more details are <a href=\"https://stackoverflow.com/a/30900289/3011380\">here</a>.</p></li>\n</ul>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3011380,
      "name": "zangw",
      "reputation": 16185
    }
  },
  {
    "soID": 35986556,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/35986556",
    "title": null,
    "body": "<p><strong>If you are using Jquery > 1.4, you are best of with  <a href=\"https://stackoverflow.com/a/4158203/3025256\">Ian's answer</a>. Otherwise, I would use this method:</strong></p>\n\n<p>This is very similar to <a href=\"https://stackoverflow.com/a/6976126/3025256\">celoron's answer</a>, but  I don't know why they used <code>document.createElement</code> instead of Jquery notation. </p>\n\n<pre><code>$(\"body\").append(function(){\n        return $(\"&lt;div/&gt;\").html(\"I'm a freshly created div. I also contain some Ps!\")\n            .attr(\"id\",\"myDivId\")\n            .addClass(\"myDivClass\")\n            .css(\"border\", \"solid\")                 \n            .append($(\"&lt;p/&gt;\").html(\"I think, therefore I am.\"))\n            .append($(\"&lt;p/&gt;\").html(\"The die is cast.\"))\n});\n\n//Some style, for better demonstration if you want to try it out. Don't use this approach for actual design and layout!\n$(\"body\").append($(\"&lt;style/&gt;\").html(\"p{background-color:blue;}div{background-color:yellow;}div&gt;p{color:white;}\"));\n</code></pre>\n\n<p>I also think using <code>append()</code> with a callback function is in this case more readable, because you now immediately that something is going to be appended to the body. But that is a matter of taste, as always when writing any code or text.</p>\n\n<p>In general, use as less HTML as possible in JQuery code, since this is mostly spaghetti code. It is error prone and hard to maintain, because the HTML-String can easily contain typos. Also, it mixes a markup language (HTML) with a programming language (Javascript/Jquery), which is usually a bad Idea.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3025256,
      "name": "nst1nctz",
      "reputation": 97
    }
  },
  {
    "soID": 39789410,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/39789410",
    "title": null,
    "body": "<p>What about this solution?</p>\n\n<pre><code>$(\"#txtAge\")[\n    $(\"#isAgeSelected\").is(':checked') ?\n    'show' :\n    'hide'\n]();\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23567004,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/23567004",
    "title": null,
    "body": "<p>Well, how about this:</p>\n\n<pre><code>for (var key in myStringArray) {\n    console.log(myStringArray[key]);\n}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3045515,
      "name": "Sambhav Sharma",
      "reputation": 3024
    }
  },
  {
    "soID": 45366849,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/45366849",
    "title": null,
    "body": "<p>If you are using lodash library, you can use the round method of lodash like following.</p>\n\n<pre><code>_.round(number, precision)\n</code></pre>\n\n<p>Eg: </p>\n\n<pre><code>_.round(1.7777777, 2) = 1.78\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3058674,
      "name": "Madura Pradeep",
      "reputation": 435
    }
  },
  {
    "soID": 21494690,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/21494690",
    "title": null,
    "body": "<pre><code>$(\"#dropdownID\").change(function(){\n  alert($('option:selected', $(this)).text());\n});\n</code></pre>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3058754,
      "name": "Nikhil Butani",
      "reputation": 1834
    }
  },
  {
    "soID": 39199943,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/39199943",
    "title": null,
    "body": "<p>You can use:</p>\n\n<pre><code>window.location.replace(\"http://www.example.com/\");\n</code></pre>\n\n<p>The <code>replace()</code> method does not save the originating page in the session history, so the user can't go back using the back button and again get redirected. NOTE: The browser back button will be deactivated in this case.</p>\n\n<p>However, if you want an effect the same as clicking on a link you should go for:</p>\n\n<pre><code>window.location.href = \"http://www.example.com/\";\n</code></pre>\n\n<p>In this case, the browser back button will be active.</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3069039,
      "name": "madhur",
      "reputation": 377
    }
  },
  {
    "soID": 44278722,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/44278722",
    "title": null,
    "body": "<p>This is a very old question, but I still think the best/safe way to test these 2 conditions are to cast the value to string:</p>\n\n<pre><code>var EmpName = $(\"div#esd-names div#name\").attr('class');\n\n// Undefined check\nif (Object.prototype.toString.call(EmpName) === '[object Undefined]'){\n    // do something with your code\n}\n\n// Nullcheck\nif (Object.prototype.toString.call(EmpName) === '[object Null]'){\n    // do something with your code\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3070830,
      "name": "n1kkou",
      "reputation": 2325
    }
  },
  {
    "soID": 38795991,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/38795991",
    "title": null,
    "body": "<p>Use deepcopy from npm.  Works in both the browser and in node as an npm module...</p>\n\n<p><a href=\"https://www.npmjs.com/package/deepcopy\" rel=\"nofollow\">https://www.npmjs.com/package/deepcopy</a></p>\n\n<p>let a = deepcopy(b)</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31106445,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/31106445",
    "title": null,
    "body": "<p>I Just enhanced <a href=\"https://stackoverflow.com/users/300011\">Ege Özcan</a>'s dynamic sort to dive deep inside objects. \nIf Data looks like this: </p>\n\n<pre><code>obj = [\n    {\n        a: { a: 1, b: 2, c: 3 },\n        b: { a: 4, b: 5, c: 6 }\n    },\n    { \n        a: { a: 3, b: 2, c: 1 },\n        b: { a: 6, b: 5, c: 4 }\n}];\n</code></pre>\n\n<p>and if you want to sort it over <strong>a.a</strong> property I think my enhancement helps very well. I add new functionality to objects like this:</p>\n\n<pre><code>Object.defineProperty(Object.prototype, 'deepVal', {\n    enumerable: false,\n    writable: true,\n    value: function (propertyChain) {\n        var levels = propertyChain.split('.');\n        parent = this;\n        for (var i = 0; i &lt; levels.length; i++) {\n            if (!parent[levels[i]])\n                return undefined;\n            parent = parent[levels[i]];\n        }\n        return parent;\n    }\n});\n</code></pre>\n\n<p>and changed <strong>_dynamicSort</strong>'s <em>return</em> function:</p>\n\n<pre><code>return function (a,b) {\n        var result = ((a.deepVal(property) &gt; b.deepVal(property)) - (a.deepVal(property) &lt; b.deepVal(property)));\n        return result * sortOrder;\n    }\n</code></pre>\n\n<p>And now you can sort by <strong>a.a.</strong> this way:</p>\n\n<pre><code>obj.sortBy('a.a');\n</code></pre>\n\n<p>See Commplete script in <a href=\"http://jsfiddle.net/Gigapedia/ofd0a1nd/1/\" rel=\"nofollow noreferrer\">JSFiddle</a></p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3078890,
      "name": "Morteza Tourani",
      "reputation": 2302
    }
  },
  {
    "soID": 22086603,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/22086603",
    "title": null,
    "body": "<p>Fundamental difference is that <code>call()</code> accepts an <strong><em>argument list</em></strong>, while <code>apply()</code> accepts a <strong><em>single array of arguments</em></strong>.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3129183,
      "name": "Rakesh Kumar",
      "reputation": 2120
    }
  },
  {
    "soID": 29631160,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/29631160",
    "title": null,
    "body": "<p>This function is alternative and stable:</p>\n\n<pre><code>$('#isAgeSelected').context.checked\n(return True/False)\n</code></pre>\n\n<p><strong><em>Example:</em></strong> </p>\n\n<pre><code>if($('#isAgeSelected').context.checked){ //if Checkbox is checked then bla bla..\n    /*.....*/\n}else{\n    /*.....*/\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28441092,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/28441092",
    "title": null,
    "body": "<p>Here some extented version of the code posted by @danott</p>\n\n<p>It'll also implement <strong>delete</strong> value from localstorage \nand shows how to adds a Getter and Setter layer so instead of</p>\n\n<p><code>localstorage.setItem(preview, true)</code> </p>\n\n<p>you can write</p>\n\n<p><code>config.preview = true</code></p>\n\n<p>Okay here were go:</p>\n\n<pre><code>var PT=Storage.prototype\n\nif (typeof PT._setItem &gt;='u') PT._setItem = PT.setItem;\nPT.setItem = function(key, value)\n{\n  if (typeof value &gt;='u')//..ndefined\n    this.removeItem(key)\n  else\n    this._setItem(key, JSON.stringify(value));\n}\n\nif (typeof PT._getItem &gt;='u') PT._getItem = PT.getItem;\nPT.getItem = function(key)\n{  \n  var ItemData = this._getItem(key)\n  try\n  {\n    return JSON.parse(ItemData);\n  }\n  catch(e)\n  {\n    return ItemData;\n  }\n}\n\n// Aliases for localStorage.set/getItem \nget =   localStorage.getItem.bind(localStorage)\nset =   localStorage.setItem.bind(localStorage)\n\n// Create ConfigWrapperObject\nvar config = {}\n\n// Helper to create getter &amp; setter\nfunction configCreate(PropToAdd){\n    Object.defineProperty( config, PropToAdd, {\n      get: function ()      { return (  get(PropToAdd)      ) },\n      set: function (val)   {           set(PropToAdd,  val ) }\n    })\n}\n//------------------------------\n\n// Usage Part\n// Create properties\nconfigCreate('preview')\nconfigCreate('notification')\n//...\n\n// Config Data transfer\n//set\nconfig.preview = true\n\n//get\nconfig.preview\n\n// delete\nconfig.preview = undefined\n</code></pre>\n\n<p>Well you may strip the aliases part with <code>.bind(...)</code>. However I just put it in since it's really good to know about this. I tooked me hours to find out why a simple <code>get = localStorage.getItem;</code> don't work</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3135511,
      "name": "Nadu",
      "reputation": 981
    }
  },
  {
    "soID": 22909754,
    "parentID": 1414365,
    "url": "https://stackoverflow.com/q/22909754",
    "title": null,
    "body": "<pre><code>    // Disable #x\n    $( \"#x\" ).prop( \"disabled\", true );\n    // Enable #x\n    $( \"#x\" ).prop( \"disabled\", false );\n</code></pre>\n\n<p>Sometimes you need to disable/enable the form element like input or textarea. Jquery helps you to easily make this with setting disabled attribute to \"disabled\".\nFor e.g.:</p>\n\n<pre><code>  //To disable \n  $('.someElement').attr('disabled', 'disabled');\n</code></pre>\n\n<p>To enable disabled element you need to remove \"disabled\" attribute from this element or empty it's string. For e.g:</p>\n\n<pre><code>//To enable \n$('.someElement').removeAttr('disabled');\n\n// OR you can set attr to \"\" \n$('.someElement').attr('disabled', '');\n</code></pre>\n\n<p>refer :<a href=\"http://garmoncheg.blogspot.fr/2011/07/how-to-disableenable-element-with.html\">http://garmoncheg.blogspot.fr/2011/07/how-to-disableenable-element-with.html</a></p>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3140311,
      "name": "Harini Sekar",
      "reputation": 430
    }
  },
  {
    "soID": 26492235,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/26492235",
    "title": null,
    "body": "<p>One can use <code>.toFixed(NumberOfDecimalPlaces)</code>.</p>\n\n<pre><code>var str = 10.234.toFixed(2); // =&gt; '10.23'\nvar number = Number(str); // =&gt; 10.23\n</code></pre>\n",
    "score": 61,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3149904,
      "name": "Gourav Singla",
      "reputation": 938
    }
  },
  {
    "soID": 35408958,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/35408958",
    "title": null,
    "body": "<p>You can simply use below method</p>\n\n<pre><code>/**\n * Replace all the occerencess of $find by $replace in $originalString\n * @param  {originalString} input - Raw string.\n * @param  {find} input - Target key word or regex that need to be replaced.\n * @param  {replace} input - Replacement key word\n * @return {String}       Output string\n */\nfunction replaceAll(originalString, find, replace) {\n  return originalString.replace(new RegExp(find, 'g'), replace);\n};\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3168721,
      "name": "thusharaK",
      "reputation": 3949
    }
  },
  {
    "soID": 20979806,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/20979806",
    "title": null,
    "body": "<p>Try this:</p>\n\n<pre><code>String.prototype.replaceAll = function (sfind, sreplace) {\n    var str = this;\n\n    while (str.indexOf(sfind) &gt; -1) {\n        str = str.replace(sfind, sreplace);\n    }\n\n    return str;\n};\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3170475,
      "name": "Antonio Mirarchi",
      "reputation": 19
    }
  },
  {
    "soID": 43793027,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/43793027",
    "title": null,
    "body": "<pre><code>$(function () {\n// Someone has clicked one of the radio buttons\nvar myform= 'form.myform';\n$(myform).click(function () {\n    var radValue= \"\";\n    $(this).find('input[type=radio]:checked').each(function () {\n        radValue= $(this).val();\n    });\n  })\n});\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3175526,
      "name": "JoshYates1980",
      "reputation": 1455
    }
  },
  {
    "soID": 21396837,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/21396837",
    "title": null,
    "body": "<p>Use:</p>\n\n<pre><code>// window.location\nwindow.location.replace('http://www.example.com')\nwindow.location.assign('http://www.example.com')\nwindow.location.href = 'http://www.example.com'\ndocument.location.href = '/path'\n\n// window.history\nwindow.history.back()\nwindow.history.go(-1)\n\n// window.navigate; ONLY for old versions of Internet Explorer\nwindow.navigate('top.jsp')\n\n\n// Probably no bueno\nself.location = 'http://www.example.com';\ntop.location = 'http://www.example.com';\n\n// jQuery\n$(location).attr('href','http://www.example.com')\n$(window).attr('location','http://www.example.com')\n$(location).prop('href', 'http://www.example.com')\n</code></pre>\n",
    "score": 270,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3196723,
      "name": "Govind Singh",
      "reputation": 8279
    }
  },
  {
    "soID": 38278742,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/38278742",
    "title": null,
    "body": "<pre><code>// Sort Array of Objects\n\n// Data\nvar booksArray = [\n    { first_nom: 'Lazslo', last_nom: 'Jamf'     },\n    { first_nom: 'Pig',    last_nom: 'Bodine'   },\n    { first_nom: 'Pirate', last_nom: 'Prentice' }\n];\n\n// Property to Sort By\nvar args = \"last_nom\";\n\n// Function to Sort the Data by given Property\nfunction sortByProperty(property) {\n    return function (a, b) {\n        var sortStatus = 0,\n            aProp = a[property].toLowerCase(),\n            bProp = b[property].toLowerCase();\n        if (aProp &lt; bProp) {\n            sortStatus = -1;\n        } else if (aProp &gt; bProp) {\n            sortStatus = 1;\n        }\n        return sortStatus;\n    };\n}\n\n// Implementation\nvar sortedArray = booksArray.sort(sortByProperty(args));\n\nconsole.log(\"sortedArray: \" + JSON.stringify(sortedArray) );\n</code></pre>\n\n<p>Console log output:</p>\n\n<pre><code>\"sortedArray: \n[{\"first_nom\":\"Pig\",\"last_nom\":\"Bodine\"},\n{\"first_nom\":\"Lazslo\",\"last_nom\":\"Jamf\"},\n{\"first_nom\":\"Pirate\",\"last_nom\":\"Prentice\"}]\"\n</code></pre>\n\n<p>Adapted based on this source: <a href=\"http://www.levihackwith.com/code-snippet-how-to-sort-an-array-of-json-objects-by-property/\" rel=\"nofollow\">http://www.levihackwith.com/code-snippet-how-to-sort-an-array-of-json-objects-by-property/</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3208553,
      "name": "Luke Schoen",
      "reputation": 845
    }
  },
  {
    "soID": 30899649,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/30899649",
    "title": null,
    "body": "<p>If you want to capitalize <strong>every</strong> first letter in a string, for example <code>hello to the world</code>becomes <code>Hello To The World</code> you can use the following (repurposed from Steve Harrison):</p>\n\n<pre><code>function capitalizeEveryFirstLetter(string) {\n    var splitStr = string.split(' ')\n    var fullStr = '';\n\n    $.each(splitStr,function(index){\n        var currentSplit = splitStr[index].charAt(0).toUpperCase() + splitStr[index].slice(1);\n        fullStr += currentSplit + \" \"\n    });\n\n    return fullStr;\n}\n</code></pre>\n\n<p>Which you can call by using the following:</p>\n\n<pre><code>capitalizeFirstLetter(\"hello to the world\");\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3216297,
      "name": "maudulus",
      "reputation": 3736
    }
  },
  {
    "soID": 26355361,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/26355361",
    "title": null,
    "body": "<p>There are many ways to check if a checkbox is checked or not:</p>\n\n<p>Way to check using jQuery</p>\n\n<pre><code>if (elem.checked)\nif ($(elem).prop(\"checked\"))\nif ($(elem).is(\":checked\"))\nif ($(elem).attr('checked'))\n</code></pre>\n\n<p>Check example or also document:</p>\n\n<ul>\n<li><p><a href=\"http://api.jquery.com/attr/\" rel=\"noreferrer\">http://api.jquery.com/attr/</a></p></li>\n<li><p><a href=\"http://api.jquery.com/prop/\" rel=\"noreferrer\">http://api.jquery.com/prop/</a></p></li>\n</ul>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 39145344,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/39145344",
    "title": null,
    "body": "<pre><code>var capitalized = yourstring[0].toUpperCase() + yourstring.substr(1);\n</code></pre>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3235127,
      "name": "zianwar",
      "reputation": 991
    }
  },
  {
    "soID": 33730389,
    "parentID": 894860,
    "url": "https://stackoverflow.com/q/33730389",
    "title": null,
    "body": "<p>Just use an explicit comparison with undefined.</p>\n\n<pre><code>function read_file(file, delete_after)\n{\n    if(delete_after === undefined) { delete_after = false; }\n}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3238613,
      "name": "Martin Wantke",
      "reputation": 800
    }
  },
  {
    "soID": 44996456,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/44996456",
    "title": null,
    "body": "<p>you can use this code</p>\n\n<pre><code>//like HTTP redirect\nlocation.replace(\"http://itten.ir\");\n</code></pre>\n\n<p>or</p>\n\n<pre><code>//like link behavior\nlocation.href = \"http://itten.ir\";\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3243488,
      "name": "Behnam Mohammadi",
      "reputation": 4365
    }
  },
  {
    "soID": 44996490,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/44996490",
    "title": null,
    "body": "<p>Very simple:</p>\n\n<pre><code>var a = \"foo\", b= \"oo\";\nif (a.indexOf(substring) !== -1) {\n    // has\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 31311974,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/31311974",
    "title": null,
    "body": "<p>I would do this rather than checking <code>obj.hasOwnerProperty</code> within every <code>for ... in</code> loop.</p>\n\n<pre><code>var obj = {a : 1};\nfor(var key in obj){\n    //obj.hasOwnProperty(key) is not needed.\n    console.log(key);\n}\n//then check if anybody has messed the native object. Put this code at the end of the page.\nfor(var key in Object){\n    throw new Error(\"Please don't extend the native object\");\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3247703,
      "name": "Tresdin",
      "reputation": 6010
    }
  },
  {
    "soID": 21440624,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/21440624",
    "title": null,
    "body": "<p><code>A.splice(0);</code></p>\n\n<p>I just did this on some code I am working on.  It cleared the array.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3250394,
      "name": "David Campbell",
      "reputation": 81
    }
  },
  {
    "soID": 28860599,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/28860599",
    "title": null,
    "body": "<p>jQuery check element not null</p>\n\n<pre><code>var dvElement = $('#dvElement');\n\nif (dvElement.length  &gt; 0) {\n    //do something\n}\nelse{\n    //else do something else\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3262814,
      "name": "Kapil",
      "reputation": 135
    }
  },
  {
    "soID": 37810362,
    "parentID": 1414365,
    "url": "https://stackoverflow.com/q/37810362",
    "title": null,
    "body": "<p>In Jquery mobile.</p>\n\n<p>For Disable</p>\n\n<pre><code>    $('#someselectElement').selectmenu().selectmenu('disable').selectmenu('refresh', true);\n    $('#someTextElement').textinput().textinput('disable');\n</code></pre>\n\n<p>For Enable</p>\n\n<pre><code>    $('#someselectElement').selectmenu().selectmenu('enable').selectmenu('refresh', true);\n    $('#someTextElement').textinput('enable');\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3265367,
      "name": "Atif Hussain",
      "reputation": 194
    }
  },
  {
    "soID": 23558996,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/23558996",
    "title": null,
    "body": "<p>Use:</p>\n\n<pre><code>location.href = \"http://google.com\";\n</code></pre>\n\n<p>No need to write <code>window</code>. It's optional.</p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3274503,
      "name": "Hitesh Modha",
      "reputation": 1463
    }
  },
  {
    "soID": 38247174,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/38247174",
    "title": null,
    "body": "<p>Here's what I use, it's fast and covers all bases I think; works for everything except IE&lt;9.</p>\n\n<pre><code>(() =&gt; { function fn() {\n    // \"On document ready\" commands:\n    console.log(document.readyState);\n};  \n  if (document.readyState != 'loading') {fn()}\n  else {document.addEventListener('DOMContentLoaded', fn)}\n})();\n</code></pre>\n\n<p>This seems to catch all cases:</p>\n\n<ul>\n<li>fires immediately if the DOM is already ready (if the DOM is not \"loading\",    but either \"interactive\" or \"complete\")</li>\n<li>if  the DOM is still loading, it sets up an event listener for when the DOM\nis available (interactive).</li>\n</ul>\n\n<p>The DOMContentLoaded event is available in IE9 and everything else, so I personally think it's OK to use this. Rewrite the arrow function declaration to a regular anonymous function if you're not transpiling your code from ES2015  to ES5.</p>\n\n<p>If you want to wait until all assets are loaded, all images displayed etc then use window.onload instead.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3278654,
      "name": "Olemak",
      "reputation": 715
    }
  },
  {
    "soID": 25961486,
    "parentID": 14994391,
    "url": "https://stackoverflow.com/q/25961486",
    "title": null,
    "body": "<p><strong>AngularJS and jQuery:</strong></p>\n\n<p>AngularJs and JQuery are completely different at every level except the JQLite functionality and you will see it once you start learning the AngularJs core features (I explained it below).</p>\n\n<p>AngularJs is a client side framework that offers to build the independent client side application. JQuery is a client side library that play around the DOM.</p>\n\n<p>AngularJs Cool Principle - If you want some changes on your UI think from model data change perspective. Change your data and UI will re-render itself. You need not to play around DOM each time unless and until it is hardly required and that should also be handled through Angular Directives.</p>\n\n<p>To answer this question, I want to share my experience on the first enterprise application with AngularJS. These are the most awesome features that Angular provide where we start changing our jQuery mindset and we get the Angular like a framework and not the library.</p>\n\n<p><strong>Two-way data binding is amazing:</strong> \nI had a grid with all functionality UPDATE, DELTE, INSERT. I have a data object that binds the grid's model using ng-repeat. You only need to write a single line of simple JavaScript code for delete and insert and that's it. grid automatically updates as the grid model changes instantly. Update functionality is real time, no code for it.\nYou feel amazing!!!</p>\n\n<p><strong>Reusable directives are super:</strong>\nWrite directives in one place and use it throughout the application. OMG!!! I used these directive for paging, regex, validations, etc. It is really cool!</p>\n\n<p><strong>Routing is strong:</strong>\nIt's up to your implementation how you want to use it, but it requires very few lines of code to route the request to specify HTML and controller (JavaScript)</p>\n\n<p><strong>Controllers are great:</strong>\nControllers take care of their own HTML, but this separation works well for common functionality well as. If you want to call the same function on the click of a button on master HTML, just write the same function name in each controller and write individual code.</p>\n\n<p><strong>Plugins:</strong>\nThere are many other similar features like showing an overlay in your app. You don't need to write code for it, just use an overlay plugin available as wc-overlay, and this will automatically take care of all <a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\" rel=\"nofollow\">XMLHttpRequest</a> (XHR) requests.</p>\n\n<p><strong>Ideal for <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer#RESTful_web_services\" rel=\"nofollow\">RESTful</a> architecture:</strong>\nBeing a complete frameworks makes AngularJS great to work with a RESTful architecture. To call REST CRUD APIs is very easier and </p>\n\n<p><strong>Services</strong>: Write common codes using services and less code in controllers. Sevices can be used to share common functionalities among the controllers.</p>\n\n<p><strong>Extensibility</strong>: Angular has extended the HTML directives using angular directives. Write expressions inside html and evaluate them on runtime. Create your own directives and services and use them in another project without any extra effort.</p>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3288863,
      "name": "Sanjeev Singh",
      "reputation": 2275
    }
  },
  {
    "soID": 22180193,
    "parentID": 3390396,
    "url": "https://stackoverflow.com/q/22180193",
    "title": null,
    "body": "<pre><code>    var x;\n    if (x === undefined) {\n        alert (\"I am declared, but not defined.\")\n    };\n    if (typeof y === \"undefined\") {\n        alert (\"I am not even declared.\")\n    };\n\n    /* One more thing to understand: typeof ==='undefined' also checks \n       for if a variable is declared, but no value is assigned. In other \n       words, the variable is declared, but not defined. */\n\n    // Will repeat above logic of x for typeof === 'undefined'\n    if (x === undefined) {\n        alert (\"I am declared, but not defined.\")\n    };\n    /* So typeof === 'undefined' works for both, but x === undefined \n       only works for a variable which is at least declared. */\n\n    /* Say if I try using typeof === undefined (not in quotes) for \n       a variable which is not even declared, we will get run a \n       time error. */\n\n    if (z === undefined) {\n        alert (\"I am neither declared nor defined.\")\n    };\n    // I got this error for z ReferenceError: z is not defined \n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3297388,
      "name": "Gaurav",
      "reputation": 355
    }
  },
  {
    "soID": 36603421,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/36603421",
    "title": null,
    "body": "<p>You can simply use a <a href=\"https://github.com/sebmarkbage/ecmascript-rest-spread/blob/master/Spread.md\" rel=\"nofollow noreferrer\">spread property</a> to copy an object without references. But be careful (see comments), the 'copy' is just on the lowest object/array level. Nested properties are still references!</p>\n\n<hr>\n\n<p><strong>Complete clone:</strong></p>\n\n<pre><code>let x = {a: 'value1'}\nlet x2 = {...x}\n\n// =&gt; mutate without references:\n\nx2.a = 'value2'\nconsole.log(x.a)    // =&gt; 'value1'\n</code></pre>\n\n<p><strong>Clone with references on second level:</strong></p>\n\n<pre><code>const y = {a: {b: 'value3'}}\nconst y2 = {...y}\n\n// =&gt; nested object is still a references:\n\ny2.a.b = 'value4'\nconsole.log(y.a.b)    // =&gt; 'value4'\n</code></pre>\n\n<hr>\n\n<p>JavaScript actually does not support deep clones natively. Use an utility function. For example Ramda:</p>\n\n<blockquote>\n  <p><a href=\"http://ramdajs.com/docs/#clone\" rel=\"nofollow noreferrer\">http://ramdajs.com/docs/#clone</a></p>\n</blockquote>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44936961,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/44936961",
    "title": null,
    "body": "<p>I'm surprised no one has mentioned KMP here. <a href=\"https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm\" rel=\"nofollow noreferrer\">What is KMP?</a> \nKMP algorithm provides worst-case linear time substring search, so it is a reasonable way if you do care about worst-case time complexity. <a href=\"https://www.nayuki.io/res/knuth-morris-pratt-string-matching/kmp-string-matcher.js\" rel=\"nofollow noreferrer\">Link to JavaScript KMP implementation sample</a></p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 21812642,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/21812642",
    "title": null,
    "body": "<p>Should just be able to set using <code>window.location</code>.</p>\n\n<p><strong>Example:</strong></p>\n\n<p><code>window.location = \"http://www.stackoverflow.com\";</code></p>\n\n<p>Here is a past post on the subject: </p>\n\n<blockquote>\n  <p><a href=\"https://stackoverflow.com/questions/503093/how-can-i-make-a-redirect-page-in-jquery-javascript\">How to redirect to another webpage in JavaScript/jQuery?</a></p>\n</blockquote>\n",
    "score": 117,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3314823,
      "name": "Newse",
      "reputation": 1460
    }
  },
  {
    "soID": 27545151,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/27545151",
    "title": null,
    "body": "<p>Acording your example, you need to sort by two fields (last name, first name), rather then one. You can use <a href=\"http://github.com/agershun/alasql\">Alasql</a> library to make this sort in one line:</p>\n\n<pre><code>var res = alasql('SELECT * FROM ? ORDER BY last_nom, first_nom',[objs]);\n</code></pre>\n\n<p>Try this example <a href=\"http://jsfiddle.net/agershun/4f4Lr9ss/1/\">at jsFiddle</a>.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3320509,
      "name": "agershun",
      "reputation": 2359
    }
  },
  {
    "soID": 23167180,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/23167180",
    "title": null,
    "body": "<p>As of jQuery 1.4 <code>isEmptyObject()</code> method checks both properties on the object itself and properties inherited from prototypes (in that it doesn't use hasOwnProperty). The argument should always be a plain JavaScript Object as other types of object (DOM elements, primitive strings/numbers, host objects) may not give consistent results across browsers. To determine if an object is a plain JavaScript object, use <code>$.isPlainObject()</code>.</p>\n\n<pre><code>jQuery.isPlainObject({}) // true\n\njQuery.isPlainObject( \"test\" ) // false\n</code></pre>\n\n<p><a href=\"http://api.jquery.com/jQuery.isPlainObject/\" rel=\"nofollow\">Jquery api</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3340650,
      "name": "chandu",
      "reputation": 1663
    }
  },
  {
    "soID": 30239794,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/30239794",
    "title": null,
    "body": "<p>Please use this</p>\n\n<pre><code>var listbox = document.getElementById(\"yourdropdownid\");\nvar selIndex = listbox.selectedIndex;\nvar selValue = listbox.options[selIndex].value;\nvar selText = listbox.options[selIndex].text;   \n</code></pre>\n\n<p>Then Please alert \"selValue\" and \"selText\". You get your selected dropdown value and text</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3345941,
      "name": "Mohammed Shaheen MK",
      "reputation": 621
    }
  },
  {
    "soID": 22779729,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/22779729",
    "title": null,
    "body": "<p>Try <a href=\"https://github.com/jpillora/xdomain\">XDomain</a>,</p>\n\n<blockquote>\n  <p>Summary: A pure JavaScript CORS alternative/polyfill. No server configuration required - just add a proxy.html on the domain you wish to communicate with. This library uses XHook to hook all <a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\">XHR</a>, so XDomain should work in conjunction with any library.</p>\n</blockquote>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3359786,
      "name": "user3359786",
      "reputation": 211
    }
  },
  {
    "soID": 38991744,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/38991744",
    "title": null,
    "body": "<p>This may help you</p>\n\n<pre><code>var date = new Date();\nconsole.log(date.getDate()+'/'+(date.getMonth()+1)+'/'+date.getFullYear());\n</code></pre>\n\n<p>This will print current date in dd/MM/yyyy format</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3383065,
      "name": "Jayant Patil",
      "reputation": 815
    }
  },
  {
    "soID": 30262317,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/30262317",
    "title": null,
    "body": "<p>You can get the current date call the static method now like this:</p>\n\n<pre><code>var now = Date.now()\n</code></pre>\n\n<p>reference:</p>\n\n<p><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now\">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now</a></p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3397552,
      "name": "Jose Rojas",
      "reputation": 2004
    }
  },
  {
    "soID": 34082069,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/34082069",
    "title": null,
    "body": "<p><a href=\"http://www.kirupa.com/html5/storing_and_retrieving_an_array_from_local_storage.htm\" rel=\"nofollow\">Look this</a></p>\n\n<p>Let's say you have the following array called movies:</p>\n\n<pre><code>var movies = [\"Reservoir Dogs\", \"Pulp Fiction\", \"Jackie Brown\", \n              \"Kill Bill\", \"Death Proof\", \"Inglourious Basterds\"];\n</code></pre>\n\n<p>Using the stringify function, your movies array can be turned into a string by using the following syntax:</p>\n\n<pre><code>localStorage.setItem(\"quentinTarantino\", JSON.stringify(movies));\n</code></pre>\n\n<p>Notice that my data is being stored under the key called quentinTarantino.</p>\n\n<p>Retrieving Your Data</p>\n\n<pre><code>var retrievedData = localStorage.getItem(\"quentinTarantino\");\n</code></pre>\n\n<p>To convert from a string back to an object, use the JSON parse function:</p>\n\n<pre><code>var movies2 = JSON.parse(retrievedData);\n</code></pre>\n\n<p>You can call all of the array methods on your movies2</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3405686,
      "name": "shas",
      "reputation": 445
    }
  },
  {
    "soID": 44562747,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/44562747",
    "title": null,
    "body": "<p>I was successfully able to solve (in my case for fonts) using htaccess but obviously, OP is asking little different. But you can use FileMatch pattern and add any sort of extension so that it won't give cros error.</p>\n\n<pre><code>&lt;IfModule mod_headers.c&gt;\n  &lt;FilesMatch \"\\.(ttf|ttc|otf|eot|woff|woff2|font.css|css)$\"&gt;\n    Header set Access-Control-Allow-Origin \"*\"\n  &lt;/FilesMatch&gt;\n&lt;/IfModule&gt;\n</code></pre>\n\n<p><a href=\"https://httpd.apache.org/docs/2.4/mod/core.html#filesmatch\" rel=\"nofollow noreferrer\">https://httpd.apache.org/docs/2.4/mod/core.html#filesmatch</a></p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3405849,
      "name": "Danish",
      "reputation": 514
    }
  },
  {
    "soID": 35907613,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/35907613",
    "title": null,
    "body": "<p>As of 2016 (ES6) we may use <code>for…of</code> for array iteration, as John Slegers already noticed. </p>\n\n<p>I would just like to add this simple demonstration code, to make things clearer:</p>\n\n<pre><code>Array.prototype.foo = 1;\nvar arr = [];\narr[5] = \"xyz\";\n\nconsole.log(\"for...of:\");\nvar count = 0;\nfor (var item of arr) {\n    console.log(count + \":\", item);\n    count++;\n    }\n\nconsole.log(\"for...in:\");\ncount = 0;\nfor (var item in arr) {\n    console.log(count + \":\", item);\n    count++;\n    }\n</code></pre>\n\n<p>The console shows:</p>\n\n<pre><code>for...of:\n\n0: undefined\n1: undefined\n2: undefined\n3: undefined\n4: undefined\n5: xyz\n\nfor...in:\n\n0: 5\n1: foo\n</code></pre>\n\n<p>In other words:</p>\n\n<ul>\n<li><p><code>for...of</code> counts from 0 to 5, and also ignores <code>Array.prototype.foo</code>. It shows array <strong>values</strong>.</p></li>\n<li><p><code>for...in</code> lists only the <code>5</code>, ignoring undefined array indexes, but adding <code>foo</code>. It shows array <strong>property names</strong>.</p></li>\n</ul>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3411681,
      "name": "MarcG",
      "reputation": 6664
    }
  },
  {
    "soID": 26453372,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/26453372",
    "title": null,
    "body": "<p>I use this simple script</p>\n\n<pre><code>$('input[name=\"myRadio\"]').on('change', function() {\n  var radioValue = $('input[name=\"myRadio\"]:checked').val();        \n  alert(radioValue); \n});\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3436270,
      "name": "Lafif Astahdziq",
      "reputation": 1709
    }
  },
  {
    "soID": 24697286,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/24697286",
    "title": null,
    "body": "<p>Try to use the jQuery <a href=\"http://www.teamdf.com/web/jquery-number-format-redux/196\" rel=\"nofollow noreferrer\">.number plug-in</a>:</p>\n\n<pre><code>var number = 19.8000000007;\nvar res = 1 * $.number(number, 2);\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3447070,
      "name": "user3447070",
      "reputation": 53
    }
  },
  {
    "soID": 39402627,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/39402627",
    "title": null,
    "body": "<p>This will sort a two level nested array by the property passed to it in alpha numeric order.</p>\n\n<pre><code>function sortArrayObjectsByPropAlphaNum(property) {\n    return function (a,b) {\n        var reA = /[^a-zA-Z]/g;\n        var reN = /[^0-9]/g;\n        var aA = a[property].replace(reA, '');\n        var bA = b[property].replace(reA, '');\n\n        if(aA === bA) {\n            var aN = parseInt(a[property].replace(reN, ''), 10);\n            var bN = parseInt(b[property].replace(reN, ''), 10);\n            return aN === bN ? 0 : aN &gt; bN ? 1 : -1;\n        } else {\n            return a[property] &gt; b[property] ? 1 : -1;\n        }\n    };\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>objs.sort(utils.sortArrayObjectsByPropAlphaNum('last_nom'));\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3474412,
      "name": "depiction",
      "reputation": 302
    }
  },
  {
    "soID": 44971009,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/44971009",
    "title": null,
    "body": "<p>Best way for this job is to use something like this:</p>\n\n<pre><code>location.href = \"your web page link\";\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3480594,
      "name": "adi94",
      "reputation": 24
    }
  },
  {
    "soID": 28515261,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/28515261",
    "title": null,
    "body": "<p>This works fine</p>\n\n<pre><code>$('input[type=\"radio\"][class=\"className\"]:checked').val()\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/as4bnkmm/1/\" rel=\"noreferrer\"><strong>Working Demo</strong></a></p>\n\n<p>The <code>:checked</code> selector works for <code>checkboxes</code>, <code>radio buttons</code>, and select elements. For select elements only, use the <code>:selected</code> selector.</p>\n\n<p><a href=\"http://api.jquery.com/checked-selector/\" rel=\"noreferrer\"><strong>API for <code>:checked Selector</code></strong></a></p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3483789,
      "name": "Manoj",
      "reputation": 2996
    }
  },
  {
    "soID": 24601748,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/24601748",
    "title": null,
    "body": "<p>There are three main ways to do this,</p>\n\n<pre><code>window.location.href='blaah.com';\nwindow.location.assign('blaah.com');\n</code></pre>\n\n<p>and...</p>\n\n<pre><code>window.location.replace('blaah.com');\n</code></pre>\n\n<p>The last one is best, for a traditional redirect, because it will not save the page you went to before being redirected in your search history. However, if you just want to open a tab with JavaScript, you can use any of the above.<a href=\"http://basicuse.net/tips/pl/scripting_languages/javascript/how_to_make_a_page_redirect_in_javascript\" rel=\"noreferrer\">1</a></p>\n\n<p>EDIT: The <code>window</code> prefix is optional.</p>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3513171,
      "name": "Ben",
      "reputation": 1032
    }
  },
  {
    "soID": 35176671,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/35176671",
    "title": null,
    "body": "<pre><code>new Date().toDateString();\n</code></pre>\n\n<p>Result:</p>\n\n<blockquote>\n  <p>\"Wed Feb 03 2016\"</p>\n</blockquote>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3519897,
      "name": "user3519897",
      "reputation": 317
    }
  },
  {
    "soID": 32182172,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/32182172",
    "title": null,
    "body": "<p>This is some different method to do the same thing:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(document).ready(function (){\r\n\r\n    $('#isAgeSelected').click(function() {\r\n        // $(\"#txtAge\").toggle(this.checked);\r\n\r\n        // Using a pure CSS selector\r\n        if ($(this.checked)) {\r\n            alert('on check 1');\r\n        };\r\n\r\n        // Using jQuery's is() method\r\n        if ($(this).is(':checked')) {\r\n            alert('on checked 2');\r\n        };\r\n\r\n        //  // Using jQuery's filter() method\r\n        if ($(this).filter(':checked')) {\r\n            alert('on checked 3');\r\n        };\r\n    });\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"http://code.jquery.com/jquery-1.9.1.js\"&gt;&lt;/script&gt;\r\n&lt;input type=\"checkbox\" id=\"isAgeSelected\"/&gt;\r\n&lt;div id=\"txtAge\" style=\"display:none\"&gt;Age is something&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 27798820,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/27798820",
    "title": null,
    "body": "<p><code>$(\"#isAgeSelected\").prop('checked', true);</code></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 35922073,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/35922073",
    "title": null,
    "body": "<p>The shortest possible:</p>\n\n<pre><code>let today = new Date().toISOString().slice(0, 10);\n</code></pre>\n\n<p>It returns <code>\"2016-03-10\"</code></p>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3576214,
      "name": "Damjan Pavlica",
      "reputation": 3089
    }
  },
  {
    "soID": 42404995,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/42404995",
    "title": null,
    "body": "<p>If you use constants then you have no choice:</p>\n\n<pre><code>const numbers = [1, 2, 3]\n</code></pre>\n\n<p>You can not reasign:</p>\n\n<pre><code>numbers = []\n</code></pre>\n\n<p>You can only truncate:</p>\n\n<pre><code>numbers.length = 0\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3576214,
      "name": "Damjan Pavlica",
      "reputation": 3089
    }
  },
  {
    "soID": 31923983,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/31923983",
    "title": null,
    "body": "<h1>Sorting (more) Complex Arrays of Objects</h1>\n\n<p>Since you probably encounter more complex data structures like this array, I would expand the solution. </p>\n\n<h2>TL;DR</h2>\n\n<blockquote>\n  <p>Are more pluggable version based on <strong><a href=\"https://stackoverflow.com/users/300011/ege-%C3%96zcan\">@ege-Özcan</a></strong>'s very lovely <a href=\"https://stackoverflow.com/a/4760279/3580261\">answer</a>.</p>\n</blockquote>\n\n<h2>Problem</h2>\n\n<p>I encountered the below and couldn't change it. I also did not want to flatten the object temporarily. Nor did I want to use underscore / lodash, mainly for performance reasons and the fun to implement it myself.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var People = [\n   {Name: {name: \"Name\", surname: \"Surname\"}, Middlename: \"JJ\"},\n   {Name: {name: \"AAA\", surname: \"ZZZ\"}, Middlename:\"Abrams\"},\n   {Name: {name: \"Name\", surname: \"AAA\"}, Middlename: \"Wars\"}\n];\n</code></pre>\n\n<h3>Goal</h3>\n\n<p>The goal is to sort it primarily by <code>People.Name.name</code> and secondarily by <code>People.Name.surname</code></p>\n\n<h3>Obstacles</h3>\n\n<p>Now, in the base solution uses bracket notation to compute the properties to sort for dynamically. Here, though, we would have to construct the bracket notation dynamically also, since you would expect some like <code>People['Name.name']</code> would work - which doesn't. </p>\n\n<p>Simply doing <code>People['Name']['name']</code>, on the other hand, is static and only allows you to go down the <em>n</em>-th level.</p>\n\n<h2>Solution</h2>\n\n<p>The main addition here will be to walk down the object tree and determine the value of the last leaf, you have to specify, as well as any intermediary leaf.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var People = [\n   {Name: {name: \"Name\", surname: \"Surname\"}, Middlename: \"JJ\"},\n   {Name: {name: \"AAA\", surname: \"ZZZ\"}, Middlename:\"Abrams\"},\n   {Name: {name: \"Name\", surname: \"AAA\"}, Middlename: \"Wars\"}\n];\n\nPeople.sort(dynamicMultiSort(['Name','name'], ['Name', '-surname']));\n// Results in...\n// [ { Name: { name: 'AAA', surname: 'ZZZ' }, Middlename: 'Abrams' },\n//   { Name: { name: 'Name', surname: 'Surname' }, Middlename: 'JJ' },\n//   { Name: { name: 'Name', surname: 'AAA' }, Middlename: 'Wars' } ]\n\n// same logic as above, but strong deviation for dynamic properties \nfunction dynamicSort(properties) {\n  var sortOrder = 1;\n  // determine sort order by checking sign of last element of array\n  if(properties[properties.length - 1][0] === \"-\") {\n    sortOrder = -1;\n    // Chop off sign\n    properties[properties.length - 1] = properties[properties.length - 1].substr(1);\n  }\n  return function (a,b) {\n    propertyOfA = recurseObjProp(a, properties)\n    propertyOfB = recurseObjProp(b, properties)\n    var result = (propertyOfA &lt; propertyOfB) ? -1 : (propertyOfA &gt; propertyOfB) ? 1 : 0;\n    return result * sortOrder;\n  };\n}\n\n/**\n * Takes an object and recurses down the tree to a target leaf and returns it value\n * @param  {Object} root - Object to be traversed.\n * @param  {Array} leafs - Array of downwards traversal. To access the value: {parent:{ child: 'value'}} -&gt; ['parent','child']\n * @param  {Number} index - Must not be set, since it is implicit.\n * @return {String|Number}       The property, which is to be compared by sort.\n */\nfunction recurseObjProp(root, leafs, index) {\n  index ? index : index = 0\n  var upper = root\n  // walk down one level\n  lower = upper[leafs[index]]\n  // Check if last leaf has been hit by having gone one step too far.\n  // If so, return result from last step.\n  if (!lower) {\n    return upper\n  }\n  // Else: recurse!\n  index++\n  // HINT: Bug was here, for not explicitly returning function\n  // https://stackoverflow.com/a/17528613/3580261\n  return recurseObjProp(lower, leafs, index)\n}\n\n/**\n * Multi-sort your array by a set of properties\n * @param {...Array} Arrays to access values in the form of: {parent:{ child: 'value'}} -&gt; ['parent','child']\n * @return {Number} Number - number for sort algorithm\n */\nfunction dynamicMultiSort() {\n  var args = Array.prototype.slice.call(arguments); // slight deviation to base\n\n  return function (a, b) {\n    var i = 0, result = 0, numberOfProperties = args.length;\n    // REVIEW: slightly verbose; maybe no way around because of `.sort`-'s nature\n    // Consider: `.forEach()`\n    while(result === 0 &amp;&amp; i &lt; numberOfProperties) {\n      result = dynamicSort(args[i])(a, b);\n      i++;\n    }\n    return result;\n  }\n}\n</code></pre>\n\n<h2>Example</h2>\n\n<p>Working example <a href=\"http://jsbin.com/lotifa/2/edit?js,console\" rel=\"nofollow noreferrer\">on JSBin</a></p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3580261,
      "name": "eljefedelrodeodeljefe",
      "reputation": 2094
    }
  },
  {
    "soID": 23361990,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/23361990",
    "title": null,
    "body": "<pre><code>while (str.indexOf('abc') !== -1)\n{\n    str = str.replace('abc', '');\n}\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3584854,
      "name": "zdennis",
      "reputation": 97
    }
  },
  {
    "soID": 30863931,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/30863931",
    "title": null,
    "body": "<p>I think to avoid those kind of problem on local, session, cookies you can use opendb library..</p>\n\n<p>Ex- In which you can solve this using this snippet</p>\n\n<pre><code>// for set object in db\ndb.local.setJSON(\"key\", {name: \"xyz\"});  \n\n// for get object form db\ndb.local.getJSON(\"key\");\n</code></pre>\n\n<p><a href=\"https://github.com/pankajbisht/openDB\" rel=\"nofollow\">https://github.com/pankajbisht/openDB</a> </p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3611958,
      "name": "pankaj98",
      "reputation": 182
    }
  },
  {
    "soID": 41716722,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/41716722",
    "title": null,
    "body": "<p>You should use:</p>\n\n<pre><code>Math.round( num * 100 + Number.EPSILON ) / 100\n</code></pre>\n\n<p>No one seems to be aware of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\" rel=\"nofollow noreferrer\"><code>Number.EPSILON</code></a>.</p>\n\n<p>Also it's worth noting that this is not a <em>JavaScript weirdness</em> like some people stated.</p>\n\n<p><strong>That is simply the way floating point numbers works in a computer.</strong> Like 99% of programming languages, JavaScript doesn't have <em>home made</em> floating point numbers; it relies on the CPU/FPU for that. A computer uses binary, and in binary, there isn't any numbers like <code>0.1</code>, but a mere binary approximation for that. Why? For the same reason than 1/3 cannot be written in decimal: its value is 0.33333333... with an infinity of threes.</p>\n\n<p>Here come <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON\" rel=\"nofollow noreferrer\"><code>Number.EPSILON</code></a>. That number is the difference between 1 and the <em>next</em> number existing in the double precision floating point numbers. <strong>That's it: There is no number between <code>1</code> and 1 + <code>Number.EPSILON</code>.</strong></p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3612230,
      "name": "cronvel",
      "reputation": 1178
    }
  },
  {
    "soID": 26877692,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/26877692",
    "title": null,
    "body": "<p>I've written my own implementation. Not sure if it counts as a better solution:</p>\n\n<pre><code>/*\n    a function for deep cloning objects that contains other nested objects and circular structures.\n    objects are stored in a 3D array, according to their length (number of properties) and their depth in the original object.\n                                    index (z)\n                                         |\n                                         |\n                                         |\n                                         |\n                                         |\n                                         |                      depth (x)\n                                         |_ _ _ _ _ _ _ _ _ _ _ _\n                                        /_/_/_/_/_/_/_/_/_/\n                                       /_/_/_/_/_/_/_/_/_/\n                                      /_/_/_/_/_/_/...../\n                                     /................./\n                                    /.....            /\n                                   /                 /\n                                  /------------------\n            object length (y)    /\n*/\n</code></pre>\n\n<p>Following is the implementation:</p>\n\n<pre><code>function deepClone(obj) {\n    var depth = -1;\n    var arr = [];\n    return clone(obj, arr, depth);\n}\n\n/**\n *\n * @param obj source object\n * @param arr 3D array to store the references to objects\n * @param depth depth of the current object relative to the passed 'obj'\n * @returns {*}\n */\nfunction clone(obj, arr, depth){\n    if (typeof obj !== \"object\") {\n        return obj;\n    }\n\n    var length = Object.keys(obj).length; // native method to get the number of properties in 'obj'\n\n    var result = Object.create(Object.getPrototypeOf(obj)); // inherit the prototype of the original object\n    if(result instanceof Array){\n        result.length = length;\n    }\n\n    depth++; // depth is increased because we entered an object here\n\n    arr[depth] = []; // this is the x-axis, each index here is the depth\n    arr[depth][length] = []; // this is the y-axis, each index is the length of the object (aka number of props)\n    // start the depth at current and go down, cyclic structures won't form on depths more than the current one\n    for(var x = depth; x &gt;= 0; x--){\n        // loop only if the array at this depth and length already have elements\n        if(arr[x][length]){\n            for(var index = 0; index &lt; arr[x][length].length; index++){\n                if(obj === arr[x][length][index]){\n                    return obj;\n                }\n            }\n        }\n    }\n\n    arr[depth][length].push(obj); // store the object in the array at the current depth and length\n    for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) result[prop] = clone(obj[prop], arr, depth);\n    }\n\n    return result;\n}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 34755893,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/34755893",
    "title": null,
    "body": "<p>I use <strong>p</strong> to store the result from the previous recursion replacement:</p>\n\n<pre><code>function replaceAll(s, m, r, p) {\n    return s === p || r.contains(m) ? s : replaceAll(s.replace(m, r), m, r, s);\n}\n</code></pre>\n\n<p>It will replace all occurrences in the string <strong>s</strong> until it is possible:</p>\n\n<pre><code>replaceAll('abbbbb', 'ab', 'a') → 'abbbb' → 'abbb' → 'abb' → 'ab' → 'a'\n</code></pre>\n\n<p>To avoid infinite loop I check if the replacement <strong>r</strong> contains a match <strong>m</strong>:</p>\n\n<pre><code>replaceAll('abbbbb', 'a', 'ab') → 'abbbbb'\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3618581,
      "name": "Termininja",
      "reputation": 3554
    }
  },
  {
    "soID": 3932473,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/3932473",
    "title": null,
    "body": "<p>JavaScript programmers can use String.prototype.sprintf at <a href=\"https://github.com/ildar-shaimordanov/jsxt/blob/master/js/String.js\" rel=\"nofollow noreferrer\">https://github.com/ildar-shaimordanov/jsxt/blob/master/js/String.js</a>. Below is example:</p>\n\n<pre><code>var d = new Date();\nvar dateStr = '%02d:%02d:%02d'.sprintf(\n    d.getHours(), \n    d.getMinutes(), \n    d.getSeconds());\n</code></pre>\n",
    "score": 27,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 36796920,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/36796920",
    "title": null,
    "body": "<p>Short answer is, <strong>you have to implement a callback like this:</strong></p>\n\n<pre><code>function callback(response) {\n    // Here you can do what ever you want with the response object.\n    console.log(response);\n}\n\n$.ajax({\n    url: \"...\",\n    success: callback\n});\n</code></pre>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3645944,
      "name": "Pablo Matias Gomez",
      "reputation": 2707
    }
  },
  {
    "soID": 32457109,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/32457109",
    "title": null,
    "body": "<p>In addition to <a href=\"https://stackoverflow.com/a/30810322/1684970\">Dean Taylor updated answer (July 2015)</a>, I wrote a jQuery method looking his example.</p>\n\n<p><a href=\"http://jsfiddle.net/kmsdev/wf43zq1y/\" rel=\"nofollow noreferrer\">jsFiddle</a></p>\n\n<pre><code>/**\n* Copies the current selected text to the SO clipboard\n* This method must be called from an event to work with `execCommand()`\n* @param {String} text Text to copy\n* @param {Boolean} [fallback] Set to true shows a prompt\n* @return Boolean Returns `true` if the text was copied or the user clicked on accept (in prompt), `false` otherwise\n*/\nvar CopyToClipboard = function(text, fallback){\n    var fb = function () {\n        $t.remove();\n        if (fallback !== undefined &amp;&amp; fallback) {\n            var fs = 'Please, copy the following text:';\n            if (window.prompt(fs, text) !== null) return true;\n        }\n        return false;\n    };\n    var $t = $('&lt;textarea /&gt;');\n    $t.val(text).css({\n        width: '100px',\n        height: '40px'\n    }).appendTo('body');\n    $t.select();\n    try {\n        if (document.execCommand('copy')) {\n            $t.remove();\n            return true;\n        }\n        fb();\n    }\n    catch (e) {\n        fb();\n    }\n};\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3648578,
      "name": "kosmos",
      "reputation": 3714
    }
  },
  {
    "soID": 34998848,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/34998848",
    "title": null,
    "body": "<p>While promises and callbacks work fine in many situations, it is a pain in the rear to express something like:</p>\n\n<pre><code>if (!name) {\n  name = async1();\n}\nasync2(name);\n</code></pre>\n\n<p>You'd end up going through <code>async1</code>; check if <code>name</code> is undefined or not and call the callback accordingly.</p>\n\n<pre><code>async1(name, callback) {\n  if (name)\n    callback(name)\n  else {\n    doSomething(callback)\n  }\n}\n\nasync1(name, async2)\n</code></pre>\n\n<p>While it is <em>okay</em> in small examples it gets annoying when you have a lot of similar cases and error handling involved.</p>\n\n<p><code>Fibers</code> helps in solving the issue.</p>\n\n<pre><code>var Fiber = require('fibers')\n\nfunction async1(container) {\n  var current = Fiber.current\n  var result\n  doSomething(function(name) {\n    result = name\n    fiber.run()\n  })\n  Fiber.yield()\n  return result\n}\n\nFiber(function() {\n  var name\n  if (!name) {\n    name = async1()\n  }\n  async2(name)\n  // Make any number of async calls from here\n}\n</code></pre>\n\n<p>You can checkout the project <a href=\"https://github.com/laverdet/node-fibers\">here</a>.</p>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3664835,
      "name": "rohithpr",
      "reputation": 1377
    }
  },
  {
    "soID": 23894380,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/23894380",
    "title": null,
    "body": "<p>Edit of the edit of @duskwuff to support <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_8\" rel=\"nofollow\">Internet&nbsp;Explorer&nbsp;8</a> too. The difference is a new call to the function test of the regex and the setTimeout with an anonymous function.</p>\n\n<p>Also, I set the timeout to 99.</p>\n\n<pre><code>function ready(f){/in/.test(document.readyState)?setTimeout(function(){ready(f);},99):f();}\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3671505,
      "name": "Forestrf",
      "reputation": 179
    }
  },
  {
    "soID": 31392914,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/31392914",
    "title": null,
    "body": "<pre><code>function capitalize(s) {\n    // returns the first letter capitalized + the string from index 1 and out aka. the rest of the string\n    return s[0].toUpperCase() + s.substr(1);\n}\n\n\n// examples\ncapitalize('this is a test');\n=&gt; 'This is a test'\n\ncapitalize('the Eiffel Tower');\n=&gt; 'The Eiffel Tower'\n\ncapitalize('/index.html');\n=&gt; '/index.html'\n</code></pre>\n",
    "score": 33,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3697630,
      "name": "Fredrik A.",
      "reputation": 575
    }
  },
  {
    "soID": 24463307,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/24463307",
    "title": null,
    "body": "<pre><code>a = 1;\nalert(!a) // -&gt; false : a is not not defined\nalert(!!a) // -&gt; true : a is not not defined\n</code></pre>\n\n<p>For <code>!a</code>, it checks whether <code>a</code> is <strong>NOT</strong> defined, while <code>!!a</code> checks if the variable is defined.</p>\n\n<p><code>!!a</code> is the same as <code>!(!a)</code>. If <code>a</code> is defined, <code>a</code> is <code>true</code>, <code>!a</code> is <code>false</code>, and <code>!!a</code> is <code>true</code>.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3698272,
      "name": "user3698272",
      "reputation": 30
    }
  },
  {
    "soID": 37436374,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/37436374",
    "title": null,
    "body": "<p>Best way:</p>\n\n<pre><code>if(typeof variable==='undefined' || variable===null) {\n\n/* do your stuff */\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3706088,
      "name": "Nishanth Matha",
      "reputation": 3712
    }
  },
  {
    "soID": 24406175,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/24406175",
    "title": null,
    "body": "<pre><code>+(10).toFixed(2); // = 10\n+(10.12345).toFixed(2); // = 10.12\n\n(10).toFixed(2); // = 10.00\n(10.12345).toFixed(2); // = 10.12\n</code></pre>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3711536,
      "name": "user3711536",
      "reputation": 341
    }
  },
  {
    "soID": 24087980,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/24087980",
    "title": null,
    "body": "<p>I was returning an empty JSON response for an AJAX call and in IE8 jQuery.isEmptyObject() was not validating correctly. I added an additional check that seems to catch it properly.</p>\n\n<pre><code>.done(function(data)\n{  \n    // Parse json response object\n    var response = jQuery.parseJSON(data);\n\n    // In IE 8 isEmptyObject doesn't catch the empty response, so adding additional undefined check\n    if(jQuery.isEmptyObject(response) || response.length === 0)\n    {\n        //empty\n    }\n    else\n    {\n        //not empty\n    }\n});\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3716026,
      "name": "CatTest",
      "reputation": 1
    }
  },
  {
    "soID": 38181008,
    "parentID": 586182,
    "url": "https://stackoverflow.com/q/38181008",
    "title": null,
    "body": "<p>Other than splice, you can use this approach which will not mutate the original array, but will create a new array with the added item. You should usually avoid mutation whenever possible. I'm using ES6 spread operator here.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"true\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const items = [1, 2, 3, 4, 5]\r\n\r\nconst insert = (arr, index, newItem) =&gt; [\r\n  // part of the array before the specified index\r\n  ...arr.slice(0, index),\r\n  // inserted item\r\n  newItem,\r\n  // part of the array after the specified index\r\n  ...arr.slice(index)\r\n]\r\n\r\nconst result = insert(items, 1, 10)\r\n\r\nconsole.log(result)\r\n// [1, 10, 2, 3, 4, 5]</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>This can be used to add more than one item by tweaking the function a bit to use the rest operator for the new items, and spread that in the returned result as well</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"true\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const items = [1, 2, 3, 4, 5]\r\n\r\nconst insert = (arr, index, ...newItems) =&gt; [\r\n  // part of the array before the specified index\r\n  ...arr.slice(0, index),\r\n  // inserted items\r\n  ...newItems,\r\n  // part of the array after the specified index\r\n  ...arr.slice(index)\r\n]\r\n\r\nconst result = insert(items, 1, 10, 20)\r\n\r\nconsole.log(result)\r\n// [1, 10, 20, 2, 3, 4, 5]</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 26,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3716153,
      "name": "Gaafar",
      "reputation": 3877
    }
  },
  {
    "soID": 41855667,
    "parentID": 1098040,
    "url": "https://stackoverflow.com/q/41855667",
    "title": null,
    "body": "<p>vanila js</p>\n\n<pre><code>yourObjName.hasOwnProperty(key) : true ? false;\n</code></pre>\n\n<p>If you want to check if the object has at least one property in es2015</p>\n\n<pre><code>Object.keys(yourObjName).length : true ? false\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3722378,
      "name": "Hajji Tarik",
      "reputation": 704
    }
  },
  {
    "soID": 25791785,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/25791785",
    "title": null,
    "body": "<p>Use the jQuery function:</p>\n\n<pre><code>$.extend({\n  redirectPost: function(location, args) {\n    var form = '';\n    $.each(args, function(key, value) {\n      form += '&lt;input type=\"hidden\" name=\"' + key + '\" value=\"' + value + '\"&gt;';\n    });\n    $('&lt;form action=\"' + location + '\" method=\"POST\"&gt;' + form + '&lt;/form&gt;').appendTo($(document.body)).submit();\n  }\n});\n</code></pre>\n\n<p>In your code you use it like this:</p>\n\n<pre><code>$.redirectPost(\"addPhotos.php\", {pimreference:  $(\"#pimreference\").val(), tag: $(\"#tag\").val()});\n</code></pre>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3722659,
      "name": "stratum",
      "reputation": 229
    }
  },
  {
    "soID": 29329466,
    "parentID": 767486,
    "url": "https://stackoverflow.com/q/29329466",
    "title": null,
    "body": "<p>From <a href=\"http://www.w3schools.com/js/js_arrays.asp\" rel=\"nofollow\">w3schools</a>:</p>\n\n<pre><code>function isArray(myArray) {\n    return myArray.constructor.toString().indexOf(\"Array\") &gt; -1;\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3744681,
      "name": "Jahid",
      "reputation": 10494
    }
  },
  {
    "soID": 39243885,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/39243885",
    "title": null,
    "body": "<p>alternatively to append()\nyou can also use appendTo() which has a different syntax: </p>\n\n<pre><code>$(\"#foo\").append(\"&lt;div&gt;hello world&lt;/div&gt;\");\n$(\"&lt;div&gt;hello world&lt;/div&gt;\").**appendTo**(\"#foo\");    \n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3745627,
      "name": "davidman77",
      "reputation": 43
    }
  },
  {
    "soID": 34235817,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/34235817",
    "title": null,
    "body": "<p>Sure it's inefficient and many despise it, but it's one of the closest to the mentioned:</p>\n\n<pre><code>var myStringArray = [\"Hello\",\"World\"];\nmyStringArray.forEach(function(f){\n    // Do something\n})\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3746623,
      "name": "ManOfPanda",
      "reputation": 661
    }
  },
  {
    "soID": 41979094,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/41979094",
    "title": null,
    "body": "<p>If you are using jQuery. Try this one liner :</p>\n\n<pre><code>$.datepicker.formatDate('dd/mm/yy', new Date());\n</code></pre>\n\n<p>Here is the convention for formatting the date </p>\n\n<ul>\n<li>d - day of month (no leading zero)</li>\n<li>dd - day of month (two digit)</li>\n<li>o - day of the year (no leading zeros)</li>\n<li>oo - day of the year (three digit)</li>\n<li>D - day name short</li>\n<li>DD - day name long</li>\n<li>m - month of year (no leading zero)</li>\n<li>mm - month of year (two digit)</li>\n<li>M - month name short</li>\n<li>MM - month name long</li>\n<li>y - year (two digit)</li>\n<li>yy - year (four digit)</li>\n</ul>\n\n<p>Here is the reference for jQuery <a href=\"http://api.jqueryui.com/datepicker/\" rel=\"noreferrer\">datepicker</a></p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3759901,
      "name": "Souvik",
      "reputation": 87
    }
  },
  {
    "soID": 41717563,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/41717563",
    "title": null,
    "body": "<p>I found the following solution:</p>\n\n<p>I have the text in a hidden input. Because <code>setSelectionRange</code> doesn't work on hidden inputs, I changed temporarily the type to text, copy the text and then make it hidden again. If you want to copy the text from an element, you can pass it to the function and save it's content in the target variable.</p>\n\n<pre><code>    jQuery('#copy').on('click', function () {\n        copyToClipboard();\n    });\n\n    function copyToClipboard() {\n        var target = jQuery('#hidden_text');\n\n        // make it visible, so can be focused\n        target.attr('type', 'text');\n        target.focus();\n        // select all the text\n        target[0].setSelectionRange(0, target.val().length);\n\n        // copy the selection\n        var succeed;\n        try {\n            succeed = document.execCommand(\"copy\");\n        } catch (e) {\n            succeed = false;\n        }\n\n        // hide input again\n        target.attr('type', 'hidden');\n\n        return succeed;\n    }\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3763848,
      "name": "Vassilis Pallas",
      "reputation": 1888
    }
  },
  {
    "soID": 37892626,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/37892626",
    "title": null,
    "body": "<p>Loops can be pretty interesting when using pure JavaScript. It seems that only ECMA6 (New 2015 JavaScript specification) got the loops under control. Unfortunately as I'm writing this, both Browsers and popular Integrated development environment (IDE) are still struggling to support completely the new bells and whistles.</p>\n\n<p>At a glance here is what a JavaScript object loop look like before ECMA6:</p>\n\n<pre><code>for (var key in object) {\n  if (p.hasOwnProperty(key)) {\n    var value = object[key];\n    console.log(key); // This is the key;\n    console.log(value); // This is the value;\n  }\n}\n</code></pre>\n\n<p>Also, I know this is out of scope with this question but in 2011, ECMAScript 5.1 added the <code>forEach</code> method for Arrays only which basically created a new improved way to loop through arrays while still leaving non iterable objects with the old verbose and confusing <code>for</code> loop. But the odd part is that this new <code>forEach</code> method does not support <code>break</code> which led to all sorts of other problems.</p>\n\n<p>Basically in 2011, there is not a real solid way to loop in JavaScript other than what many popular libraries (jQuery, Underscore, etc.) decided to re-implement.</p>\n\n<p>As of 2015, we now have a better out of the box way to loop (and break) any object type (including Arrays and Strings). Here is what a loop in JavaScript will eventually look like when the recommendation becomes mainstream:</p>\n\n<pre><code>for (let [key, value] of Object.entries(object)) {\n    console.log(key); // This is the key;\n    console.log(value); // This is the value;\n}\n</code></pre>\n\n<p>Note that most browsers won't support the code above as of June 18th 2016. Even in Chrome you need to enable this special flag for it to work: <code>chrome://flags/#enable-javascript-harmony</code></p>\n\n<p>Until this becomes the new standard, the old method can still be used but there are also alternatives in popular libraries or even <a href=\"https://github.com/nbouvrette/forEach\" rel=\"nofollow\">lightweight alternatives</a> for those who aren't using any of these libraries.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3764048,
      "name": "Nicolas Bouvrette",
      "reputation": 813
    }
  },
  {
    "soID": 45027592,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/45027592",
    "title": null,
    "body": "<p>Returns boolean value of a variable.</p>\n\n<p>Instead, <code>Boolean</code> class can be used.</p>\n\n<p>(please read code descriptions)</p>\n\n<pre><code>var X = \"test\"; // X value is \"test\" as a String value\nvar booleanX = !!X // booleanX is `true` as a Boolean value beacuse non-empty strings evaluates as `true` in boolean\nvar whatIsXValueInBoolean = Boolean(X) // whatIsXValueInBoolean is `true` again\nconsole.log(Boolean(X) === !!X) // writes `true`\n</code></pre>\n\n<p>Namely, <code>Boolean(X) = !!X</code> in use.</p>\n\n<p>Please check code snippet out below <strong>↓</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let a = 0\r\nconsole.log(\"a: \", a) // writes a value in its kind\r\nconsole.log(\"!a: \", !a) // writes '0 is NOT true in boolean' value as boolean - So that's true.In boolean 0 means false and 1 means true.\r\nconsole.log(\"!!a: \", !!a) // writes 0 value in boolean. 0 means false.\r\nconsole.log(\"Boolean(a): \", Boolean(a)) // equals to `!!a`\r\nconsole.log(\"\\n\") // newline\r\n\r\na = 1\r\nconsole.log(\"a: \", a)\r\nconsole.log(\"!a: \", !a)\r\nconsole.log(\"!!a: \", !!a) // writes 1 value in boolean\r\nconsole.log(\"\\n\") // newline\r\n\r\na = \"\"\r\nconsole.log(\"a: \", a)\r\nconsole.log(\"!a: \", !a) // writes '\"\" is NOT true in boolean' value as boolean - So that's true.In boolean empty strings, null and undefined values mean false and if there is a string it means true.\r\nconsole.log(\"!!a: \", !!a) // writes \"\" value in boolean\r\nconsole.log(\"\\n\") // newline\r\n\r\na = \"test\"\r\nconsole.log(\"a: \", a) // writes a value in its kind\r\nconsole.log(\"!a: \", !a)\r\nconsole.log(\"!!a: \", !!a) // writes \"test\" value in boolean\r\n\r\nconsole.log(\"Boolean(a) === !!a: \", Boolean(a) === !!a) // writes true</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3765109,
      "name": "efkan",
      "reputation": 5023
    }
  },
  {
    "soID": 33319704,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/33319704",
    "title": null,
    "body": "<p>I've come to write my own function for this... javascript is weird</p>\n\n<p>Usable on literally anything. (Note that this also checks if the variable contains any usable <em>values</em>. But since this information is usually also needed, I think it's worth posting). Please consider leaving a note.</p>\n\n<pre><code>function empty(v) {\n        let type = typeof v;\n        if(type === 'undefined') {\n            return true;\n        }\n        if(type=== 'boolean') {\n            return !v;\n        }\n        if(v === null) {\n            return true;\n        }\n        if(v === undefined) {\n            return true;\n        }\n        if(v instanceof Array) {\n            if(v.length &lt; 1) {\n                return true;\n            }\n        }\n        else if(type === 'string') {\n            if(v.length &lt; 1) {\n                return true;\n            }\n            if(v==='0') {\n                return true;\n            }\n        }\n        else if(type === 'object') {\n            if(Object.keys(v).length &lt; 1) {\n                return true;\n            }\n        }\n        else if(type === 'number') {\n            if(v===0) {\n                return true;\n            }\n        }\n        return false;\n    }\n</code></pre>\n\n<p>Typescript-compatible.</p>\n\n<p>edit. this function should do <em>exactly</em> the same thing like PHPs <a href=\"http://php.net/manual/en/function.empty.php\" rel=\"nofollow noreferrer\"><code>empty()</code> function</a> (see <code>RETURN VALUES</code>)</p>\n\n<p>Considers <code>undefined</code>, <code>null</code>, <code>false</code>, <code>0</code>, <code>0.0</code>, <code>\"0\"</code> <code>{}</code>, <code>[]</code> as empty.</p>\n\n<p><code>\"0.0\"</code>, <code>NaN</code>, <code>\" \"</code>, <code>true</code> are considered non-empty.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3779853,
      "name": "Blauhirn",
      "reputation": 3344
    }
  },
  {
    "soID": 34812252,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/34812252",
    "title": null,
    "body": "<p>A simple way:</p>\n\n<pre><code>objs.sort(function(a,b) {\n  return b.last_nom.toLowerCase() &lt; a.last_nom.toLowerCase();\n});\n</code></pre>\n\n<p>See that <code>'.toLowerCase()'</code> is necessary to prevent erros \nin comparing strings.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3783143,
      "name": "Caio Ladislau",
      "reputation": 395
    }
  },
  {
    "soID": 36923847,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/36923847",
    "title": null,
    "body": "<pre><code>if($('#isAgeSelected').prop('checked')) {\n    // do your action \n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24710857,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/24710857",
    "title": null,
    "body": "<p>This is my preferred solution:</p>\n\n<pre><code>var obj = {};\nreturn Object.keys(obj).length; //returns 0 if empty or an integer &gt; 0 if non-empty\n</code></pre>\n",
    "score": 142,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3831803,
      "name": "dhruvio",
      "reputation": 1429
    }
  },
  {
    "soID": 27310171,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/27310171",
    "title": null,
    "body": "<p>In sibling case   </p>\n\n<pre><code>&lt;a class=\"uibutton confirm addClient\" href=\"javascript:void(0);\"&gt;ADD Client&lt;/a&gt;\n&lt;input type=\"text\" placeholder=\"Enter client name\" style=\"margin: 5px;float: right\" class=\"clientsearch large\" /&gt;\n&lt;select class=\"mychzn-select clientList\"&gt;\n  &lt;option value=\"\"&gt;Select Client name....&lt;/option&gt;\n  &lt;option value=\"1\"&gt;abc&lt;/option&gt;\n&lt;/select&gt;\n\n\n /*jQuery*/\n $(this).siblings('select').children(':selected').text()\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3832217,
      "name": "vineet sah",
      "reputation": 3875
    }
  },
  {
    "soID": 38140498,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/38140498",
    "title": null,
    "body": "<p>Now I think there is better scoping of variables to a block of statements using <code>let</code>:</p>\n\n<pre><code>function printnums()\n{\n    // i is not accessible here\n    for(let i = 0; i &lt;10; i+=)\n    {\n       console.log(i);\n    }\n    // i is not accessible here\n\n    // j is accessible here\n    for(var j = 0; j &lt;10; j++)\n    {\n       console.log(j);\n    }\n    // j is accessible here\n}\n</code></pre>\n\n<p>I think people will start using let here after so that they will have similar scoping in JavaScript like other languages, Java, C#, etc.</p>\n\n<p>People with not a clear understanding about scoping in JavaScript used to make the mistake earlier.</p>\n\n<p>Hoisting is not supported using <code>let</code>.</p>\n\n<p>With this approach errors present in JavaScript are getting removed. </p>\n\n<p>Refer to <em><a href=\"https://hacks.mozilla.org/2015/07/es6-in-depth-let-and-const/\" rel=\"nofollow noreferrer\">ES6 In Depth: let and const</a></em> to understand it better.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3834128,
      "name": "swaraj patil",
      "reputation": 121
    }
  },
  {
    "soID": 25088906,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/25088906",
    "title": null,
    "body": "<p>The best way to redirect a page is:</p>\n\n<pre><code>window.location.replace(\"http://www.example.com\");\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3852426,
      "name": "Adeel Gill",
      "reputation": 173
    }
  },
  {
    "soID": 40775470,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/40775470",
    "title": null,
    "body": "<h1><code>let</code></h1>\n\n<h2>Block scope</h2>\n\n<p>Variables declared using the <code>let</code> keyword are block-scoped, which means that they are available only in the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/block\" rel=\"nofollow noreferrer\">block</a> in which they were declared.</p>\n\n<h3>At the top level (outside a function)</h3>\n\n<p>At the top level, variables declared using <code>let</code> don't create properties on the global object.</p>\n\n<pre><code>var globalVariable = 42;\nlet blockScopedVariable = 43;\n\nconsole.log(globalVariable); // 42\nconsole.log(blockScopedVariable); // 43\n\nconsole.log(this.globalVariable); // 42\nconsole.log(this.blockScopedVariable); // undefined\n</code></pre>\n\n<h3>Inside a function</h3>\n\n<p>Inside a funciton (but outside a block), <code>let</code> has the same scope as <code>var</code>.</p>\n\n<pre><code>(() =&gt; {\n  var functionScopedVariable = 42;\n  let blockScopedVariable = 43;\n\n  console.log(functionScopedVariable); // 42\n  console.log(blockScopedVariable); // 43\n})();\n\nconsole.log(functionScopedVariable); // ReferenceError: functionScopedVariable is not defined\nconsole.log(blockScopedVariable); // ReferenceError: blockScopedVariable is not defined\n</code></pre>\n\n<h3>Inside a block</h3>\n\n<p>Variables declared using <code>let</code> inside a block can't be accessed outside that block.</p>\n\n<pre><code>{\n  var globalVariable = 42;\n  let blockScopedVariable = 43;\n  console.log(globalVariable); // 42\n  console.log(blockScopedVariable); // 43\n}\n\nconsole.log(globalVariable); // 42\nconsole.log(blockScopedVariable); // ReferenceError: blockScopedVariable is not defined\n</code></pre>\n\n<h3>Inside a loop</h3>\n\n<p>Variables declared with <code>let</code> in loops can be referenced only inside that loop.</p>\n\n<pre><code>for (var i = 0; i &lt; 3; i++) {\n  var j = i * 2;\n}\nconsole.log(i); // 3\nconsole.log(j); // 4\n\nfor (let k = 0; k &lt; 3; k++) {\n  let l = k * 2;\n}\nconsole.log(typeof k); // undefined\nconsole.log(typeof l); // undefined\n// Trying to do console.log(k) or console.log(l) here would throw a ReferenceError.\n</code></pre>\n\n<h3>Loops with closures</h3>\n\n<p>If you use <code>let</code> instead of <code>var</code> in a loop, with each iteration you get a new variable. That means that you can safely use a closure inside a loop.</p>\n\n<pre><code>// Logs 3 thrice, not what we meant.\nfor (var i = 0; i &lt; 3; i++) {\n  setTimeout(() =&gt; console.log(i), 0);\n}\n\n// Logs 0, 1 and 2, as expected.\nfor (let j = 0; j &lt; 3; j++) {\n  setTimeout(() =&gt; console.log(j), 0);\n}\n</code></pre>\n\n<h2>Temporal dead zone</h2>\n\n<p>Because of <a href=\"https://stackoverflow.com/q/33198849/3853934\">the temporal dead zone</a>, variables declared using <code>let</code> can't be accessed before they are declared. Attempting to do so throws an error.</p>\n\n<pre><code>console.log(noTDZ); // undefined\nvar noTDZ = 43;\nconsole.log(hasTDZ); // ReferenceError: hasTDZ is not defined\nlet hasTDZ = 42;\n</code></pre>\n\n<h2>No re-declaring</h2>\n\n<p>You can't declare the same variable multiple times using <code>let</code>. You also can't declare a variable using <code>let</code> with the same identifier as another variable which was declared using <code>var</code>.</p>\n\n<pre><code>var a;\nvar a; // Works fine.\n\nlet b;\nlet b; // SyntaxError: Identifier 'b' has already been declared\n\nvar c;\nlet c; // SyntaxError: Identifier 'c' has already been declared\n</code></pre>\n\n<h1><code>const</code></h1>\n\n<p><code>const</code> is quite similar to <code>let</code>—it's block-scoped and has TDZ. There are, however, two things which are different.</p>\n\n<h2>No re-assigning</h2>\n\n<p>Variable declared using <code>const</code> can't be re-assigned.</p>\n\n<pre><code>const a = 42;\na = 43; // TypeError: Assignment to constant variable.\n</code></pre>\n\n<p>Note that it doesn't mean that the value is immutable. Its properties still can be changed.</p>\n\n<pre><code>const obj = {};\nobj.a = 42;\nconsole.log(obj.a); // 42\n</code></pre>\n\n<p>If you want to have an immutable object, you should use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" rel=\"nofollow noreferrer\"><code>Object.freeze()</code></a>.</p>\n\n<h2>Initializer is required</h2>\n\n<p>You always must specify a value when declaring a variable using <code>const</code>.</p>\n\n<pre><code>const a; // SyntaxError: Missing initializer in const declaration\n</code></pre>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3853934,
      "name": "Michał Perłakowski",
      "reputation": 24152
    }
  },
  {
    "soID": 33455807,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/33455807",
    "title": null,
    "body": "<p>What's the big deal with this..   The cleanest way to do this is </p>\n\n<p><code>var currentDate=new Date().toLocaleString().slice(0,10);</code></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3879231,
      "name": "ISONecroMAn",
      "reputation": 299
    }
  },
  {
    "soID": 33323493,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/33323493",
    "title": null,
    "body": "<p>Another attempt to explain <a href=\"https://github.com/rus0000/jsinheritance\" rel=\"noreferrer\">JavaScript prototype-based inheritance</a> with better pictures</p>\n\n<p><a href=\"https://github.com/rus0000/jsinheritance\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/6gEKe.png\" alt=\"Simple objects inheritanse\"></a></p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3891206,
      "name": "rus1",
      "reputation": 164
    }
  },
  {
    "soID": 36914192,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/36914192",
    "title": null,
    "body": "<p>You can use:</p>\n\n<pre><code>  if(document.getElementById('isAgeSelected').checked)\n    $(\"#txtAge\").show();  \n  else\n    $(\"#txtAge\").hide();\n</code></pre>\n\n<hr>\n\n<pre><code>if($(\"#isAgeSelected\").is(':checked'))\n  $(\"#txtAge\").show();  \nelse\n  $(\"#txtAge\").hide();\n</code></pre>\n\n<p>Both of them should work.</p>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 38457944,
    "parentID": 894860,
    "url": "https://stackoverflow.com/q/38457944",
    "title": null,
    "body": "<p>Yes, This will work in Javascript. You can also do that:</p>\n\n<pre><code>function func(a=10,b=20)\n{\n    alert (a+' and '+b);\n}\n\nfunc(); // Result: 10 and 20\n\nfunc(12); // Result: 12 and 20\n\nfunc(22,25); // Result: 22 and 25\n</code></pre>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3901944,
      "name": "Muhammad Awais",
      "reputation": 869
    }
  },
  {
    "soID": 32892328,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/32892328",
    "title": null,
    "body": "<pre><code>new Date().toISOString().slice(0,10); \n</code></pre>\n\n<p>would work too</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3912805,
      "name": "Toucouleur",
      "reputation": 407
    }
  },
  {
    "soID": 39221334,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/39221334",
    "title": null,
    "body": "<p>A small improvement - every word in titlecase.</p>\n\n<pre><code>String.prototype.toTitleCase = function(){\n    return this.replace(/\\b(\\w+)/g, function(m,p){ return p[0].toUpperCase() + p.substr(1).toLowerCase() });\n}\n\nvar s = 'heLLo wOrLD';\nconsole.log(s.toTitleCase()); // Hello World\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3918453,
      "name": "Timur",
      "reputation": 49
    }
  },
  {
    "soID": 40023034,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/40023034",
    "title": null,
    "body": "<p>This approach is the shortest way I can think of.</p>\n\n<p>The solution based on the DOMContentLoaded event only works if the script is loaded before the document, whereas the lazy check suggested here ensures the code is executed always, even in scripts loaded dynamically later on, exactly as the JQuery's document ready.</p>\n\n<p>This code is compatible with all browsers (including some legacy, down to IE6 and Safari for Windows).</p>\n\n<pre><code>(function ready() {\n    if (!document.body) {setTimeout(ready, 50); return;}\n    // Document is ready here\n})();\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3922265,
      "name": "Javier Rey",
      "reputation": 720
    }
  },
  {
    "soID": 28849664,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/28849664",
    "title": null,
    "body": "<p>here is a piece of code from angular js </p>\n\n<pre><code>var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n var rafSupported = !!requestAnimationFrame;\n</code></pre>\n\n<p>their intention is to set rafSupported to true or false based on the availability of function in requestAnimationFrame </p>\n\n<p>it can be achieved by checking in following way in general:</p>\n\n<pre><code>if(typeof  requestAnimationFrame === 'function')\nrafSupported =true;\nelse\nrafSupported =false;\n</code></pre>\n\n<p>the short way could be using !!</p>\n\n<pre><code>rafSupported = !!requestAnimationFrame ;\n</code></pre>\n\n<p>so if requestAnimationFrame was assigned a function\n then\n!requestAnimationFrame would be false and one more ! of it would be true</p>\n\n<p>if requestAnimationFrame was assinged undefined then\n!requestAnimationFrame would be true and one more ! of it would be false</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3944374,
      "name": "JeevanReddy Avanaganti",
      "reputation": 46
    }
  },
  {
    "soID": 30478240,
    "parentID": 1646698,
    "url": "https://stackoverflow.com/q/30478240",
    "title": null,
    "body": "<h3>For beginners to understand it better</h3>\n\n<p>try out the following code in console.</p>\n\n<pre><code>function Foo() { \n    return this; \n}\n\nvar a = Foo();       //returns window object\nvar b = new Foo();   //returns empty object of foo\n\na instanceof Window  // true\na instanceof Foo     // false\n\nb instanceof Window  // false\nb instanceof Foo     // true\n</code></pre>\n\n<p>Now you can read the community wiki answer :)</p>\n",
    "score": 66,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3951761,
      "name": "Anulal S",
      "reputation": 2763
    }
  },
  {
    "soID": 33672222,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/33672222",
    "title": null,
    "body": "<p>Example </p>\n\n<pre><code>var a  = \"Test String\";\n\nif(a.search(\"ring\")!=-1){\n     //exist \n} else {\n     //not found \n}\n</code></pre>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 35272718,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/35272718",
    "title": null,
    "body": "<p>Previously there were only two scopes in JavaScript, i.e. functional and global. With '<code>let</code>' keyword JavaScript has now introduced <code>block-level</code> variables.</p>\n\n<p>To have a complete understanding of the 'let' keyword, <em><a href=\"http://www.codingeek.com/tutorials/javascript/es6-let-keyword-to-declare-variable-in-javascript/\" rel=\"nofollow noreferrer\">\nES6: ‘let’ keyword to declare variable in JavaScript</a></em> will help.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3992420,
      "name": "Hitesh Garg",
      "reputation": 260
    }
  },
  {
    "soID": 25717627,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/25717627",
    "title": null,
    "body": "<p>Here is the code to redirect to some other page with a timeout of 10 seconds.</p>\n\n<pre><code>&lt;script&gt;\n    function Redirect()\n    {\n        window.location=\"http://www.adarshkr.com\";\n    }\n\n    document.write(\"You will be redirected to a new page in 10 seconds.\");\n    setTimeout('Redirect()', 10000);\n&lt;/script&gt;\n</code></pre>\n\n<p>You can also do it like this, on click of a button using location.assign:</p>\n\n<pre><code>&lt;input type=\"button\" value=\"Load new document\" onclick=\"newPage()\"&gt;\n&lt;script&gt;\n    function newPage() {\n        window.location.assign(\"http://www.adarshkr.com\")\n    }\n&lt;/script&gt;\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4006919,
      "name": "Adarsh Gowda K R",
      "reputation": 775
    }
  },
  {
    "soID": 37322132,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/37322132",
    "title": null,
    "body": "<p><a href=\"https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015\" rel=\"nofollow noreferrer\">ECMAScript 6</a> added one more keyword to declare variables other the \"const\" other than \"let\".</p>\n\n<p>The primary goal of introduction of \"let\" and \"const\" over \"var\" is to have block scoping instead of traditional lexical scoping.\n<a href=\"https://medium.com/@charan4u/ecmascript-6-beginner-guide-part-3-block-level-bindings-2b3cd5c5d408#.ev9gwp2jb\" rel=\"nofollow noreferrer\">This article explains very briefly difference between \"var\" and \"let\" and it also covers the discussion on \"const\"</a>.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4008968,
      "name": "Gurucharan M K",
      "reputation": 224
    }
  },
  {
    "soID": 44919961,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/44919961",
    "title": null,
    "body": "<p>Using Ramda,</p>\n\n<p><strong>npm install ramda</strong></p>\n\n<pre><code>import R from 'ramda'\nvar objs = [ \n    { first_nom: 'Lazslo', last_nom: 'Jamf'     },\n    { first_nom: 'Pig',    last_nom: 'Bodine'   },\n    { first_nom: 'Pirate', last_nom: 'Prentice' }\n];\nvar ascendingSortedObjs = R.sortBy(R.prop('last_nom'), objs)\nvar descendingSortedObjs = R.reverse(ascendingSortedObjs)\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4011289,
      "name": "Sridhar Sg",
      "reputation": 199
    }
  },
  {
    "soID": 26101385,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/26101385",
    "title": null,
    "body": "<p><strong>Redirecting User using jQuery/JavaScript</strong></p>\n\n<p>By using the location object in jQuery or JavaScript we can redirect the user to another web page.</p>\n\n<p><strong>In jQuery</strong></p>\n\n<p>The code to redirect the user from one page to another is:</p>\n\n<pre><code>var url = 'http://www.example.com';\n$(location).attr('href', url);\n</code></pre>\n\n<p><strong>In JavaScript</strong></p>\n\n<p>The code to redirect the user from one page to another is:</p>\n\n<pre><code>var url = 'http://www.example.com';\nwindow.location.href = url;\n</code></pre>\n\n<p><strong>Or</strong></p>\n\n<pre><code>var url = 'http://www.example.com';\nwindow.location = url;\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4018783,
      "name": "devst3r",
      "reputation": 477
    }
  },
  {
    "soID": 34158202,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/34158202",
    "title": null,
    "body": "<p>For basic formatting: </p>\n\n<pre><code>var template = jQuery.validator.format(\"{0} is not a valid value\");\nvar result = template(\"abc\");\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 38892354,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/38892354",
    "title": null,
    "body": "<p>The difference is that call() takes the function arguments separately, and apply() takes the function arguments in an array.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4060908,
      "name": "Sanjib Debnath",
      "reputation": 399
    }
  },
  {
    "soID": 31306879,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/31306879",
    "title": null,
    "body": "<p>This work for me:</p>\n\n<pre><code>$(\"#city :selected\").text();\n</code></pre>\n\n<p>I'm using jQuery 1.10.2</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4062955,
      "name": "Rhaymand Tatlonghari",
      "reputation": 131
    }
  },
  {
    "soID": 26107132,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/26107132",
    "title": null,
    "body": "<pre><code>function replaceAll(str, find, replace) {\n  var i = str.indexOf(find);\n  if (i &gt; -1){\n    str = str.replace(find, replace); \n    i = i + replace.length;\n    var st2 = str.substring(i);\n    if(st2.indexOf(find) &gt; -1){\n      str = str.substring(0,i) + replaceAll(st2, find, replace);\n    }       \n  }\n  return str;\n}\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4092395,
      "name": "Tim Rivoli",
      "reputation": 131
    }
  },
  {
    "soID": 36592465,
    "parentID": 3437786,
    "url": "https://stackoverflow.com/q/36592465",
    "title": null,
    "body": "<p>I developed a library for knowing the real viewport size for desktops and mobiles browsers, because viewport sizes are inconsistents across devices and cannot rely on all the answers of that post (according to all the research I made about this) : <a href=\"https://github.com/pyrsmk/W\" rel=\"nofollow\">https://github.com/pyrsmk/W</a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4112863,
      "name": "pyrsmk",
      "reputation": 135
    }
  },
  {
    "soID": 35791398,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/35791398",
    "title": null,
    "body": "<p>Try:</p>\n\n<pre><code>window.location.href = 'url';\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>window.location = 'url';\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4126180,
      "name": "Jay Doshi",
      "reputation": 267
    }
  },
  {
    "soID": 43786851,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/43786851",
    "title": null,
    "body": "<p>Here's a workaround <strong>for browsers</strong> (not Node.js) using HTML imports.</p>\n\n<p>First, all JavaScript classes and scripts are not in <code>.js</code> files, but in <code>.js.html</code> files (the <strong>.js</strong>.<code>html</code> is just to recognize between HTML pages and complete JavaScript script/classes), inside <code>&lt;script&gt;</code> tags, like this:</p>\n\n<p><code>MyClass.js.html</code>:</p>\n\n<pre><code>&lt;script&gt;\n   class MyClass {\n\n      // Your code here..\n\n   }\n\n&lt;/script&gt;\n</code></pre>\n\n<p>Then if you wish to import your class, you just need to use HTML imports:</p>\n\n<pre><code>&lt;link rel=\"import\" href=\"relative/path/to/MyClass.js.html\"/&gt;\n\n&lt;script&gt;\n   var myClass = new MyClass();\n   // Your code here..\n&lt;/script&gt;\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4170935,
      "name": "Yairopro",
      "reputation": 373
    }
  },
  {
    "soID": 40602764,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/40602764",
    "title": null,
    "body": "<p>Here is the MS DotNet Implementation of Random class in javascript-</p>\n\n<pre><code>var Random = (function () {\nfunction Random(Seed) {\n    if (!Seed) {\n        Seed = this.milliseconds();\n    }\n    this.SeedArray = [];\n    for (var i = 0; i &lt; 56; i++)\n        this.SeedArray.push(0);\n    var num = (Seed == -2147483648) ? 2147483647 : Math.abs(Seed);\n    var num2 = 161803398 - num;\n    this.SeedArray[55] = num2;\n    var num3 = 1;\n    for (var i_1 = 1; i_1 &lt; 55; i_1++) {\n        var num4 = 21 * i_1 % 55;\n        this.SeedArray[num4] = num3;\n        num3 = num2 - num3;\n        if (num3 &lt; 0) {\n            num3 += 2147483647;\n        }\n        num2 = this.SeedArray[num4];\n    }\n    for (var j = 1; j &lt; 5; j++) {\n        for (var k = 1; k &lt; 56; k++) {\n            this.SeedArray[k] -= this.SeedArray[1 + (k + 30) % 55];\n            if (this.SeedArray[k] &lt; 0) {\n                this.SeedArray[k] += 2147483647;\n            }\n        }\n    }\n    this.inext = 0;\n    this.inextp = 21;\n    Seed = 1;\n}\nRandom.prototype.milliseconds = function () {\n    var str = new Date().valueOf().toString();\n    return parseInt(str.substr(str.length - 6));\n};\nRandom.prototype.InternalSample = function () {\n    var num = this.inext;\n    var num2 = this.inextp;\n    if (++num &gt;= 56) {\n        num = 1;\n    }\n    if (++num2 &gt;= 56) {\n        num2 = 1;\n    }\n    var num3 = this.SeedArray[num] - this.SeedArray[num2];\n    if (num3 == 2147483647) {\n        num3--;\n    }\n    if (num3 &lt; 0) {\n        num3 += 2147483647;\n    }\n    this.SeedArray[num] = num3;\n    this.inext = num;\n    this.inextp = num2;\n    return num3;\n};\nRandom.prototype.Sample = function () {\n    return this.InternalSample() * 4.6566128752457969E-10;\n};\nRandom.prototype.GetSampleForLargeRange = function () {\n    var num = this.InternalSample();\n    var flag = this.InternalSample() % 2 == 0;\n    if (flag) {\n        num = -num;\n    }\n    var num2 = num;\n    num2 += 2147483646.0;\n    return num2 / 4294967293.0;\n};\nRandom.prototype.Next = function (minValue, maxValue) {\n    if (!minValue &amp;&amp; !maxValue)\n        return this.InternalSample();\n    var num = maxValue - minValue;\n    if (num &lt;= 2147483647) {\n        return parseInt((this.Sample() * num + minValue).toFixed(0));\n    }\n    return this.GetSampleForLargeRange() * num + minValue;\n};\nRandom.prototype.NextDouble = function () {\n    return this.Sample();\n};\nRandom.prototype.NextBytes = function (buffer) {\n    for (var i = 0; i &lt; buffer.length; i++) {\n        buffer[i] = this.InternalSample() % 256;\n    }\n};\nreturn Random;\n}());\n</code></pre>\n\n<p><strong>Use:</strong></p>\n\n<pre><code>        var r = new Random();\n        var nextInt = r.Next(1, 100); //returns an integer between range\n        var nextDbl = r.NextDouble(); //returns a random decimal\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4207533,
      "name": "Ariful Islam",
      "reputation": 111
    }
  },
  {
    "soID": 36057456,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/36057456",
    "title": null,
    "body": "<p>Short answer: yes. You can do with this:</p>\n\n<pre><code>var myArray = [\"element1\", \"element2\", \"element3\", \"element4\"];\n\nfor (i = 0; i &lt; myArray.length; i++) {\n  console.log(myArray[i]);\n}\n</code></pre>\n\n<p>In a browser console, you can see something like \"element1\", \"element2\", etc., printed.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4210110,
      "name": "Juanjo Salvador",
      "reputation": 694
    }
  },
  {
    "soID": 42439848,
    "parentID": 586182,
    "url": "https://stackoverflow.com/q/42439848",
    "title": null,
    "body": "<p>This:</p>\n\n<pre><code>var arr= [\"India\",\"China\",\"Japan\",\"USA\"];\n\narr.splice(index, 0, item);\n</code></pre>\n\n<p>Will insert item into <code>arr</code> at the specified <code>index</code> (deleting 0 items first, that is, it's just an insert).</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4214329,
      "name": "hannad rehman",
      "reputation": 208
    }
  },
  {
    "soID": 32245385,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/32245385",
    "title": null,
    "body": "<p>Interested in cloning simple objects :</p>\n\n<p>JSON.parse(JSON.stringify(json_original));</p>\n\n<p>Source : <a href=\"https://stackoverflow.com/questions/18359093/how-to-copy-javascript-object-to-new-variable-not-by-reference?answertab=votes#tab-top\">How to copy JavaScript object to new variable NOT by reference?</a></p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 35659269,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/35659269",
    "title": null,
    "body": "<p>It's always good to use JavaScript equivalents as compared to jQuery. One reason is one fewer library to depend on and they are much faster than the jQuery equivalents.</p>\n\n<p>One fantastic reference for jQuery equivalents is <a href=\"http://youmightnotneedjquery.com/\" rel=\"nofollow\">http://youmightnotneedjquery.com/</a>.</p>\n\n<p>As far as your question is concerned, I took the below code from the above link :)\nOnly caveat is it only works with <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_9\" rel=\"nofollow\">Internet&nbsp;Explorer&nbsp;9</a> and later.</p>\n\n<pre><code>function ready(fn) {\n    if (document.readyState != 'loading') {\n        fn();\n    }\n    else {\n        document.addEventListener('DOMContentLoaded', fn);\n    }\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4249059,
      "name": "Vatsal",
      "reputation": 787
    }
  },
  {
    "soID": 40257774,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/40257774",
    "title": null,
    "body": "<p>The best way in my opinion is to use the Array.forEach function. If you cannot use that I would suggest to get the polyfill from MDN to make i available, it is certainly the safest way to iterate over an array in JavaScript.</p>\n\n<p><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach</a></p>\n\n<p>So as others has suggested, this is almost always what you want:</p>\n\n<pre><code>var numbers = [1,11,22,33,44,55,66,77,88,99,111];\nvar sum = 0;\nnumbers.forEach(function(n){\n  sum += n;\n});\n</code></pre>\n\n<p>This ensures that anything you need in the scope of processing the array stays within that scope, and that you are only processing the values of the array, not the object properties and other members, which is what for .. in does. </p>\n\n<p>using a regular c style for loop works in most cases, it is just important to remember that everything within the loop shares it's scope with the rest of your program, the { } does not create a new scope. </p>\n\n<p>Hence:</p>\n\n<pre><code>var sum = 0;\nvar numbers = [1,11,22,33,44,55,66,77,88,99,111];\n\nfor(var i = 0; i&lt;numbers.length; ++i){ \n  sum += numbers[i];\n}\n\nalert(i);\n</code></pre>\n\n<p>will output \"11\" - which may or may not be what you want. </p>\n\n<p>Working jsFiddle example:\n<a href=\"https://jsfiddle.net/workingClassHacker/pxpv2dh5/7/\" rel=\"nofollow noreferrer\">https://jsfiddle.net/workingClassHacker/pxpv2dh5/7/</a></p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4269730,
      "name": "Espen",
      "reputation": 548
    }
  },
  {
    "soID": 28082478,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/28082478",
    "title": null,
    "body": "<pre><code>var capitalizeMe = \"string not starting with capital\"\n</code></pre>\n\n<p>Capitalize with substr</p>\n\n<pre><code>var capitalized = capitalizeMe.substr(0, 1).toUpperCase() + capitalizeMe.substr(1);\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4295195,
      "name": "Asad Fida",
      "reputation": 153
    }
  },
  {
    "soID": 27762122,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/27762122",
    "title": null,
    "body": "<p>Here's what I use to generate random numbers.</p>\n\n<pre><code>function random(high,low) {\n    high++;\n    return Math.floor((Math.random())*(high-low))+low;\n}\n</code></pre>\n\n<p>We do execute <code>high++</code> because<code>Math.random()</code> generates a random number between 0, (inclusive), and 1(exclusive) The one being excluded, means we must increase the high by one before executing any math. We then subtract low from high, giving us the highest number to generate - low, then +low, bringing high back to normal, and making the lowest number atleast low. then we return the resulting number</p>\n\n<p><code>random(7,3)</code> could return <code>3,4,5,6, or 7</code></p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4303905,
      "name": "Travis",
      "reputation": 516
    }
  },
  {
    "soID": 33536393,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/33536393",
    "title": null,
    "body": "<p>Since recently Chrome 42+ and Firefox 41+ now support the <strong>document.execCommand('copy')</strong> command. So I created a couple of functions for cross browser copy to clipboard ability using a combination of <a href=\"https://stackoverflow.com/a/8024509/4307527\">Tim Down's old answer</a> and <a href=\"https://developers.google.com/web/updates/2015/04/cut-and-copy-commands?hl=en\" rel=\"nofollow noreferrer\">Google Developer's answer</a>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function selectElementContents(el) \r\n{\r\n    // Copy textarea, pre, div, etc.\r\n\tif (document.body.createTextRange) {\r\n        // IE \r\n        var textRange = document.body.createTextRange();\r\n        textRange.moveToElementText(el);\r\n        textRange.select();\r\n        textRange.execCommand(\"Copy\");     \r\n    }\r\n\telse if (window.getSelection &amp;&amp; document.createRange) {\r\n        // non-IE\r\n        var range = document.createRange();\r\n        range.selectNodeContents(el);\r\n        var sel = window.getSelection();\r\n        sel.removeAllRanges();\r\n        sel.addRange(range); \r\n        try {  \r\n\t\t    var successful = document.execCommand('copy');  \r\n\t\t    var msg = successful ? 'successful' : 'unsuccessful';  \r\n\t\t    console.log('Copy command was ' + msg);  \r\n\t\t} catch(err) {  \r\n\t\t    console.log('Oops, unable to copy');  \r\n\t\t} \r\n    }\r\n} // end function selectElementContents(el) \r\n\r\nfunction make_copy_button(el)\r\n{\r\n\tvar copy_btn = document.createElement('input');\r\n\tcopy_btn.type = \"button\";\r\n\tel.parentNode.insertBefore(copy_btn, el.nextSibling);\r\n\tcopy_btn.onclick = function() { selectElementContents(el); };\r\n\t\r\n\tif (document.queryCommandSupported(\"copy\") || parseInt(navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./)[2]) &gt;= 42)\r\n\t{\r\n\t\t// Copy works with IE 4+, Chrome 42+, Firefox 41+, Opera 29+\r\n\t\tcopy_btn.value = \"Copy to Clipboard\";\r\n\t}\t\r\n\telse\r\n\t{\r\n\t\t// Select only for Safari and older Chrome, Firefox and Opera\r\n\t\tcopy_btn.value = \"Select All (then press CTRL+C to Copy)\";\r\n\t}\r\n}\r\n/* Note: document.queryCommandSupported(\"copy\") should return \"true\" on browsers that support copy\r\n\tbut there was a bug in Chrome versions 42 to 47 that makes it return \"false\".  So in those\r\n\tversions of Chrome feature detection does not work!\r\n\tSee https://code.google.com/p/chromium/issues/detail?id=476508\r\n*/\r\n\r\nmake_copy_button(document.getElementById(\"markup\"));</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;pre id=\"markup\"&gt;\r\n  Text that can be copied or selected with cross browser support.\r\n&lt;/pre&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4307527,
      "name": "Jeff Baker",
      "reputation": 177
    }
  },
  {
    "soID": 30389641,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/30389641",
    "title": null,
    "body": "<p>Here is the <strong>smallest code snippet to test DOM ready</strong> which works across all browsers (even IE 8):</p>\n\n<pre><code>r(function(){\n    alert('DOM Ready!');\n});\nfunction r(f){/in/.test(document.readyState)?setTimeout('r('+f+')',9):f()}\n</code></pre>\n\n<p>See this <a href=\"https://stackoverflow.com/questions/9899372/pure-javascript-equivalent-to-jquerys-ready-how-to-call-a-function-when-the/30319853#30319853\">answer</a>.</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4310934,
      "name": "Antara Roy",
      "reputation": 163
    }
  },
  {
    "soID": 40038219,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/40038219",
    "title": null,
    "body": "<p>Try this:</p>\n\n<pre><code>window.location.href = \"http://newlink.com\";\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4336065,
      "name": "Jigar7521",
      "reputation": 1311
    }
  },
  {
    "soID": 44199180,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/44199180",
    "title": null,
    "body": "<p>I always like analogies when it comes to understand this type of stuff. 'Prototypal inheritance' is pretty confusing in comparison to class bass inheritance in my opinion, even though prototypes are much simpler paradigm. In fact there really is no inheritance, so the name in and of itself misleading, it's more like prototypal delegation.</p>\n\n<p>Imagine this ....</p>\n\n<p>You're in high-school, and you're in class and have a test that's due today, but you don't have a pen to complete it. Ohshi-</p>\n\n<p>You have a best friend, Finnius Mcdinglebutt who might possibly have a pen? You ask, and he looks on his desk unsuccessfully, but instead of saying \"Man, I don't have a pen\", he's a nice friend he checks with his other friend Derp Derpington if he has a pen. Derp does have a pen and passes it back to Finnius, who passes it over to you to complete your test. Derp has entrusted the pen to Finnius, who has delegated the pen to you for use.</p>\n\n<p>This, is essentially how prototypes work in a nutshell.</p>\n\n<p>:~]</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4340243,
      "name": "Louis Moore",
      "reputation": 391
    }
  },
  {
    "soID": 30388857,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/30388857",
    "title": null,
    "body": "<p>Javascript:</p>\n\n<pre><code>window.location.href='www.your_url.com';\nwindow.top.location.href='www.your_url.com';\nwindow.location.replace('www.your_url.com');\n</code></pre>\n\n<p>Jquery:</p>\n\n<pre><code>var url='www.your_url.com';\n$(location).attr('href',url);\n$(location).prop('href',url);//instead of location you can use window\n</code></pre>\n",
    "score": 26,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4356233,
      "name": "lalithkumar",
      "reputation": 1
    }
  },
  {
    "soID": 32202320,
    "parentID": 610406,
    "url": "https://stackoverflow.com/q/32202320",
    "title": null,
    "body": "<p>From ES6 on you could use <strong>template strings</strong>:</p>\n\n<pre><code>let soMany = 10;\nconsole.log(`This is ${soMany} times easier!`);\n// \"This is 10 times easier!\n</code></pre>\n\n<p>Be aware that template strings are <strong>surrounded by backticks</strong> ` instead of (single) quotes.</p>\n\n<p>For further information:</p>\n\n<p><a href=\"https://developers.google.com/web/updates/2015/01/ES6-Template-Strings\">https://developers.google.com/web/updates/2015/01/ES6-Template-Strings</a></p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/template_strings</a></p>\n\n<p><em>Note:\nCheck the mozilla-site to find a list of supported browsers.</em></p>\n",
    "score": 107,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 32880279,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/32880279",
    "title": null,
    "body": "<p>I know that best way is <code>str.indexOf(s) !== -1;</code> <a href=\"http://hayageek.com/javascript-string-contains/\">http://hayageek.com/javascript-string-contains/</a></p>\n\n<p>I suggest another way(<code>str.replace(s1, \"\") !== str</code>):</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var str = \"Hello World!\", s1 = \"ello\", s2 = \"elloo\";\r\nalert(str.replace(s1, \"\") !== str);\r\nalert(str.replace(s2, \"\") !== str);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 35485350,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/35485350",
    "title": null,
    "body": "<p><a href=\"https://www.youtube.com/watch?v=PMfcsYzj-9M\">The Definitive Guide to Object-Oriented JavaScript</a> - a very concise and clear ~30min video explanation of the asked question (Prototypal Inheritance topic begins from <a href=\"https://youtu.be/PMfcsYzj-9M?t=344\">5:45</a>, although I'd rather listen to the whole video). The author of this video also made JavaScript object visualizer website <a href=\"http://www.objectplayground.com/\">http://www.objectplayground.com/</a>.<a href=\"https://i.stack.imgur.com/Vf4qR.jpg\"><img src=\"https://i.stack.imgur.com/Vf4qR.jpg\" alt=\"enter image description here\"></a>\n<a href=\"https://i.stack.imgur.com/xcRpT.jpg\"><img src=\"https://i.stack.imgur.com/xcRpT.jpg\" alt=\"enter image description here\"></a></p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4383472,
      "name": "Bad",
      "reputation": 1632
    }
  },
  {
    "soID": 28916773,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/28916773",
    "title": null,
    "body": "<p>I use something along these lines in my dev environment esp when working with APIs like HTTP:</p>\n\n<p>Suppose you have an HTTP header that you'd like to capitalize every initial letter in its name and add the hyphen between its constituent words, you may achieve something like that using this basic &amp; simple routine:</p>\n\n<pre><code>'access control allow origin'\n    .replace(/\\b\\w/g, function (match) {\n        return match.toUpperCase();\n    })\n    .split(' ')\n    .join('-');\n\n// Output: 'Access-Control-Allow-Origin'\n</code></pre>\n\n<p>It is not maybe the most elegant and attractive function definition out there but it certainly gets the job done.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4388578,
      "name": "Mr. X",
      "reputation": 147
    }
  },
  {
    "soID": 29790659,
    "parentID": 3437786,
    "url": "https://stackoverflow.com/q/29790659",
    "title": null,
    "body": "<p>But when we talk about responsive screens and if we want to handle it using jQuery for some reason, </p>\n\n<pre><code>window.innerWidth, window.innerHeight\n</code></pre>\n\n<p>gives the correct measurement. Even it removes the scroll-bar's extra space and we don't need to worry about adjusting that space :) </p>\n",
    "score": 33,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4423130,
      "name": "Aabha Pandey",
      "reputation": 376
    }
  },
  {
    "soID": 30253724,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/30253724",
    "title": null,
    "body": "<pre><code>var roundUpto = function(number, upto){\n    return Number(number.toFixed(upto));\n}\nroundUpto(0.1464676, 2);\n</code></pre>\n\n<p><code>toFixed(2)</code> here 2 is number of digits upto which we want to round this num.</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4431601,
      "name": "Ritesh Dhuri",
      "reputation": 185
    }
  },
  {
    "soID": 44776920,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/44776920",
    "title": null,
    "body": "<p>You can achieve it using javascript itself without using jQuery,</p>\n\n<pre><code>window.location = \"http://google.com\"\nlocation.href = \"http://google.com\"\n</code></pre>\n\n<p>you can achieve similar using jQuery like below, it will do exactly same like above,</p>\n\n<pre><code>$(window).attr('location',\"http://www.google.com\");\n$(location).attr('href',\"http://www.google.com\");\n</code></pre>\n\n<p>you can easily understand difference between both...</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4453737,
      "name": "Mohideen ibn Mohammed",
      "reputation": 2724
    }
  },
  {
    "soID": 33389604,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/33389604",
    "title": null,
    "body": "<p>I have used clipboard.js</p>\n\n<p>we can get it on npm</p>\n\n<pre><code>npm install clipboard --save\n</code></pre>\n\n<p>and also on bower</p>\n\n<pre><code>bower install clipboard --save\n</code></pre>\n\n<p>Usage &amp; examples are  at <a href=\"https://zenorocha.github.io/clipboard.js/\">https://zenorocha.github.io/clipboard.js/</a></p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4477305,
      "name": "CodecPM",
      "reputation": 162
    }
  },
  {
    "soID": 28204818,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/28204818",
    "title": null,
    "body": "<p>I had a problem with this when I used AngularJS to access my API. The same request worked in SoapUI 5.0 and ColdFusion. My GET method already had Access-Control-Allow-Origin header.</p>\n\n<p>I found out that <strong>AngularJS makes a \"trial\" OPTIONS request</strong>. ColdFusion, by default, generates OPTIONS method, but it doesn’t have much, these headers specifically. The error was generated in response to that OPTIONS call, and not to my intentional call to GET. After I added OPTIONS method below to my API, the problem has been resolved.</p>\n\n<pre><code>&lt;cffunction name=\"optionsMethod\" access=\"remote\" output=\"false\" returntype=\"any\" httpmethod=\"OPTIONS\" description=\"Method to respond to AngularJS trial call\"&gt;\n    &lt;cfheader name=\"Access-Control-Allow-Headers\" value=\"Content-Type,x-requested-with,Authorization,Access-Control-Allow-Origin\"&gt; \n    &lt;cfheader name=\"Access-Control-Allow-Methods\" value=\"GET,OPTIONS\"&gt;      \n    &lt;cfheader name=\"Access-Control-Allow-Origin\" value=\"*\"&gt;      \n    &lt;cfheader name=\"Access-Control-Max-Age\" value=\"360\"&gt;        \n&lt;/cffunction&gt;\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4504697,
      "name": "Leonid Alzhin",
      "reputation": 116
    }
  },
  {
    "soID": 30275266,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/30275266",
    "title": null,
    "body": "<p>Try This..\nHTML</p>\n\n<pre><code>&lt;p id=\"date\"&gt;&lt;/p&gt;\n</code></pre>\n\n<p>JS</p>\n\n<pre><code>&lt;script&gt;\nvar currentDate = new Date()\nvar day = currentDate.getDate()\nvar month = currentDate.getMonth() + 1\nvar year = currentDate.getFullYear()\ndocument.getElementById(\"date\").innerHTML =(\"&lt;b&gt;\" + day + \"/\" + month + \"/\" + year + \"&lt;/b&gt;\")\n&lt;/script&gt;\n</code></pre>\n\n<p>Working demo for current date</p>\n\n<p><a href=\"http://jsfiddle.net/qf4fkzxu/2/\" rel=\"nofollow\">Demo</a></p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4510112,
      "name": "Shanu Shaji",
      "reputation": 164
    }
  },
  {
    "soID": 30867162,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/30867162",
    "title": null,
    "body": "<p>To collect some kind of valid solutions:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var stringVariable = \"some text\";\r\nvar findString = \"text\";\r\n\r\n//using `indexOf()`\r\nvar containResult = stringVariable.indexOf(findString) != -1;\r\nconsole.log(containResult);\r\n\r\n//using `lastIndexOf()`\r\nvar containResult = stringVariable.lastIndexOf(findString) != -1;\r\nconsole.log(containResult);\r\n\r\n//using `search()`\r\nvar containResult = stringVariable.search(findString) != -1;\r\nconsole.log(containResult);\r\n     \r\n//using `split()`\r\nvar containResult = stringVariable.split(findString)[0] != stringVariable;\r\nconsole.log(containResult);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 40800717,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/40800717",
    "title": null,
    "body": "<p>This is the simplest, more elegant solution (and I am the best of the world;):</p>\n\n<pre><code>function roundToX(num, X) {    \n    return +(Math.round(num + \"e+\"+X)  + \"e-\"+X);\n}\n//roundToX(66.66666666,2) =&gt; 66.67\n//roundToX(10,2) =&gt; 10\n//roundToX(10.904,2) =&gt; 10.9\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4537906,
      "name": "Soldeplata Saketos",
      "reputation": 737
    }
  },
  {
    "soID": 41907709,
    "parentID": 500504,
    "url": "https://stackoverflow.com/q/41907709",
    "title": null,
    "body": "<p><strong>TL&amp;DR:</strong> Using the <code>for in</code> loop in arrays is not evil, in fact quite the opposite.</p>\n\n<p>I think the <code>for in</code> loop is a gem of JS if used <em>correctly</em> in arrays. You are expected to have full control over your software and know what you are doing. Let's see the mentioned drawbacks and disprove them one by one.</p>\n\n<ol>\n<li><strong>It loops through inherited properties as well:</strong> First of all any extensions to the <code>Array.prototype</code> should have been done by using <a href=\"https://developer.mozilla.org/tr/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" rel=\"nofollow noreferrer\"><code>Object.defineProperty()</code></a> and their <code>enumerable</code> descriptor should be set to <code>false</code>. Any library not doing so should not be used at all.</li>\n<li><strong>Properties those you add to the inheritance chain later get counted:</strong> When doing array sub-classing by <code>Object.setPrototypeOf</code> or by Class <code>extend</code>. You should again use <code>Object.defineProperty()</code> which by default sets the <code>writable</code>, <code>enumerable</code> and <code>configurable</code> property descriptors to <code>false</code>. Lets see an array sub-classing example here...</li>\n</ol>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function Stack(...a){\r\n  var stack = new Array(...a);\r\n  Object.setPrototypeOf(stack, Stack.prototype);\r\n  return stack;\r\n}\r\nStack.prototype = Object.create(Array.prototype);                                 // now stack has full access to array methods.\r\nObject.defineProperty(Stack.prototype,\"constructor\",{value:Stack});               // now Stack is a proper constructor\r\nObject.defineProperty(Stack.prototype,\"peak\",{value: function(){                  // add Stack \"only\" methods to the Stack.prototype.\r\n                                                       return this[this.length-1];\r\n                                                     }\r\n                                             });\r\nvar s = new Stack(1,2,3,4,1);\r\nconsole.log(s.peak());\r\ns[s.length] = 7;\r\nconsole.log(\"length:\",s.length);\r\ns.push(42);\r\nconsole.log(JSON.stringify(s));\r\nconsole.log(\"length:\",s.length);\r\n\r\nfor(var i in s) console.log(s[i]);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>So you see.. <code>for in</code> loop is now safe since you cared about your code.</p>\n\n<ol start=\"3\">\n<li><strong>The <code>for in</code> loop is slow:</strong> Hell no. It's by far the fastest method of iteration if you are looping over sparse arrays which are needed time to time. This is one of the most important performance tricks that one should know. Let's see an example. We will loop over a sparse array.</li>\n</ol>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var a = [];\r\na[0] = \"zero\";\r\na[10000000] = \"ten million\";\r\nconsole.time(\"for loop on array a:\");\r\nfor(var i=0; i &lt; a.length; i++) a[i] &amp;&amp; console.log(a[i]);\r\nconsole.timeEnd(\"for loop on array a:\");\r\nconsole.time(\"for in loop on array a:\");\r\nfor(var i in a) a[i] &amp;&amp; console.log(a[i]);\r\nconsole.timeEnd(\"for in loop on array a:\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4543207,
      "name": "Redu",
      "reputation": 7978
    }
  },
  {
    "soID": 37220725,
    "parentID": 586182,
    "url": "https://stackoverflow.com/q/37220725",
    "title": null,
    "body": "<p>For proper functional programming and chaining purposes an invention of <code>Array.prototype.insert()</code> is essential. Actually splice could have been perfect if it had returned the mutated array instead of a totally meaningless empty array. So here it goes</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>Array.prototype.insert = function(i,...rest){\r\n  this.splice(i,0,...rest)\r\n  return this\r\n}\r\n\r\nvar a = [3,4,8,9];\r\ndocument.write(\"&lt;pre&gt;\" + JSON.stringify(a.insert(2,5,6,7)) + \"&lt;/pre&gt;\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Well ok the above with the <code>Array.prototype.splice()</code> one mutates the original array and some might complain like \"you shouldn't modify what doesn't belong to you\" and that might turn out to be right as well. So for the public welfare i would like to give another <code>Array.prototype.insert()</code> which doesn't mutate the original array. Here it goes;</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>Array.prototype.insert = function(i,...rest){\r\n  return this.slice(0,i).concat(rest,this.slice(i));\r\n}\r\n\r\nvar a = [3,4,8,9],\r\n    b = a.insert(2,5,6,7);\r\nconsole.log(JSON.stringify(a));\r\nconsole.log(JSON.stringify(b));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4543207,
      "name": "Redu",
      "reputation": 7978
    }
  },
  {
    "soID": 40953980,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/40953980",
    "title": null,
    "body": "<pre><code>var i;\n\nif(i == null || typeof i == 'undefined'){\nconsole.log(i,'i is undefined or null')\n}else{\nconsole.log(i,'i has some value')\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4652706,
      "name": "KARTHIKEYAN.A",
      "reputation": 1364
    }
  },
  {
    "soID": 45134432,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/45134432",
    "title": null,
    "body": "<p>None of the above worked for me as there were blank spaces  but this is what I did</p>\n\n<pre><code>tr = table.getElementsByTagName(\"tr\");\n\n        for (i = 0; i &lt; tr.length; i++) {\n            td = tr[i].getElementsByTagName(\"td\")[0];\n            bottab.style.display=\"none\";\n            bottab2.style.display=\"none\";\n            if (td) {\n            var getvar=td.outerText.replace(/\\s+/, \"\") ;\n\n                if (getvar==filter){\n                    tr[i].style.display = \"\";\n                }else{\n                    tr[i].style.display = \"none\";\n                }\n\n            }\n        }\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 30635331,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/30635331",
    "title": null,
    "body": "<p>I think it will be the simple one </p>\n\n<pre><code>$('#isAgeSelected').change(function() {\n    if($(this).is(\":checked\")) {\n        $('#txtAge').show();\n    }\nelse{\n        $('#txtAge').hide();\n    }                                          \n});\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 30272938,
    "parentID": 1646698,
    "url": "https://stackoverflow.com/q/30272938",
    "title": null,
    "body": "<p>sometimes code is easier than words:</p>\n\n<pre><code>var func1 = function (x) { this.x = x; }                    // used with 'new' only\nvar func2 = function (x) { var z={}; z.x = x; return z; }   // used both ways\nfunc1.prototype.y = 11;\nfunc2.prototype.y = 12;\n\nA1 = new func1(1);      // has A1.x  AND  A1.y\nA2 =     func1(1);      // undefined ('this' refers to 'window')\nB1 = new func2(2);      // has B1.x  ONLY\nB2 =     func2(2);      // has B2.x  ONLY\n</code></pre>\n\n<p>for me, as long as I not prototype, I use style of func2 as it gives me a bit more flexibility inside and outside the function.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4748608,
      "name": "rsbkk",
      "reputation": 125
    }
  },
  {
    "soID": 36218859,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/36218859",
    "title": null,
    "body": "<p><code>$(HTMLelement)</code> can success it. If you want an epmty div use it as <code>$('&lt;div&gt;&lt;/div&gt;');</code>. Also you can set the other elements by the same method. If you want to change inner HTML after created you can use <code>html()</code> method. For get outerHTML as string you can use is like this : </p>\n\n<pre><code>var element = $('&lt;div/&gt;');\nvar innerHTML = element.html(); // if you want set new HTML use it like this element.html('&lt;b&gt;new HTML&lt;/b&gt;');\nvar outerHTML = element[0].outerHTML;\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4766521,
      "name": "Kamuran Sönecek",
      "reputation": 1278
    }
  },
  {
    "soID": 32008697,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/32008697",
    "title": null,
    "body": "<p>This works for me</p>\n\n<pre><code>$(\"#dropdownid\").change(function() {\n    alert($(this).find(\"option:selected\").text());\n});\n</code></pre>\n\n<p>If the element created dynamically</p>\n\n<pre><code>$(document).on(\"change\", \"#dropdownid\", function() {\n    alert($(this).find(\"option:selected\").text());\n});\n</code></pre>\n",
    "score": 24,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4796478,
      "name": "Prabhagaran",
      "reputation": 1246
    }
  },
  {
    "soID": 37015301,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/37015301",
    "title": null,
    "body": "<p>2.39KB minified. One file. <a href=\"https://github.com/rhroyston/clock-js\" rel=\"nofollow noreferrer\">https://github.com/rhroyston/clock-js</a><br>\n<br>\nJust trying to help...\n<br>\n<br></p>\n\n<p><a href=\"https://i.stack.imgur.com/64dzS.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/64dzS.jpg\" alt=\"enter image description here\"></a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4797603,
      "name": "Ron Royston",
      "reputation": 2217
    }
  },
  {
    "soID": 41121827,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/41121827",
    "title": null,
    "body": "<p><strong>For c# web services - webapi</strong> </p>\n\n<p>Please add the following code in your web.config file under &lt;system.webServer&gt; tag. This will work</p>\n\n<pre><code>&lt;httpProtocol&gt;\n    &lt;customHeaders&gt;\n        &lt;add name=\"Access-Control-Allow-Origin\" value=\"*\" /&gt;\n    &lt;/customHeaders&gt;\n&lt;/httpProtocol&gt;\n</code></pre>\n\n<p>Please make sure you are not doing any mistake in the ajax call</p>\n\n<p>jQuery</p>\n\n<pre><code>$.ajax({\n    url: 'http://mysite.microsoft.sample.xyz.com/api/mycall',\n    headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n    },\n    type: \"POST\", /* or type:\"GET\" or type:\"PUT\" */\n    dataType: \"json\",\n    data: {\n    },\n    success: function (result) {\n        console.log(result);    \n    },\n    error: function () {\n        console.log(\"error\");\n    }\n});\n</code></pre>\n\n<p>Angular 4 issue please refer : <a href=\"http://www.hubfly.com/blog/solutions/how-to-fix-angular-4-api-call-issues/\" rel=\"noreferrer\">http://www.hubfly.com/blog/solutions/how-to-fix-angular-4-api-call-issues/</a></p>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4812677,
      "name": "George Livingston",
      "reputation": 589
    }
  },
  {
    "soID": 32022481,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/32022481",
    "title": null,
    "body": "<pre><code>var x;\nif (x === undefined) {\n    alert (\"only declared, but not defined.\")\n};\nif (typeof y === \"undefined\") {\n    alert (\"not even declared.\")\n};\n</code></pre>\n\n<p>You can only use second one: as it will check for both definition and declaration</p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4813207,
      "name": "keshav",
      "reputation": 216
    }
  },
  {
    "soID": 30660575,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/30660575",
    "title": null,
    "body": "<p>Just add <code>/g</code> <br/></p>\n\n<pre><code>document.body.innerHTML = document.body.innerHTML.replace('hello', 'hi');\n</code></pre>\n\n<p>to</p>\n\n<pre><code>// Replace 'hello' string with /hello/g regular expression.\ndocument.body.innerHTML = document.body.innerHTML.replace(/hello/g, 'hi');\n</code></pre>\n\n<p><code>/g</code> means global</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4816224,
      "name": "Reza Fahmi",
      "reputation": 150
    }
  },
  {
    "soID": 36934097,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/36934097",
    "title": null,
    "body": "<pre><code>var myStringArray = [\"hello\", \"World\"];\nmyStringArray.forEach(function(val, index){\n   console.log(val, index);\n})\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4827282,
      "name": "Amit Jamwal",
      "reputation": 139
    }
  },
  {
    "soID": 36269686,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/36269686",
    "title": null,
    "body": "<p>This does the same action:</p>\n\n<pre><code>var newStr = string.slice(0,1).toUpperCase() + string.slice(1);\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4841641,
      "name": "Irfan Syed",
      "reputation": 59
    }
  },
  {
    "soID": 38856615,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/38856615",
    "title": null,
    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(function () {\r\n  alert('.val() = ' + $('#selectnumber').val() + '  AND  html() = ' + $('#selectnumber option:selected').html() + '  AND .text() = ' + $('#selectnumber option:selected').text());\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\r\n  &lt;head runat=\"server\"&gt;\r\n    &lt;title&gt;&lt;/title&gt;\r\n\r\n  &lt;/head&gt;\r\n  &lt;body&gt;\r\n    &lt;form id=\"form1\" runat=\"server\"&gt;\r\n      &lt;div&gt;\r\n        &lt;select id=\"selectnumber\"&gt;\r\n          &lt;option value=\"1\"&gt;one&lt;/option&gt;\r\n          &lt;option value=\"2\"&gt;two&lt;/option&gt;\r\n          &lt;option value=\"3\"&gt;three&lt;/option&gt;\r\n          &lt;option value=\"4\"&gt;four&lt;/option&gt;\r\n        &lt;/select&gt;\r\n\r\n      &lt;/div&gt;\r\n    &lt;/form&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><a href=\"https://i.stack.imgur.com/gjUBz.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/gjUBz.png\" alt=\"Click to see OutPut Screen\"></a></p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4847565,
      "name": "Bhanu pratap",
      "reputation": 306
    }
  },
  {
    "soID": 31016461,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/31016461",
    "title": null,
    "body": "<pre><code>$('#chk').change(function() { \n    (this.checked)? alert('true') : alert('false');\n});\n\n\n\n($('#chk')[0].checked)? alert('true') : alert('false');\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 41763845,
    "parentID": 1531093,
    "url": "https://stackoverflow.com/q/41763845",
    "title": null,
    "body": "<p><strong>A one-line JS solution:</strong> </p>\n\n<blockquote>\n  <p>tl;dr<br><br>\n  <code>var todaysDate = new Date(Date.now()).toLocaleString().slice(0,3).match(/[0-9]/i) ? new Date(Date.now()).toLocaleString().split(' ')[0].split(',')[0] : new Date(Date.now()).toLocaleString().split(' ')[1] + \" \" + new Date(Date.now()).toLocaleString().split(' ')[2] + \" \" + new Date(Date.now()).toLocaleString().split(' ')[3];</code>\n  <br><br>edge, ff latest, &amp; chrome return <code>todaysDate = \"2/7/2017\"</code> <br>\"works\"* in IE10+</p>\n</blockquote>\n\n<p><strong>EDIT 2/7/2017</strong></p>\n\n<p>I found out that IE10 and IE Edge do things a bit differently.. go figure.\nwith <code>new Date(Date.now()).toLocaleString()</code> as input,</p>\n\n<p>IE10 returns: </p>\n\n<pre><code>\"Tuesday, February 07, 2017 2:58:25 PM\"\n</code></pre>\n\n<p>I could write a big long function and FTFY. But <strong>you really ought to use <a href=\"https://momentjs.com/\" rel=\"nofollow noreferrer\">moment.js</a> for this stuff.</strong> My script merely cleans this up and gives you the <em>expanded</em> traditional US notation: <code>&gt; todaysDate = \"March 06, 2017\"</code></p>\n\n<p>IE EDGE returns:</p>\n\n<pre><code>\"‎2‎/‎7‎/‎2017‎ ‎2‎:‎59‎:‎27‎ ‎PM\"\n</code></pre>\n\n<p>Of course it couldn't be that easy. <strong>Edge's date string has invisible \"•\" characters between each visible one.</strong> So not only will we now be checking if the first character is a number, but the first 3 characters, since it turns out that any single character in the whole date range will eventually be a dot or a slash at some point. So to keep things simple, just <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\" rel=\"nofollow noreferrer\">.slice()</a> the first three chars (tiny buffer against future shenanigans) and then check for numbers. It should probably be noted that these invisible dots could potentially persist in your code. I'd maybe dig into that if you've got bigger plans than just printing this string to your view.</p>\n\n<p><strong>∴ updated one-liner:</strong></p>\n\n<pre><code>var todaysDate = new Date(Date.now()).toLocaleString().slice(0,3).match(/[0-9]/i) ? new Date(Date.now()).toLocaleString().split(' ')[0].split(',')[0] : new Date(Date.now()).toLocaleString().split(' ')[1] + \" \" + new Date(Date.now()).toLocaleString().split(' ')[2] + \" \" + new Date(Date.now()).toLocaleString().split(' ')[3];\n</code></pre>\n\n<p>That sucks to read. How about:</p>\n\n<pre><code>var dateString = new Date(Date.now()).toLocaleString();\nvar todaysDate = dateString.slice(0,3).match(/[0-9]/i) ? dateString.split(' ')[0].split(',')[0] : dateString.split(' ')[1] + \" \" + dateString.split(' ')[2] + \" \" + dateString.split(' ')[3];\n</code></pre>\n\n<p><strong>ORIGINAL ANSWER</strong></p>\n\n<p>I've got a one-liner for you:</p>\n\n<pre><code>new Date(Date.now()).toLocaleString().split(', ')[0];\n</code></pre>\n\n<p>and <code>[1]</code> will give you the time of day.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4905938,
      "name": "Cameron Donahue",
      "reputation": 81
    }
  },
  {
    "soID": 37441074,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/37441074",
    "title": null,
    "body": "<p>After searching a solution that supports Safari and other browsers (IE9 +),</p>\n\n<p>I use the same as Github : <a href=\"https://github.com/zeroclipboard/zeroclipboard\" rel=\"nofollow\">ZeroClipboard</a></p>\n\n<h2><strong>Example :</strong></h2>\n\n<p><a href=\"http://zeroclipboard.org/index-v1.x.html\" rel=\"nofollow\">http://zeroclipboard.org/index-v1.x.html</a></p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;html&gt;\n  &lt;body&gt;\n    &lt;button id=\"copy-button\" data-clipboard-text=\"Copy Me!\" title=\"Click to copy me.\"&gt;Copy to Clipboard&lt;/button&gt;\n    &lt;script src=\"ZeroClipboard.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"main.js\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><strong>JS</strong></p>\n\n<pre><code>var client = new ZeroClipboard(document.getElementById(\"copy-button\"));\n\nclient.on(\"ready\", function (readyEvent) {\n    // alert( \"ZeroClipboard SWF is ready!\" );\n\n    client.on(\"aftercopy\", function (event) {\n        // `this` === `client`\n        // `event.target` === the element that was clicked\n        event.target.style.display = \"none\";\n        alert(\"Copied text to clipboard: \" + event.data[\"text/plain\"]);\n    });\n});\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4912329,
      "name": "Mathieu Lescaudron",
      "reputation": 2784
    }
  },
  {
    "soID": 37469207,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/37469207",
    "title": null,
    "body": "<pre><code>var obj = [\"one\",\"two\",\"three\"];\n\nfor(x in obj){\n    console.log(obj[x]);\n}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4917694,
      "name": "Dan Chill",
      "reputation": 434
    }
  },
  {
    "soID": 39427298,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/39427298",
    "title": null,
    "body": "<p>Say you want to replace all the 'abc' with 'x':</p>\n\n<pre><code>let some_str = 'abc def def lom abc abc def'.split('abc').join('x')\nconsole.log(some_str) //x def def lom x x def\n</code></pre>\n\n<p>I was trying to think about something more simple than modifying the string prototype.</p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4961745,
      "name": "Emilio Grisolía",
      "reputation": 448
    }
  },
  {
    "soID": 37462229,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/37462229",
    "title": null,
    "body": "<p>You can use this custom library (written using Promise) to make a remote call.</p>\n\n<pre><code>function $http(apiConfig) {\n    return new Promise(function (resolve, reject) {\n        var client = new XMLHttpRequest();\n        client.open(apiConfig.method, apiConfig.url);\n        client.send();\n        client.onload = function () {\n            if (this.status &gt;= 200 &amp;&amp; this.status &lt; 300) {\n                // Performs the function \"resolve\" when this.status is equal to 2xx.\n                // Your logic here.\n                resolve(this.response);\n            }\n            else {\n                // Performs the function \"reject\" when this.status is different than 2xx.\n                reject(this.statusText);\n            }\n        };\n        client.onerror = function () {\n            reject(this.statusText);\n        };\n    });\n}\n</code></pre>\n\n<p>Simple usage example:</p>\n\n<pre><code>$http({\n    method: 'get',\n    url: 'google.com'\n}).then(function(response) {\n    console.log(response);\n}, function(error) {\n    console.log(error)\n});\n</code></pre>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4966443,
      "name": "Vinoth Rajendran",
      "reputation": 392
    }
  },
  {
    "soID": 38575730,
    "parentID": 1911015,
    "url": "https://stackoverflow.com/q/38575730",
    "title": null,
    "body": "<p>Use Webstorm! It's perfect for debugging Node.js applications. It has a built-in debugger. Check out the docs here: <a href=\"https://www.jetbrains.com/help/webstorm/2016.1/running-and-debugging-node-js.html\" rel=\"nofollow\">https://www.jetbrains.com/help/webstorm/2016.1/running-and-debugging-node-js.html</a></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4996722,
      "name": "OneMoreQuestion",
      "reputation": 666
    }
  },
  {
    "soID": 37425858,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/37425858",
    "title": null,
    "body": "<p>I basically do it like the following, creating a new element and attach that to head:</p>\n\n<pre><code>var x = document.createElement('script');\nx.src = 'http://example.com/test.js';\ndocument.getElementsByTagName(\"head\")[0].appendChild(x);\n</code></pre>\n\n<p>In <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"nofollow noreferrer\">jQuery</a>:</p>\n\n<pre><code>// jQuery\n$.getScript('/path/to/imported/script.js', function()\n{\n    // Script is now loaded and executed.\n    // Put your dependent JavaScript code here.\n});\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5070482,
      "name": "Rahul Srivastava",
      "reputation": 74
    }
  },
  {
    "soID": 37134649,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/37134649",
    "title": null,
    "body": "<p><em>To Empty a Current memory location of an array use: <code>'myArray.length = 0'</code> or <code>'myArray.pop() UN-till its length is 0'</code></em></p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\" rel=\"nofollow\"><code>length</code></a> : Pops till length of an array is of Specified Size.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop\" rel=\"nofollow\"><code>pop()</code></a>  : The pop method removes the last element from a current memory address of an array.</li>\n</ul>\n\n<p>Example:</p>\n\n<pre><code>var mainArr = new Array();\nmainArr = ['1', '2', '3', '4'];\n\nvar refArr = mainArr;\nconsole.log('Current', mainArr, 'Refered', refArr);\n\nrefArr.length = 3;\nconsole.log('Length: ~ Current', mainArr, 'Refered', refArr);\n\nmainArr.push('0');\nconsole.log('Push to the End of Current Array Memory Location \\n~ Current', mainArr, 'Refered', refArr);\n\nmainArr.poptill_length(0);\nconsole.log('Empty Array \\n~ Current', mainArr, 'Refered', refArr);\n\nArray.prototype.poptill_length = function (e) {\n  while (this.length) {\n    if( this.length == e ) break;\n\n    console.log('removed last element:', this.pop());\n  }\n};\n</code></pre>\n\n<p><em>Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\" rel=\"nofollow\"><code>slice()</code></a> : when you want to clone an array from given array with new memory address, So that any modification on cloneArr will not affect to an actual array.</em></p>\n\n<p><em>Empty Array with new Memory address use : slice(0, 0)</em></p>\n\n<pre><code>var cloneArr = mainArr.slice(0, 3); \nconsole.log('Main', mainArr, '\\tCloned', cloneArr);\n\ncloneArr.length = 0; // Clears current memory location of an array.\nconsole.log('Main', mainArr, '\\tCloned', cloneArr);\n</code></pre>\n\n<p><em>To assigning new empty array <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" rel=\"nofollow\"><code>[]</code></a> with a new memory location.</em></p>\n\n<pre><code>mainArr = []; // a new empty array is addressed to mainArr.\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5081877,
      "name": "Yash",
      "reputation": 1502
    }
  },
  {
    "soID": 35791028,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/35791028",
    "title": null,
    "body": "<p>Here is the working code with prototype:</p>\n\n<pre><code>String.prototype.replaceAll = function(find, replace) {\n    var str = this;\n    return str.replace(new RegExp(find.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\"), 'g'), replace);\n};\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5083810,
      "name": "Nivesh Saharan",
      "reputation": 21
    }
  },
  {
    "soID": 45188614,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/45188614",
    "title": null,
    "body": "<p>If you want to redirect to a route within the same app simply</p>\n\n<pre><code>window.location.pathname = '/examplepath'\n</code></pre>\n\n<p>would be the way to go.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5097493,
      "name": "RuNpiXelruN",
      "reputation": 417
    }
  },
  {
    "soID": 36227868,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/36227868",
    "title": null,
    "body": "<p>A lot of times this happens to me from javascript to my php api, because one of a few reasons. \nI forget to put the <code>&lt;?php header('Access-Control-Allow-Origin: *'); ?</code> is one. This is helpful for cross sub domain access. Another reason, is because in jQuery ajax request I am specifying a specific dataType and returning a different dataType, so it throws an error. </p>\n\n<p>The Last and most prominent reasoning for this error is there is a parse error on the page you are requesting. If you hit that page url in your browser than more than likely you will see a parse error and you will have a line number to address the issue. </p>\n\n<p>I hope this helps someone. It took me a while each time to debug this and I wish I had a checklist of things to verify.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5111994,
      "name": "Garrett Tacoronte",
      "reputation": 308
    }
  },
  {
    "soID": 35790273,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/35790273",
    "title": null,
    "body": "<p>All way to make a redirect from the client side:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n    &lt;head&gt;\r\n        &lt;title&gt;JavaScript and jQuery example to redirect a page or URL &lt;/title&gt;\r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n        &lt;div id=\"redirect\"&gt;\r\n            &lt;h2&gt;Redirecting to another page&lt;/h2&gt;\r\n        &lt;/div&gt;\r\n\r\n        &lt;script src=\"scripts/jquery-1.6.2.min.js\"&gt;&lt;/script&gt;\r\n        &lt;script&gt;\r\n            // JavaScript code to redirect a URL\r\n            window.location.replace(\"http://stackoverflow.com\");\r\n            // window.location.replace('http://code.shouttoday.com');\r\n\r\n            // Another way to redirect page using JavaScript\r\n\r\n            // window.location.assign('http://code.shouttoday.com');\r\n            // window.location.href = 'http://code.shouttoday.com';\r\n            // document.location.href = '/relativePath';\r\n\r\n            //jQuery code to redirect a page or URL\r\n            $(document).ready(function(){\r\n                //var url = \"http://code.shouttoday.com\";\r\n                //$(location).attr('href',url);\r\n                // $(window).attr('location',url)\r\n                //$(location).prop('href', url)\r\n            });\r\n        &lt;/script&gt;\r\n    &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5150781,
      "name": "Zigri2612",
      "reputation": 686
    }
  },
  {
    "soID": 37011914,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/37011914",
    "title": null,
    "body": "<p>Although people have mentioned the use of regex but there's a better approach if you want to replace the text irrespective of the case of the text. Like uppercase or lowercase. Use below syntax</p>\n\n<pre><code>//Consider below example\noriginalString.replace(/stringToBeReplaced/gi, '');\n\n//Output will be all the occurrences removed irrespective of casing.\n</code></pre>\n\n<p>You can refer the detailed example <a href=\"http://www.cheezycode.com/2015/08/javascript-hacks-for-html-webpage.html\" rel=\"nofollow\">here</a>.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5188835,
      "name": "Cheezy Code",
      "reputation": 900
    }
  },
  {
    "soID": 32434946,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/32434946",
    "title": null,
    "body": "<pre><code>window.location = \"http://www.gmail.com\";\n</code></pre>\n\n<p>or else</p>\n\n<pre><code>window.location.href = \"http://www.gmail.com\";\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5219041,
      "name": "Mathusuthanan",
      "reputation": 99
    }
  },
  {
    "soID": 38916704,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/38916704",
    "title": null,
    "body": "<p>You can't import, but you can reference.</p>\n\n<p><a href=\"https://en.wikipedia.org/wiki/PhpStorm\" rel=\"nofollow noreferrer\">PhpShtorm</a> IDE. To reference, in one <code>.js</code> file to another <code>.js</code>, just add this to the top of the file:</p>\n\n<pre><code>&lt;reference path=\"../js/file.js\" /&gt;\n</code></pre>\n\n<p>Of course, you should use your own PATH to the JavaScript file.</p>\n\n<p>I don't know if it will work in other IDEs. Probably yes, just try. It should work in Visual Studio too.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5235380,
      "name": "Evgeniy Miroshnichenko",
      "reputation": 197
    }
  },
  {
    "soID": 36889350,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/36889350",
    "title": null,
    "body": "<p>This can handle generating upto 20 digit UNIQUE random number</p>\n\n<p><strong>JS</strong></p>\n\n<pre><code>var generatedNumbers = [];\n\nfunction generateRandomNumber(precision) { // precision --&gt; number precision in integer \n    if (precision &lt;= 20) {\n        var randomNum = Math.round(Math.random().toFixed(precision) * Math.pow(10, precision));\n        if (generatedNumbers.indexOf(randomNum) &gt; -1) {\n            if (generatedNumbers.length == Math.pow(10, precision))\n                return \"Generated all values with this precision\";\n                return generateRandomNumber(precision);\n        } else {\n            generatedNumbers.push(randomNum);\n            return randomNum;\n        }\n    } else\n       return \"Number Precision shoould not exceed 20\";\n}\ngenerateRandomNumber(1);\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/Bb1bo.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/Bb1bo.jpg\" alt=\"enter image description here\"></a></p>\n\n<p><a href=\"http://jsfiddle.net/Nofiden/6ae8up1k/2/\" rel=\"nofollow noreferrer\">JsFiddle</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5242405,
      "name": "Nofi",
      "reputation": 740
    }
  },
  {
    "soID": 35770082,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/35770082",
    "title": null,
    "body": "<h2>jQuery code to redirect a page or URL</h2>\n\n<blockquote>\n  <p><strong>First Way</strong></p>\n</blockquote>\n\n<p>Here is the jQuery code for redirecting a page. Since, I have put this code on the $(document).ready() function, it will execute as soon as the page is loaded.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var url = \"http://stackoverflow.com\";\r\n$(location).attr('href',url);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>You can even pass a URL directly to the <strong>attr()</strong> method, instead of using a variable.</p>\n\n<blockquote>\n  <p><strong>Second Way</strong></p>\n</blockquote>\n\n<pre><code> window.location.href=\"http://stackoverflow.com\";\n</code></pre>\n\n<p>You can also code like this (both are same):</p>\n\n<pre><code>window.location=\"http://stackoverflow.com\";\n</code></pre>\n\n<p>If you are curious about the difference between window.location and <code>window.location.href</code>, then you can see that the latter one is setting <code>href</code> property explicitly, while the former one does it implicitly. Since <code>window.location</code> returns an object, which by default sets its <code>.href</code> property.</p>\n\n<blockquote>\n  <p><strong>Third Way</strong></p>\n</blockquote>\n\n<p>There is another way to redirect a page using JavaScript, the <code>replace()</code> method of <code>window.location</code> object. You can pass a new URL to the <code>replace()</code> method, and it will simulate an HTTP redirect. By the way, remember that <code>window.location.replace()</code> method doesn't put the originating page in the session history, which may affect behavior of the back button. Sometime, it's what you want, so use it carefully.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Doesn't put originating page in history\r\nwindow.location.replace(\"http://stackoverflow.com\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<blockquote>\n  <p><strong>Fourth Way</strong></p>\n</blockquote>\n\n<p>like <strong>attr()</strong> method (after jQuery 1.6 introduce) </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var url = \"http://stackoverflow.com\";\r\n$(location).prop('href', url);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5246706,
      "name": "Divyesh Kanzariya",
      "reputation": 1129
    }
  },
  {
    "soID": 34749018,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/34749018",
    "title": null,
    "body": "<p>In short, instead of the $(document).ready() used in jQuery, we can use a JavaScript method:</p>\n\n<pre><code>&lt;script&gt;\n    document.addEventListener(\"DOMContentLoaded\", function_name, false);\n    function function_name(){\n        statements;\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>Thus, when the page is ready i.e. DOMContentLoaded only then the function function_name() will be invoked.</p>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5251887,
      "name": "Manan Sheth",
      "reputation": 9
    }
  },
  {
    "soID": 36573075,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/36573075",
    "title": null,
    "body": "<p>You can also do something like this</p>\n\n<pre><code>var snipers = \" Vasily Zaytsev, Simo Hayha, Chris Kyle\";\nvar me = \"Josip\";\n\nfunction printSniperStatus (person) {\n    if (aContainsB(snipers, person)) {\n        console.log(person + \" is a sniper.\");\n    } else {\n        console.log(person + \" is NOT a sniper.\");\n    }\n}\n\n// Outputs: \"Josip is NOT a sniper.\"\nprintSniperStatus(me);\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 35180920,
    "parentID": 799981,
    "url": "https://stackoverflow.com/q/35180920",
    "title": null,
    "body": "<p>For IE9+:</p>\n\n<pre><code>function ready(fn) {\n  if (document.readyState != 'loading'){\n    fn();\n  } else {\n    document.addEventListener('DOMContentLoaded', fn);\n  }\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5325015,
      "name": "Joaquinglez",
      "reputation": 421
    }
  },
  {
    "soID": 34040022,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/34040022",
    "title": null,
    "body": "<pre><code>$(window).attr(\"location\",\"http://google.fr\");\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5336915,
      "name": "Divyesh Chothani",
      "reputation": 298
    }
  },
  {
    "soID": 38746956,
    "parentID": 894860,
    "url": "https://stackoverflow.com/q/38746956",
    "title": null,
    "body": "<p>To anyone interested in having there code work in Microsoft Edge, do not use defaults in function parameters. </p>\n\n<pre><code>function read_file(file, delete_after = false) {\n    #code\n}\n</code></pre>\n\n<p>In that example Edge will throw an error \"Expecting ')'\"    </p>\n\n<p>To get around this use</p>\n\n<pre><code>function read_file(file, delete_after) {\n  if(delete_after == undefined)\n  {\n    delete_after = false;\n  }\n  #code\n}\n</code></pre>\n\n<p>As of Aug 08 2016 this is still an issue</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5348487,
      "name": "Steven Johnston",
      "reputation": 653
    }
  },
  {
    "soID": 39589913,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/39589913",
    "title": null,
    "body": "<p>In ES6 we have well-known symbols to expose some previously internal methods, you can use it to define how iterators work for this object:</p>\n\n<pre><code>var p = {\n    \"p1\": \"value1\",\n    \"p2\": \"value2\",\n    \"p3\": \"value3\",\n    *[Symbol.iterator]() {\n        yield *Object.keys(this);\n    }\n};\n\n[...p] //[\"p1\", \"p2\", \"p3\"]\n</code></pre>\n\n<p>this will give the same result as using for...in es6 loop.</p>\n\n<pre><code>for(var key in p) {\n    console.log(key);\n}\n</code></pre>\n\n<p>But its important to know the capabilities you now have using es6!</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5384679,
      "name": "Ahmad Bamieh",
      "reputation": 2964
    }
  },
  {
    "soID": 41119113,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/41119113",
    "title": null,
    "body": "<p>In <strong>JQuery</strong>,use  <code>$(location).attr('href',url)</code>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(document).ready(function(){\r\n  var url = \"https://www.youtube.com/watch?v=JwMKRevYa_M\";\r\n  $(location).attr('href',url);//using this \r\n                        });</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>In <em>raw</em> <strong>JavaScript</strong>,there are a number of ways to achieve that:</p>\n\n<pre><code>window.location.href=\"https://www.youtube.com/watch?v=JwMKRevYa_M\"; \n</code></pre>\n\n<p>- sets href property explicitly.</p>\n\n<pre><code>window.location = \"http://www.GameOfThrones.com\";\n</code></pre>\n\n<p>-does it implicitly Since window.location returns an object, which by default sets it's .href property.</p>\n\n<pre><code>window.location.replace(\"http://www.stackoverflow.com\");\n</code></pre>\n\n<p>- replaces the location of the current window with the new one.</p>\n\n<pre><code>self.location = \"http://www.somewebsite.com\";\n</code></pre>\n\n<p>-sets the location of the current window itself.</p>\n\n<p>Here is an example of JavaScript redirecting after a certain time(3 seconds):</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>&lt;script&gt;\r\nsetTimeout(function() {\r\n  window.location.href = \"https://www.youtube.com/\";\r\n}, 3000);\r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5401681,
      "name": "Achilles",
      "reputation": 2651
    }
  },
  {
    "soID": 33363087,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/33363087",
    "title": null,
    "body": "<p>Below is the function to change the URL without reloading the page. It only support for HTML5</p>\n\n<pre><code>  function ChangeUrl(page, url) {\n        if (typeof (history.pushState) != \"undefined\") {\n            var obj = {Page: page, Url: url};\n            history.pushState(obj, obj.Page, obj.Url);\n        } else {\n            window.location.href = \"homePage\";\n            // alert(\"Browser does not support HTML5.\");\n        }\n    }\n\n  ChangeUrl('Page1', 'homePage');\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5413785,
      "name": "Suraj",
      "reputation": 560
    }
  },
  {
    "soID": 42469170,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/42469170",
    "title": null,
    "body": "<p>Basically <strong>jQuery</strong> is a <strong>javascript</strong> library and for doing some of the things like this, you can use pure javascript, so in that case you have 3 options using vanilla javascript:</p>\n\n<p>1) Using location <strong>replace</strong>, this will replace the current history of the page, means that it is not possible to use the \"back\" button to go back to the original page.</p>\n\n<pre><code>window.location.replace(\"http://stackoverflow.com\");\n</code></pre>\n\n<p>2) Using location <strong>assign</strong>, this will keep the history for you and with using back button, you can go back to the original page:</p>\n\n<pre><code>window.location.assign(\"http://stackoverflow.com\");\n</code></pre>\n\n<p>3) I recommend using one of those previous ways, but this could be the third option using pure javascript: </p>\n\n<pre><code>window.location.href=\"http://stackoverflow.com\";\n</code></pre>\n\n<p>You can also write a function in jQuery to handle it, but not recommended as it's only one line pure javascript function, also you can use all of above functions without window if you are already in the window scope, for example <code>window.location.replace(\"http://stackoverflow.com\");</code> could be <code>location.replace(\"http://stackoverflow.com\");</code></p>\n\n<p>Also I show them all on the image below:</p>\n\n<p><a href=\"https://i.stack.imgur.com/ODheM.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/ODheM.jpg\" alt=\"enter image description here\"></a></p>\n",
    "score": 26,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 43421783,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/43421783",
    "title": null,
    "body": "<p>In ES6, we have something calls <strong>includes</strong> which does exactly what you want:\nSo you can simply do this:</p>\n\n<pre><code>'str1'.includes('str2');\n</code></pre>\n\n<p>Also in ES5, if you widely use it, you can simply add it like this:</p>\n\n<pre><code>String.prototype.includes = String.prototype.includes || function(str) {\n  return this.indexOf(str) &gt; -1;\n}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43918524,
    "parentID": 1986896,
    "url": "https://stackoverflow.com/q/43918524",
    "title": null,
    "body": "<p>The main difference is using call we can change the scope and pass arguments as normal, but apply let you call the using arguments as an Array(pass them as array). but in term of what they to do in your code, they are pretty similar.</p>\n\n<blockquote>\n  <p>While the syntax of this function is almost identical to that of\n  apply(), the fundamental difference is that call() accepts an argument\n  list, while apply() accepts a single array of arguments.</p>\n</blockquote>\n\n<p>So as you see, there is not a big difference, but still there are cases we prefer using call() or apply(). For example look at the code below, which finding smallest and largest number in an array from MDN, using the apply method:</p>\n\n<pre><code>// min/max number in an array\nvar numbers = [5, 6, 2, 3, 7];\n\n// using Math.min/Math.max apply\nvar max = Math.max.apply(null, numbers); \n// This about equal to Math.max(numbers[0], ...)\n// or Math.max(5, 6, ...)\n\nvar min = Math.min.apply(null, numbers)\n</code></pre>\n\n<p>So the main difference is just the way we passing the argumenets:<br> <br> \n<strong>Call:</strong><br> </p>\n\n<pre><code>function.call(thisArg, arg1, arg2, ...);\n</code></pre>\n\n<p><strong>Apply:</strong><br> </p>\n\n<pre><code>function.apply(thisArg, [argsArray]);\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 43961767,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/43961767",
    "title": null,
    "body": "<p>It's always better handle these kinds of stuffs using CSS first, in general, if you can solve something using CSS, go for that first, then try JavaScript to solve your problems, so in this case try using <code>:first-letter</code> in CSS and apply <code>text-transform:capitalize;</code> </p>\n\n<p>So try creating class for that, so you can use it globally, for example: <code>.first-letter-uppercase</code> and add something like below in your CSS:</p>\n\n<pre><code>.first-letter-uppercase:first-letter {\n    text-transform:capitalize;\n}\n</code></pre>\n\n<p>Also the alternative option is JavaScript, so the best gonna be something like this:</p>\n\n<pre><code>function capitalizeTxt(txt) {\n  return txt.charAt(0).toUpperCase() + txt.slice(1);\n}\n</code></pre>\n\n<p>and call it like:</p>\n\n<pre><code>capitalizeTxt('this is a test'); // return 'This is a test'\ncapitalizeTxt('the Eiffel Tower'); // return 'The Eiffel Tower'\ncapitalizeTxt('/index.html');  // return '/index.html'\n</code></pre>\n\n<p>If you  want to reuse it over and over, it's better attach it to javascript native String, so something like below:</p>\n\n<pre><code>String.prototype.capitalizeTxt = String.prototype.capitalizeTxt || function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}\n</code></pre>\n\n<p>and call it as below:</p>\n\n<pre><code>'this is a test'.capitalizeTxt(); // return 'This is a test'\n'the Eiffel Tower'.capitalizeTxt(); // return 'The Eiffel Tower'\n'/index.html'.capitalizeTxt();  // return '/index.html'\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 42954820,
    "parentID": 762011,
    "url": "https://stackoverflow.com/q/42954820",
    "title": null,
    "body": "<p>The main difference is the Scope difference, while <strong>let</strong> can be only available inside the scope it's declared, like in for loop, <strong>var</strong> can be access outside the loop for example. From the documentation in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\" rel=\"nofollow noreferrer\">MDN</a> (examples also from MDN):</p>\n\n<blockquote>\n  <p><strong>let</strong> allows you to declare variables that are limited in scope to the block, statement, or expression on which it is used. This is unlike the <strong>var</strong> keyword, which defines a variable globally, or locally to an entire function regardless of block scope.</p>\n  \n  <p>Variables declared by <strong>let</strong> have as their scope the block in which they are defined, as well as in any contained sub-blocks. In this way, <strong>let</strong> works very much like <strong>var</strong>. The main difference is that the scope of a <strong>var</strong> variable is the entire enclosing function:</p>\n</blockquote>\n\n<pre><code>function varTest() {\n  var x = 1;\n  if (true) {\n    var x = 2;  // same variable!\n    console.log(x);  // 2\n  }\n  console.log(x);  // 2\n}\n\nfunction letTest() {\n  let x = 1;\n  if (true) {\n    let x = 2;  // different variable\n    console.log(x);  // 2\n  }\n  console.log(x);  // 1\n}`\n</code></pre>\n\n<blockquote>\n  <p>At the top level of programs and functions, <strong>let</strong>, unlike <strong>var</strong>, does not create a property on the global object. For example:</p>\n</blockquote>\n\n<pre><code>var x = 'global';\nlet y = 'global';\nconsole.log(this.x); // \"global\"\nconsole.log(this.y); // undefined\n</code></pre>\n\n<blockquote>\n  <p>When used inside a block, let limits the variable's scope to that block. Note the difference between <strong>var</strong> whose scope is inside the function where it is declared.</p>\n</blockquote>\n\n<pre><code>var a = 1;\nvar b = 2;\n\nif (a === 1) {\n  var a = 11; // the scope is global\n  let b = 22; // the scope is inside the if-block\n\n  console.log(a);  // 11\n  console.log(b);  // 22\n} \n\nconsole.log(a); // 11\nconsole.log(b); // 2\n</code></pre>\n\n<p>Also don't forget it's ECMA6 feature, so it's not fully supported yet, so it's better always transpiles it to ECMA6 using Babel etc... for more info about visit <a href=\"https://babeljs.io\" rel=\"nofollow noreferrer\">babel website</a></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 44868657,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/44868657",
    "title": null,
    "body": "<p>In modern browsers and HTML5, there is a method called <code>pushState</code> on on window <code>history</code>. That will change the URL and push it to the history without loading the page.</p>\n\n<p>You can use it like this, it will take 3 parameters, 1) state object 2) title and a URL):</p>\n\n<pre><code>window.history.pushState({page: \"another\"}, \"another page\", \"example.html\");\n</code></pre>\n\n<p>This will change the url, but not reload the page, also doesn't check if the page exist, so if you some javascript code which be reacting to the URL, you can work with them like this.</p>\n\n<p>Also there is <code>history.replaceState()</code> which does exactly the same thing, except it will modify the current history instead of creating a new one!</p>\n\n<p>Also you can create a function to check if history.pushState exist, then carry on with the rest like this:</p>\n\n<pre><code>function goTo(page, title, url) {\n  if (\"undefined\" !== typeof history.pushState) {\n    history.pushState({page: page}, title, url);\n  } else {\n    window.location.assign(url);   \n  }\n}\n\ngoTo(\"another page\", \"example\", 'example.html');\n</code></pre>\n\n<p>Also you can change the <code>#</code> for <code>&lt;HTML5 browsers</code>, which won't reload the page, that's the way <code>Angular</code> use to do <code>SPA</code> according to hashtag...</p>\n\n<p>Changing <code>#</code> is quite easy, doing like:</p>\n\n<pre><code>window.location.hash = \"example\";\n</code></pre>\n\n<p>and you can detect it like this:</p>\n\n<pre><code>window.onhashchange = function () {\n  console.log(\"#changed\", window.location.hash);\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 44950864,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/44950864",
    "title": null,
    "body": "<p><strong>OK,</strong> imagine you have this object below and you want to clone it:</p>\n\n<pre><code>let obj = {a:1, b:2, c:3}; //ES6\n</code></pre>\n\n<p>or</p>\n\n<pre><code>var obj = {a:1, b:2, c:3}; //ES5\n</code></pre>\n\n<p>The answer is mainly depeneds on which <strong>ECMAscript</strong> you using, in <code>ES6+</code>, you can simply use <code>Object.assign</code> to do the clone:</p>\n\n<pre><code>let cloned = Object.assign({}, obj); //new {a:1, b:2, c:3};\n</code></pre>\n\n<p>or using spread operator like this:</p>\n\n<pre><code>let cloned = {...obj}; //new {a:1, b:2, c:3};\n</code></pre>\n\n<p>But if you using <code>ES5</code>, you can use few methods, but the <code>JSON.stringify</code>, just make sure you not using for a big chunk of data to copy, but it could be one line handy way in many cases, something like this:</p>\n\n<pre><code>let cloned = JSON.parse(JSON.stringify(obj)); \n//new {a:1, b:2, c:3};, can be handy, but avoid using on big chunk of data over and over\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44212505,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/44212505",
    "title": null,
    "body": "<p>Yes, you can do the same in JavaScript using loop, but not limited to that, many ways to do loop over arrays in JavaScrip, imagine you have this array below and you like do a loop over it:</p>\n\n<pre><code>var arr = [1, 2, 3, 4, 5];\n</code></pre>\n\n<p>These are the solutions:</p>\n\n<p><strong>1) For loop</strong></p>\n\n<p>For loop is a common way looping through arrays in JavaScript, but no considered as the fastest solutions for large arrays:</p>\n\n<pre><code>for (var i=0, l=arr.length; i&lt;l; i++) { \n  console.log(arr[i]);\n}\n</code></pre>\n\n<p><strong>2) While loop</strong></p>\n\n<p>While loop considered as the fastest way to loop through long arrays, but usually less used in the JavaScript:</p>\n\n<pre><code>var i=0;\n\nwhile (arr.length&gt;i) {\n    console.log(arr[i]);\n    i++;\n}\n</code></pre>\n\n<p><strong>3) Do while</strong><br>\nDo while doing the same thing as while with some syntax difference as below:</p>\n\n<pre><code>var i=0;\ndo {\n  console.log(arr[i]);\n  i++;\n}\nwhile (arr.length&gt;i);\n</code></pre>\n\n<p>These are the main ways to do javascript loops, but there are few more ways to do that.</p>\n\n<p>Also we use <code>for in</code> loop for looping over objects in javascript.</p>\n\n<p>Also look at <code>map()</code>, <code>filter()</code>, <code>reduce()</code> etc functions on Array in JavaScript. They may do things much faster and better than using <code>while</code> and <code>for</code>.</p>\n\n<p>This is good article if you like to learn more about the async functions over arrays in JavaScript.</p>\n\n<blockquote>\n  <p>Functional programming has been making quite a splash in the\n  development world these days. And for good reason: Functional\n  techniques can help you write more declarative code that is easier to\n  understand at a glance, refactor, and test.</p>\n  \n  <p>One of the cornerstones of functional programming is its special use\n  of lists and list operations. And those things are exactly what the\n  sound like they are: arrays of things, and the stuff you do to them.\n  But the functional mindset treats them a bit differently than you\n  might expect.</p>\n  \n  <p>This article will take a close look at what I like to call the \"big\n  three\" list operations: map, filter, and reduce. Wrapping your head\n  around these three functions is an important step towards being able\n  to write clean functional code, and opens the doors to the vastly\n  powerful techniques of functional and reactive programming.</p>\n  \n  <p>It also means you'll never have to write a for loop again.</p>\n</blockquote>\n\n<p>Read more>> <a href=\"https://code.tutsplus.com/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209\" rel=\"noreferrer\">here</a>:</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 44154594,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/44154594",
    "title": null,
    "body": "<p>This is one of the places which <strong>two ways data binding</strong> that's used in many new JavaScript frameworks will work greatly!</p>\n\n<p>So if you are using <strong>Angular, React</strong> or any other frameworks which do <strong>two ways data binding,</strong> this issue is simply fixed, so in easy word, your result is undefined at the first stage, so you have got <code>result = undefined</code> before you recieve the data, then as soon as you get the result, it will updated and get assigned to the new value which is respond of your Ajax call...</p>\n\n<p>But how you can do it in pure <strong>javascript</strong> or <strong>jQuery</strong> for example as you asked in this question?</p>\n\n<p>You can use a <strong>callback</strong>, <strong>promise</strong> and recently <strong>observable</strong> to handle it for you, for example in promises we have some function like success() or then() which will be executed when your data is ready for you, same with callback or <strong>subscribe</strong> function on <strong>observable</strong>.</p>\n\n<p>For example in your case which you are using jQuery, you can do something like this:</p>\n\n<pre><code>$(document).ready(function(){\n    function foo() {\n        $.ajax({url: \"api/data\", success: function(data){\n            fooDone(data); //after we have data, we pass it to fooDone\n        }});\n    };\n\n    function fooDone(data) {\n        console.log(data); //fooDone has the data and console.log it\n    };\n\n    foo(); //call happens here\n});\n</code></pre>\n\n<p>For more information study about <strong>promises</strong> and <strong>observables</strong> which are newer ways to do this async stuffs.</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 44155755,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/44155755",
    "title": null,
    "body": "<p>You can easily create a function to do that, change the length or even add it to native Array as remove() function for reuse.</p>\n\n<p>Imagine you have this array:</p>\n\n<pre><code>var arr = [1, 2, 3, 4, 5]; //the array\n</code></pre>\n\n<p>OK, just simply run this:</p>\n\n<pre><code>arr.length = 0; //change the length\n</code></pre>\n\n<p>and the result is:</p>\n\n<pre><code>[] //result\n</code></pre>\n\n<p>easy way to empty an array...</p>\n\n<p>Also using loop which is not necessary but just another way to do that:</p>\n\n<pre><code>/* could be arr.pop() or arr.splice(0)\ndon't need to return as main array get changed */\n\nfunction emptyArr(arr) {\n  while(arr.length) {\n    arr.shift(); \n  }\n}\n</code></pre>\n\n<p>There are also tricky way which you can think about, for example something like this:</p>\n\n<pre><code>arr.splice(0, arr.length); //[]\n</code></pre>\n\n<p>So if arr has 5 items, it will splice 5 items from 0, which means nothing will remain in the array.</p>\n\n<p>Also other ways like simply reassign the array for example:</p>\n\n<pre><code>arr = []; //[]\n</code></pre>\n\n<p>If you look at the Array functions, there are many other ways to do this, but the most recommended one could be changing the length.</p>\n\n<p>As I said in the first place, you can also prototype remove() as it's the answer to your question. you can simply choose one of the methods above and prototype it to Array object in JavaScript, something like:</p>\n\n<pre><code>Array.prototype.remove = Array.prototype.remove || function() {\n  this.splice(0, this.length);\n};\n</code></pre>\n\n<p>and you can simply call it like this to empty any array in your javascript application:</p>\n\n<pre><code>arr.remove(); //[]\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 44732684,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/44732684",
    "title": null,
    "body": "<p><code>!!</code> it's using <code>NOT</code> operation twice together, <code>!</code> convert the value to a <code>boolean</code> and reverse it, here is a the simple example to see how <code>!!</code> works:</p>\n\n<p>At first place you have:</p>\n\n<pre><code>var zero = 0;\n</code></pre>\n\n<p>Then you do <code>!0</code>, it will be converted to boolean and be evaluated to <code>true</code>, because 0 is <code>falsy</code>, so you get the reversed value and converted to boolean, so it gets evaluated to <code>true</code>.</p>\n\n<pre><code>!zero; //true\n</code></pre>\n\n<p>but we don't want the revered boolean version of the value, so we can reverse it again to get our result! That's why we use another <code>!</code>.</p>\n\n<p>Basically, <code>!!</code> make us sure, the value we get is boolean, not falsy, truthy or string etc...</p>\n\n<p>So  it's like using <code>Boolean</code> function in javascript, but easy and shorter way to convert a value to boolean:</p>\n\n<pre><code>var zero = 0;\n!!zero; //false\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 44391621,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/44391621",
    "title": null,
    "body": "<p>Using <code>RegExp</code> in JavaScript could do the job for you, just simply do something like below:</p>\n\n<pre><code>var str =\"Test abc test test abc test test test abc test test abc\";\nstr = str.replace(/abc/g, '');\n</code></pre>\n\n<p>If you think of reuse, create a function to do that for you, but it's not recommended as it's only one line function, but again if you heavily get use of this, you can write something like this:</p>\n\n<pre><code>String.prototype.replaceAll = String.prototype.replaceAll || function(s, r) {\n  return this.replace(new RegExp(s, 'g'), r);\n};\n</code></pre>\n\n<p>and simply use it in your code over and over like below:</p>\n\n<pre><code>var str =\"Test abc test test abc test test test abc test test abc\";\nstr = str.replaceAll('abc', '');\n</code></pre>\n\n<p>But as I mention earlier, it won't make a huge difference in terms of lines to be written or performance, only caching the function may effect some faster performance on long strings and also a good practice of DRY code if you want to reuse.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 40470792,
    "parentID": 728360,
    "url": "https://stackoverflow.com/q/40470792",
    "title": null,
    "body": "<p>Per <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Deep_Clone\" rel=\"noreferrer\">MDN</a>:</p>\n\n<ul>\n<li>If you want shallow copy, use <code>Object.assign({}, a)</code></li>\n<li>For \"deep\" copy, use <code>JSON.parse(JSON.stringify(a))</code></li>\n</ul>\n\n<p>And no need for external libaries but you need to check <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Browser_compatibility\" rel=\"noreferrer\">browser compatablity first</a>.</p>\n",
    "score": 50,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 42880438,
    "parentID": 572897,
    "url": "https://stackoverflow.com/q/42880438",
    "title": null,
    "body": "<p>It may help to categorise prototype chains into two categories.</p>\n\n<p>Consider the constructor:</p>\n\n<pre><code> function Person() {}\n</code></pre>\n\n<p>The value of <code>Object.getPrototypeOf(Person)</code> is a function. In fact, it is <code>Function.prototype</code>. Since <code>Person</code> was created as a function, it shares the same prototype function object that all functions have. It is the same as <code>Person.__proto__</code>, but that property should not be used. Anyway, with <code>Object.getPrototypeOf(Person)</code> you effectively walk up the ladder of what is called the prototype chain.</p>\n\n<p>The chain in upward direction looks like this:</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;<code>Person</code> → <code>Function.prototype</code> → <code>Object.prototype</code> (end point)</p>\n\n<p>Important is that this prototype chain has little to do with the objects that <code>Person</code> can <em>construct</em>. Those constructed objects have their own prototype chain, and this chain can potentially have no close ancestor in common with the one mentioned above.</p>\n\n<p>Take for example this object:</p>\n\n<pre><code>var p = new Person();\n</code></pre>\n\n<p><em>p</em> has no direct prototype-chain relationship with <em>Person</em>. Their relationship is a different one. The object <em>p</em> has its own prototype chain. Using <code>Object.getPrototypeOf</code>, you'll find the chain is as follows:</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;<code>p</code> → <code>Person.prototype</code> → <code>Object.prototype</code> (end point)</p>\n\n<p>There is no function object in this chain (although that could be).</p>\n\n<p>So <code>Person</code> seems related to two kinds of chains, which live their own lives. To \"jump\" from one chain to the other, you use:</p>\n\n<ol>\n<li><p><code>.prototype</code>: jump from the constructor's chain to the created-object's chain. This property is thus only defined for function objects (as <code>new</code> can only be used on functions).</p></li>\n<li><p><code>.constructor</code>: jump from the created-object's chain to the constructor's chain.</p></li>\n</ol>\n\n<p>Here is a visual presentation of the two prototype chains involved, represented as columns:</p>\n\n<p><a href=\"https://i.stack.imgur.com/FPPdI.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/FPPdI.png\" alt=\"enter image description here\"></a></p>\n\n<p>To summarise:</p>\n\n<blockquote>\n  <p>The <code>prototype</code> property gives no information of the <em>subject's</em> prototype chain, but of objects <em>created by</em> the subject. </p>\n</blockquote>\n\n<p>It is no surprise that the name of the property <code>prototype</code> can lead to confusion. It would maybe have been clearer if this property had been named <code>prototypeOfConstructedInstances</code> or something along that line.</p>\n\n<p>You can jump back and forth between the two prototype chains:</p>\n\n<pre><code>Person.prototype.constructor === Person\n</code></pre>\n\n<p>This symmetry can be broken by explicitly assigning a different object to the <code>prototype</code> property (more about that later).</p>\n\n<h3>Create one Function, Get Two Objects</h3>\n\n<p><code>Person.prototype</code> is an object that was created at the same time the function <code>Person</code> was created. It has <code>Person</code> as constructor, even though that constructor did not actually execute yet. So two objects are created at the same time:</p>\n\n<ol>\n<li>The function <code>Person</code> itself</li>\n<li>The object that will act as prototype when the function is called as a constructor</li>\n</ol>\n\n<p>Both are objects, but they have different roles: the function object <em>constructs</em>, while the other object represents the prototype of any object that function will construct. The prototype object will become the parent of the constructed object in its prototype chain.</p>\n\n<p>Since a function is also an object, it also has its own parent in its own prototype chain, but recall that these two chains are about different things. </p>\n\n<p>Here are some equalities that could help grasp the issue -- all of these print <code>true</code>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function Person() {};\r\n\r\n// This is prototype chain info for the constructor (the function object):\r\nconsole.log(Object.getPrototypeOf(Person) === Function.prototype);\r\n// Step further up in the same hierarchy:\r\nconsole.log(Object.getPrototypeOf(Function.prototype) === Object.prototype);\r\nconsole.log(Object.getPrototypeOf(Object.prototype) === null);\r\nconsole.log(Person.__proto__ === Function.prototype);\r\n// Here we swap lanes, and look at the constructor of the constructor\r\nconsole.log(Person.constructor === Function);\r\nconsole.log(Person instanceof Function);\r\n\r\n// Person.prototype was created by Person (at the time of its creation)\r\n// Here we swap lanes back and forth:\r\nconsole.log(Person.prototype.constructor === Person);\r\n// Although it is not an instance of it:\r\nconsole.log(!(Person.prototype instanceof Person));\r\n// Instances are objects created by the constructor:\r\nvar p = new Person();\r\n// Similarly to what was shown for the constructor, here we have\r\n// the same for the object created by the constructor:\r\nconsole.log(Object.getPrototypeOf(p) === Person.prototype);\r\nconsole.log(p.__proto__ === Person.prototype);\r\n// Here we swap lanes, and look at the constructor\r\nconsole.log(p.constructor === Person);\r\nconsole.log(p instanceof Person);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h3>Adding levels to the prototype chain</h3>\n\n<p>Although a prototype object is created when you create a constructor function, you can ignore that object, and assign another object that should be used as prototype for any subsequent instances created by that constructor.</p>\n\n<p>For instance:</p>\n\n<pre><code>function Thief() { }\nvar p = new Person();\nThief.prototype = p; // this determines the prototype for any new Thief objects:\nvar t = new Thief();\n</code></pre>\n\n<p>Now the prototype chain of <em>t</em> is one step longer than that of <em>p</em>:</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;<code>t</code> → <code>p</code> → <code>Person.prototype</code> → <code>Object.prototype</code> (end point)</p>\n\n<p>The other prototype chain is not longer: <code>Thief</code> and <code>Person</code> are siblings sharing the same parent in their prototype chain:</p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;<code>Person</code>}<br>\n&nbsp;&nbsp;&nbsp;&nbsp;<code>Thief</code>&nbsp; } → <code>Function.prototype</code> → <code>Object.prototype</code> (end point)</p>\n\n<p>The earlier presented graphic can then be extended to this (the original <code>Thief.prototype</code> is left out):</p>\n\n<p><a href=\"https://i.stack.imgur.com/m5DXc.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/m5DXc.png\" alt=\"enter image description here\"></a></p>\n\n<p>The blue lines represent prototype chains, the other coloured lines represent other relationships:</p>\n\n<ul>\n<li>between an object and its constructor</li>\n<li>between a constructor and the prototype object that will be used for constructing objects</li>\n</ul>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5459839,
      "name": "trincot",
      "reputation": 78264
    }
  },
  {
    "soID": 43338822,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/43338822",
    "title": null,
    "body": "<p>Please add <code>dataType: 'jsonp'</code> in the Ajax function and it works. (:</p>\n\n<pre>\n\n    $.ajax({\n      type: \"POST\",\n      dataType: 'jsonp',\n      success: function(response) {\n        alert(\"success\");\n      },\n      error: function(response) {\n        console.log(JSON.stringify(response));\n      }\n    });\n\n</pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5465790,
      "name": "Sonu",
      "reputation": 129
    }
  },
  {
    "soID": 35864082,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/35864082",
    "title": null,
    "body": "<pre><code>objs.sort(function(a,b){return b.last_nom&gt;a.last_nom})\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5483872,
      "name": "Roshni Bokade",
      "reputation": 198
    }
  },
  {
    "soID": 37957545,
    "parentID": 1098040,
    "url": "https://stackoverflow.com/q/37957545",
    "title": null,
    "body": "<p><strong>Answer:</strong></p>\n\n<pre><code>if (\"key\" in myObj)\n{\n    console.log(\"key exists!\");\n}\nelse\n{\n    console.log(\"key doesn't exist!\");\n}\n</code></pre>\n\n<p><strong>Explanation:</strong></p>\n\n<p>The <code>in</code> operator will check if the key exists in the object. If you checked if the value was undefined: <code>if (myObj[\"key\"] === 'undefined')</code>, you could run into problems because a key could possibly exist in your object with the <code>undefined</code> value.</p>\n\n<p>For that reason, it is much better practice to first use the <code>in</code> operator and then compare the value that is inside the key once you already know it exists.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5487076,
      "name": "Webeng",
      "reputation": 4615
    }
  },
  {
    "soID": 36825448,
    "parentID": 1527803,
    "url": "https://stackoverflow.com/q/36825448",
    "title": null,
    "body": "<p>I know this question is already answered but my answer could help someone.</p>\n\n<p>I found this simple method on W3Schools:</p>\n\n<pre><code>Math.floor((Math.random() * max) + min);\n</code></pre>\n\n<p>Hope this would help someone.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5517378,
      "name": "PeMaCN",
      "reputation": 602
    }
  },
  {
    "soID": 43390566,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/43390566",
    "title": null,
    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var string = \"foo\",\r\n    substring = \"oo\";\r\nconsole.log(string.indexOf(substring) !== -1);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 44208837,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/44208837",
    "title": null,
    "body": "<p>I just add an another way,</p>\n\n<p>To redirect for any specific page/links of your site to another page, </p>\n\n<p>Just add this line of code</p>\n\n<pre><code>&lt;script&gt;\nif(window.location.href == 'old_url')\n{\n    window.location.href=\"new_url\";\n}\n\n\n//Another url redirect\nif(window.location.href == 'old_url2')\n{\n    window.location.href=\"new_url2\";\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>For real life example,</p>\n\n<pre><code>&lt;script&gt;\nif(window.location.href == 'https://old-site.com')\n{\n    window.location.href=\"https://new-site.com\";\n}\n\n\n//Another url redirect\nif(window.location.href == 'https://old-site.com/simple-post.html')\n{\n    window.location.href=\"https://new-site.com/simple-post.html\";\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>By using this simple code, you can redirect full site or any single page.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5543577,
      "name": "Maniruzzaman Akash",
      "reputation": 82
    }
  },
  {
    "soID": 37309210,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/37309210",
    "title": null,
    "body": "<p>i run this test on chrome console,   using (void 0) you can check undefined  </p>\n\n<pre><code>var c;\nundefined\nif(c === void 0)alert();\n// output =  undefined\nvar c = 1;\n// output =  undefined\nif(c === void 0)alert();\n// output =   undefined\n// check c value  c\n// output =  1\nif(c === void 0)alert();\n// output =  undefined\nc = undefined;\n// output =  undefined\nif(c === void 0)alert();\n// output =   undefined\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5600206,
      "name": "suhail",
      "reputation": 41
    }
  },
  {
    "soID": 45224904,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/45224904",
    "title": null,
    "body": "<p>57 different answers for this question, some off-topic, and yet none of them raise the important issue that none of the solutions listed will work with asian characters, emoji's, and other high unicode-point-value characters in many browsers. Here is a solution that will:</p>\n\n<pre><code>const capitalizeFirstLetter = String.fromCodePoint(65536).length === 1 ?\n    function(S) {\n        \"use-strict\"; // Hooray! The browser uses UTF32!\n        return S.charAt(0).toUpperCase() + string.slice(1);\n    } : function(S) {\n        \"use-strict\";\n        // the browser is using UCS16 to store UTF16\n        return (S.codePointAt(0) &gt; 65535 ? \n            S.slice(0,2).toUpperCase() + string.slice(2) :\n            S.codePointAt(0).toUpperCase() + string.slice(1)\n        );\n    };\n</code></pre>\n\n<p>However, it won't work in IE (but, it does work in edge). So, with microsoft discontinuing windows 7 soon, this shouldn't be too much of a problem.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5601591,
      "name": "lolzery wowzery",
      "reputation": 298
    }
  },
  {
    "soID": 38609422,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/38609422",
    "title": null,
    "body": "<p>Use this:</p>\n\n<pre><code>if ($('input[name=\"salary_in.Basic\"]:checked').length &gt; 0)\n</code></pre>\n\n<p>The length is greater than zero if the checkbox is checked.</p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 40125812,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/40125812",
    "title": null,
    "body": "<pre><code>var xxx = require(\"../lib/your-library.js\")\n</code></pre>\n\n<p>or</p>\n\n<pre><code>import xxx from \"../lib/your-library.js\" //get default export\nimport {specificPart} from '../lib/your-library.js' //get named export\nimport * as _name from '../lib/your-library.js'  //get full export to alias _name\n</code></pre>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5646198,
      "name": "Mesut Yiğit",
      "reputation": 332
    }
  },
  {
    "soID": 40127048,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/40127048",
    "title": null,
    "body": "<p>jQuery: <code>$(location).attr('href', 'http://example.com')</code></p>\n\n<p>JavaScript: <code>window.location.href = \"http://example.com\"</code></p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5646198,
      "name": "Mesut Yiğit",
      "reputation": 332
    }
  },
  {
    "soID": 37910756,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/37910756",
    "title": null,
    "body": "<p>For just capitalizing the first letter and make the rest of the string lower case:</p>\n\n<pre><code>function capitalize(str) {\n     var splittedEnter = str.split(\" \");\n     var capitalized;\n     var capitalizedResult;\n     for (var i = 0 ; i &lt; splittedEnter.length ; i++){\n         capitalized = splittedEnter[i].charAt(0).toUpperCase();\n         splittedEnter[i] = capitalized + splittedEnter[i].substr(1).toLowerCase();\n    }\n    return splittedEnter.join(\" \");\n}\n\ncapitalize(\"tHiS wiLL be alL CapiTaLiZED.\");\n</code></pre>\n\n<p>The result will be:</p>\n\n<blockquote>\n  <p>This Will Be All Capitalized.</p>\n</blockquote>\n\n<p>edit: Thank Peter Mortensen for edit :) </p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5664605,
      "name": "Hadnazzar",
      "reputation": 169
    }
  },
  {
    "soID": 43999010,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/43999010",
    "title": null,
    "body": "<p>You can also use this <a href=\"https://bitsrc.io/bit/utils/global/empty\" rel=\"nofollow noreferrer\">global-empty</a> open source component to determine whether <code>obj</code> reference is empty.</p>\n\n<p>Examples:</p>\n\n<pre><code>empty([]) // =&gt; true\nempty({}) // =&gt; true\nempty(1) // =&gt; false\nempty('') // =&gt; false\nempty('foo') // =&gt; true\n</code></pre>\n\n<p>You can also use <a href=\"https://www.npmjs.com/package/is-empty-object\" rel=\"nofollow noreferrer\">this NPM package</a>.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5674449,
      "name": "Yoni",
      "reputation": 748
    }
  },
  {
    "soID": 40214952,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/40214952",
    "title": null,
    "body": "<p>You can redirect the page by using the below methods:</p>\n\n<ol>\n<li><p>By using a meta tag in the head - <code>&lt;meta http-equiv=\"refresh\" content=\"0;url=http://your-page-url.com\" /&gt;</code>. Note that <code>content=\"0;</code>... is used for after how many seconds you need to redirect the page</p></li>\n<li><p>By using JavaScript: <code>window.location.href = \"http://your-page-url.com\";</code></p></li>\n<li><p>By using jQuery: <code>$(location).attr('href', 'http://yourPage.com/');</code></p></li>\n</ol>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5680730,
      "name": "santoshK",
      "reputation": 424
    }
  },
  {
    "soID": 41063136,
    "parentID": 1129216,
    "url": "https://stackoverflow.com/q/41063136",
    "title": null,
    "body": "<p>So here is one sorting algorithm which can sort in any order , throughout array of any kind of objects , without the restriction of datatype comparison ( i.e. Number , String )</p>\n\n<pre><code>function smoothSort(items,prop,reverse) {  \n    var length = items.length;\n    for (var i = (length - 1); i &gt;= 0; i--) {\n        //Number of passes\n        for (var j = (length - i); j &gt; 0; j--) {\n            //Compare the adjacent positions\n            if(reverse){\n              if (items[j][prop] &gt; items[j - 1][prop]) {\n                //Swap the numbers\n                var tmp = items[j];\n                items[j] = items[j - 1];\n                items[j - 1] = tmp;\n            }\n            }\n\n            if(!reverse){\n              if (items[j][prop] &lt; items[j - 1][prop]) {\n                  //Swap the numbers\n                  var tmp = items[j];\n                  items[j] = items[j - 1];\n                  items[j - 1] = tmp;\n              }\n            }\n        }\n    }\n\n    return items;\n}\n</code></pre>\n\n<ul>\n<li><p>the first argument <em>items</em> is the array of objects , </p></li>\n<li><p><em>prop</em> is the key of the object on which you want to sort ,</p></li>\n<li><p><em>reverse</em> is a boolean parameter which on being true results in Ascending  order and in false it returns descending order.</p></li>\n</ul>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5788789,
      "name": "Partha Roy",
      "reputation": 519
    }
  },
  {
    "soID": 37315621,
    "parentID": 894860,
    "url": "https://stackoverflow.com/q/37315621",
    "title": null,
    "body": "<p>being a long time C++ developer (Rookie to web development :)), when I first came across this situation, I did the parameter assignment in the function definition, like it is mentioned in the question, as follows. </p>\n\n<pre><code>function myfunc(a,b=10)\n</code></pre>\n\n<p>But beware that it doesn't work consistently across browsers. For me it worked on chrome on my desktop, but did not work on chrome on android.\nSafer option, as many have mentioned above is -</p>\n\n<pre><code>    function myfunc(a,b)\n    {\n    if (typeof(b)==='undefined') b = 10;\n......\n    }\n</code></pre>\n\n<p>Intention for this answer is not to repeat the same solutions, what others have already mentioned, but to inform that parameter assignment in the function definition may work on some browsers, but don't rely on it.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5813936,
      "name": "vivek",
      "reputation": 152
    }
  },
  {
    "soID": 38552137,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/38552137",
    "title": null,
    "body": "<p>There are multiple ways to do this. But most of the time, you will be fine using the <code>indexOf()</code> method. <code>indexOf()</code> returns the position of the string passed to it as argument and -1 if the string on which it was called doesn't contain the argument string.</p>\n\n<pre><code>var str = \"A cat and a dog\";\nstr.indexOf(\"cat\"); // returns 2\nstr.indexOf(\"panda\"); // returns -1\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 42688768,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/42688768",
    "title": null,
    "body": "<p>Try:</p>\n\n<pre><code>$var = jQuery(\"#dropdownid option:selected\").val();\n   alert ($var);\n</code></pre>\n\n<p>Or to get the text of the option, use <code>text()</code>:</p>\n\n<pre><code>$var = jQuery(\"#dropdownid option:selected\").text();\n   alert ($var);\n</code></pre>\n\n<p><strong>More Info:</strong></p>\n\n<ul>\n<li><a href=\"http://api.jquery.com/val/\" rel=\"nofollow noreferrer\">http://api.jquery.com/val/</a></li>\n<li><a href=\"http://api.jquery.com/text/\" rel=\"nofollow noreferrer\">http://api.jquery.com/text/</a></li>\n</ul>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5821456,
      "name": "Vishal Thakur",
      "reputation": 342
    }
  },
  {
    "soID": 45071214,
    "parentID": 824349,
    "url": "https://stackoverflow.com/q/45071214",
    "title": null,
    "body": "<p>Use <code>window.history.pushState(\"object or string\", \"Title\", \"/new-url\")</code>, but it's still send new url request to server</p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5860031,
      "name": "Huy Truong",
      "reputation": 47
    }
  },
  {
    "soID": 41744527,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/41744527",
    "title": null,
    "body": "<p>CORS is for you.\nCORS is \"Cross Origin Resource Sharing\", is a way to send cross domain request. Now the XMLHttpRequest2 and Fetch API both support CORS.</p>\n\n<p>But it has its limits. Server need to specific claim the <strong>Access-Control-Allow-Origin</strong>, and it can not be set to '*'.</p>\n\n<p>And if you want any origin can send request to you, you need JSONP (also need to set <strong>Access-Control-Allow-Origin</strong>, but can be '*')</p>\n\n<p>For lots of request way if you don't know what to choose, I think you need a fully functional component to do that. Let me introduce a simple component <strong><a href=\"https://github.com/Joker-Jelly/catta\" rel=\"nofollow noreferrer\">catta</a></strong></p>\n\n<hr>\n\n<p>If you are using a modern browser (> IE9, Chrome, FF, Edge, etc.), Very Recommend you to use a simple but beauty component <strong><a href=\"https://github.com/Joker-Jelly/catta\" rel=\"nofollow noreferrer\">https://github.com/Joker-Jelly/catta</a></strong>. It has no dependence, less than 3KB, and it supports Fetch, AJAX and JSONP with same dead simple syntax and options.</p>\n\n<pre><code>catta('./data/simple.json').then(function (res) {\n  console.log(res);\n});\n</code></pre>\n\n<p>It also supports all the way to import to your project, like ES6 module, CommonJS and even <code>&lt;script&gt;</code> in HTML.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5881703,
      "name": "Jelly",
      "reputation": 329
    }
  },
  {
    "soID": 41464340,
    "parentID": 1643227,
    "url": "https://stackoverflow.com/q/41464340",
    "title": null,
    "body": "<pre><code>var e = document.getElementById(\"dropDownId\");\nvar div = e.options[e.selectedIndex].text;\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5891501,
      "name": "Kalai M",
      "reputation": 629
    }
  },
  {
    "soID": 36956622,
    "parentID": 1232040,
    "url": "https://stackoverflow.com/q/36956622",
    "title": null,
    "body": "<p>The answers that have no less that 2739 upvotes by now are misleading and incorrect.</p>\n\n<p>The question is: \"How do you empty your existing array?\" E.g. for <code>A = [1,2,3,4]</code>.</p>\n\n<ol>\n<li><p>Saying \"<code>A = []</code> is the answer\" is ignorant and absolutely incorrect. <code>[] == []</code> is <strong>false</strong>.</p>\n\n<p>This is because these two arrays are two separate, individual objects, with their own two identities, taking up their own space in the digital world, each on its own.</p></li>\n</ol>\n\n<hr>\n\n<p>Let's say your mother asks you to empty the trash can. </p>\n\n<ul>\n<li>You don't bring in a new one as if you've done what you've been asked for.</li>\n<li>Instead, you empty the trash can. </li>\n<li>You don't replace the filled one with a new empty can, and you don't take the label \"A\" from the filled can and stick it to the new one as in <code>A = [1,2,3,4]; A = [];</code></li>\n</ul>\n\n<p>Emptying an array object is the easiest thing ever:</p>\n\n<pre><code>A.length = 0;\n</code></pre>\n\n<p>This way, the can under \"A\" is not only empty, but also as clean as new!</p>\n\n<hr>\n\n<ol start=\"2\">\n<li><p>Furthermore, you are not required to remove the trash by hand until the can is empty! You were asked to empty the existing one, completely, in one turn, not to pick up the trash until the can gets empty, as in:</p>\n\n<pre><code>while(A.length &gt; 0) {\n    A.pop();\n}\n</code></pre></li>\n<li><p>Nor, to put your left hand at the bottom of the trash, holding it with your right at the top to be able to pull its content out as in:</p>\n\n<pre><code>A.splice(0, A.length);\n</code></pre></li>\n</ol>\n\n<p>No, you were asked to empty it:</p>\n\n<pre><code>A.length = 0;\n</code></pre>\n\n<p>This is the only code that correctly empties the contents of a given JavaScript array.</p>\n",
    "score": 30,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5896426,
      "name": "Bekim Bacaj",
      "reputation": 1510
    }
  },
  {
    "soID": 36984152,
    "parentID": 1279957,
    "url": "https://stackoverflow.com/q/36984152",
    "title": null,
    "body": "<p>Ever tried plain JavaScript... <code>destination.appendChild(source);</code> ? </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>onclick = function(){ destination.appendChild(source); }</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>div{ margin: .1em; } \r\n#destination{ border: solid 1px red; }\r\n#source {border: solid 1px gray; }</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n\r\n &lt;body&gt;\r\n\r\n  &lt;div id=\"destination\"&gt;\r\n   ###\r\n  &lt;/div&gt;\r\n  &lt;div id=\"source\"&gt;\r\n   ***\r\n  &lt;/div&gt;\r\n\r\n &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5896426,
      "name": "Bekim Bacaj",
      "reputation": 1510
    }
  },
  {
    "soID": 36994986,
    "parentID": 1026069,
    "url": "https://stackoverflow.com/q/36994986",
    "title": null,
    "body": "<p>This one will tolerate possible leading whitespaces and will not miss the target of the first letter in a string. Therefore, it might improve already good solutions available on the thread. </p>\n\n<pre><code>str = \"   the Eifel Tower\";\nstr.replace(/\\w/, str.match(/\\w/)[0].toUpperCase());\n&gt;&gt; \"   The Eifel Tower\";\n</code></pre>\n\n<p>!But, will cause a 'soft' error if executed against a blank string.\nTo avoid this possible error or unnecessary processing of a blank string or a number, a ternary conditional guarding can be used:</p>\n\n<pre><code>+str!=+str ?  str.replace(/\\w/, str.match(/\\w/)[0].toUpperCase()) : str;\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5896426,
      "name": "Bekim Bacaj",
      "reputation": 1510
    }
  },
  {
    "soID": 44260535,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/44260535",
    "title": null,
    "body": "<p>How about this? Here, <code>pElement</code> refers to the element you want this <code>div</code> inside (to be a child of! :).</p>\n\n<pre><code>$(\"pElement\").append(\"&lt;div&gt;&lt;/div\");\n</code></pre>\n\n<p>You can easily add anything more to that <code>div</code> in the string - Attributes, Content, you name it. Do note, for attribute values, you need to use the right quotation marks. </p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5903674,
      "name": "Aravind Suresh",
      "reputation": 777
    }
  },
  {
    "soID": 40035553,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/40035553",
    "title": null,
    "body": "<p>simply if you want to create any HTML tag you can try this\nfor example </p>\n\n<pre><code>var selectBody = $('body');\nvar div = $('&lt;div&gt;');\nvar h1  = $('&lt;h1&gt;');\nvar p   = $('&lt;p&gt;');\n</code></pre>\n\n<p>if you want to add any element on the flay you can try this</p>\n\n<pre><code>selectBody.append(div);\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5906922,
      "name": "MEAbid",
      "reputation": 256
    }
  },
  {
    "soID": 36774966,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/36774966",
    "title": null,
    "body": "<p>There are a couple of ways to do it in JavaScript. The first two examples are JavaScript samples. The third one makes use of a JavaScript library, that is, jQuery making use of the <code>.each()</code> function.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var myStringArray = [\"hello\", \"World\"];\r\nfor(var i in myStringArray) {\r\n  alert(myStringArray[i]);\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var myStringArray = [\"hello\", \"World\"];\r\nfor (var i=0; i &lt; myStringArray.length; i++) {\r\n  alert(myStringArray[i]);\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var myStringArray = [\"hello\", \"World\"];\r\n$.each(myStringArray, function(index, value){\r\n  alert(value);\r\n})</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5928186,
      "name": "Shubham Khatri",
      "reputation": 23929
    }
  },
  {
    "soID": 39854041,
    "parentID": 950087,
    "url": "https://stackoverflow.com/q/39854041",
    "title": null,
    "body": "<p>Here is maybe another way! In Node.js you do that just like the following!\n<a href=\"http://requirejs.org/docs/node.html\" rel=\"nofollow\">http://requirejs.org/docs/node.html</a></p>\n\n<p><strong>sub.js</strong></p>\n\n<pre><code>module.exports = {\n  log: function(string) {\n    if(console) console.log(string);\n  }\n  mylog: function(){\n    console.log('just for log test!');\n  }\n}\n</code></pre>\n\n<p><strong>main.js</strong></p>\n\n<pre><code>var mylog =require('./sub');\n\nmylog.log('Hurray, it works! :)');\nmylog.mylog();\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5934465,
      "name": "xgqfrms",
      "reputation": 1282
    }
  },
  {
    "soID": 39935379,
    "parentID": 867916,
    "url": "https://stackoverflow.com/q/39935379",
    "title": null,
    "body": "<p>Its quite simple:<code>$('&lt;div/&gt;').appendTo('body');</code></p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5947615,
      "name": "Tinsten",
      "reputation": 166
    }
  },
  {
    "soID": 45316317,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/45316317",
    "title": null,
    "body": "<p>You can check if the value is undefined or null by simply using typeof:</p>\n\n<pre><code>if(typeof value == 'undefined'){\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6006454,
      "name": "gideon",
      "reputation": 11
    }
  },
  {
    "soID": 40013409,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/40013409",
    "title": null,
    "body": "<p>You can use this code:</p>\n\n<pre><code>$('#isAgeSelected').click(function(){\n   console.log(this.checked);\n   if(this.checked == true) {\n        $(\"#txtAge\").show();\n    } else {\n       $(\"#txtAge\").hide();\n   }\n});\n</code></pre>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 39179383,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/39179383",
    "title": null,
    "body": "<p>Since es2015 is getting more and more popular I am posting this answer which include usage of generator and iterator to smoothly iterate through <code>[key, value]</code> pairs. As it is possible in other languages for instance Ruby.</p>\n\n<p>Ok here is a code:</p>\n\n<pre><code>const MyObject = {\n  'a': 'Hello',\n  'b': 'it\\'s',\n  'c': 'me',\n  'd': 'you',\n  'e': 'looking',\n  'f': 'for',\n  [Symbol.iterator]: function* () {\n    for (const i of Object.keys(this)) {\n      yield [i, this[i]];\n    }\n  }\n};\n\nfor (const [k, v] of MyObject) {\n  console.log(`Here is key ${k} and here is value ${v}`);\n}\n</code></pre>\n\n<p>All information about how can you do an iterator and generator you can find at developer Mozilla page.</p>\n\n<p>Hope It helped someone.</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>ES2017 will include <code>Object.entries</code> which will make iterating over <code>[key, value]</code> pairs in objects even more easier. It is now known that it will be a part of a standard according to the <a href=\"https://github.com/tc39/proposal-object-values-entries\" rel=\"nofollow noreferrer\">ts39</a> stage information.</p>\n\n<p>I think it is time to update my answer to let it became even more fresher than it's now.</p>\n\n<pre><code>const MyObject = {\n  'a': 'Hello',\n  'b': 'it\\'s',\n  'c': 'me',\n  'd': 'you',\n  'e': 'looking',\n  'f': 'for',\n};\n\nfor (const [k, v] of Object.entries(MyObject)) {\n  console.log(`Here is key ${k} and here is value ${v}`);\n}\n</code></pre>\n\n<p>You can find more about usage on\n<a href=\"https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\" rel=\"nofollow noreferrer\">MDN</a> page</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6129691,
      "name": "FieryCod",
      "reputation": 541
    }
  },
  {
    "soID": 36621692,
    "parentID": 684672,
    "url": "https://stackoverflow.com/q/36621692",
    "title": null,
    "body": "<p>Since ES2015 you can use the for of loop, to access the element directly:</p>\n\n<pre><code>// before ES2015\nfor(var key of elements){\n  console.log(elements[key]);\n}\n\n\n// ES2015\nfor(let element of elements){\n  console.log(element);\n}\n</code></pre>\n\n<p>Hope this helps someone.</p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6178786,
      "name": "Marius Bakowski",
      "reputation": 99
    }
  },
  {
    "soID": 38708287,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/38708287",
    "title": null,
    "body": "<p>Array loop:</p>\n\n<pre><code>for(var i = 0; i &lt; things.length; i++){\n    var thing = things[i];\n    console.log(thing);\n}\n</code></pre>\n\n<p>Object loop:</p>\n\n<pre><code>for(var prop in obj){\n    var propValue = obj[prop];\n    console.log(propValue);\n}\n</code></pre>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6253996,
      "name": "Bruno Corrêa Zimmermann",
      "reputation": 598
    }
  },
  {
    "soID": 37365637,
    "parentID": 2010892,
    "url": "https://stackoverflow.com/q/37365637",
    "title": null,
    "body": "<p>To store an object, you could make a letters that you can use to get an object from a string to an object (may not make sense). For example</p>\n\n<pre><code>var obj = {a: \"lol\", b: \"A\", c: \"hello world\"};\nfunction saveObj (key){\n    var j = \"\";\n    for(var i in obj){\n        j += (i+\"|\"+obj[i]+\"~\");\n    }\n    localStorage.setItem(key, j);\n} // Saving Method\nfunction getObj (key){\n    var j = {};\n    var k = localStorage.getItem(key).split(\"~\");\n    for(var l in k){\n        var m = k[l].split(\"|\");\n        j[m[0]] = m[1];\n    }\n    return j;\n}\nsaveObj(\"obj\"); // undefined\ngetObj(\"obj\"); // {a: \"lol\", b: \"A\", c: \"hello world\"}\n</code></pre>\n\n<p>This technique will cause some glitches if you use the letter that you used to split the object, and it's also very experimental.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6266520,
      "name": "Seizefire",
      "reputation": 41
    }
  },
  {
    "soID": 40041015,
    "parentID": 3010840,
    "url": "https://stackoverflow.com/q/40041015",
    "title": null,
    "body": "<p>In JavaScript, there are so many solutions to loop an array.</p>\n\n<p>The code below are popular ones</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>/** Declare inputs */\r\nconst items = ['Hello', 'World']\r\n\r\n/** Solution 1. Simple for */\r\nconsole.log('solution 1. simple for')\r\n\r\nfor (let i = 0; i &lt; items.length; i++) {\r\n  console.log(items[i])\r\n}\r\n\r\nconsole.log()\r\nconsole.log()\r\n\r\n/** Solution 2. Simple while */\r\nconsole.log('solution 2. simple while')\r\n\r\nlet i = 0\r\nwhile (i &lt; items.length) {\r\n  console.log(items[i++])\r\n}\r\n\r\nconsole.log()\r\nconsole.log()\r\n\r\n/** Solution 3. forEach*/\r\nconsole.log('solution 3. forEach')\r\n\r\nitems.forEach(item =&gt; {\r\n  console.log(item)\r\n})\r\n\r\nconsole.log()\r\nconsole.log()\r\n\r\n/** Solution 4. for-of*/\r\nconsole.log('solution 4. for-of')\r\n\r\nfor (const item of items) {\r\n  console.log(item)\r\n}\r\n\r\nconsole.log()\r\nconsole.log()</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6315366,
      "name": "Alongkorn Chetasumon",
      "reputation": 864
    }
  },
  {
    "soID": 37434155,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/37434155",
    "title": null,
    "body": "<p>I think worth mentioning is, that a condition combined with logical AND/OR will not return a boolean value but last success or first fail in case of &amp;&amp; and \nfirst success or last fail in case of || of condition chain.</p>\n\n<pre><code>res = (1 &amp;&amp; 2); // res is 2\nres = (true &amp;&amp; alert) // res is function alert()\nres = ('foo' || alert) // res is 'foo'\n</code></pre>\n\n<p>In order to cast the condition to a true boolean literal we can use the double negation:</p>\n\n<pre><code>res = !!(1 &amp;&amp; 2); // res is true\nres = !!(true &amp;&amp; alert) // res is true\nres = !!('foo' || alert) // res is true\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6331590,
      "name": "GreQ",
      "reputation": 241
    }
  },
  {
    "soID": 40723111,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/40723111",
    "title": null,
    "body": "<p>You can bypass the problem by using YQL to proxy the request through Yahoo's servers. It is just a few lines of code:</p>\n\n<pre><code>var yql_url = 'https://query.yahooapis.com/v1/public/yql';\nvar url = 'your api url';\n\n$.ajax({\n    'url': yql_url,\n    'data': {\n        'q': 'SELECT * FROM json WHERE url=\"'+url+'\"',\n        'format': 'json',\n        'jsonCompat': 'new',\n    },\n    'dataType': 'jsonp',\n    'success': function(response) {\n        console.log(response);\n    },\n});\n</code></pre>\n\n<p>Here's the link with an explanation: <a href=\"https://vverma.net/fetch-any-json-using-jsonp-and-yql.html\" rel=\"nofollow noreferrer\">https://vverma.net/fetch-any-json-using-jsonp-and-yql.html</a></p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6335372,
      "name": "camnesia",
      "reputation": 62
    }
  },
  {
    "soID": 43453733,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/43453733",
    "title": null,
    "body": "<p><code>!!</code> is similar to using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"nofollow noreferrer\"><em>Boolean constructor</em></a>, or arguably more like the <a href=\"https://www.w3schools.com/js/js_booleans.asp\" rel=\"nofollow noreferrer\"><em>Boolean function.</em></a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(Boolean(null)); // Preffered over the Boolean object\r\n\r\nconsole.log(new Boolean(null).valueOf()); // Not recommended for coverting non-boolean values\r\n\r\nconsole.log(!!null); // A hacky way to omit calling the Boolean function, but essentially does the same thing. \r\n\r\n\r\n// The context you saw earlier (your example)\r\nvar vertical;\r\n\r\nfunction Example(vertical)\r\n{\r\n        this.vertical = vertical !== undefined ? !!vertical : \r\n        this.vertical; \r\n        // Let's break it down: If vertical is strictly not undefined, return the boolean value of vertical and set it to this.vertical. If not, don't set a value for this.vertical (just ignore it and set it back to what it was before; in this case, nothing).   \r\n\r\n        return this.vertical;\r\n}\r\n\r\nconsole.log( \"\\n---------------------\" )\r\n\r\n// vertical is currently undefined\r\n\r\nconsole.log(new Example(vertical).vertical); // The falsey or truthy value of this.vertical\r\nconsole.log(!!new Example(vertical).vertical); // Coerced value of this.vertical\r\n\r\nvertical = 12.5; // set vertical to 12.5, a truthy value.\r\nconsole.log(new Example(vertical).vertical); // The falsey or truthy value of this.vertical which happens to be true anyway\r\nconsole.log(!!new Example(vertical).vertical); // Coerced value of this.vertical\r\n\r\nvertical = -0; // set vertical to -0, a falsey value.\r\nconsole.log(new Example(vertical).vertical); // The falsey or truthy value of this.vertical which happens to be false either way\r\nconsole.log(!!new Example(vertical).vertical); // Coerced value of this.vertical</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><em>Falsey values</em> in javascript <strong>coerce</strong> to <em>false</em>, and <em>truthy values</em> <strong>coerce</strong> to <em>true.</em> Falsey and truthy values can also be used in <code>if</code> statements and will essentially \"map\" to their corresponding boolean value. However, you will probably not find yourself having to use proper boolean values often, as they mostly differ in output (return values). </p>\n\n<blockquote>\n  <p>Although this may seem similar to casting, realistically this is likely a <em>mere</em> coincidence and is not 'built' or purposely made for and like a boolean cast. So let's not call it that.</p>\n</blockquote>\n\n<hr />\n\n<h3>Why and how it works</h3>\n\n<p>To be concise, it looks something like this: <code>! ( !null )</code>. Whereas, <code>null</code> is <strong>falsey</strong>, so <code>!null</code> would be <strong>true</strong>. Then <code>!true</code> would be <strong>false</strong> and it would essentially <em>invert back</em> to what it was before, \nexcept this time as a <em>proper boolean value</em> (or even <em>vice versa</em> with <em>truthy values</em>  like <code>{}</code> or <code>1</code>).   </p>\n\n<p><br /></p>\n\n<h3>Going back to your example</h3>\n\n<p>Overall, the context that you saw simply adjusts <code>this.vertical</code> depending on whether or not <code>vertical</code> is defined, and if so; it will be set to the resulting boolean value of vertical, otherwise it will not change. In other words, if <code>vertical</code> is defined; <code>this.vertical</code> will be set to the boolean value of it, otherwise, it will stay the same. I guess that in itself is an example of how you would use <code>!!</code>, and what it does.</p>\n\n<p><br /></p>\n\n<h3>Vertical I/O Example</h3>\n\n<p>Run this example and fiddle around with the vertical value in the input. See what the result coerces to so that you can fully understand your context's code. In the input, enter any valid javascript value.\n<strong>Remember to include the quotations if you are testing out a string.</strong> Don't mind the CSS and HTML code too much, simply run this snippet and play around with it. However, you might want to take a look at the non-DOM-related javascript code though (the use of the Example constructor and the vertical variable).</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var vertical = document.getElementById(\"vertical\");\r\nvar p = document.getElementById(\"result\");\r\n\r\nfunction Example(vertical)\r\n{\r\n        this.vertical = vertical !== undefined ? !!vertical : \r\n        this.vertical;   \r\n\r\n        return this.vertical;\r\n}\r\n\r\ndocument.getElementById(\"run\").onclick = function()\r\n{\r\n\r\n  p.innerHTML = !!( new Example(eval(vertical.value)).vertical );\r\n  \r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>input\r\n{\r\n  text-align: center;\r\n  width: 5em;\r\n} \r\n\r\nbutton \r\n{\r\n  margin: 15.5px;\r\n  width: 14em;\r\n  height: 3.4em;\r\n  color: blue;\r\n}\r\n\r\nvar \r\n{\r\n  color: purple;\r\n}\r\n\r\np {\r\n  margin: 15px;\r\n}\r\n\r\nspan.comment {\r\n  color: brown;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!--Vertical I/O Example--&gt;\r\n&lt;h4&gt;Vertical Example&lt;/h4&gt;\r\n&lt;code id=\"code\"&gt;&lt;var class=\"var\"&gt;var&lt;/var&gt; vertical = &lt;input type=\"text\" id=\"vertical\" maxlength=\"9\" /&gt;; &lt;span class=\"comment\"&gt;// enter any valid javascript value&lt;/span&gt;&lt;/code&gt;\r\n&lt;br /&gt;\r\n&lt;button id=\"run\"&gt;Run&lt;/button&gt;\r\n&lt;p id=\"result\"&gt;...&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6368005,
      "name": "WEB_UI",
      "reputation": 249
    }
  },
  {
    "soID": 37586557,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/37586557",
    "title": null,
    "body": "<p><strong>Have a look at this example:</strong></p>\n\n<pre><code>var app = angular.module('plunker', []);\n\napp.controller('MainCtrl', function($scope,$http) {\n\n    var getJoke = function(){\n        return $http.get('http://api.icndb.com/jokes/random').then(function(res){\n            return res.data.value;  \n        });\n    }\n\n    getJoke().then(function(res) {\n        console.log(res.joke);\n    });\n});\n</code></pre>\n\n<p>As you can see <code>getJoke</code> is <strong>returning a</strong> resolved <strong>promise</strong> (it is resolved when returning <code>res.data.value</code>). So you wait until the <strong>$http.get</strong> request is completed and then <strong>console.log(res.joke)</strong> is executed (as a normal asynchronous flow).</p>\n\n<p><strong>This is the plnkr:</strong></p>\n\n<p><a href=\"http://embed.plnkr.co/XlNR7HpCaIhJxskMJfSg/\" rel=\"noreferrer\">http://embed.plnkr.co/XlNR7HpCaIhJxskMJfSg/</a></p>\n",
    "score": 40,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6382034,
      "name": "Fran Carmona",
      "reputation": 716
    }
  },
  {
    "soID": 38278295,
    "parentID": 3437786,
    "url": "https://stackoverflow.com/q/38278295",
    "title": null,
    "body": "<p>To check height and width of your current loaded page of any website using <strong>\"console\"</strong> or after clicking <strong>\"Inspect\"</strong>.</p>\n\n<p><strong>step 1</strong>:  Click the right button of mouse and click on 'Inspect' and then click 'console'</p>\n\n<p><strong>step 2</strong>: Make sure that your browser screen should be not in 'maximize' mode. If the browser screen is in 'maximize' mode, you need to first click the maximize button (present either at right or left top corner) and un-maximize it. </p>\n\n<p><strong>step 3</strong>: Now, write the following after the greater than sign ('>') i.e. </p>\n\n<pre><code>       &gt; window.innerWidth\n            output : your present window width in px (say 749)\n\n       &gt; window.innerHeight\n            output : your present window height in px (say 359)\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6390817,
      "name": "solanki...",
      "reputation": 512
    }
  },
  {
    "soID": 44773978,
    "parentID": 894860,
    "url": "https://stackoverflow.com/q/44773978",
    "title": null,
    "body": "<h2>Default parameter are considered harmful in functional programming</h2>\n\n<p>From a functional perspective default parameters are harmful, because they lead to ambiguous types:</p>\n\n<pre><code>//  normal case: (String, String, String) -&gt; String\n// default case: (String, String)         -&gt; String\nconst fun = (x, y, def = \"baz\") =&gt; [x, y, def].join(\" \");\n</code></pre>\n\n<p><code>fun</code> has two distinct types depending on whether the \"default case\" is triggered. In a strictly typed language this wouldn't compile. In Javascript it works but leads to numerous little problems in daily life. For instance, you cannot compose such functions properly.</p>\n\n<p>Usually we use partially applied functions to achieve the same effect without ambiguous types:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// String -&gt; (String, String) -&gt; String\r\nconst fun = def =&gt; (x, y) =&gt; [x, y, def].join(\" \");\r\n\r\nconst funBaz = fun(\"baz\");\r\nconst funBat = fun(\"bat\");\r\n\r\n// normal case\r\nconsole.log(fun(\"ah!\") (\"foo\", \"bar\")); // foo bar ah!\r\n\r\n// default case\r\nconsole.log(funBaz(\"foo\", \"bar\")); // foo bar baz\r\n\r\n// alternative default case\r\nconsole.log(funBat(\"foo\", \"bar\")); // foo bar bat</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>As you can see I implemented the function just once and then partially applied it as required. In this way I can define several default values for the same default parameter or several default parameters for the same function. Beyond that the different default cases are explicitly encoded in the function names, which makes the underlying mechanism more apparent.</p>\n\n<p>Look at <a href=\"https://stackoverflow.com/a/32787782/6445533\">currying</a> for more information.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6445533,
      "name": "ftor",
      "reputation": 3534
    }
  },
  {
    "soID": 38393760,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/38393760",
    "title": null,
    "body": "<p>Use logical not operator two times<br>\n<strong>it means !true= false<br>\n and  !!true = true</strong></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6507620,
      "name": "Abhay Dixit",
      "reputation": 145
    }
  },
  {
    "soID": 39205401,
    "parentID": 901712,
    "url": "https://stackoverflow.com/q/39205401",
    "title": null,
    "body": "<p>Use:</p>\n\n<pre><code>&lt;input type=\"checkbox\" name=\"planned_checked\" checked id=\"planned_checked\"&gt; Planned\n\n$(\"#planned_checked\").change(function() {\n    if($(this).prop('checked') == true) {\n        alert(\"Checked Box Selected\");\n    } else {\n        alert(\"Checked Box deselect\");\n    }\n});\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>    $(\"#planned_checked\").change(function() {\r\n        if($(this).prop('checked') == true) {\r\n            alert(\"Checked Box Selected\");\r\n        } else {\r\n            alert(\"Checked Box deselect\");\r\n        }\r\n    });</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;input type=\"checkbox\" name=\"planned_checked\" checked id=\"planned_checked\"&gt; Planned</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 55,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 45011899,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/45011899",
    "title": null,
    "body": "<p>try it-</p>\n\n<pre><code>var radioVal = $(\"#myform\").find(\"input[type='radio']:checked\").val();\n\nconsole.log(radioVal);\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6559962,
      "name": "Gautam Rai",
      "reputation": 453
    }
  },
  {
    "soID": 43582897,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/43582897",
    "title": null,
    "body": "<p>Use a callback() function inside the foo() success.\nTry in this way. It is simple and easy to understand.</p>\n\n<pre><code>var lat = \"\";\nvar lon = \"\";\nfunction callback(data){\n    lat = data.lat;\n    lon = data.lon;\n}\nfunction getLoc() {\n  var url = \"http://ip-api.com/json\"\n  $.getJSON(url, function(data) {\n    callback(data);\n  });\n}\n\ngetLoc();\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6570691,
      "name": "Mahfuzur Rahman",
      "reputation": 304
    }
  },
  {
    "soID": 40061754,
    "parentID": 1144783,
    "url": "https://stackoverflow.com/q/40061754",
    "title": null,
    "body": "<p>This can be solved using regular expressions and the flag <code>g</code>, which means to not stop after finding the first match. Really, regular expressions are life savers!</p>\n\n<pre><code>function replaceAll(string, pattern, replacement) {\n    return string.replace(new RegExp(pattern, \"g\"), replacement);\n}\n\n// or if you want myString.replaceAll(\"abc\", \"\");\n\nString.prototype.replaceAll = function(pattern, replacement) {\n    return this.replace(new RegExp(pattern, \"g\"), replacement);\n};\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6632793,
      "name": "C. Morgan",
      "reputation": 49
    }
  },
  {
    "soID": 43237482,
    "parentID": 586182,
    "url": "https://stackoverflow.com/q/43237482",
    "title": null,
    "body": "<p>Another possible solution, with usage of <code>Array#reduce</code>.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = [\"apple\", \"orange\", \"raspberry\"],\r\n    arr2 = [1, 2, 4];\r\n\r\nfunction insert(arr, item, index) {\r\n    arr = arr.reduce(function(s, a, i) {\r\n      i == index ? s.push(item, a) : s.push(a);\r\n      return s;\r\n    }, []);   \r\n    console.log(arr);\r\n}\r\n\r\ninsert(arr, \"banana\", 1);\r\ninsert(arr2, 3, 2);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6695924,
      "name": "Kind user",
      "reputation": 15941
    }
  },
  {
    "soID": 43030863,
    "parentID": 1098040,
    "url": "https://stackoverflow.com/q/43030863",
    "title": null,
    "body": "<h1> ES6 solution</h1>\n\n<p>using <strong><a href=\"https://developer.mozilla.org/pl/docs/Web/JavaScript/Referencje/Obiekty/Array/some\" rel=\"nofollow noreferrer\"><code>Array#some</code></a></strong> and <strong><a href=\"https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" rel=\"nofollow noreferrer\"><code>Object.keys</code></a></strong>. It will return <strong>true</strong> if given key exists in the object or <strong>false</strong> if it doesn't.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var obj = {foo: 'one', bar: 'two'};\r\n    \r\nfunction isKeyInObject(obj, key) {\r\n    var res = Object.keys(obj).some(v =&gt; v == key);\r\n    console.log(res);\r\n}\r\n\r\nisKeyInObject(obj, 'foo');\r\nisKeyInObject(obj, 'something');</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>One-line example.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(Object.keys({foo: 'one', bar: 'two'}).some(v =&gt; v == 'foo'));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6695924,
      "name": "Kind user",
      "reputation": 15941
    }
  },
  {
    "soID": 41374479,
    "parentID": 1789945,
    "url": "https://stackoverflow.com/q/41374479",
    "title": null,
    "body": "<p>Using Indexof that can be identified easily,\nExample:</p>\n\n<pre><code>var array = [2, 9, 9];\narray.indexOf(2);     // 0\narray.indexOf(7);     // -1\narray.indexOf(9, 2);  // 2\narray.indexOf(2, -1); // -1\narray.indexOf(2, -3); // 0\n</code></pre>\n\n<p>The result is in comment after the line</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43086785,
    "parentID": 784929,
    "url": "https://stackoverflow.com/q/43086785",
    "title": null,
    "body": "<p>After seeing all these great answers, I would like to add another reason for using  <code>!!</code>. Currenty I'm working in Angular 2-4 (TypeScript) and I want to return a boolean as <code>false</code> when my user is not authenticated. If he isn't authenticated, the token-string would be <code>null</code> or <code>\"\"</code>. I can do this by using the next block of code:</p>\n\n<pre><code>public isAuthenticated(): boolean {\n   return !!this.getToken();\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6761698,
      "name": "Wouter Vanherck",
      "reputation": 339
    }
  },
  {
    "soID": 42119521,
    "parentID": 11832914,
    "url": "https://stackoverflow.com/q/42119521",
    "title": null,
    "body": "<p>Just for the record, the scaling method could theoretically return Infinity if the number and the digits you want to round to are big enough. In JavaScript that shouldn't be a problem since the maximum number is 1.7976931348623157e+308, but if you're working with really big numbers or a lot of decimal places you could try this function instead:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>Number.prototype.roundTo = function(digits)\r\n{\r\n    var str = this.toString();\r\n    var split = this.toString().split('e');\r\n    var scientific = split.length &gt; 1;\r\n    var index;\r\n    if (scientific)\r\n    {\r\n        str = split[0];\r\n        var decimal = str.split('.');\r\n        if (decimal.length &lt; 2)\r\n            return this;\r\n        index = decimal[0].length + 1 + digits;\r\n    }\r\n    else\r\n        index = Math.floor(this).toString().length + 1 + digits;\r\n    if (str.length &lt;= index)\r\n        return this;\r\n    var digit = str[index + 1];\r\n    var num = Number.parseFloat(str.substring(0, index));\r\n    if (digit &gt;= 5)\r\n    {\r\n        var extra = Math.pow(10, -digits);\r\n        return this &lt; 0 ? num - extra : num + extra;\r\n    }\r\n    if (scientific)\r\n        num += \"e\" + split[1];\r\n    return num;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6792753,
      "name": "Martin",
      "reputation": 51
    }
  },
  {
    "soID": 44843981,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/44843981",
    "title": null,
    "body": "<p>You could check for the count of the Object keys:</p>\n\n<pre><code>if (Object.keys(a).length &gt; 0) {\n    // not empty\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6825501,
      "name": "Ashutosh Ranjan",
      "reputation": 36
    }
  },
  {
    "soID": 40769912,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/40769912",
    "title": null,
    "body": "<p>Use: </p>\n\n<pre><code>function redirect(a) {\n    location = a\n}\n</code></pre>\n\n<p>And call it with: <code>redirect([url]);</code></p>\n\n<p>There's no need for the <code>href</code> after <code>location</code>, as it is implied.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6939690,
      "name": "cascading-style",
      "reputation": 151
    }
  },
  {
    "soID": 44528339,
    "parentID": 400212,
    "url": "https://stackoverflow.com/q/44528339",
    "title": null,
    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!DOCTYPE html&gt;\r\n&lt;style&gt;#t{width:1px;height:1px;border:none;}#t:focus{outline:none;}&lt;/style&gt;&lt;script&gt;function copy(text){var t=document.getElementById('t');t.innerHTML=text;t.select();  try {    var successful = document.execCommand('copy');var msg = successful ? 'successfully' : 'unsuccessfully';console.log('text coppied ' + msg);} catch (err) {console.log('Unable to copy text');}t.innerHTML='';}&lt;/script&gt;&lt;textarea id=t&gt;&lt;/textarea&gt;\r\n&lt;button onclick=\"copy('hello world');\"&gt;\r\n    Click me\r\n&lt;/button&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 7169759,
      "name": "Samuel Tees",
      "reputation": 79
    }
  },
  {
    "soID": 43192052,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/43192052",
    "title": null,
    "body": "<p>I have resolved this by enabling CORS for the client URL accessing the web API, and it worked successfully.</p>\n\n<p>For example, [EnableCors(origins: \"<a href=\"http://clientaccessingapi.com\" rel=\"nofollow noreferrer\">http://clientaccessingapi.com</a>\", headers: \"<em>\", methods: \"</em>\")]\n:)</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 7238072,
      "name": "Rizwan ali",
      "reputation": 28
    }
  },
  {
    "soID": 41330909,
    "parentID": 679915,
    "url": "https://stackoverflow.com/q/41330909",
    "title": null,
    "body": "<p>console.log(objectname.isEmpty()); </p>\n",
    "score": -4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 7324584,
      "name": "Suganya Shanker",
      "reputation": 7
    }
  },
  {
    "soID": 42129802,
    "parentID": 503093,
    "url": "https://stackoverflow.com/q/42129802",
    "title": null,
    "body": "<pre><code>&lt;script type=\"text/javascript\"&gt;\n    if(window.location.href === \"http://stackoverflow.com\") {      \n         window.location.replace(\"https://www.google.co.in/\");\n       }\n&lt;/script&gt;\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 7445431,
      "name": "sneha",
      "reputation": 287
    }
  },
  {
    "soID": 195961,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/195961",
    "title": null,
    "body": "<p>This is easiest with a library like jQuery:</p>\n\n<pre><code>&lt;input type=\"button\" onClick=\"javascript:test_byid();\" value=\"id='second'\" /&gt;\n\n&lt;script&gt;\nfunction test_byid()\n{\n    $(\"#second\").toggleClass(\"highlight\");\n}\n&lt;/script&gt;\n</code></pre>\n",
    "score": -16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5,
      "name": "Jon Galloway",
      "reputation": 36992
    }
  },
  {
    "soID": 31047,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/31047",
    "title": null,
    "body": "<p>Yes!</p>\n\n<pre><code>jQuery.fn.exists = function(){ return this.length &gt; 0; }\n\nif ($(selector).exists()) {\n    // Do something\n}\n</code></pre>\n\n<p>This is in response to: <a href=\"http://herdingcode.com/?p=36\" rel=\"noreferrer\">Herding Code podcast with Jeff Atwood</a></p>\n",
    "score": 1115,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 302,
      "name": "Jake McGraw",
      "reputation": 28182
    }
  },
  {
    "soID": 444403,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/444403",
    "title": null,
    "body": "<p>If you used</p>\n\n<pre><code>jQuery.fn.exists = function(){return ($(this).length &gt; 0);}\nif ($(selector).exists()) { }\n</code></pre>\n\n<p>you would imply that chaining was possible when it is not.</p>\n\n<p>This would be better:</p>\n\n<pre><code>jQuery.exists = function(selector) {return ($(selector).length &gt; 0);}\nif ($.exists(selector)) { }\n</code></pre>\n\n<p>Alternatively, <a href=\"http://learn.jquery.com/using-jquery-core/faq/how-do-i-test-whether-an-element-exists/\" rel=\"noreferrer\">from the FAQ</a>:</p>\n\n<pre><code>if ( $('#myDiv').length ) { /* Do something */ }\n</code></pre>\n\n<p>You could also use the following. If there are no values in the jQuery object array then getting the first item in the array would return undefined.</p>\n\n<pre><code>if ( $('#myDiv')[0] ) { /* Do something */ }\n</code></pre>\n",
    "score": 281,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1950,
      "name": "Jon Erickson",
      "reputation": 60868
    }
  },
  {
    "soID": 171256,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/171256",
    "title": null,
    "body": "<p><strong>ECMAScript 2015 (ES6) Standard Method</strong></p>\n\n<pre><code>/* For the case in question, you would do: */\nObject.assign(obj1, obj2);\n\n/** There's no limit to the number of objects you can merge.\n *  All objects get merged into the first object. \n *  Only the object in the first argument is mutated and returned.\n *  Later properties overwrite earlier properties with the same name. */\nconst allRules = Object.assign({}, obj1, obj2, obj3, etc);\n</code></pre>\n\n<p>(see <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Browser_compatibility\" rel=\"noreferrer\">MDN JavaScript Reference</a>)</p>\n\n<hr>\n\n<p><strong>Method for ES5 and Earlier</strong></p>\n\n<pre><code>for (var attrname in obj2) { obj1[attrname] = obj2[attrname]; }\n</code></pre>\n\n<p>Note that this will simply add all attributes of <code>obj2</code> to <code>obj1</code> which might not be what you want if you still want to use the unmodified <code>obj1</code>.</p>\n\n<p>If you're using a framework that craps all over your prototypes then you have to get fancier with checks like <code>hasOwnProperty</code>, but that code will work for 99% of cases.</p>\n\n<p>Example function:</p>\n\n<pre><code>/**\n * Overwrites obj1's values with obj2's and adds obj2's if non existent in obj1\n * @param obj1\n * @param obj2\n * @returns obj3 a new object based on obj1 and obj2\n */\nfunction merge_options(obj1,obj2){\n    var obj3 = {};\n    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }\n    for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }\n    return obj3;\n}\n</code></pre>\n",
    "score": 1359,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1335875,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/1335875",
    "title": null,
    "body": "<p>It's a new feature of ECMAScript 5. John Resig wrote up <a href=\"http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/\" rel=\"noreferrer\">a nice summary</a> of it.</p>\n\n<p>It's just a string you put in your JavaScript files (either at the top of your file or inside of a function) that looks like this:</p>\n\n<pre><code>\"use strict\";\n</code></pre>\n\n<p>Putting it in your code now shouldn't cause any problems with current browsers as it's just a string. It may cause problems with your code in the future if your code violates the pragma.  For instance, if you currently have <code>foo = \"bar\"</code> without defining <code>foo</code> first, your code will start failing...which is a good thing in my opinion.</p>\n",
    "score": 973,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 8590,
      "name": "seth",
      "reputation": 27517
    }
  },
  {
    "soID": 203220,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/203220",
    "title": null,
    "body": "<p>You can add events to objects when you create them. If you are adding the same events to multiple objects at different times, creating a named function might be the way to go.</p>\n\n<pre><code>var mouseOverHandler = function() {\n    // Do stuff\n};\nvar mouseOutHandler = function () {\n    // Do stuff\n};\n\n$(function() {\n    // On the document load, apply to existing elements\n    $('select').hover(mouseOverHandler, mouseOutHandler);\n});\n\n// This next part would be in the callback from your Ajax call\n$(\"&lt;select&gt;&lt;/select&gt;\")\n    .append( /* Your &lt;option&gt;s */ )\n    .hover(mouseOverHandler, mouseOutHandler)\n    .appendTo( /* Wherever you need the select box */ )\n;\n</code></pre>\n",
    "score": 37,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 9021,
      "name": "nickf",
      "reputation": 321870
    }
  },
  {
    "soID": 18411776,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/18411776",
    "title": null,
    "body": "<p>If you only want to open the external links (links that go to other sites) then this bit of JavaScript/jQuery works well:</p>\n\n<pre><code>$(function(){\n    var hostname = window.location.hostname.replace('www.', '');\n    $('a').each(function(){\n        var link_host = $(this).attr('hostname').replace('www.', '');\n        if (link_host !== hostname) {\n            $(this).attr('target', '_blank');\n        }\n    });\n});\n</code></pre>\n",
    "score": -6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 196038,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/196038",
    "title": null,
    "body": "<h2>Modern HTML5 Techniques for changing classes</h2>\n\n<p>Modern browsers have added <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.classList\" rel=\"noreferrer\"><strong>classList</strong></a> which provides methods to make it easier to manipulate classes without needing a library:</p>\n\n<pre><code>document.getElementById(\"MyElement\").classList.add('MyClass');\n\ndocument.getElementById(\"MyElement\").classList.remove('MyClass');\n\nif ( document.getElementById(\"MyElement\").classList.contains('MyClass') )\n\ndocument.getElementById(\"MyElement\").classList.toggle('MyClass');\n</code></pre>\n\n<p>Unfortunately, these do not work in Internet Explorer prior to v10, though there is a <a href=\"http://en.wikipedia.org/wiki/Shim_(computing)\" rel=\"noreferrer\">shim</a> to add support for it to IE8 and IE9, available from <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.classList\" rel=\"noreferrer\">this page</a>. It is, though, getting more and more <a href=\"http://caniuse.com/#feat=classlist\" rel=\"noreferrer\">supported</a>.</p>\n\n<h2>Simple cross-browser solution</h2>\n\n<p>The standard JavaScript way to select an element is using <a href=\"https://developer.mozilla.org/en-US/docs/DOM/document.getElementById\" rel=\"noreferrer\"><code>document.getElementById(\"Id\")</code></a>, which is what the following examples use - you can of course obtain elements in other ways, and in the right situation may simply use <code>this</code> instead - however, going into detail on this is beyond the scope of the answer.</p>\n\n<h3>To change all classes for an element:</h3>\n\n<p>To replace all existing classes with one or more new classes, set the className attribute:</p>\n\n<pre><code>document.getElementById(\"MyElement\").className = \"MyClass\";\n</code></pre>\n\n<p>(You can use a space-delimited list to apply multiple classes.)</p>\n\n<h3>To add an additional class to an element:</h3>\n\n<p>To add a class to an element, without removing/affecting existing values, append a space and the new classname, like so:</p>\n\n<pre><code>document.getElementById(\"MyElement\").className += \" MyClass\";\n</code></pre>\n\n<h3>To remove a class from an element:</h3>\n\n<p>To remove a single class to an element, without affecting other potential classes, a simple regex replace is required:</p>\n\n<pre><code>document.getElementById(\"MyElement\").className =\n   document.getElementById(\"MyElement\").className.replace\n      ( /(?:^|\\s)MyClass(?!\\S)/g , '' )\n/* Code wrapped for readability - above is all one statement */\n</code></pre>\n\n<p>An explanation of this regex is as follows:</p>\n\n<pre><code>(?:^|\\s) # Match the start of the string, or any single whitespace character\n\nMyClass  # The literal text for the classname to remove\n\n(?!\\S)   # Negative lookahead to verify the above is the whole classname\n         # Ensures there is no non-space character following\n         # (i.e. must be end of string or a space)\n</code></pre>\n\n<p>The <code>g</code> flag tells the replace to repeat as required, in case the class name has been added multiple times.</p>\n\n<h3>To check if a class is already applied to an element:</h3>\n\n<p>The same regex used above for removing a class can also be used as a check as to whether a particular class exists:</p>\n\n<pre><code>if ( document.getElementById(\"MyElement\").className.match(/(?:^|\\s)MyClass(?!\\S)/) )\n</code></pre>\n\n<p><br/></p>\n\n<h3>Assigning these actions to onclick events:</h3>\n\n<p>Whilst it is possible to write JavaScript directly inside the HTML event attributes (such as <code>onclick=\"this.className+=' MyClass'\"</code>) this is not recommended behaviour. Especially on larger applications, more maintainable code is achieved by separating HTML markup from JavaScript interaction logic.</p>\n\n<p>The first step to achieving this is by creating a function, and calling the function in the onclick attribute, for example:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function changeClass()\n    {\n        // Code examples from above\n    }\n&lt;/script&gt;\n...\n&lt;button onclick=\"changeClass()\"&gt;My Button&lt;/button&gt;\n</code></pre>\n\n<p><sub><em>(It is not required to have this code in script tags, this is simply for brevity of example, and including the JavaScript in a distinct file may be more appropriate.)</em></sub></p>\n\n<p>The second step is to move the onclick event out of the HTML and into JavaScript, for example using <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener\" rel=\"noreferrer\">addEventListener</a></p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function changeClass()\n    {\n        // Code examples from above\n    }\n\n    window.onload = function()\n    {\n        document.getElementById(\"MyElement\").addEventListener( 'click', changeClass);\n    }\n&lt;/script&gt;\n...\n&lt;button id=\"MyElement\"&gt;My Button&lt;/button&gt;\n</code></pre>\n\n<p>(Note that the window.onload part is required so that the contents of that function are executed <em>after</em> the HTML has finished loading - without this, the MyElement might not exist when the JavaScript code is called, so that line would fail.)</p>\n\n<p><br/></p>\n\n<h2>JavaScript Frameworks and Libraries</h2>\n\n<p>The above code is all in standard JavaScript, however it is common practise to use either a framework or a library to simplify common tasks, as well as benefit from fixed bugs and edge cases that you might not think of when writing your code.</p>\n\n<p>Whilst some people consider it overkill to add a ~50&nbsp;KB framework for simply changing a class, if you are doing any substantial amount of JavaScript work, or anything that might have unusual cross-browser behaviour, it is well worth considering.</p>\n\n<p><em>(Very roughly, a library is a set of tools designed for a specific task, whilst a framework generally contains multiple libraries and performs a complete set of duties.)</em></p>\n\n<p>The examples above have been reproduced below using <a href=\"http://jquery.com\" rel=\"noreferrer\">jQuery</a>, probably the most commonly used JavaScript library (though there are others worth investigating too).</p>\n\n<p>(Note that <code>$</code> here is the jQuery object.)</p>\n\n<h3>Changing Classes with jQuery:</h3>\n\n<pre><code>$('#MyElement').addClass('MyClass');\n\n$('#MyElement').removeClass('MyClass');\n\nif ( $('#MyElement').hasClass('MyClass') )\n</code></pre>\n\n<p>In addition, jQuery provides a shortcut for adding a class if it doesn't apply, or removing a class that does:</p>\n\n<pre><code>$('#MyElement').toggleClass('MyClass');\n</code></pre>\n\n<p><br/></p>\n\n<h3>Assigning a function to a click event with jQuery:</h3>\n\n<pre><code>$('#MyElement').click(changeClass);\n</code></pre>\n\n<p>or, without needing an id:</p>\n\n<pre><code>$(':button:contains(My Button)').click(changeClass);\n</code></pre>\n\n<p><br/></p>\n",
    "score": 2853,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 9360,
      "name": "Peter Boughton",
      "reputation": 75889
    }
  },
  {
    "soID": 203227,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/203227",
    "title": null,
    "body": "<p>You could simply wrap your event binding call up into a function and then invoke it twice: once on document ready and once after your event that adds the new DOM elements. If you do that you'll want to avoid binding the same event twice on the existing elements so you'll need either unbind the existing events or (better) only bind to the DOM elements that are newly created. The code would look something like this:</p>\n\n<pre><code>function addCallbacks(eles){\n    eles.hover(function(){alert(\"gotcha!\")});\n}\n\n$(document).ready(function(){\n    addCallbacks($(\".myEles\"))\n});\n\n// ... add elements ...\naddCallbacks($(\".myNewElements\"))\n</code></pre>\n",
    "score": 27,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 10419,
      "name": "Greg Borenstein",
      "reputation": 1046
    }
  },
  {
    "soID": 5062670,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/5062670",
    "title": null,
    "body": "<p>You did a great job of summarizing what's awesome about Node.js. My feeling is that Node.js is especially suited for applications where you'd like to maintain a persistent connection from the browser back to the server. Using a technique known as <a href=\"http://en.wikipedia.org/wiki/Push_technology#Long_polling\" rel=\"noreferrer\">\"long-polling\"</a>, you can write an application that sends updates to the user in real time. Doing long polling on many of the web's giants, like <a href=\"http://en.wikipedia.org/wiki/Ruby_on_Rails\" rel=\"noreferrer\">Ruby on Rails</a> or <a href=\"http://en.wikipedia.org/wiki/Django_%28web_framework%29\" rel=\"noreferrer\">Django</a>, would create immense load on the server, because each active client eats up one server process. This situation amounts to a <a href=\"http://en.wikipedia.org/wiki/Tarpit_(networking)\" rel=\"noreferrer\">tarpit</a> attack. When you use something like Node.js, the server has no need of maintaining separate threads for each open connection.  </p>\n\n<p>This means you can create a <a href=\"https://github.com/rivalslayer/node_chat\" rel=\"noreferrer\">browser-based chat application</a> in Node.js that takes almost no system resources to serve a great many clients. Any time you want to do this sort of long-polling, Node.js is a great option.  </p>\n\n<p>It's worth mentioning that Ruby and Python both have tools to do this sort of thing (<a href=\"http://rubyeventmachine.com/\" rel=\"noreferrer\">eventmachine</a> and <a href=\"https://twistedmatrix.com/trac/\" rel=\"noreferrer\">twisted</a>, respectively), but that Node.js does it exceptionally well, and from the ground up. JavaScript is exceptionally well situated to a callback-based concurrency model, and it excels here. Also, being able to serialize and deserialize with JSON native to both the client and the server is pretty nifty. </p>\n\n<p>I look forward to reading other answers here, this is a fantastic question. </p>\n\n<p>It's worth pointing out that Node.js is also great for situations in which you'll be reusing a lot of code across the client/server gap. The <a href=\"http://meteor.com\" rel=\"noreferrer\">Meteor framework</a> makes this really easy, and a lot of folks are suggesting this might be the future of web development. I can say from experience that it's a whole lot of fun to write code in Meteor, and a big part of this is spending less time thinking about how you're going to restructure your data, so the code that runs in the browser can easily manipulate it and pass it back. </p>\n\n<p>Here's an article on Pyramid and long-polling, which turns out to be very easy to set up with a little help from gevent: <a href=\"http://michael.merickel.org/2011/6/21/tictactoe-and-long-polling-with-pyramid/\" rel=\"noreferrer\"><em>TicTacToe and Long Polling with Pyramid</em></a>.</p>\n",
    "score": 1360,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 13816,
      "name": "Benson",
      "reputation": 19396
    }
  },
  {
    "soID": 85834,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/85834",
    "title": null,
    "body": "<p>You can use:</p>\n\n<pre><code>if ($(selector).is('*')) {\n  // Do something\n}\n</code></pre>\n\n<p>A <strong>little</strong> more elegant, perhaps.</p>\n",
    "score": 44,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 13850,
      "name": "Devon",
      "reputation": 4143
    }
  },
  {
    "soID": 1278557,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/1278557",
    "title": null,
    "body": "<p>jQuery has a built-in facility to manipulate DOM elements on the fly.</p>\n\n<p><strong>You can add anything to your table like this:</strong></p>\n\n<pre><code>$(\"#tableID\").find('tbody')\n    .append($('&lt;tr&gt;')\n        .append($('&lt;td&gt;')\n            .append($('&lt;img&gt;')\n                .attr('src', 'img.png')\n                .text('Image cell')\n            )\n        )\n    );\n</code></pre>\n\n<p>The <code>$('&lt;some-tag&gt;')</code> thing in jQuery is a tag object that can have several <code>attr</code> attributes that can be set and get, as well as <code>text</code>, which represents the text between the tag here: <code>&lt;tag&gt;text&lt;/tag&gt;</code>.</p>\n\n<p><em>This is some pretty weird indenting, but it's easier for you to see what's going on in this example.</em></p>\n",
    "score": 621,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 14193,
      "name": "Neil",
      "reputation": 11259
    }
  },
  {
    "soID": 750507,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/750507",
    "title": null,
    "body": "<p>so the reason your original example did not work is that all the closures you created in the loop referenced the same frame. in effect having 3 methods on one object with only a single 'i' variable. they all printed out the same value</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 14555,
      "name": "jottos",
      "reputation": 6973
    }
  },
  {
    "soID": 1470719,
    "parentID": 1470488,
    "url": "https://stackoverflow.com/q/1470719",
    "title": null,
    "body": "<p>Saying it's the difference between \"<strong>local</strong> and <strong>global</strong>\" isn't entirely accurate.</p>\n\n<p>It might be better to think of it as the difference between \"<strong>local</strong> and <strong>nearest</strong>\". The nearest can surely be global, but that won't always be the case.</p>\n\n<pre><code>/* global scope */\nvar local = true;\nvar global = true;\n\nfunction outer() {\n    /* local scope */\n    var local = true;\n    var global = false;\n\n    /* nearest scope = outer */\n    local = !global;\n\n    function inner() {\n        /* nearest scope = outer */\n        local = false;\n        global = false;\n\n        /* nearest scope = undefined */\n        /* defaults to defining a global */\n        public = global;\n    }\n}\n</code></pre>\n",
    "score": 126,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 15031,
      "name": "Jonathan Lonowski",
      "reputation": 80115
    }
  },
  {
    "soID": 171049,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/171049",
    "title": null,
    "body": "<p>The approach you suggest is not guaranteed to give you the result you're looking for - what if you had a <code>tbody</code> for example:</p>\n\n<pre><code>&lt;table id=\"myTable\"&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>You would end up with the following:</p>\n\n<pre><code>&lt;table id=\"myTable\"&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n  &lt;/tbody&gt;\n  &lt;tr&gt;...&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>I would therefore recommend this approach instead:</p>\n\n<pre><code>$('#myTable tr:last').after('&lt;tr&gt;...&lt;/tr&gt;&lt;tr&gt;...&lt;/tr&gt;');\n</code></pre>\n\n<p>You can include anything within the <code>after()</code> method as long as it's valid HTML, including multiple rows as per the example above.</p>\n\n<p><strong>Update:</strong> Revisiting this answer following recent activity with this question. eyelidlessness makes a good comment that there will always be a <code>tbody</code> in the DOM; this is true, but only if there is at least one row. If you have no rows, there will be no <code>tbody</code> unless you have specified one yourself.</p>\n\n<p>DaRKoN_ <a href=\"https://stackoverflow.com/questions/171027/jquery-add-table-row/468240#468240\">suggests</a> appending to the <code>tbody</code> rather than adding content after the last <code>tr</code>. This gets around the issue of having no rows, but still isn't bulletproof as you could theoretically have multiple <code>tbody</code> elements and the row would get added to each of them.</p>\n\n<p>Weighing everything up, I'm not sure there is a single one-line solution that accounts for every single possible scenario. You will need to make sure the jQuery code tallies with your markup.</p>\n\n<p>I think the safest solution is probably to ensure your <code>table</code> always includes at least one <code>tbody</code> in your markup, even if it has no rows. On this basis, you can use the following which will work however many rows you have (and also account for multiple <code>tbody</code> elements):</p>\n\n<pre><code>$('#myTable &gt; tbody:last-child').append('&lt;tr&gt;...&lt;/tr&gt;&lt;tr&gt;...&lt;/tr&gt;');\n</code></pre>\n",
    "score": 1676,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 17602,
      "name": "Luke Bennett",
      "reputation": 24848
    }
  },
  {
    "soID": 4907854,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/4907854",
    "title": null,
    "body": "<p>Nothing an author can do can choose to open in a new tab instead of a new window. It is a <em>user preference</em>.</p>\n\n<p>CSS3 proposed <a href=\"http://www.w3.org/TR/2004/WD-css3-hyperlinks-20040224/#target-new\" rel=\"noreferrer\">target-new</a>, but <a href=\"http://www.w3.org/TR/2014/NOTE-css3-hyperlinks-20141014/\" rel=\"noreferrer\">the specification was abandoned</a>.</p>\n\n<p>The <strong>reverse</strong> is not true; by specifying dimensions for the window in the third argument of <code>window.open</code>, you can trigger a new window when the preference is for tabs.</p>\n",
    "score": 557,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 19068,
      "name": "Quentin",
      "reputation": 547400
    }
  },
  {
    "soID": 9329504,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/9329504",
    "title": null,
    "body": "<p>If you want to loop over an array, use the standard three-part <code>for</code> loop.</p>\n\n<pre><code>for (var i = 0; i &lt; myArray.length; i++) {\n    var arrayItem = myArray[i];\n}\n</code></pre>\n\n<p>You can get some performance optimisations by caching <code>myArray.length</code> or iterating over it backwards.</p>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 19068,
      "name": "Quentin",
      "reputation": 547400
    }
  },
  {
    "soID": 5515370,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/5515370",
    "title": null,
    "body": "<pre><code>function isEmpty(value){\n  return (value == null || value.length === 0);\n}\n</code></pre>\n\n<p>This will return true for</p>\n\n<pre><code>undefined  // Because undefined == null\n\nnull\n\n[]\n\n\"\"\n</code></pre>\n\n<p>and zero argument functions since a function's <code>length</code> is the number of declared parameters it takes.</p>\n\n<p>To disallow the latter category, you might want to just check for blank strings</p>\n\n<pre><code>function isEmpty(value){\n  return (value == null || value === '');\n}\n</code></pre>\n",
    "score": 41,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 20394,
      "name": "Mike Samuel",
      "reputation": 82161
    }
  },
  {
    "soID": 171455,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/171455",
    "title": null,
    "body": "<p>jQuery also has a utility for this: <a href=\"http://api.jquery.com/jQuery.extend/\" rel=\"noreferrer\">http://api.jquery.com/jQuery.extend/</a>.</p>\n\n<p>Taken from the jQuery documentation:</p>\n\n<pre><code>// Merge options object into settings object\nvar settings = { validate: false, limit: 5, name: \"foo\" };\nvar options  = { validate: true, name: \"bar\" };\njQuery.extend(settings, options);\n\n// Now the content of settings object is the following:\n// { validate: true, limit: 5, name: \"bar\" }\n</code></pre>\n\n<hr>\n\n<p>The above code will mutate the object named <em><code>settings</code></em>.</p>\n\n<p>If you want to create a new object without modifying either argument, use this:</p>\n\n<pre><code>var defaults = { validate: false, limit: 5, name: \"foo\" };\nvar options = { validate: true, name: \"bar\" };\n\n/* Merge defaults and options, without modifying defaults */\nvar settings = $.extend({}, defaults, options);\n\n// The content of settings variable is now the following:\n// {validate: true, limit: 5, name: \"bar\"}\n// The 'defaults' and 'options' variables remained the same.\n</code></pre>\n",
    "score": 1032,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 171258,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/171258",
    "title": null,
    "body": "<p><a href=\"http://en.wikipedia.org/wiki/Prototype_JavaScript_Framework\" rel=\"nofollow noreferrer\">Prototype</a> has this:</p>\n\n<pre><code>Object.extend = function(destination,source) {\n    for (var property in source)\n        destination[property] = source[property];\n    return destination;\n}\n</code></pre>\n\n<p><code>obj1.extend(obj2)</code> will do what you want.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1470646,
    "parentID": 1470488,
    "url": "https://stackoverflow.com/q/1470646",
    "title": null,
    "body": "<p>Here's quite a good example of how you can get caught out from not declaring local variables with <code>var</code>:</p>\n\n<pre><code>&lt;script&gt;\none();\n\nfunction one()\n{\n    for (i = 0;i &lt; 10;i++)\n    {\n        two();\n        alert(i);\n    }\n}\n\nfunction two()\n{\n    i = 1;\n}\n&lt;/script&gt;\n</code></pre>\n\n<p><em>(<code>i</code> is reset at every iteration of the loop, as it's not declared locally in the <code>for</code> loop but globally) eventually resulting in infinite loop</em></p>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 21574,
      "name": "Chris S",
      "reputation": 45849
    }
  },
  {
    "soID": 195977,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/195977",
    "title": null,
    "body": "<p>No offense, but it's unclever to change class on-the-fly as it forces the CSS interpreter to recalculate the visual presentation of the entire web page.</p>\n\n<p>The reason is that it is nearly impossible for the CSS interpreter to know if any inheritance or cascading could be changed, so the short answer is:</p>\n\n<p>Never ever change className on-the-fly !-)</p>\n\n<p>But usually you'll only need to change a property or two, and that is easily implemented:</p>\n\n<pre><code>function highlight(elm){\n    elm.style.backgroundColor =\"#345\";\n    elm.style.color = \"#fff\";\n}\n</code></pre>\n",
    "score": -52,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 23142,
      "name": "roenving",
      "reputation": 1730
    }
  },
  {
    "soID": 468240,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/468240",
    "title": null,
    "body": "<p>What if you had a <code>&lt;tbody&gt;</code> and a <code>&lt;tfoot&gt;</code>? </p>\n\n<p>Such as:</p>\n\n<pre><code>&lt;table&gt;\n    &lt;tbody&gt;\n        &lt;tr&gt;&lt;td&gt;Foo&lt;/td&gt;&lt;/tr&gt;\n    &lt;/tbody&gt;\n    &lt;tfoot&gt;\n        &lt;tr&gt;&lt;td&gt;footer information&lt;/td&gt;&lt;/tr&gt;\n    &lt;/tfoot&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>Then it would insert your new row in the footer - not to the body.</p>\n\n<p>Hence the best solution is to include a <code>&lt;tbody&gt;</code> tag and use <code>.append</code>, rather than <code>.after</code>.</p>\n\n<pre><code>$(\"#myTable &gt; tbody\").append(\"&lt;tr&gt;&lt;td&gt;row content&lt;/td&gt;&lt;/tr&gt;\");\n</code></pre>\n",
    "score": 126,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 23300,
      "name": "ChadT",
      "reputation": 5611
    }
  },
  {
    "soID": 1470494,
    "parentID": 1470488,
    "url": "https://stackoverflow.com/q/1470494",
    "title": null,
    "body": "<p>If you're in the global scope then there's no difference.</p>\n\n<p>If you're in a function then <strong><code>var</code></strong> will create a local variable, \"no var\" will look up the scope chain until it finds the variable or hits the global scope (at which point it will create it):</p>\n\n<pre><code>// These are both globals\nvar foo = 1;\nbar = 2;\n\nfunction()\n{\n    var foo = 1; // Local\n    bar = 2;     // Global\n\n    // Execute an anonymous function\n    (function()\n    {\n        var wibble = 1; // Local\n        foo = 2; // Inherits from scope above (creating a closure)\n        moo = 3; // Global\n    }())\n}\n</code></pre>\n\n<p>If you're not doing an assignment then you need to use <code>var</code>:</p>\n\n<pre><code>var x; // Declare x\n</code></pre>\n",
    "score": 1167,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 24181,
      "name": "Greg",
      "reputation": 222524
    }
  },
  {
    "soID": 196016,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/196016",
    "title": null,
    "body": "<p>You can use <code>node.className</code> like so:</p>\n\n<pre><code>document.getElementById('foo').className = 'bar';\n</code></pre>\n\n<p>This should work in IE5.5 and up according to <a href=\"http://quirksmode.org/dom/w3c_html.html\" rel=\"noreferrer\">PPK</a>.</p>\n",
    "score": 60,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 25066,
      "name": "Eric Wendelin",
      "reputation": 24450
    }
  },
  {
    "soID": 21505545,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/21505545",
    "title": null,
    "body": "<p>A simple function for testing if an input value is an array is the following:</p>\n\n<pre><code>function isArray(value)\n{\n  return Object.prototype.toString.call(value) === '[object Array]';\n}\n</code></pre>\n\n<p>This works cross browser, and with older browsers. This is <a href=\"http://blog.niftysnippets.org/2010/09/say-what.html\" rel=\"nofollow\">pulled from T.J. Crowders' blog post</a></p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 26510,
      "name": "Brad Parks",
      "reputation": 19033
    }
  },
  {
    "soID": 1470588,
    "parentID": 1470488,
    "url": "https://stackoverflow.com/q/1470588",
    "title": null,
    "body": "<p>When Javascript is executed in a browser, all your code is surrounded by a with statement, like so:</p>\n\n<pre><code>with (window) {\n    //Your code\n}\n</code></pre>\n\n<p>More info on <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Statements/with\" rel=\"noreferrer\"><code>with</code> - MDN</a></p>\n\n<p>Since <code>var</code> declares a variable <em>in the current scope</em> , there is no difference between declaring <code>var</code> <strong>inside window</strong> and not declaring it at all.</p>\n\n<p>The difference comes when you're not directly inside the window, e.g. inside a function or inside a block.</p>\n\n<p>Using <code>var</code> lets you hide external variables that have the same name. In this way you can simulate a \"private\" variable, but that's another topic.</p>\n\n<p>A rule of thumb is to always use <code>var</code>, because otherwise you run the risk of introducing subtle bugs.</p>\n\n<p>EDIT:\nAfter the critiques I received, I would like to emphasize the following:</p>\n\n<ul>\n<li><code>var</code> declares a variable <em>in the current scope</em></li>\n<li>The global scope is <code>window</code></li>\n<li>Not using <code>var</code> implicitly declares <code>var</code> in the global scope (window)</li>\n<li>Declaring a variable in the global scope (window) using <code>var</code> is the same as omitting it.</li>\n<li>Declaring a variable in scopes different from window using <code>var</code> <strong>is not the same thing</strong> as declaring a variable without <code>var</code></li>\n<li>Always declare <code>var</code> explicitly because it's good practice</li>\n</ul>\n",
    "score": 75,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 27340,
      "name": "kentaromiura",
      "reputation": 5048
    }
  },
  {
    "soID": 7220510,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/7220510",
    "title": null,
    "body": "<p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" rel=\"noreferrer\">Pretty-printing is implemented natively in <code>JSON.stringify()</code></a></strong>. The third argument enables pretty printing and sets the spacing to use:</p>\n\n<pre><code>var str = JSON.stringify(obj, null, 2); // spacing level = 2\n</code></pre>\n\n<p>If you need syntax highlighting, you might use some regex magic like so:</p>\n\n<pre><code>function syntaxHighlight(json) {\n    if (typeof json != 'string') {\n         json = JSON.stringify(json, undefined, 2);\n    }\n    json = json.replace(/&amp;/g, '&amp;amp;').replace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;');\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n        var cls = 'number';\n        if (/^\"/.test(match)) {\n            if (/:$/.test(match)) {\n                cls = 'key';\n            } else {\n                cls = 'string';\n            }\n        } else if (/true|false/.test(match)) {\n            cls = 'boolean';\n        } else if (/null/.test(match)) {\n            cls = 'null';\n        }\n        return '&lt;span class=\"' + cls + '\"&gt;' + match + '&lt;/span&gt;';\n    });\n}\n</code></pre>\n\n<p>See in action here: <a href=\"http://jsfiddle.net/KJQ9K/554/\" rel=\"noreferrer\">jsfiddle</a></p>\n\n<p><strong>Or a full snippet provided below:</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function output(inp) {\r\n    document.body.appendChild(document.createElement('pre')).innerHTML = inp;\r\n}\r\n\r\nfunction syntaxHighlight(json) {\r\n    json = json.replace(/&amp;/g, '&amp;amp;').replace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;');\r\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\r\n        var cls = 'number';\r\n        if (/^\"/.test(match)) {\r\n            if (/:$/.test(match)) {\r\n                cls = 'key';\r\n            } else {\r\n                cls = 'string';\r\n            }\r\n        } else if (/true|false/.test(match)) {\r\n            cls = 'boolean';\r\n        } else if (/null/.test(match)) {\r\n            cls = 'null';\r\n        }\r\n        return '&lt;span class=\"' + cls + '\"&gt;' + match + '&lt;/span&gt;';\r\n    });\r\n}\r\n\r\nvar obj = {a:1, 'b':'foo', c:[false,'false',null, 'null', {d:{e:1.3e5,f:'1.3e5'}}]};\r\nvar str = JSON.stringify(obj, undefined, 4);\r\n\r\noutput(str);\r\noutput(syntaxHighlight(str));</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>pre {outline: 1px solid #ccc; padding: 5px; margin: 5px; }\r\n.string { color: green; }\r\n.number { color: darkorange; }\r\n.boolean { color: blue; }\r\n.null { color: magenta; }\r\n.key { color: red; }</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 2931,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 27862,
      "name": "user123444555621",
      "reputation": 76428
    }
  },
  {
    "soID": 24547364,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/24547364",
    "title": null,
    "body": "<p>It can be used where</p>\n\n<ul>\n<li>Applications that are highly event driven &amp; are heavily I/O bound</li>\n<li>Applications handling a large number of connections to other systems</li>\n<li>Real-time applications (Node.js was designed from the ground up for real time and to be easy\nto use.)</li>\n<li>Applications that juggle scads of information streaming to and from other sources</li>\n<li>High traffic, Scalable applications</li>\n<li>Mobile apps that have to talk to platform API &amp; database, without having to do a lot of data\nanalytics</li>\n<li>Build out networked applications</li>\n<li>Applications that need to talk to the back end very often</li>\n</ul>\n\n<p>On Mobile front, prime-time companies have relied on Node.js for their mobile solutions. <strong>Check out why?</strong></p>\n\n<p><a href=\"http://venturebeat.com/2011/08/16/linkedin-node/\">LinkedIn</a> is a prominent user. Their entire mobile stack is built on Node.js. They went from running 15 servers with 15 instances on each physical machine, to just 4 instances – that can handle double the traffic!</p>\n\n<p><a href=\"http://www.ebaytechblog.com/2011/11/30/announcing-ql-io/\">eBay</a> launched ql.io, a web query language for HTTP APIs, which uses Node.js as the runtime stack. They were able to tune a regular developer-quality Ubuntu workstation to handle more than 120,000 active connections per node.js process, with each connection consuming about 2kB memory!</p>\n\n<p><a href=\"http://venturebeat.com/2012/01/24/why-walmart-is-using-node-js/\">Walmart</a> re-engineered its mobile app to use Node.js and pushed its JavaScript processing to the server.</p>\n\n<p>Read more at: <a href=\"http://www.pixelatingbits.com/a-closer-look-at-mobile-app-development-with-node-js/\">http://www.pixelatingbits.com/a-closer-look-at-mobile-app-development-with-node-js/</a></p>\n",
    "score": 30,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 28557,
      "name": "Vinayak Bevinakatti",
      "reputation": 27148
    }
  },
  {
    "soID": 29400289,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/29400289",
    "title": null,
    "body": "<p>This is my attempt to improve on <a href=\"https://stackoverflow.com/a/12268916/34806\">this answer</a> taking into account the comments:</p>\n\n<pre><code>var isArray = myArray &amp;&amp; myArray.constructor === Array;\n</code></pre>\n\n<p>It gets rid of the if/else, and accounts for the possibility of the array being null or undefined</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 34806,
      "name": "George Jempty",
      "reputation": 5975
    }
  },
  {
    "soID": 1207393,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/1207393",
    "title": null,
    "body": "<p><strong>As of jQuery 1.7</strong> you should use <a href=\"https://api.jquery.com/on/#on-events-selector-data-handler\" rel=\"noreferrer\"><code>jQuery.fn.on</code></a>:</p>\n\n<pre><code>$(staticAncestors).on(eventName, dynamicChild, function() {});\n</code></pre>\n\n<hr>\n\n<p><strong>Prior to this</strong>, the recommended approach was to use <a href=\"http://api.jquery.com/live\" rel=\"noreferrer\"><code>live()</code></a>: </p>\n\n<pre><code>$(selector).live( eventName, function(){} );\n</code></pre>\n\n<p>However, <code>live()</code> was deprecated in 1.7 in favour of <code>on()</code>, and completely removed in 1.9. The <code>live()</code> signature:</p>\n\n<pre><code>$(selector).live( eventName, function(){} );\n</code></pre>\n\n<p>... can be replaced with the following <a href=\"http://api.jquery.com/on/\" rel=\"noreferrer\"><code>on()</code></a> signature:</p>\n\n<pre><code>$(document).on( eventName, selector, function(){} );\n</code></pre>\n\n<hr>\n\n<p>For example, if your page was dynamically creating elements with the class name <code>dosomething</code> you would bind the event to a parent which already exists, often <code>document</code>.</p>\n\n<pre><code>$(document).on('mouseover mouseout', '.dosomething', function(){\n    // what you want to happen when mouseover and mouseout \n    // occurs on elements that match '.dosomething'\n});\n</code></pre>\n\n<p>Any parent that exists at the time the event is bound is fine. For example</p>\n\n<pre><code>$('.buttons').on('click', 'button', function(){\n    // do something here\n});\n</code></pre>\n\n<p>would apply to </p>\n\n<pre><code>&lt;div class=\"buttons\"&gt;\n    &lt;!-- &lt;button&gt;s that are generated dynamically and added here --&gt;\n&lt;/div&gt;\n</code></pre>\n",
    "score": 1416,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 5554031,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/5554031",
    "title": null,
    "body": "<p>To elaborate Steven Spielberg's answer, I did this in such a case:</p>\n\n<pre><code>$('a').click(function() {\n  $(this).attr('target', '_blank');\n});\n</code></pre>\n\n<p>This way, just before the browser will follow the link I'm setting the target attribute, so it will make the link open in a new tab or window (<strong>depends on user's settings</strong>).</p>\n",
    "score": 53,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 44385,
      "name": "arikfr",
      "reputation": 2389
    }
  },
  {
    "soID": 384432,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/384432",
    "title": null,
    "body": "<p>The given solutions should be modified to check <code>source.hasOwnProperty(property)</code> in the <code>for..in</code> loops before assigning - otherwise, you end up copying the properties of the whole prototype chain, which is rarely desired...</p>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1470722,
    "parentID": 1470488,
    "url": "https://stackoverflow.com/q/1470722",
    "title": null,
    "body": "<p>You should <em>always</em> use the <code>var</code> keyword to declare variables. Why? Good coding practice should be enough of a reason in itself, but declaring a variable without the <code>var</code> keyword means it is declared in the <strong>global</strong> scope (a variable like this is called an \"implied\" global). Douglas Crockford <a href=\"http://javascript.crockford.com/code.html#variable%20declarations\" rel=\"noreferrer\">recommends never using implied globals</a>, and according to the <a href=\"http://developer.apple.com/safari/library/documentation/ScriptingAutomation/Conceptual/JSCodingGuide/Advanced/Advanced.html#//apple_ref/doc/uid/TP40006541\" rel=\"noreferrer\">Apple JavaScript Coding Guidelines</a>:</p>\n\n<blockquote>\n  <p>Any variable created without the <code>var</code>\n  keyword is created at the global scope\n  and is not garbage collected when the\n  function returns (because it doesn’t\n  go out of scope), presenting the\n  opportunity for a memory leak.</p>\n</blockquote>\n\n<p>So, in short, always declare variables using the <code>var</code> keyword.</p>\n",
    "score": 37,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 48492,
      "name": "Steve Harrison",
      "reputation": 64545
    }
  },
  {
    "soID": 18885102,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/18885102",
    "title": null,
    "body": "<p>There is no need to use <code>indexOf</code> or <code>splice</code>. However, it performs better if you only want to remove one occurrence of an element. </p>\n\n<p><strong>Find and move (move):</strong></p>\n\n<pre><code>function move(arr, val) {\n  var j = 0;\n  for (var i = 0, l = arr.length; i &lt; l; i++) {\n    if (arr[i] !== val) {\n      arr[j++] = arr[i];\n    }\n  }\n  arr.length = j;\n}\n</code></pre>\n\n<p><strong>Use <code>indexOf</code> and <code>splice</code> (indexof):</strong></p>\n\n<pre><code>function indexof(arr, val) {\n  var i;\n  while ((i = arr.indexOf(val)) != -1) {\n    arr.splice(i, 1);\n  }\n}\n</code></pre>\n\n<p><strong>Use only <code>splice</code> (splice):</strong></p>\n\n<pre><code>function splice(arr, val) {\n  for (var i = arr.length; i--;) {\n    if (arr[i] === val) {\n      arr.splice(i, 1);\n    }\n  }\n}\n</code></pre>\n\n<p><strong>Run-times on nodejs for array with 1000 elements (average over 10000 runs):</strong></p>\n\n<p><em>indexof</em> is approximately 10x slower than <em>move</em>. Even if improved by removing the call to <code>indexOf</code> in <em>splice</em> it performs much worse than <em>move</em>. </p>\n\n<pre><code>Remove all occurrences:\n    move 0.0048 ms\n    indexof 0.0463 ms\n    splice 0.0359 ms\n\nRemove first occurrence:\n    move_one 0.0041 ms\n    indexof_one 0.0021 ms\n</code></pre>\n",
    "score": 55,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 49960,
      "name": "slosd",
      "reputation": 1491
    }
  },
  {
    "soID": 602333,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/602333",
    "title": null,
    "body": "<p>You can use this great <a href=\"http://jquery-howto.blogspot.com/2009/02/add-table-row-using-jquery-and.html\" rel=\"noreferrer\">jQuery add table row</a> function. It works great with tables that have <code>&lt;tbody&gt;</code> and that don't. Also it takes into the consideration the colspan of your last table row.</p>\n\n<p>Here is an example usage:</p>\n\n<pre><code>// One table\naddTableRow($('#myTable'));\n// add table row to number of tables\naddTableRow($('.myTables'));\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 52317,
      "name": "Uzbekjon",
      "reputation": 8724
    }
  },
  {
    "soID": 587408,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/587408",
    "title": null,
    "body": "<p>In JavaScript, everything is 'truthy' or 'falsy', and for numbers <code>0</code> (and NaN) means <code>false</code>, everything else <code>true</code>. So you could write:</p>\n\n<pre><code>if ($(selector).length)\n</code></pre>\n\n<p>You don't need that <code>&gt;0</code> part.</p>\n",
    "score": 1741,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 60518,
      "name": "Tim Büthe",
      "reputation": 39852
    }
  },
  {
    "soID": 6057122,
    "parentID": 5874652,
    "url": "https://stackoverflow.com/q/6057122",
    "title": null,
    "body": "<p>It's just the distinction between HTML attributes and DOM objects that causes a confusion. For those that are comfortable acting on the DOM elements native properties such a <code>this.src</code> <code>this.value</code> <code>this.checked</code> etc, <code>.prop</code> is a very warm welcome to the family. For others, it's just an added layer of confusion. Let's clear that up.</p>\n\n<p>The easiest way to see the difference between <code>.attr</code> and <code>.prop</code> is the following example:</p>\n\n<pre><code>&lt;input blah=\"hello\"&gt;\n</code></pre>\n\n<ol>\n<li><strong><code>$('input').attr('blah')</code></strong>: returns <code>'hello'</code> as expected. No suprises here.</li>\n<li><strong><code>$('input').prop('blah')</code></strong>: returns <code>undefined</code> -- because it's trying to do <code>[HTMLInputElement].blah</code> -- and no such property on that DOM object exists. It only exists in the scope as an attribute of that element i.e. <code>[HTMLInputElement].getAttribute('blah')</code></li>\n</ol>\n\n<p>Now we change a few things like so:</p>\n\n<pre><code>$('input').attr('blah', 'apple');\n$('input').prop('blah', 'pear');\n</code></pre>\n\n<ol>\n<li><strong><code>$('input').attr('blah')</code></strong>: returns <code>'apple'</code> eh? Why not \"pear\" as this was set last on that element. Because the property was changed on the input attribute, not the DOM input element itself -- they basically almost work independently of each other.</li>\n<li><strong><code>$('input').prop('blah')</code></strong>: returns <code>'pear'</code></li>\n</ol>\n\n<p>The thing you really need to be careful with is just <strong>do not mix the usage of these for the same property throughout your application</strong> for the above reason.</p>\n\n<p><strong>See a fiddle demonstrating the difference:</strong> <a href=\"http://jsfiddle.net/garreh/uLQXc/\" rel=\"noreferrer\">http://jsfiddle.net/garreh/uLQXc/</a></p>\n\n<hr>\n\n<h2><code>.attr</code> vs <code>.prop</code>:</h2>\n\n<h3>Round 1: style</h3>\n\n<pre><code>&lt;input style=\"font:arial;\"/&gt;\n</code></pre>\n\n<ul>\n<li><code>.attr('style')</code> -- returns inline styles for the matched element i.e. <code>\"font:arial;\"</code></li>\n<li><code>.prop('style')</code> -- returns an style declaration object i.e. <code>CSSStyleDeclaration</code></li>\n</ul>\n\n<h3>Round 2: value</h3>\n\n<pre><code>&lt;input value=\"hello\" type=\"text\"/&gt;   \n\n$('input').prop('value', 'i changed the value');\n</code></pre>\n\n<ul>\n<li><code>.attr('value')</code> -- returns <code>'hello'</code> *</li>\n<li><code>.prop('value')</code> -- returns <code>'i changed the value'</code></li>\n</ul>\n\n<p>* Note: jQuery for this reason has a <code>.val()</code> method, which internally is equivalent to <code>.prop('value')</code></p>\n",
    "score": 118,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 63523,
      "name": "Gary Green",
      "reputation": 14554
    }
  },
  {
    "soID": 1470517,
    "parentID": 1470488,
    "url": "https://stackoverflow.com/q/1470517",
    "title": null,
    "body": "<p>I would say it's better to use <strong><code>var</code></strong> in most situations.</p>\n\n<p>Local variables are always faster than the variables in global scope.</p>\n\n<p>If you do not use <strong><code>var</code></strong> to declare a variable, the variable will be in global scope.</p>\n\n<p>For more information, you can search \"scope chain JavaScript\" in Google.</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 64873,
      "name": "Billy",
      "reputation": 6147
    }
  },
  {
    "soID": 750560,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/750560",
    "title": null,
    "body": "<p>Another way of saying it is that the <em>i</em> in your function is bound at the time of executing the function, not the time of creating the function.</p>\n\n<p>When you create the closure, <em>i</em> is a reference to the variable defined in the outside scope, not a copy of it as it was when you created the closure. It will be evaluated at the time of execution.</p>\n\n<p>Most of the other answers provide ways to work around by creating another variable that won't change value on you.</p>\n\n<p>Just thought I'd add an explanation for clarity. For a solution, personally I'd go with Harto's since it is the most self explanatory way of doing it from the answers here. Any of the code posted will work, but I'd opt for a closure factory over having to write a pile of comments to explain why I'm declaring a new variable(Freddy and 1800's) or have weird embedded closure syntax(apphacker).</p>\n",
    "score": 58,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 65307,
      "name": "Darren Clark",
      "reputation": 2079
    }
  },
  {
    "soID": 40222504,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/40222504",
    "title": null,
    "body": "<p>This function will turn almost anything into an array:</p>\n\n<pre><code>function arr(x) {\n    if(x === null || x === undefined) {\n        return [];\n    }\n    if(Array.isArray(x)) {\n        return x;\n    }\n    if(isString(x) || isNumber(x)) {\n        return [x];\n    }\n    if(x[Symbol.iterator] !== undefined || x.length !== undefined) {\n        return Array.from(x);\n    }\n    return [x];\n}\n\nfunction isString(x) {\n    return Object.prototype.toString.call(x) === \"[object String]\"\n}\n\nfunction isNumber(x) {\n    return Object.prototype.toString.call(x) === \"[object Number]\"\n}\n</code></pre>\n\n<p>It uses some newer browser features so you may want to polyfill this for maximum support.</p>\n\n<p>Examples:</p>\n\n<pre><code>&gt; arr(null);\n[]\n&gt; arr(undefined)\n[]\n&gt; arr(3.14)\n[ 3.14 ]\n&gt; arr(1/0)\n[ Infinity ]\n&gt; gen = function*() { yield 1; yield 2; yield 3; }\n[Function: gen]\n&gt; arr(gen())\n[ 1, 2, 3 ]\n&gt; arr([4,5,6])\n[ 4, 5, 6 ]\n&gt; arr(\"foo\")\n[ 'foo' ]\n</code></pre>\n\n<p>N.B. strings will be converted into an array with a single element instead of an array of chars. Delete the <code>isString</code> check if you would prefer it the other way around.</p>\n\n<p>I've used <code>Array.isArray</code> here because it's the <a href=\"http://web.mit.edu/jwalden/www/isArray.html\" rel=\"nofollow\">most robust</a> and also simplest.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 65387,
      "name": "mpen",
      "reputation": 98682
    }
  },
  {
    "soID": 43311380,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/43311380",
    "title": null,
    "body": "<h2>Remove one value, using loose comparison, without mutating original array, ES6</h2>\n\n<pre><code>/**\n * Removes one instance of `value` from `array`, without mutating the original array. Uses loose comparison.\n * \n * @param {Array} array Array to remove value from\n * @param {*} value Value to remove\n * @returns {Array} Array with `value` removed\n */\nexport function arrayRemove(array, value) {\n    for(let i=0; i&lt;array.length; ++i) {\n        if(array[i] == value) {\n            let copy = [...array];\n            copy.splice(i, 1);\n            return copy;\n        }\n    }\n    return array;\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 65387,
      "name": "mpen",
      "reputation": 98682
    }
  },
  {
    "soID": 750519,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/750519",
    "title": null,
    "body": "<p>What you need to understand is the scope of the variables in javascript is based on the function. This is an important difference than say c# where you have block scope, and just copying the variable to one inside the for will work.</p>\n\n<p>Wrapping it in a function that evaluates returning the function like apphacker's answer will do the trick, as the variable now has the function scope.</p>\n\n<p>There is also a let keyword instead of var, that would allow using the block scope rule. In that case defining a variable inside the for would do the trick. That said, the let keyword isn't a practical solution because of compatibility.</p>\n\n<pre><code>var funcs = {};\nfor (var i = 0; i &lt; 3; i++) {\n    let index = i;          //add this\n    funcs[i] = function() {            \n        console.log(\"My value: \" + index); //change to the copy\n    };\n}\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();                        \n}\n</code></pre>\n",
    "score": 47,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 66372,
      "name": "eglasius",
      "reputation": 31180
    }
  },
  {
    "soID": 750495,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/750495",
    "title": null,
    "body": "<p>Try:</p>\n\n<pre><code>var funcs = [];\n\nfor (var i = 0; i &lt; 3; i++) {\n    funcs[i] = (function(index) {\n        return function() {\n            console.log(\"My value: \" + index);\n        };\n    }(i));\n}\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();\n}\n</code></pre>\n\n<p><strong>Edit</strong> (2014):</p>\n\n<p>Personally I think @Aust's <a href=\"https://stackoverflow.com/a/19323214/918959\">more recent answer about using <code>.bind</code></a> is the best way to do this kind of thing now. There's also lo-dash/underscore's <code>_.partial</code> when you don't need or want to mess with <code>bind</code>'s <code>thisArg</code>.</p>\n",
    "score": 290,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 66475,
      "name": "Bjorn Tipling",
      "reputation": 29937
    }
  },
  {
    "soID": 5049040,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/5049040",
    "title": null,
    "body": "<p>Douglas Crockford's JSON in JavaScript library will pretty print JSON via the stringify method.</p>\n\n<p>You may also find the answers to this older question useful: <a href=\"https://stackoverflow.com/questions/352098/how-to-pretty-print-json-script\">How can I pretty-print JSON in (unix) shell script?</a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 68267,
      "name": "zcopley",
      "reputation": 382
    }
  },
  {
    "soID": 2139639,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/2139639",
    "title": null,
    "body": "<p>This can be done easily using the \"last()\" function of jQuery.</p>\n\n<pre><code>$(\"#tableId\").last().append(\"&lt;tr&gt;&lt;td&gt;New row&lt;/td&gt;&lt;/tr&gt;\");\n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 69542,
      "name": "Nischal",
      "reputation": 630
    }
  },
  {
    "soID": 41292431,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/41292431",
    "title": null,
    "body": "<p>This is nice:</p>\n\n<p><a href=\"https://github.com/mafintosh/json-markup\" rel=\"nofollow noreferrer\">https://github.com/mafintosh/json-markup</a> from <code>mafintosh</code></p>\n\n<pre><code>const jsonMarkup = require('json-markup')\nconst html = jsonMarkup({hello:'world'})\ndocument.querySelector('#myElem').innerHTML = html\n</code></pre>\n\n<p>HTML</p>\n\n<pre><code>&lt;link ref=\"stylesheet\" href=\"style.css\"&gt;\n&lt;div id=\"myElem&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Example stylesheet can be found here</p>\n\n<pre><code>https://raw.githubusercontent.com/mafintosh/json-markup/master/style.css\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 72787,
      "name": "wires",
      "reputation": 3391
    }
  },
  {
    "soID": 8625261,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/8625261",
    "title": null,
    "body": "<p>I need to merge objects today, and this question (and answers) helped me a lot. I tried some of the answers, but none of them fit my needs, so I combined some of the answers, added something myself and came up with a new merge function. Here it is:</p>\n\n\n\n<pre class=\"lang-js prettyprint-override\"><code>var merge = function() {\n    var obj = {},\n        i = 0,\n        il = arguments.length,\n        key;\n    for (; i &lt; il; i++) {\n        for (key in arguments[i]) {\n            if (arguments[i].hasOwnProperty(key)) {\n                obj[key] = arguments[i][key];\n            }\n        }\n    }\n    return obj;\n};\n</code></pre>\n\n<p>Some example usages:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var t1 = {\n    key1: 1,\n    key2: \"test\",\n    key3: [5, 2, 76, 21]\n};\nvar t2 = {\n    key1: {\n        ik1: \"hello\",\n        ik2: \"world\",\n        ik3: 3\n    }\n};\nvar t3 = {\n    key2: 3,\n    key3: {\n        t1: 1,\n        t2: 2,\n        t3: {\n            a1: 1,\n            a2: 3,\n            a4: [21, 3, 42, \"asd\"]\n        }\n    }\n};\n\nconsole.log(merge(t1, t2));\nconsole.log(merge(t1, t3));\nconsole.log(merge(t2, t3));\nconsole.log(merge(t1, t2, t3));\nconsole.log(merge({}, t1, { key1: 1 }));\n</code></pre>\n",
    "score": 50,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4810874,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/4810874",
    "title": null,
    "body": "<p>I use the <a href=\"https://chrome.google.com/extensions/detail/chklaanhfefbnpoihckbnefhakgolnmc\" rel=\"noreferrer\">JSONView Chrome extension</a> (it is as pretty as it gets :):</p>\n\n<p>Edit: added <code>jsonreport.js</code></p>\n\n<p>I've also released an online stand-alone JSON pretty print viewer, jsonreport.js, that provides a human readable HTML5 report you can use to view any JSON data.</p>\n\n<p>You can read more about the format in <em><a href=\"https://github.com/ServiceStack/ServiceStack/wiki/HTML5ReportFormat\" rel=\"noreferrer\">New JavaScript HTML5 Report Format</a></em>.</p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 85785,
      "name": "mythz",
      "reputation": 104329
    }
  },
  {
    "soID": 750506,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/750506",
    "title": null,
    "body": "<p>Well, the problem is that the variable <code>i</code>, within each of your anonymous functions, is bound to the same variable outside of the function.</p>\n\n<p>What you want to do is bind the variable within each function to a separate, unchanging value outside of the function:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var funcs = [];\r\n\r\nfunction createfunc(i) {\r\n    return function() { console.log(\"My value: \" + i); };\r\n}\r\n\r\nfor (var i = 0; i &lt; 3; i++) {\r\n    funcs[i] = createfunc(i);\r\n}\r\n\r\nfor (var j = 0; j &lt; 3; j++) {\r\n    funcs[j]();                        // and now let's run each one to see\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Since there is no block scope in JavaScript - only function scope - by wrapping the function creation in a new function, you ensure that the value of \"i\" remains as you intended.</p>\n\n<hr>\n\n<p><strong>Update:</strong> with the relatively widespread availability of the <code>Array.prototype.forEach</code> function (in 2015), it's worth noting that in those situations involving iteration primarily over an array of values, <code>.forEach()</code> provides a clean, natural way to get a distinct closure for every iteration. That is, assuming you've got some sort of array containing values (DOM references, objects, whatever), and the problem arises of setting up callbacks specific to each element, you can do this:</p>\n\n<pre><code>var someArray = [ /* whatever */ ];\n// ...\nsomeArray.forEach(function(arrayElement) {\n  // ... code code code for this one element\n  someAsynchronousFunction(arrayElement, function() {\n    arrayElement.doSomething();\n  });\n});\n</code></pre>\n\n<p>The idea is that each invocation of the callback function used with the <code>.forEach</code> loop will be its own closure. The parameter passed in to that handler is the array element specific to that particular step of the iteration. If it's used in an asynchronous callback, it won't collide with any of the other callbacks established at other steps of the iteration.</p>\n\n<p>If you happen to be working in jQuery, the <code>$.each()</code> function gives you a similar capability.</p>\n\n<p><strong>Update 2:</strong>\nECMAScript 6 (ES6), the newest version of JavaScript, is now starting to be implemented in many evergreen browsers and backend systems. There are also transpilers like <a href=\"http://babeljs.io/\" rel=\"noreferrer\">Babel</a> that will convert ES6 to ES5 to allow usage of new features on older systems.</p>\n\n<p>ES6 introduces new <code>let</code> and <code>const</code> keywords that are scoped differently than <code>var</code>-based variables. For example, in a loop with a <code>let</code>-based index, each iteration through the loop will have a new value of <code>i</code> where each value is scoped inside the loop, so your code would work as you expect. There are many resources, but I'd recommend <a href=\"http://www.2ality.com/2015/02/es6-scoping.html\" rel=\"noreferrer\">2ality's block-scoping post</a> as a great source of information.</p>\n\n<pre><code>for (let i = 0; i &lt; 3; i++) {\n    funcs[i] = function() {\n        console.log(\"My value: \" + i);\n    };\n}\n</code></pre>\n\n<p>Beware, though, that IE9-IE11 and Edge prior to Edge 14 support <code>let</code> but get the above wrong (they don't create a new <code>i</code> each time, so all the functions above would log 3 like they would if we used <code>var</code>). Edge 14 finally gets it right.</p>\n",
    "score": 1491,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 86463,
      "name": "harto",
      "reputation": 60836
    }
  },
  {
    "soID": 5515385,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/5515385",
    "title": null,
    "body": "<pre><code>// value is undefined or null\nreturn value === undefined || value === null;\n</code></pre>\n\n<p>JavaScript ninjas could use the <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\"><code>==</code></a> operator:</p>\n\n<pre><code>return value == null;\n</code></pre>\n",
    "score": 108,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 87015,
      "name": "Salman A",
      "reputation": 138954
    }
  },
  {
    "soID": 21795086,
    "parentID": 21692646,
    "url": "https://stackoverflow.com/q/21795086",
    "title": null,
    "body": "<p>I located the Facebook's console buster script using Chrome developer tools. Here is the script with minor changes for readability. I have removed the bits that I could not understand:</p>\n\n<pre><code>Object.defineProperty(window, \"console\", {\n    value: console,\n    writable: false,\n    configurable: false\n});\n\nvar i = 0;\nfunction showWarningAndThrow() {\n    if (!i) {\n        setTimeout(function () {\n            console.log(\"%cWarning message\", \"font: 2em sans-serif; color: yellow; background-color: red;\");\n        }, 1);\n        i = 1;\n    }\n    throw \"Console is disabled\";\n}\n\nvar l, n = {\n        set: function (o) {\n            l = o;\n        },\n        get: function () {\n            showWarningAndThrow();\n            return l;\n        }\n    };\nObject.defineProperty(console, \"_commandLineAPI\", n);\nObject.defineProperty(console, \"__commandLineAPI\", n);\n</code></pre>\n\n<p>With this, the console auto-complete fails silently while statements typed in console will fail to execute (the exception will be logged).</p>\n\n<p>References:</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">Object.defineProperty</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\">Object.getOwnPropertyDescriptor</a></li>\n<li><a href=\"https://developers.google.com/chrome-developer-tools/docs/console-api#consolelogobject_object\">Chrome's console.log function (for tips on formatting output)</a></li>\n</ul>\n",
    "score": 55,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 87015,
      "name": "Salman A",
      "reputation": 138954
    }
  },
  {
    "soID": 21202125,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/21202125",
    "title": null,
    "body": "<p>You can save a few bytes by writing:</p>\n\n<pre><code>if ($(selector)[0]) { ... }\n</code></pre>\n\n<p>This works because each jQuery object also masquerades as an array, so we can use the array dereferencing operator to get the first item from the <em>array</em>. It returns <code>undefined</code> if there is no item at the specified index.</p>\n",
    "score": 44,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 87015,
      "name": "Salman A",
      "reputation": 138954
    }
  },
  {
    "soID": 21202309,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/21202309",
    "title": null,
    "body": "<p>I use the following vanilla JavaScript functions in my code. They use regular expressions and <code>indexOf</code> but do not require quoting special characters in regular expressions.</p>\n\n<pre><code>function addClass(el, cn) {\n    var c0 = (\" \" + el.className + \" \").replace(/\\s+/g, \" \"),\n        c1 = (\" \" + cn + \" \").replace(/\\s+/g, \" \");\n    if (c0.indexOf(c1) &lt; 0) {\n        el.className = (c0 + c1).replace(/\\s+/g, \" \").replace(/^ | $/g, \"\");\n    }\n}\n\nfunction delClass(el, cn) {\n    var c0 = (\" \" + el.className + \" \").replace(/\\s+/g, \" \"),\n        c1 = (\" \" + cn + \" \").replace(/\\s+/g, \" \");\n    if (c0.indexOf(c1) &gt;= 0) {\n        el.className = c0.replace(c1, \" \").replace(/\\s+/g, \" \").replace(/^ | $/g, \"\");\n    }\n}\n</code></pre>\n\n<p>You can also use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element.classList\" rel=\"nofollow\">element.classList</a> in modern browsers.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 87015,
      "name": "Salman A",
      "reputation": 138954
    }
  },
  {
    "soID": 4776070,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/4776070",
    "title": null,
    "body": "<p>If the only two kinds of values that could be passed to this function are a string or an array of strings, keep it simple and use a <code>typeof</code> check for the string possibility:</p>\n\n<pre><code>function someFunc(arg) {\n    var arr = (typeof arg == \"string\") ? [arg] : arg;\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 96100,
      "name": "Tim Down",
      "reputation": 215900
    }
  },
  {
    "soID": 5876747,
    "parentID": 5874652,
    "url": "https://stackoverflow.com/q/5876747",
    "title": null,
    "body": "<p><strong>Update 1 November 2012</strong></p>\n\n<p>My original answer applies specifically to jQuery 1.6. My advice remains the same but jQuery 1.6.1 changed things slightly: in the face of the predicted pile of broken websites, the jQuery team <a href=\"http://blog.jquery.com/2011/05/12/jquery-1-6-1-released/\" rel=\"noreferrer\">reverted <code>attr()</code> to something close to (but not exactly the same as) its old behaviour for Boolean attributes</a>. John Resig also <a href=\"http://ejohn.org/blog/jquery-16-and-attr/\" rel=\"noreferrer\">blogged about it</a>. I can see the difficulty they were in but still disagree with the recommendation to prefer <code>attr()</code>.</p>\n\n<p><strong>Original answer</strong></p>\n\n<p>If you've only ever used jQuery and not the DOM directly, this could be a confusing change, although it is definitely an improvement conceptually. Not so good for the bazillions of sites using jQuery that will break as a result of this change though.</p>\n\n<p>I'll summarize the main issues:</p>\n\n<ul>\n<li>You usually want <code>prop()</code> rather than <code>attr()</code>.</li>\n<li>In the majority of cases, <code>prop()</code> does what <code>attr()</code> used to do. Replacing calls to <code>attr()</code> with <code>prop()</code> in your code will generally work.</li>\n<li>Properties are generally simpler to deal with than attributes. An attribute value may only be a string whereas a property can be of any type. For example, the <code>checked</code> property is a Boolean, the <code>style</code> property is an object with individual properties for each style, the <code>size</code> property is a number.</li>\n<li>Where both a property and an attribute with the same name exists, usually updating one will update the other, but this is not the case for certain attributes of inputs, such as <code>value</code> and <code>checked</code>: for these attributes, the property always represents the current state while the attribute (except in old versions of IE) corresponds to the default value/checkedness of the input (reflected in the <code>defaultValue</code> / <code>defaultChecked</code> property).</li>\n<li>This change removes some of the layer of magic jQuery stuck in front of attributes and properties, meaning jQuery developers will have to learn a bit about the difference between properties and attributes. This is a good thing.</li>\n</ul>\n\n<p>If you're a jQuery developer and are confused by this whole business about properties and attributes, you need to take a step back and learn a little about it, since jQuery is no longer trying so hard to shield you from this stuff. For the authoritative but somewhat dry word on the subject, there's the specs: <a href=\"http://www.w3.org/TR/dom/\" rel=\"noreferrer\">DOM4</a>, <a href=\"http://www.w3.org/TR/DOM-Level-2-HTML/\" rel=\"noreferrer\">HTML DOM</a>, <a href=\"http://www.w3.org/TR/DOM-Level-2-Core\" rel=\"noreferrer\">DOM Level 2</a>, <a href=\"http://www.w3.org/TR/DOM-Level-3-Core/\" rel=\"noreferrer\">DOM Level 3</a>. Mozilla's DOM documentation is valid for most modern browsers and is easier to read than the specs, so you may find their <a href=\"https://developer.mozilla.org/en/gecko_dom_reference\" rel=\"noreferrer\">DOM reference</a> helpful. There's a <a href=\"https://developer.mozilla.org/en/DOM/element#Properties\" rel=\"noreferrer\">section on element properties</a>.</p>\n\n<p>As an example of how properties are simpler to deal with than attributes, consider a checkbox that is initially checked. Here are two possible pieces of valid HTML to do this:</p>\n\n<pre><code>&lt;input id=\"cb\" type=\"checkbox\" checked&gt;\n&lt;input id=\"cb\" type=\"checkbox\" checked=\"checked\"&gt;\n</code></pre>\n\n<p>So, how do you find out if the checkbox is checked with jQuery? Look on Stack Overflow and you'll commonly find the following suggestions:</p>\n\n<ul>\n<li><code>if ( $(\"#cb\").attr(\"checked\") === true ) {...}</code></li>\n<li><code>if ( $(\"#cb\").attr(\"checked\") == \"checked\" ) {...}</code></li>\n<li><code>if ( $(\"#cb\").is(\":checked\") ) {...}</code></li>\n</ul>\n\n<p>This is actually the simplest thing in the world to do with the <code>checked</code> Boolean property, which has existed and worked flawlessly in every major scriptable browser since 1995:</p>\n\n<p><code>if (document.getElementById(\"cb\").checked) {...}</code></p>\n\n<p>The property also makes checking or unchecking the checkbox trivial:</p>\n\n<p><code>document.getElementById(\"cb\").checked = false</code></p>\n\n<p>In jQuery 1.6, this unambiguously becomes</p>\n\n<p><code>$(\"#cb\").prop(\"checked\", false)</code></p>\n\n<p>The idea of using the <code>checked</code> attribute for scripting a checkbox is unhelpful and unnecessary. The property is what you need.</p>\n\n<ul>\n<li>It's not obvious what the correct way to check or uncheck the checkbox is using the <code>checked</code> attribute</li>\n<li>The attribute value reflects the default rather than the current visible state (except in some older versions of IE, thus making things still harder). The attribute tells you nothing about the whether the checkbox on the page is checked. See <a href=\"http://jsfiddle.net/VktA6/49/\" rel=\"noreferrer\">http://jsfiddle.net/VktA6/49/</a>.</li>\n</ul>\n",
    "score": 1596,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 96100,
      "name": "Tim Down",
      "reputation": 215900
    }
  },
  {
    "soID": 20204021,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/20204021",
    "title": null,
    "body": "<p>Reasons to use NodeJS:</p>\n\n<ul>\n<li><p>It runs Javascript, so you can use the <strong>same language</strong> on server and client, and even share some code between them (e.g. for form validation, or to render views at either end.)</p></li>\n<li><p>The <a href=\"http://www.haneycodes.net/to-node-js-or-not-to-node-js/\" rel=\"nofollow noreferrer\">single-threaded</a> event-driven system is <a href=\"https://stackoverflow.com/questions/9290160/node-js-vs-net-performance\"><strong>fast</strong></a> even when handling lots of requests at once, and also simple, compared to traditional multi-threaded <a href=\"http://www.infoworld.com/article/2883328/java/java-vs-nodejs-an-epic-battle-for-developer-mindshare.html\" rel=\"nofollow noreferrer\">Java</a> or ROR frameworks.</p></li>\n<li><p>The ever-growing pool of <strong><a href=\"http://npmjs.org/\" rel=\"nofollow noreferrer\">packages</a> accessible through NPM</strong>, including client and server-side libraries/modules, as well as command-line tools for web development.  Most of these are conveniently hosted on github, where sometimes you can report an issue and find it fixed within hours!  It's nice to have everything under one roof, with standardized issue reporting and easy forking.</p></li>\n<li><p>It has become the defacto standard environment in which to run <strong>Javascript-related tools</strong> and other <strong>web-related tools</strong>, including task runners, minifiers, beautifiers, linters, preprocessors, bundlers and analytics processors.</p></li>\n<li><p>It seems quite suitable for prototyping, agile development and <strong>rapid product iteration</strong>.</p></li>\n</ul>\n\n<p>Reasons <strong>not</strong> to use NodeJS:</p>\n\n<ul>\n<li><p>It runs Javascript, which has no compile-time type checking.  For large, complex <strong>safety-critical</strong> systems, or projects including collaboration between different organizations, a language which encourages <strong>contractual interfaces</strong> and provides <strong>static type checking</strong> may save you some debugging time (and <em>explosions</em>) in the long run.  (Although the JVM is stuck with <code>null</code>, so please use Haskell for your nuclear reactors.)</p></li>\n<li><p>Added to that, many of the packages in NPM are a little <strong>raw</strong>, and still under rapid development.  Some libraries for older frameworks have undergone a decade of testing and bugfixing, and are very <strong>stable</strong> by now. <a href=\"https://pinboard.in/u:dandv/t:npm/t:against\" rel=\"nofollow noreferrer\">Npmjs.org has no mechanism to rate packages</a>, which has lead to a proliferation of packages doing more or less the same thing, out of which a large percentage are no longer maintained.</p></li>\n<li><p>Nested callback hell.  (Of course there are <a href=\"https://github.com/nodejs/node/wiki/Modules#async-flow\" rel=\"nofollow noreferrer\">20 different solutions</a> to this...)</p></li>\n<li><p>The ever-growing pool of packages can make one NodeJS project appear <strong>radically different</strong> from the next.  There is a large diversity in implementations due to the huge number of options available (e.g. Express/<a href=\"http://sailsjs.org/\" rel=\"nofollow noreferrer\">Sails.js</a>/<a href=\"https://www.meteor.com/\" rel=\"nofollow noreferrer\">Meteor</a>/<a href=\"http://derbyjs.com/\" rel=\"nofollow noreferrer\">Derby</a>).  This can sometimes make it harder for a new developer to jump in on a Node project.  Contrast that with a <strong>Rails</strong> developer joining an existing project: he should be able to get familiar with the app pretty quickly, because all Rails apps are encouraged to use a <strong>similar structure</strong>.</p></li>\n<li><p>Dealing with files can be a bit of a pain. Things that are trivial in other languages, like reading a line from a text file, are <a href=\"https://stackoverflow.com/questions/6156501/read-a-file-one-line-at-a-time-in-node-js#comment23691959_6156501\">weird enough to do with Node.js</a> that there's a StackOverflow question on that with 80+ upvotes. There's <a href=\"https://stackoverflow.com/questions/19587936/how-can-i-parse-records-on-demand-with-node-js\">no simple way to read one record at a time from a CSV file</a>. Etc.</p></li>\n</ul>\n\n<p>I love NodeJS, it is fast and wild and fun, but I am concerned it has little interest in provable-correctness.  Let's hope we can eventually merge the best of both worlds.  I am eager to see what will replace Node in the future... :)</p>\n",
    "score": 209,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 99777,
      "name": "joeytwiddle",
      "reputation": 11150
    }
  },
  {
    "soID": 23430396,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/23430396",
    "title": null,
    "body": "<h1>Loop backwards</h1>\n\n<p>I think the <em>reverse</em> for loop deserves a mention here:</p>\n\n<pre><code>for (var i = array.length; i--; ) {\n     // process array[i]\n}\n</code></pre>\n\n<h2>Advantages:</h2>\n\n<ul>\n<li>You do not need to declare a temporary <code>len</code> variable, or compare against <code>array.length</code> on each iteration, either of which might be a minute optimisation.</li>\n<li><strong>Removing siblings</strong> from the DOM in reverse order is usually <strong>more efficient</strong>.  (The browser needs to do less shifting of elements in its internal arrays.)</li>\n<li>If you <strong>modify the array</strong> while looping, at or after index <em>i</em> (for example you remove or insert an item at <code>array[i]</code>), then a forward loop would skip the item that shifted left into position <em>i</em>, or re-process the <em>i</em>th item that was shifted right.  In a traditional for loop, you <em>could</em> update <em>i</em> to point to the next item that needs processing - 1, but simply reversing the direction of iteration is often a <strong>simpler</strong> and <a href=\"https://stackoverflow.com/questions/23186254/javascript-splice-changing-earlier-values-in-an-array/23186450#23186450\">more elegant solution</a>.</li>\n<li>Similarly, when modifying or removing <strong>nested</strong> DOM elements, processing in reverse can <strong>circumvent errors</strong>. For example, consider modifying the innerHTML of a parent node before handling its children.  By the time the child node is reached it will be detached from the DOM, having been replaced by a newly created child when the parent's innerHTML was written.</li>\n<li>It is <strong>shorter</strong> to type, and <strong>read</strong>, than some of the other options available.  Although it loses to <code>forEach()</code> and to ES6's <code>for ... of</code>.</li>\n</ul>\n\n<h2>Disadvantages:</h2>\n\n<ul>\n<li>It processes the items in reverse order.  If you were building a new array from the results, or printing things on screen, naturally <strong>the output will be reversed</strong> with respect to the original order.</li>\n<li>Repeatedly inserting siblings into the DOM as a first child in order to retain their order is <strong>less efficient</strong>.  (The browser would keep having to shift things right.)  To create DOM nodes efficiently and in order, just loop forwards and append as normal (and also use a \"document fragment\").</li>\n<li>The reverse loop is <strong>confusing</strong> to junior developers.  (You may consider that an advantage, depending on your outlook.)</li>\n</ul>\n\n<hr>\n\n<h2>Should I always use it?</h2>\n\n<p>Some developers use the reverse for loop <em>by default</em>, unless there is a good reason to loop forwards.</p>\n\n<p>Although the performance gains are usually insignificant, it sort of screams:</p>\n\n<blockquote>\n  <p>\"Just do this to every item in the list, I don't care about the order!\"</p>\n</blockquote>\n\n<p>However in practice that is <strong>not</strong> actually a reliable indication of intent, since it is indistinguishable from those occasions when you <strong><em>do</em></strong> care about the order, and really do <strong><em>need</em></strong> to loop in reverse.  So in fact another construct would be needed to accurately express the \"don't care\" intent, something currently unavailable in most languages, including ECMAScript, but which could be called, for example, <code>forEachUnordered()</code>.</p>\n\n<p>If order doesn't matter, and <strong>efficiency</strong> is a concern (in the innermost loop of a game or animation engine), then it may be acceptable to use the reverse for loop as your go-to pattern.  Just remember that seeing a reverse for loop in existing code <strong>does not necessarily mean</strong> that the order irrelevant!</p>\n\n<h3>It is better to use forEach()</h3>\n\n<p>In general for higher level code where <strong>clarity and safety</strong> are greater concerns, I would recommend using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"noreferrer\"><code>Array::forEach</code></a> as your default pattern:</p>\n\n<ul>\n<li>It is clear to read.</li>\n<li>It indicates that <em>i</em> is not going to be shifted within the block (which is always a possible surprise hiding in long <code>for</code> and <code>while</code> loops.)</li>\n<li>It gives you a free scope for closures.</li>\n<li>It reduces leakage of local variables and accidental collision with (and mutation of) outer variables.</li>\n</ul>\n\n<p>Then when you do see the reverse for loop in your code, that is a hint that it is reversed for a good reason (perhaps one of the reasons described above).  And seeing a traditional forward for loop may indicate that shifting can take place.</p>\n\n<p>(If the discussion of intent makes no sense to you, then you and your code may benefit from watching Crockford's lecture on <a href=\"https://www.youtube.com/watch?v=taaEzHI9xyY&amp;t=480\" rel=\"noreferrer\">Programming Style &amp; Your Brain</a>.)</p>\n\n<hr>\n\n<h2>How does it work?</h2>\n\n<pre><code>for (var i = 0; i &lt; array.length; i++) { ... }   // Forwards\n\nfor (var i = array.length; i--; )    { ... }   // Reverse\n</code></pre>\n\n<p>You will notice that <code>i--</code> is the middle clause (where we usually see a comparison) and the last clause is empty (where we usually see <code>i++</code>).  That means that <code>i--</code> is also used as the <em>condition</em> for continuation.  Crucially, it is executed and checked <em>before</em> each iteration.</p>\n\n<ul>\n<li><p><strong>How can it start at <code>array.length</code> without exploding?</strong></p>\n\n<p>Because <code>i--</code> runs <em>before</em> each iteration, on the first iteration we will actually be accessing the item at <code>array.length - 1</code> which avoids any issues with <strike>Array-out-of-bounds</strike> <code>undefined</code> items.</p></li>\n<li><p><strong>Why doesn't it stop iterating before index 0?</strong></p>\n\n<p>The loop will stop iterating when the condition <code>i--</code> evaluates to a falsey value (when it yields 0).</p>\n\n<p>The trick is that unlike <code>--i</code>, the trailing <code>i--</code> operator decrements <code>i</code> but yields the value <strong><em>before</em></strong> the decrement.  Your console can demonstrate this:</p>\n\n<p><code>&gt; var i = 5; [i, i--, i];</code></p>\n\n<p><code>[5, 5, 4]</code></p>\n\n<p>So on the final iteration, <em>i</em> was previously <strong>1</strong> and the <code>i--</code> expression changes it to <strong>0</strong> but actually yields <strong>1</strong> (truthy), and so the condition passes.  On the next iteration <code>i--</code> changes <em>i</em> to <strong>-1</strong> but yields <strong>0</strong> (falsey), causing execution to immediately drop out of the bottom of the loop.</p>\n\n<p>In the traditional forwards for loop, <code>i++</code> and <code>++i</code> are interchangeable (as Douglas Crockford points out).  However in the reverse for loop, because our decrement is also our condition expression, we must stick with <code>i--</code> if we want to process the item at index 0.</p></li>\n</ul>\n\n<hr>\n\n<h2>Trivia</h2>\n\n<p>Some people like to draw a little arrow in the reverse <code>for</code> loop, and end with a wink:</p>\n\n<pre><code>for (var i = array.length; i --&gt; 0 ;) {\n</code></pre>\n\n<hr>\n\n<p><em>Credits go to WYL for showing me the benefits and horrors of the reverse for loop.</em></p>\n",
    "score": 68,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 99777,
      "name": "joeytwiddle",
      "reputation": 11150
    }
  },
  {
    "soID": 9329496,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/9329496",
    "title": null,
    "body": "<p><strong>Edit</strong>: This answer is hopelessly out-of-date. For a more modern approach, look at <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">the methods available on an array</a>. Methods of interest might be:</p>\n\n<ul>\n<li>forEach</li>\n<li>map</li>\n<li>filter</li>\n<li>zip</li>\n<li>reduce</li>\n<li>every</li>\n<li>some</li>\n</ul>\n\n<hr>\n\n<p>The standard way to iterate an array in <a href=\"http://en.wikipedia.org/wiki/JavaScript\">JavaScript</a> is a vanilla <code>for</code>-loop:</p>\n\n<pre><code>var length = arr.length,\n    element = null;\nfor (var i = 0; i &lt; length; i++) {\n  element = arr[i];\n  // Do something with element i.\n}\n</code></pre>\n\n<p>Note, however, that this approach is only good if you have a dense array, and each index is occupied by an element. If the array is sparse, then you can run into performance problems with this approach, since you will iterate over a lot of indices that do not <em>really</em> exist in the array. In this case, a <code>for .. in</code>-loop might be a better idea. <strong>However</strong>, you must use the appropriate safeguards to ensure that only the desired properties of the array (that is, the array elements) are acted upon, since the <code>for..in</code>-loop will also be enumerated in legacy browsers, or if the additional properties are defined as <code>enumerable</code>.</p>\n\n<p>In <a href=\"https://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition\">ECMAScript 5</a> there will be a forEach method on the array prototype, but it is not supported in legacy browsers. So to be able to use it consistently you must either have an environment that supports it (for example, <a href=\"http://en.wikipedia.org/wiki/Node.js\">Node.js</a> for server side JavaScript), or use a \"Polyfill\". The Polyfill for this functionality is, however, trivial and since it makes the code easier to read, it is a good polyfill to include.</p>\n",
    "score": 418,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 101811,
      "name": "PatrikAkerstrand",
      "reputation": 35265
    }
  },
  {
    "soID": 6635477,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/6635477",
    "title": null,
    "body": "<p>Use:</p>\n\n<pre><code>//Takes any number of objects and returns one merged object\nvar objectMerge = function(){\n    var out = {};\n    if(!arguments.length)\n        return out;\n    for(var i=0; i&lt;arguments.length; i++) {\n        for(var key in arguments[i]){\n            out[key] = arguments[i][key];\n        }\n    }\n    return out;\n}\n</code></pre>\n\n<p>It was tested with:</p>\n\n<pre><code>console.log(objectMerge({a:1, b:2}, {a:2, c:4}));\n</code></pre>\n\n<p>It results in:</p>\n\n<pre><code>{ a: 2, b: 2, c: 4 }\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 7965071,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/7965071",
    "title": null,
    "body": "<p><strong>Deep recursive merge of <a href=\"http://en.wikipedia.org/wiki/JSON\" rel=\"nofollow noreferrer\">JSON</a> strings and values</strong> (better implementation to <a href=\"https://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects-dynamically/383245#383245\">Markus' answer</a>):</p>\n\n<h3>Code</h3>\n\n<pre><code>function mergeRecursive(obj1, obj2) {\n    for (var p in obj2) {\n        if( obj2.hasOwnProperty(p)){\n            obj1[p] = typeof obj2[p] === 'object' ? mergeRecursive(obj1[p], obj2[p]) : obj2[p];\n        }\n    }\n    return obj1;\n}\n</code></pre>\n\n<h3>Example:</h3>\n\n<pre><code>o1 = { a:1, b:2, c:{ ca:1, cb:2, cc:{ cca:100, ccb:200 }}};\no2 = { a:10, c:{ ca:10, cb:20, cc:{ cca:101, ccb:202 }}};\nmergeRecursive(o1, o2);\n</code></pre>\n\n<h3>Output:</h3>\n\n<pre><code>{ a : 10,\n     b : 2,\n     c : {\n         ca : 10,\n         cb : 20,\n         cc : {\n             cca : 101,\n             ccb : 202\n         }\n     }\n};\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 30891034,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/30891034",
    "title": null,
    "body": "<p>You could use a declarative module for lists of data such as <a href=\"https://github.com/runefs/query-js\" rel=\"nofollow\">query-js</a>(*). In these situations I personally find a declarative approach less surprising</p>\n\n<pre><code>var funcs = Query.range(0,3).each(function(i){\n     return  function() {\n        console.log(\"My value: \" + i);\n    };\n});\n</code></pre>\n\n<p>You could then use your second loop and get the expected result or you could do </p>\n\n<pre><code>funcs.iterate(function(f){ f(); });\n</code></pre>\n\n<p>(*) I'm the author of query-js and therefor biased towards using it, so don't take my words as a recommendation for said library only for the declarative approach :)</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 112407,
      "name": "Rune FS",
      "reputation": 17216
    }
  },
  {
    "soID": 4775737,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/4775737",
    "title": null,
    "body": "<p>The method given in the ECMAScript standard to find the class of Object is to use the <code>toString</code> method from <code>Object.prototype</code>.</p>\n\n<pre><code>if( Object.prototype.toString.call( someVar ) === '[object Array]' ) {\n    alert( 'Array!' );\n}\n</code></pre>\n\n<p>Or you could use <code>typeof</code> to test if it is a String:</p>\n\n<pre><code>if( typeof someVar === 'string' ) {\n    someVar = [ someVar ];\n}\n</code></pre>\n\n<p>Or if you're not concerned about performance, you could just do a <code>concat</code> to a new empty Array.</p>\n\n<pre><code>someVar = [].concat( someVar );\n</code></pre>\n\n<hr>\n\n<p><strong>EDIT:</strong> Check out a <a href=\"http://blog.niftysnippets.org/2010/09/say-what.html\" rel=\"noreferrer\">thorough treatment</a> from <a href=\"https://stackoverflow.com/users/157247/t-j-crowder\">@T.J. Crowder's</a> blog, as posted in his comment below.</p>\n\n<p><strong>EDIT 2:</strong> Check out this <a href=\"http://jsben.ch/#/QgYAV\" rel=\"noreferrer\">benchmark</a> to get an idea which method performs better: <a href=\"http://jsben.ch/#/QgYAV\" rel=\"noreferrer\">http://jsben.ch/#/QgYAV</a></p>\n",
    "score": 1737,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 113716,
      "name": "user113716",
      "reputation": 230927
    }
  },
  {
    "soID": 32361399,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/32361399",
    "title": null,
    "body": "<p><strong>Donning asbestos longjohns...</strong></p>\n\n<p>Yesterday my title with Packt Publications, <a href=\"http://rads.stackoverflow.com/amzn/click/1783558555\">Reactive Programming with JavaScript</a>. It isn't really a Node.js-centric title; early chapters are intended to cover theory, and later code-heavy chapters cover practice. Because I didn't really think it would be appropriate to fail to give readers a webserver, Node.js seemed <strong><em>by far</em></strong> the obvious choice. The case was closed before it was even opened.</p>\n\n<p>I could have given a very rosy view of my experience with Node.js. Instead I was honest about good points and bad points I encountered.</p>\n\n<p>Let me include a few quotes that are relevant here:</p>\n\n<blockquote>\n  <p><strong>Warning: Node.js and its ecosystem are <em>hot</em>--hot enough to burn you badly!</strong></p>\n  \n  <p>When I was a teacher’s assistant in math, one of the non-obvious suggestions I was told was not to tell a student that something was “easy.” The reason was somewhat obvious in retrospect: if you tell people something is easy, someone who doesn’t see a solution may end up feeling (even more) stupid, because not only do they not get how to solve the problem, but the problem they are too stupid to understand is an easy one!</p>\n  \n  <p>There are gotchas that don’t just annoy people coming from Python / Django, which immediately reloads the source if you change anything. With Node.js, the default behavior is that if you make one change, the old version continues to be active until the end of time or until you manually stop and restart the server. This inappropriate behavior doesn’t just annoy Pythonistas; it also irritates native Node.js users who provide various workarounds. The StackOverflow question “Auto-reload of files in Node.js” has, at the time of this writing, over 200 upvotes and 19 answers; an edit directs the user to a nanny script, node-supervisor, with homepage at <a href=\"http://tinyurl.com/reactjs-node-supervisor\">http://tinyurl.com/reactjs-node-supervisor</a>. This problem affords new users with great opportunity to feel stupid because they thought they had fixed the problem, but the old, buggy behavior is completely unchanged. And it is easy to forget to bounce the server; I have done so multiple times. And the message I would like to give is, “No, you’re not stupid because this behavior of Node.js bit your back; it’s just that the designers of Node.js saw no reason to provide appropriate behavior here. Do try to cope with it, perhaps taking a little help from node-supervisor or another solution, but please don’t walk away feeling that you’re stupid. You’re not the one with the problem; the problem is in Node.js’s default behavior.”</p>\n  \n  <p>This section, after some debate, was left in, precisely because I don't want to give an impression of “It’s easy.” I cut my hands repeatedly while getting things to work, and I don’t want to smooth over difficulties and set you up to believe that getting Node.js and its ecosystem to function well is a straightforward matter and if it’s not straightforward for you too, you don’t know what you’re doing. If you don’t run into obnoxious difficulties using Node.js, that’s wonderful. If you do, I would hope that you don’t walk away feeling, “I’m stupid—there must be something wrong with me.” You’re not stupid if you experience nasty surprises dealing with Node.js. It’s not you! It’s Node.js and its ecosystem!</p>\n</blockquote>\n\n<p>The Appendix, which I did not really want after the rising crescendo in the last chapters and the conclusion, talks about what I was able to find in the ecosystem, and provided a workaround for moronic literalism:</p>\n\n<blockquote>\n  <p>Another database that seemed like a perfect fit, and may yet be redeemable, is a server-side implementation of the HTML5 key-value store. This approach has the cardinal advantage of an API that most good front-end developers understand well enough. For that matter, it’s also an API that most not-so-good front-end developers understand well enough. But with the node-localstorage package, while dictionary-syntax access is not offered (you want to use localStorage.setItem(key, value) or localStorage.getItem(key), not localStorage[key]), the full localStorage semantics are implemented, including a default 5MB quota—<em>WHY?</em> Do server-side JavaScript developers need to be protected from themselves?</p>\n  \n  <p>For client-side database capabilities, a 5MB quota per website is really a generous and useful amount of breathing room to let developers work with it. You could set a much lower quota and still offer developers an immeasurable improvement over limping along with cookie management. A 5MB limit doesn’t lend itself very quickly to Big Data client-side processing, but there is a really quite generous allowance that resourceful developers can use to do a lot. But on the other hand, 5MB is not a particularly large portion of most disks purchased any time recently, meaning that if you and a website disagree about what is reasonable use of disk space, or some site is simply hoggish, it does not really cost you much and you are in no danger of a swamped hard drive unless your hard drive was already too full. Maybe we would be better off if the balance were a little less or a little more, but overall it’s a decent solution to address the intrinsic tension for a client-side context.</p>\n  \n  <p>However, it might gently be pointed out that when you are the one writing code for your server, you don’t need any additional protection from making your database more than a tolerable 5MB in size. Most developers will neither need nor want tools acting as a nanny and protecting them from storing more than 5MB of server-side data. And the 5MB quota that is a golden balancing act on the client-side is rather a bit silly on a Node.js server. (And, for a database for multiple users such as is covered in this Appendix, it might be pointed out, slightly painfully, that that’s not 5MB per user account unless you create a separate database on disk for each user account; that’s 5MB shared between all user accounts together. That could get <em>painful</em> if you go viral!) The documentation states that the quota is customizable, but an email a week ago to the developer asking how to change the quota is unanswered, as was the StackOverflow question asking the same. The only answer I have been able to find is in the Github CoffeeScript source, where it is listed as an optional second integer argument to a constructor. So that’s easy enough, and you could specify a quota equal to a disk or partition size. But besides porting a feature that does not make sense, the tool’s author has failed completely to follow a very standard convention of interpreting 0 as meaning “unlimited” for a variable or function where an integer is to specify a maximum limit for some resource use. The best thing to do with this misfeature is probably to specify that the quota is Infinity:</p>\n</blockquote>\n\n<pre><code>if (typeof localStorage === 'undefined' || localStorage === null)\n  {      \n  var LocalStorage = require('node-localstorage').LocalStorage;\n  localStorage = new LocalStorage(__dirname + '/localStorage',\n    Infinity);\n  }\n</code></pre>\n\n<p>Swapping two comments in order:</p>\n\n<blockquote>\n  <p>People needlessly shot themselves in the foot constantly using JavaScript as a whole, and part of JavaScript being made respectable language was a Douglas Crockford saying in essence, “JavaScript as a language has some really good parts and some really bad parts. Here are the good parts. Just forget that anything else is there.” Perhaps the hot Node.js ecosystem will grow its <strong>own</strong> “Douglas Crockford,” who will say, “The Node.js ecosystem is a coding Wild West, but there are some real gems to be found. Here’s a roadmap. Here are the areas to avoid at almost any cost. Here are the areas with some of the richest paydirt to be found in ANY language or environment.”</p>\n  \n  <p>Perhaps someone else can take those words as a challenge, and follow Crockford’s lead and write up “the good parts” and / or “the better parts” for Node.js and its ecosystem. I’d buy a copy!</p>\n  \n  <p>And given the degree of enthusiasm and sheer work-hours on all projects, it may be warranted in a year, or two, or three, to sharply temper any remarks about an immature ecosystem made at the time of this writing. It really may make sense in five years to say, “The 2015 Node.js ecosystem had several minefields. The 2020 Node.js ecosystem has multiple paradises.”</p>\n</blockquote>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 116906,
      "name": "JonathanHayward",
      "reputation": 2267
    }
  },
  {
    "soID": 12971555,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/12971555",
    "title": null,
    "body": "<p>It's worth mentioning that the version from the <a href=\"http://www.140byt.es/\" rel=\"nofollow\">140byt.es collection</a> is solving the task within minimum space and is worth a try for this purpose:</p>\n\n<p>Code:</p>\n\n<pre><code>function m(a,b,c){for(c in b)b.hasOwnProperty(c)&amp;&amp;((typeof a[c])[0]=='o'?m(a[c],b[c]):a[c]=b[c])}\n</code></pre>\n\n<p>Usage for your purpose:</p>\n\n<pre><code>m(obj1,obj2);\n</code></pre>\n\n<p>Here's the <a href=\"https://gist.github.com/988478\" rel=\"nofollow\">original Gist</a>.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 37004869,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/37004869",
    "title": null,
    "body": "<p>\"use strict\"; is the ECMA effort to make JavaScript a little bit more robust. It brings in JS an attempt to make it at least a little \"strict\" (other languages implement strict rules since the 90s). It actually \"forces\" JavaScript developers to follow some sort of coding best practices.\nStill, JavaScript is very fragile. There is no such thing as typed variables, typed methods, etc.\nI strongly recommend JavaScript developers to learn a more robust language such as Java or ActionScript3, and implement the same best practices in your JavaScript code, it will work better and be easier to debug.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 120837,
      "name": "PippoApps.com",
      "reputation": 360
    }
  },
  {
    "soID": 7483600,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/7483600",
    "title": null,
    "body": "<h1><a href=\"https://github.com/visionmedia/commander.js\" rel=\"noreferrer\">Commander.js</a></h1>\n\n<p>Works great for defining your options, actions, and arguments. It also generates the help pages for you.</p>\n\n<h1><a href=\"https://github.com/IndigoUnited/node-promptly\" rel=\"noreferrer\">Promptly</a></h1>\n\n<p>Works great for getting input from the user, if you like the callback approach.</p>\n\n<h1><a href=\"https://github.com/visionmedia/co-prompt\" rel=\"noreferrer\">Co-Prompt</a></h1>\n\n<p>Works great for getting input from the user, if you like the generator approach.</p>\n",
    "score": 61,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 130638,
      "name": "balupton",
      "reputation": 28333
    }
  },
  {
    "soID": 1471738,
    "parentID": 1470488,
    "url": "https://stackoverflow.com/q/1471738",
    "title": null,
    "body": "<p><strong>There's a difference</strong>.</p>\n\n<p><code>var x = 1</code> <strong>declares variable</strong> <code>x</code> in current scope (aka execution context). If the declaration appears in a function - a local variable is declared; if it's in global scope - a global variable is declared.</p>\n\n<p><code>x = 1</code>, on the other hand, is merely a property assignment. It first tries to resolve <code>x</code> against scope chain. If it finds it anywhere in that scope chain, it performs assignment; if it doesn't find <code>x</code>, only then does <strong>it create <code>x</code> property on a global object</strong> (which is a top level object in a scope chain). </p>\n\n<p>Now, notice that it doesn't declare a global variable, it creates a global property.</p>\n\n<p>The difference between the two is subtle and might be confusing unless you understand that <strong>variable declarations also create properties</strong> (only on a Variable Object) and that every property in Javascript (well, ECMAScript) have certain flags that describe their properties - ReadOnly, DontEnum and DontDelete.</p>\n\n<p>Since variable declaration creates property with the DontDelete flag, the difference between <code>var x = 1</code> and <code>x = 1</code> (when executed in global scope) is that the former one - variable declaration - creates the DontDelete'able property, and latter one doesn't. As a consequence, the property created via this implicit assignment can then be deleted from the global object, and the former one - the one created via variable declaration - cannot be deleted.</p>\n\n<p>But this is just theory of course, and <strong>in practice there are even more differences between the two</strong>, due to various bugs in implementations (such as those from IE).</p>\n\n<p>Hope it all makes sense : )</p>\n\n<hr>\n\n<p><strong>[Update 2010/12/16]</strong></p>\n\n<p>In ES5 (ECMAScript 5; recently standardized, 5th edition of the language) there's a so-called \"strict mode\" — an opt-in language mode, which slightly changes the behavior of undeclared assignments. In strict mode, assignment to an undeclared identifier is a <strong>ReferenceError</strong>. The rationale for this was to catch accidental assignments, preventing creation of undesired global properties. Some of the newer browsers have already started rolling support for strict mode. See, for example, <a href=\"http://kangax.github.com/es5-compat-table\" rel=\"noreferrer\">my compat table</a>.</p>\n",
    "score": 657,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 130652,
      "name": "kangax",
      "reputation": 29820
    }
  },
  {
    "soID": 18165553,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/18165553",
    "title": null,
    "body": "<p>A friend was having issues in <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_8\">Internet&nbsp;Explorer&nbsp;8</a>, and showed me what he did. I told him it was wrong, and he told me he got the answer here. The current top answer will not work in all browsers (Internet&nbsp;Explorer&nbsp;8 for example), and it will only remove the first occurrence of the item.</p>\n\n<h2>Remove ALL instances from an array</h2>\n\n<pre><code>  function remove(arr, item) {\n      for(var i = arr.length; i--;) {\n          if(arr[i] === item) {\n              arr.splice(i, 1);\n          }\n      }\n  }\n</code></pre>\n\n<p>It loops through the array backwards (since indices and length will change as items are removed) and removes the item if it's found. It works in all browsers.</p>\n",
    "score": 181,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 135786,
      "name": "Ben Lesh",
      "reputation": 88742
    }
  },
  {
    "soID": 1214602,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/1214602",
    "title": null,
    "body": "<p>In <a href=\"http://en.wikipedia.org/wiki/MooTools\" rel=\"nofollow noreferrer\">MooTools</a>, there's <a href=\"http://mootools.net/docs/core/Types/Object#Object:Object-merge\" rel=\"nofollow noreferrer\">Object.merge()</a>:</p>\n\n<pre><code>Object.merge(obj1, obj2);\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 1335881,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/1335881",
    "title": null,
    "body": "<p>This article about Javascript Strict Mode might interest you: <a href=\"http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/\" rel=\"noreferrer\">John Resig - ECMAScript 5 Strict Mode, JSON, and More</a></p>\n\n<p>To quote some interesting parts:</p>\n\n<blockquote>\n  <p>Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a \"strict\" operating context. This strict context prevents certain actions from being taken and throws more exceptions.</p>\n</blockquote>\n\n<p>And:</p>\n\n<blockquote>\n  <p>Strict mode helps out in a couple ways:</p>\n  \n  <ul>\n  <li>It catches some common coding bloopers, throwing exceptions.</li>\n  <li>It prevents, or throws errors, when relatively \"unsafe\" actions are taken (such as gaining access to the global object).</li>\n  <li>It disables features that are confusing or poorly thought out.</li>\n  </ul>\n</blockquote>\n\n<p>Also note you can apply \"strict mode\" to the whole file... Or you can use it only for a specific function <em>(still quoting from John Resig's article)</em>:</p>\n\n<blockquote>\n<pre><code>// Non-strict code...\n\n(function(){\n  \"use strict\";\n\n  // Define your library strictly...\n})();\n\n// Non-strict code... \n</code></pre>\n</blockquote>\n\n<p>Which might be helpful if you have to mix old and new code ;-)</p>\n\n<p>So, I suppose it's a bit like the <code>\"use strict\"</code> you can use in Perl <em>(hence the name?)</em>: it helps you make fewer errors, by detecting more things that could lead to breakages.</p>\n\n<p>Currently, it's <a href=\"http://caniuse.com/#use-strict\" rel=\"noreferrer\"><strong>supported by all major browsers</strong></a> <em>(bar IE 9 and below)</em>.</p>\n",
    "score": 3850,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 138475,
      "name": "Pascal MARTIN",
      "reputation": 297951
    }
  },
  {
    "soID": 34937304,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/34937304",
    "title": null,
    "body": "<h2>Event binding on dynamically created elements</h2>\n\n<p><strong>Single element:</strong></p>\n\n<pre><code>$(document.body).on('click','.element', function(e) {  });\n</code></pre>\n\n<p><strong>Child Element:</strong></p>\n\n<pre><code> $(document.body).on('click','.element *', function(e) {  });\n</code></pre>\n\n<p>Notice the added <code>*</code>. An event will be triggered for all children of that element.</p>\n\n<p>I have noticed that:</p>\n\n<pre><code>$(document.body).on('click','.#element_id &gt; element', function(e) {  });\n</code></pre>\n\n<p>It is not working any more, but it was working before. I have been using jQuery from Google <a href=\"http://en.wikipedia.org/wiki/Content_delivery_network\" rel=\"noreferrer\">CDN</a>, but I don't know if they changed it.</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 144015,
      "name": "MadeInDreams",
      "reputation": 702
    }
  },
  {
    "soID": 29535421,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/29535421",
    "title": null,
    "body": "<p>If you have complex objects in the array you can use filters? \nIn situations where $.inArray or array.splice is not as easy to use. Especially if the objects are perhaps shallow in the array.</p>\n\n<p>E.g. if you have an object with an Id field and you want the object removed from an array:</p>\n\n<pre><code>this.array = this.array.filter(function(element, i) {\n    return element.id !== idToRemove;\n});\n</code></pre>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 155689,
      "name": "flurdy",
      "reputation": 2167
    }
  },
  {
    "soID": 4775741,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/4775741",
    "title": null,
    "body": "<p>I would first check if your implementation supports <code>isArray</code>:</p>\n\n<pre><code>if (Array.isArray)\n    return Array.isArray(v);\n</code></pre>\n\n<p>You could also try using the <code>instanceof</code> operator</p>\n\n<pre><code>v instanceof Array\n</code></pre>\n",
    "score": 932,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 156142,
      "name": "ChaosPandion",
      "reputation": 55999
    }
  },
  {
    "soID": 5884994,
    "parentID": 5874652,
    "url": "https://stackoverflow.com/q/5884994",
    "title": null,
    "body": "<p>I think <a href=\"https://stackoverflow.com/questions/5874652/prop-vs-attr/5876747#5876747\">Tim said it quite well</a>, but let's step back:</p>\n\n<p>A DOM element is an object, a thing in memory. Like most objects in OOP, it has <em>properties</em>. It also, separately, has a map of the attributes defined on the element (usually coming from the markup that the browser read to create the element). Some of the element's <em>properties</em> get their <em>initial</em> values from <em>attributes</em> with the same or similar names (<code>value</code> gets its initial value from the \"value\" attribute; <code>href</code> gets its initial value from the \"href\" attribute, but it's not exactly the same value; <code>className</code> from the \"class\" attribute). Other properties get their initial values in other ways: For instance, the <code>parentNode</code> property gets its value based on what its parent element is; an element always has a <code>style</code> property, whether it has a \"style\" attribute or not.</p>\n\n<p>Let's consider this anchor in a page at <code>http://example.com/testing.html</code>:</p>\n\n<pre><code>&lt;a href='foo.html' class='test one' name='fooAnchor' id='fooAnchor'&gt;Hi&lt;/a&gt;\n</code></pre>\n\n<p>Some gratuitous ASCII art (and leaving out a lot of stuff):</p>\n\n<pre>\n+−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−+\n|             HTMLAnchorElement             |\n+−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−+\n| href:       \"http://example.com/foo.html\" |\n| name:       \"fooAnchor\"                   |\n| id:         \"fooAnchor\"                   |\n| className:  \"test one\"                    |\n| attributes:                               |\n|    href:  \"foo.html\"                      |\n|    name:  \"fooAnchor\"                     |\n|    id:    \"fooAnchor\"                     |\n|    class: \"test one\"                      |\n+−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−+\n</pre>\n\n<p>Note that the properties and attributes are distinct.</p>\n\n<p>Now, although they are distinct, because all of this evolved rather than being designed from the ground up, a number of properties write back to the attribute they derived from if you set them. But not all do, and as you can see from <code>href</code> above, the mapping is not always a straight \"pass the value on\", sometimes there's interpretation involved.</p>\n\n<p>When I talk about properties being properties of an object, I'm not speaking in the abstract. Here's some non-jQuery code:</p>\n\n<pre><code>var link = document.getElementById('fooAnchor');\nalert(link.href);                 // alerts \"http://example.com/foo.html\"\nalert(link.getAttribute(\"href\")); // alerts \"foo.html\"\n</code></pre>\n\n<p>(Those values are as per most browsers; there's some variation.)</p>\n\n<p>The <code>link</code> object is a real thing, and you can see there's a real distinction between accessing a <em>property</em> on it, and accessing an <em>attribute</em>.</p>\n\n<p>As Tim said, the <strong>vast majority</strong> of the time, we want to be working with properties. Partially that's because their values (even their names) tend to be more consistent across browsers. We mostly only want to work with attributes when there is no property related to it (custom attributes), or when we know that for that particular attribute, the attribute and the property are not 1:1 (as with <code>href</code> and \"href\" above).</p>\n\n<p>The standard properties are laid out in the various DOM specs:</p>\n\n<ul>\n<li><a href=\"http://www.w3.org/TR/DOM-Level-2-HTML/\" rel=\"noreferrer\">DOM2 HTML</a> <em>(largely obsolete, see the <a href=\"https://www.w3.org/TR/html5/\" rel=\"noreferrer\">HTML spec</a> instead)</em></li>\n<li><a href=\"http://www.w3.org/TR/DOM-Level-2-Core/\" rel=\"noreferrer\">DOM2 Core</a> <em>(obsolete)</em></li>\n<li><a href=\"http://www.w3.org/TR/DOM-Level-3-Core/\" rel=\"noreferrer\">DOM3 Core</a> <em>(obsolete)</em></li>\n<li><a href=\"https://www.w3.org/TR/domcore/\" rel=\"noreferrer\">DOM4</a></li>\n</ul>\n\n<p>These specs have excellent indexes and I recommend keeping links to them handy; I use them all the time.</p>\n\n<p>Custom attributes would include, for instance, any <code>data-xyz</code> attributes you might put on elements to provide meta-data to your code (now that that's valid as of HTML5, as long as you stick to the <code>data-</code> prefix). (Recent versions of jQuery give you access to <code>data-xyz</code> elements via the <code>data</code> function, but that function is <strong>not</strong> just an accessor for <code>data-xyz</code> attributes [it does both more and less than that]; unless you actually need its features, I'd use the <code>attr</code> function to interact with <code>data-xyz</code> attribute.)</p>\n\n<p>The <code>attr</code> function used to have some convoluted logic around getting what they thought you wanted, rather than literally getting the attribute. It conflated the concepts. Moving to <code>prop</code> and <code>attr</code> was meant to de-conflate them. Briefly in v1.6.0 jQuery went too far in that regard, but functionality <a href=\"http://blog.jquery.com/2011/05/10/jquery-1-6-1-rc-1-released/\" rel=\"noreferrer\">was quickly added back</a> to <code>attr</code> to handle the common situations where people use <code>attr</code> when technically they should use <code>prop</code>.</p>\n",
    "score": 566,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 157247,
      "name": "T.J. Crowder",
      "reputation": 557106
    }
  },
  {
    "soID": 9329476,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/9329476",
    "title": null,
    "body": "\n\n<p><strong>TL;DR</strong></p>\n\n<ul>\n<li>Don't use <code>for-in</code> unless you use it with safeguards or are at least aware of why it might bite you.</li>\n<li><p>Your best bets are usually</p>\n\n<ul>\n<li>a <code>for-of</code> loop (ES2015+ only),</li>\n<li><code>Array#forEach</code> (<a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.foreach\" rel=\"noreferrer\"><code>spec</code></a> | <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"noreferrer\"><code>MDN</code></a>) (or its relatives <code>some</code> and such) (ES5+ only),</li>\n<li>a simple old-fashioned <code>for</code> loop,</li>\n<li>or <code>for-in</code> with safeguards.</li>\n</ul></li>\n</ul>\n\n<p>But there's <strong>lots</strong> more to explore, read on...</p>\n\n<hr>\n\n<p>JavaScript has powerful semantics for looping through arrays and array-like objects. I've split the answer into two parts: Options for genuine arrays, and options for things that are just array-<em>like</em>, such as the <code>arguments</code> object, other iterable objects (ES2015+), DOM collections, and so on.</p>\n\n<p>I'll quickly note that you can use the ES2015 options <em>now</em>, even on ES5 engines, by <em>transpiling</em> ES2015 to ES5. Search for \"ES2015 transpiling\" / \"ES6 transpiling\" for more...</p>\n\n<p>Okay, let's look at our options:</p>\n\n<h2>For Actual Arrays</h2>\n\n<p>You have three options in <a href=\"http://ecma-international.org/ecma-262/5.1/\" rel=\"noreferrer\">ECMAScript&nbsp;5</a> (\"ES5\"), the version most broadly supported at the moment, and will soon have two more in <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html\" rel=\"noreferrer\">ECMAScript&nbsp;2015</a> (\"ES2015\", \"ES6\"), the latest version of JavaScript that vendors are working on supporting:</p>\n\n<ol>\n<li>Use <code>forEach</code> and related (ES5+)</li>\n<li>Use a simple <code>for</code> loop</li>\n<li>Use <code>for-in</code> <em>correctly</em></li>\n<li>Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</li>\n<li>Use an iterator explicitly (ES2015+)</li>\n</ol>\n\n<p>Details:</p>\n\n<h3>1. Use <code>forEach</code> and related</h3>\n\n<p>If you're using an environment that supports the <code>Array</code> features of ES5 (directly or using a shim), you can use the new <code>forEach</code> (<a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.foreach\" rel=\"noreferrer\"><code>spec</code></a> | <a href=\"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"noreferrer\"><code>MDN</code></a>):</p>\n\n<pre><code>var a = [\"a\", \"b\", \"c\"];\na.forEach(function(entry) {\n    console.log(entry);\n});\n</code></pre>\n\n<p><code>forEach</code> accepts an iterator function and, optionally, a value to use as <code>this</code> when calling that iterator function (not used above). The iterator function is called for each entry in the array, in order, skipping non-existent entries in sparse arrays. Although I only used one argument above, the iterator function is called with three: The value of each entry, the index of that entry, and a reference to the array you're iterating over (in case your function doesn't already have it handy).</p>\n\n<p>Unless you're supporting obsolete browsers like IE8 (which NetApps shows at just over 4% market share as of this writing in September&nbsp;2016), you can happily use <code>forEach</code> in a general-purpose web page without a shim. If you do need to support obsolete browsers, shimming/polyfilling <code>forEach</code> is easily done (search for \"es5 shim\" for several options).</p>\n\n<p><code>forEach</code> has the benefit that you don't have to declare indexing and value variables in the containing scope, as they're supplied as arguments to the iteration function, and so nicely scoped to just that iteration.</p>\n\n<p>If you're worried about the runtime cost of making a function call for each array entry, don't be; <a href=\"http://blog.niftysnippets.org/2012/02/foreach-and-runtime-cost.html\" rel=\"noreferrer\">details</a>.</p>\n\n<p>Additionally, <code>forEach</code> is the \"loop through them all\" function, but ES5 defined several other useful \"work your way through the array and do things\" functions, including:</p>\n\n<ul>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.every\" rel=\"noreferrer\"><code>every</code></a> (stops looping the first time the iterator returns <code>false</code> or something falsey)</li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.some\" rel=\"noreferrer\"><code>some</code></a> (stops looping the first time the iterator returns <code>true</code> or something truthy)</li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.filter\" rel=\"noreferrer\"><code>filter</code></a> (creates a new array including elements where the filter function returns <code>true</code> and omitting the ones where it returns <code>false</code>)</li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.map\" rel=\"noreferrer\"><code>map</code></a> (creates a new array from the values returned by the iterator function)</li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.reduce\" rel=\"noreferrer\"><code>reduce</code></a> (builds up a value by repeated calling the iterator, passing in previous values; see the spec for the details; useful for summing the contents of an array and many other things)</li>\n<li><a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.reduceright\" rel=\"noreferrer\"><code>reduceRight</code></a> (like <code>reduce</code>, but works in descending rather than ascending order)</li>\n</ul>\n\n<h3>2. Use a simple <code>for</code> loop</h3>\n\n<p>Sometimes the old ways are the best:</p>\n\n<pre><code>var index;\nvar a = [\"a\", \"b\", \"c\"];\nfor (index = 0; index &lt; a.length; ++index) {\n    console.log(a[index]);\n}\n</code></pre>\n\n<p>If the length of the array won't change during the loop, and it's in performance-sensitive code (unlikely), a slightly more complicated version grabbing the length up front might be a <strong><em>tiny</em></strong> bit faster:</p>\n\n<pre><code>var index, len;\nvar a = [\"a\", \"b\", \"c\"];\nfor (index = 0, len = a.length; index &lt; len; ++index) {\n    console.log(a[index]);\n}\n</code></pre>\n\n<p>And/or counting backward:</p>\n\n<pre><code>var index;\nvar a = [\"a\", \"b\", \"c\"];\nfor (index = a.length - 1; index &gt;= 0; --index) {\n    console.log(a[index]);\n}\n</code></pre>\n\n<p>But with modern JavaScript engines, it's rare you need to eke out that last bit of juice.</p>\n\n<p>In ES2015 and higher, you can make your index and value variables local to the <code>for</code> loop:</p>\n\n<pre><code>let a = [\"a\", \"b\", \"c\"];\nfor (let index = 0; index &lt; a.length; ++index) {\n    let value = a[index];\n}\n//console.log(index); // Would cause \"ReferenceError: index is not defined\"\n//console.log(value); // Would cause \"ReferenceError: value is not defined\"\n</code></pre>\n\n<p>And when you do that, not just <code>value</code> but also <code>index</code> is recreated for each loop iteration, meaning closures created in the loop body keep a reference to the <code>index</code> (and <code>value</code>) created for that specific iteration:</p>\n\n<pre><code>let divs = Array.from(document.querySelector(\"div\"));\nfor (let index = 0; index &lt; divs.length; ++index) {\n    div[index].addEventListener(e =&gt; {\n        alert(\"Index is: \" + index);\n    });\n}\n</code></pre>\n\n<p>If you had five divs, you'd get \"Index is: 0\" if you clicked the first and \"Index is: 4\" if you clicked the last. This does <strong>not</strong> work if you use <code>var</code> instead of <code>let</code>.</p>\n\n<h3>3. Use <code>for-in</code> <em>correctly</em></h3>\n\n<p>You'll get people telling you to use <code>for-in</code>, but <a href=\"http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html\" rel=\"noreferrer\">that's not what <code>for-in</code> is for</a>. <code>for-in</code> loops through the <em>enumerable properties of an object</em>, not the indexes of an array. <strong>The order is not guaranteed</strong>, not even in ES2015 (ES6). ES2015 does define an order to object properties (via <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys\" rel=\"noreferrer\"><code>[[OwnPropertyKeys]]</code></a>, <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-ordinary-object-internal-methods-and-internal-slots-enumerate\" rel=\"noreferrer\"><code>[[Enumerate]]</code></a>, and things that use them like <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-object.getownpropertynames\" rel=\"noreferrer\"><code>Object.getOwnPropertyKeys</code></a>), but it <strong>does not</strong> define that <code>for-in</code> will follow that order. (Details in <a href=\"https://stackoverflow.com/a/30919039/157247\">this other answer</a>.)</p>\n\n<p>Still, it <em>can</em> be useful, particularly for <a href=\"http://en.wikipedia.org/wiki/Sparse_array\" rel=\"noreferrer\"><em>sparse</em> arrays</a>, if you use appropriate safeguards:</p>\n\n<pre><code>// `a` is a sparse array\nvar key;\nvar a = [];\na[0] = \"a\";\na[10] = \"b\";\na[10000] = \"c\";\nfor (key in a) {\n    if (a.hasOwnProperty(key)  &amp;&amp;        // These are explained\n        /^0$|^[1-9]\\d*$/.test(key) &amp;&amp;    // and then hidden\n        key &lt;= 4294967294                // away below\n        ) {\n        console.log(a[key]);\n    }\n}\n</code></pre>\n\n<p>Note the two checks:</p>\n\n<ol>\n<li><p>That the object has its <em>own</em> property by that name (not one it inherits from its prototype), and</p></li>\n<li><p>That the key is a base-10 numeric string in its normal string form and its value is &lt;= 2^32 - 2 (which is 4,294,967,294). Where does that number come from? It's part of the definition of an array index <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4\" rel=\"noreferrer\">in the specification</a>. Other numbers (non-integers, negative numbers, numbers greater than 2^32 - 2) are not array indexes. The reason it's 2^32 - <strong>2</strong> is that that makes the greatest index value one lower than 2^32 - <strong>1</strong>, which is the maximum value an array's <code>length</code> can have. (E.g., an array's length fits in a 32-bit unsigned integer.) <em>(Props to RobG for pointing out in a comment <a href=\"http://blog.niftysnippets.org/2010/11/myths-and-realities-of-forin.html\" rel=\"noreferrer\">on my blog post</a> that my previous test wasn't quite right.)</em></p></li>\n</ol>\n\n<p>That's a tiny bit of added overhead per loop iteration on most arrays, but if you have a <em>sparse</em> array, it can be a more efficient way to loop because it only loops for entries that actually exist. E.g., for the array above, we loop a total of three times (for keys <code>\"0\"</code>, <code>\"10\"</code>, and <code>\"10000\"</code>&nbsp;&mdash; remember, they're strings), not 10,001 times.</p>\n\n<p>Now, you won't want to write that every time, so you might put this in your toolkit:</p>\n\n<pre><code>function arrayHasOwnIndex(array, prop) {\n    return array.hasOwnProperty(prop) &amp;&amp; /^0$|^[1-9]\\d*$/.test(prop) &amp;&amp; prop &lt;= 4294967294; // 2^32 - 2\n}\n</code></pre>\n\n<p>And then we'd use it like this:</p>\n\n<pre><code>for (key in a) {\n    if (arrayHasOwnIndex(a, key)) {\n        console.log(a[key]);\n    }\n}\n</code></pre>\n\n<p>Or if you're interested in just a \"good enough for most cases\" test, you could use this, but while it's close, it's not quite correct:</p>\n\n<pre><code>for (key in a) {\n    // \"Good enough\" for most cases\n    if (String(parseInt(key, 10)) === key &amp;&amp; a.hasOwnProperty(key)) {\n        console.log(a[key]);\n    }\n}\n</code></pre>\n\n<h3>4. Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</h3>\n\n<p>ES2015 adds <em>iterators</em> to JavaScript. The easiest way to use iterators is the new <code>for-of</code> statement. It looks like this:</p>\n\n<pre><code>var val;\nvar a = [\"a\", \"b\", \"c\"];\nfor (val of a) {\n    console.log(val);\n}\n</code></pre>\n\n<p>Output:</p>\n\n<pre>\na\nb\nc\n</pre>\n\n<p>Under the covers, that gets an <em>iterator</em> from the array and loops through it, getting the values from it. This doesn't have the issue that using <code>for-in</code> has, because it uses an iterator defined by the object (the array), and arrays define that their iterators iterate through their <em>entries</em> (not their properties). Unlike <code>for-in</code> in ES5, the order in which the entries are visited is the numeric order of their indexes.</p>\n\n<h3>5. Use an iterator explicitly (ES2015+)</h3>\n\n<p>Sometimes, you might want to use an iterator <em>explicitly</em>. You can do that, too, although it's a lot clunkier than <code>for-of</code>. It looks like this:</p>\n\n<pre><code>var a = [\"a\", \"b\", \"c\"];\nvar it = a.values();\nvar entry;\nwhile (!(entry = it.next()).done) {\n    console.log(entry.value);\n}\n</code></pre>\n\n<p>The iterator is a function (specifically, a <em>generator</em>) that returns a new object each time you call <code>next</code>. The object returned by the iterator has a property, <code>done</code>, telling us whether it's done, and a property <code>value</code> with the value for that iteration.</p>\n\n<p>The meaning of <code>value</code> varies depending on the iterator; arrays support (at least) three functions that return iterators:</p>\n\n<ul>\n<li><code>values()</code>: This is the one I used above. It returns an iterator where each <code>value</code> is the value for that iteration.</li>\n<li><code>keys()</code>: Returns an iterator where each <code>value</code> is the key for that iteration (so for our <code>a</code> above, that would be <code>\"0\"</code>, then <code>\"1\"</code>, then <code>\"2\"</code>).</li>\n<li><code>entries()</code>: Returns an iterator where each <code>value</code> is an array in the form <code>[key, value]</code> for that iteration.</li>\n</ul>\n\n<p>(As of this writing, Firefox 29 supports <code>entries</code> and <code>keys</code> but not <code>values</code>.)</p>\n\n<h2>For Array-Like Objects</h2>\n\n<p>Aside from true arrays, there are also <em>array-like</em> objects that have a <code>length</code> property and properties with numeric names: <code>NodeList</code> instances, the <code>arguments</code> object, etc. How do we loop through their contents?</p>\n\n<h3>Use any of the options above for arrays</h3>\n\n<p>At least some, and possibly most or even all, of the array approaches above frequently apply equally well to array-like objects:</p>\n\n<ol>\n<li><p><strong>Use <code>forEach</code> and related (ES5+)</strong></p>\n\n<p>The various functions on <code>Array.prototype</code> are \"intentionally generic\" and can usually be used on array-like objects via <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-function.prototype.call\" rel=\"noreferrer\"><code>Function#call</code></a> or <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-function.prototype.apply\" rel=\"noreferrer\"><code>Function#apply</code></a>. (See the <em>Caveat for host-provided objects</em> at the end of this answer, but it's a rare issue.)</p>\n\n<p>Suppose you wanted to use <code>forEach</code> on a <code>Node</code>'s <code>childNodes</code> property. You'd do this:</p>\n\n<pre><code>Array.prototype.forEach.call(node.childNodes, function(child) {\n    // Do something with `child`\n});\n</code></pre>\n\n<p>If you're going to do that a lot, you might want to grab a copy of the function reference into a variable for reuse, e.g.:</p>\n\n<pre><code>// (This is all presumably in some scoping function)\nvar forEach = Array.prototype.forEach;\n\n// Then later...\nforEach.call(node.childNodes, function(child) {\n    // Do something with `child`\n});\n</code></pre></li>\n<li><p><strong>Use a simple <code>for</code> loop</strong></p>\n\n<p>Obviously, a simple <code>for</code> loop applies to array-like objects.</p></li>\n<li><p><strong>Use <code>for-in</code> <em>correctly</em></strong></p>\n\n<p><code>for-in</code> with the same safeguards as with an array should work with array-like objects as well; the caveat for host-provided objects on #1 above may apply.</p></li>\n<li><p><strong>Use <code>for-of</code> (use an iterator implicitly) (ES2015+)</strong></p>\n\n<p><code>for-of</code> will use the iterator provided by the object (if any); we'll have to see how this plays with the various array-like objects, particularly host-provided ones.</p></li>\n<li><p><strong>Use an iterator explicitly (ES2015+)</strong></p>\n\n<p>See #4, we'll have to see how iterators play out.</p></li>\n</ol>\n\n<h3>Create a true array</h3>\n\n<p>Other times, you may want to convert an array-like object into a true array. Doing that is surprisingly easy:</p>\n\n<ol>\n<li><p><strong>Use the <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.prototype.slice\" rel=\"noreferrer\"><code>slice</code></a> method of arrays</strong></p>\n\n<p>We can use the <code>slice</code> method of arrays, which like the other methods mentioned above is \"intentionally generic\" and so can be used with array-like objects, like this:</p>\n\n<pre><code>var trueArray = Array.prototype.slice.call(arrayLikeObject);\n</code></pre>\n\n<p>So for instance, if we want to convert a <code>NodeList</code> into a true array, we could do this:</p>\n\n<pre><code>var divs = Array.prototype.slice.call(document.querySelectorAll(\"div\"));\n</code></pre>\n\n<p>See the <em>Caveat for host-provided objects</em> below. In particular, note that this will fail in IE8 and earlier, which don't let you use host-provided objects as <code>this</code> like that.</p></li>\n<li><p><strong>Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\" rel=\"noreferrer\">spread notation (<code>...</code>)</a></strong></p>\n\n<p>It's also possible to use ES2015's <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\" rel=\"noreferrer\">spread notation</a> (MDN currently calls it an operator; it isn't one), with JavaScript engines that support this feature:</p>\n\n<pre><code>var trueArray = [...iterableObject];\n</code></pre>\n\n<p>So for instance, if we want to convert a <code>NodeList</code> into a true array, with spread syntax this becomes quite succinct:</p>\n\n<pre><code>var divs = [...document.querySelectorAll(\"div\")];\n</code></pre></li>\n<li><p><strong>Use <code>Array.from</code></strong> <a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-array.from\" rel=\"noreferrer\">(spec)</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" rel=\"noreferrer\">(MDN)</a></p>\n\n<p><code>Array.from</code> (ES2015, but shimmable) creates an array from an array-like object, optionally passing the entries through a mapping function first. So:</p>\n\n<pre><code>var divs = Array.from(document.querySelectorAll(\"div\"));\n</code></pre>\n\n<p>Or if you wanted to get an array of the tag names of the elements with a given class, you'd use the mapping function:</p>\n\n<pre><code>// Arrow function (ES2015):\nvar divs = Array.from(document.querySelectorAll(\".some-class\"), element =&gt; element.tagName);\n\n// Standard function (since `Array.from` can be shimmed):\nvar divs = Array.from(document.querySelectorAll(\".some-class\"), function(element) {\n    return element.tagName;\n});\n</code></pre></li>\n</ol>\n\n<h3>Caveat for host-provided objects</h3>\n\n<p>If you use <code>Array.prototype</code> functions with <em>host-provided</em> array-like objects (DOM lists and other things provided by the browser rather than the JavaScript engine), you need to be sure to test in your target environments to make sure the host-provided object behaves properly. <strong>Most do behave properly</strong> (now), but it's important to test. The reason is that most of the <code>Array.prototype</code> methods you're likely to want to use rely on the host-provided object giving an honest answer to the abstract <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2\" rel=\"noreferrer\"><code>[[HasProperty]]</code></a> operation. As of this writing, browsers do a very good job of this, but the ES5 spec did allow for the possibility a host-provided object may not be honest; it's in <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2\" rel=\"noreferrer\">§8.6.2</a> (several paragraphs below the big table near the beginning of that section), where it says:</p>\n\n<blockquote>\n  <p>Host objects may implement these internal methods in any manner unless specified otherwise; for example, one possibility is that <code>[[Get]]</code> and <code>[[Put]]</code> for a particular host object indeed fetch and store property values but <code>[[HasProperty]]</code> always generates <strong>false</strong>.</p>\n</blockquote>\n\n<p>(I couldn't find the equivalent verbiage in the ES2015 spec, but it's bound to still be the case.) Again, as of this writing the common host-provided array-like objects in modern browsers (<code>NodeList</code> instances, for instance) <strong>do</strong> handle <code>[[HasProperty]]</code> correctly, but it's important to test.</p>\n",
    "score": 5329,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 157247,
      "name": "T.J. Crowder",
      "reputation": 557106
    }
  },
  {
    "soID": 1470526,
    "parentID": 1470488,
    "url": "https://stackoverflow.com/q/1470526",
    "title": null,
    "body": "<p>Without <code>var</code> - global variable.</p>\n\n<p>Strongly recommended to <strong>ALWAYS</strong> use <code>var</code> statement, because init global variable in local context - is evil. But, if you need this dirty trick, you should write comment at start of page:</p>\n\n<pre><code>/* global: varname1, varname2... */\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 161832,
      "name": "Anatoliy",
      "reputation": 16722
    }
  },
  {
    "soID": 29044183,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/29044183",
    "title": null,
    "body": "<p>There's an app for that. Well, module. Well, more than one, probably hundreds.</p>\n\n<p><a href=\"https://www.npmjs.com/package/yargs\" rel=\"nofollow noreferrer\">Yargs</a> is one of the fun ones, its docs are cool to read.</p>\n\n<p>Here's an example from the github/npm page:</p>\n\n<pre><code>#!/usr/bin/env node\nvar argv = require('yargs').argv;\nconsole.log('(%d,%d)', argv.x, argv.y);\nconsole.log(argv._);\n</code></pre>\n\n<p>Output is here (it reads options with dashes etc, short and long, numeric etc).</p>\n\n<pre><code>$ ./nonopt.js -x 6.82 -y 3.35 rum\n(6.82,3.35)\n[ 'rum' ] \n$ ./nonopt.js \"me hearties\" -x 0.54 yo -y 1.12 ho\n(0.54,1.12)\n[ 'me hearties', 'yo', 'ho' ]\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 162070,
      "name": "Zlatko",
      "reputation": 6325
    }
  },
  {
    "soID": 23569898,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/23569898",
    "title": null,
    "body": "<p>Yes, you can do this with only one character and only CSS. </p>\n\n<p>Webkit (and Chrome) only, though:</p>\n\n<p><a href=\"http://jsbin.com/rexoyice/1/\" rel=\"noreferrer\">http://jsbin.com/rexoyice/1/</a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>h1 {\r\n  display: inline-block;\r\n  margin: 0; /* for demo snippet */\r\n  line-height: 1em; /* for demo snippet */\r\n  font-family: helvetica, arial, sans-serif;\r\n  font-weight: bold;\r\n  font-size: 300px;\r\n  background: linear-gradient(to right, #7db9e8 50%,#1e5799 50%);\r\n  -webkit-background-clip: text;\r\n  -webkit-text-fill-color: transparent;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;h1&gt;X&lt;/h1&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Visually, all the examples that use two characters (be it via JS, CSS pseudo elements, or just HTML) look fine, but note that that all adds content to the DOM which may cause accessibility--as well as text selection/cut/paste issues. </p>\n",
    "score": 165,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 172279,
      "name": "DA.",
      "reputation": 22260
    }
  },
  {
    "soID": 14259846,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/14259846",
    "title": null,
    "body": "<p>For debugging purpose I use:</p>\n\n<pre>\nconsole.debug(\"%o\", data);\n</pre>\n\n<ul>\n<li><a href=\"https://getfirebug.com/wiki/index.php/Console_API\">https://getfirebug.com/wiki/index.php/Console_API</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/DOM/console\">https://developer.mozilla.org/en-US/docs/DOM/console</a></li>\n</ul>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 173149,
      "name": "gavenkoa",
      "reputation": 17404
    }
  },
  {
    "soID": 23618313,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/23618313",
    "title": null,
    "body": "<p>Nice trick, <a href=\"http://en.wikipedia.org/wiki/Cascading_Style_Sheets\" rel=\"noreferrer\">CSS</a> is everything :)</p>\n\n<p><img src=\"https://i.stack.imgur.com/RftEr.png\" alt=\"Enter image description here\"></p>\n\n<p>I just played with @Arbel's solution:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>body{\r\n  background-color: black;\r\n}\r\n.textToHalfStyle{\r\n  display: block;\r\n  margin: 200px 0 0 0;\r\n  text-align:center;\r\n}\r\n.halfStyle {\r\n  font-family: 'Libre Baskerville', serif;\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 1;\r\n  font-size: 70px;\r\n  color: black;\r\n  overflow: hidden;\r\n  white-space: pre;\r\n  text-shadow: 1px 2px 0 white;\r\n}\r\n.halfStyle:before {\r\n  display: block;\r\n  z-index: 1;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 50%;\r\n  content: attr(data-content); /* Dynamic content for the pseudo element */\r\n  overflow: hidden;\r\n  color: white;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code> &lt;span class=\"textToHalfStyle\"&gt;Dr. Jekyll and M. Hide&lt;/span&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 40,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 176381,
      "name": "Shipow",
      "reputation": 1713
    }
  },
  {
    "soID": 33111577,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/33111577",
    "title": null,
    "body": "<p>Inspired by <a href=\"https://stackoverflow.com/a/19533724/177710\">hiway's answer</a> I came up with the following:</p>\n\n<pre><code>$.fn.exists = function() {\n    return $.contains( document.documentElement, this[0] );\n}\n</code></pre>\n\n<p><a href=\"http://api.jquery.com/jQuery.contains/\" rel=\"noreferrer\">jQuery.contains</a> takes two DOM elements and checks whether the first one contains the second one.</p>\n\n<p>Using <code>document.documentElement</code> as the first argument fulfills the semantics of the <code>exists</code> method when we want to apply it solely to check the existence of an element in the current document.</p>\n\n<p>Below, I've put together a snippet that compares <code>jQuery.exists()</code> against the <code>$(sel)[0]</code> and <code>$(sel).length</code> approaches which both return <code>truthy</code> values for <code>$(4)</code> while <code>$(4).exists()</code> returns <code>false</code>. In the context of <strong>checking for existence</strong> of an element in the DOM this seems to be the <strong>desired result</strong>.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$.fn.exists = function() {\r\n    return $.contains(document.documentElement, this[0]); \r\n  }\r\n  \r\n  var testFuncs = [\r\n    function(jq) { return !!jq[0]; },\r\n    function(jq) { return !!jq.length; },\r\n    function(jq) { return jq.exists(); },\r\n  ];\r\n    \r\n  var inputs = [\r\n    [\"$()\",$()],\r\n    [\"$(4)\",$(4)],\r\n    [\"$('#idoexist')\",$('#idoexist')],\r\n    [\"$('#idontexist')\",$('#idontexist')]\r\n  ];\r\n  \r\n  for( var i = 0, l = inputs.length, tr, input; i &lt; l; i++ ) {\r\n    input = inputs[i][1];\r\n    tr = \"&lt;tr&gt;&lt;td&gt;\" + inputs[i][0] + \"&lt;/td&gt;&lt;td&gt;\"\r\n          + testFuncs[0](input) + \"&lt;/td&gt;&lt;td&gt;\"\r\n          + testFuncs[1](input) + \"&lt;/td&gt;&lt;td&gt;\"\r\n          + testFuncs[2](input) + \"&lt;/td&gt;&lt;/tr&gt;\";\r\n    $(\"table\").append(tr);\r\n  }</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>td { border: 1px solid black }</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;div id=\"idoexist\"&gt;#idoexist&lt;/div&gt;\r\n&lt;table style&gt;\r\n&lt;tr&gt;\r\n  &lt;td&gt;Input&lt;/td&gt;&lt;td&gt;!!$(sel)[0]&lt;/td&gt;&lt;td&gt;!!$(sel).length&lt;/td&gt;&lt;td&gt;$(sel).exists()&lt;/td&gt;\r\n&lt;/tr&gt;\r\n&lt;/table&gt;\r\n&lt;script&gt;\r\n  \r\n  $.fn.exists = function() {\r\n    return $.contains(document.documentElement, this[0]); \r\n  }\r\n  \r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 177710,
      "name": "Oliver",
      "reputation": 5468
    }
  },
  {
    "soID": 18381836,
    "parentID": 9682092,
    "url": "https://stackoverflow.com/q/18381836",
    "title": null,
    "body": "<p>Misko already gave an excellent description of how the data bindings work, but I would like to add my view on the performance issue with the data binding.</p>\n\n<p>As Misko stated, around 2000 bindings is where you start to see problems, but you shouldn't have more than 2000 pieces of information on a page anyway. This may be true, but not every data-binding is visible to the user. Once you start building any sort of widget or data grid with two-way binding you can <em>easily</em> hit 2000 bindings, without having a bad ux.</p>\n\n<p>Consider, for example, a combobox where you can type text to filter the available options. This sort of control could have ~150 items and still be highly usable. If it has some extra feature (for example a specific class on the currently selected option) you start to get 3-5 bindings per option. Put three of these widgets on a page (e.g. one to select a country, the other to select a city in said country, and the third to select a hotel) and you are somewhere between 1000 and 2000 bindings already.</p>\n\n<p>Or consider a data-grid in a corporate web application. 50 rows per page is not unreasonable, each of which could have 10-20 columns. If you build this with ng-repeats, and/or have information in some cells which uses some bindings, you could be approaching 2000 bindings with this grid alone.</p>\n\n<p>I find this to be a <strong>huge</strong> problem when working with AngularJS, and the only solution I've been able to find so far is to construct widgets without using two-way binding, instead using ngOnce, deregistering watchers and similar tricks, or construct directives which builds the DOM with jQuery and DOM manipulation. I feel this defeats the purpose of using Angular in the first place.</p>\n\n<p>I would love to hear suggestions on other ways to handle this, but then maybe I should write my own question. I wanted to put this in a comment, but it turned out to be way too long for that...</p>\n\n<p><strong>TL;DR</strong> <br />\nThe data binding can cause performance issues on complex pages.</p>\n",
    "score": 287,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 179024,
      "name": "MW.",
      "reputation": 9059
    }
  },
  {
    "soID": 1521882,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/1521882",
    "title": null,
    "body": "<p>I was having some related issues, trying to insert a table row after the clicked row. All is fine except the .after() call does not work for the last row.</p>\n\n<pre><code>$('#traffic tbody').find('tr.trafficBody).filter(':nth-child(' + (column + 1) + ')').after(insertedhtml);\n</code></pre>\n\n<p>I landed up with a very untidy solution:</p>\n\n<p>create the table as follows (id for each row):</p>\n\n<pre><code>&lt;tr id=\"row1\"&gt; ... &lt;/tr&gt;\n&lt;tr id=\"row2\"&gt; ... &lt;/tr&gt;\n&lt;tr id=\"row3\"&gt; ... &lt;/tr&gt;\n</code></pre>\n\n<p>etc ...</p>\n\n<p>and then :</p>\n\n<pre><code>$('#traffic tbody').find('tr.trafficBody' + idx).after(html);\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 184553,
      "name": "Avron Olshewsky",
      "reputation": 101
    }
  },
  {
    "soID": 15692808,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/15692808",
    "title": null,
    "body": "<p>Here is some hacketi hack code. I wanted to maintain a row template in an <a href=\"http://en.wikipedia.org/wiki/HTML\" rel=\"noreferrer\">HTML</a> page. Table rows 0...n are rendered at request time, and this example has one hardcoded row and a simplified template row. The template table is hidden, and the row tag must be within a valid table or browsers may drop it from the <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\" rel=\"noreferrer\">DOM</a> tree. Adding a row uses counter+1 identifier, and the current value is maintained in the data attribute. It guarantees each row gets unique <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"noreferrer\">URL</a> parameters.</p>\n\n<p>I have run tests on Internet&nbsp;Explorer&nbsp;8, Internet&nbsp;Explorer&nbsp;9, Firefox, Chrome, Opera, <a href=\"http://en.wikipedia.org/wiki/Nokia_Lumia_800\" rel=\"noreferrer\">Nokia Lumia 800</a>, <a href=\"http://en.wikipedia.org/wiki/Nokia_C7-00\" rel=\"noreferrer\">Nokia C7</a> (with <a href=\"http://en.wikipedia.org/wiki/Symbian\" rel=\"noreferrer\">Symbian</a> 3), Android stock and Firefox beta browsers.</p>\n\n<pre><code>&lt;table id=\"properties\"&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Name&lt;/th&gt;\n    &lt;th&gt;Value&lt;/th&gt;\n    &lt;th&gt;&amp;nbsp;&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td nowrap&gt;key1&lt;/td&gt;\n    &lt;td&gt;&lt;input type=\"text\" name=\"property_key1\" value=\"value1\" size=\"70\"/&gt;&lt;/td&gt;\n    &lt;td class=\"data_item_options\"&gt;\n       &lt;a class=\"buttonicon\" href=\"javascript:deleteRow()\" title=\"Delete row\" onClick=\"deleteRow(this); return false;\"&gt;&lt;/a&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n\n&lt;table id=\"properties_rowtemplate\" style=\"display:none\" data-counter=\"0\"&gt;\n&lt;tr&gt;\n &lt;td&gt;&lt;input type=\"text\" name=\"newproperty_name_\\${counter}\" value=\"\" size=\"35\"/&gt;&lt;/td&gt;\n &lt;td&gt;&lt;input type=\"text\" name=\"newproperty_value_\\${counter}\" value=\"\" size=\"70\"/&gt;&lt;/td&gt;\n &lt;td&gt;&lt;a class=\"buttonicon\" href=\"javascript:deleteRow()\" title=\"Delete row\" onClick=\"deleteRow(this); return false;\"&gt;&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n&lt;a class=\"action\" href=\"javascript:addRow()\" onclick=\"addRow('properties'); return false\" title=\"Add new row\"&gt;Add row&lt;/a&gt;&lt;br/&gt;\n&lt;br/&gt;\n\n- - - - \n// add row to html table, read html from row template\nfunction addRow(sTableId) {\n    // find destination and template tables, find first &lt;tr&gt;\n    // in template. Wrap inner html around &lt;tr&gt; tags.\n    // Keep track of counter to give unique field names.\n    var table  = $(\"#\"+sTableId);\n    var template = $(\"#\"+sTableId+\"_rowtemplate\");\n    var htmlCode = \"&lt;tr&gt;\"+template.find(\"tr:first\").html()+\"&lt;/tr&gt;\";\n    var id = parseInt(template.data(\"counter\"),10)+1;\n    template.data(\"counter\", id);\n    htmlCode = htmlCode.replace(/\\${counter}/g, id);\n    table.find(\"tbody:last\").append(htmlCode);\n}\n\n// delete &lt;TR&gt; row, childElem is any element inside row\nfunction deleteRow(childElem) {\n    var row = $(childElem).closest(\"tr\"); // find &lt;tr&gt; parent\n    row.remove();\n}\n</code></pre>\n\n<p>PS: I give all credits to the jQuery team; they deserve everything. JavaScript programming without jQuery - I don't even want think about that nightmare.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 185565,
      "name": "Whome",
      "reputation": 6022
    }
  },
  {
    "soID": 23679647,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/23679647",
    "title": null,
    "body": "<p>You can also do it using SVG, if you wish:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var title = document.querySelector('h1'),\r\n    text = title.innerHTML,\r\n    svgTemplate = document.querySelector('svg'),\r\n    charStyle = svgTemplate.querySelector('#text');\r\n\r\nsvgTemplate.style.display = 'block';\r\n\r\nvar space = 0;\r\n\r\nfor (var i = 0; i &lt; text.length; i++) {\r\n  var x = charStyle.cloneNode();\r\n  x.textContent = text[i];\r\n  svgTemplate.appendChild(x);\r\n  x.setAttribute('x', space);\r\n  space += x.clientWidth || 15;\r\n}\r\n\r\ntitle.innerHTML = '';\r\ntitle.appendChild(svgTemplate);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;svg style=\"display: none; height: 100px; width: 100%\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"&gt;\r\n    &lt;defs id=\"FooDefs\"&gt;\r\n        &lt;linearGradient id=\"MyGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"&gt;\r\n            &lt;stop offset=\"50%\" stop-color=\"blue\" /&gt;\r\n            &lt;stop offset=\"50%\" stop-color=\"red\" /&gt;\r\n        &lt;/linearGradient&gt;\r\n    &lt;/defs&gt;\r\n    &lt;text y=\"50%\" id=\"text\" style=\"font-size: 72px; fill: url(#MyGradient)\"&gt;&lt;/text&gt;\r\n&lt;/svg&gt;\r\n\r\n&lt;h1&gt;This is not a solution X&lt;/h1&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><a href=\"http://codepen.io/nicbell/pen/jGcbq\">http://codepen.io/nicbell/pen/jGcbq</a></p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 190932,
      "name": "Nic Bell",
      "reputation": 363
    }
  },
  {
    "soID": 9693933,
    "parentID": 9682092,
    "url": "https://stackoverflow.com/q/9693933",
    "title": null,
    "body": "<p>AngularJS remembers the value and compares it to a previous value. This is basic dirty-checking. If there is a change in value, then it fires the change event.</p>\n\n<p>The <code>$apply()</code> method, which is what you call when you are transitioning from a non-AngularJS world into an AngularJS world, calls <code>$digest()</code>. A digest is just plain old dirty-checking. It works on all browsers and is totally predictable.</p>\n\n<p>To contrast dirty-checking (AngularJS) vs change listeners (<a href=\"http://en.wikipedia.org/wiki/KnockoutJS\">KnockoutJS</a> and <a href=\"https://en.wikipedia.org/wiki/Backbone.js\">Backbone.js</a>): While dirty-checking may seem simple, and even inefficient (I will address that later), it turns out that it is semantically correct all the time, while change listeners have lots of weird corner cases and need things like dependency tracking to make it more semantically correct. KnockoutJS dependency tracking is a clever feature for a problem which AngularJS does not have.</p>\n\n<h1>Issues with change listeners:</h1>\n\n<ul>\n<li>The syntax is atrocious, since browsers do not support it natively. Yes, there are proxies, but they are not semantically correct in all cases, and of course there are no proxies on old browsers. The bottom line is that dirty-checking allows you to do <a href=\"http://en.wikipedia.org/wiki/Plain_Old_Java_Object\">POJO</a>, whereas KnockoutJS and Backbone.js force you to inherit from their classes, and access your data through accessors.</li>\n<li>Change coalescence. Suppose you have an array of items. Say you want to add items into an array, as you are looping to add, each time you add you are firing events on change, which is rendering the UI. This is very bad for performance. What you want is to update the UI only once, at the end. The change events are too fine-grained.</li>\n<li>Change listeners fire immediately on a setter, which is a problem, since the change listener can further change data, which fires more change events. This is bad since on your stack you may have several change events happening at once. Suppose you have two arrays which need to be kept in sync for whatever reason. You can only add to one or the other, but each time you add you fire a change event, which now has an inconsistent view of the world. This is a very similar problem to thread locking, which JavaScript avoids since each callback executes exclusively and to completion. Change events break this since setters can have far-reaching consequences which are not intended and non obvious, which creates the thread problem all over again. It turns out that what you want to do is to delay the listener execution, and guarantee, that only one listener runs at a time, hence any code is free to change data, and it knows that no other code runs while it is doing so.</li>\n</ul>\n\n<h1>What about performance?</h1>\n\n<p>So it may seem that we are slow, since dirty-checking is inefficient. This is where we need to look at real numbers rather than just have theoretical arguments, but first let's define some constraints.</p>\n\n<p>Humans are:</p>\n\n<ul>\n<li><p><em>Slow</em> — Anything faster than 50&nbsp;ms is imperceptible to humans and thus can be considered as \"instant\".</p></li>\n<li><p><em>Limited</em> — You can't really show more than about 2000 pieces of information to a human on a single page. Anything more than that is really bad UI, and humans can't process this anyway.</p></li>\n</ul>\n\n<p>So the real question is this: How many comparisons can you do on a browser in 50&nbsp;ms? This is a hard question to answer as many factors come into play, but here is a test case: <a href=\"http://jsperf.com/angularjs-digest/6\">http://jsperf.com/angularjs-digest/6</a> which creates 10,000 watchers. On a modern browser this takes just under 6&nbsp;ms. On <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_8\">Internet&nbsp;Explorer&nbsp;8</a> it takes about 40&nbsp;ms. As you can see, this is not an issue even on slow browsers these days. There is a caveat: The comparisons need to be simple to fit into the time limit... Unfortunately it is way too easy to add a slow comparison into AngularJS, so it is easy to build slow applications when you don't know what you are doing. But we hope to have an answer by providing an instrumentation module, which would show you which are the slow comparisons.</p>\n\n<p>It turns out that video games and GPUs use the dirty-checking approach, specifically because it is consistent. As long as they get over the monitor refresh rate (typically 50-60 Hz, or every 16.6-20 ms), any performance over that is a waste, so you're better off drawing more stuff, than getting FPS higher.</p>\n",
    "score": 2522,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 192810,
      "name": "Misko Hevery",
      "reputation": 42635
    }
  },
  {
    "soID": 7219496,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/7219496",
    "title": null,
    "body": "<p>If you use net.sf.json, you can pretty print as follows (using a 4 space indentation):</p>\n\n<pre><code>JSONObject work = JSONObject.fromObject(\"{\\\"hi\\\":\\\"there\\\",\\\"more\\\":\\\"stuff\\\"}\");\nlog.info(\"WORK=\"+work.toString(4));\n</code></pre>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 194980,
      "name": "Fred Haslam",
      "reputation": 6272
    }
  },
  {
    "soID": 9348845,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/9348845",
    "title": null,
    "body": "<p>Note that <a href=\"http://underscorejs.org/\" rel=\"noreferrer\"><code>underscore.js</code></a>'s <a href=\"http://underscorejs.org/#extend\" rel=\"noreferrer\"><code>extend</code>-method</a> does this in a one-liner:</p>\n\n<pre><code>_.extend({name : 'moe'}, {age : 50});\n=&gt; {name : 'moe', age : 50}\n</code></pre>\n",
    "score": 161,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12252150,
    "parentID": 9682092,
    "url": "https://stackoverflow.com/q/12252150",
    "title": null,
    "body": "<p>I wondered this myself for a while. Without setters how does <code>AngularJS</code> notice changes to the <code>$scope</code> object? Does it poll them?</p>\n\n<p>What it actually does is this: Any \"normal\" place you modify the model was already called from the guts of AngularJS, so it automatically calls <code>$apply</code> for you after your code runs. Say your controller has a method that's hooked up to <code>ng-click</code> on some element. Because AngularJS wires the calling of that method together for you, it has a chance to do an <code>$apply</code> in the appropriate place. Likewise for expressions that appear right in the views, those are executed by AngularJS so it does the <code>$apply</code>.</p>\n\n<p>When the documentation talk about having to call <code>$apply</code> manually for code <em>outside of AngularJS</em>, it's talking about code which, when run, doesn't stem from AngularJS itself in the call stack.</p>\n",
    "score": 52,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 205934,
      "name": "jpsimons",
      "reputation": 15653
    }
  },
  {
    "soID": 12952256,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/12952256",
    "title": null,
    "body": "<p>If you want a new array with the deleted positions removed, you can always delete the specific element and filter out the array. It might need an extension of the <a href=\"http://www.tutorialspoint.com/javascript/array_filter.htm\">array object</a> for browsers that don't implement the filter method but in the long term its easier since all you do is this:</p>\n\n<pre><code>var my_array = [1,2,3,4,5,6];\ndelete my_array[4];\nconsole.log(my_array.filter(function(a){return typeof a !== 'undefined';}));\n</code></pre>\n\n<p>Should display <code>[1, 2, 3, 4, 6]</code></p>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 208271,
      "name": "Loupax",
      "reputation": 1832
    }
  },
  {
    "soID": 20381012,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/20381012",
    "title": null,
    "body": "<p>I've used Object.create() to keep the default settings (utilising __proto__ or Object.getPrototypeOf() ). </p>\n\n<pre><code>function myPlugin( settings ){\n    var defaults = {\n        \"keyName\": [ \"string 1\", \"string 2\" ]\n    }\n    var options = Object.create( defaults );\n    for (var key in settings) { options[key] = settings[key]; }\n}\nmyPlugin( { \"keyName\": [\"string 3\", \"string 4\" ] } );\n</code></pre>\n\n<p>This way I can always 'concat()' or 'push()' later.</p>\n\n<pre><code>var newArray = options['keyName'].concat( options.__proto__['keyName'] );\n</code></pre>\n\n<p><strong>Note</strong>: You'll need to do a hasOwnProperty check before concatenation to avoid duplication.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4775743,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/4775743",
    "title": null,
    "body": "<p>You can try this approach: <a href=\"http://web.archive.org/web/20100424091244/http://www.ajaxdr.com/code/javascript-version-of-phps-is_array-function/\" rel=\"noreferrer\">http://web.archive.org/web/20100424091244/http://www.ajaxdr.com/code/javascript-version-of-phps-is_array-function/</a></p>\n\n<p><strong>EDIT</strong>: also, if you are already using JQuery in your project, you can use its function <a href=\"http://api.jquery.com/jQuery.isArray/\" rel=\"noreferrer\">$.isArray()</a>.</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 221786,
      "name": "André Paramés",
      "reputation": 736
    }
  },
  {
    "soID": 27114400,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/27114400",
    "title": null,
    "body": "<p>The statement <code>\"use strict\";</code> instructs the browser to use the Strict mode, which is a reduced and safer feature set of JavaScript. </p>\n\n<h2>List of features (non-exhaustive)</h2>\n\n<ol>\n<li><p>Disallows global variables. (Catches missing <code>var</code> declarations and typos in variable names) </p></li>\n<li><p>Silent failing assignments will throw error in strict mode (assigning <code>NaN = 5;</code>) </p></li>\n<li><p>Attempts to delete undeletable properties will throw (<code>delete Object.prototype</code>) </p></li>\n<li><p>Requires all property names in an object literal to be unique (<code>var x = {x1: \"1\", x1: \"2\"}</code>) </p></li>\n<li><p>Function parameter names must be unique (<code>function sum (x, x) {...}</code>) </p></li>\n<li><p>Forbids octal syntax (<code>var x = 023;</code> some devs assume wrongly that a preceding zero does nothing to change the number.) </p></li>\n<li><p>Forbids the <code>with</code> keyword </p></li>\n<li><p><code>eval</code> in strict mode does not introduce new variables  </p></li>\n<li><p>Forbids deleting plain names (<code>delete x;</code>)</p></li>\n<li><p>Forbids binding or assignment of the names <code>eval</code> and <code>arguments</code> in any form </p></li>\n<li><p>Strict mode does not alias properties of the <code>arguments</code> object with the formal parameters. (i.e. in <code>function sum (a,b) { return arguments[0] + b;}</code> This works because <code>arguments[0]</code> is bound to <code>a</code> and so on. )</p></li>\n<li><p><code>arguments.callee</code> is not supported</p></li>\n</ol>\n\n<p>[Ref: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" rel=\"noreferrer\">Strict mode</a>, <em>Mozilla Developer Network</em>]</p>\n",
    "score": 390,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 223656,
      "name": "gprasant",
      "reputation": 8006
    }
  },
  {
    "soID": 1870241,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/1870241",
    "title": null,
    "body": "<p>The line</p>\n\n<pre><code>document.getElementById(\"MyElement\").className = document.getElementById(\"MyElement\").className.replace(/\\bMyClass\\b/','')\n</code></pre>\n\n<p>should be:</p>\n\n<pre><code>document.getElementById(\"MyElement\").className = document.getElementById(\"MyElement\").className.replace('/\\bMyClass\\b/','');\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 227530,
      "name": "Eric Bailey",
      "reputation": 131
    }
  },
  {
    "soID": 11496488,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/11496488",
    "title": null,
    "body": "<p>If people are worried about using <code>use strict</code> it might be worth checking out this article: </p>\n\n<p><a href=\"http://www.novogeek.com/post/ECMAScript-5-Strict-mode-support-in-browsers-What-does-this-mean.aspx\" rel=\"noreferrer\">ECMAScript 5 'Strict mode' support in browsers. What does this mean?</a><br>\n  <em>NovoGeek.com - Krishna's weblog</em></p>\n\n<p>It talks about browser support, but more importantly how to deal with it safely:</p>\n\n<pre><code>function isStrictMode(){\n    return !this;\n} \n/*\n   returns false, since 'this' refers to global object and \n   '!this' becomes false\n*/\n\nfunction isStrictMode(){   \n    \"use strict\";\n    return !this;\n} \n/* \n   returns true, since in strict mode the keyword 'this'\n   does not refer to global object, unlike traditional JS. \n   So here, 'this' is 'undefined' and '!this' becomes true.\n*/\n</code></pre>\n",
    "score": 310,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 240363,
      "name": "Jamie Hutber",
      "reputation": 10755
    }
  },
  {
    "soID": 32658453,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/32658453",
    "title": null,
    "body": "<p>I came up with <a href=\"https://github.com/vivin/enumjs\" rel=\"nofollow\">this</a> approach which is modeled after enums in Java. These are type-safe, and so you can perform <code>instanceof</code> checks as well.</p>\n\n<p>You can define enums like this:</p>\n\n<pre><code>var Days = Enum.define(\"Days\", [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]);\n</code></pre>\n\n<p><code>Days</code> now refers to the <code>Days</code> enum:</p>\n\n<pre><code>Days.Monday instanceof Days; // true\n\nDays.Friday.name(); // \"Friday\"\nDays.Friday.ordinal(); // 4\n\nDays.Sunday === Days.Sunday; // true\nDays.Sunday === Days.Friday; // false\n\nDays.Sunday.toString(); // \"Sunday\"\n\nDays.toString() // \"Days { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday } \"\n\nDays.values().map(function(e) { return e.name(); }); //[\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\nDays.values()[4].name(); //\"Friday\"\n\nDays.fromName(\"Thursday\") === Days.Thursday // true\nDays.fromName(\"Wednesday\").name() // \"Wednesday\"\nDays.Friday.fromName(\"Saturday\").name() // \"Saturday\"\n</code></pre>\n\n<p>The implementation:</p>\n\n<pre><code>var Enum = (function () {\n    /**\n     * Function to define an enum\n     * @param typeName - The name of the enum.\n     * @param constants - The constants on the enum. Can be an array of strings, or an object where each key is an enum\n     * constant, and the values are objects that describe attributes that can be attached to the associated constant.\n     */\n    function define(typeName, constants) {\n\n        /** Check Arguments **/\n        if (typeof typeName === \"undefined\") {\n            throw new TypeError(\"A name is required.\");\n        }\n\n        if (!(constants instanceof Array) &amp;&amp; (Object.getPrototypeOf(constants) !== Object.prototype)) {\n\n            throw new TypeError(\"The constants parameter must either be an array or an object.\");\n\n        } else if ((constants instanceof Array) &amp;&amp; constants.length === 0) {\n\n            throw new TypeError(\"Need to provide at least one constant.\");\n\n        } else if ((constants instanceof Array) &amp;&amp; !constants.reduce(function (isString, element) {\n                return isString &amp;&amp; (typeof element === \"string\");\n            }, true)) {\n\n            throw new TypeError(\"One or more elements in the constant array is not a string.\");\n\n        } else if (Object.getPrototypeOf(constants) === Object.prototype &amp;&amp; !Object.keys(constants).reduce(function (isObject, constant) {\n                return Object.getPrototypeOf(constants[constant]) === Object.prototype;\n            }, true)) {\n\n            throw new TypeError(\"One or more constants do not have an associated object-value.\");\n\n        }\n\n        var isArray = (constants instanceof Array);\n        var isObject = !isArray;\n\n        /** Private sentinel-object used to guard enum constructor so that no one else can create enum instances **/\n        function __() { };\n\n        /** Dynamically define a function with the same name as the enum we want to define. **/\n        var __enum = new Function([\"__\"],\n            \"return function \" + typeName + \"(sentinel, name, ordinal) {\" +\n                \"if(!(sentinel instanceof __)) {\" +\n                    \"throw new TypeError(\\\"Cannot instantiate an instance of \" + typeName + \".\\\");\" +\n                \"}\" +\n\n                \"this.__name = name;\" +\n                \"this.__ordinal = ordinal;\" +\n            \"}\"\n        )(__);\n\n        /** Private objects used to maintain enum instances for values(), and to look up enum instances for fromName() **/\n        var __values = [];\n        var __dict = {};\n\n        /** Attach values() and fromName() methods to the class itself (kind of like static methods). **/\n        Object.defineProperty(__enum, \"values\", {\n            value: function () {\n                return __values;\n            }\n        });\n\n        Object.defineProperty(__enum, \"fromName\", {\n            value: function (name) {\n                var __constant = __dict[name]\n                if (__constant) {\n                    return __constant;\n                } else {\n                    throw new TypeError(typeName + \" does not have a constant with name \" + name + \".\");\n                }\n            }\n        });\n\n        /**\n         * The following methods are available to all instances of the enum. values() and fromName() need to be\n         * available to each constant, and so we will attach them on the prototype. But really, they're just\n         * aliases to their counterparts on the prototype.\n         */\n        Object.defineProperty(__enum.prototype, \"values\", {\n            value: __enum.values\n        });\n\n        Object.defineProperty(__enum.prototype, \"fromName\", {\n            value: __enum.fromName\n        });\n\n        Object.defineProperty(__enum.prototype, \"name\", {\n            value: function () {\n                return this.__name;\n            }\n        });\n\n        Object.defineProperty(__enum.prototype, \"ordinal\", {\n            value: function () {\n                return this.__ordinal;\n            }\n        });\n\n        Object.defineProperty(__enum.prototype, \"valueOf\", {\n            value: function () {\n                return this.__name;\n            }\n        });\n\n        Object.defineProperty(__enum.prototype, \"toString\", {\n            value: function () {\n                return this.__name;\n            }\n        });\n\n        /**\n         * If constants was an array, we can the element values directly. Otherwise, we will have to use the keys\n         * from the constants object.\n         */\n        var _constants = constants;\n        if (isObject) {\n            _constants = Object.keys(constants);\n        }\n\n        /** Iterate over all constants, create an instance of our enum for each one, and attach it to the enum type **/\n        _constants.forEach(function (name, ordinal) {\n            // Create an instance of the enum\n            var __constant = new __enum(new __(), name, ordinal);\n\n            // If constants was an object, we want to attach the provided attributes to the instance.\n            if (isObject) {\n                Object.keys(constants[name]).forEach(function (attr) {\n                    Object.defineProperty(__constant, attr, {\n                        value: constants[name][attr]\n                    });\n                });\n            }\n\n            // Freeze the instance so that it cannot be modified.\n            Object.freeze(__constant);\n\n            // Attach the instance using the provided name to the enum type itself.\n            Object.defineProperty(__enum, name, {\n                value: __constant\n            });\n\n            // Update our private objects\n            __values.push(__constant);\n            __dict[name] = __constant;\n        });\n\n        /** Define a friendly toString method for the enum **/\n        var string = typeName + \" { \" + __enum.values().map(function (c) {\n                return c.name();\n            }).join(\", \") + \" } \";\n\n        Object.defineProperty(__enum, \"toString\", {\n            value: function () {\n                return string;\n            }\n        });\n\n        /** Freeze our private objects **/\n        Object.freeze(__values);\n        Object.freeze(__dict);\n\n        /** Freeze the prototype on the enum and the enum itself **/\n        Object.freeze(__enum.prototype);\n        Object.freeze(__enum);\n\n        /** Return the enum **/\n        return __enum;\n    }\n\n    return {\n        define: define\n    }\n\n})();\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 263004,
      "name": "Vivin Paliath",
      "reputation": 64989
    }
  },
  {
    "soID": 25861938,
    "parentID": 22343224,
    "url": "https://stackoverflow.com/q/25861938",
    "title": null,
    "body": "<p>I would like to add the official npmjs documentation as well which describes all methods for version specificity including the ones referred to in the question - </p>\n\n<p><a href=\"https://www.npmjs.org/doc/files/package.json.html\">https://www.npmjs.org/doc/files/package.json.html</a></p>\n\n<p><a href=\"https://docs.npmjs.com/misc/semver#x-ranges-12x-1x-12-\">https://docs.npmjs.com/misc/semver#x-ranges-12x-1x-12-</a></p>\n\n<ul>\n<li><code>~version</code> \"Approximately equivalent to version\" See <a href=\"https://docs.npmjs.com/misc/semver#prerelease-identifiers\">npm semver - Tilde Ranges</a> &amp; <a href=\"http://semver.org/\">semver (7)</a></li>\n<li><code>^version</code> \"Compatible with version\" See <a href=\"https://docs.npmjs.com/misc/semver#prerelease-identifiers\">npm semver - Caret Ranges</a> &amp; <a href=\"http://semver.org/\">semver (7)</a></li>\n<li><code>version</code> Must match version exactly</li>\n<li><code>&gt;version</code> Must be greater than version</li>\n<li><code>&gt;=version</code> etc</li>\n<li><code>&lt;version</code></li>\n<li><code>&lt;=version</code></li>\n<li><code>1.2.x</code> 1.2.0, 1.2.1, etc., but not 1.3.0</li>\n<li><code>http://sometarballurl</code> (this may be the URL of a tarball which will be downloaded and installed locally</li>\n<li><code>*</code> Matches any version</li>\n<li><code>latest</code> Obtains latest release</li>\n</ul>\n\n<p>The above list is not exhaustive. Other version specifiers include GitHub urls and GitHub user repo's, local paths and packages with specific npm tags</p>\n",
    "score": 424,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 268667,
      "name": "Ahmad",
      "reputation": 8878
    }
  },
  {
    "soID": 17932010,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/17932010",
    "title": null,
    "body": "<p>You could assign every object a default merge (perhaps 'inherit' a better name) method:</p>\n\n<p>It should work with either objects or instantiated functions.</p>\n\n<p>The below code handles overriding the merged values if so desired:</p>\n\n<pre><code>Object.prototype.merge = function(obj, override) {\n// Don't override by default\n\n    for (var key in obj) {\n        var n = obj[key];\n        var t = this[key];\n        this[key] = (override &amp;&amp; t) ? n : t;\n    };\n\n};\n</code></pre>\n\n<p>Test data is below:</p>\n\n<pre><code>var Mammal = function () {\n    this.eyes = 2;\n    this.thinking_brain = false;\n    this.say = function () {\n    console.log('screaming like a mammal')};\n}\n\nvar Human = function () {\n    this.thinking_brain = true;\n    this.say = function() {console.log('shouting like a human')};\n}\n\njohn = new Human();\n\n// Extend mammal, but do not override from mammal\njohn.merge(new Mammal());\njohn.say();\n\n// Extend mammal and override from mammal\njohn.merge(new Mammal(), true);\njohn.say();\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 39222211,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/39222211",
    "title": null,
    "body": "<p>Even though <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\" rel=\"nofollow noreferrer\">only static methods</a> (and not static properties) are supported in ES2015 (see <a href=\"http://exploringjs.com/es6/ch_classes.html#_inside-the-body-of-a-class-definition\" rel=\"nofollow noreferrer\">here</a> as well, &sect;15.2.2.2), curiously you can use the below with Babel with the <code>es2015</code> preset:</p>\n\n<pre><code>class CellState {\n    v: string;\n    constructor(v: string) {\n        this.v = v;\n        Object.freeze(this);\n    }\n    static EMPTY       = new CellState('e');\n    static OCCUPIED    = new CellState('o');\n    static HIGHLIGHTED = new CellState('h');\n    static values      = function(): Array&lt;CellState&gt; {\n        const rv = [];\n        rv.push(CellState.EMPTY);\n        rv.push(CellState.OCCUPIED);\n        rv.push(CellState.HIGHLIGHTED);\n        return rv;\n    }\n}\nObject.freeze(CellState);\n</code></pre>\n\n<p>I found this to be working as expected even across modules (e.g. importing the <code>CellState</code> enum from another module) and also when I import a module using Webpack.</p>\n\n<p><strong>The advantage this method has over most other answers is that you can use it alongside a static type checker</strong> (e.g. <a href=\"https://flowtype.org/\" rel=\"nofollow noreferrer\">Flow</a>) and you can assert, at development time using static type checking, that your variables, parameters, etc. are of the specific <code>CellState</code> \"enum\" rather than some other enum (which would be impossible to distinguish if you used generic objects or symbols).</p>\n\n<h1>update</h1>\n\n<p>The above code has a deficiency in that it allows one to create additional objects of type <code>CellState</code> (even though one can't assign them to the static fields of <code>CellState</code> since it's frozen). Still, the below more refined code offers the following advantages:</p>\n\n<ol>\n<li>no more objects of type <code>CellState</code> may be created</li>\n<li>you are guaranteed that no two enum instances are assigned the same code</li>\n<li>utility method to get the enum back from a string representation</li>\n<li><p>the <code>values</code> function that returns all instances of the enum does not have to create the return value in the above, manual (and error-prone) way.</p>\n\n<pre><code>'use strict';\n\nclass Status {\n\nconstructor(code, displayName = code) {\n    if (Status.INSTANCES.has(code))\n        throw new Error(`duplicate code value: [${code}]`);\n    if (!Status.canCreateMoreInstances)\n        throw new Error(`attempt to call constructor(${code}`+\n       `, ${displayName}) after all static instances have been created`);\n    this.code        = code;\n    this.displayName = displayName;\n    Object.freeze(this);\n    Status.INSTANCES.set(this.code, this);\n}\n\ntoString() {\n    return `[code: ${this.code}, displayName: ${this.displayName}]`;\n}\nstatic INSTANCES   = new Map();\nstatic canCreateMoreInstances      = true;\n\n// the values:\nstatic ARCHIVED    = new Status('Archived');\nstatic OBSERVED    = new Status('Observed');\nstatic SCHEDULED   = new Status('Scheduled');\nstatic UNOBSERVED  = new Status('Unobserved');\nstatic UNTRIGGERED = new Status('Untriggered');\n\nstatic values      = function() {\n    return Array.from(Status.INSTANCES.values());\n}\n\nstatic fromCode(code) {\n    if (!Status.INSTANCES.has(code))\n        throw new Error(`unknown code: ${code}`);\n    else\n        return Status.INSTANCES.get(code);\n}\n}\n\nStatus.canCreateMoreInstances = false;\nObject.freeze(Status);\nexports.Status = Status;\n</code></pre></li>\n</ol>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 274677,
      "name": "Marcus Junius Brutus",
      "reputation": 9246
    }
  },
  {
    "soID": 19891952,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/19891952",
    "title": null,
    "body": "<p>I know this is an old question, but this is the safest check and I haven't seen it posted here exactly like that:</p>\n\n<pre><code>if (typeof value != 'undefined' &amp;&amp; value) {\n    //deal with value'\n};\n</code></pre>\n\n<p>It will cover cases where <strong>value</strong> was never defined, and also any of these:</p>\n\n<ul>\n<li>null</li>\n<li>undefined (value of undefined is not the same as a parameter that was never defined)</li>\n<li>0</li>\n<li>\"\" (empty string)</li>\n<li>false</li>\n<li>NaN</li>\n</ul>\n\n<p>P.S. no need for strict equality in <strong>typeof value != 'undefined'</strong></p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 275333,
      "name": "guya",
      "reputation": 1915
    }
  },
  {
    "soID": 2344174,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/2344174",
    "title": null,
    "body": "<p>For not-too-complicated objects you could use <a href=\"http://en.wikipedia.org/wiki/JSON\" rel=\"nofollow noreferrer\">JSON</a>:</p>\n\n<pre><code>var obj1 = { food: 'pizza', car: 'ford' }\nvar obj2 = { animal: 'dog', car: 'chevy'}\nvar objMerge;\n\nobjMerge = JSON.stringify(obj1) + JSON.stringify(obj2);\n\n// {\"food\": \"pizza\",\"car\":\"ford\"}{\"animal\":\"dog\",\"car\":\"chevy\"}\n\nobjMerge = objMerge.replace(/\\}\\{/, \"\"); //  \\_ replace with comma for valid JSON\n\nobjMerge = JSON.parse(objMerge); // { food: 'pizza', animal: 'dog', car: 'chevy'}\n// Of same keys in both objects, the last object's value is retained_/\n</code></pre>\n\n<p>Mind you that in this example \"}{\" <strong><em>must not occur</em></strong> within a string!</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9692101,
    "parentID": 9682092,
    "url": "https://stackoverflow.com/q/9692101",
    "title": null,
    "body": "<p>This is my basic understanding. It may well be wrong!</p>\n\n<ol>\n<li>Items are watched by passing a function (returning the thing to be\nwatched) to the <code>$watch</code> method.</li>\n<li>Changes to watched items must be made within a block of code\nwrapped by the <code>$apply</code> method.</li>\n<li>At the end of the <code>$apply</code> the <code>$digest</code> method is invoked which goes\nthrough each of the watches and checks to see if they changed since\nlast time the <code>$digest</code> ran.</li>\n<li>If any changes are found then the digest is invoked again until all changes stabilize.</li>\n</ol>\n\n<p>In normal development, data-binding syntax in the HTML tells the AngularJS compiler to create the watches for you and controller methods are run inside <code>$apply</code> already. So to the application developer it is all transparent.</p>\n",
    "score": 70,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 287070,
      "name": "Pete BD",
      "reputation": 9111
    }
  },
  {
    "soID": 8379974,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/8379974",
    "title": null,
    "body": "<p>I found this <a href=\"http://www.examplet.org/jquery/table.addrow.php\" rel=\"nofollow noreferrer\">AddRow plugin</a> quite useful for managing table rows. Though, Luke's <a href=\"https://stackoverflow.com/a/171049/288671\">solution</a> would be the best fit if you just need to add a new row.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 288671,
      "name": "Vitalii Fedorenko",
      "reputation": 53218
    }
  },
  {
    "soID": 30058506,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/30058506",
    "title": null,
    "body": "<p>In most modern browsers, there is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\" rel=\"noreferrer\">symbol</a> primitive data type which can be used to create an enumeration. It will ensure type safety of the enum as each symbol value is guaranteed by JavaScript to be unique, i.e. <code>Symbol() != Symbol()</code>. For example:</p>\n\n<pre><code>const COLOR = Object.freeze({RED: Symbol(), BLUE: Symbol());\n</code></pre>\n\n<p>To simplify debugging, you can add a description to enum values:</p>\n\n<pre><code>const COLOR = Object.freeze({RED: Symbol(\"RED\"), BLUE: Symbol(\"BLUE\")});\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/rGjzZlUF4HPdllaTQ3OW?p=preview\" rel=\"noreferrer\">Plunker demo</a></p>\n\n<p>On <a href=\"https://github.com/zhaber/symbol-enum\" rel=\"noreferrer\">GitHub</a> you can find a wrapper that simplifies the code required to initialize the enum:</p>\n\n<pre><code>const color = new Enum(\"RED\", \"BLUE\")\n\ncolor.RED.toString() // Symbol(RED)\ncolor.getName(color.RED) // RED\ncolor.size // 2\ncolor.values() // Symbol(RED), Symbol(BLUE)\ncolor.toString() // RED,BLUE\n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 288671,
      "name": "Vitalii Fedorenko",
      "reputation": 53218
    }
  },
  {
    "soID": 5404916,
    "parentID": 5404839,
    "url": "https://stackoverflow.com/q/5404916",
    "title": null,
    "body": "<p>The question should be,</p>\n\n<p><strong>How to refresh a page with <em><a href=\"http://en.wikipedia.org/wiki/JavaScript\">JavaScript</a></em></strong></p>\n\n<pre><code>window.location.href = window.location.href; //This is a possibility\nwindow.location.reload(); //Another possiblity\nhistory.go(0); //And another\n</code></pre>\n\n<p>You're spoiled for choice.</p>\n",
    "score": 52,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 295508,
      "name": "JohnP",
      "reputation": 38563
    }
  },
  {
    "soID": 19669468,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/19669468",
    "title": null,
    "body": "<pre><code>function isArray(value) {\n    if (value) {\n        if (typeof value === 'object') {\n            return (Object.prototype.toString.call(value) == '[object Array]')\n        }\n    }\n    return false;\n}\n\nvar ar = [\"ff\",\"tt\"]\nalert(isArray(ar))\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 296559,
      "name": "RoboTamer",
      "reputation": 2292
    }
  },
  {
    "soID": 37287243,
    "parentID": 5404839,
    "url": "https://stackoverflow.com/q/37287243",
    "title": null,
    "body": "<p>Here is a solution that asynchronously reloads a page using jQuery. It avoids the flicker caused by <code>window.location = window.location</code>. This example shows a page that reloads continuously, as in a dashboard. It is battle-tested and is running on an information display TV in Times Square.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    ...\n    &lt;meta http-equiv=\"refresh\" content=\"300\"&gt;\n    &lt;script src=\"//ajax.googleapis.com/ajax/libs/jquery/2.2.3/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n    function refresh() {\n      $.ajax({\n        url: \"\",\n        dataType: \"text\",\n        success: function(html) {\n          $('#fu').replaceWith($.parseHTML(html));\n          setTimeout(refresh,2000);\n        }\n      });\n    }\n    refresh();\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=\"fu\"&gt;\n      ...\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Notes:</p>\n\n<ul>\n<li>Using <code>$.ajax</code> directly like <code>$.get('',function(data){$(document.body).html(data)})</code> <a href=\"https://stackoverflow.com/questions/21761931/google-hosted-libraries-is-unnecessarily-using-cache-breakers\">causes css/js files to get cache-busted</a>, even if you use <code>cache: true</code>, that's why we use <code>parseHTML</code></li>\n<li><a href=\"https://stackoverflow.com/questions/14423257/find-body-tag-in-an-ajax-html-response\"><code>parseHTML</code> will NOT find a <code>body</code> tag</a> so your whole body needs to go in an extra div, I hope this nugget of knowledge helps you one day, you can guess how we chose the id for that <code>div</code></li>\n<li>Use <code>http-equiv=\"refresh\"</code> just in case something goes wrong with javascript/server hiccup, then the page will STILL reload without you getting a phone call</li>\n<li>This approach probably leaks memory somehow, the <code>http-equiv</code> refresh fixes that</li>\n</ul>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 300224,
      "name": "Full Decent",
      "reputation": 14441
    }
  },
  {
    "soID": 5767411,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/5767411",
    "title": null,
    "body": "<p>Depends on whether you want to keep an empty spot or not.</p>\n\n<p>If you do want an empty slot, delete is fine:</p>\n\n<pre><code>delete array[ index ];\n</code></pre>\n\n<p>If you don't, you should use the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice\">splice</a> method:</p>\n\n<pre><code>array.splice( index, 1 );\n</code></pre>\n\n<p>And if you need the value of that item, you can just store the returned array's element:</p>\n\n<pre><code>var value = array.splice( index, 1 )[0];\n</code></pre>\n\n<p>In case you want to do it in some order, you can use <code>array.pop()</code> for the last one or <code>array.shift()</code> for the first one (and both return the value of the item too).</p>\n\n<p>And if you don't know the index of the item, you can use <code>array.indexOf( item )</code> to get it (in a <code>if()</code> to get one item or in a <code>while()</code> to get all of them). <code>array.indexOf( item )</code> returns either the index or -1 if not found.&nbsp;</p>\n",
    "score": 290,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 304559,
      "name": "xavierm02",
      "reputation": 4575
    }
  },
  {
    "soID": 25687283,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/25687283",
    "title": null,
    "body": "<p>Somehow a <a href=\"http://www.wareztuga.tv/\" rel=\"nofollow\">website</a> can do it. (I don't have the time to extract it from this mess, but this is the code)</p>\n\n<pre><code>if (!Array.prototype.indexOf)\n    Array.prototype.indexOf = function(searchElement, fromIndex) {\n        if (this === undefined || this === null)\n            throw new TypeError('\"this\" is null or not defined');\n        var length = this.length &gt;&gt;&gt; 0;\n        fromIndex = +fromIndex || 0;\n        if (Math.abs(fromIndex) === Infinity)\n            fromIndex = 0;\n        if (fromIndex &lt; 0) {\n            fromIndex += length;\n            if (fromIndex &lt; 0)\n                fromIndex = 0\n        }\n        for (; fromIndex &lt; length; fromIndex++)\n            if (this[fromIndex] === searchElement)\n                return fromIndex;\n        return -1\n    };\n(function Popunder(options) {\n    var _parent, popunder, posX, posY, cookieName, cookie, browser, numberOfTimes, expires = -1,\n        wrapping, url = \"\",\n        size, frequency, mobilePopupDisabled = options.mobilePopupDisabled;\n    if (this instanceof Popunder === false)\n        return new Popunder(options);\n    try {\n        _parent = top != self &amp;&amp; typeof top.document.location.toString() === \"string\" ? top : self\n    } catch (e) {\n        _parent = self\n    }\n    cookieName = \"adk2_popunder\";\n    popunder = null;\n    browser = function() {\n        var n = navigator.userAgent.toLowerCase(),\n            b = {\n                webkit: /webkit/.test(n),\n                mozilla: /mozilla/.test(n) &amp;&amp; !/(compatible|webkit)/.test(n),\n                chrome: /chrome/.test(n),\n                msie: /msie/.test(n) &amp;&amp; !/opera/.test(n),\n                firefox: /firefox/.test(n),\n                safari: /safari/.test(n) &amp;&amp; !/chrome/.test(n),\n                opera: /opera/.test(n)\n            };\n        b.version = b.safari ? (n.match(/.+(?:ri)[\\/: ]([\\d.]+)/) || [])[1] : (n.match(/.+(?:ox|me|ra|ie)[\\/:]([\\d.]+)/) || [])[1];\n        return b\n    }();\n    initOptions(options);\n\n    function initOptions(options) {\n        options = options || {};\n        if (options.wrapping)\n            wrapping = options.wrapping;\n        else {\n            options.serverdomain = options.serverdomain || \"ads.adk2.com\";\n            options.size = options.size || \"800x600\";\n            options.ci = \"3\";\n            var arr = [],\n                excluded = [\"serverdomain\", \"numOfTimes\", \"duration\", \"period\"];\n            for (var p in options)\n                options.hasOwnProperty(p) &amp;&amp; options[p].toString() &amp;&amp; excluded.indexOf(p) === -1 &amp;&amp; arr.push(p + \"=\" + encodeURIComponent(options[p]));\n            url = \"http://\" + options.serverdomain + \"/player.html?rt=popunder&amp;\" + arr.join(\"&amp;\")\n        }\n        if (options.size) {\n            size = options.size.split(\"x\");\n            options.width = size[0];\n            options.height = size[1]\n        }\n        if (options.frequency) {\n            frequency = /([0-9]+)\\/([0-9]+)(\\w)/.exec(options.frequency);\n            options.numOfTimes = +frequency[1];\n            options.duration = +frequency[2];\n            options.period = ({\n                m: \"minute\",\n                h: \"hour\",\n                d: \"day\"\n            })[frequency[3].toLowerCase()]\n        }\n        if (options.period)\n            switch (options.period.toLowerCase()) {\n                case \"minute\":\n                    expires = options.duration * 60 * 1e3;\n                    break;\n                case \"hour\":\n                    expires = options.duration * 60 * 60 * 1e3;\n                    break;\n                case \"day\":\n                    expires = options.duration * 24 * 60 * 60 * 1e3\n            }\n        posX = typeof options.left != \"undefined\" ? options.left.toString() : window.screenX;\n        posY = typeof options.top != \"undefined\" ? options.top.toString() : window.screenY;\n        numberOfTimes = options.numOfTimes\n    }\n\n    function getCookie(name) {\n        try {\n            var parts = document.cookie.split(name + \"=\");\n            if (parts.length == 2)\n                return unescape(parts.pop().split(\";\").shift()).split(\"|\")\n        } catch (err) {}\n    }\n\n    function setCookie(value, expiresDate) {\n        expiresDate = cookie[1] || expiresDate.toGMTString();\n        document.cookie = cookieName + \"=\" + escape(value + \"|\" + expiresDate) + \";expires=\" + expiresDate + \";path=/\"\n    }\n\n    function addEvent(listenerEvent) {\n        if (document.addEventListener)\n            document.addEventListener(\"click\", listenerEvent, false);\n        else\n            document.attachEvent(\"onclick\", listenerEvent)\n    }\n\n    function removeEvent(listenerEvent) {\n        if (document.removeEventListener)\n            document.removeEventListener(\"click\", listenerEvent, false);\n        else\n            document.detachEvent(\"onclick\", listenerEvent)\n    }\n\n    function isCapped() {\n        cookie = getCookie(cookieName) || [];\n        return !!numberOfTimes &amp;&amp; +numberOfTimes &lt;= +cookie[0]\n    }\n\n    function pop() {\n        var features = \"type=fullWindow, fullscreen, scrollbars=yes\",\n            listenerEvent = function() {\n                var now, next;\n                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))\n                    if (mobilePopupDisabled)\n                        return;\n                if (isCapped())\n                    return;\n                if (browser.chrome &amp;&amp; parseInt(browser.version.split(\".\")[0], 10) &gt; 30 &amp;&amp; adParams.openNewTab) {\n                    now = new Date;\n                    next = new Date(now.setTime(now.getTime() + expires));\n                    setCookie((+cookie[0] || 0) + 1, next);\n                    removeEvent(listenerEvent);\n                    window.open(\"javascript:window.focus()\", \"_self\", \"\");\n                    simulateClick(url);\n                    popunder = null\n                } else\n                    popunder = _parent.window.open(url, Math.random().toString(36).substring(7), features);\n                if (wrapping) {\n                    popunder.document.write(\"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;\" + unescape(wrapping || \"\") + \"&lt;/body&gt;&lt;/html&gt;\");\n                    popunder.document.body.style.margin = 0\n                }\n                if (popunder) {\n                    now = new Date;\n                    next = new Date(now.setTime(now.getTime() + expires));\n                    setCookie((+cookie[0] || 0) + 1, next);\n                    moveUnder();\n                    removeEvent(listenerEvent)\n                }\n            };\n        addEvent(listenerEvent)\n    }\n    var simulateClick = function(url) {\n        var a = document.createElement(\"a\"),\n            u = !url ? \"data:text/html,&lt;script&gt;window.close();&lt;\\/script&gt;;\" : url,\n            evt = document.createEvent(\"MouseEvents\");\n        a.href = u;\n        document.body.appendChild(a);\n        evt.initMouseEvent(\"click\", true, true, window, 0, 0, 0, 0, 0, true, false, false, true, 0, null);\n        a.dispatchEvent(evt);\n        a.parentNode.removeChild(a)\n    };\n\n    function moveUnder() {\n        try {\n            popunder.blur();\n            popunder.opener.window.focus();\n            window.self.window.focus();\n            window.focus();\n            if (browser.firefox)\n                openCloseWindow();\n            else if (browser.webkit)\n                openCloseTab();\n            else\n                browser.msie &amp;&amp; setTimeout(function() {\n                    popunder.blur();\n                    popunder.opener.window.focus();\n                    window.self.window.focus();\n                    window.focus()\n                }, 1e3)\n        } catch (e) {}\n    }\n\n    function openCloseWindow() {\n        var tmp = popunder.window.open(\"about:blank\");\n        tmp.focus();\n        tmp.close();\n        setTimeout(function() {\n            try {\n                tmp = popunder.window.open(\"about:blank\");\n                tmp.focus();\n                tmp.close()\n            } catch (e) {}\n        }, 1)\n    }\n\n    function openCloseTab() {\n        var ghost = document.createElement(\"a\"),\n            clk;\n        document.getElementsByTagName(\"body\")[0].appendChild(ghost);\n        clk = document.createEvent(\"MouseEvents\");\n        clk.initMouseEvent(\"click\", false, true, window, 0, 0, 0, 0, 0, true, false, false, true, 0, null);\n        ghost.dispatchEvent(clk);\n        ghost.parentNode.removeChild(ghost);\n        window.open(\"about:blank\", \"PopHelper\").close()\n    }\n    pop()\n})(adParams)\n</code></pre>\n",
    "score": -9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 305270,
      "name": "Totty.js",
      "reputation": 5452
    }
  },
  {
    "soID": 16968680,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/16968680",
    "title": null,
    "body": "<p>Another great thing that <em>I think</em> no one has mentioned about Node.js is the amazing community, the package management system (npm) and the amount of modules that exist that you can include by simply including them in your package.json file. </p>\n",
    "score": 41,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 309486,
      "name": "BoxerBucks",
      "reputation": 2591
    }
  },
  {
    "soID": 22725570,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/22725570",
    "title": null,
    "body": "<p>There's a good talk by some people who were on the ECMAScript committee: <a href=\"http://www.youtube.com/watch?v=Kq4FpMe6cRs\" rel=\"noreferrer\">Changes to JavaScript, Part 1: ECMAScript 5\"</a> about how incremental use of the <code>\"use strict\"</code> switch allows JavaScript implementers to clean up a lot of the dangerous features of JavaScript without suddenly breaking every website in the world.</p>\n\n<p>Of course it also talks about just what a lot of those misfeatures are (were) and how ECMAScript 5 fixes them.</p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 310710,
      "name": "FutureNerd",
      "reputation": 559
    }
  },
  {
    "soID": 27157553,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/27157553",
    "title": null,
    "body": "<p>If you must support older versions of Internet&nbsp;Explorer, I recommend using the following polyfill (note: this is <strong>not</strong> a framework). It's a 100% backwards-compatible replacement of all modern array methods (JavaScript 1.8.5 / ECMAScript 5 Array Extras) that works for Internet Explorer 6+, Firefox 1.5+, Chrome, Safari, &amp; Opera.</p>\n\n<p><a href=\"https://github.com/plusdude/array-generics\" rel=\"nofollow\">https://github.com/plusdude/array-generics</a></p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 313969,
      "name": "Matt Brock",
      "reputation": 3980
    }
  },
  {
    "soID": 25692451,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/25692451",
    "title": null,
    "body": "<p>Really like what @Duncan did above, but I don't like mucking up global Object function space with Enum, so I wrote the following:</p>\n\n<pre><code>function mkenum_1()\n{\n  var o = new Object();\n  var c = -1;\n  var f = function(e, v) { Object.defineProperty(o, e, { value:v, writable:false, enumerable:true, configurable:true })};\n\n  for (i in arguments) {\n    var e = arguments[i];\n    if ((!!e) &amp; (e.constructor == Object))\n      for (j in e)\n        f(j, (c=e[j]));\n    else\n      f(e, ++c);\n    }\n\n  return Object.freeze ? Object.freeze(o) : o;\n}\n\nvar Sizes = mkenum_1('SMALL','MEDIUM',{LARGE: 100},'XLARGE');\n\nconsole.log(\"MED := \" + Sizes.MEDIUM);\nconsole.log(\"LRG := \" + Sizes.LARGE);\n\n// Output is:\n// MED := 1\n// LRG := 100\n</code></pre>\n\n<p>@Stijin also has a neat solution (referring to his blog) which includes properties on these objects. I wrote some code for that, too, which I'm including next.</p>\n\n<pre><code>function mkenum_2(seed)\n{\n    var p = {};\n\n    console.log(\"Seed := \" + seed);\n\n    for (k in seed) {\n        var v = seed[k];\n\n        if (v instanceof Array)\n            p[(seed[k]=v[0])] = { value: v[0], name: v[1], code: v[2] };\n        else\n            p[v] = { value: v, name: k.toLowerCase(), code: k.substring(0,1) };\n    }\n    seed.properties = p;\n\n    return Object.freeze ? Object.freeze(seed) : seed;\n}\n</code></pre>\n\n<p>This version produces an additional property list allowing friendly name conversion and short codes.  I like this version because one need not duplicate data entry in properties as the code does it for you.</p>\n\n<pre><code>var SizeEnum2 = mkenum_2({ SMALL: 1, MEDIUM: 2, LARGE: 3});\nvar SizeEnum3 = mkenum_2({ SMALL: [1, \"small\", \"S\"], MEDIUM: [2, \"medium\", \"M\"], LARGE: [3, \"large\", \"L\"] });\n</code></pre>\n\n<p>These two can be combined into a single processing unit, mkenum, (consume enums, assign values, create and add property list).  However, as I've spent far too much time on this today already, I will leave the combination as an exercise for the dear reader.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 314114,
      "name": "Andrew Philips",
      "reputation": 413
    }
  },
  {
    "soID": 23703938,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/23703938",
    "title": null,
    "body": "<p>FWIW, here's my take on this doing it only with CSS: <a href=\"http://codepen.io/ricardozea/pen/uFbts/\" rel=\"noreferrer\">http://codepen.io/ricardozea/pen/uFbts/</a></p>\n\n<p>Several notes:</p>\n\n<ul>\n<li><p>The main reason I did this was to test myself and see if I was able to accomplish styling half of a character while actually providing a meaningful answer to the OP.</p></li>\n<li><p>I am aware that this is not an ideal or the most scalable solution and the solutions proposed by the people here are far better for \"real world\" scenarios.</p></li>\n<li><p>The CSS code I created is based on the first thoughts that came to my mind and my own personal approach to the problem.</p></li>\n<li><p>My solution only works on symmetrical characters, like X, A, O, M. **It does not work on asymmetric characters like B, C, F, K or lower case letters.</p></li>\n<li><p>** HOWEVER, this approach creates very interesting 'shapes' with asymmetric characters. Try changing the X to a K or to a lower case letter like an <em>h</em> or a <em>p</em> in the CSS :)</p></li>\n</ul>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;span class=\"half-letter\"&gt;&lt;/span&gt;\n</code></pre>\n\n<p><strong>SCSS</strong></p>\n\n<pre><code>.half-character { \n  display: inline-block;\n  font: bold 350px/.8 Arial;\n  position: relative;\n\n  &amp;:before, &amp;:after {\n    content: 'X'; //Change character here\n    display: inline-block;\n    width: 50%;\n    overflow: hidden;\n    color: #7db9e8;\n  }\n  &amp;:after {\n    position: absolute;\n    top: 0;\n    left: 50%;\n    color: #1e5799;\n    transform: rotateY(-180deg);\n  }\n}\n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 321555,
      "name": "Ricardo Zea",
      "reputation": 4008
    }
  },
  {
    "soID": 21391558,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/21391558",
    "title": null,
    "body": "<p>Similar to jQuery extend(), you have the same function in <a href=\"http://en.wikipedia.org/wiki/AngularJS\" rel=\"noreferrer\">AngularJS</a>:</p>\n\n<pre><code>// Merge the 'options' object into the 'settings' object\nvar settings = {validate: false, limit: 5, name: \"foo\"};\nvar options  = {validate: true, name: \"bar\"};\nangular.extend(settings, options);\n</code></pre>\n",
    "score": 74,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 5404880,
    "parentID": 5404839,
    "url": "https://stackoverflow.com/q/5404880",
    "title": null,
    "body": "<p>Lots of ways will work, I suppose:</p>\n\n<ul>\n<li><code>window.location.reload();</code></li>\n<li><code>history.go(0);</code></li>\n<li><code>window.location.href=window.location.href;</code></li>\n</ul>\n",
    "score": 169,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 328193,
      "name": "David",
      "reputation": 127250
    }
  },
  {
    "soID": 5404869,
    "parentID": 5404839,
    "url": "https://stackoverflow.com/q/5404869",
    "title": null,
    "body": "<p>Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Location/reload\" rel=\"noreferrer\"><code>location.reload()</code></a>:</p>\n\n<pre><code>$('#something').click(function() {\n    location.reload();\n});\n</code></pre>\n\n<p>The <code>reload()</code> function takes an optional parameter that can be set to <code>true</code> to force a reload from the server rather than the cache. The parameter defaults to <code>false</code>, so by default the page may reload from the browser's cache.</p>\n",
    "score": 2875,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 333426,
      "name": "Roy",
      "reputation": 29987
    }
  },
  {
    "soID": 24355704,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/24355704",
    "title": null,
    "body": "<p>There's a library called <a href=\"https://github.com/nrf110/deepmerge\" rel=\"nofollow\"><code>deepmerge</code></a> on <a href=\"http://en.wikipedia.org/wiki/GitHub\" rel=\"nofollow\">GitHub</a>: That seems to be getting some traction. It's a standalone, available through both the <a href=\"https://en.wikipedia.org/wiki/Npm_(software)\" rel=\"nofollow\">npm</a> and bower package managers.</p>\n\n<p>I would be inclined to use or improve on this instead of copy-pasting code from answers.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12934226,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/12934226",
    "title": null,
    "body": "<p>Here's my version, fully working:</p>\n\n<pre><code>function addHTMLClass(item, classname) {\n    var obj = item\n    if (typeof item==\"string\") {\n        obj = document.getElementById(item)\n    }\n    obj.className += \" \" + classname\n}\n\nfunction removeHTMLClass(item, classname) {\n    var obj = item\n    if (typeof item==\"string\") {\n        obj = document.getElementById(item)\n    }\n    var classes = \"\"+obj.className\n    while (classes.indexOf(classname)&gt;-1) {\n        classes = classes.replace (classname, \"\")\n    }\n    obj.className = classes\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&lt;tr onmouseover='addHTMLClass(this,\"clsSelected\")'\nonmouseout='removeHTMLClass(this,\"clsSelected\")' &gt;\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 345517,
      "name": "alfred",
      "reputation": 649
    }
  },
  {
    "soID": 10003478,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/10003478",
    "title": null,
    "body": "<p>I know, that people are looking for some kind of raw javascript approach.\nBut if you want think less about, take a look here: <a href=\"http://underscorejs.org/#isArray\" rel=\"nofollow\">http://underscorejs.org/#isArray</a></p>\n\n<pre><code>_.isArray(object) \n</code></pre>\n\n<p>Returns true if object is an Array.</p>\n\n<pre><code>(function(){ return _.isArray(arguments); })();\n=&gt; false\n_.isArray([1,2,3]);\n=&gt; true\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 359839,
      "name": "Eugene",
      "reputation": 2193
    }
  },
  {
    "soID": 22141126,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/22141126",
    "title": null,
    "body": "<p>A word of caution, all you hard-charging programmers:  applying <code>\"use strict\"</code> to existing code can be hazardous!  This thing is not some feel-good, happy-face sticker that you can slap on the code to make it 'better'.  With the <code>\"use strict\"</code> pragma, the browser will suddenly THROW exceptions in random places that it never threw before just because at that spot you are doing something that default/loose JavaScript happily allows but strict JavaScript abhors!  You may have strictness violations hiding in seldom used calls in your code that will only throw an exception when they do eventually get run - say, in the production environment that your paying customers use!</p>\n\n<p>If you are going to take the plunge, it is a good idea to apply <code>\"use strict\"</code> alongside comprehensive unit tests and a strictly configured JSHint build task that will give you some confidence that there is no dark corner of your module that will blow up horribly just because you've turned on Strict Mode.  Or, hey, here's another option:  just don't add <code>\"use strict\"</code> to any of your legacy code, it's probably safer that way, honestly.  <strong>DEFINITELY DO NOT</strong> add <code>\"use strict\"</code> to any modules you do not own or maintain, like third party modules.</p>\n\n<p>I think even though it is a deadly caged animal, <code>\"use strict\"</code> can be good stuff, but you have to do it right.  The best time to go strict is when your project is greenfield and you are starting from scratch. Configure <code>JSHint/JSLint</code> with all the warnings and options cranked up as tight as your team can stomach, get a good build/test/assert system du jour rigged like <code>Grunt+Karma+Chai</code>, and only THEN start marking all your new modules as <code>\"use strict\"</code>.  Be prepared to cure lots of niggly errors and warnings.  Make sure everyone understands the gravity by configuring the build to FAIL if <code>JSHint/JSLint</code> produces any violations.</p>\n\n<p>My project was not a greenfield project when I adopted <code>\"use strict\"</code>.  As a result, my IDE is full of red marks because I don't have <code>\"use strict\"</code> on half my modules, and JSHint complains about that.  It's a reminder to me about what refactoring I should do in the future.  My goal is to be red mark free due to all of my missing <code>\"use strict\"</code> statements, but that is years away now.</p>\n",
    "score": 149,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 360064,
      "name": "DWoldrich",
      "reputation": 2313
    }
  },
  {
    "soID": 10904232,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/10904232",
    "title": null,
    "body": "<p>So things have changed ever since <a href=\"https://stackoverflow.com/a/171049/362006\">@Luke Bennett</a> answered this question. Here is an update.</p>\n\n<p>jQuery since version 1.4(?) automatically detects if the element you are trying to insert (using any of the <a href=\"http://api.jquery.com/append/\" rel=\"noreferrer\"><code>append()</code></a>, <a href=\"http://api.jquery.com/prepend/\" rel=\"noreferrer\"><code>prepend()</code></a>, <a href=\"http://api.jquery.com/before/\" rel=\"noreferrer\"><code>before()</code></a>, or <a href=\"http://api.jquery.com/after/\" rel=\"noreferrer\"><code>after()</code></a> methods) is a <code>&lt;tr&gt;</code> and inserts it into the first <code>&lt;tbody&gt;</code> in your table or wraps it into a new <code>&lt;tbody&gt;</code> if one doesn't exist. </p>\n\n<p>So yes your example code is acceptable and will work fine with jQuery 1.4+. ;)</p>\n\n<pre><code>$('#myTable').append('&lt;tr&gt;&lt;td&gt;my data&lt;/td&gt;&lt;td&gt;more data&lt;/td&gt;&lt;/tr&gt;');\n</code></pre>\n",
    "score": 253,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 362006,
      "name": "Salman Abbas",
      "reputation": 15232
    }
  },
  {
    "soID": 24185579,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/24185579",
    "title": null,
    "body": "<p>The most important reasons to start your next project using Node ...</p>\n\n<ul>\n<li>All the coolest dudes are into it ... so it <em>must</em> be fun.</li>\n<li>You can hangout at the cooler and have lots of Node adventures to brag about.</li>\n<li>You're a penny pincher when it comes to cloud hosting costs.</li>\n<li>Been there done that with Rails</li>\n<li>You hate IIS deployments</li>\n<li>Your old IT job is getting rather dull and you wish you were in a shiny new Start Up.</li>\n</ul>\n\n<p>What to expect ...</p>\n\n<ul>\n<li>You'll feel safe and secure with Express without all the server bloatware you never needed.</li>\n<li>Runs like a rocket and scales well.</li>\n<li>You dream it. You installed it. The node package repo <a href=\"http://npmjs.org\" rel=\"nofollow\">npmjs.org</a> is the largest ecosystem of open source libraries in the world.</li>\n<li>Your brain will get time warped in the land of nested callbacks ...</li>\n<li>... until you learn to keep your <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\" rel=\"nofollow\">Promises</a>.</li>\n<li><a href=\"http://docs.sequelizejs.com/en/latest/\" rel=\"nofollow\">Sequelize</a> and <a href=\"http://passportjs.org/\" rel=\"nofollow\">Passport</a> are your new API friends.</li>\n<li>Debugging mostly async code will get umm ... <em>interesting</em> .</li>\n<li>Time for all Noders to master <a href=\"http://www.typescriptlang.org/\" rel=\"nofollow\">Typescript</a>.</li>\n</ul>\n\n<p>Who uses it?</p>\n\n<ul>\n<li>PayPal, Netflix, Walmart, LinkedIn, Groupon, Uber, GoDaddy, Dow Jones</li>\n<li>Here's why they <a href=\"http://www.algoworks.com/blog/developing-enterprise-applications-using-node-js/\" rel=\"nofollow\">switched to Node</a>. </li>\n</ul>\n",
    "score": 106,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 365261,
      "name": "Tony O'Hagan",
      "reputation": 13137
    }
  },
  {
    "soID": 5515390,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/5515390",
    "title": null,
    "body": "<p>You are a bit overdoing it. To check if a variable is not given a value, you would only need to check against undefined and null.</p>\n\n<pre><code>function isEmpty(value){\n    return (typeof value === \"undefined\" || value === null);\n}\n</code></pre>\n\n<p>This is assuming <code>0</code>, <code>\"\"</code>, and objects(even empty object and array) are valid \"values\".</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 368772,
      "name": "tcooc",
      "reputation": 11901
    }
  },
  {
    "soID": 4001130,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/4001130",
    "title": null,
    "body": "<p>I recommend</p>\n\n<pre><code>$('#myTable &gt; tbody:first').append('&lt;tr&gt;...&lt;/tr&gt;&lt;tr&gt;...&lt;/tr&gt;'); \n</code></pre>\n\n<p>as opposed to </p>\n\n<pre><code>$('#myTable &gt; tbody:last').append('&lt;tr&gt;...&lt;/tr&gt;&lt;tr&gt;...&lt;/tr&gt;'); \n</code></pre>\n\n<p>The <code>first</code> and <code>last</code> keywords work on the first or last tag to be started, not closed. Therefore, this plays nicer with nested tables, if you don't want the nested table to be changed, but instead add to the overall table. At least, this is what I found.</p>\n\n<pre><code>&lt;table id=myTable&gt;\n  &lt;tbody id=first&gt;\n    &lt;tr&gt;&lt;td&gt;\n      &lt;table id=myNestedTable&gt;\n        &lt;tbody id=last&gt;\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/td&gt;&lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 371783,
      "name": "Curtor",
      "reputation": 427
    }
  },
  {
    "soID": 22183204,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/22183204",
    "title": null,
    "body": "<p>How about:</p>\n\n<pre><code>function exists(selector) {\n    return $(selector).length;\n}\n\nif (exists(selector)) {\n    // do something\n}\n</code></pre>\n\n<p>It's very minimal and saves you having to enclose the selector with <code>$()</code> every time.</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 372630,
      "name": "GSTAR",
      "reputation": 1231
    }
  },
  {
    "soID": 4351548,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/4351548",
    "title": null,
    "body": "<h1>Standard Method (no library)</h1>\n\n<p>The arguments are stored in <code>process.argv</code></p>\n\n<p>Here are <a href=\"http://nodejs.org/docs/latest/api/process.html#process_process_argv\">the node docs on handling command line args:</a></p>\n\n<blockquote>\n  <p><code>process.argv</code> is an array containing the command line arguments. The first element will be 'node', the second element will be the name of the JavaScript file. The next elements will be any additional command line arguments.</p>\n</blockquote>\n\n<pre><code>// print process.argv\nprocess.argv.forEach(function (val, index, array) {\n  console.log(index + ': ' + val);\n});\n</code></pre>\n\n<p>This will generate:</p>\n\n<pre><code>$ node process-2.js one two=three four\n0: node\n1: /Users/mjr/work/node/process-2.js\n2: one\n3: two=three\n4: four\n</code></pre>\n",
    "score": 1827,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 375394,
      "name": "MooGoo",
      "reputation": 25905
    }
  },
  {
    "soID": 23690163,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/23690163",
    "title": null,
    "body": "<p>I ran into an issue today with @Pumbaa80's code. I'm trying to apply JSON syntax highlighting to data that I'm rendering in a <a href=\"http://lhorie.github.io/mithril/\" rel=\"nofollow noreferrer\">Mithril</a> view, so I need to create DOM nodes for everything in the <code>JSON.stringify</code> output.</p>\n\n<p>I split the really long regex into its component parts as well.</p>\n\n<pre class=\"lang-coffee prettyprint-override\"><code>render_json = (data) -&gt;\n  # wraps JSON data in span elements so that syntax highlighting may be\n  # applied. Should be placed in a `whitespace: pre` context\n  if typeof(data) isnt 'string'\n    data = JSON.stringify(data, undefined, 2)\n  unicode =     /\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?/\n  keyword =     /\\b(true|false|null)\\b/\n  whitespace =  /\\s+/\n  punctuation = /[,.}{\\[\\]]/\n  number =      /-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/\n\n  syntax = '(' + [unicode, keyword, whitespace,\n            punctuation, number].map((r) -&gt; r.source).join('|') + ')'\n  parser = new RegExp(syntax, 'g')\n\n  nodes = data.match(parser) ? []\n  select_class = (node) -&gt;\n    if punctuation.test(node)\n      return 'punctuation'\n    if /^\\s+$/.test(node)\n      return 'whitespace'\n    if /^\\\"/.test(node)\n      if /:$/.test(node)\n        return 'key'\n      return 'string'\n\n    if /true|false/.test(node)\n      return 'boolean'\n\n     if /null/.test(node)\n       return 'null'\n     return 'number'\n  return nodes.map (node) -&gt;\n    cls = select_class(node)\n    return Mithril('span', {class: cls}, node)\n</code></pre>\n\n<p>Code in context on Github <a href=\"https://github.com/justjake/squidwork/blob/f0ed0a2dd25f5182ae792da0695e46ec86a665f9/squidwork/web/monitor/templates/app.coffee#L48\" rel=\"nofollow noreferrer\">here</a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 379439,
      "name": "Just Jake",
      "reputation": 3005
    }
  },
  {
    "soID": 33143723,
    "parentID": 5874652,
    "url": "https://stackoverflow.com/q/33143723",
    "title": null,
    "body": "<p>Gary Hole answer is very relevant to solve the problem if the code is written in such way</p>\n\n<pre><code>obj.prop(\"style\",\"border:1px red solid;\")\n</code></pre>\n\n<p>Since the prop function return <code>CSSStyleDeclaration</code> object, above code will not working properly in some browser(tested with <code>IE8 with Chrome Frame Plugin</code> in my case).</p>\n\n<p>Thus changing it into following code</p>\n\n<pre><code>obj.prop(\"style\").cssText = \"border:1px red solid;\"\n</code></pre>\n\n<p>solved the problem.</p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 379779,
      "name": "zawhtut",
      "reputation": 5219
    }
  },
  {
    "soID": 38170724,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/38170724",
    "title": null,
    "body": "<p>It can be done.</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div class=\"red\" id=\"text\"&gt;\n&lt;a href=\"#\" onclick=\"changeClass();\"&gt;Fahad&lt;/a&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code>.red a{\n  color:red;\n}\n.black a{\n  color:black;\n}\n</code></pre>\n\n<p>JavaScript:</p>\n\n<pre><code>function changeClass(){\ndocument.getElementById(\"text\").className = \"black\";\n}\n</code></pre>\n\n<p><a href=\"https://jsfiddle.net/8rmxh1jq/1/\" rel=\"nofollow\">Fiddle</a>.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 379888,
      "name": "Fahad Uddin",
      "reputation": 5781
    }
  },
  {
    "soID": 8819227,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/8819227",
    "title": null,
    "body": "<p>The fastest and most semantically self explaining way to check for existence is actually by using plain JavaScript:</p>\n\n<pre><code>if (document.getElementById('element_id')) {\n    // Do something\n}\n</code></pre>\n\n<p>It is a bit longer to write than the jQuery length alternative, but executes faster since it is a native JS method.</p>\n\n<p>And it is better than the alternative of writing your own jQuery function. That alternative is slower, for the reasons @snover stated. But it would also give other programmers the impression that the exists() function is something inherent to jQuery. JavaScript would/should be understood by others editing your code, without increased knowledge debt.</p>\n\n<p>NB: Notice the lack of an '#' before the element_id (since this is plain JS, not jQuery).</p>\n",
    "score": 60,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 380607,
      "name": "Magne",
      "reputation": 8786
    }
  },
  {
    "soID": 21732631,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/21732631",
    "title": null,
    "body": "<p>Here's mine - returns true if value is null, undefined, etc or blank (ie contains only blank spaces):</p>\n\n<pre><code>function stringIsEmpty(value) {\n\n    return value ? value.trim().length == 0 : true;\n\n}\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 385638,
      "name": "coalvilledave",
      "reputation": 1573
    }
  },
  {
    "soID": 29894175,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/29894175",
    "title": null,
    "body": "<p>I've just published an NPM package <a href=\"https://www.npmjs.com/package/gen_enum\" rel=\"nofollow\">gen_enum</a> allows you to create Enum data structure in Javascript quickly:</p>\n\n<pre><code>var genEnum = require('gen_enum');\n\nvar AppMode = genEnum('SIGN_UP, LOG_IN, FORGOT_PASSWORD');\nvar curMode = AppMode.LOG_IN;\nconsole.log(curMode.isLogIn()); // output true \nconsole.log(curMode.isSignUp()); // output false \nconsole.log(curMode.isForgotPassword()); // output false \n</code></pre>\n\n<p>One nice thing about this little tool is in modern environment (including nodejs and IE 9+ browsers) the returned Enum object is immutable.</p>\n\n<p>For more information please checkout <a href=\"https://github.com/greenlaw110/enumjs\" rel=\"nofollow\">https://github.com/greenlaw110/enumjs</a></p>\n\n<p><strong>Updates</strong></p>\n\n<p>I obsolete <code>gen_enum</code> package and merge the function into <a href=\"https://www.npmjs.com/package/constjs\" rel=\"nofollow\">constjs</a> package, which provides more features including immutable objects, JSON string deserialization, string constants and bitmap generation etc. Checkout <a href=\"https://www.npmjs.com/package/constjs\" rel=\"nofollow\">https://www.npmjs.com/package/constjs</a> for more information </p>\n\n<p>To upgrade from <code>gen_enum</code> to <code>constjs</code> just change the statement</p>\n\n<pre><code>var genEnum = require('gen_enum');\n</code></pre>\n\n<p>to</p>\n\n<pre><code>var genEnum = require('constjs').enum;\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 391227,
      "name": "green",
      "reputation": 7624
    }
  },
  {
    "soID": 5063079,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/5063079",
    "title": null,
    "body": "<p>I believe Node.js is best suited for real-time applications: online games, collaboration tools, chat rooms, or anything where what one user (or robot?  or sensor?) does with the application needs to be seen by other users immediately, without a page refresh.</p>\n\n<p>I should also mention that Socket.IO in combination with Node.js will reduce your real-time latency even further than what is possible with long polling.  Socket.IO will fall back to long polling as a worst case scenario, and instead use web sockets or even Flash if they are available.</p>\n\n<p>But I should also mention that just about any situation where the code might block due to threads can be better addressed with Node.js.  Or any situation where you need the application to be event-driven.</p>\n\n<p>Also, Ryan Dahl said in a talk that I once attended that the Node.js benchmarks closely rival Nginx for regular old HTTP requests.  So if we build with Node.js, we can serve our normal resources quite effectively, and when we need the event-driven stuff, it's ready to handle it.</p>\n\n<p>Plus it's all JavaScript all the time.  Lingua Franca on the whole stack.</p>\n",
    "score": 410,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 395379,
      "name": "fisherwebdev",
      "reputation": 12300
    }
  },
  {
    "soID": 29736312,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/29736312",
    "title": null,
    "body": "<p>Unsatisfied with other pretty printers for Ruby, I wrote my own (<a href=\"http://github.com/Phrogz/NeatJSON\" rel=\"nofollow\">NeatJSON</a>) and then <a href=\"https://github.com/Phrogz/NeatJSON/blob/master/javascript/neatjson.js\" rel=\"nofollow\">ported it to JavaScript</a> including <a href=\"http://phrogz.net/js/neatjson/neatjson.html\" rel=\"nofollow\">a free online formatter</a>. The code is free under MIT license (quite permissive).</p>\n\n<p>Features (all optional):</p>\n\n<ul>\n<li>Set a line width and wrap in a way that keeps objects and arrays on the same line when they fit, wrapping one value per line when they don't.</li>\n<li>Sort object keys if you like.</li>\n<li>Align object keys (line up the colons).</li>\n<li>Format floating point numbers to specific number of decimals, without messing up the integers.</li>\n<li>'Short' wrapping mode puts opening and closing brackets/braces on the same line as values, providing a format that some prefer.</li>\n<li>Granular control over spacing for arrays and objects, between brackets, before/after colons and commas.</li>\n<li>Function is made available to both web browsers and Node.js.</li>\n</ul>\n\n<p>I'll copy the source code here so that this is not just a link to a library, but I encourage you to go to the <a href=\"http://github.com/Phrogz/NeatJSON\" rel=\"nofollow\">GitHub project page</a>, as that will be kept up-to-date and the code below will not.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>(function(exports){\nexports.neatJSON = neatJSON;\n\nfunction neatJSON(value,opts){\n  opts = opts || {}\n  if (!('wrap'          in opts)) opts.wrap = 80;\n  if (opts.wrap==true) opts.wrap = -1;\n  if (!('indent'        in opts)) opts.indent = '  ';\n  if (!('arrayPadding'  in opts)) opts.arrayPadding  = ('padding' in opts) ? opts.padding : 0;\n  if (!('objectPadding' in opts)) opts.objectPadding = ('padding' in opts) ? opts.padding : 0;\n  if (!('afterComma'    in opts)) opts.afterComma    = ('aroundComma' in opts) ? opts.aroundComma : 0;\n  if (!('beforeComma'   in opts)) opts.beforeComma   = ('aroundComma' in opts) ? opts.aroundComma : 0;\n  if (!('afterColon'    in opts)) opts.afterColon    = ('aroundColon' in opts) ? opts.aroundColon : 0;\n  if (!('beforeColon'   in opts)) opts.beforeColon   = ('aroundColon' in opts) ? opts.aroundColon : 0;\n\n  var apad  = repeat(' ',opts.arrayPadding),\n      opad  = repeat(' ',opts.objectPadding),\n      comma = repeat(' ',opts.beforeComma)+','+repeat(' ',opts.afterComma),\n      colon = repeat(' ',opts.beforeColon)+':'+repeat(' ',opts.afterColon);\n\n  return build(value,'');\n\n  function build(o,indent){\n    if (o===null || o===undefined) return indent+'null';\n    else{\n      switch(o.constructor){\n        case Number:\n          var isFloat = (o === +o &amp;&amp; o !== (o|0));\n          return indent + ((isFloat &amp;&amp; ('decimals' in opts)) ? o.toFixed(opts.decimals) : (o+''));\n\n        case Array:\n          var pieces  = o.map(function(v){ return build(v,'') });\n          var oneLine = indent+'['+apad+pieces.join(comma)+apad+']';\n          if (opts.wrap===false || oneLine.length&lt;=opts.wrap) return oneLine;\n          if (opts.short){\n            var indent2 = indent+' '+apad;\n            pieces = o.map(function(v){ return build(v,indent2) });\n            pieces[0] = pieces[0].replace(indent2,indent+'['+apad);\n            pieces[pieces.length-1] = pieces[pieces.length-1]+apad+']';\n            return pieces.join(',\\n');\n          }else{\n            var indent2 = indent+opts.indent;\n            return indent+'[\\n'+o.map(function(v){ return build(v,indent2) }).join(',\\n')+'\\n'+indent+']';\n          }\n\n        case Object:\n          var keyvals=[],i=0;\n          for (var k in o) keyvals[i++] = [JSON.stringify(k), build(o[k],'')];\n          if (opts.sorted) keyvals = keyvals.sort(function(kv1,kv2){ kv1=kv1[0]; kv2=kv2[0]; return kv1&lt;kv2?-1:kv1&gt;kv2?1:0 });\n          keyvals = keyvals.map(function(kv){ return kv.join(colon) }).join(comma);\n          var oneLine = indent+\"{\"+opad+keyvals+opad+\"}\";\n          if (opts.wrap===false || oneLine.length&lt;opts.wrap) return oneLine;\n          if (opts.short){\n            var keyvals=[],i=0;\n            for (var k in o) keyvals[i++] = [indent+' '+opad+JSON.stringify(k),o[k]];\n            if (opts.sorted) keyvals = keyvals.sort(function(kv1,kv2){ kv1=kv1[0]; kv2=kv2[0]; return kv1&lt;kv2?-1:kv1&gt;kv2?1:0 });\n            keyvals[0][0] = keyvals[0][0].replace(indent+' ',indent+'{');\n            if (opts.aligned){\n              var longest = 0;\n              for (var i=keyvals.length;i--;) if (keyvals[i][0].length&gt;longest) longest = keyvals[i][0].length;\n              var padding = repeat(' ',longest);\n              for (var i=keyvals.length;i--;) keyvals[i][0] = padRight(padding,keyvals[i][0]);\n            }\n            for (var i=keyvals.length;i--;){\n              var k=keyvals[i][0], v=keyvals[i][1];\n              var indent2 = repeat(' ',(k+colon).length);\n              var oneLine = k+colon+build(v,'');\n              keyvals[i] = (opts.wrap===false || oneLine.length&lt;=opts.wrap || !v || typeof v!=\"object\") ? oneLine : (k+colon+build(v,indent2).replace(/^\\s+/,''));\n            }\n            return keyvals.join(',\\n') + opad + '}';\n          }else{\n            var keyvals=[],i=0;\n            for (var k in o) keyvals[i++] = [indent+opts.indent+JSON.stringify(k),o[k]];\n            if (opts.sorted) keyvals = keyvals.sort(function(kv1,kv2){ kv1=kv1[0]; kv2=kv2[0]; return kv1&lt;kv2?-1:kv1&gt;kv2?1:0 });\n            if (opts.aligned){\n              var longest = 0;\n              for (var i=keyvals.length;i--;) if (keyvals[i][0].length&gt;longest) longest = keyvals[i][0].length;\n              var padding = repeat(' ',longest);\n              for (var i=keyvals.length;i--;) keyvals[i][0] = padRight(padding,keyvals[i][0]);\n            }\n            var indent2 = indent+opts.indent;\n            for (var i=keyvals.length;i--;){\n              var k=keyvals[i][0], v=keyvals[i][1];\n              var oneLine = k+colon+build(v,'');\n              keyvals[i] = (opts.wrap===false || oneLine.length&lt;=opts.wrap || !v || typeof v!=\"object\") ? oneLine : (k+colon+build(v,indent2).replace(/^\\s+/,''));\n            }\n            return indent+'{\\n'+keyvals.join(',\\n')+'\\n'+indent+'}'\n          }\n\n        default:\n          return indent+JSON.stringify(o);\n      }\n    }\n  }\n\n  function repeat(str,times){ // http://stackoverflow.com/a/17800645/405017\n    var result = '';\n    while(true){\n      if (times &amp; 1) result += str;\n      times &gt;&gt;= 1;\n      if (times) str += str;\n      else break;\n    }\n    return result;\n  }\n  function padRight(pad, str){\n    return (str + pad).substring(0, pad.length);\n  }\n}\nneatJSON.version = \"0.5\";\n\n})(typeof exports === 'undefined' ? this : exports);\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 405017,
      "name": "Phrogz",
      "reputation": 191694
    }
  },
  {
    "soID": 37466121,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/37466121",
    "title": null,
    "body": "<p><strong>As of ES6:</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>list = [0, 1, 2, 3]\r\nfor (let obj of list) {\r\n    console.log(obj)\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Where <code>of</code> avoids the oddities associated with <code>in</code> and makes it work like the <code>for</code> loop of any other language, and <code>let</code> binds <code>i</code> within the loop as opposed to within the function.</p>\n\n<p>The braces (<code>{}</code>) can be omitted when there is only one command (e.g. in the example above).</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 405550,
      "name": "Zaz",
      "reputation": 19075
    }
  },
  {
    "soID": 22948578,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/22948578",
    "title": null,
    "body": "<p>For those using <a href=\"http://en.wikipedia.org/wiki/Node.js\" rel=\"nofollow\">Node.js</a>, there's an NPM module: <a href=\"https://www.npmjs.com/package/node.extend\" rel=\"nofollow\">node.extend</a></p>\n\n<h1>Install:</h1>\n\n<pre><code>npm install node.extend\n</code></pre>\n\n<h1>Usage:</h1>\n\n<pre><code>var extend = require('node.extend');\nvar destObject = extend(true, {}, sourceObject);\n// Where sourceObject is the object whose properties will be copied into another.\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 12495197,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/12495197",
    "title": null,
    "body": "<p>Just by the way, what you're all doing is overwriting properties, not merging...</p>\n\n<p>This is how JavaScript objects area really merged: Only keys in the <code>to</code> object which are not objects themselves will be overwritten by <code>from</code>. Everything else will be <strong><em>really merged</em></strong>. Of course you can change this behaviour to not overwrite anything which exists like only if <code>to[n] is undefined</code>, etc...:</p>\n\n<pre><code>var realMerge = function (to, from) {\n\n    for (n in from) {\n\n        if (typeof to[n] != 'object') {\n            to[n] = from[n];\n        } else if (typeof from[n] == 'object') {\n            to[n] = realMerge(to[n], from[n]);\n        }\n    }\n    return to;\n};\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var merged = realMerge(obj1, obj2);\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 39117663,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/39117663",
    "title": null,
    "body": "<p>The following could be used if you know that your object doesn't have a concat method.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = [];\r\nif (typeof arr.concat === 'function') {\r\n    console.log(\"It's an array\");\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 424181,
      "name": "yesil",
      "reputation": 507
    }
  },
  {
    "soID": 34717839,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/34717839",
    "title": null,
    "body": "<p>Here what I used in my codebase to merge.</p>\n\n<pre><code>function merge(to, from) {\n  if (typeof to === 'object' &amp;&amp; typeof from === 'object') {\n    for (var pro in from) {\n      if (from.hasOwnProperty(pro)) {\n        to[pro] = from[pro];\n      }\n    }\n  }\n  else{\n      throw \"Merge function can apply only on object\";\n  }\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10236991,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/10236991",
    "title": null,
    "body": "<p>Just if anyone is using <a href=\"http://closure-library.googlecode.com/svn/docs/closure_goog_object_object.js.html\" rel=\"nofollow noreferrer\">Google Closure Library</a>:</p>\n\n<pre><code>goog.require('goog.object');\nvar a = {'a': 1, 'b': 2};\nvar b = {'b': 3, 'c': 4};\ngoog.object.extend(a, b);\n// Now object a == {'a': 1, 'b': 3, 'c': 4};\n</code></pre>\n\n<p><a href=\"http://closure-library.googlecode.com/svn/docs/closure_goog_array_array.js.html\" rel=\"nofollow noreferrer\">Similar helper function exists for array</a>:</p>\n\n<pre><code>var a = [1, 2];\nvar b = [3, 4];\ngoog.array.extend(a, b); // Extends array 'a'\ngoog.array.concat(a, b); // Returns concatenation of array 'a' and 'b'\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9627412,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/9627412",
    "title": null,
    "body": "<p>My solution:</p>\n\n<pre><code>//Adds a new table row\n$.fn.addNewRow = function (rowId) {\n    $(this).find('tbody').append('&lt;tr id=\"' + rowId + '\"&gt; &lt;/tr&gt;');\n};\n</code></pre>\n\n<p><strong>usage:</strong></p>\n\n<pre><code>$('#Table').addNewRow(id1);\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 441914,
      "name": "Ricky G",
      "reputation": 1821
    }
  },
  {
    "soID": 8281605,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/8281605",
    "title": null,
    "body": "<p>Just to add on information from another popular framework, Google Closures, see their <a href=\"http://closure-library.googlecode.com/svn/docs/closure_goog_dom_classes.js.html\">dom/classes</a> class:</p>\n\n<pre><code>goog.dom.classes.add(element, var_args)\n\ngoog.dom.classes.addRemove(element, classesToRemove, classesToAdd)\n\ngoog.dom.classes.remove(element, var_args)\n</code></pre>\n\n<p>One option for selecting the element is using <a href=\"http://closure-library.googlecode.com/svn/docs/closure_third_party_closure_goog_dojo_dom_query.js.html\">goog.dom.query</a> with a CSS3 selector:</p>\n\n<pre><code>var myElement = goog.dom.query(\"#MyElement\")[0];\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 449161,
      "name": "Ben Flynn",
      "reputation": 10754
    }
  },
  {
    "soID": 39607180,
    "parentID": 22343224,
    "url": "https://stackoverflow.com/q/39607180",
    "title": null,
    "body": "<p><a href=\"https://docs.npmjs.com/misc/semver#caret-ranges-123-025-004\" rel=\"nofollow\">^ : Accept version changes less than Left Most Non-Zero Version (1st no-zero version digit from left side).</a></p>\n\n<p><a href=\"https://docs.npmjs.com/misc/semver#tilde-ranges-123-12-1\" rel=\"nofollow\">~ : Accept version changes less than 2nd Left Most Non-Zero Version (2nd no-zero version digit from left side).\n      OR If there is no 2nd Left most Non-Zero version then Accept version changes less than Left most version.</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 452708,
      "name": "Abhijeet",
      "reputation": 2995
    }
  },
  {
    "soID": 10139399,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/10139399",
    "title": null,
    "body": "\n\n<pre><code>&lt;table id=myTable&gt;\n    &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\n    &lt;style=\"height=0px;\" tfoot&gt;&lt;/tfoot&gt;\n&lt;/table&gt;\n</code></pre>\n\n\n\n<p>You can cache the footer variable and reduce access to DOM (Note: may be it will be better to use a fake row instead of footer).</p>\n\n<pre><code>var footer = $(\"#mytable tfoot\")\nfooter.before(\"&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\")\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 454137,
      "name": "Pavel Shkleinik",
      "reputation": 1757
    }
  },
  {
    "soID": 33384795,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/33384795",
    "title": null,
    "body": "<p>Here's a toggleClass to toggle/add/remove a class on an element:</p>\n\n<pre><code>// If newState is provided add/remove theClass accordingly, otherwise toggle theClass\nfunction toggleClass(elem, theClass, newState) {\n    var matchRegExp = new RegExp('(?:^|\\\\s)' + theClass + '(?!\\\\S)', 'g');\n    var add=(arguments.length&gt;2 ? newState : (elem.className.match(matchRegExp) == null));\n\n    elem.className=elem.className.replace(matchRegExp, ''); // clear all\n    if (add) elem.className += ' ' + theClass;\n}\n</code></pre>\n\n<p>see <a href=\"https://jsfiddle.net/dLuhp9se/\" rel=\"nofollow noreferrer\">jsfiddle</a></p>\n\n<p>also see my answer <a href=\"https://stackoverflow.com/a/42941303/460084\">here</a> for creating a new class dynamically</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 460084,
      "name": "kofifus",
      "reputation": 1682
    }
  },
  {
    "soID": 9199271,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/9199271",
    "title": null,
    "body": "<p>In <a href=\"http://en.wikipedia.org/wiki/Yahoo!_UI_Library\" rel=\"nofollow\">YUI</a> <a href=\"http://yuilibrary.com/yui/docs/yui/yui-merge.html\" rel=\"nofollow\"><code>Y.merge</code></a> should get the job done:</p>\n\n<pre><code>Y.merge(obj1, obj2, obj3....) \n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 5874679,
    "parentID": 5874652,
    "url": "https://stackoverflow.com/q/5874679",
    "title": null,
    "body": "<p>All is in the doc :</p>\n\n<blockquote>\n  <p>The difference between attributes and properties can be important in specific situations. Before jQuery 1.6, the .attr() method sometimes took property values into account when retrieving some attributes, which could cause inconsistent behavior. As of jQuery 1.6, the .prop() method provides a way to explicitly retrieve property values, while .attr() only retrieves attributes.</p>\n</blockquote>\n\n<p>So use prop !</p>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 466227,
      "name": "Arnaud F.",
      "reputation": 4996
    }
  },
  {
    "soID": 39515645,
    "parentID": 5404839,
    "url": "https://stackoverflow.com/q/39515645",
    "title": null,
    "body": "<p>I found</p>\n\n<pre><code>window.location.href = \"\";\n</code></pre>\n\n<p>or</p>\n\n<pre><code>window.location.href = null;\n</code></pre>\n\n<p>also makes a page refresh.</p>\n\n<p>This makes it very much easier to reload the page removing any hash.\nThis is very nice when I am using AngularJS in the iOS simulator, so that I don't have to rerun the app.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 472043,
      "name": "Mujah Maskey",
      "reputation": 5705
    }
  },
  {
    "soID": 23569649,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/23569649",
    "title": null,
    "body": "<p>Closest I can get:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(function(){\r\n  $('span').width($('span').width()/2);\r\n  $('span:nth-child(2)').css('text-indent', -$('span').width());\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>body{\r\n  font-family: arial;\r\n}\r\nspan{\r\n  display: inline-block;\r\n  overflow: hidden;\r\n}\r\nspan:nth-child(2){\r\n  color: red;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;span&gt;X&lt;/span&gt;&lt;span&gt;X&lt;/span&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Demo: <a href=\"http://jsfiddle.net/9wxfY/2/\" rel=\"noreferrer\">http://jsfiddle.net/9wxfY/2/</a></p>\n\n<p>Heres a version that just uses one span: <a href=\"http://jsfiddle.net/9wxfY/4/\" rel=\"noreferrer\">http://jsfiddle.net/9wxfY/4/</a></p>\n",
    "score": 43,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 475125,
      "name": "Prisoner",
      "reputation": 20028
    }
  },
  {
    "soID": 7572855,
    "parentID": 5874652,
    "url": "https://stackoverflow.com/q/7572855",
    "title": null,
    "body": "<p>A property is in the DOM; an attribute is in the HTML that is parsed into the DOM.</p>\n\n<h3>Further detail</h3>\n\n<p>If you change an attribute, the change will be reflected in the DOM (sometimes with a different name).  </p>\n\n<p>Example: Changing the <code>class</code> attribute of a tag will change the <code>className</code> property of that tag in the DOM.\nIf you have no attribute on a tag, you still have the corresponding DOM property with an empty or a default value.  </p>\n\n<p>Example: While your tag has no <code>class</code> attribute, the DOM property <code>className</code> does exist with a empty string value.</p>\n\n<p><strong>edit</strong></p>\n\n<p>If you change the one, the other will be changed by a controller, and vice versa.\nThis controller is not in jQuery, but in the browser's native code.</p>\n",
    "score": 208,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 476951,
      "name": "HerrSerker",
      "reputation": 15425
    }
  },
  {
    "soID": 5522973,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/5522973",
    "title": null,
    "body": "<p>I extended David Coallier's method:</p>\n\n<ul>\n<li>Added the possibility to merge multiple objects</li>\n<li>Supports deep objects</li>\n<li>override parameter (that's detected if the last parameter is a boolean)</li>\n</ul>\n\n<p>If override is false, no property gets overridden but new properties will be added.</p>\n\n<p>Usage:\nobj.merge(merges... [, override]);</p>\n\n<p>Here is my code:</p>\n\n<pre><code>Object.defineProperty(Object.prototype, \"merge\", {\n    enumerable: false,\n    value: function () {\n        var override = true,\n            dest = this,\n            len = arguments.length,\n            props, merge, i, from;\n\n        if (typeof(arguments[arguments.length - 1]) === \"boolean\") {\n            override = arguments[arguments.length - 1];\n            len = arguments.length - 1;\n        }\n\n        for (i = 0; i &lt; len; i++) {\n            from = arguments[i];\n            if (from != null) {\n                Object.getOwnPropertyNames(from).forEach(function (name) {\n                    var descriptor;\n\n                    // nesting\n                    if ((typeof(dest[name]) === \"object\" || typeof(dest[name]) === \"undefined\")\n                            &amp;&amp; typeof(from[name]) === \"object\") {\n\n                        // ensure proper types (Array rsp Object)\n                        if (typeof(dest[name]) === \"undefined\") {\n                            dest[name] = Array.isArray(from[name]) ? [] : {};\n                        }\n                        if (override) {\n                            if (!Array.isArray(dest[name]) &amp;&amp; Array.isArray(from[name])) {\n                                dest[name] = [];\n                            }\n                            else if (Array.isArray(dest[name]) &amp;&amp; !Array.isArray(from[name])) {\n                                dest[name] = {};\n                            }\n                        }\n                        dest[name].merge(from[name], override);\n                    } \n\n                    // flat properties\n                    else if ((name in dest &amp;&amp; override) || !(name in dest)) {\n                        descriptor = Object.getOwnPropertyDescriptor(from, name);\n                        if (descriptor.configurable) {\n                            Object.defineProperty(dest, name, descriptor);\n                        }\n                    }\n                });\n            }\n        }\n        return this;\n    }\n});\n</code></pre>\n\n<p>Examples and TestCases:</p>\n\n<pre><code>function clone (obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\nvar obj = {\n    name : \"trick\",\n    value : \"value\"\n};\n\nvar mergeObj = {\n    name : \"truck\",\n    value2 : \"value2\"\n};\n\nvar mergeObj2 = {\n    name : \"track\",\n    value : \"mergeObj2\",\n    value2 : \"value2-mergeObj2\",\n    value3 : \"value3\"\n};\n\nassertTrue(\"Standard\", clone(obj).merge(mergeObj).equals({\n    name : \"truck\",\n    value : \"value\",\n    value2 : \"value2\"\n}));\n\nassertTrue(\"Standard no Override\", clone(obj).merge(mergeObj, false).equals({\n    name : \"trick\",\n    value : \"value\",\n    value2 : \"value2\"\n}));\n\nassertTrue(\"Multiple\", clone(obj).merge(mergeObj, mergeObj2).equals({\n    name : \"track\",\n    value : \"mergeObj2\",\n    value2 : \"value2-mergeObj2\",\n    value3 : \"value3\"\n}));\n\nassertTrue(\"Multiple no Override\", clone(obj).merge(mergeObj, mergeObj2, false).equals({\n    name : \"trick\",\n    value : \"value\",\n    value2 : \"value2\",\n    value3 : \"value3\"\n}));\n\nvar deep = {\n    first : {\n        name : \"trick\",\n        val : \"value\"\n    },\n    second : {\n        foo : \"bar\"\n    }\n};\n\nvar deepMerge = {\n    first : {\n        name : \"track\",\n        anotherVal : \"wohoo\"\n    },\n    second : {\n        foo : \"baz\",\n        bar : \"bam\"\n    },\n    v : \"on first layer\"\n};\n\nassertTrue(\"Deep merges\", clone(deep).merge(deepMerge).equals({\n    first : {\n        name : \"track\",\n        val : \"value\",\n        anotherVal : \"wohoo\"\n    },\n    second : {\n        foo : \"baz\",\n        bar : \"bam\"\n    },\n    v : \"on first layer\"\n}));\n\nassertTrue(\"Deep merges no override\", clone(deep).merge(deepMerge, false).equals({\n    first : {\n        name : \"trick\",\n        val : \"value\",\n        anotherVal : \"wohoo\"\n    },\n    second : {\n        foo : \"bar\",\n        bar : \"bam\"\n    },\n    v : \"on first layer\"\n}));\n\nvar obj1 = {a: 1, b: \"hello\"};\nobj1.merge({c: 3});\nassertTrue(obj1.equals({a: 1, b: \"hello\", c: 3}));\n\nobj1.merge({a: 2, b: \"mom\", d: \"new property\"}, false);\nassertTrue(obj1.equals({a: 1, b: \"hello\", c: 3, d: \"new property\"}));\n\nvar obj2 = {};\nobj2.merge({a: 1}, {b: 2}, {a: 3});\nassertTrue(obj2.equals({a: 3, b: 2}));\n\nvar a = [];\nvar b = [1, [2, 3], 4];\na.merge(b);\nassertEquals(1, a[0]);\nassertEquals([2, 3], a[1]);\nassertEquals(4, a[2]);\n\n\nvar o1 = {};\nvar o2 = {a: 1, b: {c: 2}};\nvar o3 = {d: 3};\no1.merge(o2, o3);\nassertTrue(o1.equals({a: 1, b: {c: 2}, d: 3}));\no1.b.c = 99;\nassertTrue(o2.equals({a: 1, b: {c: 2}}));\n\n// checking types with arrays and objects\nvar bo;\na = [];\nbo = [1, {0:2, 1:3}, 4];\nb = [1, [2, 3], 4];\n\na.merge(b);\nassertTrue(\"Array stays Array?\", Array.isArray(a[1]));\n\na = [];\na.merge(bo);\nassertTrue(\"Object stays Object?\", !Array.isArray(a[1]));\n\na = [];\na.merge(b);\na.merge(bo);\nassertTrue(\"Object overrides Array\", !Array.isArray(a[1]));\n\na = [];\na.merge(b);\na.merge(bo, false);\nassertTrue(\"Object does not override Array\", Array.isArray(a[1]));\n\na = [];\na.merge(bo);\na.merge(b);\nassertTrue(\"Array overrides Object\", Array.isArray(a[1]));\n\na = [];\na.merge(bo);\na.merge(b, false);\nassertTrue(\"Array does not override Object\", !Array.isArray(a[1]));\n</code></pre>\n\n<p>My equals method can be found here: <a href=\"https://stackoverflow.com/questions/1068834/object-comparison-in-javascript/5522917#5522917\">Object comparison in JavaScript</a></p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6787677,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/6787677",
    "title": null,
    "body": "<p>In <a href=\"http://en.wikipedia.org/wiki/Ext_JS\" rel=\"nofollow noreferrer\">Ext&nbsp;JS</a> 4 it can be done as follows:</p>\n\n<pre><code>var mergedObject = Ext.Object.merge(object1, object2)\n\n// Or shorter:\nvar mergedObject2 = Ext.merge(object1, object2)\n</code></pre>\n\n<p>See <em><a href=\"http://docs.sencha.com/ext-js/4-0/#/api/Ext.Object-method-merge\" rel=\"nofollow noreferrer\">merge( object ) : Object</a></em>.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 6567180,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/6567180",
    "title": null,
    "body": "<h1>Optimist (node-optimist)</h1>\n\n<p>Check out <a href=\"https://github.com/substack/node-optimist\" rel=\"noreferrer\">optimist library</a>, it is much better than parsing command line options by hand.</p>\n",
    "score": 105,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 496825,
      "name": "gor",
      "reputation": 8432
    }
  },
  {
    "soID": 9329586,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/9329586",
    "title": null,
    "body": "<p>Some <a href=\"http://en.wikipedia.org/wiki/C_%28programming_language%29\" rel=\"noreferrer\">C</a>-style languages use <code>foreach</code> to loop through enumerations. In JavaScript this is done with the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...in\" rel=\"noreferrer\"><code>for..in</code> loop structure</a>:</p>\n\n<pre><code>var index,\n    value;\nfor (index in obj) {\n    value = obj[index];\n}\n</code></pre>\n\n<p>There is a catch. <code>for..in</code> will loop through each of the object's enumerable members, and the members on its prototype. To avoid reading values that are inherited through the object's prototype, simply check if the property belongs to the object:</p>\n\n<pre><code>for (i in obj) {\n    if (obj.hasOwnProperty(i)) {\n        //do stuff\n    }\n}\n</code></pre>\n\n<p>Additionally, <a href=\"https://en.wikipedia.org/wiki/ECMAScript#ECMAScript.2C_5th_Edition\" rel=\"noreferrer\">ECMAScript 5</a> has added a <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"noreferrer\"><code>forEach</code></a> method to <code>Array.prototype</code> which can be used to enumerate over an array using a calback (the polyfill is in the docs so you can still use it for older browsers):</p>\n\n<pre><code>arr.forEach(function (val, index, theArray) {\n    //do stuff\n});\n</code></pre>\n\n<p>It's important to note that <code>Array.prototype.forEach</code> doesn't break when the callback returns <code>false</code>. <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"noreferrer\">jQuery</a> and <a href=\"http://en.wikipedia.org/wiki/Underscore.js\" rel=\"noreferrer\">Underscore.js</a> provide their own variations on <code>each</code> to provide loops that can be short-circuited.</p>\n",
    "score": 61,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 497418,
      "name": "zzzzBov",
      "reputation": 111441
    }
  },
  {
    "soID": 4139190,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/4139190",
    "title": null,
    "body": "<p>The best way for you to do this is to add a proper property that is non-enumerable using Object.defineProperty. </p>\n\n<p>This way you will still be able to iterate over your objects properties without having the newly created \"extend\" that you would get if you were to create the property with Object.prototype.extend.</p>\n\n<p>Hopefully this helps:</p>\n\n<pre>\nObject.defineProperty(Object.prototype, \"extend\", {\n    enumerable: false,\n    value: function(from) {\n        var props = Object.getOwnPropertyNames(from);\n        var dest = this;\n        props.forEach(function(name) {\n            if (name in dest) {\n                var destination = Object.getOwnPropertyDescriptor(from, name);\n                Object.defineProperty(dest, name, destination);\n            }\n        });\n        return this;\n    }\n});\n</pre>\n\n<p>Once you have that working, you can do:</p>\n\n<pre>\nvar obj = {\n    name: 'stack',\n    finish: 'overflow'\n}\nvar replacement = {\n    name: 'stock'\n};\n\nobj.extend(replacement);\n</pre>\n\n<p>I just wrote a blog post about it here: <a href=\"http://onemoredigit.com/post/1527191998/extending-objects-in-node-js\" rel=\"noreferrer\">http://onemoredigit.com/post/1527191998/extending-objects-in-node-js</a></p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 43795121,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/43795121",
    "title": null,
    "body": "<p>Remove element at index i , without mutating the original array. </p>\n\n<pre><code>/**\n* removeElement\n* @param {Array} array\n* @param {Number} index\n*/\nfunction removeElement(array, index) {\n   return Array.from(array).splice(index, 1);\n}\n\n// another way is \nfunction removeElement(array, index) {\n   return array.slice(0).splice(index, 1);\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 505002,
      "name": "alejandro",
      "reputation": 1763
    }
  },
  {
    "soID": 45141441,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/45141441",
    "title": null,
    "body": "<p><strong>COUNTER BEING A PRIMITIVE</strong></p>\n\n<p>Lets define callback functions as follows:</p>\n\n<pre><code>// ****************************\n// COUNTER BEING A PRIMITIVE\n// ****************************\nfunction test1() {\n    for (var i=0; i&lt;2; i++) {\n        setTimeout(function() {\n            console.log(i);\n        });\n    }\n}\ntest1();\n// 2\n// 2\n</code></pre>\n\n<p>After timeout completes it will print 2 for both. This is because callback function accesses value based on lexical scope, where it was function was defined.</p>\n\n<p>To pass and preserve the value while callback was defined, we can create a closure, to preserve value before the callback is invoked. This can be done as follows:</p>\n\n<pre><code>function test2() {\n    function sendRequest(i) {\n        setTimeout(function() {\n            console.log(i);\n        });\n    }\n\n    for (var i = 0; i &lt; 2; i++) {\n        sendRequest(i);\n    }\n}\ntest2();\n// 1\n// 2\n</code></pre>\n\n<p>Now whats special about this is \"The primitives are passed by value and copied. Thus when the closure is defined, they keep the value from the previous loop.\"</p>\n\n<p><strong>COUNTER BEING AN OBJECT</strong></p>\n\n<p>Since closures have access to parent function variables via reference, this approach would differ from that for primitives.</p>\n\n<pre><code>// ****************************\n// COUNTER BEING AN OBJECT\n// ****************************\nfunction test3() {\n    var index = { i: 0 };\n    for (index.i=0; index.i&lt;2; index.i++) {\n        setTimeout(function() {\n            console.log('test3: ' + index.i);\n        });\n    }\n}\ntest3();\n// 2\n// 2\n</code></pre>\n\n<p>So, even if a closure is created for the variable being passed as an object, value of loop index will not be preserved. This is to show that values on object are not copied whereas they are accessed via reference.</p>\n\n<pre><code>function test4() {\n    var index = { i: 0 };\n    function sendRequest(index, i) {\n        setTimeout(function() {\n            console.log('index: ' + index);\n            console.log('i: ' + i);\n            console.log(index[i]);\n        });\n    }\n\n    for (index.i=0; index.i&lt;2; index.i++) {\n        sendRequest(index, index.i);\n    }\n}\ntest4();\n// index: { i: 2}\n// 0\n// undefined\n\n// index: { i: 2}\n// 1\n// undefined\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 507136,
      "name": "jsbisht",
      "reputation": 2555
    }
  },
  {
    "soID": 6160317,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/6160317",
    "title": null,
    "body": "<p>In one of my old projects that did not use jQuery, I built the following functions for adding, removing, and checking if element has class:</p>\n\n<pre><code>function hasClass(ele, cls) {\n    return ele.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n}\nfunction addClass(ele, cls) {\n    if (!hasClass(ele, cls)) ele.className += \" \" + cls;\n}\nfunction removeClass(ele, cls) {\n    if (hasClass(ele, cls)) {\n        var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n        ele.className = ele.className.replace(reg, ' ');\n    }\n}\n</code></pre>\n\n<p>So, for example, if I want onclick to add some class the the button I can use this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function changeClass(btn, cls) {\n        if(!hasClass(btn, cls)) {\n            addClass(btn, cls);\n        }\n    }\n&lt;/script&gt;\n...\n&lt;button onclick=\"changeClass(this, \"someClass\")\"&gt;My Button&lt;/button&gt;\n</code></pre>\n\n<p>By now for sure it would just better to use jQuery.</p>\n",
    "score": 93,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 508601,
      "name": "Andrew Orsich",
      "reputation": 38414
    }
  },
  {
    "soID": 8866948,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/8866948",
    "title": null,
    "body": "<p>To make it short:</p>\n\n<p>Node.js is well suited for applications that have a lot of concurrent connections and each request only needs very few CPU cycles, because the event loop (with all the other clients) is blocked during execution of a function.</p>\n\n<p>A good article about the event loop in Node.js is <a href=\"http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/\" rel=\"noreferrer\"><em>Mixu's tech blog: Understanding the node.js event loop</em></a>.</p>\n",
    "score": 208,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 511300,
      "name": "stewe",
      "reputation": 27658
    }
  },
  {
    "soID": 8122936,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/8122936",
    "title": null,
    "body": "<p>There's no need for jQuery really. With plain JavaScript it's easier and semantically correct to check for:</p>\n\n<pre><code>if(document.getElementById(\"myElement\")) {\n    //Do something...\n}\n</code></pre>\n\n<p>If for any reason you don't want to put an id to the element, you can still use any other JavaScript method designed to access the DOM.</p>\n\n<p>jQuery is really cool, but don't let pure JavaScript fall into oblivion...</p>\n",
    "score": 35,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 527050,
      "name": "amypellegrini",
      "reputation": 769
    }
  },
  {
    "soID": 4457713,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/4457713",
    "title": null,
    "body": "<p>I'm using this way when there is not any row in the table, as well as, each row is quite complicated.</p>\n\n<p>style.css:</p>\n\n<pre><code>...\n#templateRow {\n  display:none;\n}\n...\n</code></pre>\n\n<p>xxx.html</p>\n\n<pre><code>...\n&lt;tr id=\"templateRow\"&gt; ... &lt;/tr&gt;\n...\n\n$(\"#templateRow\").clone().removeAttr(\"id\").appendTo( $(\"#templateRow\").parent() );\n\n...\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 544311,
      "name": "Dominic",
      "reputation": 141
    }
  },
  {
    "soID": 5767335,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/5767335",
    "title": null,
    "body": "<p>I don't know how you are expecting <code>array.remove(int)</code> to behave. There are three possibilities I can think of that you might be wanting.</p>\n\n<p>To remove an element of an array at an index <code>i</code>:</p>\n\n<pre><code>array.splice(i, 1);\n</code></pre>\n\n<p>If you want to remove every element with value <code>number</code> from the array:</p>\n\n<pre><code>for(var i = array.length - 1; i &gt;= 0; i--) {\n    if(array[i] === number) {\n       array.splice(i, 1);\n    }\n}\n</code></pre>\n\n<p>If you just want to make the element at index <code>i</code> no longer exist, but you don't want the indexes of the other elements to change:</p>\n\n<pre><code>delete array[i];\n</code></pre>\n",
    "score": 650,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 546661,
      "name": "Peter Olson",
      "reputation": 62488
    }
  },
  {
    "soID": 12669852,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/12669852",
    "title": null,
    "body": "<p>This merges <code>obj</code> into a \"default\" <code>def</code>. <code>obj</code> has precedence for anything that exists in both, since <code>obj</code> is copied into <code>def</code>. Note also that this is recursive.</p>\n\n<pre><code>function mergeObjs(def, obj) {\n    if (typeof obj == 'undefined') {\n        return def;\n    } else if (typeof def == 'undefined') {\n        return obj;\n    }\n    for (var i in obj) {\n        if (obj[i] != null &amp;&amp; obj[i].constructor == Object) {\n            def[i] = mergeObjs(def[i], obj[i]);\n        } else {\n            def[i] = obj[i];\n        }\n    }\n    return def;\n}\n\na = {x : {y : [123]}}\nb = {x : {z : 123}}\nconsole.log(mergeObjs(a, b));\n// {x: {y : [123], z : 123}}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 4907863,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/4907863",
    "title": null,
    "body": "<p>I think that you can't control this. If the user had setup their browser to open links in a new window, you can't force this to open links in a new tab.</p>\n\n<p><a href=\"https://stackoverflow.com/questions/726761/javascript-open-in-a-new-window-not-tab\">JavaScript open in a new window, not tab</a></p>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 552669,
      "name": "Fran Verona",
      "reputation": 3923
    }
  },
  {
    "soID": 10762653,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/10762653",
    "title": null,
    "body": "<p>It's probably a good idea to manage your configuration in a centralized manner using something like <strong>nconf</strong> <a href=\"https://github.com/flatiron/nconf\" rel=\"noreferrer\">https://github.com/flatiron/nconf</a></p>\n\n<p>It helps you work with configuration files, environment variables, command-line arguments.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 555899,
      "name": "250R",
      "reputation": 17260
    }
  },
  {
    "soID": 10458392,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/10458392",
    "title": null,
    "body": "<p>I would use jQuery and write something like this:</p>\n\n<pre><code>jQuery(function($) {\n    $(\"#some-element\").click(function() {\n        $(this).toggleClass(\"clicked\");\n    });\n});\n</code></pre>\n\n<p>This code adds a function to be called when an element of the id <strong>some-element</strong> is clicked. The function appends <strong>clicked</strong> to the element's class attribute if it's not already part of it, and removes it if it's there.</p>\n\n<p>Yes you do need to add a reference to the jQuery library in your page to use this code, but at least you can feel confident the most functions in the library would work on pretty much all the modern browsers, and it will save you time implementing your own code to do the same.</p>\n\n<p>Thanks</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 557761,
      "name": "shingokko",
      "reputation": 336
    }
  },
  {
    "soID": 5545403,
    "parentID": 1470488,
    "url": "https://stackoverflow.com/q/5545403",
    "title": null,
    "body": "<p>Using <code>var</code> is always a good idea to prevent variables from cluttering the global scope and variables from conflicting with each other, causing unwanted overwriting.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 558592,
      "name": "mc10",
      "reputation": 7818
    }
  },
  {
    "soID": 10035967,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/10035967",
    "title": null,
    "body": "<p>I had a case where I wanted to see if an object exists inside of another so I added something to the first answer to check for a selector inside the selector..</p>\n\n<pre><code>// Checks if an object exists.\n// Usage:\n//\n//     $(selector).exists()\n//\n// Or:\n// \n//     $(selector).exists(anotherSelector);\njQuery.fn.exists = function(selector) {\n    return selector ? this.find(selector).length : this.length;\n};\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 558672,
      "name": "jcreamer898",
      "reputation": 5740
    }
  },
  {
    "soID": 44324292,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/44324292",
    "title": null,
    "body": "<pre><code>function isEmpty(val){\n    return !val;\n}\n</code></pre>\n\n<p>but this solution is over-engineered, if you dont'want to modify the function later for busines-model needings, then is cleaner to use it directly in code:</p>\n\n<pre><code>if(!val)...\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 571410,
      "name": "Luke",
      "reputation": 1058
    }
  },
  {
    "soID": 26141587,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/26141587",
    "title": null,
    "body": "<p>If you are interested in this, then Lucas Bebber's Glitch is a very similar and super cool effect:</p>\n\n<p><img src=\"https://i.stack.imgur.com/63fkI.gif\" alt=\"enter image description here\"></p>\n\n<p>Created using a simple SASS Mixin such as</p>\n\n<pre><code>.example-one {\n  font-size: 100px;\n  @include textGlitch(\"example-one\", 17, white, black, red, blue, 450, 115);\n}\n</code></pre>\n\n<p>More details at <a href=\"http://css-tricks.com/glitch-effect-text-images-svg/\" rel=\"noreferrer\">Chris Coyer's CSS Tricks</a> and <a href=\"http://codepen.io/lbebber/pen/ypgql\" rel=\"noreferrer\">Lucas Bebber's Codepen page</a></p>\n",
    "score": 43,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 581414,
      "name": "Ruskin",
      "reputation": 3040
    }
  },
  {
    "soID": 4764435,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/4764435",
    "title": null,
    "body": "<p>For the best solution posted here, if there's a nested table on the last row, the new row will be added to the nested table instead of the main table. A quick solution (considering tables with/without tbody and tables with nested tables):</p>\n\n<pre><code>function add_new_row(table, rowcontent) {\n    if ($(table).length &gt; 0) {\n        if ($(table + ' &gt; tbody').length == 0) $(table).append('&lt;tbody /&gt;');\n        ($(table + ' &gt; tr').length &gt; 0) ? $(table).children('tbody:last').children('tr:last').append(rowcontent): $(table).children('tbody:last').append(rowcontent);\n    }\n}\n</code></pre>\n\n<p>Usage example:</p>\n\n<pre><code>add_new_row('#myTable','&lt;tr&gt;&lt;td&gt;my new row&lt;/td&gt;&lt;/tr&gt;');\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 585079,
      "name": "Oshua",
      "reputation": 101
    }
  },
  {
    "soID": 7487686,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/7487686",
    "title": null,
    "body": "<p>Using pure JavaScript code:</p>\n\n<pre><code>function hasClass(ele, cls) {\n    return ele.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n}\n\nfunction addClass(ele, cls) {\n    if (!this.hasClass(ele, cls)) ele.className += \" \" + cls;\n}\n\nfunction removeClass(ele, cls) {\n    if (hasClass(ele, cls)) {\n        var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n        ele.className = ele.className.replace(reg, ' ');\n    }\n}\n\nfunction replaceClass(ele, oldClass, newClass){\n    if(hasClass(ele, oldClass)){\n        removeClass(ele, oldClass);\n        addClass(ele, newClass);\n    }\n    return;\n}\n\nfunction toggleClass(ele, cls1, cls2){\n    if(hasClass(ele, cls1)){\n        replaceClass(ele, cls1, cls2);\n    }else if(hasClass(ele, cls2)){\n        replaceClass(ele, cls2, cls1);\n    }else{\n        addClass(ele, cls1);\n    }\n}\n</code></pre>\n",
    "score": 40,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 588005,
      "name": "PseudoNinja",
      "reputation": 2033
    }
  },
  {
    "soID": 33067594,
    "parentID": 22343224,
    "url": "https://stackoverflow.com/q/33067594",
    "title": null,
    "body": "<h2>Semver</h2>\n\n<pre><code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;-beta.&lt;beta&gt; == 1.2.3-beta.2\n</code></pre>\n\n<ul>\n<li>Use <a href=\"https://semver.npmjs.com/\" rel=\"nofollow noreferrer\">npm semver calculator</a> for testing. (Although the explanations for ^ (include everything greater than a particular version in the same major range) and ~ (include everything greater than a particular version in the same minor range) aren't a 100% correct, the calculator seems to work fine)</li>\n<li>Alternatively, use <a href=\"http://jubianchi.github.io/semver-check/\" rel=\"nofollow noreferrer\">SemVer Check</a> instead, which doesn't require you to pick a package and also offers explanations.</li>\n</ul>\n\n<h2>Pin version or allow updates</h2>\n\n<p>You can pin version like <code>1.2.3</code> or allow updates at the:</p>\n\n<ul>\n<li>second non-zero level from the left by using <code>^</code>: <code>^0.2.3</code> means <code>0.2.3 &lt;= v &lt; 0.3</code>.</li>\n<li><strike> last non-zero level from the right by using <code>~</code> (go left until you find non-zero, if cannot - set sublevel to 0): <code>~0</code> means <code>0.0 &lt;= v &lt; 1</code>.</strike></li>\n<li>~ Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not. <code>~1.2.4</code> means <code>1.2.4 &lt;= v &lt; 1.3.0</code>. <code>~1.2</code> means <code>1.2.0 &lt;= v &lt; 1.3.0</code>. <code>~1</code> means <code>1.0.0 &lt;= v &lt; 2.0.0</code></li>\n<li>right-most level by ommiting level: <code>0.2</code> means <code>0.2 &lt;= v &lt; 1</code>. Differs from <code>~</code> because:\n\n<ul>\n<li>starting ommited level version is always 0</li>\n<li>you can set starting major version without specifing sublevels.</li>\n</ul></li>\n</ul>\n\n<h2>All (hopefully) possibilities</h2>\n\n<p><strong>Set starting major-level and allow updates upward</strong></p>\n\n<pre><code>*  or \"\" (empty string)   any version\n1                         v &gt;= 1\n</code></pre>\n\n<p><strong>Freeze major-level</strong></p>\n\n<pre><code>~0 (0)            0.0 &lt;= v &lt; 1\n0.2               0.2 &lt;= v &lt; 1          // Can't do that with ^ or ~ \n~1 (1, ^1)        1 &lt;= v &lt; 2\n^1.2              1.2 &lt;= v &lt; 2\n^1.2.3            1.2.3 &lt;= v &lt; 2\n^1.2.3-beta.4     1.2.3-beta.4 &lt;= v &lt; 2\n</code></pre>\n\n<p><strong>Freeze minor-level</strong></p>\n\n<pre><code>^0.0 (0.0)        0 &lt;= v &lt; 0.1\n~0.2              0.2 &lt;= v &lt; 0.3\n~1.2              1.2 &lt;= v &lt; 1.3\n~0.2.3 (^0.2.3)   0.2.3 &lt;= v &lt; 0.3\n~1.2.3            1.2.3 &lt;= v &lt; 1.3\n</code></pre>\n\n<p><strong>Freeze patch-level</strong></p>\n\n<pre><code>~1.2.3-beta.4     1.2.3-beta.4 &lt;= v &lt; 1.2.4 (only beta or pr allowed)\n^0.0.3-beta       0.0.3-beta.0 &lt;= v &lt; 0.0.4 or 0.0.3-pr.0 &lt;= v &lt; 0.0.4 (only beta or pr allowed)\n^0.0.3-beta.4     0.0.3-beta.4 &lt;= v &lt; 0.0.4 or 0.0.3-pr.4 &lt;= v &lt; 0.0.4 (only beta or pr allowed)\n</code></pre>\n\n<p><strong>Disallow updates</strong></p>\n\n<pre><code>1.2.3             1.2.3\n^0.0.3 (0.0.3)    0.0.3\n</code></pre>\n\n<p><strong>Notice</strong>: Missing major, minor, patch or specifying <code>beta</code> without number, is the same as <code>any</code> for the missing level.</p>\n\n<p><strong>Notice</strong>: When you install pakckage wich has <code>0</code> as major level, update will only install new beta/pr level version! That's because <code>npm</code> sets <code>^</code> as default in <code>package.json</code> and when installed version is like <code>0.1.3</code>, it freezes all major/minor/patch levels.</p>\n\n<ul>\n<li><a href=\"https://docs.npmjs.com/misc/semver\" rel=\"nofollow noreferrer\">https://docs.npmjs.com/misc/semver</a></li>\n<li><a href=\"https://docs.npmjs.com/files/package.json#dependencies\" rel=\"nofollow noreferrer\">https://docs.npmjs.com/files/package.json#dependencies</a></li>\n</ul>\n",
    "score": 39,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 588759,
      "name": "rofrol",
      "reputation": 4317
    }
  },
  {
    "soID": 18539905,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/18539905",
    "title": null,
    "body": "<p>John Resig <a href=\"http://ejohn.org/blog/javascript-array-remove/\" rel=\"noreferrer\">posted a good implementation</a>:</p>\n\n<pre><code>// Array Remove - By John Resig (MIT Licensed)\nArray.prototype.remove = function(from, to) {\n  var rest = this.slice((to || from) + 1 || this.length);\n  this.length = from &lt; 0 ? this.length + from : from;\n  return this.push.apply(this, rest);\n};\n</code></pre>\n\n<p>If you don’t want to extend a global object, you can do something like the following, instead:</p>\n\n<pre><code>// Array Remove - By John Resig (MIT Licensed)\nArray.remove = function(array, from, to) {\n    var rest = array.slice((to || from) + 1 || array.length);\n    array.length = from &lt; 0 ? array.length + from : from;\n    return array.push.apply(array, rest);\n};\n</code></pre>\n\n<p>But the main reason I am posting this is to warn users against the alternative implementation suggested in the comments on that page (Dec 14, 2007):</p>\n\n<pre><code>Array.prototype.remove = function(from, to){\n  this.splice(from, (to=[0,from||1,++to-from][arguments.length])&lt;0?this.length+to:to);\n  return this.length;\n};\n</code></pre>\n\n<p>It seems to work well at first, but through a painful process I discovered it fails when trying to remove the second to last element in an array. For example, if you have a 10-element array and you try to remove the 9th element with this:</p>\n\n<pre><code>myArray.remove(8);\n</code></pre>\n\n<p>You end up with an 8-element array. Don't know why but I confirmed John's original implementation doesn't have this problem.</p>\n",
    "score": 36,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 591281,
      "name": "Roger",
      "reputation": 673
    }
  },
  {
    "soID": 23592382,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/23592382",
    "title": null,
    "body": "<p><a href=\"https://stackoverflow.com/a/1278557/604004\">Neil's answer</a> is by far the best one. However things get messy really fast. My suggestion would be to use variables to store elements and append them to the DOM hierarchy.</p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;table id=\"tableID\"&gt;\n    &lt;tbody&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p><strong>JAVASCRIPT</strong></p>\n\n<pre><code>// Reference to the table body\nvar body = $(\"#tableID\").find('tbody');\n\n// Create a new row element\nvar row = $('&lt;tr&gt;');\n\n// Create a new column element\nvar column = $('&lt;td&gt;');\n\n// Create a new image element\nvar image = $('&lt;img&gt;');\nimage.attr('src', 'img.png');\nimage.text('Image cell');\n\n// Append the image to the column element\ncolumn.append(image);\n// Append the column to the row element\nrow.append(column);\n// Append the row to the table body\nbody.append(row);\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 604004,
      "name": "GabrielOshiro",
      "reputation": 3840
    }
  },
  {
    "soID": 5767357,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/5767357",
    "title": null,
    "body": "<p>First, find the <code>index</code> of the element you want to remove:</p>\n\n<pre><code>var array = [2, 5, 9];\nvar index = array.indexOf(5);\n</code></pre>\n\n<p><em>Note: <a href=\"http://kangax.github.io/compat-table/es5/#test-Array.prototype.indexOf\" rel=\"noreferrer\">browser support for indexOf</a> is limited</em>; it is not supported in Internet&nbsp;Explorer 7 and 8.</p>\n\n<p>Then remove it with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\" rel=\"noreferrer\"><code>splice</code></a>:</p>\n\n<pre><code>if (index &gt; -1) {\n    array.splice(index, 1);\n}\n</code></pre>\n\n<p>The second parameter of <code>splice</code> is the number of elements to remove. Note that <code>splice</code> modifies the array in place and returns a new array containing the elements that have been removed.</p>\n\n<hr>\n\n<p>If you need <code>indexOf</code> in an unsupported browser, try the following <code>polyfill</code>. Find more info about this <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill\" rel=\"noreferrer\"><strong><em><code>polyfill</code> here</em></strong></a>.</p>\n\n<pre><code>Array.prototype.indexOf || (Array.prototype.indexOf = function(d, e) {\n    var a;\n    if (null == this) throw new TypeError('\"this\" is null or not defined');\n    var c = Object(this),\n        b = c.length &gt;&gt;&gt; 0;\n    if (0 === b) return -1;\n    a = +e || 0;\n    Infinity === Math.abs(a) &amp;&amp; (a = 0);\n    if (a &gt;= b) return -1;\n    for (a = Math.max(0 &lt;= a ? a : b - Math.abs(a), 0); a &lt; b;) {\n        if (a in c &amp;&amp; c[a] === d) return a;\n        a++\n    }\n    return -1\n});\n</code></pre>\n",
    "score": 7057,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 613430,
      "name": "Tom Wadley",
      "reputation": 71644
    }
  },
  {
    "soID": 5767332,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/5767332",
    "title": null,
    "body": "<pre><code>Array.prototype.remByVal = function(val) {\n    for (var i = 0; i &lt; this.length; i++) {\n        if (this[i] === val) {\n            this.splice(i, 1);\n            i--;\n        }\n    }\n    return this;\n}\n//Call like\n[1, 2, 3, 4].remByVal(3);\n</code></pre>\n",
    "score": 67,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 617762,
      "name": "Zirak",
      "reputation": 21363
    }
  },
  {
    "soID": 40418629,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/40418629",
    "title": null,
    "body": "<p>You code doesn't work, because what it does is:</p>\n\n<pre><code>Create variable `funcs` and assign it an empty array;  \nLoop from 0 up until it is less than 3 and assign it to variable `i`;\n    Push to variable `funcs` next function:  \n        // Only push (save), but don't execute\n        **Write to console current value of variable `i`;**\n\n// First loop has ended, i = 3;\n\nLoop from 0 up until it is less than 3 and assign it to variable `j`;\n    Call `j`-th function from variable `funcs`:  \n        **Write to console current value of variable `i`;**  \n        // Ask yourself NOW! What is the value of i?\n</code></pre>\n\n<p>Now the question is, what is the value of variable <code>i</code> when the function is called? Because first loop is created with condition <code>i &lt; 3</code>, it stops immediately when the condition is false, so it is <code>i = 3</code>. </p>\n\n<p>You need to understand that, in time when your functions are created, none of their's code is executed, it is only saved for later. And so when they are called later, the interpreter executes them and asks \"what is the current value of i\"?</p>\n\n<p>So, your goal is to first save value of <code>i</code> to function and only after that save the function to <code>funcs</code>. This could be done for example this way:</p>\n\n<pre><code>var funcs = [];\nfor (var i = 0; i &lt; 3; i++) {          // let's create 3 functions\n    funcs[i] = function(x) {            // and store them in funcs\n        console.log(\"My value: \" + x); // each should log its value.\n    }.bind(null, i);\n}\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();                        // and now let's run each one to see\n}\n</code></pre>\n\n<p>This way, each function will have it's own variable 'x' and we set this <code>x</code> to value <code>i</code> in each iteration.</p>\n\n<p>This is only one of multiple ways how to solve this problem.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 619616,
      "name": "Buksy",
      "reputation": 2596
    }
  },
  {
    "soID": 22529246,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/22529246",
    "title": null,
    "body": "<p>I like this version of splice, removing an element by its value using <code>$.inArray</code>:</p>\n\n<pre><code>$(document).ready(function(){\n    var arr = [\"C#\",\"Ruby\",\"PHP\",\"C\",\"C++\"];\n    var itemtoRemove = \"PHP\";\n    arr.splice($.inArray(itemtoRemove, arr),1);\n});\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 626762,
      "name": "mboeckle",
      "reputation": 532
    }
  },
  {
    "soID": 9329601,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/9329601",
    "title": null,
    "body": "<p>If you’re using the <a href=\"http://jquery.com/\" rel=\"noreferrer\"><strong>jQuery</strong></a> library, you can use <a href=\"http://api.jquery.com/jQuery.each/\" rel=\"noreferrer\"><strong>jQuery.each</strong></a>:</p>\n\n\n\n<pre class=\"lang-js prettyprint-override\"><code>$.each(yourArray, function(index, value) {\n  // do your stuff here\n});\n</code></pre>\n\n<p><strong>EDIT :</strong> </p>\n\n<p>As per question, user want code in javascript instead of jquery so the edit is</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var length = yourArray.length;   \nfor (var i = 0; i &lt; length; i++) {\n  // Do something with yourArray[i].\n}\n</code></pre>\n",
    "score": 190,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 627770,
      "name": "Poonam",
      "reputation": 3480
    }
  },
  {
    "soID": 21693931,
    "parentID": 21692646,
    "url": "https://stackoverflow.com/q/21693931",
    "title": null,
    "body": "<p>I'm a security engineer at Facebook and this is my fault. We're testing this for some users to see if it can slow down some attacks where users are tricked into pasting (malicious) JavaScript code into the browser console.</p>\n\n<p>Just to be clear: trying to block hackers client-side is a <a href=\"https://stackoverflow.com/questions/7559409/disable-developer-tools\">bad idea</a> in general;\nthis is to protect against a <a href=\"https://www.facebook.com/photo.php?v=956977232793\" rel=\"noreferrer\">specific social engineering attack</a>.</p>\n\n<p>If you ended up in the test group and are annoyed by this, sorry.\nI tried to make the old opt-out page (now <a href=\"https://www.facebook.com/selfxss\" rel=\"noreferrer\">help page</a>)  as simple as possible while still being scary enough to stop at least <em>some</em> of the victims.</p>\n\n<p>The actual code is pretty similar to <a href=\"https://stackoverflow.com/a/21692733\">@joeldixon66's link</a>; ours is a little more complicated for no good reason.</p>\n\n<p>Chrome wraps all console code in</p>\n\n<pre><code>with ((console &amp;&amp; console._commandLineAPI) || {}) {\n  &lt;code goes here&gt;\n}\n</code></pre>\n\n<p>... so the site redefines <code>console._commandLineAPI</code> to throw:</p>\n\n<pre><code>Object.defineProperty(console, '_commandLineAPI',\n   { get : function() { throw 'Nooo!' } })\n</code></pre>\n\n<p>This is <a href=\"http://escape.alf.nu/20\" rel=\"noreferrer\">not quite enough (try it!)</a>, but that's the\nmain trick.</p>\n\n<hr>\n\n<p>Epilogue: The Chrome team decided that defeating the console from user-side JS was a bug and <a href=\"https://code.google.com/p/chromium/issues/detail?id=349993\" rel=\"noreferrer\">fixed the issue</a>, rendering this technique invalid. Afterwards, additional protection was added to <a href=\"https://code.google.com/p/chromium/issues/detail?id=345205#c21\" rel=\"noreferrer\">protect users from self-xss</a>. </p>\n",
    "score": 2138,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 630946,
      "name": "Alf",
      "reputation": 10328
    }
  },
  {
    "soID": 9166924,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/9166924",
    "title": null,
    "body": "<p>I have found <code>if ($(selector).length) {}</code> to be insufficient. It will silently break your app when <code>selector</code> is an empty object <code>{}</code>.</p>\n\n<pre><code>var $target = $({});        \nconsole.log($target, $target.length);\n\n// Console output:\n// -------------------------------------\n// [▼ Object              ] 1\n//    ► __proto__: Object\n</code></pre>\n\n<p>My only suggestion is to perform an additional check for <code>{}</code>.</p>\n\n<pre><code>if ($.isEmptyObject(selector) || !$(selector).length) {\n    throw new Error('Unable to work with the given selector.');\n}\n</code></pre>\n\n<p>I'm still looking for a better solution though as this one is a bit heavy.</p>\n\n<p>Edit: <strong>WARNING!</strong> This doesn't work in IE when <code>selector</code> is a string.</p>\n\n<pre><code>$.isEmptyObject('hello') // FALSE in Chrome and TRUE in IE\n</code></pre>\n",
    "score": 26,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 632133,
      "name": "Oleg",
      "reputation": 6691
    }
  },
  {
    "soID": 15381347,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/15381347",
    "title": null,
    "body": "<p><a href=\"https://gist.github.com/zykadelic/5069236\">This gist here</a> will solve your problem, and also deletes all occurrences of the argument instead of just 1 (or a specified value).</p>\n\n<pre><code>Array.prototype.destroy = function(obj){\n    // Return null if no objects were found and removed\n    var destroyed = null;\n\n    for(var i = 0; i &lt; this.length; i++){\n\n        // Use while-loop to find adjacent equal objects\n        while(this[i] === obj){\n\n            // Remove this[i] and store it within destroyed\n            destroyed = this.splice(i, 1)[0];\n        }\n    }\n\n    return destroyed;\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var x = [1, 2, 3, 3, true, false, undefined, false];\n\nx.destroy(3);         // =&gt; 3\nx.destroy(false);     // =&gt; false\nx;                    // =&gt; [1, 2, true, undefined]\n\nx.destroy(true);      // =&gt; true\nx.destroy(undefined); // =&gt; undefined\nx;                    // =&gt; [1, 2]\n\nx.destroy(3);         // =&gt; null\nx;                    // =&gt; [1, 2]\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 638254,
      "name": "zykadelic",
      "reputation": 553
    }
  },
  {
    "soID": 45629554,
    "parentID": 20035101,
    "url": "https://stackoverflow.com/q/45629554",
    "title": null,
    "body": "<p>For rails server in <code>application_controller.rb</code>,\nadd this:</p>\n\n<pre><code>after_action :cors_set_access_control_headers\n\ndef cors_set_access_control_headers\n  headers['Access-Control-Allow-Origin'] = '*'\n  headers['Access-Control-Allow-Methods'] = 'POST, GET, OPTIONS'\n  headers['Access-Control-Allow-Headers'] = '*'\nend\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 639040,
      "name": "张健健",
      "reputation": 1948
    }
  },
  {
    "soID": 6960449,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/6960449",
    "title": null,
    "body": "<p>You could also just do:</p>\n\n<pre>\ndocument.getElementById('id').classList.add('class');\ndocument.getElementById('id').classList.remove('class');\n</pre>\n\n<p>And to toggle a class (remove if exists else add it):</p>\n\n<pre>\ndocument.getElementById('id').classList.toggle('class');\n</pre>\n",
    "score": 363,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 640584,
      "name": "Tyilo",
      "reputation": 12906
    }
  },
  {
    "soID": 17999073,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/17999073",
    "title": null,
    "body": "<p>My way:</p>\n\n<pre><code>function mergeObjects(defaults, settings) {\n    Object.keys(defaults).forEach(function(key_default) {\n        if (typeof settings[key_default] == \"undefined\") {\n            settings[key_default] = defaults[key_default];\n        } else if (isObject(defaults[key_default]) &amp;&amp; isObject(settings[key_default])) {\n            mergeObjects(defaults[key_default], settings[key_default]);\n        }\n    });\n\n    function isObject(object) {\n        return Object.prototype.toString.call(object) === '[object Object]';\n    }\n\n    return settings;\n}\n</code></pre>\n\n<p>:)</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 10863292,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/10863292",
    "title": null,
    "body": "<pre><code>function extend()\n{ \n    var o = {}; \n\n    for (var i in arguments)\n    { \n        var s = arguments[i]; \n\n        for (var i in s)\n        { \n            o[i] = s[i]; \n        } \n    } \n\n    return o;\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 11865698,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/11865698",
    "title": null,
    "body": "<p>I would make a function to test the type of object you are dealing with...</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function whatAmI(me){ return Object.prototype.toString.call(me).split(/\\W/)[2]; }\r\n\r\n// tests\r\nconsole.log(\r\n  whatAmI([\"aiming\",\"@\"]),\r\n  whatAmI({living:4,breathing:4}),\r\n  whatAmI(function(ing){ return ing+\" to the global window\" }),\r\n  whatAmI(\"going to do with you?\")\r\n);\r\n\r\n// output: Array Object Function String</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>then you can write a simple if statement...</p>\n\n<pre><code>if(whatAmI(myVar) === \"Array\"){\n    // do array stuff\n} else { // could also check `if(whatAmI(myVar) === \"String\")` here to be sure\n    // do string stuff\n}\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 665261,
      "name": "Billy Moon",
      "reputation": 35485
    }
  },
  {
    "soID": 5384561,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/5384561",
    "title": null,
    "body": "<p>Try to use <code>.live()</code> instead of <code>.bind()</code>; the <code>.live()</code> will bind <code>.hover</code> to your checkbox after the Ajax request executes.</p>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 670265,
      "name": "user670265",
      "reputation": 309
    }
  },
  {
    "soID": 5404867,
    "parentID": 5404839,
    "url": "https://stackoverflow.com/q/5404867",
    "title": null,
    "body": "<p>This should work on all browsers even without jQuery:</p>\n\n<pre><code>location.reload();\n</code></pre>\n",
    "score": 374,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 671047,
      "name": "Thorben",
      "reputation": 5207
    }
  },
  {
    "soID": 20144171,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/20144171",
    "title": null,
    "body": "<p><strong>This has nothing to do with browser settings</strong> if you are trying to open a new tab from a custom function.</p>\n\n<p>In this page, open a JavaScript console and type:</p>\n\n<pre><code>document.getElementById(\"nav-questions\").setAttribute(\"target\", \"_blank\");\ndocument.getElementById(\"nav-questions\").click();\n</code></pre>\n\n<p>And it will try to open a popup regardless of your settings, because the 'click' comes from a custom action.</p>\n\n<p>In order to behave like an actual 'mouse click' on a link, you need to follow <a href=\"https://stackoverflow.com/a/19464494/676002\">@spirinvladimir's advice</a> and <em>really</em> create it:</p>\n\n<pre><code>document.getElementById(\"nav-questions\").setAttribute(\"target\", \"_blank\");\ndocument.getElementById(\"nav-questions\").dispatchEvent((function(e){\n  e.initMouseEvent(\"click\", true, true, window, 0, 0, 0, 0, 0,\n                    false, false, false, false, 0, null);\n  return e\n}(document.createEvent('MouseEvents'))));\n</code></pre>\n\n<p>Here is a complete example (do not try it on <a href=\"http://jsfiddle.net/\" rel=\"nofollow noreferrer\">jsFiddle</a> or similar online editors, as it will not let you redirect to external pages from there):</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n    #firing_div {\n      margin-top: 15px;\n      width: 250px;\n      border: 1px solid blue;\n      text-align: center;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;a id=\"my_link\" href=\"http://www.google.com\"&gt; Go to Google &lt;/a&gt;\n  &lt;div id=\"firing_div\"&gt; Click me to trigger custom click &lt;/div&gt;\n&lt;/body&gt;\n&lt;script&gt;\n  function fire_custom_click() {\n    alert(\"firing click!\");\n    document.getElementById(\"my_link\").dispatchEvent((function(e){\n      e.initMouseEvent(\"click\", true, true, window, /* type, canBubble, cancelable, view */\n            0, 0, 0, 0, 0,              /* detail, screenX, screenY, clientX, clientY */\n            false, false, false, false, /* ctrlKey, altKey, shiftKey, metaKey */\n            0, null);                   /* button, relatedTarget */\n      return e\n    }(document.createEvent('MouseEvents'))));\n  }\n  document.getElementById(\"firing_div\").onclick = fire_custom_click;\n&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 676002,
      "name": "chipairon",
      "reputation": 1420
    }
  },
  {
    "soID": 34792308,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/34792308",
    "title": null,
    "body": "<p>This can be achieved with just CSS <code>:before</code> selector and <code>content property value</code>.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.halfed, .halfed1 {\r\n  float: left;\r\n}\r\n\r\n.halfed, .halfed1 {\r\n  font-family: arial;\r\n  font-size: 300px;\r\n  font-weight: bolder;\r\n  width: 200px;\r\n  height: 300px;\r\n  position: relative; /* To help hold the content value within */\r\n  overflow: hidden;\r\n  color: #000;\r\n}\r\n\r\n\r\n\r\n\r\n.halfed:before, .halfed1:before   {\r\n  width: 50%; /* How much we'd like to show */\r\n  overflow: hidden; /* Hide what goes beyond our dimension */  \r\n  content: 'X'; /* Halfed character */\r\n  height: 100%;\r\n  position: absolute;\r\n  color: #28507D;\r\n\r\n}\r\n\r\n\r\n\r\n/* For Horizontal cut off */ \r\n\r\n.halfed1:before   {\r\n  width: 100%;\r\n  height: 55%;\r\n  \r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"halfed\"&gt; X &lt;/div&gt;\r\n\r\n&lt;div class=\"halfed1\"&gt; X &lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><a href=\"https://jsfiddle.net/u5c03mjt/\" rel=\"noreferrer\">>> See on jsFiddle</a></p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 677418,
      "name": "Sleek Geek",
      "reputation": 3073
    }
  },
  {
    "soID": 32305436,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/32305436",
    "title": null,
    "body": "<p>You can simply use jQuery <strong><code>extend</code></strong></p>\n\n<pre><code>var obj1 = { val1: false, limit: 5, name: \"foo\" };\nvar obj2 = { val2: true, name: \"bar\" };\n\njQuery.extend(obj1, obj2);\n</code></pre>\n\n<p>Now <code>obj1</code> contains all the values of <code>obj1</code> and <code>obj2</code></p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 38119098,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/38119098",
    "title": null,
    "body": "<p>I think using the ? operator is slightly cleaner.</p>\n\n<pre><code>var ? function_if_exists() : function_if_doesnt_exist();\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 685830,
      "name": "Pedro Pereira",
      "reputation": 315
    }
  },
  {
    "soID": 30596164,
    "parentID": 9682092,
    "url": "https://stackoverflow.com/q/30596164",
    "title": null,
    "body": "<h2>By dirty checking the $scope object</h2>\n\n<p>Angular maintains a simple array of watchers in the $scope objects. If you inspect any $scope you will find that it contains an array called $$watchers. </p>\n\n<p>Each watcher is an object that contains among other things</p>\n\n<ol>\n<li>An expression which the watcher is monitoring. This might just be an attribute name, or something more complicated.</li>\n<li>A last known value of the expression. This can be checked against the current computed value of the expression. If the values differ the watcher will trigger the function and mark the $scope as dirty.</li>\n<li>A function which will be executed if the watcher is dirty.</li>\n</ol>\n\n<h2>How watchers are defined</h2>\n\n<p>There are many different ways of defining a watcher in AngularJS. </p>\n\n<ul>\n<li><p>You can explicitly $watch an attribute on $scope. </p>\n\n<pre><code>$scope.$watch('person.username', validateUnique);\n</code></pre></li>\n<li><p>You can place a {{}} interpolation in your template (a watcher will be created for you on the current $scope). </p>\n\n<pre><code>&lt;p&gt;username: {{person.username}}&lt;/p&gt;\n</code></pre></li>\n<li><p>You can ask a directive such as ng-model to define the watcher for you.</p>\n\n<pre><code>&lt;input ng-model=\"person.username\" /&gt;\n</code></pre></li>\n</ul>\n\n<h2>The $digest cycle checks all watchers against their last value</h2>\n\n<p>When we interact with angular through the normal channels (ng-model, ng-repeat, etc) a digest cycle will be triggered by the directive.</p>\n\n<p>A digest cycle is a <strong>depth first traversal of $scope and all its children</strong>. For each $scope object, we iterate over its $$watchers array and evaluate all the expressions. If the new expression value is different from the last known value, the watcher's function is called. This function might recompile part of the DOM, recompute a value on $scope, trigger an AJAX request, anything you need it to do.</p>\n\n<p>Every scope is traversed and every watch expression evaluated and checked against the last value.</p>\n\n<h2>If a watcher is triggered, the $scope is dirty</h2>\n\n<p>If a watcher is triggered, the app knows something has changed, and the $scope is marked as dirty.</p>\n\n<p>Watcher functions can change other attributes on $scope or on a parent $scope. If one $watcher function has been triggered, we can't guarantee that our other $scopes are still clean, and so we execute the entire digest cycle again.</p>\n\n<p>This is because Angular 1 has two way binding, so data can be passed back up the $scope tree. We may change a value on a higher $scope that has already been digested. Perhaps we change a value on the $rootScope.</p>\n\n<h2>If the $digest is dirty, we execute the entire $digest cycle again</h2>\n\n<p>We continually loop through the $digest cycle until either the digest cycle comes up clean (all $watch expressions have the same value as they had in the previous cycle), or we reach the digest limit. By default, this limit is set at 10.</p>\n\n<p>If we reach the digest limit Angular will raise an error in the console:</p>\n\n<pre><code>10 $digest() iterations reached. Aborting!\n</code></pre>\n\n<h2>The digest is hard on the machine but easy on the developer</h2>\n\n<p>As you can see, every time something changes in an Angular app, Angular will check every single watcher in the $scope hierarchy to see how to respond. For a developer this is a massive productivity boon, as you now need to write almost no wiring code, Angular will just notice if a value has changed, and make the resto of the app consistent with the change.</p>\n\n<p>From the perspective of the machine though this is wildly inefficient and will slow our app down if we create too many watchers. Misko has quoted a figure of about 4000 watchers before your app will feel slow on older browsers.</p>\n\n<p>This limit is easy to reach if you ng-repeat over a large JSON array for example. You can mitigate against this using features like one-time binding to compile a template without creating watchers.</p>\n\n<h2>How to avoid creating too many watchers</h2>\n\n<p>Each time your user interacts with your app, every single watcher in your app will be evaluated at least once. A big part of optimising an Angular app is reducing the number of watchers in your $scope tree. One easy way to do this is with <em>one time binding</em>.</p>\n\n<p>If you have data which will rarely change, you can bind it only once using the :: syntax, like so:</p>\n\n<pre><code>&lt;p&gt;{{::person.username}}&lt;/p&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>&lt;p ng-bind=\"::person.username\"&gt;&lt;/p&gt;\n</code></pre>\n\n<p>The binding will only be triggered when the containing template is rendered and the data loaded into $scope.</p>\n\n<p>This is especially important when you have an <code>ng-repeat</code> with many items.</p>\n\n<pre><code>&lt;div ng-repeat=\"person in people track by username\"&gt;\n  {{::person.username}}\n&lt;/div&gt;\n</code></pre>\n",
    "score": 109,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 687677,
      "name": "superluminary",
      "reputation": 24131
    }
  },
  {
    "soID": 5515442,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/5515442",
    "title": null,
    "body": "<p>If the variable hasn't been declared, you wont be able to test for undefined using a function because you will get an error. </p>\n\n<pre><code>if (foo) {}\nfunction (bar) {}(foo)\n</code></pre>\n\n<p>Both will generate an error if foo has not been declared.</p>\n\n<p>If you want to test if a variable has been declared you can use</p>\n\n<pre><code>typeof foo != \"undefined\"\n</code></pre>\n\n<p>if you want to test if foo has been declared and it has a value you can use</p>\n\n<pre><code>if (typeof foo != \"undefined\" &amp;&amp; foo) {\n    //code here\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 687820,
      "name": "herostwist",
      "reputation": 2127
    }
  },
  {
    "soID": 5529517,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/5529517",
    "title": null,
    "body": "<p>You can use this:</p>\n\n<pre><code>// if element exists\nif($('selector').length){ /* do something */ }\n</code></pre>\n\n<hr>\n\n<pre><code>// if element does not exist\nif(!$('selector').length){ /* do something */ }\n</code></pre>\n",
    "score": 87,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 689782,
      "name": "Yanni",
      "reputation": 1725
    }
  },
  {
    "soID": 24638042,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/24638042",
    "title": null,
    "body": "<p>The up-to-date <em>right</em> answer for this it to use the <a href=\"https://www.npmjs.org/package/minimist\">minimist</a> library. We used to use <a href=\"https://github.com/substack/node-optimist#deprecation-notice\">node-optimist</a> but it has since been deprecated. </p>\n\n<p>Here is an example of how to use it taken straight from the minimist documentation:</p>\n\n<pre><code>var argv = require('minimist')(process.argv.slice(2));\nconsole.dir(argv);\n</code></pre>\n\n<p>-</p>\n\n<pre><code>$ node example/parse.js -a beep -b boop\n{ _: [], a: 'beep', b: 'boop' }\n</code></pre>\n\n<p>-</p>\n\n<pre><code>$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz\n{ _: [ 'foo', 'bar', 'baz' ],\n  x: 3,\n  y: 4,\n  n: 5,\n  a: true,\n  b: true,\n  c: true,\n  beep: 'boop' }\n</code></pre>\n",
    "score": 157,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 690826,
      "name": "real_ate",
      "reputation": 3315
    }
  },
  {
    "soID": 40842324,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/40842324",
    "title": null,
    "body": "<p>No need for jQuery</p>\n\n<pre><code>if(document.querySelector('.a-class')) {\n  // do something\n}\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 696535,
      "name": "Pawel",
      "reputation": 3329
    }
  },
  {
    "soID": 42512295,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/42512295",
    "title": null,
    "body": "<p>Many solutions seem correct but they don't mention it's called <code>Currying</code> which is a functional programming design pattern for situations like here. 3-10 times faster than bind depending on browser.</p>\n\n<p><a href=\"https://www.sitepoint.com/currying-in-functional-javascript/\" rel=\"nofollow noreferrer\">https://www.sitepoint.com/currying-in-functional-javascript/</a></p>\n\n<pre><code>var funcs = [];\nfor (var i = 0; i &lt; 3; i++) {      // let's create 3 functions\n  funcs[i] = curryShowValue(i);\n}\nfor (var j = 0; j &lt; 3; j++) {\n  funcs[j]();                      // and now let's run each one to see\n}\n\nfunction curryShowValue(i) {\n  return function showValue() {\n    console.log(\"My value: \" + i);\n  }\n}\n</code></pre>\n\n<p>see performance gain in different browsers <a href=\"https://jsperf.com/bind-vs-curry\" rel=\"nofollow noreferrer\">https://jsperf.com/bind-vs-curry</a></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 696535,
      "name": "Pawel",
      "reputation": 3329
    }
  },
  {
    "soID": 5767589,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/5767589",
    "title": null,
    "body": "<p>To normalize the arguments like a regular javascript function would receive, I do this in my node.js shell scripts:</p>\n\n<pre><code>var args = process.argv.slice(2);\n</code></pre>\n\n<p>Note that the first arg is usually the path to nodejs, and the second arg is the location of the script you're executing.</p>\n",
    "score": 362,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 704703,
      "name": "Mauvis Ledford",
      "reputation": 20909
    }
  },
  {
    "soID": 36837818,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/36837818",
    "title": null,
    "body": "<p>A more modern, <a href=\"https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015\">ECMAScript 2015</a> (formerly known as Harmony or ES&nbsp;6) approach. Given:</p>\n\n<pre><code>const items = [1, 2, 3, 4];\nconst index = 2;\n</code></pre>\n\n<p>Then:</p>\n\n<pre><code>items.filter((x, i) =&gt; i !== index);\n</code></pre>\n\n<p>Yielding: </p>\n\n<pre><code>[1, 2, 4]\n</code></pre>\n\n<p>You can use <a href=\"https://babeljs.io/\">Babel</a> and a <a href=\"http://cdn.polyfill.io/v2/docs/\">polyfill service</a> to ensure this is well supported across browsers.</p>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 722180,
      "name": "bjfletcher",
      "reputation": 6955
    }
  },
  {
    "soID": 14274653,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/14274653",
    "title": null,
    "body": "<p>Here's my lazy approach:</p>\n\n<pre><code>if (Array.prototype.array_ === undefined) {\n  Array.prototype.array_ = true;\n}\n\n// ...\n\nvar test = [],\n    wat = {};\n\nconsole.log(test.array_ === true); // true\nconsole.log(wat.array_ === true);  // false\n</code></pre>\n\n<p>I know it's sacrilege to \"mess with\" the prototype, but <a href=\"http://jsperf.com/isarray-approaches\" rel=\"nofollow\">it appears to perform significantly better than the recommended <code>toString</code> method</a>.</p>\n\n<p><strong>Note:</strong> A pitfall of this approach is that it <a href=\"http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\" rel=\"nofollow\">wont work across <code>iframe</code> boundaries</a>, but for my use case this is not an issue.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 742156,
      "name": "namuol",
      "reputation": 6754
    }
  },
  {
    "soID": 38387132,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/38387132",
    "title": null,
    "body": "<pre><code>npm install ps-grab\n</code></pre>\n\n<h2>If you want to run something like this :</h2>\n\n<pre><code>node greeting.js --user Abdennour --website http://abdennoor.com \n</code></pre>\n\n<p>--</p>\n\n<pre><code>var grab=require('ps-grab');\ngrab('--username') // return 'Abdennour'\ngrab('--action') // return 'http://abdennoor.com'\n</code></pre>\n\n<hr>\n\n<p>Or something like : </p>\n\n<pre><code>node vbox.js -OS redhat -VM template-12332 ;\n</code></pre>\n\n<p>--</p>\n\n<pre><code>var grab=require('ps-grab');\ngrab('-OS') // return 'redhat'\ngrab('-VM') // return 'template-12332'\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 747579,
      "name": "Abdennour TOUMI",
      "reputation": 17227
    }
  },
  {
    "soID": 39924727,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/39924727",
    "title": null,
    "body": "<h1>ES6 &amp; without mutation:  (October 2016)</h1>\n\n<pre><code>const removeByIndex = (list, index) =&gt;\n  [\n    ...list.slice(0, index),\n    ...list.slice(index + 1)\n  ];\n</code></pre>\n\n<p>Then : </p>\n\n<pre><code>removeByIndex([33,22,11,44],1) //=&gt; [33,11,44]\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 747579,
      "name": "Abdennour TOUMI",
      "reputation": 17227
    }
  },
  {
    "soID": 41500700,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/41500700",
    "title": null,
    "body": "<p>In <a href=\"https://babeljs.io/docs/plugins/transform-class-properties/\" rel=\"noreferrer\">ES7</a> , you can do an elegant ENUM relying on static attributes: </p>\n\n<pre><code>class ColorEnum  {\n    static RED = 0 ;\n    static GREEN = 1;\n    static BLUE = 2;\n}\n</code></pre>\n\n<p>then </p>\n\n<pre><code>if (currentColor === ColorEnum.GREEN ) {/*-- coding --*/}\n</code></pre>\n\n<p>The advantage ( of using class instead of literal object) is to have a parent class <code>Enum</code> then all your Enums will <strong>extends</strong> that class.  </p>\n\n<pre><code> class ColorEnum  extends Enum {/*....*/}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 747579,
      "name": "Abdennour TOUMI",
      "reputation": 17227
    }
  },
  {
    "soID": 6548123,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/6548123",
    "title": null,
    "body": "<p>I'm kind of getting started with JavaScript, so correct me if I'm wrong.</p>\n\n<p>But wouldn't it be better if you could merge any number of objects? Here's how I do it using the native <code>Arguments</code> object.</p>\n\n<p>The key to is that you can actually pass any number of arguments to a JavaScript function without defining them in the function declaration. You just can't access them without using the Arguments object.</p>\n\n<pre><code>function mergeObjects() (\n    var tmpObj = {};\n\n    for(var o in arguments) {\n        for(var m in arguments[o]) {\n            tmpObj[m] = arguments[o][m];\n        }\n    }\n    return tmpObj;\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 22422836,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/22422836",
    "title": null,
    "body": "<p>With <a href=\"https://en.wikipedia.org/wiki/Underscore.js\" rel=\"nofollow\">Underscore.js</a>, to merge an array of objects do:</p>\n\n<pre><code>var arrayOfObjects = [ {a:1}, {b:2, c:3}, {d:4} ];\n_(arrayOfObjects).reduce(function(memo, o) { return _(memo).extend(o); });\n</code></pre>\n\n<p>It results in:</p>\n\n<pre><code>Object {a: 1, b: 2, c: 3, d: 4}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 26487977,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/26487977",
    "title": null,
    "body": "<p><em>My two cents:</em></p>\n\n<p>One of the goals of strict mode is to allow for faster debugging of issues. It helps the developers by throwing exception when certain wrong things occur that can cause silent &amp; strange behaviour of your webpage. The moment we use <code>use strict</code>, the code will throw out errors which helps developer to fix it in advance.</p>\n\n<p>Few important things which I have learned after using <code>use strict</code> :</p>\n\n<p><strong><em>Prevents Global Variable Declaration:</em></strong></p>\n\n<pre><code>var tree1Data = { name: 'Banana Tree',age: 100,leafCount: 100000};\n\nfunction Tree(typeOfTree) {\n    var age;\n    var leafCount;\n\n    age = typeOfTree.age;\n    leafCount = typeOfTree.leafCount;\n    nameoftree = typeOfTree.name;\n};\n\nvar tree1 = new Tree(tree1Data);\nconsole.log(window);\n</code></pre>\n\n<p>Now,this code creates <code>nameoftree</code> in global scope which could be accessed using <code>window.nameoftree</code>. When we implement <code>use strict</code> the code would throw error.</p>\n\n<blockquote>\n  <p>Uncaught ReferenceError: nameoftree is not defined</p>\n</blockquote>\n\n<p><a href=\"http://jsfiddle.net/shubh0602/08p556u5/\" rel=\"noreferrer\"><kbd>Sample</kbd></a></p>\n\n<p><strong><em>Eliminates <code>with</code> statement :</em></strong></p>\n\n<p><code>with</code> statements can't be minified using tools like <a href=\"http://marijnhaverbeke.nl/uglifyjs\" rel=\"noreferrer\">uglify-js</a>. They're also <a href=\"http://www.2ality.com/2011/06/with-statement.html\" rel=\"noreferrer\">deprecated</a> and removed from future JavaScript versions.</p>\n\n<p><a href=\"http://jsfiddle.net/shubh0602/vjgznz79/\" rel=\"noreferrer\"><kbd>Sample</kbd></a></p>\n\n<p><strong><em>Prevents Duplicates :</em></strong></p>\n\n<p>When we have duplicate property, it throws an exception </p>\n\n<blockquote>\n  <p>Uncaught SyntaxError: Duplicate data property in object literal not\n  allowed in strict mode</p>\n</blockquote>\n\n<pre><code>\"use strict\";\nvar tree1Data = {\n    name: 'Banana Tree',\n    age: 100,\n    leafCount: 100000,\n    name:'Banana Tree'\n};\n</code></pre>\n\n<p>There are few more but I need to gain more knowledge on that.</p>\n",
    "score": 60,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 45518443,
    "parentID": 2647867,
    "url": "https://stackoverflow.com/q/45518443",
    "title": null,
    "body": "<p><code>if(x==null)</code> is bad idea in javascript,judge with <code>\"==\"</code> may cause unexpected type coercion, and can't be read by coffee-script, \n <strong><em>never use \"==\" or \"!=\" in condition judgment!</em></strong></p>\n\n<p><code>if(x)</code> will be better.but becareful <strong>0 and \"\"</strong>, it will be treat as <strong>false</strong>,not equal method with <code>\"!= null\"</code> is <strong>true</strong>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/gIXSe.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/gIXSe.png\" alt=\"enter image description here\"></a></p>\n\n<p><a href=\"https://www.w3schools.com/js/js_best_practices.asp\" rel=\"nofollow noreferrer\">https://www.w3schools.com/js/js_best_practices.asp</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 770627,
      "name": "Albert.Qing",
      "reputation": 1706
    }
  },
  {
    "soID": 6160260,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/6160260",
    "title": null,
    "body": "<p>Change an element's CSS class with JavaScript in <a href=\"http://en.wikipedia.org/wiki/ASP.NET\" rel=\"noreferrer\">ASP.NET</a>:</p>\n\n<pre><code>Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load\n    If Not Page.IsPostBack Then\n        lbSave.Attributes.Add(\"onmouseover\", \"this.className = 'LinkButtonStyle1'\")\n        lbSave.Attributes.Add(\"onmouseout\", \"this.className = 'LinkButtonStyle'\")\n        lbCancel.Attributes.Add(\"onmouseover\", \"this.className = 'LinkButtonStyle1'\")\n        lbCancel.Attributes.Add(\"onmouseout\", \"this.className = 'LinkButtonStyle'\")\n    End If\nEnd Sub\n</code></pre>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 774111,
      "name": "Hiren Kansara",
      "reputation": 126
    }
  },
  {
    "soID": 23439993,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/23439993",
    "title": null,
    "body": "<p>Here's a simple solution that uses <code>forEach</code> (works back to IE9):</p>\n\n<pre><code>var funcs = {};\n[0,1,2].forEach(function(i) {          // let's create 3 functions\n    funcs[i] = function() {            // and store them in funcs\n        console.log(\"My value: \" + i); // each should log its value.\n    };\n})\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();                        // and now let's run each one to see\n}\n</code></pre>\n\n<p>Prints:</p>\n\n<blockquote>\n<pre><code>My value: 0\nMy value: 1\nMy value: 2\n</code></pre>\n</blockquote>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 814454,
      "name": "Daryl",
      "reputation": 1536
    }
  },
  {
    "soID": 34706021,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/34706021",
    "title": null,
    "body": "<p>Remove last occurrence or all occurrences, or first occurrence?  </p>\n\n<pre><code>var array = [2, 5, 9, 5];\n\n// Remove last occurrence (or all occurrences)\nfor (var i = array.length; i--;) {\n  if (array[i] === 5) {\n     array.splice(i, 1);\n     break; // Remove this line to remove all occurrences\n  }\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>var array = [2, 5, 9, 5];\n\n// Remove first occurrence\nfor (var i = 0; array.length; i++) {\n  if (array[i] === 5) {\n     array.splice(i, 1);\n     break; // Do not remove this line\n  }\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 834398,
      "name": "MEC",
      "reputation": 500
    }
  },
  {
    "soID": 25944335,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/25944335",
    "title": null,
    "body": "<p>This might be a hack, but in Firefox if you specify a third parameter, 'fullscreen=yes', it opens a fresh new window.</p>\n\n<p>For example,</p>\n\n<pre><code>&lt;a href=\"#\" onclick=\"window.open('MyPDF.pdf', '_blank', 'fullscreen=yes'); return false;\"&gt;MyPDF&lt;/a&gt;\n</code></pre>\n\n<p>It seems to actually override the browser settings.</p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 846727,
      "name": "Kunal",
      "reputation": 190
    }
  },
  {
    "soID": 7609411,
    "parentID": 5404839,
    "url": "https://stackoverflow.com/q/7609411",
    "title": null,
    "body": "<p>To reload a page with jQuery, do:</p>\n\n<pre><code>$.ajax({\n    url: \"\",\n    context: document.body,\n    success: function(s,x){\n        $(this).html(s);\n    }\n});\n</code></pre>\n\n<p>The approach here that I used was Ajax jQuery. I tested it on <a href=\"http://en.wikipedia.org/wiki/Google_Chrome\">Chrome</a> 13. Then I put the code in the handler that will trigger the reload. The <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\">URL</a> is <code>\"\"</code>, which means <strong><em>this page</em></strong>.</p>\n",
    "score": 106,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 849417,
      "name": "Peter",
      "reputation": 4785
    }
  },
  {
    "soID": 10785067,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/10785067",
    "title": null,
    "body": "<pre><code>$(selector).length &amp;&amp; //Do something\n</code></pre>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 886435,
      "name": "SJG",
      "reputation": 1433
    }
  },
  {
    "soID": 24595458,
    "parentID": 5874652,
    "url": "https://stackoverflow.com/q/24595458",
    "title": null,
    "body": "<p><a href=\"http://www.w3.org/TR/html5/forms.html#concept-input-checked-dirty\"><strong>dirty checkedness</strong></a> is an example where the difference is <strong>observable</strong>.</p>\n\n<p>To see it, run the following snippet and:</p>\n\n<ul>\n<li>click the button. Both checkboxes got checked.</li>\n<li>uncheck both checkboxes.</li>\n<li>click the button again. Only the <code>prop</code> checkbox got checked. BANG!</li>\n</ul>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$('button').on('click', function() {\r\n  $('#attr').attr('checked', 'checked')\r\n  $('#prop').prop('checked', true)\r\n})</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;label&gt;attr &lt;input id=\"attr\" type=\"checkbox\"&gt;&lt;/label&gt;\r\n&lt;label&gt;prop &lt;input id=\"prop\" type=\"checkbox\"&gt;&lt;/label&gt;\r\n&lt;button type=\"button\"&gt;Set checked attr and prop.&lt;/button&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>For some attributes  like <code>disabled</code> on <code>button</code>, adding or removing the content attribute <code>disabled=\"disabled\"</code> always toggles the property (called IDL attribute in HTML5) because <a href=\"http://www.w3.org/TR/html5/forms.html#attr-fe-disabled\">http://www.w3.org/TR/html5/forms.html#attr-fe-disabled</a> says:</p>\n\n<blockquote>\n  <p>The disabled IDL attribute must reflect the disabled content attribute.</p>\n</blockquote>\n\n<p>so you might get away with it, although it is ugly since it modifies HTML without need.</p>\n\n<p>For other attributes like <code>checked=\"checked\"</code> on <code>input type=\"checkbox\"</code>, things break, because once you click on it, it becomes dirty, and then adding or removing the <code>checked=\"checked\"</code> content attribute <strong>does not toggle checkedness anymore</strong>.</p>\n\n<p>This is why you should use mostly <code>.prop</code>, as it affects the effective property directly, instead of relying on complex side-effects.</p>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 895245,
      "name": "Ciro Santilli 刘晓波死 六四事件 法轮功",
      "reputation": 82635
    }
  },
  {
    "soID": 13989373,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/13989373",
    "title": null,
    "body": "<p>There are two major approaches:</p>\n\n<ol>\n<li><p><strong>splice()</strong>: <code>anArray.splice(index, 1);</code></p></li>\n<li><p><strong>delete</strong>: <code>delete anArray[index];</code></p></li>\n</ol>\n\n<p>Be careful when you use delete for an array. It is good for deleting attributes of objects but not so good for arrays. It is better to use <code>splice</code> for arrays.</p>\n\n<p>Keep in mind that when you use <code>delete</code> for an array you could get wrong results for <code>anArray.length</code>. In other words, <code>delete</code> would remove the element but wouldn't update the value of length property.</p>\n\n<p>You can also expect to have holes in index numbers after using delete, e.g. you could end up with having indexes 1,3,4,8,9,11 and length as it was before using delete. \nIn that case, all indexed <code>for</code> loops would crash, since indexes are no longer sequential.</p>\n\n<p>If you are forced to use <code>delete</code> for some reason, then you should use <a href=\"https://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript\"><code>for each</code></a> loops when you need to loop through arrays.</p>\n",
    "score": 86,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 897373,
      "name": "Sasa",
      "reputation": 1455
    }
  },
  {
    "soID": 13313296,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/13313296",
    "title": null,
    "body": "<p>This plugin can be used in an <code>if</code> statement like <code>if ($(ele).exist()) { /* DO WORK */ }</code> or using a callback.</p>\n\n<h2>Plugin</h2>\n\n<pre><code>;;(function($) {\n    if (!$.exist) {\n        $.extend({\n            exist: function() {\n                var ele, cbmExist, cbmNotExist;\n                if (arguments.length) {\n                    for (x in arguments) {\n                        switch (typeof arguments[x]) {\n                            case 'function':\n                                if (typeof cbmExist == \"undefined\") cbmExist = arguments[x];\n                                else cbmNotExist = arguments[x];\n                                break;\n                            case 'object':\n                                if (arguments[x] instanceof jQuery) ele = arguments[x];\n                                else {\n                                    var obj = arguments[x];\n                                    for (y in obj) {\n                                        if (typeof obj[y] == 'function') {\n                                            if (typeof cbmExist == \"undefined\") cbmExist = obj[y];\n                                            else cbmNotExist = obj[y];\n                                        }\n                                        if (typeof obj[y] == 'object' &amp;&amp; obj[y] instanceof jQuery) ele = obj[y];\n                                        if (typeof obj[y] == 'string') ele = $(obj[y]);\n                                    }\n                                }\n                                break;\n                            case 'string':\n                                ele = $(arguments[x]);\n                                break;\n                        }\n                    }\n                }\n\n                if (typeof cbmExist == 'function') {\n                    var exist =  ele.length &gt; 0 ? true : false;\n                    if (exist) {\n                        return ele.each(function(i) { cbmExist.apply(this, [exist, ele, i]); });\n                    }\n                    else if (typeof cbmNotExist == 'function') {\n                        cbmNotExist.apply(ele, [exist, ele]);\n                        return ele;\n                    }\n                    else {\n                        if (ele.length &lt;= 1) return ele.length &gt; 0 ? true : false;\n                        else return ele.length;\n                    }\n                }\n                else {\n                    if (ele.length &lt;= 1) return ele.length &gt; 0 ? true : false;\n                    else return ele.length;\n                }\n\n                return false;\n            }\n        });\n        $.fn.extend({\n            exist: function() {\n                var args = [$(this)];\n                if (arguments.length) for (x in arguments) args.push(arguments[x]);\n                return $.exist.apply($, args);\n            }\n        });\n    }\n})(jQuery);\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/SpYk3/cEUR5/\">jsFiddle</a></p>\n\n<p>You may specify one or two callbacks. The first one will fire if the element exists, the second one will fire if the element does <em>not</em> exist. However, if you choose to pass only one function, it will only fire when the element exists. Thus, the chain will die if the selected element does <em>not</em> exist. Of course, if it does exist, the first function will fire and the chain will continue.</p>\n\n<p>Keep in mind that using the <strong>callback variant helps maintain chainability</strong> – the element is returned and you can continue chaining commands as with any other jQuery method!</p>\n\n<h2>Example Uses</h2>\n\n<pre><code>if ($.exist('#eleID')) {    /*    DO WORK    */ }        //    param as STRING\nif ($.exist($('#eleID'))) { /*    DO WORK    */ }        //    param as jQuery OBJECT\nif ($('#eleID').exist()) {  /*    DO WORK    */ }        //    enduced on jQuery OBJECT\n\n$.exist('#eleID', function() {            //    param is STRING &amp;&amp; CALLBACK METHOD\n    /*    DO WORK    */\n    /*    This will ONLY fire if the element EXIST    */\n}, function() {            //    param is STRING &amp;&amp; CALLBACK METHOD\n    /*    DO WORK    */\n    /*    This will ONLY fire if the element DOES NOT EXIST    */\n})\n\n$('#eleID').exist(function() {            //    enduced on jQuery OBJECT with CALLBACK METHOD\n    /*    DO WORK    */\n    /*    This will ONLY fire if the element EXIST    */\n})\n\n$.exist({                        //    param is OBJECT containing 2 key|value pairs: element = STRING, callback = METHOD\n    element: '#eleID',\n    callback: function() {\n        /*    DO WORK    */\n        /*    This will ONLY fire if the element EXIST    */\n    }\n})\n</code></pre>\n",
    "score": 38,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23021069,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/23021069",
    "title": null,
    "body": "<p>How about creating an <code>&lt;a&gt;</code> with <code>_blank</code> as <code>target</code> attribute value and the <code>url</code> as <code>href</code>, with style display:hidden with a a children element? Then add to the DOM and then trigger the click event on a children element.</p>\n\n<h2>UPDATE</h2>\n\n<p>That doesn't work. The browser prevents the default behaviour. It could be triggered programmatically, but it doesn't follow the default behaviour.</p>\n\n<p>Check and see for yourself: <a href=\"http://jsfiddle.net/4S4ET/\" rel=\"nofollow noreferrer\">http://jsfiddle.net/4S4ET/</a></p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 903998,
      "name": "Victor",
      "reputation": 1948
    }
  },
  {
    "soID": 19644430,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/19644430",
    "title": null,
    "body": "<p>You could also try to define a new function and therebefore a new namespace, and add variables to it, like this.</p>\n\n<pre><code>function Color () {};  \nColor.RED = 1;\nColor.YELLOW = 2;\n</code></pre>\n\n<p>As long anybody uses the namespace granted by the the function Color, everything will go fine.\nIf you know Java, this is kind of old enums : where we use a class or interface only to hold static attributes. If a function, in javascript, is a kind of class, this is pretty much the same approach.</p>\n\n<p>I thing is a very simple way to define enums.</p>\n\n<p>Hope it helps!</p>\n\n<p>Greetings.</p>\n\n<p>Victor.</p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 903998,
      "name": "Victor",
      "reputation": 1948
    }
  },
  {
    "soID": 25686413,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/25686413",
    "title": null,
    "body": "<p>Including <code>use strict</code> in the beginning of your all sensitive JavaScript files from this point is a small way to be a better JavaScript programmer and avoid random variables becoming global and things change silently.</p>\n",
    "score": 29,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 904554,
      "name": "GANGSTA IRL",
      "reputation": 1760
    }
  },
  {
    "soID": 19034005,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/19034005",
    "title": null,
    "body": "<p>I had done it a while ago using a mixture of <code>__defineGetter__</code> and <code>__defineSetter__</code> or <code>defineProperty</code> depending on the JS version.</p>\n\n<p>Here's the enum generating function I made: <a href=\"https://gist.github.com/gfarrell/6716853\" rel=\"nofollow\">https://gist.github.com/gfarrell/6716853</a></p>\n\n<p>You'd use it like this:</p>\n\n<pre><code>var Colours = Enum('RED', 'GREEN', 'BLUE');\n</code></pre>\n\n<p>And it would create an immutable string:int dictionary (an enum).</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 907981,
      "name": "GTF",
      "reputation": 2336
    }
  },
  {
    "soID": 12431916,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/12431916",
    "title": null,
    "body": "<p>As MDN says <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/typeof#Normal_cases\">in here</a>:</p>\n\n<blockquote>\n  <p>use <strong>Array.isArray</strong> or <strong>Object.prototype.toString.call</strong> to differentiate\n  regular objects from arrays</p>\n</blockquote>\n\n<p>Like this:</p>\n\n<ul>\n<li><p><code>Object.prototype.toString.call(arr) === '[object Array]'</code>, or</p></li>\n<li><p><code>Array.isArray(arr)</code></p></li>\n</ul>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 908879,
      "name": "ajax333221",
      "reputation": 5630
    }
  },
  {
    "soID": 27490301,
    "parentID": 22343224,
    "url": "https://stackoverflow.com/q/27490301",
    "title": null,
    "body": "<p><code>^</code> is 1.[any].[any] (latest minor version)<br/>\n<code>~</code> is 1.2.[any] (latest patch)</p>\n\n<p>A great read is <a href=\"http://blog.npmjs.org/post/98131109725/npm-2-0-0\" rel=\"noreferrer\">this blog post</a> on how semver applies to npm<br/>\nand what they're doing to make it match <a href=\"http://semver.org/spec/v2.0.0.html\" rel=\"noreferrer\">the semver standard</a><br/>\n<a href=\"http://blog.npmjs.org/post/98131109725/npm-2-0-0\" rel=\"noreferrer\">http://blog.npmjs.org/post/98131109725/npm-2-0-0</a></p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 909760,
      "name": "Will Stern",
      "reputation": 10491
    }
  },
  {
    "soID": 23616496,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/23616496",
    "title": null,
    "body": "<p>Another CSS-only solution (though data-attribute is needed if you don't want to write letter-specific CSS). This one works more across the board (Tested IE 9/10, Chrome latest &amp; FF latest)</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>span {\r\n  position: relative;\r\n  color: rgba(50,50,200,0.5);\r\n}\r\n\r\nspan:before {\r\n  content: attr(data-char);\r\n  position: absolute;\r\n  width: 50%;\r\n  overflow: hidden;\r\n  color: rgb(50,50,200);\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;span data-char=\"X\"&gt;X&lt;/span&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 35,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 912297,
      "name": "MStrutt",
      "reputation": 639
    }
  },
  {
    "soID": 27390031,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/27390031",
    "title": null,
    "body": "<p>I'm surprised no one yet have suggested using the forEach function to better avoid (re)using local variables. In fact, I'm not using <code>for(var i ...)</code> at all anymore for this reason.</p>\n\n<pre><code>[0,2,3].forEach(function(i){ console.log('My value:', i); });\n// My value: 0\n// My value: 2\n// My value: 3\n</code></pre>\n\n<p>// edited to use forEach instead of map.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 913800,
      "name": "Christian Landgren",
      "reputation": 5631
    }
  },
  {
    "soID": 9329551,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/9329551",
    "title": null,
    "body": "<p>There isn't any <code>for each</code> loop in native <a href=\"http://en.wikipedia.org/wiki/JavaScript\" rel=\"nofollow noreferrer\">JavaScript</a>. You can either use libraries to get this functionality (I recommend <a href=\"http://en.wikipedia.org/wiki/Underscore.js\" rel=\"nofollow noreferrer\">Underscore.js</a>), use a simple <code>for</code> in loop.</p>\n\n<pre><code>for (var instance in objects) {\n   ...\n}\n</code></pre>\n\n<p>However, note that there may be reasons to use an even simpler <code>for</code> loop (see Stack Overflow question <em><a href=\"https://stackoverflow.com/questions/500504\">Why is using “for…in” with array iteration such a bad idea?</a></em>)</p>\n\n<pre><code>var instance;\nfor (var i=0; i &lt; objects.length; i++) {\n    var instance = objects[i];\n    ...\n}\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 918264,
      "name": "joidegn",
      "reputation": 822
    }
  },
  {
    "soID": 44662679,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/44662679",
    "title": null,
    "body": "<pre><code>var myNewValue = myObject &amp;&amp; myObject.child &amp;&amp; myObject.child.myValue;\n</code></pre>\n\n<p>This will never throw an error. If <em>myObject</em>, <em>child</em>, or <em>myValue</em> is null then <em>myNewValue</em> will be null. No errors will be thrown</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 920916,
      "name": "Keith Blanchard",
      "reputation": 159
    }
  },
  {
    "soID": 13958020,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/13958020",
    "title": null,
    "body": "<pre><code>A={a:1,b:function(){alert(9)}}\nB={a:2,c:3}\nA.merge = function(){for(var i in B){A[i]=B[i]}}\nA.merge()\n</code></pre>\n\n<p>Result is: {a:2,c:3,b:function()}</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 24490396,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/24490396",
    "title": null,
    "body": "<p>In my opinion the fastest and clear way is</p>\n\n<pre><code>//Try to get tbody first with jquery children. works faster!\nvar tbody = $('#myTable').children('tbody');\n\n//Then if no tbody just select your table \nvar table = tbody.length ? tbody : $('#myTable');\n\n//Add row\ntable.append('&lt;tr&gt;&lt;td&gt;hello&gt;&lt;/td&gt;&lt;/tr&gt;');\n</code></pre>\n\n<p>here is demo  <strong><a href=\"http://jsfiddle.net/zwmpN/\" rel=\"noreferrer\">Fiddle</a></strong></p>\n\n<p>Also I can recommend a small function to make more html changes</p>\n\n<pre><code>//Compose template string\nString.prototype.compose = (function (){\nvar re = /\\{{(.+?)\\}}/g;\nreturn function (o){\n        return this.replace(re, function (_, k){\n            return typeof o[k] != 'undefined' ? o[k] : '';\n        });\n    }\n}());\n</code></pre>\n\n<p>If you use my string composer you can do this like</p>\n\n<pre><code>var tbody = $('#myTable').children('tbody');\nvar table = tbody.length ? tbody : $('#myTable');\nvar row = '&lt;tr&gt;'+\n    '&lt;td&gt;{{id}}&lt;/td&gt;'+\n    '&lt;td&gt;{{name}}&lt;/td&gt;'+\n    '&lt;td&gt;{{phone}}&lt;/td&gt;'+\n'&lt;/tr&gt;';\n\n\n//Add row\ntable.append(row.compose({\n    'id': 3,\n    'name': 'Lee',\n    'phone': '123 456 789'\n}));\n</code></pre>\n\n<p>Here is demo\n<strong><a href=\"http://jsfiddle.net/w2YmD/\" rel=\"noreferrer\">Fiddle</a></strong></p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 923036,
      "name": "sulest",
      "reputation": 601
    }
  },
  {
    "soID": 15914908,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/15914908",
    "title": null,
    "body": "<p>A <strong>forEach</strong> implementation (<a href=\"http://jsfiddle.net/nmoliveira/zNsyB/\" rel=\"noreferrer\">see in jsFiddle</a>):</p>\n\n<pre><code>function forEach(list,callback) {\n  var length = list.length;\n  for (var n = 0; n &lt; length; n++) {\n    callback.call(list[n]);\n  }\n}\n\nvar myArray = ['hello','world'];\n\nforEach(\n  myArray,\n  function(){\n    alert(this); // do something\n  }\n);\n</code></pre>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 924079,
      "name": "nmoliveira",
      "reputation": 1099
    }
  },
  {
    "soID": 23571018,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/23571018",
    "title": null,
    "body": "<p>A nice WebKit-only solution that takes advantage of the <code>background-clip: text</code> support: <a href=\"http://jsfiddle.net/sandro_paganotti/wLkVt/\">http://jsfiddle.net/sandro_paganotti/wLkVt/</a></p>\n\n<pre><code>span{\n   font-size: 100px;\n   background: linear-gradient(to right, black, black 50%, grey 50%, grey);\n   -webkit-background-clip: text;\n   -webkit-text-fill-color: transparent;\n}\n</code></pre>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 925964,
      "name": "Sandro Paganotti",
      "reputation": 1424
    }
  },
  {
    "soID": 22345808,
    "parentID": 22343224,
    "url": "https://stackoverflow.com/q/22345808",
    "title": null,
    "body": "<blockquote>\n  <p>In the simplest terms, the tilde matches the most recent minor version\n  (the middle number). ~1.2.3 will match all 1.2.x versions but will\n  miss 1.3.0.</p>\n  \n  <p>The caret, on the other hand, is more relaxed. It will update you to\n  the most recent major version (the first number). ^1.2.3 will match\n  any 1.x.x release including 1.3.0, but will hold off on 2.0.0.</p>\n</blockquote>\n\n<p><a href=\"http://fredkschott.com/post/2014/02/npm-no-longer-defaults-to-tildes/\" rel=\"noreferrer\">http://fredkschott.com/post/2014/02/npm-no-longer-defaults-to-tildes/</a></p>\n",
    "score": 1918,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 941764,
      "name": "jgillich",
      "reputation": 26880
    }
  },
  {
    "soID": 18355123,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/18355123",
    "title": null,
    "body": "<p>I've been playing around with this, as I love my enums. =)</p>\n\n<p>Using <code>Object.defineProperty</code> I think I came up with a somewhat viable solution.</p>\n\n<p>Here's a jsfiddle: <a href=\"http://jsfiddle.net/ZV4A6/\" rel=\"noreferrer\">http://jsfiddle.net/ZV4A6/</a></p>\n\n<p>Using this method.. you should (in theory) be able to call and define enum values for any object, without affecting other attributes of that object.</p>\n\n<pre><code>Object.defineProperty(Object.prototype,'Enum', {\n    value: function() {\n        for(i in arguments) {\n            Object.defineProperty(this,arguments[i], {\n                value:parseInt(i),\n                writable:false,\n                enumerable:true,\n                configurable:true\n            });\n        }\n        return this;\n    },\n    writable:false,\n    enumerable:false,\n    configurable:false\n}); \n</code></pre>\n\n<p>Because of the attribute <code>writable:false</code> this <i>should</i> make it type safe.</p>\n\n<p>So you should be able to create a custom object, then call <code>Enum()</code> on it. The values assigned start at 0 and increment per item.</p>\n\n<pre><code>var EnumColors={};\nEnumColors.Enum('RED','BLUE','GREEN','YELLOW');\nEnumColors.RED;    // == 0\nEnumColors.BLUE;   // == 1\nEnumColors.GREEN;  // == 2\nEnumColors.YELLOW; // == 3\n</code></pre>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 945011,
      "name": "Duncan",
      "reputation": 1133
    }
  },
  {
    "soID": 11842261,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/11842261",
    "title": null,
    "body": "<p>Here's another variation on the technique, similar to Bjorn's (apphacker), which lets you assign the variable value inside the function rather than passing it as a parameter, which might be clearer sometimes:</p>\n\n<pre><code>for (var i = 0; i &lt; 3; i++) {\n    funcs[i] = (function() {\n        var index = i;\n        return function() {\n            console.log(\"My value: \" + index);\n        }\n    })();\n}\n</code></pre>\n\n<p>Note that whatever technique you use, the <code>index</code> variable becomes a sort of static variable, bound to the returned copy of the inner function. I.e., changes to its value are preserved between calls. It can be very handy.</p>\n",
    "score": 37,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 964243,
      "name": "Boann",
      "reputation": 31335
    }
  },
  {
    "soID": 37348091,
    "parentID": 9682092,
    "url": "https://stackoverflow.com/q/37348091",
    "title": null,
    "body": "<p>Explaining with Pictures : </p>\n\n<h2>Data-Binding needs a mapping</h2>\n\n<p>The reference in the scope is not exactly the reference   in the template. When you data-bind two objects, you need a third one that listen to the first and modify the other.</p>\n\n<p><a href=\"https://i.stack.imgur.com/zcMvf.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/zcMvf.png\" alt=\"enter image description here\"></a></p>\n\n<p>Here, when you modify the <code>&lt;input&gt;</code>, you touch the <strong>data-ref3</strong>. And the classic data-bind mecanism will change <strong>data-ref4</strong>. So how the other <code>{{data}}</code> expressions will move ?</p>\n\n<h2>Events leads to $digest()</h2>\n\n<p><a href=\"https://i.stack.imgur.com/IYRLT.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/IYRLT.png\" alt=\"enter image description here\"></a></p>\n\n<p>Angular maintains a <code>oldValue</code> and <code>newValue</code> of every binding. And after every <em>Angular event</em>, the famous <code>$digest()</code> loop will wheck the WatchList to see if something changed. These <em>Angular events</em> are <code>ng-click</code>, <code>ng-change</code>, <code>$http</code> completed ...  The <code>$digest()</code> will loop as long as any <code>oldValue</code> differs from the <code>newValue</code>.</p>\n\n<p>In the previous picture, it will notice that data-ref1 and data-ref2 has changed.</p>\n\n<h2>Conclusions</h2>\n\n<p>It's a little like the Egg and Chicken. You never know who starts, but hopefully it works most of the time as expected. </p>\n\n<p>The other point is that you can understand easily the impact deep of a simple binding on the memory and the CPU. Hopefully Desktops are fat enough to handle this. Mobile phones are not that strong.</p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 968988,
      "name": "Nicolas Zozol",
      "reputation": 3645
    }
  },
  {
    "soID": 33213161,
    "parentID": 22343224,
    "url": "https://stackoverflow.com/q/33213161",
    "title": null,
    "body": "<p>Hat matching may be considered \"broken\" because it wont update <code>^0.1.2</code> to <code>0.2.0</code>. When the software is emerging use <code>0.x.y</code> versions and hat matching will only match the last varying digit (<code>y</code>). This is done on purpose. The reason is that while the software is evolving the API changes rapidly: one day you have these methods and the other day you have those methods and the old ones are gone. If you don't want to break the code for people who already are using your library you go and increment the major version: e.g. <code>1.0.0</code> -> <code>2.0.0</code> -> <code>3.0.0</code>. So, by the time your software is finally 100% done and full-featured it will be like version <code>11.0.0</code> and that doesn't look very meaningful, and actually looks confusing. If you were, on the other hand, using <code>0.1.x</code> -> <code>0.2.x</code> -> <code>0.3.x</code> versions then by the time the software is finally 100% done and full-featured it is released as version <code>1.0.0</code> and it means \"This release is a long-term service one, you can proceed and use this version of the library in your production code, and the author won't change everything tomorrow, or next month, and he won't abandon the package\".</p>\n\n<p>The rule is: use <code>0.x.y</code> versioning when your software hasn't yet matured and release it with incrementing the middle digit when your public API changes (therefore people having <code>^0.1.0</code> won't get <code>0.2.0</code> update and it won't break their code). Then, when the software matures, release it under <code>1.0.0</code> and increment the leftmost digit each time your public API changes (therefore people having <code>^1.0.0</code> won't get <code>2.0.0</code> update and it won't break their code).</p>\n\n<pre><code>Given a version number MAJOR.MINOR.PATCH, increment the:\n\nMAJOR version when you make incompatible API changes,\nMINOR version when you add functionality in a backwards-compatible manner, and\nPATCH version when you make backwards-compatible bug fixes.\n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 970769,
      "name": "asdfasdfads",
      "reputation": 1211
    }
  },
  {
    "soID": 18206723,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/18206723",
    "title": null,
    "body": "<h1>Stdio Library</h1>\n\n<p>The easiest way to parse command-line arguments in NodeJS is using the <a href=\"http://sgmonda.github.io/stdio/\">stdio</a> module. Inspired by UNIX <code>getopt</code> utility, it is as trivial as follows:</p>\n\n<pre><code>var stdio = require('stdio');\nvar ops = stdio.getopt({\n    'check': {key: 'c', args: 2, description: 'What this option means'},\n    'map': {key: 'm', description: 'Another description'},\n    'kaka': {args: 1, mandatory: true},\n    'ooo': {key: 'o'}\n});\n</code></pre>\n\n<p>If you run the previous code with this command:</p>\n\n<pre><code>node &lt;your_script.js&gt; -c 23 45 --map -k 23 file1 file2\n</code></pre>\n\n<p>Then <code>ops</code> object will be as follows:</p>\n\n<pre><code>{ check: [ '23', '45' ],\n  args: [ 'file1', 'file2' ],\n  map: true,\n  kaka: '23' }\n</code></pre>\n\n<p>So you can use it as you want. For instance:</p>\n\n<pre><code>if (ops.kaka &amp;&amp; ops.check) {\n    console.log(ops.kaka + ops.check[0]);\n}\n</code></pre>\n\n<p>Grouped options are also supported, so you can write <code>-om</code> instead of <code>-o -m</code>.</p>\n\n<p>Furthermore, <code>stdio</code> can generate a help/usage output automatically. If you call <code>ops.printHelp()</code> you'll get the following:</p>\n\n<pre><code>USAGE: node something.js [--check &lt;ARG1&gt; &lt;ARG2&gt;] [--kaka] [--ooo] [--map]\n  -c, --check &lt;ARG1&gt; &lt;ARG2&gt;   What this option means (mandatory)\n  -k, --kaka                  (mandatory)\n  --map                       Another description\n  -o, --ooo\n</code></pre>\n\n<p>The previous message is shown also if a mandatory option is not given (preceded by the error message) or if it is mispecified (for instance, if you specify a single arg for an option and it needs 2).</p>\n\n<p>You can install <a href=\"http://sgmonda.github.io/stdio/\">stdio</a> module using <a href=\"https://npmjs.org/\">NPM</a>:</p>\n\n<pre><code>npm install stdio\n</code></pre>\n",
    "score": 31,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 972197,
      "name": "sgmonda",
      "reputation": 1227
    }
  },
  {
    "soID": 10407953,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/10407953",
    "title": null,
    "body": "<p>A couple of minor notes and tweaks on the previous regexes:</p>\n\n<p>You'll want to do it globally in case the class list has the class name more than once. And, you'll probably want to strip spaces from the ends of the class list and convert multiple spaces to one space to keep from getting runs of spaces. None of these things should be a problem if the only code dinking with the class names uses the regex below and removes a name before adding it. But. Well, who knows who might be dinking with the class name list.</p>\n\n<p>This regex is case insensitive so that bugs in class names may show up before the code is used on a browser that doesn't care about case in class names.</p>\n\n<pre><code>var s = \"testing   one   four  one  two\";\nvar cls = \"one\";\nvar rg          = new RegExp(\"(^|\\\\s+)\" + cls + \"(\\\\s+|$)\", 'ig');\nalert(\"[\" + s.replace(rg, ' ') + \"]\");\nvar cls = \"test\";\nvar rg          = new RegExp(\"(^|\\\\s+)\" + cls + \"(\\\\s+|$)\", 'ig');\nalert(\"[\" + s.replace(rg, ' ') + \"]\");\nvar cls = \"testing\";\nvar rg          = new RegExp(\"(^|\\\\s+)\" + cls + \"(\\\\s+|$)\", 'ig');\nalert(\"[\" + s.replace(rg, ' ') + \"]\");\nvar cls = \"tWo\";\nvar rg          = new RegExp(\"(^|\\\\s+)\" + cls + \"(\\\\s+|$)\", 'ig');\nalert(\"[\" + s.replace(rg, ' ') + \"]\");\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 972805,
      "name": "Alex Robinson",
      "reputation": 341
    }
  },
  {
    "soID": 22687419,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/22687419",
    "title": null,
    "body": "<p>Strict mode makes several changes to normal JavaScript semantics:</p>\n\n<ul>\n<li><p>eliminates some JavaScript silent errors by changing them\nto throw errors.</p></li>\n<li><p>fixes mistakes that make it difficult for JavaScript\nengines to perform optimizations.</p></li>\n<li><p>prohibits some syntax likely to be defined in future\nversions of ECMAScript.</p></li>\n</ul>\n\n<p>for more information vistit <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\">Strict Mode- Javascript</a></p>\n",
    "score": 38,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 972950,
      "name": "Renganathan M G",
      "reputation": 1637
    }
  },
  {
    "soID": 25645770,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/25645770",
    "title": null,
    "body": "<p>I recommend using <strong><a href=\"https://highlightjs.org\" rel=\"nofollow\">HighlightJS</a></strong>. It uses the <strong>same principle</strong> as the accepted answer, but works also for <strong>many other languages</strong>, and has <strong>many pre-defined colour schemes</strong>. If using <a href=\"http://requirejs.org/\" rel=\"nofollow\">RequireJS</a>, you can generate a compatible module with</p>\n\n<pre><code>python3 tools/build.py -tamd json xml &lt;specify other language here&gt;\n</code></pre>\n\n<p>Generation relies on Python3 and Java. Add <code>-n</code> to generate a non-minified version.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 974531,
      "name": "Rok Strniša",
      "reputation": 4107
    }
  },
  {
    "soID": 19130296,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/19130296",
    "title": null,
    "body": "<p>If you are using Datatable JQuery plugin you can try.</p>\n\n<pre><code>oTable = $('#tblStateFeesSetup').dataTable({\n            \"bScrollCollapse\": true,\n            \"bJQueryUI\": true,\n            ...\n            ...\n            //Custom Initializations.\n            });\n\n//Data Row Template of the table.\nvar dataRowTemplate = {};\ndataRowTemplate.InvoiceID = '';\ndataRowTemplate.InvoiceDate = '';\ndataRowTemplate.IsOverRide = false;\ndataRowTemplate.AmountOfInvoice = '';\ndataRowTemplate.DateReceived = '';\ndataRowTemplate.AmountReceived = '';\ndataRowTemplate.CheckNumber = '';\n\n//Add dataRow to the table.\noTable.fnAddData(dataRowTemplate);\n</code></pre>\n\n<p>Refer Datatables fnAddData <a href=\"http://datatables.net/api\" rel=\"nofollow\">Datatables API</a></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 976188,
      "name": "Praveena M",
      "reputation": 110
    }
  },
  {
    "soID": 17495829,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/17495829",
    "title": null,
    "body": "<p>I strongly recommend every developer to start using strict mode now. There are enough browsers supporting it that strict mode will legitimately help save us from errors we didn’t even know were in your code.</p>\n\n<p>Apparently, at the initial stage there will be errors we have never encountered before. To get the full benefit, we need to do proper testing after switching to strict mode to make sure we have caught everything. Definitely we don’t just throw <code>use strict</code> in our code and assume there are no errors. So the churn is that it’s time to start using this incredibly useful language feature to write better code.</p>\n\n<p>For example,</p>\n\n<pre><code>var person = {\n    name : 'xyz',\n    position : 'abc',\n    fullname : function () {  \"use strict\"; return this.name; }\n};\n</code></pre>\n\n<p><a href=\"http://www.jslint.com/\" rel=\"noreferrer\">JSLint</a> is a debugger written by Douglas Crockford. Simply paste in your script, and it’ll quickly scan for any noticeable issues and errors in your code.</p>\n",
    "score": 101,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 983624,
      "name": "Pank",
      "reputation": 5505
    }
  },
  {
    "soID": 31185447,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/31185447",
    "title": null,
    "body": "<p>IE8 does Not support freeze() method.<br>\nSource: <a href=\"http://kangax.github.io/compat-table/es5/\" rel=\"nofollow\">http://kangax.github.io/compat-table/es5/</a>, Click on \"Show obsolete browsers?\" on top, and check IE8 &amp; freeze row col intersection.</p>\n\n<p>In my current game project, I have used below, since few customers still use IE8:</p>\n\n<pre><code>var CONST_WILD_TYPES = {\n    REGULAR: 'REGULAR',\n    EXPANDING: 'EXPANDING',\n    STICKY: 'STICKY',\n    SHIFTING: 'SHIFTING'\n};\n</code></pre>\n\n<p>We could also do:  </p>\n\n<pre><code>var CONST_WILD_TYPES = {\n    REGULAR: 'RE',\n    EXPANDING: 'EX',\n    STICKY: 'ST',\n    SHIFTING: 'SH'\n};\n</code></pre>\n\n<p>or even this:  </p>\n\n<pre><code>var CONST_WILD_TYPES = {\n    REGULAR: '1',\n    EXPANDING: '2',\n    STICKY: '3',\n    SHIFTING: '4'\n};\n</code></pre>\n\n<p>The last one, seems most efficient for string, it reduces your total bandwidth if you have server &amp; client exchanging this data.<br>\nOf course, now it's your duty to make sure there are no conflicts in the data (RE, EX, etc. must be unique, also 1, 2, etc. should be unique). Note that you need to maintain these forever for backward compatibility.  </p>\n\n<p>Assignment:</p>\n\n<pre><code>var wildType = CONST_WILD_TYPES.REGULAR;\n</code></pre>\n\n<p>Comparision:</p>\n\n<pre><code>if (wildType === CONST_WILD_TYPES.REGULAR) {\n    // do something here\n}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 984471,
      "name": "Manohar Reddy Poreddy",
      "reputation": 1586
    }
  },
  {
    "soID": 27827538,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/27827538",
    "title": null,
    "body": "<p>There are many fantastic answers here, but for me, what worked most simply wasn't removing my element from the array completely but simply setting the value of it to null. This works for most cases I have, and is a good solution since I will be using the variable later and don't want it gone, just empty for now. Also, this approach is completely cross-browser compatible.</p>\n\n<pre><code>array.key = null;\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 988683,
      "name": "rncrtr",
      "reputation": 2074
    }
  },
  {
    "soID": 21447823,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/21447823",
    "title": null,
    "body": "<p>In <a href=\"http://en.wikipedia.org/wiki/CoffeeScript\" rel=\"nofollow\">CoffeeScript</a>:</p>\n\n<pre><code>my_array.splice(idx, 1) for ele, idx in my_array when ele is this_value\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 992767,
      "name": "Nigel Sheridan-Smith",
      "reputation": 353
    }
  },
  {
    "soID": 17299889,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/17299889",
    "title": null,
    "body": "<p>The most simple solution would be</p>\n\n<p>instead of using this</p>\n\n<pre><code>var funcs = [];\nfor(var i =0; i&lt;3; i++){\n    funcs[i] = function(){\n        alert(i);\n    }\n}\n\nfor(var j =0; j&lt;3; j++){\n    funcs[j]();\n}\n</code></pre>\n\n<p>which which alters \"2\", for 3 times. This is because anonymous functions created in for loop, shares same closure, and in that closure, the value of i is the same. Use this to prevent shared closure,</p>\n\n<pre><code>var funcs = [];\nfor(var new_i =0; new_i&lt;3; new_i++){\n    (function(i){\n        funcs[i] = function(){\n            alert(i);\n        }\n    })(new_i);\n}\n\nfor(var j =0; j&lt;3; j++){\n    funcs[j]();\n}\n</code></pre>\n\n<p>The idea behind this is, encapsulating the entire body of the for loop with a <a href=\"https://en.wikipedia.org/wiki/Immediately-invoked_function_expression\">IIFE</a> (Immediately-Invoked Function Expression) and passing \"new_i\" as a parameter and capturing it as \"i\". Since the anonymous function is executed immediately, the \"i\" value is different for each function defined inside anonymous function. This solution seems to fit any such problem, since it will require minimum changes to original code suffering from this issue. In fact this is by design, it should not be an issue at all!</p>\n",
    "score": 30,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1010916,
      "name": "Kemal Dağ",
      "reputation": 2159
    }
  },
  {
    "soID": 22211322,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/22211322",
    "title": null,
    "body": "<p>The main issue with the code shown by the OP is that <code>i</code> is never read until the second loop. To demonstrate, imagine seeing an error inside of the code</p>\n\n<pre><code>funcs[i] = function() {            // and store them in funcs\n    throw new Error(\"test\");\n    console.log(\"My value: \" + i); // each should log its value.\n};\n</code></pre>\n\n<p>The error actually does not occur until <code>funcs[someIndex]</code> is executed <code>()</code>. Using this same logic, it should be apparent that the value of <code>i</code> is also not collected until this point either. Once the original loop finishes, <code>i++</code> brings <code>i</code> to the value of <code>3</code> which results in the condition <code>i &lt; 3</code> failing and the loop ending. At this point, <code>i</code> is <code>3</code> and so when <code>funcs[someIndex]()</code> is used, and <code>i</code> is evaluated, it is 3 - every time.</p>\n\n<p>To get past this, you must evaluate <code>i</code> as it is encountered. Note that this has already happened in the form of <code>funcs[i]</code> (where there are 3 unique indexes). There are several ways to capture this value. One is to pass it in as a parameter to a function which is shown in several ways already here. </p>\n\n<p>Another option is to construct a function object which will be able to close over the variable. That can be accomplished thusly</p>\n\n<p><em><strong><a href=\"http://jsfiddle.net/QcUjH/\"><code>jsFiddle Demo</code></a></em></strong></p>\n\n<pre><code>funcs[i] = new function() {   \n    var closedVariable = i;\n    return function(){\n        console.log(\"My value: \" + closedVariable); \n    };\n};\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1026459,
      "name": "Travis J",
      "reputation": 56451
    }
  },
  {
    "soID": 8748357,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/8748357",
    "title": null,
    "body": "<p>Wow, surprised there are so many overkill answers here...</p>\n\n<pre><code>&lt;div class=\"firstClass\" onclick=\"this.className='secondClass'\"&gt;\n</code></pre>\n",
    "score": 45,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1026459,
      "name": "Travis J",
      "reputation": 56451
    }
  },
  {
    "soID": 41023816,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/41023816",
    "title": null,
    "body": "<p>JavaScript functions \"close over\" the scope they have access to upon declaration, and retain access to that scope even as variables in that scope change.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var funcs = []\r\n\r\nfor (var i = 0; i &lt; 3; i += 1) {\r\n  funcs[i] = function () {\r\n    console.log(i)\r\n  }\r\n}\r\n\r\nfor (var k = 0; k &lt; 3; k += 1) {\r\n  funcs[k]()\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Each function in the array above closes over the global scope (global, simply because that happens to be the scope they're declared in).</p>\n\n<p>Later those functions are invoked logging the most current value of <code>i</code> in the global scope. That's the magic, and frustration, of closure.</p>\n\n<p><strong>\"JavaScript Functions close over the scope they are declared in, and retain access to that scope even as variable values inside of that scope change.\"</strong></p>\n\n<p>Using <code>let</code> instead of <code>var</code> solves this by creating a new scope each time the <code>for</code> loop runs, creating a separated scope for each function to close over. Various other techniques do the same thing with extra functions.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var funcs = []\r\n\r\nfor (let i = 0; i &lt; 3; i += 1) {\r\n  funcs[i] = function () {\r\n    console.log(i)\r\n  }\r\n}\r\n\r\nfor (var k = 0; k &lt; 3; k += 1) {\r\n  funcs[k]()\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>(<code>let</code> makes variables that are block scoped instead of function scoped. Blocks are denoted by curly braces, but in the case of the for loop the initialization variable, <code>i</code> in our case, is considered to be declared in the braces.)</p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1027004,
      "name": "Costa",
      "reputation": 2514
    }
  },
  {
    "soID": 33721704,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/33721704",
    "title": null,
    "body": "<p><a href=\"https://github.com/75lb/command-line-args/\" rel=\"noreferrer\">command-line-args</a> is worth a look!</p>\n\n<p>You can set options using the main notation standards (getopt, getopt_long, etc.). These commands are all equivalent, setting the same values:</p>\n\n<pre><code>$ example --verbose --timeout=1000 --src one.js --src two.js\n$ example --verbose --timeout 1000 --src one.js two.js\n$ example -vt 1000 --src one.js two.js\n$ example -vt 1000 one.js two.js\n</code></pre>\n\n<p>To access the values, first describe the options your app accepts (see option definitions).</p>\n\n<pre><code>const commandLineArgs = require('command-line-args')\n\nconst optionDefinitions = [\n  { name: 'verbose', alias: 'v', type: Boolean },\n  { name: 'src', type: String, multiple: true, defaultOption: true },\n  { name: 'timeout', alias: 't', type: Number }\n]\n</code></pre>\n\n<p>The <code>type</code> property is a setter function (the value supplied is passed through this), giving you full control over the value received.</p>\n\n<p>Next, parse the options using commandLineArgs:</p>\n\n<pre><code>const options = commandLineArgs(optionDefinitions)\n</code></pre>\n\n<p><code>options</code> now looks like this:</p>\n\n<pre><code>{\n  files: [\n    'one.js',\n    'two.js'\n  ],\n  verbose: true,\n  timeout: 1000\n}\n</code></pre>\n\n<p>When dealing with large amounts of options it often makes sense to group them.</p>\n\n<p>A usage guide can be generated using <a href=\"https://github.com/75lb/command-line-usage\" rel=\"noreferrer\">command-line-usage</a>, for example:</p>\n\n<p><img src=\"https://raw.githubusercontent.com/75lb/command-line-usage/master/example/screens/footer.png\" alt=\"usage\"></p>\n\n<h3>Notation rules</h3>\n\n<p>Notation rules for setting command-line options.</p>\n\n<ul>\n<li>Argument order is insignificant. Whether you set <code>--example</code> at the beginning or end of the arg list makes no difference.</li>\n<li>Options with a type of <code>Boolean</code> do not need to supply a value. Setting <code>--flag</code> or <code>-f</code> will set that option's value to <code>true</code>. This is the only type with special behaviour.</li>\n<li>Three ways to set an option value\n\n<ul>\n<li><code>--option value</code></li>\n<li><code>--option=value</code></li>\n<li><code>-o value</code></li>\n</ul></li>\n<li>Two ways to a set list of values (on options with multiple set)\n\n<ul>\n<li><code>--list one two three</code></li>\n<li><code>--list one --list two --list three</code></li>\n</ul></li>\n<li>Short options (alias) can be set in groups. The following are equivalent:\n\n<ul>\n<li><code>-a -b -c</code></li>\n<li><code>-abc</code></li>\n</ul></li>\n</ul>\n\n<h3>Ambiguous values</h3>\n\n<p>Imagine we are using \"grep-tool\" to search for the string <code>'-f'</code>:</p>\n\n<pre><code>$ grep-tool --search -f\n</code></pre>\n\n<p>We have an issue here: command-line-args will assume we are setting two options (<code>--search</code> and <code>-f</code>). In actuality, we are passing one option (<code>--search</code>) and one value (<code>-f</code>). In cases like this, avoid ambiguity by using <code>--option=value</code> notation:</p>\n\n<pre><code>$ grep-tool --search=-f\n</code></pre>\n\n<h3>Partial parsing</h3>\n\n<p>By default, if the user sets an option without a valid definition an <code>UNKNOWN_OPTION</code> exception is thrown. However, in some cases you may only be interested in a subset of the options wishing to pass the remainder to another library. See <a href=\"https://github.com/75lb/command-line-args/blob/master/example/mocha.js\" rel=\"noreferrer\">here</a> for a example showing where this might be necessary.</p>\n\n<p>To enable partial parsing, set <code>partial: true</code> in the method options:</p>\n\n<pre><code>const optionDefinitions = [\n  { name: 'value', type: Number }\n]\nconst options = commandLineArgs(optionDefinitions, { partial: true })\n</code></pre>\n\n<p>Now, should any unknown args be passed at the command line:</p>\n\n<pre><code>$ example --milk --value 2 --bread cheese\n</code></pre>\n\n<p>They will be returned in the <code>_unknown</code> property of the <code>commandLineArgs</code> output with no exceptions thrown:</p>\n\n<pre><code>{\n  value: 2,\n  _unknown: [ '--milk', '--bread', 'cheese']\n}\n</code></pre>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1029644,
      "name": "Lloyd",
      "reputation": 5570
    }
  },
  {
    "soID": 14334133,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/14334133",
    "title": null,
    "body": "<p>You can check the type of your variable whether it is an array with;</p>\n\n<pre><code>var myArray=[];\n\nif(myArray instanceof Array)\n{\n....\n}\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1029816,
      "name": "Ahmet DAL",
      "reputation": 2009
    }
  },
  {
    "soID": 24777533,
    "parentID": 5874652,
    "url": "https://stackoverflow.com/q/24777533",
    "title": null,
    "body": "<p><strong>TL;DR</strong></p>\n\n<p>Use <code>prop()</code> over <code>attr()</code> in the majority of cases.</p>\n\n<p>A <em>property</em> is the current state of the input element. An <em>attribute</em> is the default value.</p>\n\n<p>A property can contain things of different types. An attribute can only contain strings</p>\n",
    "score": 36,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1042427,
      "name": "agjmills",
      "reputation": 546
    }
  },
  {
    "soID": 40884178,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/40884178",
    "title": null,
    "body": "<p>Use the <code>.on()</code> method of jQuery <a href=\"http://api.jquery.com/on/\" rel=\"nofollow noreferrer\">http://api.jquery.com/on/</a> to attach event handlers to live element.</p>\n\n<p>Also as of version 1.9 <code>.live()</code> method is removed.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1044026,
      "name": "Kalpesh Patel",
      "reputation": 2058
    }
  },
  {
    "soID": 45430125,
    "parentID": 596351,
    "url": "https://stackoverflow.com/q/45430125",
    "title": null,
    "body": "<p><strong>DEMO</strong> : <a href=\"https://jsfiddle.net/ipsjolly/xygr065w/\" rel=\"nofollow noreferrer\">https://jsfiddle.net/ipsjolly/xygr065w/</a></p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;table&gt;\n   &lt;tr&gt;\n     &lt;td&gt;Sales Promotion&lt;/td&gt;\n     &lt;td&gt;&lt;input type=\"radio\" name=\"q12_3\" value=\"1\"&gt;1&lt;/td&gt;\n     &lt;td&gt;&lt;input type=\"radio\" name=\"q12_3\" value=\"2\"&gt;2&lt;/td&gt;\n     &lt;td&gt;&lt;input type=\"radio\" name=\"q12_3\" value=\"3\"&gt;3&lt;/td&gt;\n     &lt;td&gt;&lt;input type=\"radio\" name=\"q12_3\" value=\"4\"&gt;4&lt;/td&gt;\n     &lt;td&gt;&lt;input type=\"radio\" name=\"q12_3\" value=\"5\"&gt;5&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>submit</p>\n\n<p><strong>JQuery</strong></p>\n\n<pre><code>$(function(){\n    $(\"#submit\").click(function(){      \n        alert($('input:radio:checked').val());\n    });\n });\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1045296,
      "name": "jolly.exe",
      "reputation": 2348
    }
  },
  {
    "soID": 8586344,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/8586344",
    "title": null,
    "body": "<p>You can use the live() method to bind elements (even newly created ones) to events and handlers, like the onclick event.</p>\n\n<p>Here is a sample code I have written, where you can see how the live() method binds chosen elements, even newly created ones, to events:</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n    &lt;head&gt;\n        &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\n        &lt;title&gt;Untitled Document&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;script src=\"http://code.jquery.com/jquery-latest.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"http://ajax.aspnetcdn.com/ajax/jquery.ui/1.8.16/jquery-ui.min.js\"&gt;&lt;/script&gt;\n\n        &lt;input type=\"button\" id=\"theButton\" value=\"Click\" /&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            $(document).ready(function()\n                {\n                    $('.FOO').live(\"click\", function (){alert(\"It Works!\")});\n                    var $dialog = $('&lt;div&gt;&lt;/div&gt;').html('&lt;div id=\"container\"&gt;&lt;input type =\"button\" id=\"CUSTOM\" value=\"click\"/&gt;This dialog will show every time!&lt;/div&gt;').dialog({\n                                                                                                         autoOpen: false,\n                                                                                                         tite: 'Basic Dialog'\n                                                                                                     });\n                    $('#theButton').click(function()\n                    {\n                        $dialog.dialog('open');\n                        return('false');\n                    });\n                    $('#CUSTOM').click(function(){\n                        //$('#container').append('&lt;input type=\"button\" value=\"clickmee\" class=\"FOO\" /&gt;&lt;/br&gt;');\n                        var button = document.createElement(\"input\");\n                        button.setAttribute('class','FOO');\n                        button.setAttribute('type','button');\n                        button.setAttribute('value','CLICKMEE');\n                        $('#container').append(button);\n                    });\n                    /* $('#FOO').click(function(){\n                                                     alert(\"It Works!\");\n                                                 }); */\n            });\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1063991,
      "name": "Fazi",
      "reputation": 2323
    }
  },
  {
    "soID": 8428872,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/8428872",
    "title": null,
    "body": "<p>This is working for me:</p>\n\n<pre><code>function setCSS(eleID) {\n    var currTabElem = document.getElementById(eleID);\n\n    currTabElem.setAttribute(\"class\", \"some_class_name\");\n    currTabElem.setAttribute(\"className\", \"some_class_name\");\n}\n</code></pre>\n",
    "score": 27,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1070666,
      "name": "Gopal Krishna Ranjan",
      "reputation": 578
    }
  },
  {
    "soID": 36540678,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/36540678",
    "title": null,
    "body": "<p><strong>Vanilla JavaScript</strong></p>\n\n<p><em>Browser support: <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_9\" rel=\"nofollow\">Internet&nbsp;Explorer&nbsp;9</a> or later (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Browser_compatibility\" rel=\"nofollow\">detailed browser support</a>)</em></p>\n\n<pre><code>/**\n * Remove item from array\n *\n * Modifies the array “in place”, i.e. the array passed as an argument\n * is modified as opposed to creating a new array. Also returns the modified\n * array for your convenience.\n */\nfunction removeFromArray(array, item) {\n    var itemIndex;\n\n    // Look for the item (the item can have multiple indices)\n    itemIndex = array.indexOf(item);\n\n    while (itemIndex !== -1) {\n        // Remove the item, then return the modified array\n        array.splice(itemIndex, 1);\n\n        itemIndex = array.indexOf(item);\n    }\n\n    // Return the modified array\n    return array;\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1071200,
      "name": "LayZee",
      "reputation": 949
    }
  },
  {
    "soID": 32904224,
    "parentID": 5404839,
    "url": "https://stackoverflow.com/q/32904224",
    "title": null,
    "body": "<p>As the question is generic, let's try to sum up possible solutions for the answer:</p>\n\n<p><strong>Simple plain JavaScript Solution</strong>:</p>\n\n<p>The easiest way is a one line solution placed in an appropriate way:</p>\n\n<pre><code>location.reload();\n</code></pre>\n\n<p>What many people are missing here, because they hope to get some \"points\" is that the reload() function itself offers a Boolean as a parameter (details: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Location/reload\">https://developer.mozilla.org/en-US/docs/Web/API/Location/reload</a>).</p>\n\n<blockquote>\n  <p>The Location.reload() method reloads the resource from the current\n  URL. Its optional unique parameter is a Boolean, which, when it is\n  true, causes the page to always be reloaded from the server. If it is\n  false or not specified, the browser may reload the page from its\n  cache.</p>\n</blockquote>\n\n<p>This means there are two ways:</p>\n\n<p>Solution1: <strong>Force reloading the current page from the server</strong></p>\n\n<pre><code>location.reload(true);\n</code></pre>\n\n<p>Solution2: <strong>Reloading from cache or server (based on browser and your config)</strong></p>\n\n<pre><code>location.reload(false);\nlocation.reload();\n</code></pre>\n\n<p>And if you want to combine it with jQuery an listening to an event, I would recommend using the \".on()\" method instead of \".click\" or other event wrappers, e.g. a more proper solution would be:</p>\n\n<pre><code>$('#reloadIt').on('eventXyZ', function() {\n    location.reload(true);\n});\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1071432,
      "name": "Fer To",
      "reputation": 865
    }
  },
  {
    "soID": 21688894,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/21688894",
    "title": null,
    "body": "<p>You can do it easily with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">filter</a> method:</p>\n\n<pre><code>function remove(arrOriginal, elementToRemove){\n    return arrOriginal.filter(function(el){return el !== elementToRemove});\n}\nconsole.log( remove([1, 2, 1, 0, 3, 1, 4], 1) );\n</code></pre>\n\n<p>This removes all elements from the array and also works faster then combination of slice and indexOf</p>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1090562,
      "name": "Salvador Dali",
      "reputation": 71325
    }
  },
  {
    "soID": 20592159,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/20592159",
    "title": null,
    "body": "<p>There is a nice example in Stoyan Stefanov's book <a href=\"http://rads.stackoverflow.com/amzn/click/0596806752\" rel=\"nofollow\">JavaScript Patterns</a> which suppose to handle all possible problems as well as utilize ECMAScript 5 method <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\" rel=\"nofollow\">Array.isArray()</a>.</p>\n\n<p>So here it is:</p>\n\n<pre><code>if (typeof Array.isArray === \"undefined\") {\n    Array.isArray = function (arg) {\n        return Object.prototype.toString.call(arg) === \"[object Array]\";\n    };\n}\n</code></pre>\n\n<p>By the way, if you are using jQuery, you can use it's method <a href=\"http://api.jquery.com/jQuery.isArray/\" rel=\"nofollow\">$.isArray()</a></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1090562,
      "name": "Salvador Dali",
      "reputation": 71325
    }
  },
  {
    "soID": 11768171,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/11768171",
    "title": null,
    "body": "<p>I'm using this:</p>\n\n<pre><code>    $.fn.ifExists = function(fn) {\n      if (this.length) {\n        $(fn(this));\n      }\n    };\n    $(\"#element\").ifExists( \n      function($this){\n        $this.addClass('someClass').animate({marginTop:20},function(){alert('ok')});               \n      }\n    ); \n</code></pre>\n\n<p>Execute the chain only if a jQuery element exist  - <a href=\"http://jsfiddle.net/andres_314/vbNM3/2/\">http://jsfiddle.net/andres_314/vbNM3/2/</a></p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1101503,
      "name": "andy_314",
      "reputation": 194
    }
  },
  {
    "soID": 23427665,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/23427665",
    "title": null,
    "body": "<p>Too old to reply, but may it help someone, by providing a predicate instead of a value.</p>\n\n<p><strong>NOTE:</strong> it will update the given array, and return affected rows</p>\n\n<h2>Usage</h2>\n\n<pre><code>var removed = helper.removeOne(arr, row =&gt; row.id === 5 );\n\nvar removed = helper.remove(arr, row =&gt; row.name.startsWith('BMW'));\n</code></pre>\n\n<h2>Definition</h2>\n\n<pre><code>var helper = {\n\n    // Remove and return the first occurrence     \n\n    removeOne: function(array, predicate) {\n        for (var i = 0; i &lt; array.length; i++) {\n            if (predicate(array[i])) {\n                return array.splice(i, 1);\n            }\n        }\n    },\n\n    // Remove and return all occurrences  \n\n    remove: function(array, predicate) {\n        var removed = [];\n\n        for (var i = 0; i &lt; array.length;) {\n\n            if (predicate(array[i])) {\n                removed.push(array.splice(i, 1));\n                continue;\n            }\n\n            i++;                \n        }\n\n        return removed;\n    }\n};\n</code></pre>\n",
    "score": 36,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1104402,
      "name": "amd",
      "reputation": 10672
    }
  },
  {
    "soID": 43309349,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/43309349",
    "title": null,
    "body": "<p>ECMAScript5 (the version on Javascript) to work with Arrays.</p>\n\n<p><strong>forEach</strong> - Iterates through every item in the array and do whatever you need with each item.</p>\n\n<pre><code>['C', 'D', 'E'].forEach(function(element, index) {\n  console.log(element + \" is the #\" + (index+1) + \" in musical scale\");\n});\n\n// Output\n// C is the #1 in musical scale\n// D is the #2 in musical scale\n// E is the #3 in musical scale\n</code></pre>\n\n<p>In case , more interested on operation on array using some inbuilt feature.</p>\n\n<p><strong>map</strong> - It creates a new array with the result of the callback function. This method is good to be used when you need to format the elements of your array.</p>\n\n<pre><code>// Let's upper case the items in the array\n['bob', 'joe', 'jen'].map(function(elem) {\n  return elem.toUpperCase();\n});\n\n// Output: ['BOB', 'JOE', 'JEN']\n</code></pre>\n\n<p><strong>reduce</strong> - As the name says it reduces the array to a single value by calling the given function passing in the currenct element and the result of the previous execution.</p>\n\n<pre><code>[1,2,3,4].reduce(function(previous, current) {\n  return previous + current;\n});\n// Output: 10\n// 1st iteration: previous=1, current=2 =&gt; result=3\n// 2nd iteration: previous=3, current=3 =&gt; result=6\n// 3rd iteration: previous=6, current=4 =&gt; result=10\n</code></pre>\n\n<p><strong>every</strong> - Returns true or false if all the elements in the array pass the test in the callback function.</p>\n\n<pre><code>// Check if everybody has 18 years old of more.\nvar ages = [30, 43, 18, 5];  \nages.every(function(elem) {  \n  return elem &gt;= 18;\n});\n\n// Output: false\n</code></pre>\n\n<p><strong>filter</strong> - Very similar to every except that filter return an array with the elements that return true to the given function.</p>\n\n<pre><code>// Finding the even numbers\n[1,2,3,4,5,6].filter(function(elem){\n  return (elem % 2 == 0)\n});\n\n// Output: [2,4,6]\n</code></pre>\n\n<p>Hope this will be useful.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1106366,
      "name": "Student  Arya",
      "reputation": 1110
    }
  },
  {
    "soID": 11384018,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/11384018",
    "title": null,
    "body": "<p>This is a trick,  </p>\n\n<pre><code>function openInNewTab(url) {\n  var win = window.open(url, '_blank');\n  win.focus();\n}\n</code></pre>\n\n<p>In most cases, this should happen directly in the <code>onclick</code> handler for the link to prevent pop-up blockers, and the default \"new window\" behavior. You could do it this way, or by adding an event listener to your <code>DOM</code> object.  </p>\n\n<pre><code>&lt;div onclick=\"openInNewTab('www.test.com');\"&gt;Something To Click On&lt;/div&gt;\n</code></pre>\n\n<p><a href=\"http://www.tutsplanet.com/open-url-new-tab-using-javascript-196/\" rel=\"noreferrer\">http://www.tutsplanet.com/open-url-new-tab-using-javascript-196/</a></p>\n",
    "score": 1024,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1111429,
      "name": "duke",
      "reputation": 14093
    }
  },
  {
    "soID": 38875075,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/38875075",
    "title": null,
    "body": "<p>You can reach command line arguments using <code>system.args</code>. And i use the solution below to parse arguments into an object, so i can get which one i want by name.</p>\n\n<pre><code>var system = require('system');\n\nvar args = {};\nsystem.args.map(function(x){return x.split(\"=\")})\n    .map(function(y){args[y[0]]=y[1]});\n</code></pre>\n\n<p>now you don't need to know the index of the argument. use it like <code>args.whatever</code></p>\n\n<blockquote>\n  <p>Note: you should use named arguments like <code>file.js x=1 y=2</code> to use\n  this solution.</p>\n</blockquote>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1127825,
      "name": "Evren Kutar",
      "reputation": 133
    }
  },
  {
    "soID": 15762329,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/15762329",
    "title": null,
    "body": "<p>Check out this code. It works in every <strong>major browser</strong>.</p>\n\n<pre><code>remove_item = function (arr, value) {\n    var b = '';\n    for (b in arr) {\n        if (arr[b] === value) {\n            arr.splice(b, 1);\n            break;\n        }\n    }\n    return arr;\n}\n</code></pre>\n\n<p>Call this function </p>\n\n<pre><code>remove_item(array,value);\n</code></pre>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1127910,
      "name": "Ekramul Hoque",
      "reputation": 2711
    }
  },
  {
    "soID": 38996905,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/38996905",
    "title": null,
    "body": "<p><strong>Simplest solution:</strong></p>\n\n<h2>Create</h2>\n\n<pre><code>var Status = Object.freeze({\n    \"Connecting\":0,\n    \"Ready\":1,\n    \"Loading\":2,\n    \"Processing\": 3\n});\n</code></pre>\n\n<h2>Get Value</h2>\n\n<pre><code>console.log(Status.Ready) // 1\n</code></pre>\n\n<h2>Get Key</h2>\n\n<pre><code>console.log(Object.keys(Status)[Status.Ready]) // Ready\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1129332,
      "name": "Ilya_Gazman",
      "reputation": 11124
    }
  },
  {
    "soID": 8764974,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/8764974",
    "title": null,
    "body": "<p>Based on <a href=\"https://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects-dynamically/383245#383245\">Markus'</a> and <a href=\"https://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects-dynamically/7965071#7965071\">vsync' answer</a>, this is an expanded version. The function takes any number of arguments. It can be used to set properties on <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\" rel=\"nofollow noreferrer\">DOM</a> nodes and makes deep copies of values. However, the first argument is given by reference.</p>\n\n<p>To detect a DOM node, the isDOMNode() function is used (see Stack&nbsp;Overflow question <em><a href=\"https://stackoverflow.com/a/8736129/1131084\">JavaScript isDOM — How do you check if a JavaScript Object is a DOM Object?</a></em>)</p>\n\n<p>It was tested in <a href=\"http://en.wikipedia.org/wiki/Opera_%28web_browser%29\" rel=\"nofollow noreferrer\">Opera</a> 11, Firefox 6, <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_8\" rel=\"nofollow noreferrer\">Internet&nbsp;Explorer&nbsp;8</a> and Google Chrome 16.</p>\n\n<h2>Code</h2>\n\n<pre><code>function mergeRecursive() {\n\n  // _mergeRecursive does the actual job with two arguments.\n  var _mergeRecursive = function (dst, src) {\n    if (isDOMNode(src) || typeof src !== 'object' || src === null) {\n      return dst;\n    }\n\n    for (var p in src) {\n      if (!src.hasOwnProperty(p))\n        continue;\n      if (src[p] === undefined)\n        continue;\n      if ( typeof src[p] !== 'object' || src[p] === null) {\n        dst[p] = src[p];\n      } else if (typeof dst[p]!=='object' || dst[p] === null) {\n        dst[p] = _mergeRecursive(src[p].constructor===Array ? [] : {}, src[p]);\n      } else {\n        _mergeRecursive(dst[p], src[p]);\n      }\n    }\n    return dst;\n  }\n\n  // Loop through arguments and merge them into the first argument.\n  var out = arguments[0];\n  if (typeof out !== 'object' || out === null)\n    return out;\n  for (var i = 1, il = arguments.length; i &lt; il; i++) {\n    _mergeRecursive(out, arguments[i]);\n  }\n  return out;\n}\n</code></pre>\n\n<h2>Some examples</h2>\n\n<p>Set innerHTML and style of a HTML Element</p>\n\n<pre><code>mergeRecursive(\n  document.getElementById('mydiv'),\n  {style: {border: '5px solid green', color: 'red'}},\n  {innerHTML: 'Hello world!'});\n</code></pre>\n\n<p>Merge arrays and objects. Note that undefined can be used to preserv values in the lefthand array/object.</p>\n\n<pre><code>o = mergeRecursive({a:'a'}, [1,2,3], [undefined, null, [30,31]], {a:undefined, b:'b'});\n// o = {0:1, 1:null, 2:[30,31], a:'a', b:'b'}\n</code></pre>\n\n<p>Any argument not beeing a JavaScript object (including null) will be ignored. Except for the first argument, also DOM nodes are discarded. Beware that i.e. strings, created like new String() are in fact objects.</p>\n\n<pre><code>o = mergeRecursive({a:'a'}, 1, true, null, undefined, [1,2,3], 'bc', new String('de'));\n// o = {0:'d', 1:'e', 2:3, a:'a'}\n</code></pre>\n\n<p>If you want to merge two objects into a new (without affecting any of the two) supply {} as first argument</p>\n\n<pre><code>var a={}, b={b:'abc'}, c={c:'cde'}, o;\no = mergeRecursive(a, b, c);\n// o===a is true, o===b is false, o===c is false\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 23569745,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/23569745",
    "title": null,
    "body": "<p><img src=\"https://i.stack.imgur.com/oBWFs.png\" alt=\"Example\"></p>\n\n<hr>\n\n<h2><a href=\"http://jsfiddle.net/CL82F/14/\" rel=\"noreferrer\">JSFiddle DEMO</a></h2>\n\n<p>We'll do it using just CSS pseudo selectors! </p>\n\n<p>This technique will work with dynamically generated content and different font sizes and widths.</p>\n\n<p><strong>HTML:</strong></p>\n\n<pre><code>&lt;div class='split-color'&gt;Two is better than one.&lt;/div&gt;\n</code></pre>\n\n<p><strong>CSS:</strong></p>\n\n<pre><code>.split-color &gt; span {\n    white-space: pre-line;\n    position: relative;\n    color: #409FBF;\n}\n\n.split-color &gt; span:before {\n    content: attr(data-content);\n    pointer-events: none;  /* Prevents events from targeting pseudo-element */\n    position: absolute;\n    overflow: hidden;\n    color: #264A73;\n    width: 50%;\n    z-index: 1;\n}\n</code></pre>\n\n<p>To wrap the dynamically generated string, you could use a function like this:</p>\n\n<pre><code>// Wrap each letter in a span tag and return an HTML string\n// that can be used to replace the original text\nfunction wrapString(str) {\n  var output = [];\n  str.split('').forEach(function(letter) {\n    var wrapper = document.createElement('span');\n    wrapper.dataset.content = wrapper.innerHTML = letter;\n\n    output.push(wrapper.outerHTML);\n  });\n\n  return output.join('');\n}\n\n// Replace the original text with the split-color text\nwindow.onload = function() {\n    var el  = document.querySelector('.split-color'),\n        txt = el.innerHTML;\n\n    el.innerHTML = wrapString(txt);\n}\n</code></pre>\n",
    "score": 122,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1139652,
      "name": "wvandaal",
      "reputation": 2758
    }
  },
  {
    "soID": 22507256,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/22507256",
    "title": null,
    "body": "<p>The first answer with best rating is wrong. If value is undefined it will throw an exception in modern browsers. You have to use: </p>\n\n<pre><code>if (typeof(value) !== \"undefined\" &amp;&amp; value)\n</code></pre>\n\n<p>or </p>\n\n<pre><code>if (typeof value  !== \"undefined\" &amp;&amp; value)\n</code></pre>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1140717,
      "name": "krupar",
      "reputation": 255
    }
  },
  {
    "soID": 22216648,
    "parentID": 21692646,
    "url": "https://stackoverflow.com/q/22216648",
    "title": null,
    "body": "<p>Netflix also implements this feature</p>\n\n<pre><code>(function() {\n    try {\n        var $_console$$ = console;\n        Object.defineProperty(window, \"console\", {\n            get: function() {\n                if ($_console$$._commandLineAPI)\n                    throw \"Sorry, for security reasons, the script console is deactivated on netflix.com\";\n                return $_console$$\n            },\n            set: function($val$$) {\n                $_console$$ = $val$$\n            }\n        })\n    } catch ($ignore$$) {\n    }\n})();\n</code></pre>\n\n<p>They just override <code>console._commandLineAPI</code> to throw security error.</p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1154350,
      "name": "Fizer Khan",
      "reputation": 24344
    }
  },
  {
    "soID": 25254106,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/25254106",
    "title": null,
    "body": "<p>The reason all of the previous answers require the <code>.length</code> parameter is that they are mostly using jquery's <code>$()</code> selector which has querySelectorAll behind the curtains (or they are using it directly).  This method is rather slow because it needs to parse the entire DOM tree looking for <strong>all</strong> matches to that selector and populating an array with them.</p>\n\n<p>The ['length'] parameter is not needed or useful and the code will be a lot faster if you directly use <code>document.querySelector(selector)</code> instead, because it returns the first element it matches or null if not found.</p>\n\n<pre><code>function elementIfExists(selector){  //named this way on purpose, see below\n    return document.querySelector(selector);\n}\n/* usage: */\nvar myelement = elementIfExists(\"#myid\") || myfallbackelement;\n</code></pre>\n\n<p>However this method leaves us with the actual object being returned; which is fine if it isn't going to be saved as variable and used repeatedly (thus keeping the reference around if we forget).</p>\n\n<pre><code>var myel=elementIfExists(\"#myid\");\n// now we are using a reference to the element which will linger after removal\nmyel.getParentNode.removeChild(myel);\nconsole.log(elementIfExists(\"#myid\")); /* null */\nconsole.log(myel); /* giant table lingering around detached from document */\nmyel=null; /* now it can be garbage collected */\n</code></pre>\n\n<p>In some cases this may be desired.  It can be used in a for loop like this:</p>\n\n<pre><code>/* locally scoped myel gets garbage collected even with the break; */\nfor (var myel; myel = elementIfExist(sel); myel.getParentNode.removeChild(myel))\n    if (myel == myblacklistedel) break;\n</code></pre>\n\n<p>If you don't actually need the element and want to get/store just a true/false, just double not it !!  It works for shoes that come untied, so why knot here?</p>\n\n<pre><code>function elementExists(selector){\n    return !!document.querySelector(selector);\n}\n/* usage: */\nvar hastables = elementExists(\"table\");  /* will be true or false */\nif (hastables){\n    /* insert css style sheet for our pretty tables */\n}\nsetTimeOut(function (){if (hastables &amp;&amp; !elementExists(\"#mytablecss\"))\n                           alert(\"bad table layouts\");},3000);\n</code></pre>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1162141,
      "name": "technosaurus",
      "reputation": 4856
    }
  },
  {
    "soID": 43928167,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/43928167",
    "title": null,
    "body": "<p><strong>Remove by Index</strong></p>\n\n<p>Function that return a copy of array without the element at index.</p>\n\n<pre><code>/**\n* removeByIndex\n* @param {Array} array\n* @param {Number} index\n*/\nfunction removeByIndex(array, index){\n    return array.filter(function(elem, _index){\n        return index != _index;\n    });\n}\nl = [1,3,4,5,6,7];\nconsole.log(removeByIndex(l, 1));\n\n$&gt; [ 1, 4, 5, 6, 7 ]\n</code></pre>\n\n<p><strong>Remove by Value</strong></p>\n\n<p>Function that return a copy of array without the Value.</p>\n\n<pre><code>/**\n* removeByValue\n* @param {Array} array\n* @param {Number} value\n*/\nfunction removeByValue(array, value){\n    return array.filter(function(elem, _index){\n        return value != elem;\n    });\n}\nl = [1,3,4,5,6,7];\nconsole.log(removeByValue(l, 5));\n\n$&gt; [ 1, 3, 4, 6, 7]\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1162663,
      "name": "nsantana",
      "reputation": 409
    }
  },
  {
    "soID": 9976233,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/9976233",
    "title": null,
    "body": "<p>jQuery also offers an <a href=\"http://api.jquery.com/jQuery.isArray/\"><code>$.isArray()</code></a> method:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var a = [\"A\", \"AA\", \"AAA\"];\r\n\r\nif($.isArray(a)) {\r\n  alert(\"a is an array!\");\r\n} else {\r\n  alert(\"a is not an array!\");\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 263,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1171193,
      "name": "janr",
      "reputation": 2925
    }
  },
  {
    "soID": 34336741,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/34336741",
    "title": null,
    "body": "<p>I prefer to use <code>forEach</code> function, which has its own closure with creating a pseudo range:</p>\n\n<pre><code>var funcs = [];\n\nnew Array(3).fill(0).forEach(function (_, i) { // creating a range\n    funcs[i] = function() {            \n        // now i is safely incapsulated \n        console.log(\"My value: \" + i);\n    };\n});\n\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j](); // 0, 1, 2\n}\n</code></pre>\n\n<p>That looks uglier than ranges in other languages, but IMHO less monstrous than other solutions.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1230175,
      "name": "Rax Wunter",
      "reputation": 1084
    }
  },
  {
    "soID": 16521953,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/16521953",
    "title": null,
    "body": "<p>You can iterate over each <code>array</code>-item and <code>splice</code> it if it exist in your <code>array</code>.</p>\n\n<pre><code>function destroy(arr, val) {\n    for (var i = 0; i &lt; arr.length; i++) if (arr[i] === val) arr.splice(i, 1);\n    return arr;\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1250044,
      "name": "yckart",
      "reputation": 16826
    }
  },
  {
    "soID": 18104035,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/18104035",
    "title": null,
    "body": "<p><strong>Create new array:</strong></p>\n\n<pre><code>var my_array = new Array();\n</code></pre>\n\n<p><strong>Add elements to this array:</strong></p>\n\n<pre><code>my_array.push(\"element1\");\n</code></pre>\n\n<p><strong>The function indexOf (Returns index or -1 when not found) :</strong></p>\n\n<pre><code>var indexOf = function(needle) \n{\n    if(typeof Array.prototype.indexOf === 'function') // newer browsers\n    {\n        indexOf = Array.prototype.indexOf;\n    } \n    else // older browsers\n    {\n        indexOf = function(needle) \n        {\n            var index = -1;\n\n            for(var i = 0; i &lt; this.length; i++) \n            {\n                if(this[i] === needle) \n                {\n                    index = i;\n                    break;\n                }\n            }\n            return index;\n        };\n    }\n\n    return indexOf.call(this, needle);\n};\n</code></pre>\n\n<p><strong>Check index of this element (tested with firefox and IE8+):</strong></p>\n\n<pre><code>var index = indexOf.call(my_array, \"element1\");\n</code></pre>\n\n<p><strong>Remove 1 element located at index from the array</strong></p>\n\n<pre><code>my_array.splice(index, 1);\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1251989,
      "name": "Enrico",
      "reputation": 317
    }
  },
  {
    "soID": 38938209,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/38938209",
    "title": null,
    "body": "<p>Specify a default target for all hyperlinks and forms on a page (non-JavaScript):</p>\n\n<pre><code>&lt;head&gt;\n  &lt;base target=\"_blank\"&gt;\n&lt;/head&gt;\n</code></pre>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1259937,
      "name": "rhodesit",
      "reputation": 25
    }
  },
  {
    "soID": 9643692,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/9643692",
    "title": null,
    "body": "<p>If you use a browser released in the last year or so then it most likely supports JavaScript Strict mode. Only older browsers around before ECMAScript 5 became the current standard don't support it. </p>\n\n<p>The quotes around the command make sure that the code will still work in older browsers as well (although the things that generate a syntax error in strict mode will generally just cause the script to malfunction in some hard to detect way in those older browsers).</p>\n",
    "score": 43,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1260550,
      "name": "Stephen",
      "reputation": 525
    }
  },
  {
    "soID": 20497354,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/20497354",
    "title": null,
    "body": "<p>You can parse all arguments and check if they exist. </p>\n\n<p>file: parse-cli-arguments.js:</p>\n\n<pre><code>module.exports = function(requiredArguments){\n    var arguments = {};\n\n    for (var index = 0; index &lt; process.argv.length; index++) {\n        var re = new RegExp('--([A-Za-z0-9_]+)=([A/-Za-z0-9_]+)'),\n            matches = re.exec(process.argv[index]);\n\n        if(matches !== null) {\n            arguments[matches[1]] = matches[2];\n        }\n    }\n\n    for (var index = 0; index &lt; requiredArguments.length; index++) {\n        if (arguments[requiredArguments[index]] === undefined) {\n            throw(requiredArguments[index] + ' not defined. Please add the argument with --' + requiredArguments[index]);\n        }\n    }\n\n    return arguments;\n}\n</code></pre>\n\n<p>Than just do:</p>\n\n<pre><code>var arguments = require('./parse-cli-arguments')(['foo', 'bar', 'xpto']);\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1263890,
      "name": "Amadu Bah",
      "reputation": 1547
    }
  },
  {
    "soID": 19449827,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/19449827",
    "title": null,
    "body": "<p>An interesting fact is that the new tab can not be opened if the action is not invoked by the user (clicking a button or something) or if it is asynchronous, for example, this will NOT open in new tab:</p>\n\n<pre><code>$.ajax({\n    url: \"url\",\n    type: \"POST\",\n    success: function() {\n        window.open('url', '_blank');              \n    }\n});\n</code></pre>\n\n<p>But this may open in a new tab, depending on browser settings:</p>\n\n<pre><code>$.ajax({\n    url: \"url\",\n    type: \"POST\",\n    async: false,\n    success: function() {\n        window.open('url', '_blank');              \n    }\n});\n</code></pre>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1265753,
      "name": "karaxuna",
      "reputation": 18970
    }
  },
  {
    "soID": 28227547,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/28227547",
    "title": null,
    "body": "<p>The following two are probably a good starting point. lodash also has a customizer function for those special needs!</p>\n\n<p><code>_.extend</code> (<a href=\"http://underscorejs.org/#extend\" rel=\"nofollow\">http://underscorejs.org/#extend</a>) <br/>\n<code>_.merge</code> (<a href=\"https://lodash.com/docs#merge\" rel=\"nofollow\">https://lodash.com/docs#merge</a>)</p>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 9843465,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/9843465",
    "title": null,
    "body": "<p>The best solution I've seen is a cross-browser replacement for typeof. Check Angus Croll's solution <a href=\"https://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/\" rel=\"nofollow\">here</a>.</p>\n\n<p>The TL;DR version is below, but the article is a great discussion of the issue so you should read it if you have time.</p>\n\n<pre><code>Object.toType = function(obj) {\n    return ({}).toString.call(obj).match(/\\s([a-z|A-Z]+)/)[1].toLowerCase();\n}\n// ... and usage:\nObject.toType([1,2,3]); //\"array\" (all browsers)\n\n// or to test...\nvar shouldBeAnArray = [1,2,3];\nif(Object.toType(shouldBeAnArray) === 'array'){/* do stuff */};\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1288769,
      "name": "John Wundes",
      "reputation": 41
    }
  },
  {
    "soID": 37049830,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/37049830",
    "title": null,
    "body": "<p>And yet another solution: instead of creating another loop, just bind the <code>this</code> to the return function.</p>\n\n<pre><code>var funcs = [];\n\nfunction createFunc(i) {\n  return function () {\n    console.log('My value: ' + i);\n  }.call(this);\n}\n\nfor (var i = 1; i &lt;= 5; i++) {\n  funcs[i] = createFunc(i);\n}\n</code></pre>\n\n<p>By binding this, solves the problem as well.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1290102,
      "name": "pixel 67",
      "reputation": 551
    }
  },
  {
    "soID": 10250911,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/10250911",
    "title": null,
    "body": "<p>I know you have asked for a jQuery method. I looked a lot and find that we can do it in a better way than using JavaScript directly by the following function.</p>\n\n<pre><code>tableObject.insertRow(index)\n</code></pre>\n\n<p><code>index</code> is an integer that specifies the position of the row to insert (starts at 0). The value of -1 can also be used; which result in that the new row will be inserted at the last position.</p>\n\n<p>This parameter is required in Firefox and <a href=\"http://en.wikipedia.org/wiki/Opera_%28web_browser%29\" rel=\"noreferrer\">Opera</a>, but it is optional in Internet Explorer, <a href=\"http://en.wikipedia.org/wiki/Google_Chrome\" rel=\"noreferrer\">Chrome</a> and <a href=\"http://en.wikipedia.org/wiki/Safari_%28web_browser%29\" rel=\"noreferrer\">Safari</a>.</p>\n\n<p>If this parameter is omitted, <code>insertRow()</code> inserts a new row at the last position in Internet&nbsp;Explorer and at the first position in Chrome and Safari.</p>\n\n<p><strong>It will work for every acceptable structure of HTML table.</strong></p>\n\n<p>The following example will insert a row in last (-1 is used as index):</p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script type=\"text/javascript\"&gt;\n        function displayResult()\n        {\n            document.getElementById(\"myTable\").insertRow(-1).innerHTML = '&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;';\n        }\n        &lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;       \n        &lt;table id=\"myTable\" border=\"1\"&gt;\n            &lt;tr&gt;\n                &lt;td&gt;cell 1&lt;/td&gt;\n                &lt;td&gt;cell 2&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;cell 3&lt;/td&gt;\n                &lt;td&gt;cell 4&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n        &lt;br /&gt;\n        &lt;button type=\"button\" onclick=\"displayResult()\"&gt;Insert new row&lt;/button&gt;            \n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>I hope it helps.</p>\n",
    "score": 40,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1306394,
      "name": "shashwat",
      "reputation": 4312
    }
  },
  {
    "soID": 15946168,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/15946168",
    "title": null,
    "body": "<p>As well you could extend HTMLElement object, in order to add methods to add, remove, toggle and check classes (<a href=\"https://gist.github.com/Maksims/5356227\" rel=\"noreferrer\">gist</a>):</p>\n\n<pre><code>HTMLElement = typeof(HTMLElement) != 'undefiend' ? HTMLElement : Element;\n\nHTMLElement.prototype.addClass = function(string) {\n  if (!(string instanceof Array)) {\n    string = string.split(' ');\n  }\n  for(var i = 0, len = string.length; i &lt; len; ++i) {\n    if (string[i] &amp;&amp; !new RegExp('(\\\\s+|^)' + string[i] + '(\\\\s+|$)').test(this.className)) {\n      this.className = this.className.trim() + ' ' + string[i];\n    }\n  }\n}\n\nHTMLElement.prototype.removeClass = function(string) {\n  if (!(string instanceof Array)) {\n    string = string.split(' ');\n  }\n  for(var i = 0, len = string.length; i &lt; len; ++i) {\n    this.className = this.className.replace(new RegExp('(\\\\s+|^)' + string[i] + '(\\\\s+|$)'), ' ').trim();\n  }\n}\n\nHTMLElement.prototype.toggleClass = function(string) {\n  if (string) {\n    if (new RegExp('(\\\\s+|^)' + string + '(\\\\s+|$)').test(this.className)) {\n      this.className = this.className.replace(new RegExp('(\\\\s+|^)' + string + '(\\\\s+|$)'), ' ').trim();\n    } else {\n      this.className = this.className.trim() + ' ' + string;\n    }\n  }\n}\n\nHTMLElement.prototype.hasClass = function(string) {\n  return string &amp;&amp; new RegExp('(\\\\s+|^)' + string + '(\\\\s+|$)').test(this.className);\n}\n</code></pre>\n\n<p>And then just use like this (on click will add or remove class):</p>\n\n<pre><code>document.getElementById('yourElementId').onclick = function() {\n  this.toggleClass('active');\n}\n</code></pre>\n\n<p>Here is <a href=\"http://jsfiddle.net/5QMgR/\" rel=\"noreferrer\">demo</a>.</p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1312722,
      "name": "moka",
      "reputation": 15994
    }
  },
  {
    "soID": 34151972,
    "parentID": 5874652,
    "url": "https://stackoverflow.com/q/34151972",
    "title": null,
    "body": "<p>.attr() :-</p>\n\n<ul>\n<li>Get the value of an <strong>attribute</strong> for the first element in the set of matched elements.</li>\n<li>gives you the value of element as it was defines in the html on page load</li>\n</ul>\n\n<p>.prop() :-</p>\n\n<ul>\n<li>Get the value of a <strong>property</strong> for the first element in the set of matched elements.</li>\n<li>gives the updated values of elements which is modified via javascript/jquery</li>\n</ul>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1326367,
      "name": "Kgn-web",
      "reputation": 1328
    }
  },
  {
    "soID": 23669178,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/23669178",
    "title": null,
    "body": "<p>your answers are far too complicated</p>\n\n<pre><code>var buildSet = function(array) {\n  var set = {};\n  for (var i in array) {\n    var item = array[i];\n    set[item] = item;\n  }\n  return set;\n}\n\nvar myEnum = buildSet(['RED','GREEN','BLUE']);\n// myEnum.RED == 'RED' ...etc\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1330674,
      "name": "Xeltor",
      "reputation": 1680
    }
  },
  {
    "soID": 35873574,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/35873574",
    "title": null,
    "body": "<p>Here is my favorite <code>exist</code> method in jQuery</p>\n\n<pre><code>$.fn.exist = function(callback) {\n    return $(this).each(function () {\n        var target = $(this);\n\n        if (this.length &gt; 0 &amp;&amp; typeof callback === 'function') {\n            callback.call(target);\n        }\n    });\n};\n</code></pre>\n\n<p>and other version which supports callback when selector does not exist</p>\n\n<pre><code>$.fn.exist = function(onExist, onNotExist) {\n    return $(this).each(function() {\n        var target = $(this);\n\n        if (this.length &gt; 0) {\n            if (typeof onExist === 'function') {\n                onExist.call(target);\n            }\n        } else {\n            if (typeof onNotExist === 'function') {\n                onNotExist.call(target);\n            }\n        }\n    });\n};\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>$('#foo .bar').exist(\n    function () {\n        // Stuff when '#foo .bar' exists\n    },\n    function () {\n        // Stuff when '#foo .bar' does not exist\n    }\n);\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1330990,
      "name": "ducdhm",
      "reputation": 1441
    }
  },
  {
    "soID": 23629512,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/23629512",
    "title": null,
    "body": "<p>It may be irrelevant, maybe not, but sometime ago, I created a jQuery function that does the same thing, but horizontally.</p>\n\n<p>I called it \"Strippex\" For 'stripe'+'text', demo : <a href=\"http://cdpn.io/FcIBg\" rel=\"noreferrer\">http://cdpn.io/FcIBg</a></p>\n\n<p>I'm not saying this is the solution of any problems, but I already tried to apply css to half of a character, but horizontally, So the idea is the same, the realisation may be horrible, but it works.</p>\n\n<p>Ah, and the most important, I had fun creating it !</p>\n\n<p><img src=\"https://i.stack.imgur.com/z15N0.png\" alt=\"enter image description here\"></p>\n",
    "score": 78,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1331432,
      "name": "LukyVj",
      "reputation": 1010
    }
  },
  {
    "soID": 10226528,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/10226528",
    "title": null,
    "body": "<pre><code>$('#myTable').append('&lt;tr&gt;&lt;td&gt;my data&lt;/td&gt;&lt;td&gt;more data&lt;/td&gt;&lt;/tr&gt;');\n</code></pre>\n\n<p>will add a new row to the <strong>first</strong> <code>TBODY</code> of the table, without depending of any <code>THEAD</code> or <code>TFOOT</code> present.\n(I didn't find information from which version of jQuery <code>.append()</code> this behavior is present.)</p>\n\n<p>You may try it in these examples:</p>\n\n<pre><code>&lt;table class=\"t\"&gt; &lt;!-- table with THEAD, TBODY and TFOOT --&gt;\n&lt;thead&gt;\n  &lt;tr&gt;&lt;th&gt;h1&lt;/th&gt;&lt;th&gt;h2&lt;/th&gt;&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;tfoot&gt;\n  &lt;tr&gt;&lt;th&gt;f1&lt;/th&gt;&lt;th&gt;f2&lt;/th&gt;&lt;/tr&gt;\n&lt;/tfoot&gt;\n&lt;/table&gt;&lt;br&gt;\n\n&lt;table class=\"t\"&gt; &lt;!-- table with two TBODYs --&gt;\n&lt;thead&gt;\n  &lt;tr&gt;&lt;th&gt;h1&lt;/th&gt;&lt;th&gt;h2&lt;/th&gt;&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;tbody&gt;\n  &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;tfoot&gt;\n  &lt;tr&gt;&lt;th&gt;f1&lt;/th&gt;&lt;th&gt;f2&lt;/th&gt;&lt;/tr&gt;\n&lt;/tfoot&gt;\n&lt;/table&gt;&lt;br&gt;\n\n&lt;table class=\"t\"&gt;  &lt;!-- table without TBODY --&gt;\n&lt;thead&gt;\n  &lt;tr&gt;&lt;th&gt;h1&lt;/th&gt;&lt;th&gt;h2&lt;/th&gt;&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;/table&gt;&lt;br&gt;\n\n&lt;table class=\"t\"&gt;  &lt;!-- table with TR not in TBODY  --&gt;\n  &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;2&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n&lt;br&gt;\n&lt;table class=\"t\"&gt;\n&lt;/table&gt;\n\n&lt;script&gt;\n$('.t').append('&lt;tr&gt;&lt;td&gt;a&lt;/td&gt;&lt;td&gt;a&lt;/td&gt;&lt;/tr&gt;');\n&lt;/script&gt;\n</code></pre>\n\n<p>In which example <code>a b</code> row is inserted after <code>1 2</code>, not after <code>3 4</code> in second example. If the table were empty, jQuery creates <code>TBODY</code> for a new row.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1343405,
      "name": "Alexey Pavlov",
      "reputation": 103
    }
  },
  {
    "soID": 10299613,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/10299613",
    "title": null,
    "body": "<p>If you're using <a href=\"http://documentcloud.github.com/backbone/\">Backbone</a>, you can get full-blown enum functionality (find by id, name, custom members) for free using <a href=\"http://documentcloud.github.com/backbone/#Collection\">Backbone.Collection</a>.</p>\n\n<pre><code>// enum instance members, optional\nvar Color = Backbone.Model.extend({\n    print : function() {\n        console.log(\"I am \" + this.get(\"name\"))\n    }\n});\n\n// enum creation\nvar Colors = new Backbone.Collection([\n    { id : 1, name : \"Red\", rgb : 0xFF0000},\n    { id : 2, name : \"Green\" , rgb : 0x00FF00},\n    { id : 3, name : \"Blue\" , rgb : 0x0000FF}\n], {\n    model : Color\n});\n\n// Expose members through public fields.\nColors.each(function(color) {\n    Colors[color.get(\"name\")] = color;\n});\n\n// using\nColors.Red.print()\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1351319,
      "name": "Yaroslav",
      "reputation": 1799
    }
  },
  {
    "soID": 29094597,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/29094597",
    "title": null,
    "body": "<p>What is an enum in <strong>my</strong> opinion: It's an immutable object that is always accessible and you can compare items with eachother, but the items have common properties/methods, but the objects themselves or the values cannot be changed and they are instantiated only once.</p>\n\n<p>Enums are imho used for comparing datatypes, settings, actions to take/reply things like that. </p>\n\n<p>So for this you need objects with the same instance so you can check if it is a enum type <code>if(something instanceof enum)</code>\nAlso if you get an enum object you want to be able to do stuff with it, regardless of the enum type, it should always respond in the same way.</p>\n\n<p>In my case its comparing values of datatypes, but it could be anything, from modifying blocks in facing direction in a 3d game to passing values on to a specific object type registry.</p>\n\n<p>Keeping in mind it is javascript and doesn't provide fixed enum type, you end up always making your own implementation and as this thread shows there are legions of implementations without one being the absoulte correct.</p>\n\n<hr>\n\n<p>This is what I use for Enums. Since enums are immutable(or should be at least heh) I freeze the objects so they can't be manipulated easely.</p>\n\n<p>The enums can be used by EnumField.STRING and they have their own methods that will work with their types.\nTo test if something passed to an object you can use <code>if(somevar instanceof EnumFieldSegment)</code></p>\n\n<p>It may not be the most elegant solution and i'm open for improvements, but this type of immutable enum(unless you unfreeze it) is exactly the usecase I needed.</p>\n\n<p>I also realise I could have overridden the prototype with a {} but my mind works better with this format ;-) shoot me.</p>\n\n<pre><code>/**\n * simple parameter object instantiator\n * @param name\n * @param value\n * @returns\n */\nfunction p(name,value) {\n    this.name = name;\n    this.value = value;\n    return Object.freeze(this);\n}\n/**\n * EnumFieldSegmentBase\n */\nfunction EnumFieldSegmentBase() {\n    this.fieldType = \"STRING\";\n}\nfunction dummyregex() {\n}\ndummyregex.prototype.test = function(str) {\n    if(this.fieldType === \"STRING\") {\n        maxlength = arguments[1];\n        return str.length &lt;= maxlength;\n    }\n    return true;\n};\n\ndummyregexposer = new dummyregex();\nEnumFieldSegmentBase.prototype.getInputRegex = function() { \n    switch(this.fieldType) {\n        case \"STRING\" :     return dummyregexposer;  \n        case \"INT\":         return /^(\\d+)?$/;\n        case \"DECIMAL2\":    return /^\\d+(\\.\\d{1,2}|\\d+|\\.)?$/;\n        case \"DECIMAL8\":    return /^\\d+(\\.\\d{1,8}|\\d+|\\.)?$/;\n        // boolean is tricky dicky. if its a boolean false, if its a string if its empty 0 or false its  false, otherwise lets see what Boolean produces\n        case \"BOOLEAN\":     return dummyregexposer;\n    }\n};\nEnumFieldSegmentBase.prototype.convertToType = function($input) {\n    var val = $input;\n    switch(this.fieldType) {\n        case \"STRING\" :         val = $input;break;\n        case \"INT\":         val==\"\"? val=0 :val = parseInt($input);break;\n        case \"DECIMAL2\":    if($input === \"\" || $input === null) {$input = \"0\"}if($input.substr(-1) === \".\"){$input = $input+0};val = new Decimal2($input).toDP(2);break;\n        case \"DECIMAL8\":    if($input === \"\" || $input === null) {$input = \"0\"}if($input.substr(-1) === \".\"){$input = $input+0};val = new Decimal8($input).toDP(8);break;\n        // boolean is tricky dicky. if its a boolean false, if its a string if its empty 0 or false its  false, otherwise lets see what Boolean produces\n        case \"BOOLEAN\":     val = (typeof $input == 'boolean' ? $input : (typeof $input === 'string' ? (($input === \"false\" || $input === \"\" || $input === \"0\") ? false : true) : new Boolean($input).valueOf()))  ;break;\n    }\n    return val;\n};\nEnumFieldSegmentBase.prototype.convertToString = function($input) {\n    var val = $input;\n    switch(this.fieldType) {\n        case \"STRING\":      val = $input;break;\n        case \"INT\":         val = $input+\"\";break;\n        case \"DECIMAL2\":    val = $input.toPrecision(($input.toString().indexOf('.') === -1 ? $input.toString().length+2 : $input.toString().indexOf('.')+2)) ;break;\n        case \"DECIMAL8\":    val = $input.toPrecision(($input.toString().indexOf('.') === -1 ? $input.toString().length+8 : $input.toString().indexOf('.')+8)) ;break;\n        case \"BOOLEAN\":     val = $input ? \"true\" : \"false\"  ;break;\n    }\n    return val;\n};\nEnumFieldSegmentBase.prototype.compareValue = function($val1,$val2) {\n    var val = false;\n    switch(this.fieldType) {\n        case \"STRING\":      val = ($val1===$val2);break;\n        case \"INT\":         val = ($val1===$val2);break;\n        case \"DECIMAL2\":    val = ($val1.comparedTo($val2)===0);break;\n        case \"DECIMAL8\":    val = ($val1.comparedTo($val2)===0);break;\n        case \"BOOLEAN\":     val = ($val1===$val2);break;\n    }\n    return val;\n};\n\n/**\n * EnumFieldSegment is an individual segment in the \n * EnumField\n * @param $array An array consisting of object p\n */\nfunction EnumFieldSegment() {\n    for(c=0;c&lt;arguments.length;c++) {\n        if(arguments[c] instanceof p) {\n            this[arguments[c].name] = arguments[c].value;\n        }\n    }\n    return Object.freeze(this); \n}\nEnumFieldSegment.prototype = new EnumFieldSegmentBase();\nEnumFieldSegment.prototype.constructor = EnumFieldSegment;\n\n\n/**\n * Simple enum to show what type of variable a Field type is.\n * @param STRING\n * @param INT\n * @param DECIMAL2\n * @param DECIMAL8\n * @param BOOLEAN\n * \n */\nEnumField = Object.freeze({STRING:      new EnumFieldSegment(new p(\"fieldType\",\"STRING\")), \n                            INT:        new EnumFieldSegment(new p(\"fieldType\",\"INT\")), \n                            DECIMAL2:   new EnumFieldSegment(new p(\"fieldType\",\"DECIMAL2\")), \n                            DECIMAL8:   new EnumFieldSegment(new p(\"fieldType\",\"DECIMAL8\")), \n                            BOOLEAN:    new EnumFieldSegment(new p(\"fieldType\",\"BOOLEAN\"))});\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1356107,
      "name": "Tschallacka",
      "reputation": 10496
    }
  },
  {
    "soID": 10352556,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/10352556",
    "title": null,
    "body": "<p>you can use:</p>\n\n<p>If clause to validate if the string or value is not empty.\nlike this:</p>\n\n<pre><code>if (someVar.value) \n{\n  //its not emppty\n}\nelse\n{\n  //Its empty\n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1361343,
      "name": "Henrique Mello",
      "reputation": 57
    }
  },
  {
    "soID": 19464494,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/19464494",
    "title": null,
    "body": "<pre><code>(function(a){\ndocument.body.appendChild(a);\na.setAttribute('href', location.href);\na.dispatchEvent((function(e){\n    e.initMouseEvent(\"click\", true, true, window, 0, 0, 0, 0, 0, true, false, false, false, 0, null);\n    return e\n}(document.createEvent('MouseEvents'))))}(document.createElement('a')))\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1365195,
      "name": "spirinvladimir",
      "reputation": 405
    }
  },
  {
    "soID": 22365742,
    "parentID": 22343224,
    "url": "https://stackoverflow.com/q/22365742",
    "title": null,
    "body": "<p><code>~</code> fixes major and minor numbers. It is used when you're ready to accept bug-fixes in your dependency, but don't want any potentially incompatible changes.</p>\n\n<p><code>^</code> fixes the major number only. It is used when you're closely watching your dependencies and are ready to quickly change your code if minor release will be incompatible.</p>\n\n<p>In addition to that, <code>^</code> is <a href=\"https://stackoverflow.com/questions/22270244/install-grunt-phonegap-error-no-compatible-version-found-urijs1-12-0#comment33861904_22270244\">not supported</a> by old npm versions, and should be used with caution.</p>\n\n<p>So, <code>^</code> is a good default, but it's not perfect. I suggest to carefully pick and configure the semver operator that is most useful to you.</p>\n",
    "score": 65,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1374175,
      "name": "alex",
      "reputation": 7653
    }
  },
  {
    "soID": 43794367,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/43794367",
    "title": null,
    "body": "<pre><code>&lt;pre&gt;\n/**\nThis script can merge two multi dimensional associative array/objects in javascript by comparing given object with its reference and \nwill remove additional given keys, adding missed parameteres and also validating values without overhead. Also it will return the default values if no input presented with re-usable reference!\nTested on IE8 and greater.\n**/\nvar module = (function(){\n    //To make our reference variable onchangable, have to put it into a function which is fster and more efficient than \"JSON.parse(JSON.stringify(VARIABLE))\"\n    var _defs = function(){\n            return {\n                   //string, number and boolean are actually regex based validation keys on input values.\n                a: [\"string\", 'Defaul value for \"a\"'],\n                b: [\"number\", 300],\n                c: [\"boolean\", true],\n                d: {\n                  da: [\"boolean\", true],\n                  db: [\"string\", 'Defaul value for \"db\"'],\n                  dc: {\n                    dca: [\"number\", 200],\n                    dcb: [\"string\", 'Default value for \"dcb\"'],\n                    dcc: [\"number\", 500],\n                    dcd: [\"boolean\", true]\n                  },\n                  dce: [\"string\", 'Default value for \"dce\"'],\n                },\n                e: [\"number\", 200],\n                f: [\"boolean\", 0],\n                g: [\"\", 'This is an internal extra parameter']\n            }\n        }\n\n        var _validation = {\n                number: function (defaultValue, userValue) {\n                  if(/^[0-9]+$/.test(userValue)) //Only numbers allowed\n                    return userValue;\n                  else return defaultValue;\n                },\n                string: function (defaultValue, userValue) {\n                  if(/^[a-zA-Z\\s]*$/.test(userValue)) //Only A to Z case insentitive with space aloowed.\n                    return userValue;\n                  else return defaultValue;\n                },\n                boolean: function (defaultValue, userValue) {\n                  if(typeof userValue === 'boolean') //True or False or 0 ,1\n                    return userValue;\n                  else return defaultValue;\n                }\n        }\n\n        var _uniqueMerge = function(opts, _ref){\n                for(var key in _ref)\n                    if (_ref &amp;&amp; _ref[key] &amp;&amp; _ref[key].constructor &amp;&amp; _ref[key].constructor === Object)\n                      _ref[key] = _uniqueMerge((opts ? opts[key] : null ), _ref[key] );\n                    else if(opts &amp;&amp; opts.hasOwnProperty(key))\n                      _ref[key] = _validation[_ref[key][0]](_ref[key][1], opts[key]); //or without validation on user enties =&gt; ref[key] = obj[key]\n                    else _ref[key] = _ref[key][1];\n                return _ref;\n        }\n        var _get = function(inputs){\n            return _uniqueMerge(inputs, _defs());\n        }\n        return {\n            options: function(){\n            return _get(arguments[0] || null); // for more safety and control on number of input variables! used --&gt; ( arguments[0] || null )\n            }\n        }\n})();\n\n\n//How to use it:    \n\ninput_one = { \n    a : \"Hello World\", \n  //b : [\"number\", 400], //User missed this parameter\n    c: \"Hi\",\n    d : {\n        da : false,\n        db : \"Hellow! World\", // ! is not allowed\n        dc : {\n            dca : 10,\n            dcb : \"My String\",\n            dcc: \"3thString\",\n            dcd : false\n      },\n      dce: \"ANOTHER STRING\",\n    },\n    e: 40,\n    f: true,\n    z: 'x'\n};\nconsole.log( JSON.stringify( module.options(input_one), null ,2 ) );\n//Output:\n/*\n{\n  \"a\": \"Hello World\",\n  \"b\": 300,\n  \"c\": true,\n  \"d\": {\n    \"da\": false,\n    \"db\": \"Defaul value for \\\"db\\\"\",\n    \"dc\": {\n      \"dca\": 10,\n      \"dcb\": \"My String\",\n      \"dcc\": 500,\n      \"dcd\": false\n    },\n    \"dce\": \"ANOTHER STRING\"\n  },\n  \"e\": 40,\n  \"f\": true,\n  \"g\": \"This is an internal extra parameter\"\n}\n*/\ninput_two = { \n    a : 32,\n  //b : [\"number\", 400], //User missed this parameter\n    c: \"Hi\",\n    d : {\n        da : false,\n        db : \"HelloWorld\",\n        dc : {\n            dca : 10,\n            dcb : \"My String\",\n            dcd : false\n      },\n      dce: 73,\n    }\n};\nconsole.log( JSON.stringify( module.options(input_two), null ,2 ) );\n//output\n/*\n{\n  \"a\": \"Defaul value for \\\"a\\\"\",\n  \"b\": 300,\n  \"c\": true,\n  \"d\": {\n    \"da\": false,\n    \"db\": \"HelloWorld\",\n    \"dc\": {\n      \"dca\": 10,\n      \"dcb\": \"My String\",\n      \"dcc\": 500,\n      \"dcd\": false\n    },\n    \"dce\": \"Default value for \\\"dce\\\"\"\n  },\n  \"e\": 200,\n  \"f\": 0,\n  \"g\": \"This is an internal extra parameter\"\n}\n*/\n//Empty input will return the default values!\nconsole.log( JSON.stringify( module.options(), null ,2 ) );     \n//Output\n/*  \n{\n  \"a\": \"Defaul value for \\\"a\\\"\",\n  \"b\": 300,\n  \"c\": true,\n  \"d\": {\n    \"da\": true,\n    \"db\": \"Defaul value for \\\"db\\\"\",\n    \"dc\": {\n      \"dca\": 200,\n      \"dcb\": \"Default value for \\\"dcb\\\"\",\n      \"dcc\": 500,\n      \"dcd\": true\n    },\n    \"dce\": \"Default value for \\\"dce\\\"\"\n  },\n  \"e\": 200,\n  \"f\": 0,\n  \"g\": \"This is an internal extra parameter\"\n}\n*/\n&lt;/pre&gt;\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 27373951,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/27373951",
    "title": null,
    "body": "<p>This is a <strong>pure JavaScript</strong> solution without any libraries or plugins:</p>\n\n<pre><code>document.addEventListener('click', function (e) {\n    if (hasClass(e.target, 'bu')) {\n        // .bu clicked\n        // Do your thing\n    } else if (hasClass(e.target, 'test')) {\n        // .test clicked\n        // Do your other thing\n    }\n}, false);\n</code></pre>\n\n<p>where <code>hasClass</code> is</p>\n\n<pre><code>function hasClass(elem, className) {\n    return elem.className.split(' ').indexOf(className) &gt; -1;\n}\n</code></pre>\n\n<p><kbd><strong><a href=\"http://jsfiddle.net/ramswaroop/Nrxp5/28/\">Live demo</a></strong></kbd></p>\n\n<p><em>Credit goes to Dave and Sime Vidas</em></p>\n",
    "score": 104,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1385441,
      "name": "Ram Patra",
      "reputation": 7402
    }
  },
  {
    "soID": 5515349,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/5515349",
    "title": null,
    "body": "<p>You can just check if the <em>variable</em> has a <code>truthy</code> value or not. That means</p>\n\n<pre><code>if( value ) {\n}\n</code></pre>\n\n<p>will evaluate to <code>true</code> if <code>value</code> is <strong>not</strong>:</p>\n\n<ul>\n<li>null</li>\n<li>undefined</li>\n<li>NaN</li>\n<li>empty string (\"\")</li>\n<li>0</li>\n<li>false</li>\n</ul>\n\n<p>The above list represents all possible <code>falsy</code> values in ECMA-/Javascript. Find it in the <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf\" rel=\"noreferrer\">specification</a> at the <code>ToBoolean</code> section.</p>\n\n<p>Furthermore, if you do not <strong>know</strong> whether a variable exists (that means, if it was <em>declared</em>) you should check with the <code>typeof</code> operator. For instance</p>\n\n<pre><code>if( typeof foo !== 'undefined' ) {\n    // foo could get resolved and it's defined\n}\n</code></pre>\n\n<p>If you can be sure that a <em>variable</em> is declared at least, you should directly check if it has a <code>truthy</code> value like shown above.</p>\n\n<p>Further read: <a href=\"http://typeofnan.blogspot.com/2011/01/typeof-is-fast.html\" rel=\"noreferrer\">http://typeofnan.blogspot.com/2011/01/typeof-is-fast.html</a></p>\n",
    "score": 2492,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1386886,
      "name": "jAndy",
      "reputation": 148734
    }
  },
  {
    "soID": 10597813,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/10597813",
    "title": null,
    "body": "<p>This is the solution that I use.</p>\n\n<pre><code>function Enum() {\n    this._enums = [];\n    this._lookups = {};\n}\n\nEnum.prototype.getEnums = function() {\n    return _enums;\n}\n\nEnum.prototype.forEach = function(callback){\n    var length = this._enums.length;\n    for (var i = 0; i &lt; length; ++i){\n        callback(this._enums[i]);\n    }\n}\n\nEnum.prototype.addEnum = function(e) {\n    this._enums.push(e);\n}\n\nEnum.prototype.getByName = function(name) {\n    return this[name];\n}\n\nEnum.prototype.getByValue = function(field, value) {\n    var lookup = this._lookups[field];\n    if(lookup) {\n        return lookup[value];\n    } else {\n        this._lookups[field] = ( lookup = {});\n        var k = this._enums.length - 1;\n        for(; k &gt;= 0; --k) {\n            var m = this._enums[k];\n            var j = m[field];\n            lookup[j] = m;\n            if(j == value) {\n                return m;\n            }\n        }\n    }\n    return null;\n}\n\nfunction defineEnum(definition) {\n    var k;\n    var e = new Enum();\n    for(k in definition) {\n        var j = definition[k];\n        e[k] = j;\n        e.addEnum(j)\n    }\n    return e;\n}\n</code></pre>\n\n<p>And you define your enums like this:</p>\n\n<pre><code>var COLORS = defineEnum({\n    RED : {\n        value : 1,\n        string : 'red'\n    },\n    GREEN : {\n        value : 2,\n        string : 'green'\n    },\n    BLUE : {\n        value : 3,\n        string : 'blue'\n    }\n});\n</code></pre>\n\n<p>And this is how you access your enums:</p>\n\n<pre><code>COLORS.BLUE.string\nCOLORS.BLUE.value\nCOLORS.getByName('BLUE').string\nCOLORS.getByValue('value', 1).string\n\nCOLORS.forEach(function(e){\n    // do what you want with e\n});\n</code></pre>\n\n<p>I usually use the last 2 methods for mapping enums from message objects.</p>\n\n<p>Some advantages to this approach:</p>\n\n<ul>\n<li>Easy to declare enums</li>\n<li>Easy to access your enums</li>\n<li>Your enums can be complex types</li>\n<li>The Enum class has some associative caching if you are using getByValue a lot</li>\n</ul>\n\n<p>Some disadvantages:</p>\n\n<ul>\n<li>Some messy memory management going on in there, as I keep the references to the enums</li>\n<li>Still no type safety</li>\n</ul>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1395768,
      "name": "Chris",
      "reputation": 159
    }
  },
  {
    "soID": 27657819,
    "parentID": 5874652,
    "url": "https://stackoverflow.com/q/27657819",
    "title": null,
    "body": "<p><code>attributes</code> -> HTML</p>\n\n<p><code>properties</code> -> DOM</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1398298,
      "name": "NkS",
      "reputation": 613
    }
  },
  {
    "soID": 19323214,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/19323214",
    "title": null,
    "body": "<p>Another way that hasn't been mentioned yet is the use of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\"><code>Function.prototype.bind</code></a></p>\n\n<pre><code>var funcs = {};\nfor (var i = 0; i &lt; 3; i++) {\n    funcs[i] = function(x) {\n        console.log('My value: ' + x);\n    }.bind(this, i);\n}\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/PjweJ/2/\"><strong>jsFiddle</strong></a></p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>As pointed out by @squint and @mekdev, you get better performance by creating the function outside the loop first and then binding the results within the loop.</p>\n\n<pre><code>function log(x) {\n    console.log('My value: ' + x);\n}\n\nvar funcs = [];\n\nfor (var i = 0; i &lt; 3; i++) {\n    funcs[i] = log.bind(this, i);\n}\n\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/PjweJ/58/\"><strong>jsFiddle</strong></a></p>\n",
    "score": 259,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1408717,
      "name": "Aust",
      "reputation": 6490
    }
  },
  {
    "soID": 17259514,
    "parentID": 5404839,
    "url": "https://stackoverflow.com/q/17259514",
    "title": null,
    "body": "<p>There are <strike>multiple</strike> unlimited ways to refresh a page with JavaScript:</p>\n\n<ol>\n<li><code>location.reload()</code></li>\n<li><code>history.go(0)</code></li>\n<li><code>location.href = location.href</code></li>\n<li><code>location.href = location.pathname</code></li>\n<li><code>location.replace(location.pathname)</code></li>\n<li><p><code>location.reload(false)</code> </p>\n\n<blockquote>\n  <p>If we needed to pull the document from\n   the web-server again (such as where the document contents\n   change dynamically) we would pass the argument as <code>true</code>.</p>\n</blockquote></li>\n</ol>\n\n<p>You can continue the list being creative:</p>\n\n<ul>\n<li><code>window.location = window.location</code></li>\n<li><code>window.self.window.self.window.window.location = window.location</code></li>\n<li><a href=\"http://www.phpied.com/files/location-location/location-location.html\" rel=\"noreferrer\">...and other 534 ways</a></li>\n</ul>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var methods = [\r\n  \"location.reload()\",\r\n  \"history.go(0)\",\r\n  \"location.href = location.href\",\r\n  \"location.href = location.pathname\",\r\n  \"location.replace(location.pathname)\",\r\n  \"location.reload(false)\"\r\n];\r\n\r\nvar $body = $(\"body\");\r\nfor (var i = 0; i &lt; methods.length; ++i) {\r\n  (function(cMethod) {\r\n    $body.append($(\"&lt;button&gt;\", {\r\n      text: cMethod\r\n    }).on(\"click\", function() {\r\n      eval(cMethod); // don't blame me for using eval\r\n    }));\r\n  })(methods[i]);\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>button {\r\n  background: #2ecc71;\r\n  border: 0;\r\n  color: white;\r\n  font-weight: bold;\r\n  font-family: \"Monaco\", monospace;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.5s ease;\r\n  margin: 2px;\r\n}\r\nbutton:hover {\r\n  background: #27ae60;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 273,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1420197,
      "name": "Ionică Bizău",
      "reputation": 44215
    }
  },
  {
    "soID": 16661498,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/16661498",
    "title": null,
    "body": "<p>With ES6 now widely supported, the best answer to this question has changed.  ES6 provides the <code>let</code> and <code>const</code> keywords for this exact circumstance.  Instead of messing around with closures, we can just use <code>let</code> to set a loop scope variable like this:</p>\n\n<pre><code>var funcs = [];\nfor (let i = 0; i &lt; 3; i++) {          \n    funcs[i] = function() {            \n      console.log(\"My value: \" + i); \n    };\n}\n</code></pre>\n\n<p><code>val</code> will then point to an object that is specific to that particular turn of the loop, and will return the correct value without the additional closure notation.  This obviously significantly simplifies this problem.</p>\n\n<p><code>const</code> is similar to <code>let</code> with the additional restriction that the variable name can't be rebound to a new reference after initial assignment.</p>\n\n<p>Browser support is now here for those targeting the latest versions of browsers. <code>const</code>/<code>let</code> are currently supported in the latest Firefox, Safari, Edge and Chrome. It also is supported in Node, and you can use it anywhere by taking advantage of build tools like Babel.  You can see a working example here: <a href=\"http://jsfiddle.net/ben336/rbU4t/2/\" rel=\"nofollow noreferrer\">http://jsfiddle.net/ben336/rbU4t/2/</a></p>\n\n<p>Docs here:</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const\" rel=\"nofollow noreferrer\">const</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\" rel=\"nofollow noreferrer\">let</a></li>\n</ul>\n\n<p>Beware, though, that IE9-IE11 and Edge prior to Edge 14 support <code>let</code> but get the above wrong (they don't create a new <code>i</code> each time, so all the functions above would log 3 like they would if we used <code>var</code>). Edge 14 finally gets it right.</p>\n",
    "score": 81,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1424361,
      "name": "Ben McCormick",
      "reputation": 15531
    }
  },
  {
    "soID": 16851087,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/16851087",
    "title": null,
    "body": "<p>I have one real-world example where I have used Node.js. The company where I work got one client who wanted to have a simple static HTML website. This website is for selling one item using <a href=\"http://en.wikipedia.org/wiki/PayPal\" rel=\"noreferrer\">PayPal</a> and the client also wanted to have a counter which shows the amount of sold items. Client expected to have huge amount of visitors to this website. I decided to make the counter using Node.js and the <a href=\"http://expressjs.com/\" rel=\"noreferrer\">Express.js</a> framework.</p>\n\n<p>The Node.js application was simple. Get the sold items amount from a <a href=\"http://en.wikipedia.org/wiki/Redis_%28data_store%29\" rel=\"noreferrer\">Redis</a> database, increase the counter when item is sold and serve the counter value to users via the <a href=\"http://en.wikipedia.org/wiki/Application_programming_interface\" rel=\"noreferrer\">API</a>.</p>\n\n<p><strong>Some reasons why I chose to use Node.js in this case</strong></p>\n\n<ol>\n<li>It is very lightweight and fast. There has been over 200000 visits on this website in three weeks and minimal server resources has been able to handle it all.</li>\n<li>The counter is really easy to make to be real time.</li>\n<li>Node.js was easy to configure.</li>\n<li>There are lots of modules available for free. For example, I found a Node.js module for PayPal.</li>\n</ol>\n\n<p>In this case, Node.js was an awesome choice.</p>\n",
    "score": 127,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1425257,
      "name": "Joonas",
      "reputation": 2007
    }
  },
  {
    "soID": 30487792,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/30487792",
    "title": null,
    "body": "<p>This way is similar to the above solution but implemented differently  </p>\n\n<p>.social_icon -> some class with CSS  </p>\n\n<pre><code> &lt;div class=\"social_icon\" id=\"SOME_ID\" data-url=\"SOME_URL\"&gt;&lt;/div&gt;\n\n\n $('.social_icon').click(function(){\n\n        var url = $(this).attr('data-url');\n        var win = window.open(url, '_blank');  ///similar to above solution\n        win.focus();\n   });\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1426462,
      "name": "CG_DEV",
      "reputation": 438
    }
  },
  {
    "soID": 29995098,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/29995098",
    "title": null,
    "body": "<p>This condition check</p>\n\n<pre><code>if (!!foo) {\n    //foo is defined\n}\n</code></pre>\n\n<p>is all you need.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1430246,
      "name": "JerryP",
      "reputation": 123
    }
  },
  {
    "soID": 18193533,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/18193533",
    "title": null,
    "body": "<p>You can do a backward loop to make sure not to screw up the indexes, if there are multiple instances of the element.</p>\n\n<pre><code>var myElement = \"chocolate\";\nvar myArray = ['chocolate', 'poptart', 'poptart', 'poptart', 'chocolate', 'poptart', 'poptart', 'chocolate'];\n\n/* Important code */\nfor (var i = myArray.length - 1; i &gt;= 0; i--) {\n    if (myArray[i] == myElement) myArray.splice(i, 1);\n}\n</code></pre>\n\n<h2><a href=\"http://jsfiddle.net/lun471k/7m6G9/\" rel=\"noreferrer\">Live Demo</a></h2>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1451422,
      "name": "Jeff Noel",
      "reputation": 5046
    }
  },
  {
    "soID": 11155731,
    "parentID": 5404839,
    "url": "https://stackoverflow.com/q/11155731",
    "title": null,
    "body": "<p>If the current page was loaded by a POST request, you may want to use</p>\n\n<pre><code>window.location = window.location.pathname;\n</code></pre>\n\n<p>instead of</p>\n\n<pre><code>window.location.reload();\n</code></pre>\n\n<p>because <code>window.location.reload()</code> will prompt for confirmation if called on a page that was loaded by a POST request.</p>\n",
    "score": 87,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1453311,
      "name": "SumairIrshad",
      "reputation": 1315
    }
  },
  {
    "soID": 35083544,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/35083544",
    "title": null,
    "body": "<h1>Using <code>'use strict';</code> does not suddenly make your code better.</h1>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" rel=\"noreferrer\">JavaScript strict mode</a> is a feature in <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\" rel=\"noreferrer\">ECMAScript 5</a>. You can enable the strict mode by declaring this in the top of your script/function.</p>\n\n<pre><code>'use strict';\n</code></pre>\n\n<p>When a JavaScript engine sees this <em>directive</em>, it will start to interpret the code in a special mode. In this mode, errors are thrown up when certain coding practices that could end up being potential bugs are detected (which is the reasoning behind the strict mode).</p>\n\n<p>Consider this example:</p>\n\n<pre><code>var a = 365;\nvar b = 030;\n</code></pre>\n\n<p>In their obsession to line up the numeric literals, the developer has inadvertently initialized variable <code>b</code> with an octal literal. Non-strict mode will interpret this as a numeric literal with value <code>24</code> (in base 10). However, strict mode will throw an error.</p>\n\n<p>For a non-exhaustive list of specialties in strict mode, see <a href=\"https://stackoverflow.com/a/27114400/1461424\">this answer</a>.</p>\n\n<hr>\n\n<h2>Where should I use <code>'use strict';</code>?</h2>\n\n<ul>\n<li><p>In my <em>new</em> JavaScript application: <strong>Absolutely!</strong> Strict mode can be used as a whistleblower when you are doing something stupid with your code.</p></li>\n<li><p>In my <em>existing</em> JavaScript code: <strong>Probably not!</strong> If your existing JavaScript code has statements that are prohibited in strict-mode, the application will simply break. If you want strict mode, you should be prepared to debug and correct your existing code. This is why <em>using <code>'use strict';</code> does not suddenly make your code better</em>.</p></li>\n</ul>\n\n<hr>\n\n<h2>How do I use strict mode?</h2>\n\n<ol>\n<li><p>Insert a <code>'use strict';</code> statement on top of your script:</p>\n\n<pre><code>// File: myscript.js\n\n'use strict';\nvar a = 2;\n....\n</code></pre>\n\n<p>Note that everything in the file <code>myscript.js</code> will be interpreted in strict mode.</p></li>\n<li><p>Or, insert a <code>'use strict';</code> statement on top of your function body:</p>\n\n<pre><code>function doSomething() {\n    'use strict';\n    ...\n}\n</code></pre>\n\n<p>Everything in the <em>lexical scope</em> of function <code>doSomething</code> will be interpreted in strict mode. The word <em>lexical scope</em> is important here. See <a href=\"https://stackoverflow.com/a/6039163/1461424\">this answer</a> for a better explanation.</p></li>\n</ol>\n\n<hr>\n\n<h2>What things are prohibited in strict mode?</h2>\n\n<p>I found a <a href=\"http://yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/\" rel=\"noreferrer\">nice article</a> describing several things that are prohibited in strict mode (note that this is not an exclusive list):</p>\n\n<blockquote>\n  <h2>Scope</h2>\n  \n  <p>Historically, JavaScript has been confused about how functions\n  are scoped. Sometimes they seem to be statically scoped, but some\n  features make them behave like they are dynamically scoped. This is\n  confusing, making programs difficult to read and understand.\n  Misunderstanding causes bugs. It also is a problem for performance.\n  Static scoping would permit variable binding to happen at compile\n  time, but the requirement for dynamic scope means the binding must be\n  deferred to runtime, which comes with a significant performance\n  penalty.</p>\n  \n  <p>Strict mode requires that all variable binding be done statically.\n  That means that the features that previously required dynamic binding\n  must be eliminated or modified. Specifically, the with statement is\n  eliminated, and the eval function’s ability to tamper with the\n  environment of its caller is severely restricted.</p>\n  \n  <p>One of the benefits of strict code is that tools like <a href=\"http://developer.yahoo.com/yui/compressor/\" rel=\"noreferrer\">YUI Compressor</a>\n  can do a better job when processing it.</p>\n  \n  <h2>Implied Global Variables</h2>\n  \n  <p>JavaScript has implied global variables. If\n  you do not explicitly declare a variable, a global variable is\n  implicitly declared for you. This makes programming easier for\n  beginners because they can neglect some of their basic housekeeping\n  chores. But it makes the management of larger programs much more\n  difficult and it significantly degrades reliability. So in strict\n  mode, implied global variables are no longer created. You should\n  explicitly declare all of your variables.</p>\n  \n  <h2>Global Leakage</h2>\n  \n  <p>There are a number of situations that could cause <code>this</code>\n  to be bound to the global object. For example, if you forget to\n  provide the <code>new</code> prefix when calling a constructor function, the\n  constructor's <code>this</code> will be bound unexpectedly to the global object, so\n  instead of initializing a new object, it will instead be silently\n  tampering with global variables. In these situations, strict mode will\n  instead bind <code>this</code> to <code>undefined</code>, which will cause the constructor to\n  throw an exception instead, allowing the error to be detected much\n  sooner.</p>\n  \n  <h2>Noisy Failure</h2>\n  \n  <p>JavaScript has always had read-only properties, but you\n  could not create them yourself until ES5’s <code>Object.createProperty</code>\n  function exposed that capability. If you attempted to assign a value\n  to a read-only property, it would fail silently. The assignment would\n  not change the property’s value, but your program would proceed as\n  though it had. This is an integrity hazard that can cause programs to\n  go into an inconsistent state. In strict mode, attempting to change a\n  read-only property will throw an exception.</p>\n  \n  <h2>Octal</h2>\n  \n  <p>The octal (or base 8) representation of numbers was extremely\n  useful when doing machine-level programming on machines whose word\n  sizes were a multiple of 3. You needed octal when working with the CDC\n  6600 mainframe, which had a word size of 60 bits. If you could read\n  octal, you could look at a word as 20 digits. Two digits represented\n  the op code, and one digit identified one of 8 registers. During the\n  slow transition from machine codes to high level languages, it was\n  thought to be useful to provide octal forms in programming languages.</p>\n  \n  <p>In C, an extremely unfortunate representation of octalness was\n  selected: Leading zero. So in C, <code>0100</code> means 64, not 100, and <code>08</code> is an\n  error, not 8. Even more unfortunately, this anachronism has been\n  copied into nearly all modern languages, including JavaScript, where\n  it is only used to create errors. It has no other purpose. So in\n  strict mode, octal forms are no longer allowed.</p>\n  \n  <h2>Et cetera</h2>\n  \n  <p>The arguments pseudo array becomes a little bit more\n  array-like in ES5. In strict mode, it loses its <code>callee</code> and <code>caller</code>\n  properties. This makes it possible to pass your <code>arguments</code> to untrusted\n  code without giving up a lot of confidential context. Also, the\n  <code>arguments</code> property of functions is eliminated.</p>\n  \n  <p>In strict mode, duplicate keys in a function literal will produce a\n  syntax error. A function can’t have two parameters with the same name.\n  A function can’t have a variable with the same name as one of its\n  parameters. A function can’t <code>delete</code> its own variables. An attempt to\n  <code>delete</code> a non-configurable property now throws an exception. Primitive\n  values are not implicitly wrapped.</p>\n</blockquote>\n\n<hr>\n\n<h2>Reserved words for future JavaScript versions</h2>\n\n<p>ECMAScript 5 adds a list of reserved words. If you use them as variables or arguments, strict mode will throw an error. The reserved words are:</p>\n\n<blockquote>\n  <p><code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, and <code>yield</code></p>\n</blockquote>\n\n<hr>\n\n<h2>Further Reading</h2>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" rel=\"noreferrer\">Strict Mode - JavaScript | MDN</a></li>\n<li><a href=\"http://caniuse.com/#feat=use-strict\" rel=\"noreferrer\">Browser support for strict mode</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\" rel=\"noreferrer\">Transitioning to strict mode</a></li>\n</ul>\n",
    "score": 86,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1461424,
      "name": "Krumia",
      "reputation": 8816
    }
  },
  {
    "soID": 30045582,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/30045582",
    "title": null,
    "body": "<pre><code>var DaysEnum = Object.freeze ({ monday: {}, tuesday: {}, ... });\n</code></pre>\n\n<p>You don't need to specify an <em>id</em>, you can just use an empty object to compare enums. </p>\n\n<pre><code>if (incommingEnum === DaysEnum.monday) //incommingEnum is monday\n</code></pre>\n\n<p><strong>EDIT:</strong> If you are going to serialize the object (to JSON for instance) you'll the <em>id</em> again.</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/287903/enums-in-javascript#comment12864576_5040502\">( taken from Gabriel Llamas comment )</a></li>\n<li><a href=\"https://stackoverflow.com/questions/287903/enums-in-javascript/30045582?noredirect=1#comment71130974_30045582\">( edit based on Stijn de Witt's comment )</a></li>\n</ul>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1465640,
      "name": "Pylinux",
      "reputation": 3776
    }
  },
  {
    "soID": 19017234,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/19017234",
    "title": null,
    "body": "<pre><code>  Array.prototype.removeItem = function(a) {\n            for (i = 0; i &lt; this.length; i++) {\n                if (this[i] == a) {\n                    for (i2 = i; i2 &lt; this.length - 1; i2++) {\n                        this[i2] = this[i2 + 1];\n                    }\n                    this.length = this.length - 1\n                    return;\n                }\n            }\n        }\n\n    var recentMovies = ['Iron Man', 'Batman', 'Superman', 'Spiderman'];\n    recentMovies.removeItem('Superman');\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1473364,
      "name": "Don Vincent Preziosi",
      "reputation": 57
    }
  },
  {
    "soID": 40673991,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/40673991",
    "title": null,
    "body": "<p>The main reasons why developers should use <code>\"use strict\"</code> are:</p>\n\n<ol>\n<li><p>Prevents accidental declaration of global variables.Using <code>\"use strict()\"</code> will make sure that variables are declared with <code>var</code> before use. \nEg:</p>\n\n<pre><code>function useStrictDemo(){\n 'use strict';\n //works fine\n var a = 'No Problem';\n\n //does not work fine and throws error\n k = \"problem\"\n\n //even this will throw error\n someObject = {'problem': 'lot of problem'};\n}\n</code></pre></li>\n<li>N.B: The <code>\"use strict\"</code> directive is only recognized at the beginning of a script or a function.</li>\n<li><p>The string <code>\"arguments\"</code> cannot be used as a variable:</p>\n\n<pre><code>\"use strict\";\nvar arguments = 3.14;    // This will cause an error\n</code></pre></li>\n<li><p>Will restrict uses of keywords as variables. Trying to use them will throw errors.</p></li>\n</ol>\n\n<p>In short will make your code less error prone and in turn will make you write good code.</p>\n\n<p>To read more about it you can refer <a href=\"http://www.w3schools.com/js/js_strict.asp\" rel=\"nofollow noreferrer\">here</a>.</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1475228,
      "name": "Pritam Banerjee",
      "reputation": 6583
    }
  },
  {
    "soID": 36230887,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/36230887",
    "title": null,
    "body": "<p>Take note of \"MAIN\" class the element is placed, for example,</p>\n\n<pre><code>&lt;div class=\"container\"&gt;\n     &lt;ul class=\"select\"&gt;\n         &lt;li&gt; First&lt;/li&gt;\n         &lt;li&gt;Second&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>In the above scenario, the MAIN object the jQuery will watch is \"container\".</p>\n\n<p>Then you will basically have elements names under container such as <code>ul</code>, <code>li</code>, and <code>select</code>:</p>\n\n<pre><code>$(document).ready(function(e) {\n    $('.container').on( 'click',\".select\", function(e) {\n        alert(\"CLICKED\");\n    });\n });\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1478851,
      "name": "Aslan Kaya",
      "reputation": 143
    }
  },
  {
    "soID": 21883967,
    "parentID": 21692646,
    "url": "https://stackoverflow.com/q/21883967",
    "title": null,
    "body": "<p>Besides redefining <code>console._commandLineAPI</code>,\nthere are some other ways to break into InjectedScriptHost on webkit browsers, to prevent or alter the evaluation of expressions entered into the developers console.</p>\n\n<p><strong>Edit:</strong></p>\n\n<p>Chrome has fixed this in a past release. <em>- which must have been before February 2015, as i created the gist at that time</em>  </p>\n\n<p>So here's another possibilty. This time we hook in, a level above, directly into <code>InjectedScript</code> rather than <code>InjectedScriptHost</code> as opposed to the prior version. </p>\n\n<p>Which is kind of nice, as you can directly monkey patch <code>InjectedScript._evaluateAndWrap</code> instead of having to rely on <code>InjectedScriptHost.evaluate</code> as that gives you more finegrained control about what should happen. </p>\n\n<p>Another pretty intersting thing is, that we can intercept the internal result when an expression is evaluated and <em>return that</em> to the user instead of the normal behaviour. </p>\n\n<p>Here is the code, that does exactly that, return the internal result when a user evaluates something in the console.</p>\n\n<pre><code>var is;\nObject.defineProperty(Object.prototype,\"_lastResult\",{\n   get:function(){\n       return this._lR;\n   },\n   set:function(v){\n       if (typeof this._commandLineAPIImpl==\"object\") is=this;\n       this._lR=v;\n   }\n});\nsetTimeout(function(){\n   var ev=is._evaluateAndWrap;\n   is._evaluateAndWrap=function(){\n       var res=ev.apply(is,arguments);\n       console.log();\n       if (arguments[2]===\"completion\") {\n           //This is the path you end up when a user types in the console and autocompletion get's evaluated\n\n           //Chrome expects a wrapped result to be returned from evaluateAndWrap.\n           //You can use `ev` to generate an object yourself.\n           //In case of the autocompletion chrome exptects an wrapped object with the properties that can be autocompleted. e.g.;\n           //{iGetAutoCompleted: true}\n           //You would then go and return that object wrapped, like\n           //return ev.call (is, '', '({test:true})', 'completion', true, false, true);\n           //Would make `test` pop up for every autocompletion.\n           //Note that syntax as well as every Object.prototype property get's added to that list later,\n           //so you won't be able to exclude things like `while` from the autocompletion list,\n           //unless you wou'd find a way to rewrite the getCompletions function.\n           //\n           return res; //Return the autocompletion result. If you want to break that, return nothing or an empty object\n       } else {\n           //This is the path where you end up when a user actually presses enter to evaluate an expression.\n           //In order to return anything as normal evaluation output, you have to return a wrapped object.\n\n           //In this case, we want to return the generated remote object. \n           //Since this is already a wrapped object it would be converted if we directly return it. Hence,\n           //`return result` would actually replicate the very normal behaviour as the result is converted.\n           //to output what's actually in the remote object, we have to stringify it and `evaluateAndWrap` that object again.`\n           //This is quite interesting;\n           return ev.call (is, null, '(' + JSON.stringify (res) + ')', \"console\", true, false, true)\n       }\n   };\n},0);\n</code></pre>\n\n<p><em>It's a bit verbose, but i thought i put some comments into it</em></p>\n\n<p>So normally, if a user for example evaluates <code>[1,2,3,4]</code> you'd expect the following output:</p>\n\n<p><a href=\"https://i.stack.imgur.com/FLAnR.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/FLAnR.png\" alt=\"enter image description here\"></a> </p>\n\n<p>After monkeypatching <code>InjectedScript._evaluateAndWrap</code> evaluating the very same expression, gives the following output: </p>\n\n<p><a href=\"https://i.stack.imgur.com/1fOfj.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/1fOfj.png\" alt=\"enter image description here\"></a></p>\n\n<p>As you see the little left arrow, indicating output, is still there, but this time we get an object. Where the result of the expression, the array <code>[1,2,3,4]</code> is represented as an object with all its properties described.</p>\n\n<p>I recommend trying to evaluate this and that expression, including those that generate errors. It's quite interesting. </p>\n\n<p>Additionally, take a look at the <code>is</code> <em>- <code>InjectedScriptHost</code> -</em> object. It provides some methods to play with and get a bit of insight at the internals of the inspector. </p>\n\n<p>Of course you could intercept all that information and still return the original result to the user. </p>\n\n<p>Just replace the return statement in the else path by a <code>console.log (res)</code> following a <code>return res</code>. Then you'd end up with the following. </p>\n\n<p><a href=\"https://i.stack.imgur.com/4X4Ep.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/4X4Ep.png\" alt=\"enter image description here\"></a> </p>\n\n<p><em>End of Edit</em>  </p>\n\n<hr>\n\n<p>This is the prior version which was fixed by google. Henve not a possible way anymore.</p>\n\n<p><s>One of it is hooking into <code>Function.prototype.call</code></p>\n\n<p>Chrome evaluates the entered expression by <code>call</code>ing its eval function with <code>InjectedScriptHost</code> as <code>thisArg</code></s></p>\n\n<p><code>var result = evalFunction.call(object, expression);</code></p>\n\n<p>Given this, you can listen for the <code>thisArg</code> of <code>call</code> being <code>evaluate</code> and get a reference to the first argument (<code>InjectedScriptHost</code>)</p>\n\n<pre><code>if (window.URL) {\n    var ish, _call = Function.prototype.call;\n    Function.prototype.call = function () { //Could be wrapped in a setter for _commandLineAPI, to redefine only when the user started typing.\n        if (arguments.length &gt; 0 &amp;&amp; this.name === \"evaluate\" &amp;&amp; arguments [0].constructor.name === \"InjectedScriptHost\") { //If thisArg is the evaluate function and the arg0 is the ISH\n            ish = arguments[0];\n            ish.evaluate = function (e) { //Redefine the evaluation behaviour\n                throw new Error ('Rejected evaluation of: \\n\\'' + e.split ('\\n').slice(1,-1).join (\"\\n\") + '\\'');\n            };\n            Function.prototype.call = _call; //Reset the Function.prototype.call\n            return _call.apply(this, arguments);  \n        }\n    };\n}\n</code></pre>\n\n<p>You could e.g. throw an error, that the evaluation was rejected.</p>\n\n<p><img src=\"https://i.imgur.com/YYDovbt.png\" alt=\"enter image description here\"></p>\n\n<p><sub>\nHere is an <a href=\"http://jsfiddle.net/Glutamat/jW7jp/show\" rel=\"noreferrer\">example</a> where the entered expression gets passed to a CoffeScript compiler before passing it to the <code>evaluate</code> function.</p>\n\n<p></sub></p>\n",
    "score": 21,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1487756,
      "name": "C5H8NNaO4",
      "reputation": 5401
    }
  },
  {
    "soID": 20956445,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/20956445",
    "title": null,
    "body": "<p>In modern browsers you can do</p>\n\n<pre><code>Array.isArray(obj)\n</code></pre>\n\n<p>(<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\" rel=\"noreferrer\">Supported by</a> Chrome 5, Firefox 4.0, IE 9, Opera 10.5 and Safari 5)</p>\n\n<p>For backward compatibility you can add the following</p>\n\n<pre><code># only implement if no native implementation is available\nif (typeof Array.isArray === 'undefined') {\n  Array.isArray = function(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n  }\n};\n</code></pre>\n\n<p>If you use jQuery you can use <code>jQuery.isArray(obj)</code> or <code>$.isArray(obj)</code>. If you use underscore you can use <code>_.isArray(obj)</code></p>\n\n<p>If you don't need to detect arrays created in different frames you can also just use <code>instanceof</code></p>\n\n<pre><code>obj instanceof Array\n</code></pre>\n",
    "score": 188,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1494793,
      "name": "Fela Winkelmolen",
      "reputation": 5063
    }
  },
  {
    "soID": 13158856,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/13158856",
    "title": null,
    "body": "<p><code>window.open()</code> will not open in a new tab if it is not happening on the actual click event. In the example given the URL is being opened on the actual click event. <strong>This will work provided the user has appropriate settings in the browser</strong>.</p>\n\n<pre><code>&lt;a class=\"link\"&gt;Link&lt;/a&gt;\n&lt;script  type=\"text/javascript\"&gt;\n     $(\"a.link\").on(\"click\",function(){\n         window.open('www.yourdomain.com','_blank');\n     });\n&lt;/script&gt;\n</code></pre>\n\n<p>Similarly, if you are trying to do an Ajax call within the click function and want to open a window on success, ensure you are doing the Ajax call with the <code>async : false</code> option set.</p>\n",
    "score": 279,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1504589,
      "name": "Venkat Kotra",
      "reputation": 5791
    }
  },
  {
    "soID": 24932638,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/24932638",
    "title": null,
    "body": "<p>If your application mainly tethers web apis, or other io channels, give or take a user interface, node.js may be a fair pick for you, especially if you want to squeeze out the most scalability, or, if your main language in life is javascript (or javascript transpilers of sorts). If you build microservices, node.js is also okay. Node.js is also suitable for any project that is small or simple.</p>\n\n<p>Its main selling point is it allows front-enders take responsibility for back-end stuff rather than the typical divide. Another justifiable selling point is if your workforce is javascript oriented to begin with. </p>\n\n<p>Beyond a certain point however, you cannot scale your code without terrible hacks for forcing modularity, readability and flow control. Some people like those hacks though, especially coming from an event-driven javascript background, they seem familiar or forgivable. </p>\n\n<p>In particular, when your application needs to perform synchronous flows, you start bleeding over half-baked solutions that slow you down considerably in terms of your development process. If you have computation intensive parts in your application, tread with caution picking (only) node.js. Maybe <a href=\"http://koajs.com/\">http://koajs.com/</a> or other novelties alleviate those originally thorny aspects, compared to when I originally used node.js or wrote this.</p>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1509695,
      "name": "matanster",
      "reputation": 4740
    }
  },
  {
    "soID": 17860846,
    "parentID": 5404839,
    "url": "https://stackoverflow.com/q/17860846",
    "title": null,
    "body": "<p>You may want to use</p>\n\n<pre><code>location.reload(forceGet)\n</code></pre>\n\n<p><code>forceGet</code> is a boolean and optional.</p>\n\n<p>The default is false which reloads the page from the cache.</p>\n\n<p>Set this parameter to true if you want to force the browser to get the page from the server to get rid of the cache as well.</p>\n\n<p>Or just</p>\n\n<pre><code>location.reload()\n</code></pre>\n\n<p>if you want quick and easy with caching.</p>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1513082,
      "name": "Pinch",
      "reputation": 2104
    }
  },
  {
    "soID": 24107110,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/24107110",
    "title": null,
    "body": "<p>One more thing node provides is the ability to create multiple v8 instanes of node using node's child process( <a href=\"http://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options\">childProcess.fork()</a> each requiring 10mb memory as per docs) on the fly, thus not affecting the main process running the server. So offloading a background job that requires huge server load becomes a child's play and we can easily kill them as and when needed.</p>\n\n<p>I've been using node a lot and in most of the apps we build, require server connections at the same time thus a heavy network traffic. Frameworks like <a href=\"http://expressjs.com\">Express.js</a> and the new <a href=\"http://koajs.com/\">Koajs</a> (which removed callback hell) have made working on node even more easier.</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1523154,
      "name": "I_Debug_Everything",
      "reputation": 2440
    }
  },
  {
    "soID": 39311630,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/39311630",
    "title": null,
    "body": "<p>This will check if variable of indeterminate nesting is undefined</p>\n\n<pre><code>function Undef(str) \n{\n  var ary = str.split('.');\n  var w = window;\n  for (i in ary) {\n    try      { if (typeof(w = w[ary[i]]) === \"undefined\") return true; }\n    catch(e) { return true; }\n  }\n  return false;\n}\n\nif (!Undef(\"google.translate.TranslateElement\")) {\n</code></pre>\n\n<p>The above checks if the Google translate function TranslateElement exists.  This is equivalent to:</p>\n\n<pre><code>if (!(typeof google === \"undefined\" \n || typeof google.translate === \"undefined\" \n || typeof google.translate.TranslateElement === \"undefined\")) {\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1526089,
      "name": "rickdog",
      "reputation": 425
    }
  },
  {
    "soID": 21408685,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/21408685",
    "title": null,
    "body": "<p>Based on all the answers which were mainly correct and taking into account the best practices suggested (especially not using Array.prototype directly), I came up with the below code. Let me know if there is anything you find wierd. But should be fine:</p>\n\n<pre><code>// Extending the core Array Object\nMyArray.prototype = new Array();\nMyArray.prototype.constructor= MyArray;\n\n/**\n * New array class constructor\n */\nfunction MyArray() {\n    // Constructor code here\n}\n\n /**\n  * Excludes a value from array and returns the rest of array \n  * @param  {string/number/boolean} excludedValue Value   which should be removed\n  * @return {array}               \n  */\n MyArray.prototype.without = function(excludedValue) { \n\n    var valueType = typeof excludedValue;\n\n    if (this.length &lt; 1)\n        return [];\n\n    if (valueType == 'object' || valueType == 'array' || valueType == 'undefined')\n        throw \"Argument can not be object, array or undefined\";\n\n    for (var index in this) {\n\n            if (this[index] === excludedValue) {\n\n                this.splice(index, 1);\n                index--;\n\n            }   \n    }; \n\n    return this;\n};\n\n// How to use\nvar arr = new MyArray();\narr = [1,2,3,4,5,\"name\", false];\n\narr.without(1); // will change the array to [2,3,4,5,\"name\", false]\narr.without(\"name\"); // will change the array to [2,3,4,5, false]\narr.without(false); // will change the array to [2,3,4,5]\narr.without([1,2]); // will throw error as argument can not be array\narr.without({bar: \"foo\"}); // will throw error as argument can not be object\n</code></pre>\n\n<p>After two years of coding I now have a more preferred solution as below:</p>\n\n<pre><code>function arrayWithout(arr, values) {\n  var isArray = function(canBeArray) {\n    if (Array.isArray) {\n      return Array.isArray(canBeArray);\n    }\n    return Object.prototype.toString.call(canBeArray) === '[object Array]';\n  };\n\n  var excludedValues = (isArray(values)) ? values : [].slice.call(arguments, 1); \n\n  for (var i = arr.length - 1; i &gt;= 0; i--) {\n    if (excludedValues.indexOf(arr[i]) &gt; -1) {\n      arr.splice(i, 1);\n    }\n  }\n\n  return arr;\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1538074,
      "name": "Ardi",
      "reputation": 110
    }
  },
  {
    "soID": 28205581,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/28205581",
    "title": null,
    "body": "<pre><code>var ColorEnum = {\n    red: {},\n    green: {},\n    blue: {}\n}\n</code></pre>\n\n<p>You don't need to make sure you don't assign duplicate numbers to different enum values this way. A new object gets instantiated and assigned to all enum values.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1544818,
      "name": "Shivanshu Goyal",
      "reputation": 395
    }
  },
  {
    "soID": 31646880,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/31646880",
    "title": null,
    "body": "<p>There's no inbuilt ability to break in <code>forEach</code>. To interrupt execution use the <code>Array#some</code> like below:</p>\n\n<pre><code>[1,2,3].some(function(number) {\n    return number === 1;\n});\n</code></pre>\n\n<p>This works because <code>some</code> returns true as soon as any of the callbacks, executed in array order, returns true, short-circuiting the execution of the rest. \n<a href=\"https://stackoverflow.com/questions/2641347/how-to-short-circuit-array-foreach-like-calling-break\">Original Answer</a>\nsee Array prototype for <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.17\" rel=\"nofollow noreferrer\">some</a></p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1549191,
      "name": "Priyanshu Chauhan",
      "reputation": 1173
    }
  },
  {
    "soID": 30253376,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/30253376",
    "title": null,
    "body": "<p>I would like to offer a somewhat more founded answer complementing the other answers. I was hoping to edit the most popular answer, but failed. I tried to make it as comprehensive and complete as I could.</p>\n\n<p>You can refer to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">MDN documentation</a> for more information.</p>\n\n<p><code>\"use strict\"</code> a directive introduced in ECMAScript 5.</p>\n\n<p>Directives are similar to statements, yet different.</p>\n\n<ul>\n<li><code>use strict</code> does not contain key words: The directive is a simple expression statement, which consists of a special string literal (in single or double quotes). JavaScript engines, that do not implement ECMAScript 5, merely see an expression statement without side effects. It is expected that future versions of ECMAScript standards introduce <code>use</code> as a real key word; the quotes would thereby become obsolete.</li>\n<li><code>use strict</code> can be used only at the beginning of a script or of a function, i.e. it must precede every other (real) statement. It does not have to be the first instruction in a script of function: it can be preceded by other statement expressions that consist of string literals ( and JavaScript implementations can treat them as implementation specific directives). String literals statements, which follow a first real statement (in a script or function) are simple expression statements. Interpreters must not interpret them as directives and they have no effect.</li>\n</ul>\n\n<p>The <code>use strict</code> directive indicates that the following code (in a script or a function) is strict code.\nThe code in the highest level of a script (code that is not in a function) is considered strict code when the script contains a <code>use strict</code> directive.\nThe content of a function is considered strict code when the function itself is defined in a strict code or when the function contains a <code>use strict</code> directive.\nCode that is passed to an <code>eval()</code> method is considered strict code when <code>eval()</code> was called from a strict code or contains the <code>use strict</code> directive itself.</p>\n\n<p>The strict mode of ECMAScript 5 is a restricted subset of the JavaScript language, which eliminates relevant deficits of the language and features more stringent error checking and higher security. The following lists the differences between strict mode and normal mode (of which the first three are particularly important):</p>\n\n<ul>\n<li>You cannot use the <code>with</code>-statement in strict mode.</li>\n<li>In strict mode all variables have to be declared: if you assign a value to an identifier that has not been declared as variable, function, function parameter, catch-clause parameter or property of the global <code>Object</code>, then you will get a <code>ReferenceError</code>. In normal mode the identifier is implicitly declared as a global variable (as a property of the global <code>Object</code>)</li>\n<li>In strict mode the keyword <code>this</code> has the value <code>undefined</code> in functions that were invoked as functions (not as methods). (In normal mode <code>this</code> always points to the global <code>Object</code>). This difference can be used to test if an implementation supports the strict mode:</li>\n</ul>\n\n<blockquote>\n<pre><code>var hasStrictMode = (function() { \"use strict\"; return this===undefined }());\n</code></pre>\n</blockquote>\n\n<ul>\n<li><p>Also when a function is invoked with <code>call()</code> or <code>apply</code> in strict mode, then <code>this</code> is exactly the value of the first argument of the <code>call()</code>or <code>apply()</code> invocation. (In normal mode <code>null</code> and <code>undefined</code> are replaced by the global <code>Object</code> and values, which are not objects, are cast into objects.)</p></li>\n<li><p>In strict mode you will get a <code>TypeError</code>, when you try to assign to readonly properties or to define new properties for a non extensible object. (In normal mode both simply fail without error message.)</p></li>\n<li>In strict mode, when passing code to <code>eval()</code>, you cannot declare or define variables or functions in the scope of the caller (as you can do it in normal mode). Instead, a new scope is created for <code>eval()</code> and the variables and functions are within that scope. That scope is destroyed after <code>eval()</code> finishes execution.</li>\n<li>In strict mode the arguments-object of a function contains a static copy of the values, which are passed to that function. In normal mode the arguments-object has a somewhat \"magical\" behaviour: The elements of the array and the named function parameters reference both the same value.</li>\n<li>In strict mode you will get a <code>SyntaxError</code> when the <code>delete</code> operator is followed by a non qualified identifier (a variable, function or function parameter). In normal mode the <code>delete</code> expression would do nothing and is evaluated to <code>false</code>.</li>\n<li>In strict mode you will get a <code>TypeError</code> when you try to delete a non configurable property. (In normal mode the attempt simply fails and the <code>delete</code> expression is evaluated to <code>false</code>).</li>\n<li>In strict mode it is considered a syntactical error when you try to define several properties with the same name for an object literal. (In normal mode there is no error.)</li>\n<li>In strict mode it is considered a syntactical error when a function declaration has multiple parameters with the same name. (In normal mode there is no error.)</li>\n<li>In strict mode octal literals are not allowed (these are literals that start with <code>0x</code>. (In normal mode some implementations do allow octal literals.)</li>\n<li>In strict mode the identifiers <code>eval</code> and <code>arguments</code> are treated like keywords. You cannot change their value, cannot assign a value to them, and you cannot use them as names for variables, functions, function parameters or identifiers of a catch block.</li>\n<li>In strict mode are more restrictions on the possibilities to examine the call stack. <code>arguments.caller</code> and <code>arguments.callee</code> cause a <code>TypeError</code> in a function in strict mode. Furthermore, some caller- and arguments properties of functions in strict mode cause a <code>TypeError</code> when you try to read them.</li>\n</ul>\n",
    "score": 66,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1566187,
      "name": "Elyasin",
      "reputation": 6340
    }
  },
  {
    "soID": 29783305,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/29783305",
    "title": null,
    "body": "<p>I use the following which is in pure JavaScript. It starts from the right-most argument and combines them all the way up to the first argument. There is no return value, only the first argument is modified and the left-most parameter (except the first one) has the highest weight on properties.</p>\n\n<pre><code>var merge = function() {\n  var il = arguments.length;\n\n  for (var i = il - 1; i &gt; 0; --i) {\n    for (var key in arguments[i]) {\n      if (arguments[i].hasOwnProperty(key)) {\n        arguments[0][key] = arguments[i][key];\n      }\n    }\n  }\n};\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19619146,
    "parentID": 1470488,
    "url": "https://stackoverflow.com/q/19619146",
    "title": null,
    "body": "<p>This is example code I have written for you to understand this concept:</p>\n\n<pre><code>var foo = 5; \nbar = 2;     \nfooba = 3;\n\n// Execute an anonymous function\n(function() {    \n    bar = 100;             //overwrites global scope bar\n    var foo = 4;           //a new foo variable is created in this' function's scope\n    var fooba = 900;       //same as above\n    document.write(foo);   //prints 4\n    document.write(bar);   //prints 100\n    document.write(fooba); //prints 900\n})();\n\ndocument.write('&lt;br/&gt;');\ndocument.write('&lt;br/&gt;');\ndocument.write(foo);       //prints 5\ndocument.write(bar);       //prints 100\ndocument.write(fooba);     //prints 3\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 41070364,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/41070364",
    "title": null,
    "body": "<p>After a long search i found the best <em>class management</em> solution without the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById\" rel=\"nofollow noreferrer\">document.getElementById()</a></p>\n\n<pre><code>var els = [].slice.apply(document.getElementsByClassName(\"no-js\"));\nfor (var i = 0; i &lt; els.length; i++) {\n    els[i].className = els[i].className.replace(/ *\\bno-js\\b/g, \"js\");\n}\n</code></pre>\n\n<p>The original place of solution: <a href=\"https://stackoverflow.com/a/8708944/1589669\">https://stackoverflow.com/a/8708944/1589669</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1589669,
      "name": "eapo",
      "reputation": 414
    }
  },
  {
    "soID": 18509890,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/18509890",
    "title": null,
    "body": "<p>To add a good example on the topic, here is working solution if you need to add a row at specific position. </p>\n\n<p>The extra row is added after the 5th row, or at the end of the table if there are less then 5 rows.</p>\n\n<pre><code>var ninja_row = $('#banner_holder').find('tr');\n\nif( $('#my_table tbody tr').length &gt; 5){\n    $('#my_table tbody tr').filter(':nth-child(5)').after(ninja_row);\n}else{\n    $('#my_table tr:last').after(ninja_row);\n}\n</code></pre>\n\n<p>I put the content on a ready (hidden) container below the table ..so if you(or the designer) have to change it is not required to edit the JS.</p>\n\n<pre><code>&lt;table id=\"banner_holder\" style=\"display:none;\"&gt; \n    &lt;tr&gt;\n        &lt;td colspan=\"3\"&gt;\n            &lt;div class=\"wide-banner\"&gt;&lt;/div&gt;\n        &lt;/td&gt;   \n    &lt;/tr&gt; \n&lt;/table&gt;\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1621821,
      "name": "d.raev",
      "reputation": 4312
    }
  },
  {
    "soID": 23319401,
    "parentID": 1470488,
    "url": "https://stackoverflow.com/q/23319401",
    "title": null,
    "body": "<p>Without using \"var\" variables can only define when set a value. In example:</p>\n\n<pre><code>my_var;\n</code></pre>\n\n<p>cannot work in <strong>global scope</strong> or <strong>any other scope</strong>. It should be with value like:</p>\n\n<pre><code>my_var = \"value\";\n</code></pre>\n\n<p>On the other hand you can define a vaiable like;</p>\n\n<pre><code>var my_var;\n</code></pre>\n\n<p>Its value is <code>undefined</code> ( Its value is not <code>null</code> and it is not equal to <code>null</code> interestingly.).</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1622341,
      "name": "umut",
      "reputation": 566
    }
  },
  {
    "soID": 19533724,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/19533724",
    "title": null,
    "body": "<p>Is <a href=\"http://api.jquery.com/jQuery.contains/\" rel=\"noreferrer\">$.contains()</a> what you want?</p>\n\n<blockquote>\n  <p>jQuery.contains( container, contained )</p>\n  \n  <p>The $.contains() method returns true if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply. Otherwise, it returns false. Only element nodes are supported; if the second argument is a text or comment node, $.contains() will return false.</p>\n  \n  <p><strong><em>Note</em></strong>: The first argument must be a DOM element, not a jQuery object or plain JavaScript object.</p>\n</blockquote>\n",
    "score": 26,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1626906,
      "name": "hiway",
      "reputation": 1774
    }
  },
  {
    "soID": 38923942,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/38923942",
    "title": null,
    "body": "<p>I made a fairly efficient extension to the base javascript array:</p>\n\n<pre><code>Array.prototype.drop = function(k) {\n  var valueIndex = this.indexOf(k);\n  while(valueIndex &gt; -1) {\n    this.removeAt(valueIndex);\n    valueIndex = this.indexOf(k);\n  }\n};\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1641480,
      "name": "Shawn Deprey",
      "reputation": 452
    }
  },
  {
    "soID": 12268916,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/12268916",
    "title": null,
    "body": "<p>Simple function to check this:</p>\n\n<pre><code>function isArray(object)\n{\n    if (object.constructor === Array) return true;\n    else return false;\n}\n</code></pre>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1646987,
      "name": "MidnightTortoise",
      "reputation": 326
    }
  },
  {
    "soID": 24739133,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/24739133",
    "title": null,
    "body": "<p>After reading through various solutions, I'd like to add that the reason those solutions work is to rely on the concept of <strong>scope chain</strong>. It's the way JavaScript resolve a variable during execution.  </p>\n\n<ul>\n<li>Each function definition forms a scope consisting of all the local \nvariables declared by <code>var</code> and its <code>arguments</code>.   </li>\n<li>If we have inner function defined inside another (outer) function, this \nforms a chain, and will be used during execution   </li>\n<li>When a function gets executed, the runtime evaluates variables by searching the <strong>scope chain</strong>. If a variable can be found in a certain point of the chain it will stop searching and use it, otherwise it continues until the global scope reached which belongs to <code>window</code>.</li>\n</ul>\n\n<p>In the initial code:</p>\n\n<pre><code>funcs = {};\nfor (var i = 0; i &lt; 3; i++) {         \n  funcs[i] = function inner() {        // function inner's scope contains nothing\n    console.log(\"My value: \" + i);    \n  };\n}\nconsole.log(window.i)                  // test value 'i', print 3\n</code></pre>\n\n<p>When <code>funcs</code> gets executed, the scope chain will be <code>function inner -&gt; global</code>. Since the variable <code>i</code> cannot be found in <code>function inner</code> (neither declared using <code>var</code> nor passed as arguments), it continues to search, until the value of <code>i</code> is eventually found in the global scope which is <code>window.i</code>.</p>\n\n<p>By wrapping it in an outer function either explicitly define a helper function like <a href=\"https://stackoverflow.com/a/750506\">harto</a> did or use an anonymous function like <a href=\"https://stackoverflow.com/a/750495\">Bjorn</a> did:</p>\n\n<pre><code>funcs = {};\nfunction outer(i) {              // function outer's scope contains 'i'\n  return function inner() {      // function inner, closure created\n   console.log(\"My value: \" + i);\n  };\n}\nfor (var i = 0; i &lt; 3; i++) {\n  funcs[i] = outer(i);\n}\nconsole.log(window.i)          // print 3 still\n</code></pre>\n\n<p>When <code>funcs</code> gets executed, now the scope chain will be <code>function inner -&gt; function outer</code>. This time <code>i</code> can be found in the outer function's scope which is executed 3 times in the for loop, each time has value <code>i</code> bound correctly. It won't use the value of <code>window.i</code> when inner executed.</p>\n\n<p>More detail can be found <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures\" rel=\"nofollow noreferrer\">here</a><br>\nIt includes the common mistake in creating closure in the loop as what we have here, as well as why we need closure and the performance consideration.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1656715,
      "name": "wpding",
      "reputation": 106
    }
  },
  {
    "soID": 33707843,
    "parentID": 5404839,
    "url": "https://stackoverflow.com/q/33707843",
    "title": null,
    "body": "<p>Three approaches with different cache-related behaviours:</p>\n\n<ul>\n<li><h3><strong><em><code>location.reload(true)</code></em></strong></h3>\n\n<p>In browsers that implement the <code>forcedReload</code> parameter of <code>location.reload()</code>, reloads by fetching a fresh copy of the page and all of its resources (scripts, stylesheets, images, etc.). Will not serve <em>any</em> resources from the cache - gets fresh copies from the server without sending any <code>if-modified-since</code> or <code>if-none-match</code> headers in the request.</p>\n\n<p>Equivalent to the user doing a \"hard reload\" in browsers where that's possible.</p>\n\n<p>Note that passing <code>true</code> to <code>location.reload()</code> is supported in Firefox (see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Location/reload\">MDN</a>) and Internet Explorer (see <a href=\"https://msdn.microsoft.com/en-us/library/ms536691(v=vs.85).aspx\">MSDN</a>) but is not supported universally and is not part of <a href=\"http://www.w3.org/TR/html5/browsers.html#location\">the W3 HTML 5 spec</a>, nor <a href=\"http://www.w3.org/TR/html51/browsers.html#the-location-interface\">the W3 draft HTML 5.1 spec</a>, nor <a href=\"https://html.spec.whatwg.org/multipage/browsers.html#the-location-interface\">the WHATWG HTML Living Standard</a>.</p>\n\n<p>In unsupporting browsers, like Google Chrome, <code>location.reload(true)</code> behaves the same as <code>location.reload()</code>.</p></li>\n<li><h3><strong><em><code>location.reload()</code></em></strong> or <strong><em><code>location.reload(false)</code></em></strong></h3>\n\n<p>Reloads the page, fetching a fresh, non-cached copy of the page HTML itself, and performing <a href=\"https://tools.ietf.org/html/rfc7234\">RFC 7234</a> revalidation requests for any resources (like scripts) that the browser has cached, <em>even if they are <a href=\"https://tools.ietf.org/html/rfc7234#section-4.2\">fresh</a></em> are RFC 7234 permits the browser to serve them without revalidation.</p>\n\n<p>Exactly how the browser should utilise its cache when performing a <code>location.reload()</code> call isn't specified or documented as far as I can tell; I determined the behaviour above by experimentation.</p>\n\n<p>This is equivalent to the user simply pressing the \"refresh\" button in their browser.</p></li>\n<li><h3><strong><em><code>location = location</code></em></strong> (or infinitely many other possible techniques that involve assigning to <code>location</code> or to its properties)</h3>\n\n<p>Only works if the page's URL doesn't contain a fragid/hashbang!</p>\n\n<p>Reloads the page without refetching or revalidating <em>any</em> <a href=\"https://tools.ietf.org/html/rfc7234#section-4.2\">fresh</a> resources from the cache. If the page's HTML itself is fresh, this will reload the page without performing any HTTP requests at all.</p>\n\n<p>This is equivalent (from a caching perspective) to the user opening the page in a new tab.</p>\n\n<p>However, if the page's URL contains a hash, this will have no effect.</p>\n\n<p>Again, the caching behaviour here is unspecified as far as I know; I determined it by testing.</p></li>\n</ul>\n\n<p>So, in summary, you want to use:</p>\n\n<ul>\n<li><code>location = location</code> for maximum use of the cache, <em>as long as</em> the page doesn't have a hash in its URL, in which case this won't work</li>\n<li><code>location.reload(true)</code> to fetch new copies of all resources without revalidating (although its not universally supported and will behave no differently to <code>location.reload()</code> in some browsers, like Chrome)</li>\n<li><code>location.reload()</code> to faithfully reproduce the effect of the user clicking the 'refresh' button.</li>\n</ul>\n",
    "score": 23,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1709587,
      "name": "Mark Amery",
      "reputation": 36097
    }
  },
  {
    "soID": 19324832,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/19324832",
    "title": null,
    "body": "<p>Using an <a href=\"http://en.wikipedia.org/wiki/Immediately-invoked_function_expression\">Immediately-Invoked Function Expression</a>, the simplest and most readable way to enclose an index variable:</p>\n\n<pre><code>for (var i = 0; i &lt; 3; i++) {\n\n    (function(index) {\n        console.log('iterator: ' + index);\n        //now you can also loop an ajax call here \n        //without losing track of the iterator value: $.ajax({});\n    })(i);\n\n}\n</code></pre>\n\n<p>This sends the iterator <code>i</code> into the anonymous function of which we define as <code>index</code>.  This creates a closure, where the variable <code>i</code> gets saved for later use in any asynchronous functionality within the IIFE.</p>\n",
    "score": 193,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1713216,
      "name": "neurosnap",
      "reputation": 2593
    }
  },
  {
    "soID": 16178864,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/16178864",
    "title": null,
    "body": "<p>Here's my stab which</p>\n\n<ol>\n<li>Supports deep merge</li>\n<li>Does not mutate arguments</li>\n<li>Takes any number of arguments</li>\n<li>Does not extend the object prototype</li>\n<li>Does not depend on another library (<a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"nofollow noreferrer\">jQuery</a>, <a href=\"http://en.wikipedia.org/wiki/MooTools\" rel=\"nofollow noreferrer\">MooTools</a>, <a href=\"https://en.wikipedia.org/wiki/Underscore.js\" rel=\"nofollow noreferrer\">Underscore.js</a>, etc.)</li>\n<li>Includes check for hasOwnProperty</li>\n<li><p>Is short :)</p>\n\n<pre><code>/*\n    Recursively merge properties and return new object\n    obj1 &amp;lt;- obj2 [ &amp;lt;- ... ]\n*/\nfunction merge () {\n    var dst = {}\n        ,src\n        ,p\n        ,args = [].splice.call(arguments, 0)\n    ;\n\n    while (args.length &gt; 0) {\n        src = args.splice(0, 1)[0];\n        if (toString.call(src) == '[object Object]') {\n            for (p in src) {\n                if (src.hasOwnProperty(p)) {\n                    if (toString.call(src[p]) == '[object Object]') {\n                        dst[p] = merge(dst[p] || {}, src[p]);\n                    } else {\n                        dst[p] = src[p];\n                    }\n                }\n            }\n        }\n    }\n\n   return dst;\n}\n</code></pre></li>\n</ol>\n\n<p>Example:</p>\n\n<pre><code>a = {\n    \"p1\": \"p1a\",\n    \"p2\": [\n        \"a\",\n        \"b\",\n        \"c\"\n    ],\n    \"p3\": true,\n    \"p5\": null,\n    \"p6\": {\n        \"p61\": \"p61a\",\n        \"p62\": \"p62a\",\n        \"p63\": [\n            \"aa\",\n            \"bb\",\n            \"cc\"\n        ],\n        \"p64\": {\n            \"p641\": \"p641a\"\n        }\n    }\n};\n\nb = {\n    \"p1\": \"p1b\",\n    \"p2\": [\n        \"d\",\n        \"e\",\n        \"f\"\n    ],\n    \"p3\": false,\n    \"p4\": true,\n    \"p6\": {\n        \"p61\": \"p61b\",\n        \"p64\": {\n            \"p642\": \"p642b\"\n        }\n    }\n};\n\nc = {\n    \"p1\": \"p1c\",\n    \"p3\": null,\n    \"p6\": {\n        \"p62\": \"p62c\",\n        \"p64\": {\n            \"p643\": \"p641c\"\n        }\n    }\n};\n\nd = merge(a, b, c);\n\n\n/*\n    d = {\n        \"p1\": \"p1c\",\n        \"p2\": [\n            \"d\",\n            \"e\",\n            \"f\"\n        ],\n        \"p3\": null,\n        \"p5\": null,\n        \"p6\": {\n            \"p61\": \"p61b\",\n            \"p62\": \"p62c\",\n            \"p63\": [\n                \"aa\",\n                \"bb\",\n                \"cc\"\n            ],\n            \"p64\": {\n                \"p641\": \"p641a\",\n                \"p642\": \"p642b\",\n                \"p643\": \"p641c\"\n            }\n        },\n        \"p4\": true\n    };\n*/\n</code></pre>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 16119015,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/16119015",
    "title": null,
    "body": "<p>This describes the common mistake with using closures in JavaScript.</p>\n\n<h2>A function defines a new environment</h2>\n\n<p>Consider:</p>\n\n<pre><code>function makeCounter()\n{\n  var obj = {counter: 0};\n  return {\n    inc: function(){obj.counter ++;},\n    get: function(){return obj.counter;}\n  };\n}\n\ncounter1 = makeCounter();\ncounter2 = makeCounter();\n\ncounter1.inc();\n\nalert(counter1.get()); // returns 1\nalert(counter2.get()); // returns 0\n</code></pre>\n\n<p>For each time <code>makeCounter</code> is invoked, <code>{counter: 0}</code> results in a new object being created. Also, a new copy of <code>obj</code> \nis created as well to reference the new object. Thus, <code>counter1</code> and <code>counter2</code> are independent of each other.</p>\n\n<h2>Closures in loops</h2>\n\n<p>Using a closure in a loop is tricky.</p>\n\n<p>Consider: </p>\n\n<pre><code>var counters = [];\n\nfunction makeCounters(num)\n{\n  for (var i = 0; i &lt; num; i++)\n  {\n    var obj = {counter: 0};\n    counters[i] = {\n      inc: function(){obj.counter++;},\n      get: function(){return obj.counter;}\n    }; \n  }\n}\n\nmakeCounters(2);\n\ncounters[0].inc();\n\nalert(counters[0].get()); // returns 1\nalert(counters[1].get()); // returns 1\n</code></pre>\n\n<p>Notice that <code>counters[0]</code> and <code>counters[1]</code> are <em>not</em> independent. In fact, they operate on the same <code>obj</code>!</p>\n\n<p>This is because there is only one copy of <code>obj</code> shared across all iterations of the loop, perhaps for performance reasons.\nEven though <code>{counter: 0}</code> creates a new object in each iteration, the same copy of <code>obj</code> will just get updated with a\nreference to the newest object.</p>\n\n<p>Solution is to use another helper function:</p>\n\n<pre><code>function makeHelper(obj)\n{\n  return {\n    inc: function(){obj.counter++;},\n    get: function(){return obj.counter;}\n  }; \n}\n\nfunction makeCounters(num)\n{\n  for (var i = 0; i &lt; num; i++)\n  {\n    var obj = {counter: 0};\n    counters[i] = makeHelper(obj);\n  }\n}\n</code></pre>\n\n<p>This works because local variables in the function scope directly, as well as function argument variables, are allocated \nnew copies upon entry.</p>\n\n<p>For a detailed discussion, please see <a href=\"https://gist.github.com/lucastan/5420969\">JavaScript closure pitfalls and usage</a></p>\n",
    "score": 36,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1724763,
      "name": "Lucas",
      "reputation": 1161
    }
  },
  {
    "soID": 34782300,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/34782300",
    "title": null,
    "body": "<h1>2017 answer based on current trends in the wild:</h1>\n\n<hr>\n\n<h2>Vanilla javascript argument parsing:</h2>\n\n<pre><code>const args = process.argv;\nconsole.log(args);\n</code></pre>\n\n<p>This returns:</p>\n\n<pre><code>$ node server.js one two=three four\n['node', '/Users/dc/node/server.js', 'one', 'two=three', 'four']\n</code></pre>\n\n<p><a href=\"https://nodejs.org/docs/latest/api/process.html#process_process_argv\" rel=\"noreferrer\">Official docs</a></p>\n\n<hr>\n\n<h2>Most used NPM packages for argument parsing:</h2>\n\n<p><strong><a href=\"https://github.com/substack/minimist\" rel=\"noreferrer\">Minimist</a></strong>: For minimal argument parsing.</p>\n\n<p><strong><a href=\"https://github.com/bcoe/yargs\" rel=\"noreferrer\">Yargs</a></strong>: For slightly more sophisticated argument parsing.</p>\n\n<p><strong><a href=\"https://github.com/tj/commander.js\" rel=\"noreferrer\">Commander.js</a></strong>: For building use-and-quit command-line applications, with built-in argument parsing.</p>\n\n<p><strong><a href=\"https://github.com/sindresorhus/meow\" rel=\"noreferrer\">Meow</a></strong>: Alternative to Commander.js</p>\n\n<p><strong><a href=\"https://github.com/dthree/vorpal\" rel=\"noreferrer\">Vorpal.js</a></strong>: For building mature, interactive command-line applications, with built-in argument parsing.</p>\n",
    "score": 90,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1730638,
      "name": "dthree",
      "reputation": 7294
    }
  },
  {
    "soID": 38115401,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/38115401",
    "title": null,
    "body": "<p>Try like this - </p>\n\n<pre><code>$(document).on( 'click', '.click-activity', function () { ... });\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1732454,
      "name": "Rohit Suthar",
      "reputation": 1963
    }
  },
  {
    "soID": 17280078,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/17280078",
    "title": null,
    "body": "<p>This is an old one I know, but the way it has since been implemented via the TypeScript interface is:</p>\n\n<pre><code>var MyEnum;\n(function (MyEnum) {\n    MyEnum[MyEnum[\"Foo\"] = 0] = \"Foo\";\n    MyEnum[MyEnum[\"FooBar\"] = 2] = \"FooBar\";\n    MyEnum[MyEnum[\"Bar\"] = 1] = \"Bar\";\n})(MyEnum|| (MyEnum= {}));\n</code></pre>\n\n<p>This enables you to look up on both <code>MyEnum.Bar</code> which returns 1, and <code>MyEnum[1]</code> which returns \"Bar\" regardless of the order of declaration.</p>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1733091,
      "name": "Rob Hardy",
      "reputation": 1389
    }
  },
  {
    "soID": 32212535,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/32212535",
    "title": null,
    "body": "<p>You can use lodash <a href=\"https://lodash.com/docs#pull\" rel=\"noreferrer\">_.pull</a> (mutate array), <a href=\"https://lodash.com/docs#pullAt\" rel=\"noreferrer\">_.pullAt</a> (mutate array) or <a href=\"https://lodash.com/docs#without\" rel=\"noreferrer\">_.without</a> (does't mutate array), </p>\n\n<pre><code>var array1 = ['a', 'b', 'c', 'd']\n_.pull(array1, 'c')\nconsole.log(array1) // ['a', 'b', 'd']\n\nvar array2 = ['e', 'f', 'g', 'h']\n_.pullAt(array2, 0)\nconsole.log(array2) // ['f', 'g', 'h']\n\nvar array3 = ['i', 'j', 'k', 'l']\nvar newArray = _.without(array3, 'i') // ['j', 'k', 'l']\nconsole.log(array3) // ['i', 'j', 'k', 'l']\n</code></pre>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1738342,
      "name": "Chun Yang",
      "reputation": 1087
    }
  },
  {
    "soID": 27992032,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/27992032",
    "title": null,
    "body": "<p><a href=\"https://nodeway.wordpress.com/2015/01/16/why-rest-api-in-node/\">Node best for concurrent request handling -</a></p>\n\n<p>So, Let’s start with a story. From last 2 years I am working on JavaScript and developing web front end and I am enjoying it. Back end guys provide’s us some API’s written in Java,python (we don’t care) and we simply write a AJAX call, get our data and guess what ! we are done. But in real it is not that easy, If data we are getting is not correct or there is some server error then we stuck and we have to contact our back end guys over the mail or chat(sometimes on whatsApp too :).) This is not cool. What if we wrote our API’s in JavaScript and call those API’s from our front end ? Yes that’s pretty cool because if we face any problem in API we can look into it. Guess what ! you can do this now , How ? – Node is there for you.</p>\n\n<p>Ok agreed that you can write your API in JavaScript but what if I am ok with above problem. Do you have any other reason to use node for rest API ?</p>\n\n<p>so here is the magic begins. Yes I do have other reasons to use node for our API’s.</p>\n\n<p>Let’s go back to our traditional rest API system which is based on either blocking operation or threading. Suppose two concurrent request occurs( r1 and r2) , each of them require database operation. So In traditional system what will happens :</p>\n\n<p><strong>1. Waiting Way :</strong> Our server starts serving <code>r1</code> request and waits for query response. after completion of <code>r1</code> , server starts to serve <code>r2</code> and does it in same way. So waiting is not a good idea because we don’t have that much time.</p>\n\n<p><strong>2. Threading Way :</strong> Our server will creates two threads for both requests <code>r1</code> and <code>r2</code> and serve their purpose after querying database so cool its fast.But it is memory consuming because you can see we started two threads also problem increases when both request is querying same data then you have to deal with deadlock kind of issues . So its better than waiting way but still issues are there.</p>\n\n<p>Now here is , how node will do it:</p>\n\n<p><strong>3. Nodeway :</strong> When same concurrent request comes in node then it will register an event with its callback and move ahead it will not wait for query response for a particular request.So when <code>r1</code> request comes then node’s event loop (yes there is an event loop in node which serves this purpose.) register an event with its callback function and move ahead for serving <code>r2</code> request and similarly register its event with its callback. Whenever any query finishes it triggers its corresponding event and execute its callback  to completion without being interrupted.</p>\n\n<p>So no waiting, no threading , no memory consumption – yes this is nodeway for serving rest API.</p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1768910,
      "name": "Anshul",
      "reputation": 4901
    }
  },
  {
    "soID": 38681468,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/38681468",
    "title": null,
    "body": "<p>Here is the complete example of different situations and way to check if element exists using direct if on jQuery selector may or may not work because it returns array or elements.</p>\n\n<pre><code>var a = null;\n\nvar b = []\n\nvar c = undefined ;\n\nif(a) { console.log(\" a exist\")} else { console.log(\"a doesn't exit\")}\n// output: a doesn't exit\n\nif(b) { console.log(\" b exist\")} else { console.log(\"b doesn't exit\")}\n// output: b exist\n\nif(c) { console.log(\" c exist\")} else { console.log(\"c doesn't exit\")}\n// output: c doesn't exit\n</code></pre>\n\n<p><strong>FINAL SOLUTION</strong> </p>\n\n<pre><code>if($(\"#xysyxxs\").length){ console.log(\"xusyxxs exist\")} else { console.log(\"xusyxxs doesnn't exist\") }\n//output : xusyxxs doesnn't exist\n\nif($(\".xysyxxs\").length){ console.log(\"xusyxxs exist\")} else { console.log(\"xusyxxs doesnn't exist\") }\n    //output : xusyxxs doesnn't exist\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1785635,
      "name": "abhirathore2006",
      "reputation": 1461
    }
  },
  {
    "soID": 26000211,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/26000211",
    "title": null,
    "body": "<p>Opening a new tab from within a Firefox (Mozilla) extension goes like this:</p>\n\n<pre><code>gBrowser.selectedTab = gBrowser.addTab(\"http://example.com\");\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1798408,
      "name": "Smile4ever",
      "reputation": 264
    }
  },
  {
    "soID": 15219005,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/15219005",
    "title": null,
    "body": "<p><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/isArray\">https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/isArray</a></p>\n\n<pre><code>Array.isArray = Array.isArray || function (vArg) {\n    return Object.prototype.toString.call(vArg) === \"[object Array]\";\n};\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1798418,
      "name": "Safareli",
      "reputation": 415
    }
  },
  {
    "soID": 18144022,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/18144022",
    "title": null,
    "body": "<p>There is a good explanation in the documentation of <a href=\"http://api.jquery.com/on/\" rel=\"noreferrer\"><code>jQuery.fn.on</code></a>.</p>\n\n<p>In short:</p>\n\n<blockquote>\n  <p>Event handlers are bound only to the currently selected elements; they must exist on the page at the time your code makes the call to <code>.on()</code>.</p>\n</blockquote>\n\n<p>Thus in the following example <code>#dataTable tbody tr</code> must exist before the code is generated.</p>\n\n<pre><code>$(\"#dataTable tbody tr\").on(\"click\", function(event){\n    console.log($(this).text());\n});\n</code></pre>\n\n<p>If new HTML is being injected into the page, it is preferable to use delegated events to attach an event handler, as described next.</p>\n\n<p><strong>Delegated events</strong> have the advantage that they can process events from descendant elements that are added to the document at a later time. For example, if the table exists, but the rows are added dynamically using code, the following will handle it:</p>\n\n<pre><code>$(\"#dataTable tbody\").on(\"click\", \"tr\", function(event){\n    console.log($(this).text());\n});\n</code></pre>\n\n<p>In addition to their ability to handle events on descendant elements which are not yet created, another advantage of delegated events is their potential for much lower overhead when many elements must be monitored. On a data table with 1,000 rows in its <code>tbody</code>, the first code example attaches a handler to 1,000 elements.</p>\n\n<p>A delegated-events approach (the second code example) attaches an event handler to only one element, the <code>tbody</code>, and the event only needs to bubble up one level (from the clicked <code>tr</code> to <code>tbody</code>).</p>\n\n<p><strong>Note:</strong> Delegated events do not work for <a href=\"http://en.wikipedia.org/wiki/Scalable_Vector_Graphics\" rel=\"noreferrer\">SVG</a>.</p>\n",
    "score": 241,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1806956,
      "name": "Ronen Rabinovici",
      "reputation": 3332
    }
  },
  {
    "soID": 23951789,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/23951789",
    "title": null,
    "body": "<p><a href=\"http://underscorejs.org/#without\" rel=\"noreferrer\">Underscore.js</a> can be used to solve issues with multiple browsers. It uses in-build browser methods if present. If they are absent like in the case of older Internet&nbsp;Explorer versions it uses its own custom methods.</p>\n\n<p>A simple example to remove elements from array (from the website):</p>\n\n<pre><code>_.without([1, 2, 1, 0, 3, 1, 4], 0, 1); // =&gt; [2, 3, 4]\n</code></pre>\n",
    "score": 33,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1847764,
      "name": "vatsal",
      "reputation": 2235
    }
  },
  {
    "soID": 33707088,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/33707088",
    "title": null,
    "body": "<p>You can use <code>console.dir()</code>, which is a shortcut for <code>console.log(util.inspect())</code>.\n(The only difference is that it bypasses any custom <code>inspect()</code> function defined on an object.)</p>\n\n<p>It uses <strong>syntax-highlighting</strong>, <strong>smart indentation</strong>, <strong>removes quotes from keys</strong> and just makes the output as pretty as it gets.</p>\n\n<pre><code>const object = JSON.parse(jsonString)\n\nconsole.dir(object, {depth: null, colors: true})\n</code></pre>\n\n<p>and for the command line:</p>\n\n<p><code>cat package.json | node -e \"process.stdin.pipe(new stream.Writable({write: chunk =&gt; console.dir(JSON.parse(chunk), {depth: null, colors: true})}))\"</code></p>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1850340,
      "name": "adius",
      "reputation": 3660
    }
  },
  {
    "soID": 29558498,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/29558498",
    "title": null,
    "body": "<p>Bit late to the party, but I was exploring this issue today and noticed that many of the answers don't completely address how Javascript treats scopes, which is essentially what this boils down to.</p>\n\n<p>So as many others mentioned, the problem is that the inner function is referencing the same <code>i</code> variable. So why don't we just create a new local variable each iteration, and have the inner function reference that instead?</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>//overwrite console.log() so you can see the console output\r\nconsole.log = function(msg) {document.body.innerHTML += '&lt;p&gt;' + msg + '&lt;/p&gt;';};\r\n\r\nvar funcs = {};\r\nfor (var i = 0; i &lt; 3; i++) {\r\n    var ilocal = i; //create a new local variable\r\n    funcs[i] = function() {\r\n        console.log(\"My value: \" + ilocal); //each should reference its own local variable\r\n    };\r\n}\r\nfor (var j = 0; j &lt; 3; j++) {\r\n    funcs[j]();\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Just like before, where each inner function outputted the last value assigned to <code>i</code>, now each inner function just outputs the last value assigned to <code>ilocal</code>. But shouldn't each iteration have it's own <code>ilocal</code>?</p>\n\n<p>Turns out, that's the issue. Each iteration is sharing the same scope, so every iteration after the first is just overwriting <code>ilocal</code>. From <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block#No_block_scope\" rel=\"nofollow noreferrer\">MDN</a>:</p>\n\n<blockquote>\n  <p>Important: JavaScript does not have block scope. Variables introduced with a block are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. In other words, block statements do not introduce a scope. Although \"standalone\" blocks are valid syntax, you do not want to use standalone blocks in JavaScript, because they don't do what you think they do, if you think they do anything like such blocks in C or Java.</p>\n</blockquote>\n\n<p>Reiterated for emphasis:</p>\n\n<blockquote>\n  <h2>JavaScript does not have block scope. Variables introduced with a block are scoped to the containing function or script</h2>\n</blockquote>\n\n<p>We can see this by checking <code>ilocal</code> before we declare it in each iteration:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>//overwrite console.log() so you can see the console output\r\nconsole.log = function(msg) {document.body.innerHTML += '&lt;p&gt;' + msg + '&lt;/p&gt;';};\r\n\r\nvar funcs = {};\r\nfor (var i = 0; i &lt; 3; i++) {\r\n  console.log(ilocal);\r\n  var ilocal = i;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>This is exactly why this bug is so tricky. Even though you are redeclaring a variable, Javascript won't throw an error, and JSLint won't even throw a warning. This is also why the best way to solve this is to take advantage of closures, which is essentially the idea that in Javascript, inner functions have access to outer variables because inner scopes \"enclose\" outer scopes.</p>\n\n<p><img src=\"https://i.stack.imgur.com/60fH9.png\" alt=\"Closures\"></p>\n\n<p>This also means that inner functions \"hold onto\" outer variables and keep them alive, even if the outer function returns. To utilize this, we create and call a wrapper function purely to make a new scope, declare <code>ilocal</code> in the new scope, and return an inner function that uses <code>ilocal</code> (more explanation below):</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>//overwrite console.log() so you can see the console output\r\nconsole.log = function(msg) {document.body.innerHTML += '&lt;p&gt;' + msg + '&lt;/p&gt;';};\r\n\r\nvar funcs = {};\r\nfor (var i = 0; i &lt; 3; i++) {\r\n    funcs[i] = (function() { //create a new scope using a wrapper function\r\n        var ilocal = i; //capture i into a local var\r\n        return function() { //return the inner function\r\n            console.log(\"My value: \" + ilocal);\r\n        };\r\n    })(); //remember to run the wrapper function\r\n}\r\nfor (var j = 0; j &lt; 3; j++) {\r\n    funcs[j]();\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Creating the inner function inside a wrapper function gives the inner function a private environment that only it can access, a \"closure\". Thus, every time we call the wrapper function we create a new inner function with it's own separate environment, ensuring that the <code>ilocal</code> variables don't collide and overwrite each other. A few minor optimizations gives the final answer that many other SO users gave:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>//overwrite console.log() so you can see the console output\r\nconsole.log = function(msg) {document.body.innerHTML += '&lt;p&gt;' + msg + '&lt;/p&gt;';};\r\n\r\nvar funcs = {};\r\nfor (var i = 0; i &lt; 3; i++) {\r\n    funcs[i] = wrapper(i);\r\n}\r\nfor (var j = 0; j &lt; 3; j++) {\r\n    funcs[j]();\r\n}\r\n//creates a separate environment for the inner function\r\nfunction wrapper(ilocal) {\r\n    return function() { //return the inner function\r\n        console.log(\"My value: \" + ilocal);\r\n    };\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 88,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1852456,
      "name": "woojoo666",
      "reputation": 3907
    }
  },
  {
    "soID": 40545146,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/40545146",
    "title": null,
    "body": "<p>Let's take advantage of new Function. Thus \"i\" stopes to be a varibale of a closure and becomes just a part of the text.</p>\n\n<pre><code>var funcs = [];\nfor (var i = 0; i &lt; 3; i++) {\n    var functionBody = 'console.log(\"My value: ' + i + '\");';\n    funcs[i] = new Function(functionBody);\n}\n\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1866134,
      "name": "Alexander Levakov",
      "reputation": 37
    }
  },
  {
    "soID": 23455550,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/23455550",
    "title": null,
    "body": "<p>As of writing, <strong>October 2014</strong> - so here is a contemporary solution. Am writing the solution as a Node Module, and have included a test using Mocha and Chai, as well as underscoreJS. You can easily ignore these, and just take the Enum code if preferred.</p>\n\n<p>Seen a lot of posts with overly convoluted libraries etc. The solution to getting enum support in Javascript is so simple it really isn't needed. Here is the code:</p>\n\n<p>File: enums.js</p>\n\n<pre><code>_ = require('underscore');\n\nvar _Enum = function () {\n\n   var keys = _.map(arguments, function (value) {\n      return value;\n   });\n   var self = {\n      keys: keys\n   };\n   for (var i = 0; i &lt; arguments.length; i++) {\n      self[keys[i]] = i;\n   }\n   return self;\n};\n\nvar fileFormatEnum = Object.freeze(_Enum('CSV', 'TSV'));\nvar encodingEnum = Object.freeze(_Enum('UTF8', 'SHIFT_JIS'));\n\nexports.fileFormatEnum = fileFormatEnum;\nexports.encodingEnum = encodingEnum;\n</code></pre>\n\n<p>And a test to illustrate what it gives you:</p>\n\n<p>file: enumsSpec.js</p>\n\n<pre><code>var chai = require(\"chai\"),\n    assert = chai.assert,\n    expect = chai.expect,\n    should = chai.should(),\n    enums = require('./enums'),\n    _ = require('underscore');\n\n\ndescribe('enums', function () {\n\n    describe('fileFormatEnum', function () {\n        it('should return expected fileFormat enum declarations', function () {\n            var fileFormatEnum = enums.fileFormatEnum;\n            should.exist(fileFormatEnum);\n            assert('{\"keys\":[\"CSV\",\"TSV\"],\"CSV\":0,\"TSV\":1}' === JSON.stringify(fileFormatEnum), 'Unexpected format');\n            assert('[\"CSV\",\"TSV\"]' === JSON.stringify(fileFormatEnum.keys), 'Unexpected keys format');\n        });\n    });\n\n    describe('encodingEnum', function () {\n        it('should return expected encoding enum declarations', function () {\n            var encodingEnum = enums.encodingEnum;\n            should.exist(encodingEnum);\n            assert('{\"keys\":[\"UTF8\",\"SHIFT_JIS\"],\"UTF8\":0,\"SHIFT_JIS\":1}' === JSON.stringify(encodingEnum), 'Unexpected format');\n            assert('[\"UTF8\",\"SHIFT_JIS\"]' === JSON.stringify(encodingEnum.keys), 'Unexpected keys format');\n        });\n    });\n\n});\n</code></pre>\n\n<p>As you can see, you get an Enum factory, you can get all the keys simply by calling enum.keys, and you can match the keys themselves to integer constants. And you can reuse the factory with different values, and export those generated Enums using Node's modular approach. </p>\n\n<p>Once again, if you are just a casual user, or in the browser etc, just take the factory part of the code, potentially removing underscore library too if you don't wish to use it in your code.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1882064,
      "name": "arcseldon",
      "reputation": 12470
    }
  },
  {
    "soID": 23569840,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/23569840",
    "title": null,
    "body": "<p><strong>Limited CSS and jQuery Solution</strong></p>\n\n<p>I am not sure how elegant this solution is, but it cuts everything exactly in half: <a href=\"http://jsfiddle.net/9wxfY/11/\" rel=\"nofollow noreferrer\">http://jsfiddle.net/9wxfY/11/</a></p>\n\n<p>Otherwise, I have created a nice solution for you... All you need to do is have this for your HTML:</p>\n\n<p><strong><em>Take a look at this most recent, and accurate, edit as of 6/13/2016 : <a href=\"http://jsfiddle.net/9wxfY/43/\" rel=\"nofollow noreferrer\">http://jsfiddle.net/9wxfY/43/</a></em></strong></p>\n\n<p>As for the CSS, it is very limited... You only need to apply it to <code>:nth-child(even)</code></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(function(){\r\n  var $hc = $('.half-color');\r\n  var str = $hc.text();\r\n  $hc.html(\"\");\r\n\r\n  var i = 0;\r\n  var chars;\r\n  var dupText;\r\n\r\n  while(i &lt; str.length){\r\n    chars = str[i];\r\n    if(chars == \" \") chars = \"&amp;nbsp;\";\r\n    dupText = \"&lt;span&gt;\" + chars + \"&lt;/span&gt;\";\r\n\r\n    var firstHalf = $(dupText);\r\n    var secondHalf = $(dupText);\r\n\r\n    $hc.append(firstHalf)\r\n    $hc.append(secondHalf)\r\n\r\n    var width = firstHalf.width()/2;\r\n\r\n    firstHalf.width(width);\r\n    secondHalf.css('text-indent', -width);\r\n\r\n    i++;\r\n  }\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.half-color span{\r\n  font-size: 2em;\r\n  display: inline-block;\r\n  overflow: hidden;\r\n}\r\n.half-color span:nth-child(even){\r\n  color: red;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;div class=\"half-color\"&gt;This is a sentence&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 27,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1887101,
      "name": "Adjit",
      "reputation": 6627
    }
  },
  {
    "soID": 13805581,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/13805581",
    "title": null,
    "body": "<p>Array.isArray works fast, but it isn't supported by all versions of browsers.\nSo you could make an exception for others and use universal method:</p>\n\n<pre><code>    Utils = {};    \n    Utils.isArray = ('isArray' in Array) ? \n        Array.isArray : \n        function (value) {\n            return Object.prototype.toString.call(value) === '[object Array]';\n        }\n</code></pre>\n",
    "score": 27,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1892271,
      "name": "CruorVult",
      "reputation": 511
    }
  },
  {
    "soID": 43595298,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/43595298",
    "title": null,
    "body": "<p>ES5 compatible native one-liner:</p>\n\n<pre><code>var merged = [obj1, obj2].reduce(function(a, o) { for(k in o) a[k] = o[k]; return a; }, {})\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 20535629,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/20535629",
    "title": null,
    "body": "<p>Several great answers here, but it all seems very complex. This is very similar to how bash scripts access argument values and it's already provided standard with node.js as MooGoo pointed out.\n(Just to make it understandable to somebody that's new to node.js)</p>\n\n<p>Example:</p>\n\n<pre><code>$ node yourscript.js banana monkey\n\nvar program_name = process.argv[0]; //value will be \"node\"\nvar script_path = process.argv[1]; //value will be \"yourscript.js\"\nvar first_value = process.argv[2]; //value will be \"banana\"\nvar second_value = process.argv[3]; //value will be \"monkey\"\n</code></pre>\n",
    "score": 58,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1897103,
      "name": "Kalemanzi",
      "reputation": 792
    }
  },
  {
    "soID": 16400232,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/16400232",
    "title": null,
    "body": "<p>My piece: nodejs is great for making real time systems like analytics, chat-apps, apis, ad servers, etc.\nHell, I made my first chat app using nodejs and socket.io under 2 hours and that too during exam \nweek!</p>\n\n<p><strong>Edit</strong></p>\n\n<p>Its been several years since I have started using nodejs and I have used it in making many different things including static file servers, simple analytics, chat apps and much more.\nThis is my take on when to use nodejs</p>\n\n<p><strong>When to use</strong></p>\n\n<p>When making system which put emphasis on concurrency and speed.</p>\n\n<ul>\n<li>Sockets only servers like chat apps, irc apps, etc.</li>\n<li>Social networks which put emphasis on realtime resources like geolocation, video stream, audio        stream, etc.</li>\n<li>Handling small chunks of data really fast like an analytics webapp.</li>\n<li>As exposing a REST only api.</li>\n</ul>\n\n<p><strong>When not to use</strong></p>\n\n<p>Its a very versatile webserver so you can use it wherever you want but probably not these places.</p>\n\n<ul>\n<li>Simple blogs and static sites.</li>\n<li>Just as a static file server.</li>\n</ul>\n\n<p>Keep in mind that I am just nitpicking. For static file servers, apache is better mainly because it is widely available. The nodejs community has grown larger and more mature over the years and it is safe to say nodejs can be used just about everywhere if you have your own choice of hosting.</p>\n",
    "score": 37,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1917723,
      "name": "shash7",
      "reputation": 1539
    }
  },
  {
    "soID": 23572567,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/23572567",
    "title": null,
    "body": "<p>Here an ugly implementation in canvas. I tried this solution, but the results are worse than I expected, so here it is anyway.</p>\n\n<p><img src=\"https://i.stack.imgur.com/ltPQu.png\" alt=\"Canvas example\"></p>\n\n<p><a href=\"http://jsfiddle.net/kLXmL/2/\" rel=\"noreferrer\">http://jsfiddle.net/kLXmL/2/</a></p>\n\n<pre><code>&lt;div&gt;Example Text&lt;/div&gt;\n\n$(function(){\n    $(\"div\").each(function(){\n        var CHARS = $(this).text().split('');\n        $(this).html(\"\");\n        $.each(CHARS,function(index, char){\n            var canvas = $(\"&lt;canvas /&gt;\")\n                    .css(\"width\", \"40px\")\n                    .css(\"height\", \"40px\")\n                    .get(0);\n            $(\"div\").append(canvas);\n            var ctx = canvas.getContext(\"2d\");\n            var gradient = ctx.createLinearGradient(0, 0, 130, 0);\n            gradient.addColorStop(\"0\", \"blue\");\n            gradient.addColorStop(\"0.5\", \"blue\");\n            gradient.addColorStop(\"0.51\", \"red\");\n            gradient.addColorStop(\"1.0\", \"red\");\n            ctx.font = '130pt Calibri';\n            ctx.fillStyle = gradient;\n            ctx.fillText(char, 10, 130);\n        });\n    });\n});\n</code></pre>\n",
    "score": 54,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1922325,
      "name": "HaSuKrOnOs",
      "reputation": 1279
    }
  },
  {
    "soID": 18897287,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/18897287",
    "title": null,
    "body": "<h2>try this shorter one</h2>\n\n<ul>\n<li><p>no array</p></li>\n<li><p>no extra for loop</p></li>\n</ul>\n\n<p><br/></p>\n\n<pre><code>for (var i = 0; i &lt; 3; i++) {\n    createfunc(i)();\n}\n\nfunction createfunc(i) {\n    return function(){console.log(\"My value: \" + i);};\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/7P6EN/\">http://jsfiddle.net/7P6EN/</a></p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1923723,
      "name": "yilmazburk",
      "reputation": 670
    }
  },
  {
    "soID": 35619412,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/35619412",
    "title": null,
    "body": "<p>You can try this:</p>\n\n<pre><code>var arr = []; (or) arr = new Array();\nvar obj = {}; (or) arr = new Object();\n\narr.constructor.prototype.hasOwnProperty('push') //true\n\nobj.constructor.prototype.hasOwnProperty('push') // false\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1936006,
      "name": "VVL",
      "reputation": 386
    }
  },
  {
    "soID": 22784194,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/22784194",
    "title": null,
    "body": "<p>jQuery way using <code>$.map</code>:</p>\n\n<pre><code>var data = [1, 2, 3, 4, 5, 6, 7];\n\nvar newData = $.map(data, function(element) {\n    if (element % 2 == 0) {\n        return element;\n    }\n});\n\n// newData = [2, 4, 6];\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1948292,
      "name": "DanFromGermany",
      "reputation": 16696
    }
  },
  {
    "soID": 34724436,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/34724436",
    "title": null,
    "body": "<p>Passing,parsing arguments is an easy process. Node provides you with the process.argv property, which is an array of strings, which are the arguments that were used when Node was invoked. \nThe first entry of the array is the Node executable, and the second entry is the name of your script. </p>\n\n<p>If you run script with below atguments</p>\n\n<pre><code>$ node args.js arg1 arg2\n</code></pre>\n\n<p>File : args.js</p>\n\n<pre><code>console.log(process.argv)\n</code></pre>\n\n<p>You will get array like</p>\n\n<pre><code> ['node','args.js','arg1','arg2']\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1952733,
      "name": "Piyush Sagar",
      "reputation": 966
    }
  },
  {
    "soID": 15352516,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/15352516",
    "title": null,
    "body": "<pre><code>A = [1,2,3]\nconsole.log(A.map==[].map)\n</code></pre>\n\n<p>In search for shortest version here is what I got so far.</p>\n\n<p>Note, there is no perfect function that will always detect all possible combinations. <strong>It is better to know all abilities and limitations of your tools than expect a magic tool.</strong></p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1968972,
      "name": "exebook",
      "reputation": 9061
    }
  },
  {
    "soID": 32141821,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/32141821",
    "title": null,
    "body": "<p>If you prefer plain javascript try this:</p>\n\n<pre><code>  /**\n   * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a\n   * length of `0` and objects with no own enumerable properties are considered\n   * \"empty\".\n   *\n   * @static\n   * @memberOf _\n   * @category Objects\n   * @param {Array|Object|string} value The value to inspect.\n   * @returns {boolean} Returns `true` if the `value` is empty, else `false`.\n   * @example\n   *\n   * _.isEmpty([1, 2, 3]);\n   * // =&gt; false\n   *\n   * _.isEmpty([]);\n   * // =&gt; true\n   *\n   * _.isEmpty({});\n   * // =&gt; true\n   *\n   * _.isEmpty('');\n   * // =&gt; true\n   */\n\nfunction isEmpty(value) {\n    if (!value) {\n      return true;\n    }\n    if (isArray(value) || isString(value)) {\n      return !value.length;\n    }\n    for (var key in value) {\n      if (hasOwnProperty.call(value, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n</code></pre>\n\n<p>Otherwise, if you are already using underscore or lodash, try:</p>\n\n<pre><code>_.isEmpty(value)\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1978383,
      "name": "l3x",
      "reputation": 10769
    }
  },
  {
    "soID": 34113952,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/34113952",
    "title": null,
    "body": "<pre><code>    // Create a row and append to table\n    var row = $('&lt;tr /&gt;', {})\n        .appendTo(\"#table_id\");\n\n    // Add columns to the row. &lt;td&gt; properties can be given in the JSON\n    $('&lt;td /&gt;', {\n        'text': 'column1'\n    }).appendTo(row);\n\n    $('&lt;td /&gt;', {\n        'text': 'column2',\n        'style': 'min-width:100px;'\n    }).appendTo(row);\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 1983761,
      "name": "Pankaj Garg",
      "reputation": 549
    }
  },
  {
    "soID": 14831014,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/14831014",
    "title": null,
    "body": "<p>Since I don't like any Object.prototype-calls, I searched for another solution. Especially because the solutions of ChaosPandion won't always work, and the solution of MidnightTortoise with <code>isArray()</code> doesn't work with arrays coming from the DOM (like <em>getElementsByTagName</em>). And finally I found an easy and cross-browser solution, which probably also would have worked with Netscape 4. ;)</p>\n\n<p>It's just these 4 lines (checking any object <code>h</code>):</p>\n\n<pre><code>function isArray(h){\n    if((h.length!=undefined&amp;&amp;h[0]!=undefined)||(h.length===0&amp;&amp;h[0]===undefined)){\n        return true;\n    }\n    else{ return false; }\n}\n</code></pre>\n\n<p>I already tested these arrays (all return true):</p>\n\n<pre><code>1) array=d.getElementsByName('some_element'); //'some_element' can be a real or unreal element\n2) array=[];\n3) array=[10];\n4) array=new Array();\n5) array=new Array();\n   array.push(\"whatever\");\n</code></pre>\n\n<p>Can anybody confirm that this works for all cases? Or does anybody find a case where my solution don't work?</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2012947,
      "name": "Marcus",
      "reputation": 826
    }
  },
  {
    "soID": 18864842,
    "parentID": 9682092,
    "url": "https://stackoverflow.com/q/18864842",
    "title": null,
    "body": "<p>It happened that I needed to link a data model of a person with a form, what I did was a direct mapping of the data with the form.</p>\n\n<p>For example if the model had something like:</p>\n\n<pre><code>$scope.model.people.name\n</code></pre>\n\n<p>The control input of the form:</p>\n\n<pre><code>&lt;input type=\"text\" name=\"namePeople\" model=\"model.people.name\"&gt;\n</code></pre>\n\n<p>That way if you modify the value of the object controller, this will be reflected automatically in the view.</p>\n\n<p>An example where I passed the model is updated from server data is when you ask for a zip code and zip code based on written loads a list of colonies and cities associated with that view, and by default set the first value with the user. And this I worked very well, what does happen, is that <code>angularJS</code> sometimes takes a few seconds to refresh the model, to do this you can put a spinner while displaying the data.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2036668,
      "name": "gartox",
      "reputation": 647
    }
  },
  {
    "soID": 28526471,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/28526471",
    "title": null,
    "body": "<p>You can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\" rel=\"nofollow\">Object.prototype.hasOwnProperty()</a> </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var findInEnum,\r\n    colorEnum = {\r\n    red : 0,\r\n    green : 1,\r\n    blue : 2\r\n};\r\n\r\n// later on\r\n\r\nfindInEnum = function (enumKey) {\r\n  if (colorEnum.hasOwnProperty(enumKey)) {\r\n    return enumKey+' Value: ' + colorEnum[enumKey]\r\n  }\r\n}\r\n\r\nalert(findInEnum(\"blue\"))</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2065597,
      "name": "Tambo",
      "reputation": 14096
    }
  },
  {
    "soID": 18156435,
    "parentID": 1470488,
    "url": "https://stackoverflow.com/q/18156435",
    "title": null,
    "body": "<p>another difference \ne.g</p>\n\n<pre><code>var a = a || [] ; // works \n</code></pre>\n\n<p>while </p>\n\n<pre><code>a = a || [] ; // a is undefined error.\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2069458,
      "name": "Pranay Warke",
      "reputation": 91
    }
  },
  {
    "soID": 39894582,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/39894582",
    "title": null,
    "body": "<p>For my case I tried with if null,'', !variable, But it did not work.</p>\n\n<p>See my code below to get the text from an html field</p>\n\n<pre><code>var status=$(this).text(); //for example (for my case)\n</code></pre>\n\n<p>if there was no value(no text) in the status variable ,I was trying to set the value 'novalue' to status variable. </p>\n\n<p>the following code worked.</p>\n\n<pre><code>if(status == false)\n{\n   status='novalue';\n} \n</code></pre>\n\n<p>when there was no text found for satus variable the above code assigned 'novalue' to the status variable</p>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2090496,
      "name": "Hriju",
      "reputation": 386
    }
  },
  {
    "soID": 17243919,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/17243919",
    "title": null,
    "body": "<p>User Pumbaa80's answer is great if you have an <strong>object</strong> you want pretty printed. If you're starting from a valid JSON <strong>string</strong> that you want to pretty printed, you need to convert it to an object first:</p>\n\n<pre><code>var jsonString = '{\"some\":\"json\"}';\nvar jsonPretty = JSON.stringify(JSON.parse(jsonString),null,2);  \n</code></pre>\n\n<p>This builds a JSON object from the string, and then converts it back to a string using JSON stringify's pretty print.</p>\n",
    "score": 138,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2102634,
      "name": "Rick Hanlon II",
      "reputation": 7067
    }
  },
  {
    "soID": 18220648,
    "parentID": 1470488,
    "url": "https://stackoverflow.com/q/18220648",
    "title": null,
    "body": "<p>Inside a code you if you use a variable without using var, then what happens is the automatically var var_name is placed in the global scope eg:</p>\n\n<pre><code>someFunction() {\n    var a = some_value; /*a has local scope and it cannot be accessed when this\n    function is not active*/\n    b = a; /*here it places \"var b\" at top of script i.e. gives b global scope or\n    uses already defined global variable b */\n}\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2108905,
      "name": "Akash Arora",
      "reputation": 16
    }
  },
  {
    "soID": 15318284,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/15318284",
    "title": null,
    "body": "<p>If you don't mind emptying the array:</p>\n\n<pre><code>var x;\n\nwhile(x = y.pop()){ \n\n    alert(x); //do something \n\n}\n</code></pre>\n\n<p><code>x</code> will contain the last value of <code>y</code> and it will be removed from the array. You can also use <code>shift()</code> which will give and remove the first item from <code>y</code>.</p>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2117400,
      "name": "gaby de wilde",
      "reputation": 579
    }
  },
  {
    "soID": 33534889,
    "parentID": 21692646,
    "url": "https://stackoverflow.com/q/33534889",
    "title": null,
    "body": "<p>This is actually possible since Facebook was able to do it.\nWell, not the actual web developer tools but the execution of Javascript in console.</p>\n\n<p>See this: <a href=\"https://stackoverflow.com/questions/21692646/\">How does Facebook disable the browser&#39;s integrated Developer Tools?</a></p>\n\n<p>This really wont do much though since there are other ways to bypass this type of client-side security.</p>\n\n<p>When you say it is client-side, it happens outside the control of the server, so there is not much you can do about it. If you are asking why Facebook still does this, this is not really for security but to protect normal users that do not know javascript from running code (that they don't know how to read) into the console. This is common for sites that promise auto-liker service or other Facebook functionality bots after you do what they ask you to do, where in most cases, they give you a snip of javascript to run in console.</p>\n\n<p>If you don't have as much users as Facebook, then I don't think there's any need to do what Facebook is doing.</p>\n\n<p>Even if you disable Javascript in console, running javascript via address bar is still possible.</p>\n\n<p><a href=\"https://i.stack.imgur.com/pCtTk.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/pCtTk.png\" alt=\"enter image description here\"></a></p>\n\n<p><a href=\"https://i.stack.imgur.com/QxDLs.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/QxDLs.png\" alt=\"enter image description here\"></a></p>\n\n<p>and if the browser disables javascript at address bar, (When you paste code to the address bar in Google Chrome, it deletes the phrase 'javascript:') pasting javascript into one of the links via inspect element is still possible.</p>\n\n<p><strong>Inspect the anchor:</strong></p>\n\n<p><a href=\"https://i.stack.imgur.com/VHXyy.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/VHXyy.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>Paste code in href:</strong></p>\n\n<p><a href=\"https://i.stack.imgur.com/hwmKo.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/hwmKo.png\" alt=\"enter image description here\"></a></p>\n\n<p><a href=\"https://i.stack.imgur.com/UTUFH.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/UTUFH.png\" alt=\"enter image description here\"></a></p>\n\n<p><a href=\"https://i.stack.imgur.com/kwLjP.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/kwLjP.png\" alt=\"enter image description here\"></a></p>\n\n<p>Bottom line is server-side validation and security should be first, then do client-side after.</p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2128576,
      "name": "Jomar Sevillejo",
      "reputation": 684
    }
  },
  {
    "soID": 21531501,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/21531501",
    "title": null,
    "body": "<p>I know there are a lot of answers already, but many of them seem to over complicate the problem.  Here is a simple, recursive way of removing all instances of a key - calls self until index isn't found.  Yes, it only works in browsers with <code>indexOf</code>, but it's simple and can be easily polyfilled.</p>\n\n<p><strong>Stand-alone function</strong></p>\n\n<pre><code>function removeAll(array, key){\n    var index = array.indexOf(key);\n\n    if(index === -1) return;\n\n    array.splice(index, 1);\n    removeAll(array,key);\n}\n</code></pre>\n\n<p><strong>Prototype method</strong></p>\n\n<pre><code>Array.prototype.removeAll = function(key){\n    var index = this.indexOf(key);\n\n    if(index === -1) return;\n\n    this.splice(index, 1);\n    this.removeAll(key);\n}\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2132305,
      "name": "slccsoccer28",
      "reputation": 591
    }
  },
  {
    "soID": 45585221,
    "parentID": 14220321,
    "url": "https://stackoverflow.com/q/45585221",
    "title": null,
    "body": "<p>There is a lot of synchronous ways to get response</p>\n\n<pre><code>function sjax(sourceurl,transdata,method,datatype) {\n    var response=$.ajax({\n        type: method,\n        url: sourceurl,\n        data:transdata,\n        async: false,\n    }).responseText;\n    return response;\n}\n</code></pre>\n\n<p>or for example</p>\n\n<pre><code>function sjax(sourceurl,transdata,method,datatype) {\n    var request = new XMLHttpRequest();\n    request.open(method, sourceurl, false);\n    request.send(JSON.stringify(transdata));\n\n    if (request.status === 200) {\n      return request.responseText;\n    }\n}\n</code></pre>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2156417,
      "name": "Matas Lesinskas",
      "reputation": 45
    }
  },
  {
    "soID": 21515896,
    "parentID": 5874652,
    "url": "https://stackoverflow.com/q/21515896",
    "title": null,
    "body": "<p>Usually you'll want to use properties.\nUse attributes only for:</p>\n\n<ol>\n<li>Getting a custom HTML attribute (since it's not synced with a DOM property).</li>\n<li>Getting a HTML attribute that doesn't sync with a DOM property, e.g. get the \"original value\" of a standard HTML attribute, like <code>&lt;input value=\"abc\"&gt;.</code></li>\n</ol>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2160798,
      "name": "naor",
      "reputation": 819
    }
  },
  {
    "soID": 17695617,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/17695617",
    "title": null,
    "body": "<p>An easy solution now would be to use the <a href=\"https://en.wikipedia.org/wiki/Underscore.js\">underscore.js library</a>. It's providing many useful tools, such as <code>each</code> and will automatically delegate the job to the native <code>forEach</code> if available.</p>\n\n<p><a href=\"http://codepen.io/Micka33/pen/nbyxf\">A CodePen example</a> of how it works is:</p>\n\n<pre><code>var arr = [\"elemA\", \"elemB\", \"elemC\"];\n_.each(arr, function(elem, index, ar)\n{\n...\n});\n</code></pre>\n\n<h3>See also</h3>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">Documentation for native <code>Array.prototype.forEach()</code></a>.</li>\n<li>In <em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for_each...in\">for_each...in</a></em> (MDN) it is explained that <code>for each (variable in object)</code> is deprecated as the part of ECMA-357 (<a href=\"https://developer.mozilla.org/en-US/docs/E4X\">EAX</a>) standard.</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\">for...of</a> (MDN) describes the next way of iterating using <code>for (variable of object)</code> as the part of the Harmony (ECMAScript&nbsp;6) proposal.</li>\n</ul>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2199605,
      "name": "Micka",
      "reputation": 981
    }
  },
  {
    "soID": 32473657,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/32473657",
    "title": null,
    "body": "<p>Thanks a lot @all!\nBased on the previous answers, here is another variant method providing custom replacement rules as parameter:</p>\n\n<pre><code> renderJSON : function(json, rr, code, pre){\n   if (typeof json !== 'string') {\n      json = JSON.stringify(json, undefined, '\\t');\n   }\n  var rules = {\n   def : 'color:black;',    \n   defKey : function(match){\n             return '&lt;strong&gt;' + match + '&lt;/strong&gt;';\n          },\n   types : [\n       {\n          name : 'True',\n          regex : /true/,\n          type : 'boolean',\n          style : 'color:lightgreen;'\n       },\n\n       {\n          name : 'False',\n          regex : /false/,\n          type : 'boolean',\n          style : 'color:lightred;'\n       },\n\n       {\n          name : 'Unicode',\n          regex : /\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?/,\n          type : 'string',\n          style : 'color:green;'\n       },\n\n       {\n          name : 'Null',\n          regex : /null/,\n          type : 'nil',\n          style : 'color:magenta;'\n       },\n\n       {\n          name : 'Number',\n          regex : /-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/,\n          type : 'number',\n          style : 'color:darkorange;'\n       },\n\n       {\n          name : 'Whitespace',\n          regex : /\\s+/,\n          type : 'whitespace',\n          style : function(match){\n             return '&amp;nbsp';\n          }\n       } \n\n    ],\n\n    keys : [\n       {\n           name : 'Testkey',\n           regex : /(\"testkey\")/,\n           type : 'key',\n           style : function(match){\n             return '&lt;h1&gt;' + match + '&lt;/h1&gt;';\n          }\n       }\n    ],\n\n    punctuation : {\n          name : 'Punctuation',\n          regex : /([\\,\\.\\}\\{\\[\\]])/,\n          type : 'punctuation',\n          style : function(match){\n             return '&lt;p&gt;________&lt;/p&gt;';\n          }\n       }\n\n  };\n\n  if('undefined' !== typeof jQuery){\n     rules = $.extend(rules, ('object' === typeof rr) ? rr : {});  \n  }else{\n     for(var k in rr ){\n        rules[k] = rr[k];\n     }\n  }\n    var str = json.replace(/([\\,\\.\\}\\{\\[\\]]|\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n    var i = 0, p;\n    if (rules.punctuation.regex.test(match)) {\n               if('string' === typeof rules.punctuation.style){\n                   return '&lt;span style=\"'+ rules.punctuation.style + '\"&gt;' + match + '&lt;/span&gt;';\n               }else if('function' === typeof rules.punctuation.style){\n                   return rules.punctuation.style(match);\n               } else{\n                  return match;\n               }            \n    }\n\n    if (/^\"/.test(match)) {\n        if (/:$/.test(match)) {\n            for(i=0;i&lt;rules.keys.length;i++){\n            p = rules.keys[i];\n            if (p.regex.test(match)) {\n               if('string' === typeof p.style){\n                   return '&lt;span style=\"'+ p.style + '\"&gt;' + match + '&lt;/span&gt;';\n               }else if('function' === typeof p.style){\n                   return p.style(match);\n               } else{\n                  return match;\n               }                \n             }              \n           }   \n            return ('function'===typeof rules.defKey) ? rules.defKey(match) : '&lt;span style=\"'+ rules.defKey + '\"&gt;' + match + '&lt;/span&gt;';            \n        } else {\n            return ('function'===typeof rules.def) ? rules.def(match) : '&lt;span style=\"'+ rules.def + '\"&gt;' + match + '&lt;/span&gt;';\n        }\n    } else {\n        for(i=0;i&lt;rules.types.length;i++){\n         p = rules.types[i];\n         if (p.regex.test(match)) {\n               if('string' === typeof p.style){\n                   return '&lt;span style=\"'+ p.style + '\"&gt;' + match + '&lt;/span&gt;';\n               }else if('function' === typeof p.style){\n                   return p.style(match);\n               } else{\n                  return match;\n               }                \n          }             \n        }\n\n     }\n\n    });\n\n  if(true === pre)str = '&lt;pre&gt;' + str + '&lt;/pre&gt;';\n  if(true === code)str = '&lt;code&gt;' + str + '&lt;/code&gt;';\n  return str;\n }\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2210355,
      "name": "webfan",
      "reputation": 29
    }
  },
  {
    "soID": 23569891,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/23569891",
    "title": null,
    "body": "<h1><a href=\"https://github.com/arbelh/HalfStyle\" rel=\"noreferrer\">Now on GitHub as a Plugin!</a></h1>\n\n<p><img src=\"https://i.stack.imgur.com/Glo2Q.png\" alt=\"enter image description here\"> Feel free to fork and improve.</p>\n\n<h1><a href=\"http://jsfiddle.net/arbel/pd9yB/1355/\" rel=\"noreferrer\">Demo</a> | <a href=\"https://github.com/arbelh/HalfStyle/archive/master.zip\" rel=\"noreferrer\">Download Zip</a> | <a href=\"http://www.half-style.com\" rel=\"noreferrer\">Half-Style.com</a> (Redirects to GitHub)</h1>\n\n<hr>\n\n<ul>\n<li><strong>Pure CSS</strong> for a Single Character</li>\n<li>JavaScript used for automation across text or multiple characters</li>\n<li>Preserves Text Accessibility for screen readers for the blind or visually\nimpaired</li>\n</ul>\n\n<h1>Part 1: Basic Solution</h1>\n\n<p><img src=\"https://i.stack.imgur.com/ZYic1.png\" alt=\"Half Style on text\"></p>\n\n<p><strong>Demo:</strong> <a href=\"http://jsfiddle.net/arbel/pd9yB/1362/\" rel=\"noreferrer\">http://jsfiddle.net/arbel/pd9yB/1362/</a></p>\n\n<hr>\n\n<p>This works on any dynamic text, or a single character, and is all automated. All you need to do is add a class on the target text and the rest is taken care of.</p>\n\n<p>Also, the accessibility of the original text is preserved for screen readers for the blind or visually impaired.</p>\n\n<p><strong>Explanation for a single character:</strong></p>\n\n<p>Pure CSS. All you need to do is to apply <code>.halfStyle</code> class to each element that contains the character you want to be half-styled.</p>\n\n<p>For each span element containing the character, you can create a data attribute, for example here <code>data-content=\"X\"</code>, and on the pseudo element use <code>content: attr(data-content);</code> so the <code>.halfStyle:before</code> class will be dynamic and you won't need to hard code it for every instance.</p>\n\n<p><strong>Explanation for any text:</strong></p>\n\n<p>Simply add <code>textToHalfStyle</code> class to the element containing the text.</p>\n\n<hr>\n\n<p><strong>CSS:</strong></p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.halfStyle {\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: black; /* or transparent, any color */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n}\n.halfStyle:before {\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    left:0;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    color: #f00;\n}\n</code></pre>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;p&gt;Single Characters:&lt;/p&gt;\n&lt;span class=\"halfStyle\" data-content=\"X\"&gt;X&lt;/span&gt;\n&lt;span class=\"halfStyle\" data-content=\"Y\"&gt;Y&lt;/span&gt;\n&lt;span class=\"halfStyle\" data-content=\"Z\"&gt;Z&lt;/span&gt;\n&lt;span class=\"halfStyle\" data-content=\"A\"&gt;A&lt;/span&gt;\n\n&lt;hr/&gt;\n&lt;p&gt;Automated:&lt;/p&gt;\n\n&lt;span class=\"textToHalfStyle\"&gt;Half-style, please.&lt;/span&gt;\n</code></pre>\n\n<hr>\n\n<p>To make it automated, simply add <code>textToHalfStyle</code> class to the element containing the text.</p>\n\n<p><strong>jQuery</strong> for automated mode:</p>\n\n<pre><code>jQuery(function($) {\n    var text, chars, $el, i, output;\n\n    // Iterate over all class occurences\n    $('.textToHalfStyle').each(function(idx, el) {\n        $el = $(el);\n        text = $el.text();\n        chars = text.split('');\n\n        // Set the screen-reader text\n        $el.html('&lt;span style=\"position: absolute !important;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);\"&gt;' + text + '&lt;/span&gt;');\n\n        // Reset output for appending\n        output = '';\n\n        // Iterate over all chars in the text\n        for (i = 0; i &lt; chars.length; i++) {\n            // Create a styled element for each character and append to container\n            output += '&lt;span aria-hidden=\"true\" class=\"halfStyle\" data-content=\"' + chars[i] + '\"&gt;' + chars[i] + '&lt;/span&gt;';\n        }\n\n        // Write to DOM only once\n        $el.append(output);\n    });\n});\n</code></pre>\n\n<p><strong>Demo:</strong> <a href=\"http://jsfiddle.net/arbel/pd9yB/1363/\" rel=\"noreferrer\">http://jsfiddle.net/arbel/pd9yB/1363/</a></p>\n\n<hr>\n\n<h1>Part 2: Advanced solution - Independent left and right parts</h1>\n\n<p><img src=\"https://i.stack.imgur.com/zYa0F.png\" alt=\"Half Style on text - advanced\"></p>\n\n<p><strong><em>With this solution you can style left and right parts, individually and independently</em></strong>.</p>\n\n<p>Everything is the same, only more advanced CSS does the magic.</p>\n\n<p><strong>Demo:</strong> <a href=\"http://jsfiddle.net/arbel/pd9yB/1363/\" rel=\"noreferrer\">http://jsfiddle.net/arbel/pd9yB/1363/</a></p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.halfStyle {\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: transparent; /* hide the base character */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n}\n.halfStyle:before { /* creates the left part */\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #f00; /* for demo purposes */\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n}\n.halfStyle:after { /* creates the right part */\n    display:block;\n    direction: rtl; /* very important, will make the width to start from right */\n    position:absolute;\n    z-index:2;\n    top:0;\n    left:50%;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #000; /* for demo purposes */\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n}\n</code></pre>\n\n<p><hr/>\n<hr/></p>\n\n<h1>Part 3: Mix-Match and Improve</h1>\n\n<p>Now that we know what is possible, let's create some variations.</p>\n\n<hr/>\n\n<h2>-Horizontal Half Parts</h2>\n\n<p><img src=\"https://i.stack.imgur.com/2eDaQ.png\" alt=\"halfStyle - Horizontal Half Parts\"></p>\n\n<h1><a href=\"http://jsfiddle.net/arbel/pd9yB/1356/\" rel=\"noreferrer\">Demo</a></h1>\n\n<pre><code>.halfStyle {\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: transparent; /* hide the base character */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n}\n.halfStyle:before { /* creates the top part */\n    display:block;\n    z-index:2;\n    position:absolute;\n    top:0;\n    height: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #f00; /* for demo purposes */\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n}\n.halfStyle:after { /* creates the bottom part */\n    display:block;\n    position:absolute;\n    z-index:1;\n    top:0;\n    height: 100%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #000; /* for demo purposes */\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n}\n</code></pre>\n\n<hr/>\n\n<hr/>\n\n<h2>-Vertical 1/3 Parts</h2>\n\n<p><img src=\"https://i.stack.imgur.com/ypn4X.png\" alt=\"halfStyle - Vertical 1/3 Parts\"></p>\n\n<h1><a href=\"http://jsfiddle.net/arbel/pd9yB/1357/\" rel=\"noreferrer\">Demo</a></h1>\n\n<pre><code>.halfStyle { /* base char and also the right 1/3 */\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: transparent; /* hide the base character */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n    color: #f0f; /* for demo purposes */\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n}\n.halfStyle:before { /* creates the left 1/3 */\n    display:block;\n    z-index:2;\n    position:absolute;\n    top:0;\n    width: 33.33%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #f00; /* for demo purposes */\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n}\n.halfStyle:after { /* creates the middle 1/3 */\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    width: 66.66%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #000; /* for demo purposes */\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n}\n</code></pre>\n\n<hr/>\n\n<hr/>\n\n<h2>-Horizontal 1/3 Parts</h2>\n\n<p><img src=\"https://i.stack.imgur.com/UeuxW.png\" alt=\"halfStyle - Horizontal 1/3 Parts\"></p>\n\n<h1><a href=\"http://jsfiddle.net/arbel/pd9yB/1358/\" rel=\"noreferrer\">Demo</a></h1>\n\n<pre><code>.halfStyle { /* base char and also the bottom 1/3 */\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: transparent;\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n    color: #f0f;\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n}\n.halfStyle:before { /* creates the top 1/3 */\n    display:block;\n    z-index:2;\n    position:absolute;\n    top:0;\n    height: 33.33%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #f00; /* for demo purposes */\n    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */\n}\n.halfStyle:after { /* creates the middle 1/3 */\n    display:block;\n    position:absolute;\n    z-index:1;\n    top:0;\n    height: 66.66%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #000; /* for demo purposes */\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n}\n</code></pre>\n\n<hr/>\n\n<hr/>\n\n<h2>-HalfStyle Improvement By @KevinGranger</h2>\n\n<p><img src=\"https://i.stack.imgur.com/PgdJ6.png\" alt=\"halfStyle - KevinGranger\"></p>\n\n<h1><a href=\"http://jsfiddle.net/arbel/pd9yB/1359/\" rel=\"noreferrer\">Demo</a></h1>\n\n<pre><code>body{\n    background-color: black;\n}\n\n.textToHalfStyle{\n    display:block;\n    margin: 200px 0 0 0;\n    text-align:center;\n}\n\n.halfStyle {\n    font-family: 'Libre Baskerville', serif;\n    position:relative;\n    display:inline-block;\n    width:1;\n    font-size:70px;\n    color: black;\n    overflow:hidden;\n    white-space: pre;\n    text-shadow: 1px 2px 0 white;\n}\n.halfStyle:before {\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    color: white;\n}\n</code></pre>\n\n<p><hr/>\n<hr/></p>\n\n<h2>-PeelingStyle improvement of HalfStyle by @SamTremaine</h2>\n\n<p><img src=\"https://i.stack.imgur.com/r67KC.png\" alt=\"halfStyle - SamTremaine\"></p>\n\n<h1><a href=\"http://jsfiddle.net/arbel/pd9yB/1360/\" rel=\"noreferrer\">Demo</a> and on <a href=\"http://experimental.samtremaine.co.uk/half-style/\" rel=\"noreferrer\">samtremaine.co.uk</a></h1>\n\n<pre><code>.halfStyle {\n    position: relative;\n    display: inline-block;\n    font-size: 68px;\n    color: rgba(0, 0, 0, 0.8);\n    overflow: hidden;\n    white-space: pre;\n    transform: rotate(4deg);\n    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);\n}\n.halfStyle:before { /* creates the left part */\n    display: block;\n    z-index: 1;\n    position: absolute;\n    top: -0.5px;\n    left: -3px;\n    width: 100%;\n    content: attr(data-content);\n    overflow: hidden;\n    pointer-events: none;\n    color: #FFF;\n    transform: rotate(-4deg);\n    text-shadow: 0px 0px 1px #000;\n}\n</code></pre>\n\n<p><hr/>\n<hr/></p>\n\n<h1>Part 4: Ready for Production</h1>\n\n<p>Customized different Half-Style style-sets can be used on desired elements on the same page.\nYou can define multiple style-sets and tell the plugin which one to use.</p>\n\n<p>The plugin uses data attribute <code>data-halfstyle=\"[-CustomClassName-]\"</code> on the target <code>.textToHalfStyle</code> elements and makes all the necessary changes automatically.</p>\n\n<p>So, simply on the element containing the text add <code>textToHalfStyle</code> class and data attribute <code>data-halfstyle=\"[-CustomClassName-]\"</code>. The plugin will do the rest of the job.</p>\n\n<p><img src=\"https://i.stack.imgur.com/RxjKF.png\" alt=\"halfStyle - Multiple on Same Page\"></p>\n\n<h1><a href=\"http://jsfiddle.net/arbel/pd9yB/1361/\" rel=\"noreferrer\">Demo</a> of Multiple Half-Styles on the same page.</h1>\n\n<pre><code>jQuery(function($) {\n    var halfstyle_text, halfstyle_chars, $halfstyle_el, halfstyle_i, halfstyle_output, halfstyle_style;\n\n    // Iterate over all class occurrences\n    $('.textToHalfStyle').each(function(idx, halfstyle_el) {\n        $halfstyle_el = $(halfstyle_el);\n        halfstyle_style = $halfstyle_el.data('halfstyle');\n        halfstyle_text = $halfstyle_el.text();\n        halfstyle_chars = halfstyle_text.split('');\n\n        // Set the screen-reader text\n        $halfstyle_el.html('&lt;span style=\"position: absolute !important;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);\"&gt;' + halfstyle_text + '&lt;/span&gt;');\n\n        // Reset output for appending\n        halfstyle_output = '';\n\n        // Iterate over all chars in the text\n        for (halfstyle_i = 0; halfstyle_i &lt; halfstyle_chars.length; halfstyle_i++) {\n            // Create a styled element for each character and append to container\n            halfstyle_output += '&lt;span aria-hidden=\"true\" class=\"halfStyle ' + halfstyle_style + '\" data-content=\"' + halfstyle_chars[halfstyle_i] + '\"&gt;' + halfstyle_chars[halfstyle_i] + '&lt;/span&gt;';\n        }\n\n        // Write to DOM only once\n        $halfstyle_el.append(halfstyle_output);\n    });\n});\n</code></pre>\n\n<p>Also the CSS style-sets' class definitions match the <code>[-CustomClassName-]</code> part mentioned above and is chained to <code>.halfStyle</code>, so we will have <code>.halfStyle.[-CustomClassName-]</code></p>\n\n<pre><code> /* start half-style hs-base */\n .halfStyle.hs-base {\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n    color: #000; /* for demo purposes */\n}\n.halfStyle.hs-base:before {\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    pointer-events: none; /* so the base char is selectable by mouse */\n    overflow:hidden;\n    color: #f00; /* for demo purposes */\n}\n /* end half-style hs-base */\n\n/* start half-style hs-horizontal-third */\n.halfStyle.hs-horizontal-third { /* base char and also the bottom 1/3 */\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: transparent;\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n    color: #f0f;\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n}\n.halfStyle.hs-horizontal-third:before { /* creates the top 1/3 */\n    display:block;\n    z-index:2;\n    position:absolute;\n    top:0;\n    height: 33.33%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #f00; /* for demo purposes */\n    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */\n}\n.halfStyle.hs-horizontal-third:after { /* creates the middle 1/3 */\n    display:block;\n    position:absolute;\n    z-index:1;\n    top:0;\n    height: 66.66%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #000; /* for demo purposes */\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n}\n/* end half-style hs-horizontal-third */\n\n/* start half-style hs-PeelingStyle, by user SamTremaine on Stackoverflow.com */\n.halfStyle.hs-PeelingStyle {\n    position: relative;\n    display: inline-block;\n    font-size: 68px;\n    color: rgba(0, 0, 0, 0.8);\n    overflow: hidden;\n    white-space: pre;\n    transform: rotate(4deg);\n    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);\n}\n.halfStyle.hs-PeelingStyle:before { /* creates the left part */\n    display: block;\n    z-index: 1;\n    position: absolute;\n    top: -0.5px;\n    left: -3px;\n    width: 100%;\n    content: attr(data-content);\n    overflow: hidden;\n    pointer-events: none;\n    color: #FFF;\n    transform: rotate(-4deg);\n    text-shadow: 0px 0px 1px #000;\n}\n/* end half-style hs-PeelingStyle */\n\n/* start half-style hs-KevinGranger, by user KevinGranger on StackOverflow.com*/\n.textToHalfStyle.hs-KevinGranger {\n    display:block;\n    margin: 200px 0 0 0;\n    text-align:center;\n}\n\n.halfStyle.hs-KevinGranger {\n    font-family: 'Libre Baskerville', serif;\n    position:relative;\n    display:inline-block;\n    width:1;\n    font-size:70px;\n    color: black;\n    overflow:hidden;\n    white-space: pre;\n    text-shadow: 1px 2px 0 white;\n}\n.halfStyle.hs-KevinGranger:before {\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    color: white;\n}\n/* end half-style hs-KevinGranger\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;p&gt;\n    &lt;span class=\"textToHalfStyle\" data-halfstyle=\"hs-base\"&gt;Half-style, please.&lt;/span&gt;\n&lt;/p&gt;\n&lt;p&gt;\n    &lt;span class=\"textToHalfStyle\" data-halfstyle=\"hs-horizontal-third\"&gt;Half-style, please.&lt;/span&gt;\n&lt;/p&gt;\n&lt;p&gt;\n    &lt;span class=\"textToHalfStyle\" data-halfstyle=\"hs-PeelingStyle\"&gt;Half-style, please.&lt;/span&gt;\n&lt;/p&gt;\n&lt;p style=\"background-color:#000;\"&gt;\n    &lt;span class=\"textToHalfStyle\" data-halfstyle=\"hs-KevinGranger\"&gt;Half-style, please.&lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n\n<h1><a href=\"http://jsfiddle.net/arbel/pd9yB/1361/\" rel=\"noreferrer\">Demo</a> of Multiple Half-Styles on the same page.</h1>\n",
    "score": 2410,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2210457,
      "name": "Arbel",
      "reputation": 20750
    }
  },
  {
    "soID": 24993631,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/24993631",
    "title": null,
    "body": "<p>I stumbled upon this question and i'd like to share a snippet of code i currently use:</p>\n\n<pre><code>$.fn.exists = function(callback) {\n    var self = this;\n    var wrapper = (function(){\n            function notExists () {}\n\n            notExists.prototype.otherwise = function(fallback){\n                if (!self.length) {                    \n                    fallback.call();\n                }\n            };\n\n            return new notExists;\n        })();\n\n    if(self.length) {\n        callback.call();    \n    }\n\n    return wrapper;\n}\n</code></pre>\n\n<p>And now i can write code like this - </p>\n\n<pre><code>$(\"#elem\").exists(function(){\n    alert (\"it exists\");\n}).otherwise(function(){\n    alert (\"it doesn't exist\");\n});\n</code></pre>\n\n<p>It might seem a lot of code, but when written in CoffeeScript it is quite small:</p>\n\n<pre><code>$.fn.exists = (callback) -&gt;\n    exists = @length\n    callback.call() if exists        \n    new class\n       otherwise: (fallback) -&gt;            \n            fallback.call() if not exists\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2214752,
      "name": "Eternal1",
      "reputation": 3542
    }
  },
  {
    "soID": 20740596,
    "parentID": 5404839,
    "url": "https://stackoverflow.com/q/20740596",
    "title": null,
    "body": "<p><em>You can perform this task without using jQuery by <code>window.location.reload();</code>. As there are many ways to do this but I think it is the appropriate way to reload the same docuemnt with javascript. Here is the explaination</em></p>\n\n<p>Javascript <strong>window.location</strong> object can be used </p>\n\n<ul>\n<li>Get the current page address (URL). </li>\n<li>To redirect the browser to other page.</li>\n<li>To reload the same page.</li>\n</ul>\n\n<p><strong>window</strong> -- The window object in java-script represents an open window in a browser. </p>\n\n<p><strong>location</strong> -- The location object in java script holds information about the current URL.</p>\n\n<p>The location object is like a fragment of the window object and is called up through the <strong>window.location</strong> property.</p>\n\n<p><strong>Location Objects</strong> has three methods -- </p>\n\n<ol>\n<li><strong>assign()</strong>      Used to load a new document</li>\n<li><strong>reload()</strong>      Used to reloads the current document.    </li>\n<li><strong>replace()</strong>    Used to replace the current document with a new one</li>\n</ol>\n\n<p>So here we need to use <strong>reload()</strong> because it can help us in reloading  the same document.</p>\n\n<p>So use it like <code>window.location.reload();</code></p>\n\n<p><a href=\"http://jsfiddle.net/agrawalnikhil/4FhHA/\">Online Demo jsfiddle</a></p>\n\n<p><em>To ask your browser to retrieve the page directly from the server not from the cache, you can pass a true parameter to location.reload():</em> </p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2218452,
      "name": "Nikhil Agrawal",
      "reputation": 13082
    }
  },
  {
    "soID": 21432248,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/21432248",
    "title": null,
    "body": "<p>Based on Pumbaa80's answer I have modified the code to use the console.log colours (working on Chrome for sure) and not HTML. Output can be seen inside console. You can edit the _variables inside the function adding some more styling.</p>\n\n<pre><code>function JSONstringify(json) {\n    if (typeof json != 'string') {\n        json = JSON.stringify(json, undefined, '\\t');\n    }\n\n    var \n        arr = [],\n        _string = 'color:green',\n        _number = 'color:darkorange',\n        _boolean = 'color:blue',\n        _null = 'color:magenta',\n        _key = 'color:red';\n\n    json = json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n        var style = _number;\n        if (/^\"/.test(match)) {\n            if (/:$/.test(match)) {\n                style = _key;\n            } else {\n                style = _string;\n            }\n        } else if (/true|false/.test(match)) {\n            style = _boolean;\n        } else if (/null/.test(match)) {\n            style = _null;\n        }\n        arr.push(style);\n        arr.push('');\n        return '%c' + match + '%c';\n    });\n\n    arr.unshift(json);\n\n    console.log.apply(console, arr);\n}\n</code></pre>\n\n<p>Here is a bookmarklet you can use:</p>\n\n<pre><code>javascript:function JSONstringify(json) {if (typeof json != 'string') {json = JSON.stringify(json, undefined, '\\t');}var arr = [],_string = 'color:green',_number = 'color:darkorange',_boolean = 'color:blue',_null = 'color:magenta',_key = 'color:red';json = json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {var style = _number;if (/^\"/.test(match)) {if (/:$/.test(match)) {style = _key;} else {style = _string;}} else if (/true|false/.test(match)) {style = _boolean;} else if (/null/.test(match)) {style = _null;}arr.push(style);arr.push('');return '%c' + match + '%c';});arr.unshift(json);console.log.apply(console, arr);};void(0);\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var obj = {a:1, 'b':'foo', c:[false,null, {d:{e:1.3e5}}]};\nJSONstringify(obj);\n</code></pre>\n\n<p>Edit: I just tried to escape the % symbol with this line, after the variables declaration:</p>\n\n<pre><code>json = json.replace(/%/g, '%%');\n</code></pre>\n\n<p>But I find out that Chrome is not supporting % escaping in the console. Strange... Maybe this will work in the future.</p>\n\n<p>Cheers!</p>\n\n<p><a href=\"https://i.stack.imgur.com/GsMl9.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/GsMl9.jpg\" alt=\"enter image description here\"></a></p>\n",
    "score": 17,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2236654,
      "name": "Milen Boev",
      "reputation": 171
    }
  },
  {
    "soID": 16870190,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/16870190",
    "title": null,
    "body": "<p>You could use this:</p>\n\n<pre><code>jQuery.fn.extend({\n    exists: function() { return this.length }\n});\n\nif($(selector).exists()){/*do something*/}\n</code></pre>\n",
    "score": 32,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2245634,
      "name": "Amitābha",
      "reputation": 1284
    }
  },
  {
    "soID": 19112051,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/19112051",
    "title": null,
    "body": "<p>A quick and simple way would be :</p>\n\n<pre><code>var Colors = function(){\nreturn {\n    'WHITE':0,\n    'BLACK':1,\n    'RED':2,\n    'GREEN':3\n    }\n}();\n\nconsole.log(Colors.WHITE)  //this prints out \"0\"\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2254487,
      "name": "user2254487",
      "reputation": 153
    }
  },
  {
    "soID": 15948460,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/15948460",
    "title": null,
    "body": "<p>I've modified the solution of Andre 'Fi':</p>\n\n<pre><code>  function Enum() {\n    var that = this;\n    for (var i in arguments) {\n        that[arguments[i]] = i;\n    }\n    this.name = function(value) {\n        for (var key in that) {\n            if (that[key] == value) {\n                return key;\n            }\n        }\n    };\n    this.exist = function(value) {\n        return (typeof that.name(value) !== \"undefined\");\n    };\n    if (Object.freeze) {\n        Object.freeze(that);\n    }\n  }\n</code></pre>\n\n<p>Test:</p>\n\n<pre><code>var Color = new Enum('RED', 'GREEN', 'BLUE');\nundefined\nColor.name(Color.REDs)\nundefined\nColor.name(Color.RED)\n\"RED\"\nColor.exist(Color.REDs)\nfalse\nColor.exist(Color.RED)\ntrue\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2270217,
      "name": "David Miró",
      "reputation": 1051
    }
  },
  {
    "soID": 34116242,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/34116242",
    "title": null,
    "body": "<p>This is the fastest among all methods (all browsers supported):</p>\n\n<pre><code>function isArray(obj){\n    return !!obj &amp;&amp; obj.constructor === Array;\n}\n</code></pre>\n",
    "score": 73,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2279116,
      "name": "shinobi",
      "reputation": 1541
    }
  },
  {
    "soID": 30512485,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/30512485",
    "title": null,
    "body": "<p>If you use <code>window.open(url, '_blank')</code>, it will be blocked (popup blocker) on Chrome.</p>\n\n<p>Try this:</p>\n\n<pre><code>$('#myButton').click(function () {\n    var redirectWindow = window.open('http://google.com', '_blank');\n    redirectWindow.location;\n});\n</code></pre>\n",
    "score": 44,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2293686,
      "name": "Mohammed Safeer",
      "reputation": 4700
    }
  },
  {
    "soID": 31636748,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/31636748",
    "title": null,
    "body": "<p>Create an object literal:</p>\n\n<pre><code>const Modes = {\n  DRAGGING: 'drag',\n  SCALING:  'scale',\n  CLICKED:  'click'\n};\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2326407,
      "name": "hvdd",
      "reputation": 315
    }
  },
  {
    "soID": 15839739,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/15839739",
    "title": null,
    "body": "<p>There is nothing like Silver Bullet. Everything comes with some cost associated with it. It is like if you eat oily food, you will compromise your health and healthy food does not come with spices like oily food. It is individual choice whether they want health or spices as in their food.\nSame way Node.js consider to be used in specific scenario. If your app does not fit into that scenario you should not consider it for your app development. I am just putting my thought on the same:</p>\n\n<p><strong>When to use Node.JS</strong></p>\n\n<ol>\n<li>If your server side code requires very few cpu cycles. In other world you are doing non blocking operation and does not have heavy algorithm/Job which consumes lots of CPU cycles.</li>\n<li>If you are from Javascript back ground and comfortable in writing Single Threaded code just like client side JS.</li>\n</ol>\n\n<p><strong>When NOT to use Node.JS</strong></p>\n\n<ol>\n<li>Your server request is dependent on heavy CPU consuming algorithm/Job.</li>\n</ol>\n\n<p><strong>Scalability Consideration with Node.JS</strong></p>\n\n<ol>\n<li>Node.JS itself does not utilize all core of underlying system and it is single threaded by default, you have to write logic by your own to utilize multi core processor and make it multi threaded.</li>\n</ol>\n\n<p><strong>Node.JS Alternatives</strong></p>\n\n<p>There are other option to use in place of Node.JS however <a href=\"http://vertx.io/\">Vert.x</a> seems to be pretty promising and has lots of additional features like polygot and better scalability considerations.</p>\n",
    "score": 60,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2338277,
      "name": "ajay",
      "reputation": 2058
    }
  },
  {
    "soID": 39802656,
    "parentID": 1470488,
    "url": "https://stackoverflow.com/q/39802656",
    "title": null,
    "body": "<p>As someeone trying to learn this this is how I see it. The above examples were maybe a bit overly complicated for a beginner. </p>\n\n<p>If you run this code:</p>\n\n<pre><code>var local = true;\nvar global = true;\n\n\nfunction test(){\n  var local = false;\n  var global = false;\n  console.log(local)\n  console.log(global)\n}\n\ntest();\n\nconsole.log(local);\nconsole.log(global);\n</code></pre>\n\n<p>The output will read as:  false, false, true, true</p>\n\n<p>Because it sees the variables in the function as seperate from those outside of it, hence the term local variable and this was because we used var in the assignment. If you take away the var in the function so it now reads like this:</p>\n\n<pre><code>var local = true;\nvar global = true;\n\n\nfunction test(){\n  local = false;\n  global = false;\n  console.log(local)\n  console.log(global)\n}\n\ntest();\n\nconsole.log(local);\nconsole.log(global);\n</code></pre>\n\n<p>The output is false, false, false, false</p>\n\n<p>This is because rather than creating a new variable in the local scope or function it simply uses the global variables and reassigns them to false. </p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2352648,
      "name": "Danrex",
      "reputation": 717
    }
  },
  {
    "soID": 24336808,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/24336808",
    "title": null,
    "body": "<p>I know this is an old post, and there are so many great answers already. For a little more completeness I figured I'd throw in another one using <a href=\"https://angularjs.org/\" rel=\"noreferrer\">AngularJS</a>. Of course, this only applies if you're using Angular, obviously, nonetheless I'd like to put it anyway.</p>\n\n<p><code>angular.forEach</code> takes 2 arguments and an optional third argument. The first argument is the object (array) to iterate over, the second argument is the iterator function, and the optional third argument is the object context (basically referred to inside the loop as 'this'.</p>\n\n<p>There are different ways to use the forEach loop of angular. The simplest and probably most used is</p>\n\n<pre><code>var temp = [1, 2, 3];\nangular.forEach(temp, function(item) {\n    //item will be each element in the array\n    //do something\n});\n</code></pre>\n\n<p>Another way that is useful for copying items from one array to another is</p>\n\n<pre><code>var temp = [1, 2, 3];\nvar temp2 = [];\nangular.forEach(temp, function(item) {\n    this.push(item); //\"this\" refers to the array passed into the optional third parameter so, in this case, temp2.\n}, temp2);\n</code></pre>\n\n<p>Though, you don't have to do that, you can simply do the following and it's equivalent to the previous example:</p>\n\n<pre><code>angular.forEach(temp, function(item) {\n    temp2.push(item);\n});\n</code></pre>\n\n<p>Now there are pros and cons of using the <code>angular.forEach</code> function as opposed to the built in vanilla-flavored <code>for</code> loop.</p>\n\n<p><strong>Pros</strong></p>\n\n<ul>\n<li>Easy readability</li>\n<li>Easy writability</li>\n<li>If available, <code>angular.forEach</code> will use the ES5 forEach loop. Now, I will get to efficientcy in the cons section, as the forEach loops are <em>much</em> slower than the for loops. I mention this as a pro because it's nice to be consistent and standardized.</li>\n</ul>\n\n<p>Consider the following 2 nested loops, which do exactly the same thing. Let's say that we have 2 arrays of objects and each object contains an array of results, each of which has a Value property that's a string (or whatever). And let's say we need to iterate over each of the results and if they're equal then perform some action: </p>\n\n<pre><code>angular.forEach(obj1.results, function(result1) {\n    angular.forEach(obj2.results, function(result2) {\n        if (result1.Value === result2.Value) {\n            //do something\n        }\n    });\n});\n\n//exact same with a for loop\nfor (var i = 0; i &lt; obj1.results.length; i++) {\n    for (var j = 0; j &lt; obj2.results.length; j++) {\n        if (obj1.results[i].Value === obj2.results[j].Value) {\n            //do something\n        }\n    }\n}\n</code></pre>\n\n<p>Granted this is a very simple hypothetical example, but I've written triple embedded for loops using the second approach and it was <em>very</em> hard to read, and write for that matter.</p>\n\n<p><strong>Cons</strong></p>\n\n<ul>\n<li>Efficiency. <code>angular.forEach</code>, and the native <code>forEach</code>, for that matter, are both <em>so much</em> slower than the normal <code>for</code> loop....about <a href=\"http://jsperf.com/angular-foreach-vs-native-for-loop/3\" rel=\"noreferrer\">90% slower</a>. So for large data sets, best to stick to the native <code>for</code> loop.</li>\n<li>No break, continue, or return support. <code>continue</code> is actually supported by \"<a href=\"https://github.com/angular/angular.js/issues/263\" rel=\"noreferrer\">accident</a>\", to continue in an <code>angular.forEach</code> you simple put a <code>return;</code> statement in the function like <code>angular.forEach(array, function(item) { if (someConditionIsTrue) return; });</code> which will cause it to continue out of the function for that iteration. This is also due to the fact that the native <code>forEach</code> does not support break or continue either.</li>\n</ul>\n\n<p>I'm sure there's various other pros and cons as well, and please feel free to add any that you see fit. I feel that, bottom line, if you need efficiency, stick with just the native <code>for</code> loop for your looping needs. But, if your datasets are smaller and a some efficiency is okay to give up in exchange for readability and writability, then by all means throw an <code>angular.forEach</code> in that bad boy.</p>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2359695,
      "name": "user2359695",
      "reputation": 359
    }
  },
  {
    "soID": 19818592,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/19818592",
    "title": null,
    "body": "<p>Or you could just create a link element and click it...</p>\n\n<pre><code>var evLink = document.createElement('a');\nevLink.href = 'http://' + strUrl;\nevLink.target = '_blank';\ndocument.body.appendChild(evLink);\nevLink.click();\n// Now delete it\nevLink.parentNode.removeChild(evLink);\n</code></pre>\n\n<p>This shouldn't be blocked by any popup blockers... Hopefully.</p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2375716,
      "name": "Luke Alderton",
      "reputation": 1284
    }
  },
  {
    "soID": 29374455,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/29374455",
    "title": null,
    "body": "<p>Another method:</p>\n\n<pre><code>function concat_collection(obj1, obj2) {\n    var i;\n    var arr = new Array();\n\n    var len1 = obj1.length;\n    for (i=0; i&lt;len1; i++) {\n        arr.push(obj1[i]);\n    }\n\n    var len2 = obj2.length;\n    for (i=0; i&lt;len2; i++) {\n        arr.push(obj2[i]);\n    }\n\n    return arr;\n}\n\nvar ELEMENTS = concat_collection(A,B);\nfor(var i = 0; i &lt; ELEMENTS.length; i++) {\n    alert(ELEMENTS[i].value);\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 30088851,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/30088851",
    "title": null,
    "body": "<p>This is a problem often encountered with asynchronous code, the variable <code>i</code> is mutable and at the time at which the function call is made the code using <code>i</code> will be executed and <code>i</code> will have mutated to it's last value.. thus meaning all functions created withing the loop will create a closure and <code>i</code> will be equal to 3 (the upper bound + 1 of the <code>for</code> loop.</p>\n\n<p>A workaround to this, is to create a function that will hold the value of <code>i</code> for each iteration and force a copy <code>i</code> (as it is a primitive, think of it as a snapshot if it helps you).</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2389720,
      "name": "axelduch",
      "reputation": 8652
    }
  },
  {
    "soID": 16646188,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/16646188",
    "title": null,
    "body": "<p>As i have also got a way too add row at last or any specific place so i think i should also share this:</p>\n\n<p>First find out the length or rows:</p>\n\n<pre><code>var r=$(\"#content_table\").length;\n</code></pre>\n\n<p>and then use below code to add your row:</p>\n\n<pre><code>$(\"#table_id\").eq(r-1).after(row_html);\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2392594,
      "name": "Jaid07",
      "reputation": 143
    }
  },
  {
    "soID": 16863603,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/16863603",
    "title": null,
    "body": "<p>\"Use Strict\"; is an insurance that programmer will not use the loose or the bad properties of JavaScript. It is a guide, just like a ruler will help you make straight lines. \"Use Strict\" will help you do \"Straight coding\".</p>\n\n<p>Those that prefer not to use rulers to do their lines straight usually end up in those pages asking for others to debug their code.</p>\n\n<p>Believe me. The overhead is negligible compared to poorly designed code. <a href=\"http://www.yuiblog.com/blog/2010/12/14/strict-mode-is-coming-to-town/\" rel=\"noreferrer\">Doug Crockford, who has been a senior JavaScript developer for several years, has a very interesting post here</a>. Personally, I like to return to his site all the time to make sure I don't forget my good practice.</p>\n\n<p><strong>Modern JavaScript practice should always evoke the \"Use Strict\"; pragma.</strong> The only reason that the ECMA Group has made the \"Strict\" mode optional <em>is to permit less experienced coders access to JavaScript and give then time to adapt to the new and safer coding practices.</em></p>\n",
    "score": 35,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2436758,
      "name": "user2436758",
      "reputation": 659
    }
  },
  {
    "soID": 29158446,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/29158446",
    "title": null,
    "body": "<p>Just thought I'd throw this in:</p>\n\n<pre><code>function inArray(val, ary){\n  for(var i=0,l=ary.length; i&lt;l; i++){\n    if(ary[i] === val){\n      return true;\n    }\n  }\n  return false;\n}\nfunction removeClassName(classNameS, fromElement){\n  var x = classNameS.split(/\\s/), s = fromElement.className.split(/\\s/), r = [];\n  for(var i=0,l=s.length; i&lt;l; i++){\n    if(!iA(s[i], x))r.push(s[i]);\n  }\n  fromElement.className = r.join(' ');\n}\nfunction addClassName(classNameS, toElement){\n  var s = toElement.className.split(/\\s/);\n  s.push(c); toElement.className = s.join(' ');\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2438423,
      "name": "PHPglue",
      "reputation": 6732
    }
  },
  {
    "soID": 28374344,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/28374344",
    "title": null,
    "body": "<p>With <strong>jQuery</strong> I'm using this one:</p>\n\n<pre><code>var url = \"http://google.com\";\n$(\"&lt;a&gt;\").attr(\"href\", url).attr(\"target\", \"_blank\")[0].click();\n</code></pre>\n\n<p>It creates a virtual <code>a</code> element, gives it <code>target=\"_blank\"</code> so it opens in new tab, gives it proper <code>url</code> <code>href</code> and then clicks it.</p>\n\n<p>And if you want, based on that you can create some function:</p>\n\n<pre><code>function openInNewTab(url) {\n    $(\"&lt;a&gt;\").attr(\"href\", url).attr(\"target\", \"_blank\")[0].click();\n}\n</code></pre>\n\n<p>and then you can use it like:</p>\n\n<pre><code>openInNewTab(\"http://google.com\");\n</code></pre>\n\n<hr>\n\n<p>For a <strong>non-jQuery</strong> scenario, the function would look like this:</p>\n\n<pre><code>function openInNewTab(url) {\n    var a = document.createElement(\"a\");\n    a.target = \"_blank\";\n    a.href = url;\n    a.click();\n}\n\n// And then\nopenInNewTab(\"http://google.com\");\n</code></pre>\n",
    "score": 73,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2446799,
      "name": "pie6k",
      "reputation": 3661
    }
  },
  {
    "soID": 17138892,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/17138892",
    "title": null,
    "body": "<p>If your script is called myScript.js and you want to pass the first and last name, 'Sean Worthington', as arguments like below:</p>\n\n<pre><code>node myScript.js Sean Worthington\n</code></pre>\n\n<p>Then within your script you write:</p>\n\n<pre><code>var firstName = process.argv[2]; // Will be set to 'Sean'\nvar lastName = process.argv[3]; // Will be set to 'Worthington'\n</code></pre>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2488340,
      "name": "Sean H. Worthington",
      "reputation": 598
    }
  },
  {
    "soID": 44423502,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/44423502",
    "title": null,
    "body": "<p>A simple snippet if any need it:</p>\n\n<pre><code>var fs = require('fs'), objMod = {};\n\nprocess.argv.slice(2).map(function(y, i) {\n  y = y.split('=');\n  if (y[0] &amp;&amp; y[1]) objMod[y[0]] = y[1];\n  else console.log('Error in argument number ' + (i+1));\n});\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2489649,
      "name": "Casy",
      "reputation": 130
    }
  },
  {
    "soID": 34886037,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/34886037",
    "title": null,
    "body": "<pre><code>&lt;table id=\"myTable\"&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n    &lt;tr&gt;...&lt;/tr&gt;\n  &lt;/tbody&gt;\n  &lt;tr&gt;...&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>Write with a javascript function</p>\n\n<pre><code>document.getElementById(\"myTable\").insertRow(-1).innerHTML = '&lt;tr&gt;...&lt;/tr&gt;&lt;tr&gt;...&lt;/tr&gt;';\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2497154,
      "name": "Jakir Hossain",
      "reputation": 1500
    }
  },
  {
    "soID": 43735146,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/43735146",
    "title": null,
    "body": "<p>Use ECMA-6 let keyword to bind the scope of a variable with block</p>\n\n<pre><code>var funcs = [];\nfor (let i = 0; i &lt; 3; i++) {      // let's create 3 functions\nfuncs[i] = function() {          // and store them in funcs\n    console.log(\"My value: \" + i); // each should log its value.\n };\n}\nfor (var j = 0; j &lt; 3; j++) {\n  funcs[j]();                      // and now let's run each one to see\n} \n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2504514,
      "name": "Swesh",
      "reputation": 137
    }
  },
  {
    "soID": 42715404,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/42715404",
    "title": null,
    "body": "<p>Although an oldie, what forget is that they should wrap their code block and then catch the error and then test...</p>\n\n<pre><code>function checkup( t ){\n  try{\n    for(p in t){\n      if( p.hasOwnProperty( t ) ){\n        return true;\n      }\n    }\n    return false;\n  }catch(e){\n    console.log(\"ERROR : \"+e);\n    return e;\n  }\n}\n</code></pre>\n\n<p>So you really don't have to check for a potential problem before hand, you simply catch it and then deal with it how you want.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2512745,
      "name": "Mark Giblin",
      "reputation": 526
    }
  },
  {
    "soID": 17284165,
    "parentID": 5404839,
    "url": "https://stackoverflow.com/q/17284165",
    "title": null,
    "body": "<p>The jQuery <code>Load</code> function can also perform a page refresh:</p>\n\n<pre><code>$('body').load('views/file.html', function () {\n    $(this).fadeIn(5000);\n});\n</code></pre>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2517209,
      "name": "Suleman Mirza",
      "reputation": 414
    }
  },
  {
    "soID": 18186402,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/18186402",
    "title": null,
    "body": "<p>The browser will always open the link in a new tab if the link is on the same domain (on the same website). If the link is on some other domain it will open it in a new tab/window, depending on browser settings.</p>\n\n<p>So, according to this, we can use:</p>\n\n<pre><code>&lt;a class=\"my-link\" href=\"http://www.mywebsite.com\" rel=\"http://www.otherwebsite.com\"&gt;new tab&lt;/a&gt;\n</code></pre>\n\n<p>And add some jQuery code:</p>\n\n<pre><code>jQuery(document).ready(function () {\n    jQuery(\".my-link\").on(\"click\",function(){\n        var w = window.open('http://www.mywebsite.com','_blank');\n        w.focus();\n        w.location.href = jQuery(this).attr('rel');\n        return false;\n    });\n});\n</code></pre>\n\n<p>So, first open new window on same website with _blank target (it will open it in new tab), and then open your desired website inside that new window.</p>\n",
    "score": -11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2530079,
      "name": "loshMiS",
      "reputation": 3
    }
  },
  {
    "soID": 42527902,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/42527902",
    "title": null,
    "body": "<p>easiest and fastest way to check if an Object is an Array or not.</p>\n\n<pre><code> var arr = [];\n  arr.constructor.name ==='Array'  //return true;\n</code></pre>\n\n<p>or </p>\n\n<pre><code>arr.constructor ===Array //return true;\n</code></pre>\n\n<p>or you can make a utility function:</p>\n\n<pre><code>function isArray(obj){ return obj &amp;&amp; obj.constructor ===Array}\n</code></pre>\n\n<p>usage:</p>\n\n<pre><code>isArray(arr); //return true\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2542562,
      "name": "sheelpriy",
      "reputation": 806
    }
  },
  {
    "soID": 27774894,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/27774894",
    "title": null,
    "body": "<p>This is a very simple one.</p>\n\n<pre><code>if(data) {\n  //Comes inside only if the data is not empty and not null \n}\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2551086,
      "name": "Siddhu",
      "reputation": 164
    }
  },
  {
    "soID": 21473617,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/21473617",
    "title": null,
    "body": "<p>I Guess i have done in my project , here it is:</p>\n\n<p><strong>html</strong></p>\n\n<pre><code>&lt;div class=\"container\"&gt;\n    &lt;div class = \"row\"&gt;\n    &lt;div class = \"span9\"&gt;\n        &lt;div class = \"well\"&gt;\n          &lt;%= form_for (@replication) do |f| %&gt;\n    &lt;table&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n          &lt;%= f.label :SR_NO %&gt;\n      &lt;/td&gt;\n      &lt;td&gt;\n          &lt;%= f.text_field :sr_no , :id =&gt; \"txt_RegionName\" %&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;%= f.label :Particular %&gt;\n      &lt;/td&gt;\n      &lt;td&gt;\n        &lt;%= f.text_area :particular , :id =&gt; \"txt_Region\" %&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;\n        &lt;%= f.label :Unit %&gt;\n      &lt;/td&gt;\n      &lt;td&gt;\n        &lt;%= f.text_field :unit ,:id =&gt; \"txt_Regio\" %&gt;\n      &lt;/td&gt;\n      &lt;/tr&gt;\n      &lt;tr&gt;\n\n      &lt;td&gt; \n        &lt;%= f.label :Required_Quantity %&gt;\n      &lt;/td&gt;\n      &lt;td&gt;\n        &lt;%= f.text_field :quantity ,:id =&gt; \"txt_Regi\" %&gt;\n      &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n    &lt;td&gt;&lt;/td&gt;\n    &lt;td&gt;\n    &lt;table&gt;\n    &lt;tr&gt;&lt;td&gt;\n    &lt;input type=\"button\"  name=\"add\" id=\"btn_AddToList\" value=\"add\" class=\"btn btn-primary\" /&gt;\n    &lt;/td&gt;&lt;td&gt;&lt;input type=\"button\"  name=\"Done\" id=\"btn_AddToList1\" value=\"Done\" class=\"btn btn-success\" /&gt;\n    &lt;/td&gt;&lt;/tr&gt;\n    &lt;/table&gt;\n    &lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/table&gt;\n    &lt;% end %&gt;\n    &lt;table id=\"lst_Regions\" style=\"width: 500px;\" border= \"2\" class=\"table table-striped table-bordered table-condensed\"&gt;\n    &lt;tr&gt;\n    &lt;td&gt;SR_NO&lt;/td&gt;\n    &lt;td&gt;Item Name&lt;/td&gt;\n    &lt;td&gt;Particular&lt;/td&gt;\n    &lt;td&gt;Cost&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;/table&gt;\n    &lt;input type=\"button\" id= \"submit\" value=\"Submit Repication\"  class=\"btn btn-success\" /&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>js</strong></p>\n\n<pre><code>$(document).ready(function() {     \n    $('#submit').prop('disabled', true);\n    $('#btn_AddToList').click(function () {\n     $('#submit').prop('disabled', true);\n    var val = $('#txt_RegionName').val();\n    var val2 = $('#txt_Region').val();\n    var val3 = $('#txt_Regio').val();\n    var val4 = $('#txt_Regi').val();\n    $('#lst_Regions').append('&lt;tr&gt;&lt;td&gt;' + val + '&lt;/td&gt;' + '&lt;td&gt;' + val2 + '&lt;/td&gt;' + '&lt;td&gt;' + val3 + '&lt;/td&gt;' + '&lt;td&gt;' + val4 + '&lt;/td&gt;&lt;/tr&gt;');\n    $('#txt_RegionName').val('').focus();\n    $('#txt_Region').val('');\n        $('#txt_Regio').val('');\n        $('#txt_Regi').val('');\n    $('#btn_AddToList1').click(function () {\n         $('#submit').prop('disabled', false).addclass('btn btn-warning');\n    });\n      });\n});\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2565184,
      "name": "SNEH PANDYA",
      "reputation": 556
    }
  },
  {
    "soID": 24456372,
    "parentID": 22343224,
    "url": "https://stackoverflow.com/q/24456372",
    "title": null,
    "body": "<p><code>~</code> : Reasonably <strong>close</strong> to</p>\n\n<pre><code>   ~1.1.5: 1.1.0 &lt;= accepted &lt; 1.2.0\n</code></pre>\n\n<p><code>^</code>: <strong>Compatible</strong> with</p>\n\n<pre><code>   ^1.1.5: 1.1.5 &lt;= accepted &lt; 2.0.0\n\n   ^0.1.3: 0.1.3 &lt;= accepted &lt; 0.2.0\n\n   ^0.0.4: 0.0.4 &lt;= accepted &lt; 0.1.0\n</code></pre>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2576485,
      "name": "haotang",
      "reputation": 2731
    }
  },
  {
    "soID": 34414372,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/34414372",
    "title": null,
    "body": "<p>You should use lodash's <a href=\"https://lodash.com/docs#defaultsDeep\" rel=\"nofollow\">defaultsDeep</a></p>\n\n<pre><code>_.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });\n// → { 'user': { 'name': 'barney', 'age': 36 } }\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 30867236,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/30867236",
    "title": null,
    "body": "<p>In a simple way:</p>\n\n<pre><code>$('#yourTableId').append('&lt;tr&gt;&lt;td&gt;your data1&lt;/td&gt;&lt;td&gt;your data2&lt;/td&gt;&lt;td&gt;your data3&lt;/td&gt;&lt;/tr&gt;');\n</code></pre>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2613306,
      "name": "vipul sorathiya",
      "reputation": 909
    }
  },
  {
    "soID": 24352799,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/24352799",
    "title": null,
    "body": "<p>I'm going to agree somewhat with the person who wrote (paraphrased here): \"For a link in an existing web page, the browser will always open the link in a new tab if the new page is part of the same web site as the existing web page.\"  For me, at least, this \"general rule\" works in Chrome, Firefox, Opera, IE, Safari, SeaMonkey, and Konqueror.</p>\n\n<p>Anyway, there is a less complicated way to take advantage of what the other person presented.  Assuming we are talking about your own web site (\"thissite.com\" below), where you want to control what the browser does, then, below, you want \"specialpage.htm\" to be EMPTY, no HTML at all in it (saves time sending data from the server!).</p>\n\n<pre><code> var wnd, URL;  //global variables\n\n //specifying \"_blank\" in window.open() is SUPPOSED to keep the new page from replacing the existing page\n wnd = window.open(\"http://www.thissite.com/specialpage.htm\", \"_blank\"); //get reference to just-opened page\n //if the \"general rule\" above is true, a new tab should have been opened.\n URL = \"http://www.someothersite.com/desiredpage.htm\";  //ultimate destination\n setTimeout(gotoURL(),200);  //wait 1/5 of a second; give browser time to create tab/window for empty page\n\n\n function gotoURL()\n { wnd.open(URL, \"_self\");  //replace the blank page, in the tab, with the desired page\n   wnd.focus();             //when browser not set to automatically show newly-opened page, this MAY work\n }\n</code></pre>\n",
    "score": -5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2617074,
      "name": "vernonner3voltazim",
      "reputation": 609
    }
  },
  {
    "soID": 33188762,
    "parentID": 5874652,
    "url": "https://stackoverflow.com/q/33188762",
    "title": null,
    "body": "<p>Gently reminder about using prop(), example:</p>\n\n<pre><code>if ($(\"#checkbox1\").prop('checked')) {\n        isDelete = 1;  \n    } else {\n        isDelete = 0;\n    }\n</code></pre>\n\n<p>Function above is used to check if checkbox1 is checked or not, if checked: return 1; if not: return 0. Function prop() used here as a GET function.</p>\n\n<pre><code>if ($(\"#checkbox1\").prop('checked',true)) {\n        isDelete = 1;  \n    } else {\n        isDelete = 0;\n    }\n</code></pre>\n\n<p>Function above is used to set checkbox1 to be checked and ALWAYS return 1. Now function prop() used as a SET function.</p>\n\n<p>Don't mess up.</p>\n\n<p>P/S: When I'm checking Image <strong><em>src</em></strong> property. If the <strong><em>src</em></strong> is empty, <strong>prop</strong> return the current url of the page (wrong), and <strong>attr</strong> return empty string (right).</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2657778,
      "name": "user2657778",
      "reputation": 65
    }
  },
  {
    "soID": 33528818,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/33528818",
    "title": null,
    "body": "<h1>Change an element's class in vanilla JavaScript with IE6 support</h1>\n\n<p>You may try to use node <code>attributes</code> property to keep compatibility with old browsers even IE6:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function getClassNode(element) {\r\n  for (var i = element.attributes.length; i--;)\r\n    if (element.attributes[i].nodeName === 'class')\r\n      return element.attributes[i];\r\n}\r\n\r\nfunction removeClass(classNode, className) {\r\n  var index, classList = classNode.value.split(' ');\r\n  if ((index = classList.indexOf(className)) &gt; -1) {\r\n    classList.splice(index, 1);\r\n    classNode.value = classList.join(' ');\r\n  }\r\n}\r\n\r\nfunction hasClass(classNode, className) {\r\n  return classNode.value.indexOf(className) &gt; -1;\r\n}\r\n\r\nfunction addClass(classNode, className) {\r\n  if (!hasClass(classNode, className))\r\n    classNode.value += ' ' + className;\r\n}\r\n\r\ndocument.getElementById('message').addEventListener('click', function() {\r\n  var classNode = getClassNode(this);\r\n  var className = hasClass(classNode, 'red') &amp;&amp; 'blue' || 'red';\r\n\r\n  removeClass(classNode, 'red');\r\n  removeClass(classNode, 'blue');\r\n\r\n  addClass(classNode, className);\r\n})</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.red {\r\n  color: red;\r\n}\r\n.red:before {\r\n  content: 'I am red! ';\r\n}\r\n.red:after {\r\n  content: ' again';\r\n}\r\n.blue {\r\n  color: blue;\r\n}\r\n.blue:before {\r\n  content: 'I am blue! '\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;span id=\"message\" class=\"\"&gt;Click me&lt;/span&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2676500,
      "name": "Eugene Tiurin",
      "reputation": 903
    }
  },
  {
    "soID": 34295099,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/34295099",
    "title": null,
    "body": "<h1>Merge properties of N objects in one line of code</h1>\n\n<p>An <code>Object.assign</code> method is part of the ECMAScript 2015 (ES6) standard and does exactly what you need. (<code>IE</code> not supported)</p>\n\n<pre><code>var clone = Object.assign({}, obj);\n</code></pre>\n\n<blockquote>\n  <p>The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object.</p>\n</blockquote>\n\n<p><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" rel=\"noreferrer\">Read more...</a></p>\n\n<p>The <strong>polyfill</strong> to support older browsers:</p>\n\n<pre><code>if (!Object.assign) {\n  Object.defineProperty(Object, 'assign', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function(target) {\n      'use strict';\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert first argument to object');\n      }\n\n      var to = Object(target);\n      for (var i = 1; i &lt; arguments.length; i++) {\n        var nextSource = arguments[i];\n        if (nextSource === undefined || nextSource === null) {\n          continue;\n        }\n        nextSource = Object(nextSource);\n\n        var keysArray = Object.keys(nextSource);\n        for (var nextIndex = 0, len = keysArray.length; nextIndex &lt; len; nextIndex++) {\n          var nextKey = keysArray[nextIndex];\n          var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n          if (desc !== undefined &amp;&amp; desc.enumerable) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n      return to;\n    }\n  });\n}\n</code></pre>\n",
    "score": 28,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 33718996,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/33718996",
    "title": null,
    "body": "<p>The following method will remove all entries of a given value from an array without creating a new array and with only one iteration which is <em>superfast</em>. And it works in ancient <a href=\"https://en.wikipedia.org/wiki/Internet_Explorer_5\" rel=\"nofollow\">Internet&nbsp;Explorer 5.5</a> browser:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function removeFromArray(arr, removeValue) {\r\n  for (var i = 0, k = 0, len = arr.length &gt;&gt;&gt; 0; i &lt; len; i++) {\r\n    if (k &gt; 0)\r\n      arr[i - k] = arr[i];\r\n\r\n    if (arr[i] === removeValue)\r\n      k++;\r\n  }\r\n\r\n  for (; k--;)\r\n    arr.pop();\r\n}\r\n\r\nvar a = [0, 1, 0, 2, 0, 3];\r\n\r\ndocument.getElementById('code').innerHTML =\r\n  'Initial array [' + a.join(', ') + ']';\r\n//Initial array [0, 1, 0, 2, 0, 3]\r\n\r\nremoveFromArray(a, 0);\r\n\r\ndocument.getElementById('code').innerHTML +=\r\n  '&lt;br&gt;Resulting array [' + a.join(', ') + ']';\r\n//Resulting array [1, 2, 3]</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;code id=\"code\"&gt;&lt;/code&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2676500,
      "name": "Eugene Tiurin",
      "reputation": 903
    }
  },
  {
    "soID": 45405497,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/45405497",
    "title": null,
    "body": "<p>Post my code that removes an array element in place, and reduce the array length as well.</p>\n\n<pre><code>function removeElement(idx, arr) {\n    // check the index value\n    if (idx &lt; 0 || idx &gt;= arr.length) {\n        return;\n    }\n    // shift the elements\n    for (var i = idx; i &gt; 0; --i) {\n        arr[i] = arr[i - 1];\n    }\n    // remove the first element in array\n    arr.shift();\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2678523,
      "name": "hailong",
      "reputation": 119
    }
  },
  {
    "soID": 41094184,
    "parentID": 1470488,
    "url": "https://stackoverflow.com/q/41094184",
    "title": null,
    "body": "<p>You should use var keyword unless you intend to have the variable attached to window object in browser. <a href=\"http://www.yourtechchick.com/javascript/difference-between-javascript-variables-with-var-and-without-var/\" rel=\"nofollow noreferrer\">Here's a link that explains scoping and difference between glocal scoping and local scoping with and wihtout var keyword.</a></p>\n\n<p>When variables get defined without the use of var keyword, what it looks like is a simple “assignment” operation.</p>\n\n<p>When the value is assigned to a variable in javascript, the interpreter first tries to find the “variable declaration” in the same context/scope as that of assignment. When the interpreter executes <code>dummyVariable = 20</code>, it looks up for the declaration of dummyVariable at beginning of the function. \n(Since all Variable declarations are moved to the beginning of the context by javascript interpreter and this is called hoisting)</p>\n\n<p>You may also want to look at <a href=\"http://www.yourtechchick.com/javascript/what-is-hoisting-in-javascript-javascript-hoisting-explained/\" rel=\"nofollow noreferrer\">hoisting in javascript</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2699001,
      "name": "Simran kaur",
      "reputation": 547
    }
  },
  {
    "soID": 32800440,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/32800440",
    "title": null,
    "body": "<p>If you are using <a href=\"http://en.wikipedia.org/wiki/Dojo_Toolkit\" rel=\"nofollow\">Dojo Toolkit</a> then the best way to merge two object is using a mixin. </p>\n\n<p>Below is the sample for Dojo Toolkit mixin:</p>\n\n<pre><code>// Dojo 1.7+ (AMD)\nrequire([\"dojo/_base/lang\"], function(lang){\n  var a = { b:\"c\", d:\"e\" };\n  lang.mixin(a, { d:\"f\", g:\"h\" });\n  console.log(a); // b:c, d:f, g:h\n});\n\n// Dojo &lt; 1.7\nvar a = { b:\"c\", d:\"e\" };\ndojo.mixin(a, { d:\"f\", g:\"h\" });\nconsole.log(a); // b:c, d:f, g:h\n</code></pre>\n\n<p>For more details, please <em><a href=\"http://dojotoolkit.org/reference-guide/1.7/dojo/mixin.html\" rel=\"nofollow\">mixin</a></em>.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 40875598,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/40875598",
    "title": null,
    "body": "<p>While most of the answers above answer the question, it is not clear enough why the <code>slice()</code> method has not been used. Yes, <code>filter()</code> meets the immutability criteria, but how about doing the following shorter equivalent:</p>\n\n<p><code>const myArray = [1,2,3,4];</code></p>\n\n<p>And now lets say that we should remove the second element from the array, we can simply do:\n<code>const newArray = myArray.slice(0,1).concat(myArray.slice(2,4));</code>\n<code>// [1,3,4]</code></p>\n\n<p>This way of deleting an element from an array is strongly encouraged today in the community due to its simple and immutable nature. In general, methods which cause mutation should be avoided. For example, you are encouraged to replace <code>push()</code> with <code>concat()</code> and <code>splice()</code> with <code>slice()</code> </p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2729639,
      "name": "Stelios Voskos",
      "reputation": 311
    }
  },
  {
    "soID": 45325303,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/45325303",
    "title": null,
    "body": "<p>You can use a simple funcion to invert keys and values, it will work with arrays also as it converts numerical integer strings to numbers. The code is small, simple and reusable for this and other use cases.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var objInvert = function (obj) {\r\n    var invert = {}\r\n    for (var i in obj) {\r\n      if (i.match(/^\\d+$/)) i = parseInt(i,10)\r\n      invert[obj[i]] = i\r\n    }\r\n    return invert\r\n}\r\n \r\nvar musicStyles = Object.freeze(objInvert(['ROCK', 'SURF', 'METAL',\r\n'BOSSA-NOVA','POP','INDIE']))\r\n\r\nconsole.log(musicStyles)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2739274,
      "name": "David Lemon",
      "reputation": 394
    }
  },
  {
    "soID": 21460530,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/21460530",
    "title": null,
    "body": "<p>This is an iterator for NON-sparse list where the index starts at 0, which is the typical scenario when dealing with document.getElementsByTagName or document.querySelectorAll)</p>\n\n<pre><code>function each( fn, data ) {\n\n    if(typeof fn == 'string')\n        eval('fn = function(data, i){' + fn + '}');\n\n    for(var i=0, L=this.length; i &lt; L; i++) \n        fn.call( this[i], data, i );   \n\n    return this;\n}\n\nArray.prototype.each = each;  \n</code></pre>\n\n<p><strong>Examples of usage:</strong></p>\n\n<p><strong>Example #1</strong></p>\n\n<pre><code>var arr = [];\n[1, 2, 3].each( function(a){ a.push( this * this}, arr);\narr = [1, 4, 9]\n</code></pre>\n\n<p><strong>Example #2</strong></p>\n\n<pre><code>each.call(document.getElementsByTagName('p'), \"this.className = data;\",'blue');\n</code></pre>\n\n<p>Each p tag gets <code>class=\"blue\"</code></p>\n\n<p><strong>Example #3</strong></p>\n\n<pre><code>each.call(document.getElementsByTagName('p'), \n    \"if( i % 2 == 0) this.className = data;\",\n    'red'\n);\n</code></pre>\n\n<p>Every other p tag gets <code>class=\"red\"</code>></p>\n\n<p><strong>Example #4</strong></p>\n\n<pre><code>each.call(document.querySelectorAll('p.blue'), \n    function(newClass, i) {\n        if( i &lt; 20 )\n            this.className = newClass;\n    }, 'green'\n);\n</code></pre>\n\n<p>And finally the first 20 blue p tags are changed to green</p>\n\n<p>Caution when using string as function: the function is created out-of-context and ought to be used only where you are certain of variable scoping.  Otherwise, better to pass functions where scoping is more intuitive.</p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2740306,
      "name": "Tim",
      "reputation": 219
    }
  },
  {
    "soID": 20774655,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/20774655",
    "title": null,
    "body": "<p>There are three implementations of <code>foreach</code> in <a href=\"http://en.wikipedia.org/wiki/JQuery\">jQuery</a> as follows.</p>\n\n<pre><code>var a = [3,2];\n\n$(a).each(function(){console.log(this.valueOf())}); //Method 1\n$.each(a, function(){console.log(this.valueOf())}); //Method 2\n$.each($(a), function(){console.log(this.valueOf())}); //Method 3\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2758467,
      "name": "Rajesh Paul",
      "reputation": 3000
    }
  },
  {
    "soID": 29074825,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/29074825",
    "title": null,
    "body": "<p>Here's a couple different ways to implement <a href=\"http://www.typescriptlang.org/Handbook#basic-types-enum\" rel=\"nofollow\">TypeScript enums</a>.</p>\n\n<p>The easiest way is to just iterate over an object, adding inverted key-value pairs to the object. The only drawback is that you must manually set the value for each member.</p>\n\n<pre><code>function _enum(list) {       \n  for (var key in list) {\n    list[list[key] = list[key]] = key;\n  }\n  return Object.freeze(list);\n}\n\nvar Color = _enum({\n  Red: 0,\n  Green: 5,\n  Blue: 2\n});\n\n// Color → {0: \"Red\", 2: \"Blue\", 5: \"Green\", \"Red\": 0, \"Green\": 5, \"Blue\": 2}\n// Color.Red → 0\n// Color.Green → 5\n// Color.Blue → 2\n// Color[5] → Green\n// Color.Blue &gt; Color.Green → false\n</code></pre>\n\n<p><br>\nAnd here's a <a href=\"https://lodash.com/docs#mixin\" rel=\"nofollow\">lodash mixin</a> to create an enum using a string. While this version is a little bit more involved, it does the numbering automatically for you. All the lodash methods used in this example have a regular JavaScript equivalent, so you can easily switch them out if you want.</p>\n\n<pre><code>function enum() {\n    var key, val = -1, list = {};\n    _.reduce(_.toArray(arguments), function(result, kvp) {    \n        kvp = kvp.split(\"=\");\n        key = _.trim(kvp[0]);\n        val = _.parseInt(kvp[1]) || ++val;            \n        result[result[val] = key] = val;\n        return result;\n    }, list);\n    return Object.freeze(list);\n}    \n\n// Add enum to lodash \n_.mixin({ \"enum\": enum });\n\nvar Color = _.enum(\n    \"Red\",\n    \"Green\",\n    \"Blue = 5\",\n    \"Yellow\",\n    \"Purple = 20\",\n    \"Gray\"\n);\n\n// Color.Red → 0\n// Color.Green → 1\n// Color.Blue → 5\n// Color.Yellow → 6\n// Color.Purple → 20\n// Color.Gray → 21\n// Color[5] → Blue\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2760155,
      "name": "Blake Bowen",
      "reputation": 809
    }
  },
  {
    "soID": 33326060,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/33326060",
    "title": null,
    "body": "<p>I wrote <strong>enumerationjs</strong> a <a href=\"https://github.com/sveinburne/enumerationjs#top\" rel=\"nofollow\">very tiny library to address the issue</a> which <strong>ensures type safety</strong>, allow enum constants to <strong>inherit from a prototype</strong>, guaranties enum constants and enum types to be immutable + many little features. It allows to refactor a lot of code and move some logic inside the enum definition. Here is an example : </p>\n\n<pre><code>var CloseEventCodes = new Enumeration(\"closeEventCodes\", {\n  CLOSE_NORMAL:          { _id: 1000, info: \"Connection closed normally\" },\n  CLOSE_GOING_AWAY:      { _id: 1001, info: \"Connection closed going away\" },\n  CLOSE_PROTOCOL_ERROR:  { _id: 1002, info: \"Connection closed due to protocol error\"  },\n  CLOSE_UNSUPPORTED:     { _id: 1003, info: \"Connection closed due to unsupported operation\" },\n  CLOSE_NO_STATUS:       { _id: 1005, info: \"Connection closed with no status\" },\n  CLOSE_ABNORMAL:        { _id: 1006, info: \"Connection closed abnormally\" },\n  CLOSE_TOO_LARGE:       { _id: 1009, info: \"Connection closed due to too large packet\" }\n},{ talk: function(){\n    console.log(this.info); \n  }\n});\n\n\nCloseEventCodes.CLOSE_TOO_LARGE.talk(); //prints \"Connection closed due to too large packet\"\nCloseEventCodes.CLOSE_TOO_LARGE instanceof CloseEventCodes //evaluates to true\n</code></pre>\n\n<p><code>Enumeration</code> is basically a factory. </p>\n\n<p><a href=\"https://github.com/sveinburne/enumerationjs/blob/master/JS.GUIDE.MD#top\" rel=\"nofollow\">Fully documented guide available here.</a> Hope this helps. </p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2779871,
      "name": "Jules Randolph",
      "reputation": 468
    }
  },
  {
    "soID": 44491363,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/44491363",
    "title": null,
    "body": "<p>use <code>object.assign</code></p>\n\n<pre><code>Object.prototype.assign = Object.assign &amp;&amp; function () {\n    var a = [];\n    for (var _i = 0; _i &lt; arguments.length; _i++) {\n        a[_i] = arguments[_i];\n    }\n    var src = a.slice(1);\n    var target = a[0];\n    for (var o in src) {\n        if (src.hasOwnProperty(o)) {\n            var keys = Object.keys(src[o]);\n            var _src = src[o];\n            for (var k in keys) {\n                if (keys.hasOwnProperty(k)) {\n                    var _key = keys[k];\n                    target[_key] = _src[_key];\n                }\n            }\n        }\n    }\n    return target;\n};\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 19059623,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/19059623",
    "title": null,
    "body": "<p>My <strong>one more reason</strong> to choose Node.js for a new project is: </p>\n\n<p><strong>Be able to do pure cloud based development</strong></p>\n\n<p>I have used <a href=\"https://c9.io\">Cloud9 IDE</a> for a while and now I can't imagine without it, it covers all the development lifecycles. All you need is a browser and you can code anytime anywhere on any devices. You don't need to check in code in one Computer(like at home), then checkout in another computer(like at work place). </p>\n\n<p>Of course, there maybe cloud based IDE for other languages or platforms (Cloud 9 IDE is adding supports for other languages as well), but using Cloud 9 to do Node.js developement is really a great experience for me.   </p>\n",
    "score": 16,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2800134,
      "name": "Sean Zhao",
      "reputation": 993
    }
  },
  {
    "soID": 43224244,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/43224244",
    "title": null,
    "body": "<p>You can attach event to element when dynamically created using <a href=\"https://api.jquery.com/jQuery/#jQuery-html-attributes\" rel=\"nofollow noreferrer\"><code>jQuery(html, attributes)</code></a>.</p>\n\n<blockquote>\n  <p><strong>As of jQuery 1.8</strong>, any jQuery instance method (a method of <code>jQuery.fn</code>) can be used as a property of the object passed to the\n  second parameter:</p>\n</blockquote>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function handleDynamicElementEvent(event) {\r\n  console.log(event.type, this.value)\r\n}\r\n// create and attach event to dynamic element\r\njQuery(\"&lt;select&gt;\", {\r\n  html: $.map(Array(3), function(_, index) {\r\n          return new Option(index, index)\r\n        }),\r\n  on: {\r\n        change: handleDynamicElementEvent\r\n      }\r\n}) \r\n.appendTo(\"body\");</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;  \r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2801559,
      "name": "guest271314",
      "reputation": 65318
    }
  },
  {
    "soID": 31900459,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/31900459",
    "title": null,
    "body": "<p>Try testing for <code>DOM</code> element</p>\n\n<pre><code>if (!!$(selector)[0]) // do stuff\n</code></pre>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2801559,
      "name": "guest271314",
      "reputation": 65318
    }
  },
  {
    "soID": 37902260,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/37902260",
    "title": null,
    "body": "<p>I just like to use plain vanilla javascript to do this.</p>\n\n<pre><code>function isExists(selector){\n  return document.querySelectorAll(selector).length&gt;0;\n}\n</code></pre>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2804790,
      "name": "Sanu Uthaiah Bollera",
      "reputation": 456
    }
  },
  {
    "soID": 36561560,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/36561560",
    "title": null,
    "body": "<p>Note that <code>use strict</code> was introduced in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" rel=\"noreferrer\">EcmaScript 5</a> and was kept since then.</p>\n\n<p>Below are the conditions to trigger strict mode in <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-strict-mode-code\" rel=\"noreferrer\">ES6</a> and <a href=\"https://tc39.github.io/ecma262/#sec-strict-mode-code\" rel=\"noreferrer\">ES7</a>:</p>\n\n<blockquote>\n  <ul>\n  <li>Global code is strict mode code if it begins with a Directive    Prologue that contains a Use Strict Directive (see 14.1.1).</li>\n  <li>Module code is always strict mode code.</li>\n  <li>All parts of a <em>ClassDeclaration</em> or a <em>ClassExpression</em> are strict mode    code.</li>\n  <li>Eval code is strict mode code if it begins with a Directive Prologue    that contains a Use Strict Directive or if the call to eval is a direct eval (see 12.3.4.1) that is contained in strict mode code.</li>\n  <li>Function code is strict mode code if the associated <em>FunctionDeclaration, FunctionExpression, GeneratorDeclaration, GeneratorExpression, MethodDefinition, or ArrowFunction</em> is contained in strict mode code or if the code that produces the value of the function’s [[ECMAScriptCode]] internal slot begins with a Directive Prologue that contains a Use Strict Directive.</li>\n  <li>Function code that is supplied as the arguments to the built-in    Function and Generator constructors is strict mode code if the last argument is a String that when processed is a <em>FunctionBody</em> that begins with a Directive Prologue that contains a Use Strict Directive.</li>\n  </ul>\n</blockquote>\n",
    "score": 11,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2817112,
      "name": "Oriol",
      "reputation": 2509
    }
  },
  {
    "soID": 19244824,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/19244824",
    "title": null,
    "body": "<p>I also ran in the situation where I had to remove an element from <code>Array</code>. <code>.indexOf</code> was not working in <code>IE*</code> so sharing my working <code>jQuery.inArray()</code> solution.</p>\n\n<pre><code>var index = jQuery.inArray(val,arr);\nif (index &gt; -1) {\n    arr.splice(index, 1);\n    //console.log(arr);\n}\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2825534,
      "name": "NullPointer",
      "reputation": 1761
    }
  },
  {
    "soID": 32265541,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/32265541",
    "title": null,
    "body": "<p>I also would like to add this as a composition of a reverse loop and an answer above for someone that would like this syntax too.</p>\n\n<pre><code>var foo = [object,object,object];\nfor (var i = foo.length, item; item = foo[--i];) {\n    console.log(item);\n}\n</code></pre>\n\n<p><strong>Pros:</strong></p>\n\n<p>The benefit for this: You have the reference already in the first like that won't need to be declared later with another line. It is handy when looping trough the object array.</p>\n\n<p><strong>Cons:</strong></p>\n\n<p>This will break whenever the reference is false - falsey (undefined, etc.). It can be used as an advantage though. However, it would make it a little bit harder to read.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2830246,
      "name": "Volkan Seçkin Akbayır",
      "reputation": 423
    }
  },
  {
    "soID": 19738311,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/19738311",
    "title": null,
    "body": "<p>Probably the <code>for(i = 0; i &lt; array.length; i++)</code> loop is not the best choice. Why? If you have this:</p>\n\n<pre><code>var array = new Array();\narray[1] = \"Hello\";\narray[7] = \"World\";\narray[11] = \"!\";\n</code></pre>\n\n<p>The method will call from <code>array[0]</code> to <code>array[2]</code>. First, this will first reference variables you don't even have, second you would not have the variables in the array, and third this will make the code bolder. Look here, it's what I use:</p>\n\n<pre><code>for(var i in array){\n    var el = array[i];\n    //If you want 'i' to be INT just put parseInt(i)\n    //Do something with el\n}\n</code></pre>\n\n<p>And if you want it to be a function, you can do this:</p>\n\n<pre><code>function foreach(array, call){\n    for(var i in array){\n        call(array[i]);\n    }\n}\n</code></pre>\n\n<p>If you want to break, a little more logic:</p>\n\n<pre><code>function foreach(array, call){\n    for(var i in array){\n        if(call(array[i]) == false){\n            break;\n        }\n    }\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>foreach(array, function(el){\n    if(el != \"!\"){\n        console.log(el);\n    } else {\n        console.log(el+\"!!\");\n    }\n});\n</code></pre>\n\n<p>It returns:</p>\n\n<pre><code>//Hello\n//World\n//!!!\n</code></pre>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2852100,
      "name": "Federico Piragua",
      "reputation": 364
    }
  },
  {
    "soID": 34533462,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/34533462",
    "title": null,
    "body": "<p>A possible way to achieve this is the following.</p>\n\n<pre><code>if (!Object.prototype.merge){\n    Object.prototype.merge = function(obj){\n        var self = this;\n        Object.keys(obj).forEach(function(key){\n            self[key] = obj[key]\n        });\n    }\n};\n</code></pre>\n\n<p>I don't know if it's better then the other answers. In this method you add the <code>merge function</code> to <code>Objects</code> prototype. This way you can call     <code>obj1.merge(obj2);</code></p>\n\n<p>Note : you should validate your argument to see if its an object and 'throw' a proper <code>Error</code>. If not <code>Object.keys</code> will 'throw' an 'Error'</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 37287251,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/37287251",
    "title": null,
    "body": "<p><code>use strict</code> is a way to make your code safer, cause you can't use dangerous features which can work not as you expect.And as was writed before it makes code more strict.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2883725,
      "name": "Просто программист",
      "reputation": 102
    }
  },
  {
    "soID": 32999007,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/32999007",
    "title": null,
    "body": "<p>Another solution is to add the listener when creating the element. Instead of put the listener in the body, you put the listener in the element in the moment that you create it:</p>\n\n<pre><code>var myElement = $('&lt;button/&gt;', {\n    text: 'Go to Google!'\n});\n\nmyElement.bind( 'click', goToGoogle);\nmyElement.append('body');\n\n\nfunction goToGoogle(event){\n    window.location.replace(\"http://www.google.com\");\n}\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2911545,
      "name": "Martin Da Rosa",
      "reputation": 172
    }
  },
  {
    "soID": 40334715,
    "parentID": 9682092,
    "url": "https://stackoverflow.com/q/40334715",
    "title": null,
    "body": "<p>Angular.js creates a watcher for every model we create in view. Whenever a model is changed, an \"ng-dirty\" class is appeneded to the model, so the watcher will observe all models which have the class \"ng-dirty\" &amp; update their values in the controller &amp; vice versa.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2932135,
      "name": "Shankar Gangadhar",
      "reputation": 109
    }
  },
  {
    "soID": 44608610,
    "parentID": 9682092,
    "url": "https://stackoverflow.com/q/44608610",
    "title": null,
    "body": "<ol>\n<li><p>The one-way data binding is an approach where a value is taken from the data model and inserted into an HTML element. There is no way to update model from view. It is used in classical template systems. These systems bind data in only one direction.</p></li>\n<li><p>Data-binding in Angular apps is the automatic synchronisation of data between the model and view components.</p></li>\n</ol>\n\n<p>Data binding lets you treat the model as the single-source-of-truth in your application. The view is a projection of the model at all times. If the model is changed, the view reflects the change and vice versa.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2932135,
      "name": "Shankar Gangadhar",
      "reputation": 109
    }
  },
  {
    "soID": 38901509,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/38901509",
    "title": null,
    "body": "<p>you could use</p>\n\n<pre><code>$('.buttons').on('click', 'button', function(){\n    // your magic goes here\n});\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$('.buttons').delegate('button', 'click', function() {\n    // your magic goes here\n});\n</code></pre>\n\n<p>these two methods are equivalent but have a different order of parameters.</p>\n\n<p>see: <a href=\"http://api.jquery.com/delegate/\" rel=\"nofollow\">jQuery Delegate Event</a></p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2938302,
      "name": "Mensur Grišević",
      "reputation": 240
    }
  },
  {
    "soID": 23569710,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/23569710",
    "title": null,
    "body": "<p><img src=\"https://i.imgur.com/G07u5An.png\" alt=\"enter image description here\"><br><br><br></p>\n\n<p>I've just finished developing the plugin and it is available for everyone to use! Hope you will enjoy it. </p>\n\n<h3>View Project on <a href=\"https://github.com/emisfera/Splitchar\" rel=\"noreferrer\">GitHub</a> - View Project <a href=\"http://razvanbalosin.com/Splitchar.js/\" rel=\"noreferrer\">Website</a>. <b>(so you can see all the split styles)</b></h3>\n\n<h2><b>Usage</b></h2>\n\n<p>First of all, make sure you have the <code>jQuery</code> library is included. The best way to get the latest jQuery version is to update your head tag with:</p>\n\n<pre><code>&lt;script src=\"http://code.jquery.com/jquery-latest.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>After downloading the files, make sure you include them in your project:</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css/splitchar.css\"&gt;\n&lt;script type=\"text/javascript\" src=\"js/splitchar.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<h2><b>Markup</b></h2>\n\n<p>All you have to do is to asign the class <code>splitchar</code> , followed by the desired style to the element wrapping your text. e.g</p>\n\n<pre><code>&lt;h1 class=\"splitchar horizontal\"&gt;Splitchar&lt;/h1&gt;\n</code></pre>\n\n<p>After all this is done, just make sure you call the jQuery function in your document ready file like this:</p>\n\n<pre><code>$(\".splitchar\").splitchar();\n</code></pre>\n\n<h2><b>Customizing</b></h2>\n\n<p>In order to make the text look exactly as you want it to, all you have to do is apply your design like this:</p>\n\n<pre><code>.horizontal { /* Base CSS - e.g font-size */ }\n.horizontal:before { /* CSS for the left half */ }\n.horizontal:after { /* CSS for the right half */ }\n</code></pre>\n\n<p><br>\nThat's it! Now you have the <code>Splitchar</code> plugin all set. More info about it at <a href=\"http://razvanbalosin.com/Splitchar.js/\" rel=\"noreferrer\">http://razvanbalosin.com/Splitchar.js/</a>.</p>\n",
    "score": 408,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2948261,
      "name": "Razvan Balosin",
      "reputation": 4684
    }
  },
  {
    "soID": 20718713,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/20718713",
    "title": null,
    "body": "<pre><code>&lt;tr id=\"tablerow\"&gt;&lt;/tr&gt;\n\n$('#tablerow').append('&lt;tr&gt;...&lt;/tr&gt;&lt;tr&gt;...&lt;/tr&gt;');\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 2961070,
      "name": "Vivek S",
      "reputation": 1217
    }
  },
  {
    "soID": 34428027,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/34428027",
    "title": null,
    "body": "<p>When adding <code>\"use strict\";</code>, the following cases will throw a <strong>SyntaxError</strong> before the script is executing:</p>\n\n<ul>\n<li><p><em>Paving the way for future ECMAScript versions</em>, using one of the newly reserved keywords (in prevision for <em>ECMAScript 6</em>): <code>implements</code>, <code>interface</code>, <code>let</code>, <code>package</code>, <code>private</code>, <code>protected</code>, <code>public</code>, <code>static</code>, and <code>yield</code>.</p></li>\n<li><p>Declaring function in blocks </p>\n\n<pre><code>if(a&lt;b){ function f(){} }\n</code></pre></li>\n<li><p>Octal syntax </p>\n\n<pre><code>var n = 023;\n</code></pre></li>\n<li><p><code>this</code> point to the global object.</p>\n\n<pre><code> function f() {\n      \"use strict\";\n      this.a = 1;\n };\n f(); \n</code></pre></li>\n<li><p>Declaring twice the same name for a property name in an object literal </p>\n\n<pre><code> {a: 1, b: 3, a: 7} \n</code></pre>\n\n<p>This is no longer the case in ECMAScript 6 (<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1041128\">bug 1041128</a>).</p></li>\n<li><p>Declaring two function arguments with the same name function </p>\n\n<pre><code>f(a, b, b){}\n</code></pre></li>\n<li><p>Setting a value to an undeclared variable</p>\n\n<pre><code>function f(x){\n   \"use strict\";\n   var a = 12;\n   b = a + x*35; // error!\n}\nf();\n</code></pre></li>\n<li><p>Using <code>delete</code> on a variable name <code>delete myVariable;</code></p></li>\n<li><p>Using <code>eval</code> or <code>arguments</code> as variable or function argument name</p>\n\n<pre><code>\"use strict\";\narguments++;\nvar obj = { set p(arguments) { } };\ntry { } catch (arguments) { }\nfunction arguments() { } \n</code></pre></li>\n</ul>\n\n<p>Source:</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode/Transitioning_to_strict_mode\">Transitioning to strict mode</a></p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\">Strict Mode</a></p>\n\n<p><a href=\"http://cjihrig.com/blog/javascripts-strict-mode-and-why-you-should-use-it/\">strict mode you should use it</a></p>\n",
    "score": 18,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3011380,
      "name": "zangw",
      "reputation": 16185
    }
  },
  {
    "soID": 22890596,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/22890596",
    "title": null,
    "body": "<p>Here is simple jQuery code to do that.</p>\n\n<pre><code>$(\".class1\").click(function(argument) {\n    $(\".parentclass\").removeClass(\"classtoremove\");\n    setTimeout(function (argument) {\n        $(\".parentclass\").addClass(\"classtoadd\");\n    }, 100);\n});\n</code></pre>\n\n<p>Here,</p>\n\n<ul>\n<li>Class1 is a listener for an event.</li>\n<li>The parent class is the class which hosts the class you want to change</li>\n<li>Classtoremove is the old class you have.</li>\n<li>Class to add is the new class that you want to add.</li>\n<li>100 is the timeout delay during which the class is changed.</li>\n</ul>\n\n<p>Good Luck.</p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3108620,
      "name": "uttamcafedeweb",
      "reputation": 52
    }
  },
  {
    "soID": 20690490,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/20690490",
    "title": null,
    "body": "<h1>Edited on 2016 october</h1>\n\n<ul>\n<li>Do it simple, intuitive and explicit (<a href=\"https://en.wikipedia.org/wiki/Occam%27s_razor\" rel=\"noreferrer\">https://en.wikipedia.org/wiki/Occam%27s_razor</a>)</li>\n<li>Do it immutable (original array stay unchanged)</li>\n<li>Do it with standard JS functions, if your browser don't support them - <strong>use polyfill</strong></li>\n</ul>\n\n<p>In this code example I use <strong>\"array.filter(...)\"</strong> function to remove unwanted items from array, this function doesn't change the original array and creates a new one. If your browser don't support this function (e.g. IE before version 9, or Firefox before version 1.5), consider using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill\" rel=\"noreferrer\"><strong>the filter polyfill from Mozilla</strong></a>.</p>\n\n<h1>Removing item (ECMA-262 Edition 5 code aka oldstyle JS)</h1>\n\n<pre><code>var value = 3\n\nvar arr = [1, 2, 3, 4, 5, 3]\n\narr = arr.filter(function(item) { \n    return item !== value\n})\n\nconsole.log(arr)\n// [ 1, 2, 4, 5 ]\n</code></pre>\n\n<h1>Removing item (ES2015 code)</h1>\n\n<pre><code>let value = 3\n\nlet arr = [1, 2, 3, 4, 5, 3]\n\narr = arr.filter(item =&gt; item !== value)\n\nconsole.log(arr)\n// [ 1, 2, 4, 5 ]\n</code></pre>\n\n<p><strong>IMPORTANT</strong> ES2015 \"() => {}\" arrow function syntax is not supported in IE at all, Chrome before 45 version, Firefox before 22 version, Safari before 10 version. To use ES2015 syntax in old browsers you can use <a href=\"http://babeljs.io\" rel=\"noreferrer\">BabelJS</a></p>\n\n<hr>\n\n<h1>Removing multiple items (ES2015 code)</h1>\n\n<p>An additional advantage of this method is that you can remove multiple items</p>\n\n<pre><code>let forDeletion = [2, 3, 5]\n\nlet arr = [1, 2, 3, 4, 5, 3]\n\narr = arr.filter(item =&gt; !forDeletion.includes(item))\n// !!! Read below about array.includes(...) support !!!\n\nconsole.log(arr)\n// [ 1, 4 ]\n</code></pre>\n\n<p><strong>IMPORTANT</strong> \"array.includes(...)\" function is not supported in IE at all, Chrome before 47 version, Firefox before 43 version, Safari before 9 version and Edge before 14 version so <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Polyfill\" rel=\"noreferrer\"><strong>here is polyfill from Mozilla</strong></a></p>\n\n<h1>Removing multiple items (Cutting-edge experimental JavaScript ES2018?)</h1>\n\n<pre><code>// array-lib.js\n\nexport function remove(...forDeletion) {\n    return this.filter(item =&gt; !forDeletion.includes(item))\n}\n\n// main.js\n\nimport { remove } from './array-lib.js'\n\nlet arr = [1, 2, 3, 4, 5, 3]\n\n// :: This-Binding Syntax Proposal\n// using \"remove\" function as \"virtual method\"\n// without extending Array.prototype\narr = arr::remove(2, 3, 5)\n\nconsole.log(arr)\n// [ 1, 4 ]\n</code></pre>\n\n<p><a href=\"https://babeljs.io/repl/#?babili=false&amp;evaluate=true&amp;lineWrap=false&amp;presets=es2015%2Creact%2Cstage-0%2Cstage-2&amp;targets=&amp;browsers=chrome%20%3E%2050&amp;builtIns=false&amp;code=%20%20%20%20function%20remove(...forDeletion)%20%7B%0A%20%20%20%20%20%20%20%20return%20this.filter(item%20%3D%3E%20!forDeletion.includes(item))%0A%20%20%20%20%7D%0A%0A%20%20%20%20let%20arr%20%3D%20%5B1%2C%202%2C%203%2C%204%2C%205%2C%203%5D%0A%0A%20%20%20%20%2F%2F%20%3A%3A%20This-Binding%20Syntax%20Proposal%0A%20%20%20%20%2F%2F%20using%20remove%20function%20as%20%22virtual%20method%22%0A%20%20%20%20arr%20%3D%20arr%3A%3Aremove(2%2C%203%2C%205)%0A%0A%20%20%20%20console.log(arr)%0A%20%20%20%20%2F%2F%20%5B%201%2C%204%20%5D\" rel=\"noreferrer\"><strong>Try it yourself in BabelJS :)</strong></a></p>\n\n<p><strong>Reference</strong></p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\" rel=\"noreferrer\">Array.prototype.includes</a></li>\n<li><a href=\"https://github.com/tc39/proposal-bind-operator\" rel=\"noreferrer\">This-Binding Syntax Proposal</a></li>\n<li><a href=\"https://vanslaars.io/post/create-pipe-function/\" rel=\"noreferrer\">Functional composition</a></li>\n</ul>\n",
    "score": 300,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3120495,
      "name": "Ujeenator",
      "reputation": 3669
    }
  },
  {
    "soID": 43480940,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/43480940",
    "title": null,
    "body": "<p><strong>Most flexible solution</strong> to create elements and bind events</p>\n\n<pre><code>// creating a dynamic element (container div)\nvar $div = $(\"&lt;div&gt;\", {id: 'myid1', class: 'myclass'});\n\n//creating a dynamic button\n var $btn = $(\"&lt;button&gt;\", { type: 'button', text: 'Click me', class: 'btn' });\n\n// binding the event\n $btn.click(function () { //for mouseover--&gt; $btn.on('mouseover', function () {\n    console.log('clicked');\n });\n\n// append dynamic button to the dynamic container\n$div.append($btn);\n\n// add the dynamically created element(s) to a static element\n$(\"#box\").append($div);\n</code></pre>\n\n<p><a href=\"https://stackoverflow.com/questions/10619445/the-preferred-way-of-creating-a-new-element-with-jquery\">The preferred way of creating a new element with jQuery</a></p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3128521,
      "name": "Prasad Madushanka",
      "reputation": 21
    }
  },
  {
    "soID": 36203515,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/36203515",
    "title": null,
    "body": "<p><h2>There is now a NEW workaround!!!</h2>(yay!)</p>\n\n<p>Let's say we have a <code>div</code> with <code>id=\"link_pseudo\"</code> and an <code>a</code> with <code>id=\"link_real\"</code>, <code>target=\"_blank\"</code>, and an <code>href</code>.</p>\n\n<p><strong>HTML:</strong></p>\n\n<pre><code>&lt;div id=\"link_pseudo\"&gt;\n  ...\n&lt;/div&gt;\n&lt;a id=\"link_real\" target=\"_blank\" href=\"example.com\"&gt;...&lt;/a&gt;\n</code></pre>\n\n<p>We can simulate a click to the <code>a</code> when clicking the <code>div</code> by using the eventFire implementation made by <a href=\"https://stackoverflow.com/a/2706236\">KooiInc<sup>1</sup></a>.</p>\n\n<p><strong>JavaScript<a href=\"https://stackoverflow.com/a/2706236\"><sup>1</sup></a>:</strong></p>\n\n<pre><code>function eventFire(el, etype){\n  if (el.fireEvent) {\n    el.fireEvent('on' + etype);\n  } else {\n    var evObj = document.createEvent('Events');\n    evObj.initEvent(etype, true, false);\n    el.dispatchEvent(evObj);\n  }\n}\n</code></pre>\n\n<p><strong>Usage<a href=\"https://stackoverflow.com/a/2706236\"><sup>1</sup></a>:</strong></p>\n\n<pre><code>eventFire([some element], 'click');\n</code></pre>\n\n<p><strong>Implementing:</strong></p>\n\n<p>If you add <code>onclick=\"eventFire(document.getElementById('link_real','click')\"</code> to the <code>div</code> and add <a href=\"https://stackoverflow.com/a/2706236\">KooiInc's solution<sup>1</sup></a> to the script, when clicking the div, it will emulate a click on the <code>a</code> tag.</p>\n\n<p><strong>New HTML:</strong></p>\n\n<pre><code>&lt;div id=\"link_pseudo\" onclick=\"eventFire(document.getElementById('link_real','click')\"&gt;\n  ...\n&lt;/div&gt;\n&lt;a id=\"link_real\" target=\"_blank\" href=\"example.com\"&gt;...&lt;/a&gt;\n&lt;script&gt;\nfunction eventFire(el, etype){\n  if (el.fireEvent) {\n    el.fireEvent('on' + etype);\n  } else {\n    var evObj = document.createEvent('Events');\n    evObj.initEvent(etype, true, false);\n    el.dispatchEvent(evObj);\n  }\n}\n&lt;/script&gt;\n</code></pre>\n\n<p><sup><a href=\"https://stackoverflow.com/a/2706236\"><code>*[1]KooiInc's Answer</code></a></sup></p>\n\n<p><sup><strong>I know, it's hackish, but it's called a workaround for a reason.</strong></sup></p>\n",
    "score": -4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3186555,
      "name": "DaMaxContent",
      "reputation": 845
    }
  },
  {
    "soID": 21692858,
    "parentID": 21692646,
    "url": "https://stackoverflow.com/q/21692858",
    "title": null,
    "body": "<p>I couldn't get it to trigger that on any page. A more robust version of this would do it:</p>\n\n<pre><code>window.console.log = function(){\n    console.error('The developer console is temp...');\n    window.console.log = function() {\n        return false;\n    }\n}\n\nconsole.log('test');\n</code></pre>\n\n<p>To style the output: <a href=\"https://stackoverflow.com/a/13017382/3189029\">Colors in JavaScript console</a></p>\n\n<p><strong>Edit</strong> Thinking <a href=\"https://stackoverflow.com/a/21692733/282110\">@joeldixon66</a> has the right idea: <a href=\"http://kspace.in/blog/2013/02/22/disable-javascript-execution-from-console/\" rel=\"nofollow noreferrer\">Disable JavaScript execution from console &laquo;  ::: KSpace :::</a></p>\n",
    "score": 34,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3189029,
      "name": "Will",
      "reputation": 3116
    }
  },
  {
    "soID": 30796190,
    "parentID": 5874652,
    "url": "https://stackoverflow.com/q/30796190",
    "title": null,
    "body": "<p><strong>attributes</strong> are in your HTML <em>text document/file</em> (== imagine this is the result of your html markup parsed), whereas<br>\n<strong>properties</strong> are in HTML <em>DOM tree</em> (== basically an actual property of some object in JS sense).</p>\n\n<p>Importantly, many of them are synced (if you update <code>class</code> property, <code>class</code> attribute in html will also be updated; and otherwise). <strong>But</strong> some attributes may be synced to unexpected properties - eg, <strong>attribute</strong> <code>checked</code> corresponds to <strong>property</strong> <code>defaultChecked</code>, so that</p>\n\n<ul>\n<li>manually checking a checkbox will change <code>.prop('checked')</code> value, but will not change <code>.attr('checked')</code> and <code>.prop('defaultChecked')</code> values</li>\n<li>setting <code>$('#input').prop('defaultChecked', true)</code> will also change <code>.attr('checked')</code>, but this will not be visible on an element.</li>\n</ul>\n\n<blockquote>\n  <p><strong>Rule of thumb is</strong>: <code>.prop()</code> method should be used for boolean attributes/properties and for properties which do not exist in html\n  (such as window.location). All other attributes (ones you can see in\n  the html) can and should continue to be manipulated with the <code>.attr()</code>\n  method. (<a href=\"http://blog.jquery.com/2011/05/10/jquery-1-6-1-rc-1-released/\" rel=\"noreferrer\">http://blog.jquery.com/2011/05/10/jquery-1-6-1-rc-1-released/</a>)</p>\n</blockquote>\n\n<p>And here is a table that shows where <code>.prop()</code> is preferred (even though <code>.attr()</code> can still be used).</p>\n\n<h2>  <img src=\"https://i.stack.imgur.com/gE0uq.png\" alt=\"table with preferred usage\"></h2>\n\n<hr>\n\n<h3>Why would you sometimes want to use .prop() instead of .attr() where latter is officially adviced?</h3>\n\n<ol>\n<li><code>.prop()</code> can return any type - string, integer, boolean; while <code>.attr()</code> always returns a string.</li>\n<li><code>.prop()</code> is said to be about 2.5 times faster than <code>.attr()</code>.</li>\n</ol>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3192470,
      "name": "lakesare",
      "reputation": 4188
    }
  },
  {
    "soID": 21160506,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/21160506",
    "title": null,
    "body": "<p>I'm pretty new to JavaScript and needed this functionality. I merely wrote this:</p>\n\n<pre><code>function removeFromArray(array, item, index) {\n  while((index = array.indexOf(item)) &gt; -1) {\n    array.splice(index, 1);\n  }\n}\n</code></pre>\n\n<p>Then when I want to use it:</p>\n\n<pre><code>//Set-up some dummy data\nvar dummyObj = {name:\"meow\"};\nvar dummyArray = [dummyObj, \"item1\", \"item1\", \"item2\"];\n\n//Remove the dummy data\nremoveFromArray(dummyArray, dummyObj);\nremoveFromArray(dummyArray, \"item2\");\n</code></pre>\n\n<p>Output - As expected.\n[\"item1\", \"item1\"]</p>\n\n<p>You may have different needs than I, so you can easily modify it to suit them. I hope this helps someone.</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3202289,
      "name": "sofiax",
      "reputation": 169
    }
  },
  {
    "soID": 29465443,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/29465443",
    "title": null,
    "body": "<p>I know this is an old question but here is a solution that I came up with and have been using for my projects...</p>\n\n<pre><code>function isArray (o) {\n    return typeof o === \"object\" &amp;&amp; o.length !== undefined;\n}\n\nisArray({}); // false\nisArray(1); // false\nisArray(\"str\"); // false\nisArray(function(){}); // false\n\nisArray([]); // true\n</code></pre>\n\n<p>The only pitfall is that it will give a false positive if your object happens to have a length property:</p>\n\n<pre><code>isArray({length:0}); // true\n</code></pre>\n\n<p>If you are okay with that drawback and know your pure objects won't have that property, it's a clean solution and should be faster than the Object.prototype.toString.call method.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3224874,
      "name": "Sensei_Shoh",
      "reputation": 132
    }
  },
  {
    "soID": 36548105,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/36548105",
    "title": null,
    "body": "<p>This is nice one that I found helpful.</p>\n\n<pre><code>function classChangeFn() {\n        document.getElementById(\"MyElement\").className = \"\";\n    }\n\nwindow.onload = function(){\n        document.getElementById(\"MyElement\").addEventListener( 'click' , classChangeFn );\n    }\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3256161,
      "name": "user01051990",
      "reputation": 375
    }
  },
  {
    "soID": 42747537,
    "parentID": 21692646,
    "url": "https://stackoverflow.com/q/42747537",
    "title": null,
    "body": "<p>Chrome changed a lot since the times facebook could disable console... </p>\n\n<p>As per March 2017 this doesn't work anymore. </p>\n\n<p>Best you can do is disable some of the console functions, example:</p>\n\n<pre><code>if(!window.console) window.console = {};\nvar methods = [\"log\", \"debug\", \"warn\", \"info\", \"dir\", \"dirxml\", \"trace\", \"profile\"];\nfor(var i=0;i&lt;methods.length;i++){\n    console[methods[i]] = function(){};\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3257288,
      "name": "Alpha2k",
      "reputation": 864
    }
  },
  {
    "soID": 42829537,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/42829537",
    "title": null,
    "body": "<p><strong>If you want to add <code>row</code> before the <code>&lt;tr&gt;</code> first child.</strong></p>\n\n<pre><code>$(\"#myTable &gt; tbody\").prepend(\"&lt;tr&gt;&lt;td&gt;my data&lt;/td&gt;&lt;td&gt;more data&lt;/td&gt;&lt;/tr&gt;\");\n</code></pre>\n\n<p><strong>If you want to add <code>row</code> after the <code>&lt;tr&gt;</code> last child.</strong></p>\n\n<pre><code>$(\"#myTable &gt; tbody\").append(\"&lt;tr&gt;&lt;td&gt;my data&lt;/td&gt;&lt;td&gt;more data&lt;/td&gt;&lt;/tr&gt;\");\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3278763,
      "name": "Sumon Sarker",
      "reputation": 1803
    }
  },
  {
    "soID": 43111147,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/43111147",
    "title": null,
    "body": "<p>This could also be done :</p>\n\n<pre><code>$(\"#myTable &gt; tbody\").html($(\"#myTable &gt; tbody\").html()+\"&lt;tr&gt;&lt;td&gt;my data&lt;/td&gt;&lt;td&gt;more data&lt;/td&gt;&lt;/tr&gt;\")\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3288253,
      "name": "prashant",
      "reputation": 275
    }
  },
  {
    "soID": 31292457,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/31292457",
    "title": null,
    "body": "<pre><code> var length = 16;                               // Number\n var lastName = \"Johnson\";                      // String\n var cars = [\"Saab\", \"Volvo\", \"BMW\"];           // Array\n var x = {firstName:\"John\", lastName:\"Doe\"};\n\n Object.prototype.myCheck= function(){\n if (this.constructor === Array){\n          alert('array');\n        }else if (this.constructor === Object)\n       {\n         alert('object');\n        }else if (this.constructor === Number)\n        {\n          alert('number');\n        }else if (this.constructor === String)\n        {\n          alert('string');\n        }\n\n }\n cars.myCheck();\n lastName.myCheck();\n length.myCheck();\n</code></pre>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3297388,
      "name": "Gaurav",
      "reputation": 355
    }
  },
  {
    "soID": 37429406,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/37429406",
    "title": null,
    "body": "<p>You can do something like this</p>\n\n<pre><code>function Enum(){\n  this.add.apply(this,arguments);\n}\n\nEnum.prototype.add = function(){\n  for (var i in arguments) {\n    this[arguments[i]] = new String(arguments[i]);\n  }\n};\nEnum.prototype.toList = function(){\n  return Object.keys(this)\n};\n\nvar STATUS = new Enum(\"CLOSED\",\"PENDING\");\n\n\nvar STATE = new Enum(\"CLOSED\",\"PENDING\");\n\nSTATE.CLOSED === STATUS.CLOSED  // false;\nSTATE.CLOSED === \"CLOSED\"  // false;\nSTATE.CLOSED.toString() === \"CLOSED\"  // true;\n</code></pre>\n\n<p>As defined in this library.\n<a href=\"https://github.com/webmodule/foo/blob/master/foo.js#L217\" rel=\"nofollow\">https://github.com/webmodule/foo/blob/master/foo.js#L217</a></p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3335776,
      "name": "LNT",
      "reputation": 493
    }
  },
  {
    "soID": 29605841,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/29605841",
    "title": null,
    "body": "<pre><code>var is_array = function (value) {\n   return value &amp;&amp;\n     typeof value === 'object' &amp;&amp;\n     typeof value.length === 'number' &amp;&amp;\n     typeof value.splice === 'function' &amp;&amp;\n    !(value.propertyIsEnumerable('length'));\n};\n</code></pre>\n\n<p>This function has been taken from \"JS the good parts\" book, works perfect for me.</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3367643,
      "name": "user3367643",
      "reputation": 19
    }
  },
  {
    "soID": 44635901,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/44635901",
    "title": null,
    "body": "<p>\"use strict\" is strict mode of javascript introduced in ECMA5. It is optional. Default mode of javascript is sloopy mode. \nStrict mode add some strict rules in javascript, for exp.</p>\n\n<ol>\n<li>var declaration is compulsory after use strict.</li>\n<li>octal declaration is not allowed, i.e, we cannot declare numbers starting with 0, like 010 is not allowed, but 10 is allowed. </li>\n</ol>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3447601,
      "name": "Avinash Malhotra",
      "reputation": 174
    }
  },
  {
    "soID": 31317777,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/31317777",
    "title": null,
    "body": "<p>You can check element is present or not using length in java script.\n   If length is greater than zero then element is present if length is zero then\n   element is not present   </p>\n\n<pre><code>// These by Id\nif( $('#elementid').length &gt; 0){\n  // Element is Present\n}else{\n  // Element is not Present\n}\n\n// These by Class\nif( $('.elementClass').length &gt; 0){\n  // Element is Present\n}else{\n  // Element is not Present\n}\n</code></pre>\n",
    "score": 24,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3458967,
      "name": "Anurag Deokar",
      "reputation": 580
    }
  },
  {
    "soID": 24420461,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/24420461",
    "title": null,
    "body": "<pre><code>var index,\n    input = [1,2,3],\n    indexToRemove = 1;\n    integers = [];\n\nfor (index in input) {\n    if (input.hasOwnProperty(index)) {\n        if (index !== indexToRemove) {\n            integers.push(result); \n        }\n    }\n}\ninput = integers;\n</code></pre>\n\n<p>This solution will take an array of input and will search through the input for the value to remove.  This will loop through the entire input array and the result will be a second array integers that has had the specific index removed. The integers array is then copied back into the input array.  </p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3486572,
      "name": "penguin",
      "reputation": 464
    }
  },
  {
    "soID": 23627436,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/23627436",
    "title": null,
    "body": "<pre><code>.halfStyle {\n    position:relative;\n    display:inline-block;\n    font-size:68px; /* or any font size will work */\n    color: rgba(0,0,0,0.8); /* or transparent, any color */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n    transform:rotate(4deg);\n    -webkit-transform:rotate(4deg);\n    text-shadow:2px 1px 3px rgba(0,0,0,0.3);\n}\n.halfStyle:before {\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:-0.5px;\n    left:-3px;\n    width: 100%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    color: white;\n    transform:rotate(-4deg);\n    -webkit-transform:rotate(-4deg);\n    text-shadow:0 0 1px black;\n\n}\n</code></pre>\n\n<p><a href=\"http://experimental.samtremaine.co.uk/half-style/\">http://experimental.samtremaine.co.uk/half-style/</a></p>\n\n<p>You can crowbar this code into doing all sorts of interesting things - this is just one implementation my associate and I came up with last night.</p>\n",
    "score": 25,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3631752,
      "name": "Sam Tremaine",
      "reputation": 251
    }
  },
  {
    "soID": 25108917,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/25108917",
    "title": null,
    "body": "<ol>\n<li><p>Node is great for quick prototypes but I'd never use it again for anything complex.\nI spent 20 years developing a relationship with a compiler and I sure miss it. </p></li>\n<li><p>Node is especially painful for maintaining code that you haven't visited for awhile. Type info and compile time error detection are GOOD THINGS. Why throw all that out? For what? And dang, when something does go south the stack traces quite often completely useless.</p></li>\n</ol>\n",
    "score": -3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3648786,
      "name": "mbert65",
      "reputation": 162
    }
  },
  {
    "soID": 39847263,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/39847263",
    "title": null,
    "body": "<p>You can use ES6. </p>\n\n<pre><code>var array=['1','2','3','4','5','6']\nvar index = array.filter((value)=&gt;value!='3');\n</code></pre>\n\n<p>Output : </p>\n\n<pre><code>[\"1\", \"2\", \"4\", \"5\", \"6\"]\n</code></pre>\n",
    "score": 19,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3742975,
      "name": "rajat44",
      "reputation": 465
    }
  },
  {
    "soID": 40686933,
    "parentID": 21692646,
    "url": "https://stackoverflow.com/q/40686933",
    "title": null,
    "body": "<p>My simple way, but it can help for further variations on this subject.\nList all methods and alter them to useless.</p>\n\n<pre><code>  Object.getOwnPropertyNames(console).filter(function(property) {\n     return typeof console[property] == 'function';\n  }).forEach(function (verb) {\n     console[verb] =function(){return 'Sorry, for security reasons...';};\n  });\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3756369,
      "name": "Dusan Krstic",
      "reputation": 148
    }
  },
  {
    "soID": 45113099,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/45113099",
    "title": null,
    "body": "<p>There are already a lot of answers, but because no one has done it with a one liner yet, I figured I'd show my method. It takes advantage of the fact that the string.split() function will remove all of the specified characters when creating an array. Here is an example: </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var ary = [1,2,3,4,1234,10,4,5,7,3];\r\nout = ary.join(\"-\").split(\"-4-\").join(\"-\").split(\"-\");\r\nconsole.log(out);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>In this example, all of the 4's are being removed from the array ary. However, it is important to note that any array containing the character \"-\" will cause issues with this example. In short, it will cause the join(\"-\") function to piece your string together improperly. In such a situation, all of the the \"-\" strings in the above snipet can be replaced with any string that will not be used in the original array. Here is another example: </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var ary = [1,2,3,4,'-',1234,10,'-',4,5,7,3];\r\nout = ary.join(\"!@#\").split(\"!@#4!@#\").join(\"!@#\").split(\"!@#\");\r\nconsole.log(out);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3790949,
      "name": "Yextus",
      "reputation": 52
    }
  },
  {
    "soID": 26990478,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/26990478",
    "title": null,
    "body": "<p>Just omitting [strWindowFeatures] parameters will open a new tab, UNLESS the browser setting overrides (browser setting trumps JavaScript).</p>\n\n<h3>New window</h3>\n\n<pre><code>var myWin = window.open(strUrl, strWindowName, [strWindowFeatures]);\n</code></pre>\n\n<h3>New tab</h3>\n\n<pre><code>var myWin = window.open(strUrl, strWindowName);\n</code></pre>\n\n<p>-- or --</p>\n\n<pre><code>var myWin = window.open(strUrl);\n</code></pre>\n",
    "score": 10,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3799524,
      "name": "MannyC",
      "reputation": 319
    }
  },
  {
    "soID": 33740232,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/33740232",
    "title": null,
    "body": "<p><strong>Object.assign()</strong></p>\n\n<p><strong>ECMAScript 2015 (ES6)</strong></p>\n\n<p>This is a new technology, part of the ECMAScript 2015 (ES6) standard.\nThis technology's specification has been finalized, but check the compatibility table for usage and implementation status in various browsers.</p>\n\n<p>The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.</p>\n\n<pre><code>var o1 = { a: 1 };\nvar o2 = { b: 2 };\nvar o3 = { c: 3 };\n\nvar obj = Object.assign(o1, o2, o3);\nconsole.log(obj); // { a: 1, b: 2, c: 3 }\nconsole.log(o1);  // { a: 1, b: 2, c: 3 }, target object itself is changed.\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 28104546,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/28104546",
    "title": null,
    "body": "<p><strong>!</strong> check for empty strings (\"\"), null, undefined, false and the number 0 and NaN. Say, if a string is empty <code>var name = \"\"</code> then <code>console.log(!name)</code> returns <code>true</code>.</p>\n\n<pre><code>function isEmpty(val){\n  return !val;\n}\n</code></pre>\n\n<p>this function will return true if <strong>val</strong> is <strong>empty, null, undefined, false, the number 0 or NaN</strong>.</p>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3835843,
      "name": "Arif",
      "reputation": 1145
    }
  },
  {
    "soID": 26360903,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/26360903",
    "title": null,
    "body": "<p>This solution creates a <strong>new object</strong> and is able to handle <strong>multiple objects</strong>.</p>\n\n<p>Furthermore, it is <strong>recursive</strong> and you can chose weather you <strong>want</strong> to <strong>overwrite Values</strong> and <strong>Objects</strong>.</p>\n\n<pre><code>    function extendObjects() {\n\n        var newObject        = {};\n        var overwriteValues  = false;\n        var overwriteObjects = false;\n\n        for ( var indexArgument = 0; indexArgument &lt; arguments.length; indexArgument++ ) {\n\n            if ( typeof arguments[indexArgument] !== 'object' ) {\n\n                if ( arguments[indexArgument] == 'overwriteValues_True' ) {\n\n                    overwriteValues = true;            \n                } else if ( arguments[indexArgument] == 'overwriteValues_False' ) {\n\n                    overwriteValues = false;                             \n                } else if ( arguments[indexArgument] == 'overwriteObjects_True' ) {\n\n                    overwriteObjects = true;     \n                } else if ( arguments[indexArgument] == 'overwriteObjects_False' ) {\n\n                    overwriteObjects = false; \n                }\n\n            } else {\n\n                extendObject( arguments[indexArgument], newObject, overwriteValues, overwriteObjects );\n            }\n\n        }\n\n        function extendObject( object, extendedObject, overwriteValues, overwriteObjects ) {\n\n            for ( var indexObject in object ) {\n\n                if ( typeof object[indexObject] === 'object' ) {\n\n                    if ( typeof extendedObject[indexObject] === \"undefined\" || overwriteObjects ) {\n                        extendedObject[indexObject] = object[indexObject];\n                    }\n\n                    extendObject( object[indexObject], extendedObject[indexObject], overwriteValues, overwriteObjects );\n\n                } else {\n\n                    if ( typeof extendedObject[indexObject] === \"undefined\" || overwriteValues ) {\n                        extendedObject[indexObject] = object[indexObject];\n                    }\n\n                }\n\n            }     \n\n            return extendedObject;\n\n        }\n\n        return newObject;\n    }\n\n    var object1           = { a : 1, b : 2, testArr : [888, { innArr : 1 }, 777 ], data : { e : 12, c : { lol : 1 }, rofl : { O : 3 } } };\n    var object2           = { a : 6, b : 9, data : { a : 17, b : 18, e : 13, rofl : { O : 99, copter : { mao : 1 } } }, hexa : { tetra : 66 } };\n    var object3           = { f : 13, g : 666, a : 333, data : { c : { xD : 45 } }, testArr : [888, { innArr : 3 }, 555 ]  };\n\n    var newExtendedObject = extendObjects( 'overwriteValues_False', 'overwriteObjects_False', object1, object2, object3 );\n</code></pre>\n\n<p><strong>Contents of newExtendedObject:</strong></p>\n\n<pre><code>{\"a\":1,\"b\":2,\"testArr\":[888,{\"innArr\":1},777],\"data\":{\"e\":12,\"c\":{\"lol\":1,\"xD\":45},\"rofl\":{\"O\":3,\"copter\":{\"mao\":1}},\"a\":17,\"b\":18},\"hexa\":{\"tetra\":66},\"f\":13,\"g\":666}\n</code></pre>\n\n<p>Fiddle: <a href=\"http://jsfiddle.net/o0gb2umb/\" rel=\"nofollow\">http://jsfiddle.net/o0gb2umb/</a></p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 34903482,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/34903482",
    "title": null,
    "body": "<p>You can use a trick with <code>form</code>:</p>\n\n<pre><code>$(function () {\n    $('#btn').click(function () {\n        openNewTab(\"http://stackoverflow.com\")\n        return false;\n    });\n});\n\nfunction openNewTab(link) {\n    var frm = $('&lt;form   method=\"get\" action=\"' + link + '\" target=\"_blank\"&gt;&lt;/form&gt;')\n    $(\"body\").append(frm);\n    frm.submit().remove();\n}\n</code></pre>\n\n<p><a href=\"https://jsfiddle.net/b039wc1h/3/\" rel=\"nofollow noreferrer\">jsFiddle demo</a></p>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3880205,
      "name": "CodeNinja",
      "reputation": 645
    }
  },
  {
    "soID": 25887881,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/25887881",
    "title": null,
    "body": "<p>Use jQuery's InArray:</p>\n\n<pre><code>A = [1, 2, 3, 4, 5, 6];\nA.splice($.inArray(3, A), 1);\n//It will return A=[1, 2, 4, 5, 6]`   \n</code></pre>\n\n<p><strong>Note: inArray will return -1, if the element was not found.</strong></p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3885237,
      "name": "Do Hoa Vinh",
      "reputation": 166
    }
  },
  {
    "soID": 37257144,
    "parentID": 9682092,
    "url": "https://stackoverflow.com/q/37257144",
    "title": null,
    "body": "<p>AngularJS handle data-binding mechanism with the help of three powerful functions: $watch(), $digest()\nand $apply(). Most of the time AngularJS will call the $scope.$watch() and $scope.$digest() functions for you, but\nin some cases you may have to call these functions yourself to update new values.</p>\n\n<p><strong>$watch()</strong> - This function is used to observe changes in a variable on the $scope. It accepts three\nparameters: expression, listener and equality object, where listener and equality object are optional parameters.</p>\n\n<p><strong>$digest()</strong> - This function iterates through all the watches in the $scope object, and its child $scope objects (if it has\nany). When $digest() iterates over the watches, it checks if the value of the expression has changed. If the value\nhas changed, AngularJS calls the listener with the new value and the old value.\nThe $digest() function is called whenever AngularJS thinks it is necessary. For example, after a button click, or\nafter an AJAX call. You may have some cases where AngularJS does not call the $digest() function for you. In that\ncase you have to call it yourself.</p>\n\n<p><strong>$apply()</strong> - Angular do auto-magically updates only those model changes which are inside AngularJS context. When\nyou do change in any model outside of the Angular context (like browser DOM events, setTimeout, XHR or third\nparty libraries), then you need to inform Angular of the changes by calling $apply() manually. When the $apply()\nfunction call finishes AngularJS calls $digest() internally, so all data bindings are updated.</p>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3889988,
      "name": "Bharath Kumar",
      "reputation": 318
    }
  },
  {
    "soID": 37159989,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/37159989",
    "title": null,
    "body": "<p>You can try this:</p>\n\n<pre><code>   var Enum = Object.freeze({\n            Role: Object.freeze({ Administrator: 1, Manager: 2, Supervisor: 3 }),\n            Color:Object.freeze({RED : 0, GREEN : 1, BLUE : 2 })\n            });\n\n    alert(Enum.Role.Supervisor);\n    alert(Enum.Color.GREEN);\n    var currentColor=0;\n    if(currentColor == Enum.Color.RED) {\n       alert('Its Red');\n    }\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3901944,
      "name": "Muhammad Awais",
      "reputation": 869
    }
  },
  {
    "soID": 36459182,
    "parentID": 9682092,
    "url": "https://stackoverflow.com/q/36459182",
    "title": null,
    "body": "<p>Here is an example of data binding with AngularJS, using an input field. I will explain later</p>\n\n<p><strong>HTML Code</strong></p>\n\n<pre><code>&lt;div ng-app=\"myApp\" ng-controller=\"myCtrl\" class=\"formInput\"&gt;\n     &lt;input type=\"text\" ng-model=\"watchInput\" Placeholder=\"type something\"/&gt;\n     &lt;p&gt;{{watchInput}}&lt;/p&gt; \n&lt;/div&gt;\n</code></pre>\n\n<p><strong>AngularJS Code</strong></p>\n\n<pre><code>myApp = angular.module (\"myApp\", []);\nmyApp.controller(\"myCtrl\", [\"$scope\", function($scope){\n  //Your Controller code goes here\n}]);\n</code></pre>\n\n<p>As you can see in the example above, <strong>AngularJS</strong> uses <code>ng-model</code> to listen and watch what happens on HTML elements, especially on <code>input</code> fields. When something happens, do something. In our case, <code>ng-model</code> is bind to our view, using the mustache notation <code>{{}}</code>. Whatever is typed inside the input field is displayed on the screen instantly. And that's the beauty of data binding, using AngularJS in its simplest form.</p>\n\n<p>Hope this helps.</p>\n\n<p>See a working example here on\n<a href=\"http://codepen.io/chrisN/pen/YqEmOO\" rel=\"nofollow\">Codepen</a></p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3902739,
      "name": "AllJs",
      "reputation": 244
    }
  },
  {
    "soID": 33659677,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/33659677",
    "title": null,
    "body": "<p><strong>Use  Newtonsoft.Json  dll.</strong> this is work fine in IE and Chrome </p>\n\n<p>put this code in your razor view </p>\n\n<pre><code>    if (Model.YourJsonSting!= null)\n        {\n            &lt;pre&gt;\n            &lt;code style=\"display:block;white-space:pre-wrap\"&gt;\n                      @JToken.Parse(Model.YourJsonSting).ToString(Formatting.Indented)\n                &lt;/code&gt;\n            &lt;/pre&gt;\n        }\n</code></pre>\n",
    "score": -5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 3942119,
      "name": "user3942119",
      "reputation": 9
    }
  },
  {
    "soID": 26206246,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/26206246",
    "title": null,
    "body": "<p>The <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-object.assign\" rel=\"noreferrer\">Harmony ECMAScript 2015 (ES6)</a> specifies <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" rel=\"noreferrer\"><strong><code>Object.assign</code></strong></a> which will do this.</p>\n\n<pre><code>Object.assign(obj1, obj2);\n</code></pre>\n\n<p>Current browser support is <a href=\"http://kangax.github.io/compat-table/es6/#test-Object_static_methods_Object.assign\" rel=\"noreferrer\">getting better</a>, but if you're developing for browsers that don't have support, you can use a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill\" rel=\"noreferrer\">polyfill</a>.</p>\n",
    "score": 287,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 34619133,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/34619133",
    "title": null,
    "body": "<p>Working JavaScript code:</p>\n\n<pre><code>&lt;div id=\"div_add\" class=\"div_add\"&gt;Add class from Javascript&lt;/div&gt;\n&lt;div id=\"div_replace\" class=\"div_replace\"&gt;Replace class from Javascript&lt;/div&gt;\n&lt;div id=\"div_remove\" class=\"div_remove\"&gt;Remove class from Javascript&lt;/div&gt;\n&lt;button onClick=\"div_add_class();\"&gt;Add class from Javascript&lt;/button&gt;\n&lt;button onClick=\"div_replace_class();\"&gt;Replace class from Javascript&lt;/button&gt;\n&lt;button onClick=\"div_remove_class();\"&gt;Remove class from Javascript&lt;/button&gt;\n&lt;script type=\"text/javascript\"&gt;\n    function div_add_class()\n    {\n        document.getElementById(\"div_add\").className += \" div_added\";\n    }\n    function div_replace_class()\n    {\n        document.getElementById(\"div_replace\").className = \"div_replaced\";\n    }\n    function div_remove_class()\n    {\n        document.getElementById(\"div_remove\").className = \"\";\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>You can download a working code from <a href=\"http://ownanswers.com/question/add-remove-and-replace-class-in-javascript/\" rel=\"nofollow noreferrer\">this link</a>.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4040466,
      "name": "Sajid",
      "reputation": 41
    }
  },
  {
    "soID": 39102819,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/39102819",
    "title": null,
    "body": "<p>Use the following syntax to check if the element actually exists using jQuery.</p>\n\n<pre><code>let oElement = $(\".myElementClass\");\nif(oElement[0]) {\n    // Do some jQuery operation here using oElement\n}\nelse {\n    // Unable to fetch the object\n}\n</code></pre>\n",
    "score": -4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4098272,
      "name": "Jonathan Cardoz",
      "reputation": 79
    }
  },
  {
    "soID": 26509484,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/26509484",
    "title": null,
    "body": "<p>Removing the value with index and splice!</p>\n\n<pre><code>function removeArrValue(arr,value) {\n    var index = arr.indexOf(value);\n    if (index &gt; -1) {\n        arr.splice(index, 1);\n    }\n    return arr;\n}\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4168909,
      "name": "Nejc Lepen",
      "reputation": 67
    }
  },
  {
    "soID": 28475133,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/28475133",
    "title": null,
    "body": "<p>You may find the following function useful: </p>\n\n<pre><code>function typeOf (obj) {\n  return {}.toString.call(obj).split(' ')[1].slice(0, -1).toLowerCase();\n}\n</code></pre>\n\n<p>Results:</p>\n\n<pre><code>typeOf(); //undefined\ntypeOf(null); //null\ntypeOf(NaN); //number\ntypeOf(5); //number\ntypeOf({}); //object\ntypeOf([]); //array\ntypeOf(''); //string\ntypeOf(function () {}); //function\ntypeOf(/a/) //regexp\n</code></pre>\n",
    "score": 14,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4216053,
      "name": "Vix",
      "reputation": 461
    }
  },
  {
    "soID": 33843105,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/33843105",
    "title": null,
    "body": "<p>I prefer using on selector and I apply it on document.</p>\n\n<p>This binds itself on the document and will be applicable to the elements that will be rendered after page load.</p>\n\n<p>For example:</p>\n\n<pre><code>$(document).on(\"click\",$(selector), function() {\n    // Your code here\n});\n</code></pre>\n",
    "score": 8,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4249059,
      "name": "Vatsal",
      "reputation": 787
    }
  },
  {
    "soID": 34352309,
    "parentID": 5874652,
    "url": "https://stackoverflow.com/q/34352309",
    "title": null,
    "body": "<blockquote>\n  <p>1) A property is in the DOM; an attribute is in the HTML that is\n  parsed into the DOM.</p>\n  \n  <p>2) $( elem ).attr( \"checked\" ) (1.6.1+)   \"checked\" (String) Will\n  change with checkbox state</p>\n  \n  <p>3) $( elem ).attr( \"checked\" ) (pre-1.6)    true (Boolean) Changed\n  with checkbox state</p>\n</blockquote>\n\n<ul>\n<li><p>Mostly we want to use for DOM object rather then custom attribute\nlike <code>data-img, data-xyz</code>.</p></li>\n<li><p>Also some of difference when accessing <code>checkbox</code> value and <code>href</code>\nwith <code>attr()</code> and <code>prop()</code> as thing change with DOM output with\n<code>prop()</code> as full link from <code>origin</code> and <code>Boolean</code> value for checkbox\n<code>(pre-1.6)</code></p></li>\n<li><p>We can only access DOM elements with <code>prop</code> other then it gives <strong><code>undefined</code></strong></p></li>\n</ul>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.6.0/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;!doctype html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n\r\n&lt;head&gt;\r\n  &lt;meta charset=\"utf-8\"&gt;\r\n  &lt;title&gt;prop demo&lt;/title&gt;\r\n  &lt;style&gt;\r\n    p {\r\n      margin: 20px 0 0;\r\n    }\r\n    b {\r\n      color: blue;\r\n    }\r\n  &lt;/style&gt;\r\n\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n\r\n  &lt;input id=\"check1\" type=\"checkbox\" checked=\"checked\"&gt;\r\n  &lt;label for=\"check1\"&gt;Check me&lt;/label&gt;\r\n  &lt;p&gt;&lt;/p&gt;\r\n\r\n  &lt;script&gt;\r\n    $(\"input\").change(function() {\r\n      var $input = $(this);\r\n      $(\"p\").html(\r\n        \".attr( \\\"checked\\\" ): &lt;b&gt;\" + $input.attr(\"checked\") + \"&lt;/b&gt;&lt;br&gt;\" +\r\n        \".prop( \\\"checked\\\" ): &lt;b&gt;\" + $input.prop(\"checked\") + \"&lt;/b&gt;&lt;br&gt;\" +\r\n        \".is( \\\":checked\\\" ): &lt;b&gt;\" + $input.is(\":checked\")) + \"&lt;/b&gt;\";\r\n    }).change();\r\n  &lt;/script&gt;\r\n\r\n&lt;/body&gt;\r\n\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4255447,
      "name": "Parth Trivedi",
      "reputation": 3080
    }
  },
  {
    "soID": 34636629,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/34636629",
    "title": null,
    "body": "<p>I've made an Enum class that can fetch values AND names at O(1). It can also generate an Object Array containing all Names and Values.</p>\n\n<pre><code>function Enum(obj) {\n    // Names must be unique, Values do not.\n    // Putting same values for different Names is risky for this implementation\n\n    this._reserved = {\n        _namesObj: {},\n        _objArr: [],\n        _namesArr: [],\n        _valuesArr: [],\n        _selectOptionsHTML: \"\"\n    };\n\n    for (k in obj) {\n        if (obj.hasOwnProperty(k)) {\n            this[k] = obj[k];\n            this._reserved._namesObj[obj[k]] = k;\n        }\n    }\n}\n(function () {\n    this.GetName = function (val) {\n        if (typeof this._reserved._namesObj[val] === \"undefined\")\n            return null;\n        return this._reserved._namesObj[val];\n    };\n\n    this.GetValue = function (name) {\n        if (typeof this[name] === \"undefined\")\n            return null;\n        return this[name];\n    };\n\n    this.GetObjArr = function () {\n        if (this._reserved._objArr.length == 0) {\n            var arr = [];\n            for (k in this) {\n                if (this.hasOwnProperty(k))\n                    if (k != \"_reserved\")\n                        arr.push({\n                            Name: k,\n                            Value: this[k]\n                        });\n            }\n            this._reserved._objArr = arr;\n        }\n        return this._reserved._objArr;\n    };\n\n    this.GetNamesArr = function () {\n        if (this._reserved._namesArr.length == 0) {\n            var arr = [];\n            for (k in this) {\n                if (this.hasOwnProperty(k))\n                    if (k != \"_reserved\")\n                        arr.push(k);\n            }\n            this._reserved._namesArr = arr;\n        }\n        return this._reserved._namesArr;\n    };\n\n    this.GetValuesArr = function () {\n        if (this._reserved._valuesArr.length == 0) {\n            var arr = [];\n            for (k in this) {\n                if (this.hasOwnProperty(k))\n                    if (k != \"_reserved\")\n                        arr.push(this[k]);\n            }\n            this._reserved._valuesArr = arr;\n        }\n        return this._reserved._valuesArr;\n    };\n\n    this.GetSelectOptionsHTML = function () {\n        if (this._reserved._selectOptionsHTML.length == 0) {\n            var html = \"\";\n            for (k in this) {\n                if (this.hasOwnProperty(k))\n                    if (k != \"_reserved\")\n                        html += \"&lt;option value='\" + this[k] + \"'&gt;\" + k + \"&lt;/option&gt;\";\n            }\n            this._reserved._selectOptionsHTML = html;\n        }\n        return this._reserved._selectOptionsHTML;\n    };\n}).call(Enum.prototype);\n</code></pre>\n\n<p>You can init'd it like this:</p>\n\n<pre><code>var enum1 = new Enum({\n    item1: 0,\n    item2: 1,\n    item3: 2\n});\n</code></pre>\n\n<p>To fetch a value (like Enums in C#):</p>\n\n<pre><code>var val2 = enum1.item2;\n</code></pre>\n\n<p>To fetch a name for a value (can be ambiguous when putting the same value for different names):</p>\n\n<pre><code>var name1 = enum1.GetName(0);  // \"item1\"\n</code></pre>\n\n<p>To get an array with each name &amp; value in an object:</p>\n\n<pre><code>var arr = enum1.GetObjArr();\n</code></pre>\n\n<p>Will generate:</p>\n\n<pre><code>[{ Name: \"item1\", Value: 0}, { ... }, ... ]\n</code></pre>\n\n<p>You can also get the html select options readily:</p>\n\n<pre><code>var html = enum1.GetSelectOptionsHTML();\n</code></pre>\n\n<p>Which holds:</p>\n\n<pre><code>\"&lt;option value='0'&gt;item1&lt;/option&gt;...\"\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4274373,
      "name": "Oooogi",
      "reputation": 305
    }
  },
  {
    "soID": 39286804,
    "parentID": 9682092,
    "url": "https://stackoverflow.com/q/39286804",
    "title": null,
    "body": "<p>AngularJs supports <strong>Two way data-binding</strong>.<br>\nMeans you can access data <strong>View -> Controller</strong> &amp; <strong>Controller -> View</strong></p>\n\n<p><strong>For Ex.</strong></p>\n\n<p><strong>1)</strong></p>\n\n<pre><code>// If $scope have some value in Controller. \n$scope.name = \"Peter\";\n\n// HTML\n&lt;div&gt; {{ name }} &lt;/div&gt;\n</code></pre>\n\n<p><strong>O/P</strong></p>\n\n<pre><code>Peter\n</code></pre>\n\n<p>You can bind data in <code>ng-model</code> Like:-<br>\n<strong>2)</strong></p>\n\n<pre><code>&lt;input ng-model=\"name\" /&gt;\n\n&lt;div&gt; {{ name }} &lt;/div&gt;\n</code></pre>\n\n<p>Here in above example whatever input user will give, It will be visible in <code>&lt;div&gt;</code> tag.</p>\n\n<p>If want to bind input from html to controller:-<br>\n<strong>3)</strong></p>\n\n<pre><code>&lt;form name=\"myForm\" ng-submit=\"registration()\"&gt;\n   &lt;label&gt; Name &lt;/lbel&gt;\n   &lt;input ng-model=\"name\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Here if you want to use input <code>name</code> in the controller then,</p>\n\n<pre><code>$scope.name = {};\n\n$scope.registration = function() {\n   console.log(\"You will get the name here \", $scope.name);\n};\n</code></pre>\n\n<p><code>ng-model</code> binds our view and render it in expression <code>{{ }}</code>.<br>\n<code>ng-model</code> is the data which is shown to the user in the view and with which the user interacts.<br>\nSo it is easy to bind data in AngularJs.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4286411,
      "name": "ojus kulkarni",
      "reputation": 1183
    }
  },
  {
    "soID": 34351670,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/34351670",
    "title": null,
    "body": "<p>Any p<strong>arent that exists</strong> at the time the event is bound and if your page was <strong>dynamically creating elements</strong> with the class name <strong>button</strong> you would bind the event to a parent which already exists</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(document).ready(function(){\r\n  //Particular Parent chield click\r\n  $(\".buttons\").on(\"click\",\"button\",function(){\r\n    alert(\"Clicked\");\r\n  });  \r\n  \r\n  //Dynamic event bind on button class  \r\n  $(document).on(\"click\",\".button\",function(){\r\n    alert(\"Dymamic Clicked\");\r\n  });\r\n  $(\"input\").addClass(\"button\");  \r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;div class=\"buttons\"&gt;\r\n  &lt;input type=\"button\" value=\"1\"&gt;\r\n  &lt;button&gt;2&lt;/button&gt;\r\n  &lt;input type=\"text\"&gt;\r\n  &lt;button&gt;3&lt;/button&gt;  \r\n  &lt;input type=\"button\" value=\"5\"&gt;  \r\n  &lt;/div&gt;\r\n&lt;button&gt;6&lt;/button&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4286710,
      "name": "Ankit Kathiriya",
      "reputation": 841
    }
  },
  {
    "soID": 42902202,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/42902202",
    "title": null,
    "body": "<p>I made a function </p>\n\n<pre><code>function pop(valuetoremove, myarray) {\nvar indexofmyvalue = myarray.indexOf(valuetoremove);\nmyarray.splice(indexofmyvalue, 1);\n}\n</code></pre>\n\n<p>And used like this.</p>\n\n<pre><code>pop(valuetoremove,myarray);\n</code></pre>\n\n<p>Cheers!</p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4332316,
      "name": "Ali Akram",
      "reputation": 84
    }
  },
  {
    "soID": 30022188,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/30022188",
    "title": null,
    "body": "<p>this is very similar to all of the answers, but why not use the <code>!</code> operator twice so you can get a boolean:</p>\n\n<pre><code>jQuery.fn.exists = function(){return !!this.length};\n\nif ($(selector).exists()) {\n    // the element exists, now what?...\n}\n</code></pre>\n",
    "score": 20,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4343318,
      "name": "Santiago Hernández",
      "reputation": 2560
    }
  },
  {
    "soID": 44368362,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/44368362",
    "title": null,
    "body": "<p>You can find with <code>push</code> like below:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function isArray(obj){\r\n   return (typeof obj.push=== 'function')?true:false;\r\n}\r\n\r\nvar array=new Array();\r\nor\r\nvar array=['a','b','c'];\r\nconsole.log(isArray(array));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4356233,
      "name": "lalithkumar",
      "reputation": 1
    }
  },
  {
    "soID": 32245965,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/32245965",
    "title": null,
    "body": "<p>It's easy to use, I think. <a href=\"https://stackoverflow.com/a/32245370/4365315\">https://stackoverflow.com/a/32245370/4365315</a></p>\n\n<pre><code>var A = {a:11, b:22}, \nenumA = new TypeHelper(A);\n\nif(enumA.Value === A.b || enumA.Key === \"a\"){ \n... \n}\n\nvar keys = enumA.getAsList();//[object, object]\n\n//set\nenumA.setType(22, false);//setType(val, isKey)\n\nenumA.setType(\"a\", true);\n\nenumA.setTypeByIndex(1);\n</code></pre>\n\n<p>UPDATE:</p>\n\n<p>There is my helper codes(<code>TypeHelper</code>).</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var Helper = {\r\n    isEmpty: function (obj) {\r\n        return !obj || obj === null || obj === undefined || Array.isArray(obj) &amp;&amp; obj.length === 0;\r\n    },\r\n\r\n    isObject: function (obj) {\r\n        return (typeof obj === 'object');\r\n    },\r\n\r\n    sortObjectKeys: function (object) {\r\n        return Object.keys(object)\r\n            .sort(function (a, b) {\r\n                c = a - b;\r\n                return c\r\n            });\r\n    },\r\n    containsItem: function (arr, item) {\r\n        if (arr &amp;&amp; Array.isArray(arr)) {\r\n            return arr.indexOf(item) &gt; -1;\r\n        } else {\r\n            return arr === item;\r\n        }\r\n    },\r\n\r\n    pushArray: function (arr1, arr2) {\r\n        if (arr1 &amp;&amp; arr2 &amp;&amp; Array.isArray(arr1)) {\r\n            arr1.push.apply(arr1, Array.isArray(arr2) ? arr2 : [arr2]);\r\n        }\r\n    }\r\n};\r\nfunction TypeHelper() {\r\n    var _types = arguments[0],\r\n        _defTypeIndex = 0,\r\n        _currentType,\r\n        _value,\r\n        _allKeys = Helper.sortObjectKeys(_types);\r\n\r\n    if (arguments.length == 2) {\r\n        _defTypeIndex = arguments[1];\r\n    }\r\n\r\n    Object.defineProperties(this, {\r\n        Key: {\r\n            get: function () {\r\n                return _currentType;\r\n            },\r\n            set: function (val) {\r\n                _currentType.setType(val, true);\r\n            },\r\n            enumerable: true\r\n        },\r\n        Value: {\r\n            get: function () {\r\n                return _types[_currentType];\r\n            },\r\n            set: function (val) {\r\n                _value.setType(val, false);\r\n            },\r\n            enumerable: true\r\n        }\r\n    });\r\n    this.getAsList = function (keys) {\r\n        var list = [];\r\n        _allKeys.forEach(function (key, idx, array) {\r\n            if (key &amp;&amp; _types[key]) {\r\n\r\n                if (!Helper.isEmpty(keys) &amp;&amp; Helper.containsItem(keys, key) || Helper.isEmpty(keys)) {\r\n                    var json = {};\r\n                    json.Key = key;\r\n                    json.Value = _types[key];\r\n                    Helper.pushArray(list, json);\r\n                }\r\n            }\r\n        });\r\n        return list;\r\n    };\r\n\r\n    this.setType = function (value, isKey) {\r\n        if (!Helper.isEmpty(value)) {\r\n            Object.keys(_types).forEach(function (key, idx, array) {\r\n                if (Helper.isObject(value)) {\r\n                    if (value &amp;&amp; value.Key == key) {\r\n                        _currentType = key;\r\n                    }\r\n                } else if (isKey) {\r\n                    if (value &amp;&amp; value.toString() == key.toString()) {\r\n                        _currentType = key;\r\n                    }\r\n                } else if (value &amp;&amp; value.toString() == _types[key]) {\r\n                    _currentType = key;\r\n                }\r\n            });\r\n        } else {\r\n            this.setDefaultType();\r\n        }\r\n        return isKey ? _types[_currentType] : _currentType;\r\n    };\r\n\r\n    this.setTypeByIndex = function (index) {\r\n        for (var i = 0; i &lt; _allKeys.length; i++) {\r\n            if (index === i) {\r\n                _currentType = _allKeys[index];\r\n                break;\r\n            }\r\n        }\r\n    };\r\n\r\n    this.setDefaultType = function () {\r\n        this.setTypeByIndex(_defTypeIndex);\r\n    };\r\n\r\n    this.setDefaultType();\r\n}\r\n\r\nvar TypeA = {\r\n    \"-1\": \"Any\",\r\n    \"2\": \"2L\",\r\n    \"100\": \"100L\",\r\n    \"200\": \"200L\",\r\n    \"1000\": \"1000L\"\r\n};\r\n\r\nvar enumA = new TypeHelper(TypeA, 4);\r\n\r\ndocument.writeln(\"Key = \", enumA.Key,\", Value = \", enumA.Value, \"&lt;br&gt;\");\r\n\r\n\r\nenumA.setType(\"200L\", false);\r\ndocument.writeln(\"Key = \", enumA.Key,\", Value = \", enumA.Value, \"&lt;br&gt;\");\r\n\r\nenumA.setDefaultType();\r\ndocument.writeln(\"Key = \", enumA.Key,\", Value = \", enumA.Value, \"&lt;br&gt;\");\r\n\r\n\r\nenumA.setTypeByIndex(1);\r\ndocument.writeln(\"Key = \", enumA.Key,\", Value = \", enumA.Value, \"&lt;br&gt;\");\r\n\r\ndocument.writeln(\"is equals = \", (enumA.Value == TypeA[\"2\"]));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4365315,
      "name": "Sherali Turdiyev",
      "reputation": 1212
    }
  },
  {
    "soID": 33122536,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/33122536",
    "title": null,
    "body": "<p>You can merge objects through following my method</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var obj1 = { food: 'pizza', car: 'ford' };\r\nvar obj2 = { animal: 'dog' };\r\n\r\nvar result = mergeObjects([obj1, obj2]);\r\n\r\nconsole.log(result);\r\ndocument.write(\"result: &lt;pre&gt;\" + JSON.stringify(result, 0, 3) + \"&lt;/pre&gt;\");\r\n\r\nfunction mergeObjects(objectArray) {\r\n    if (objectArray.length) {\r\n        var b = \"\", i = -1;\r\n        while (objectArray[++i]) {\r\n            var str = JSON.stringify(objectArray[i]);\r\n            b += str.slice(1, str.length - 1);\r\n            if (objectArray[i + 1]) b += \",\";\r\n        }\r\n        return JSON.parse(\"{\" + b + \"}\");\r\n    }\r\n    return {};\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 40541796,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/40541796",
    "title": null,
    "body": "<p>JavaScript “strict” mode introduces in ECMAScript 5.</p>\n\n<pre><code>  (function() {\n  \"use strict\";\n   your code...\n   })();\n</code></pre>\n\n<p>writing \"use strict\"; at the very top of your JS file turns on strict\nsyntax checking. It does the following tasks for us :</p>\n\n<p>(i) shows an error if you try to assign to an undeclared variable</p>\n\n<p>(ii) stops you from overwriting key JS system libraries</p>\n\n<p>(ii) forbids some unsafe or error-prone language features</p>\n\n<p>\"use strict\" also works inside of individual functions. It is always a better practice to include \"use strict in your code.</p>\n\n<p>Browser Compatibility Issue: \nThe \"use\" directives are meant to be backwards-compatible. Browsers that donot support them will just see a String literal that isn't referenced further. So, they will pass over it and move on.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4490149,
      "name": "Rabin Pantha",
      "reputation": 420
    }
  },
  {
    "soID": 37093205,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/37093205",
    "title": null,
    "body": "<p>I think many of the JavaScript instructions are not well thought out for functional programming. Splice returns the deleted element where most of the time you need the reduced array. This is bad.</p>\n\n<p>Imagine you are doing a recursive call and have to pass an array with one less item, probably without the current indexed item. Or imagine you are doing another recursive call and has to pass an array with an element pushed.</p>\n\n<p>In neither of these cases you can do <code>myRecursiveFunction(myArr.push(c))</code> or <code>myRecursiveFunction(myArr.splice(i,1))</code>. The first idiot will in fact pass the length of the array and the second idiot will pass the deleted element as a parameter.</p>\n\n<p>So what I do in fact... For deleting an array element and passing the resulting to a function as a parameter at the same time I do as follows</p>\n\n<pre><code>myRecursiveFunction(myArr.slice(0,i).concat(a.slice(i+1)))\n</code></pre>\n\n<p>When it comes to push that's more silly... I do like,</p>\n\n<pre><code>myRecursiveFunction((myArr.push(c),myArr))\n</code></pre>\n\n<p>I believe in a proper functional language a method mutating the object it's called upon must return a reference to the very object as a result.</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4543207,
      "name": "Redu",
      "reputation": 7978
    }
  },
  {
    "soID": 42954642,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/42954642",
    "title": null,
    "body": "<p>Well, I guess it's documented neatly <a href=\"https://learn.jquery.com/using-jquery-core/faq/how-do-i-test-whether-an-element-exists/\" rel=\"nofollow noreferrer\">here</a> in the official website itself !</p>\n\n<blockquote>\n  <p>Use the .length property of the jQuery collection returned by your\n  selector:</p>\n\n<pre><code>if ( $( \"#myDiv\" ).length ) {\n\n    $( \"#myDiv\" ).show();\n\n}\n</code></pre>\n</blockquote>\n\n<p><strong>Just to add on to the above answers, here is an important fact down below :</strong></p>\n\n<blockquote>\n  <p>Note that it isn't always necessary to test whether an element exists.\n  The following code will show the element if it exists, and do nothing\n  (with no errors) if it does not:</p>\n\n<pre><code>$( \"#myDiv\" ).show();\n</code></pre>\n</blockquote>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4546390,
      "name": "Tilak Maddy",
      "reputation": 1054
    }
  },
  {
    "soID": 31761149,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/31761149",
    "title": null,
    "body": "<p>I have updated the <a href=\"http://jsperf.com/check-isarray/3\">jsperf fiddle</a> with two alternative methods as well as error checking.</p>\n\n<p>It turns out that the method defining a constant value in the 'Object' and 'Array' prototypes is faster than any of the other methods.  It is a somewhat surprising result.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>/* Initialisation */\r\nObject.prototype.isArray = function() {\r\n  return false;\r\n};\r\nArray.prototype.isArray = function() {\r\n  return true;\r\n};\r\nObject.prototype._isArray = false;\r\nArray.prototype._isArray = true;\r\n\r\nvar arr = [\"1\", \"2\"];\r\nvar noarr = \"1\";\r\n\r\n/* Method 1 (function) */\r\nif (arr.isArray()) document.write(\"arr is an array according to function&lt;br/&gt;\");\r\nif (!noarr.isArray()) document.write(\"noarr is not an array according to function&lt;br/&gt;\");\r\n/* Method 2 (value) - **** FASTEST ***** */\r\nif (arr._isArray) document.write(\"arr is an array according to member value&lt;br/&gt;\");\r\nif (!noarr._isArray) document.write(\"noarr is not an array according to member value&lt;br/&gt;\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>These two methods do not work if the variable takes the undefined value, but they do work if you are certain that they have a value.  With regards to checking with performance in mind if a value is an array or a single value, the second method looks like a valid fast method.  It is slightly faster than 'instanceof' on Chrome, twice as fast as the second best method in Internet Explorer, Opera and Safari (on my machine).</p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4636021,
      "name": "le_top",
      "reputation": 61
    }
  },
  {
    "soID": 29940614,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/29940614",
    "title": null,
    "body": "<h2><strong>The \"use strict\" Directive</strong></h2>\n\n<p>The \"use strict\" directive is new in JavaScript 1.8.5 (ECMAScript version 5).</p>\n\n<p>It is not a statement, but a literal expression, ignored by earlier versions of JavaScript.</p>\n\n<p>The purpose of \"use strict\" is to indicate that the code should be executed in \"strict mode\".</p>\n\n<p>With strict mode, you can not, for example, use undeclared variables.</p>\n\n<h2>Why Strict Mode?</h2>\n\n<p>Strict mode makes it easier to write \"secure\" JavaScript.</p>\n\n<p>Strict mode changes previously accepted \"bad syntax\" into real errors.</p>\n\n<p>As an example, in normal JavaScript, mistyping a variable name creates a new global variable. In strict mode, this will throw an error, making it impossible to accidentally create a global variable.</p>\n\n<p>In normal JavaScript, a developer will not receive any error feedback assigning values to non-writable properties.</p>\n\n<p>In strict mode, any assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object, will throw an error.</p>\n\n<p>Please refer to... </p>\n\n<blockquote>\n  <p><a href=\"http://www.w3schools.com/js/js_strict.asp\">http://www.w3schools.com/js/js_strict.asp</a></p>\n</blockquote>\n\n<p>...to know more</p>\n",
    "score": 22,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4693906,
      "name": "Mehul Singh",
      "reputation": 352
    }
  },
  {
    "soID": 29443677,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/29443677",
    "title": null,
    "body": "<p>I do this in a very simple way. Works for me. Any drawbacks?</p>\n\n<pre><code>Array.prototype.isArray = true;\n\na=[]; b={};\na.isArray  // true\nb.isArray  // (undefined -&gt; false)\n</code></pre>\n",
    "score": 7,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4748608,
      "name": "rsbkk",
      "reputation": 125
    }
  },
  {
    "soID": 36218739,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/36218739",
    "title": null,
    "body": "<p><code>$(\"selector\"</code>) give an object which has <code>length</code> data. If there are elements as you define in selector, you will get them from the object. So if you check it's length you allready can find, is there any element exists. In javascript <code>0 == false</code> also <code>null == false</code> . If you not get <code>0</code> your codes will run.</p>\n\n<pre><code>if($(\"selector\").length){\n   //code in the case\n} \n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4766521,
      "name": "Kamuran Sönecek",
      "reputation": 1278
    }
  },
  {
    "soID": 35622801,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/35622801",
    "title": null,
    "body": "<p>You can use this function to get data type.</p>\n\n<pre><code>var myAr  = [1,2];\n\ncheckType(myAr);\n\nfunction checkType(data){\n  if(typeof data ==='object'){\n    if(Object.prototype.toString.call(data).indexOf('Array')!==(-1)){\n      return 'array';\n    } else{\n      return 'object';\n    }\n  } else {\n    return typeof data;\n  }\n}\n\nif(checkType(myAr) === 'array'){console.log('yes, It is an array')};\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4766521,
      "name": "Kamuran Sönecek",
      "reputation": 1278
    }
  },
  {
    "soID": 35080385,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/35080385",
    "title": null,
    "body": "<p>By my solution you can remove one or more than one item in an array thanks to pure JavaScript. There is no need for another JavaScript library.</p>\n\n<pre><code>var myArray = [1,2,3,4,5]; // First array\n\nvar removeItem = function(array,value) {  // My clear function\n    if(Array.isArray(value)) {  // For multi remove\n        for(var i = array.length - 1; i &gt;= 0; i--) {\n            for(var j = value.length - 1; j &gt;= 0; j--) {\n                if(array[i] === value[j]) {\n                    array.splice(i, 1);\n                };\n            }\n        }\n    }\n    else { // For single remove\n        for(var i = array.length - 1; i &gt;= 0; i--) {\n            if(array[i] === value) {\n                array.splice(i, 1);\n            }\n        }\n    }\n}\n\nremoveItem(myArray,[1,4]); // myArray will be [2,3,5]\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4766521,
      "name": "Kamuran Sönecek",
      "reputation": 1278
    }
  },
  {
    "soID": 43533114,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/43533114",
    "title": null,
    "body": "<p>just say <code>myElement.classList=\"new-class\"</code> unless you need to maintain other existing classes in which case you can use the <code>classList.add, .remove</code> methods.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var doc = document;\r\nvar divOne = doc.getElementById(\"one\");\r\nvar goButton = doc.getElementById(\"go\");\r\n\r\ngoButton.addEventListener(\"click\", function() {\r\n  divOne.classList=\"blue\";\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>div{\r\n  min-height:48px;\r\n  min-width:48px;\r\n}\r\n.bordered{\r\n  border: 1px solid black;\r\n}\r\n.green{\r\n  background:green;\r\n}\r\n.blue{\r\n  background: blue;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;button id=\"go\"&gt;Change Class&lt;/button&gt;\r\n\r\n&lt;div id=\"one\" class=\"bordered green\"&gt;\r\n\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4797603,
      "name": "Ron Royston",
      "reputation": 2217
    }
  },
  {
    "soID": 33324694,
    "parentID": 5874652,
    "url": "https://stackoverflow.com/q/33324694",
    "title": null,
    "body": "<p>Before jQuery 1.6 , the attr() method <strong><em>sometimes</em></strong> took property values into account when retrieving attributes, this caused rather inconsistent behavior. </p>\n\n<p>The introduction of the prop() method provides a way to explicitly retrieve property values, while .attr() retrieves attributes.</p>\n\n<p>The Docs:</p>\n\n<p>jQuery.attr()\nGet the value of an attribute for the first element in the set of matched elements.</p>\n\n<p>jQuery.prop()\nGet the value of a property for the first element in the set of matched elements.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4799446,
      "name": "PetrusR3x",
      "reputation": 1985
    }
  },
  {
    "soID": 40464046,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/40464046",
    "title": null,
    "body": "<p>with new features of ES6 block level scoping is managed</p>\n\n<pre><code>var funcs = [];\nfor (let i = 0; i &lt; 3; i++) {          // let's create 3 functions\n    funcs[i] = function() {            // and store them in funcs\n        console.log(\"My value: \" + i); // each should log its value.\n    };\n}\nfor (let j = 0; j &lt; 3; j++) {\n    funcs[j]();                        // and now let's run each one to see\n}\n</code></pre>\n\n<p>code in question is replaced with <strong>let</strong> instead of <strong>var</strong>.</p>\n\n<p>More on <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/let\" rel=\"noreferrer\">Let</a></p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4869045,
      "name": "Prithvi",
      "reputation": 428
    }
  },
  {
    "soID": 43363905,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/43363905",
    "title": null,
    "body": "<p>You could try using <a href=\"https://bitbucket.org/snippets/frostbane/aAjxM\" rel=\"nofollow noreferrer\">https://bitbucket.org/snippets/frostbane/aAjxM</a>.</p>\n\n<pre><code>my.namespace.ColorEnum = new Enum(\n    \"RED = 0\",\n    \"GREEN\",\n    \"BLUE\"\n)\n</code></pre>\n\n<p>It should work up to ie8.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 4910883,
      "name": "mika",
      "reputation": 61
    }
  },
  {
    "soID": 31733623,
    "parentID": 22343224,
    "url": "https://stackoverflow.com/q/31733623",
    "title": null,
    "body": "<p>Npm allows installing newer version of a package than the one specified. Using tilde (~) gives you bug fix releases and caret (^) gives you backwards compatible new functionality as well. </p>\n\n<p>The problem is old versions usually don't receive bug fixes that much, so npm uses caret (^) as the default for <code>--save</code>.</p>\n\n<blockquote>\n  <p><img src=\"https://bytearcher.com/articles/semver-explained-why-theres-a-caret-in-my-package-json/promopics/1-table-semver-plain.png\" alt=\"semver table\"></p>\n</blockquote>\n\n<p>According to: <a href=\"http://bytearcher.com/articles/semver-explained-why-theres-a-caret-in-my-package-json/\" rel=\"noreferrer\">\"Semver explained - why there's a caret (^) in my package.json?\"</a>.</p>\n\n<p>Note that the rules apply to versions above 1.0.0 and not every project follows semantic versioning.</p>\n\n<p>Here's a visual explanation of the concepts:</p>\n\n<blockquote>\n  <p><img src=\"https://bytearcher.com/goodies/semantic-versioning-cheatsheet/wheelbarrel-with-tilde-caret-white-bg-w1000.jpg\" alt=\"semver diagram\"></p>\n</blockquote>\n\n<p>Source: <a href=\"http://bytearcher.com/goodies/semantic-versioning-cheatsheet/\" rel=\"noreferrer\">\"Semantic Versioning Cheatsheet\"</a>.</p>\n",
    "score": 178,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5032692,
      "name": "pspi",
      "reputation": 2584
    }
  },
  {
    "soID": 42807930,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/42807930",
    "title": null,
    "body": "<p>It works well: </p>\n\n<pre><code>console.table()\n</code></pre>\n\n<p>Read more here: <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/Console/table\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/pt-BR/docs/Web/API/Console/table</a></p>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5044606,
      "name": "pedro",
      "reputation": 17
    }
  },
  {
    "soID": 32942762,
    "parentID": 5515310,
    "url": "https://stackoverflow.com/q/32942762",
    "title": null,
    "body": "<p><em>To check Default Value</em></p>\n\n<pre><code>function typeOfVar (obj) {\n      return {}.toString.call(obj).split(' ')[1].slice(0, -1).toLowerCase();\n}\nfunction isVariableHaveDefaltVal(variable) {\n    if ( typeof(variable) === 'string' ) {  // number, boolean, string, object \n        console.log(' Any data Between single/double Quotes is treated as String ');        \n        return (variable.trim().length === 0) ? true : false;\n    }else if ( typeof(variable) === 'boolean' ) {\n      console.log('boolean value with default value \\'false\\'');\n        return (variable === false) ? true : false;\n    }else if ( typeof(variable) === 'undefined' ) {\n        console.log('EX: var a; variable is created, but has the default value of undefined.'); \n        return true;\n    }else if ( typeof(variable) === 'number' ) { \n        console.log('number : '+variable);\n        return (variable === 0 ) ? true : false;\n    }else if ( typeof(variable) === 'object' ) {\n   //   -----Object-----\n        if (typeOfVar(variable) === 'array' &amp;&amp; variable.length === 0) {\n            console.log('\\t Object Array with length = ' + [].length); // Object.keys(variable)\n            return true;\n        }else if (typeOfVar(variable) === 'string' &amp;&amp; variable.length === 0 ) {\n            console.log('\\t Object String with length = ' + variable.length);\n            return true;\n        }else if (typeOfVar(variable) === 'boolean' ) {\n            console.log('\\t Object Boolean = ' + variable);\n            return (variable === false) ? true : false;\n        }else if (typeOfVar(variable) === 'number' ) {\n            console.log('\\t Object Number = ' + variable);\n            return (variable === 0 ) ? true : false;\n        }else if (typeOfVar(variable) === 'regexp' &amp;&amp; variable.source.trim().length === 0 ) {\n       console.log('\\t Object Regular Expression : ');\n        return true;\n        }else if (variable === null) {\n       console.log('\\t Object null value');\n        return true;\n        }\n    }\n    return false;\n}\nvar str = \"A Basket For Every Occasion\";\nstr = str.replace(/\\s/g, \"-\");\n//The \"g\" flag in the regex will cause all spaces to get replaced.\n</code></pre>\n\n<p>check Result:</p>\n\n<pre><code>isVariableHaveDefaltVal(' '); // string          \nisVariableHaveDefaltVal(false); // boolean       \nvar a;           \nisVariableHaveDefaltVal(a);               \nisVariableHaveDefaltVal(0); // number             \nisVariableHaveDefaltVal(parseInt('')); // NAN isNAN(' '); - true         \nisVariableHaveDefaltVal(null);              \nisVariableHaveDefaltVal([]);               \nisVariableHaveDefaltVal(/ /);              \nisVariableHaveDefaltVal(new Object(''));               \nisVariableHaveDefaltVal(new Object(false));            \nisVariableHaveDefaltVal(new Object(0)); \ntypeOfVar( function() {} );\n</code></pre>\n\n<p>I used @Vix function() to check the object of which type.</p>\n\n<p>using instansof «</p>\n\n<pre><code>var prototypes_or_Literals = function (obj) {\n    switch (typeof(obj)) {\n        // object prototypes\n        case 'object':\n            if (obj instanceof Array)\n                return '[object Array]';\n            else if (obj instanceof Date)\n                return '[object Date]';\n            else if (obj instanceof RegExp)\n                return '[object regexp]';\n            else if (obj instanceof String)\n                return '[object String]';\n            else if (obj instanceof Number)\n                return '[object Number]';\n\n            else\n                return 'object';\n        // object literals\n        default:\n            return typeof(obj);\n    }   \n};\noutput test «\nprototypes_or_Literals( '' ) // \"string\"\nprototypes_or_Literals( new String('') ) // \"[object String]\"\nObject.prototype.toString.call(\"foo bar\") //\"[object String]\"        \n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5081877,
      "name": "Yash",
      "reputation": 1502
    }
  },
  {
    "soID": 40701471,
    "parentID": 1470488,
    "url": "https://stackoverflow.com/q/40701471",
    "title": null,
    "body": "<p>I see people are confused when declaring variables with or without <strong>var</strong> and inside or outside the function. Here is a deep example that will walk you through these steps:</p>\n\n<p><a href=\"https://jsfiddle.net/ozkantarik/L0avu6vh/\" rel=\"nofollow noreferrer\">See the script below in action here at jsfiddle</a></p>\n\n<pre><code>a = 1;// Defined outside the function without var\nvar b = 1;// Defined outside the function with var\nalert(\"Starting outside of all functions... \\n \\n a, b defined but c, d not defined yet: \\n a:\" + a + \"\\n b:\" + b + \"\\n \\n (If I try to show the value of the undefined c or d, console.log would throw 'Uncaught ReferenceError: c is not defined' error and script would stop running!)\");\n\nfunction testVar1(){\n    c = 1;// Defined inside the function without var\n    var d = 1;// Defined inside the function with var\n    alert(\"Now inside the 1. function: \\n a:\" + a + \"\\n b:\" + b + \"\\n c:\" + c + \"\\n d:\" + d);\n\n    a = a + 5;\n    b = b + 5;\n    c = c + 5;\n    d = d + 5;\n\n    alert(\"After added values inside the 1. function: \\n a:\" + a + \"\\n b:\" + b + \"\\n c:\" + c + \"\\n d:\" + d);\n};\n\n\ntestVar1();\nalert(\"Run the 1. function again...\");\ntestVar1();\n\nfunction testVar2(){\n    var d = 1;// Defined inside the function with var\n    alert(\"Now inside the 2. function: \\n a:\" + a + \"\\n b:\" + b + \"\\n c:\" + c + \"\\n d:\" + d);\n\n    a = a + 5;\n    b = b + 5;\n    c = c + 5;\n    d = d + 5;\n\n    alert(\"After added values inside the 2. function: \\n a:\" + a + \"\\n b:\" + b + \"\\n c:\" + c + \"\\n d:\" + d);\n};\n\ntestVar2();\n\nalert(\"Now outside of all functions... \\n \\n Final Values: \\n a:\" + a + \"\\n b:\" + b + \"\\n c:\" + c + \"\\n You will not be able to see d here because then the value is requested, console.log would throw error 'Uncaught ReferenceError: d is not defined' and script would stop. \\n \");\nalert(\"**************\\n Conclusion \\n ************** \\n \\n 1. No matter declared with or without var (like a, b) if they get their value outside the function, they will preserve their value and also any other values that are added inside various functions through the script are preserved.\\n 2. If the variable is declared without var inside a function (like c), it will act like the previous rule, it will preserve its value across all functions from now on. Either it got its first value in function testVar1() it still preserves the value and get additional value in function testVar2() \\n 3. If the variable is declared with var inside a function only (like d in testVar1 or testVar2) it will will be undefined whenever the function ends. So it will be temporary variable in a function.\");\nalert(\"Now check console.log for the error when value d is requested next:\");\nalert(d);\n</code></pre>\n\n<blockquote>\n  <p><strong>Conclusion</strong> </p>\n  \n  <ol>\n  <li>No matter declared with or without var (like a, b) if they get their value outside the function, they will preserve their value and also any other values that are added inside various functions through the script are preserved.</li>\n  <li>If the variable is declared without var inside a function (like c), it will act like the previous rule, it will preserve its value across all functions from now on. Either it got its first value in function testVar1() it still preserves the value and get additional value in function testVar2() </li>\n  <li>If the variable is declared with var inside a function only (like d in testVar1 or testVar2) it will will be undefined whenever the function ends. So it will be temporary variable in a function.</li>\n  </ol>\n</blockquote>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5105831,
      "name": "Tarik",
      "reputation": 1165
    }
  },
  {
    "soID": 40417603,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/40417603",
    "title": null,
    "body": "<p>First of all, understand whats wrong with this code.</p>\n\n<pre><code>var funcs = [];\nfor (var i = 0; i &lt; 3; i++) {          // let's create 3 functions\n    funcs[i] = function() {            // and store them in funcs\n        console.log(\"My value: \" + i); // each should log its value.\n    };\n}\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();                        // and now let's run each one to see\n}\n</code></pre>\n\n<p>here when the <code>funcs[]</code> array is being initialized, <code>i</code> is being incremented, the funcs array is initialized and the size of <code>func</code> array becomes 3,  so <code>i = 3,</code>. \nNow when the <code>funcs[j]()</code> is called, it is again using the <code>variable i</code>, which has already been incremented to 3.</p>\n\n<p>Now to solve this, we have many options. Below are two of them.</p>\n\n<ol>\n<li>We can initialize <code>i</code> with <code>let</code> or initialize a new variable <code>index</code> with <code>let</code> and make it equal to <code>i</code>. so when the call is being made, <code>index</code> will be used and its scope will end after initialization. And for calling, <code>index</code> will be initialized again.</li>\n</ol>\n\n<p>.</p>\n\n<pre><code>var funcs = [];\nfor (var i = 0; i &lt; 3; i++) {          \n    let index = i;\n    funcs[i] = function() {            \n        console.log(\"My value: \" + index); \n    };\n}\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();                        \n}\n</code></pre>\n\n<ol start=\"2\">\n<li>Other Option can be to introduce a <code>tempFunc</code> which returns the actual function.</li>\n</ol>\n\n<p>.</p>\n\n<pre><code>var funcs = [];\nfunction tempFunc(i){\n    return function(){\n     console.log(\"My value: \" + i);\n    };\n}\nfor (var i = 0; i &lt; 3; i++) {  \n    funcs[i] = tempFunc(i);                                     \n\n}\nfor (var j = 0; j &lt; 3; j++) {\n    funcs[j]();                        \n}\n</code></pre>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5113666,
      "name": "Ali Kahoot",
      "reputation": 349
    }
  },
  {
    "soID": 37377921,
    "parentID": 9682092,
    "url": "https://stackoverflow.com/q/37377921",
    "title": null,
    "body": "<p>Obviously there is no periodic checking of <code>Scope</code> whether there is any change in the Objects attached to it. Not all the objects attached to scope are watched . Scope prototypically maintains a <strong>$$watchers</strong> . <code>Scope</code> only iterates through this <code>$$watchers</code> when <code>$digest</code> is called . </p>\n\n<p>Angular adds a watcher to the $$watchers for each of these </p>\n\n<blockquote>\n  <ol>\n  <li>{{expression}} — In your templates (and anywhere else where there’s an expression) or when we define ng-model. <br></li>\n  <li>$scope.$watch(‘expression/function’) — In your JavaScript we can just attach a scope object for angular to watch. </li>\n  </ol>\n</blockquote>\n\n<p><strong>$watch</strong> function takes in three parameters:<br></p>\n\n<blockquote>\n  <ol>\n  <li><p>First one is a watcher function which just returns the object or we can just add an expression. <br></p></li>\n  <li><p>Second one is a listener function which will be called when there is a change in the object. All the things like DOM changes will be implemented in this function.<br></p></li>\n  <li><p>The third being an optional parameter which takes in a boolean . If its true , angular deep watches the object &amp; if its false Angular just does a reference watching on the object.\n    Rough Implementation of $watch looks like this </p></li>\n  </ol>\n</blockquote>\n\n<pre><code>Scope.prototype.$watch = function(watchFn, listenerFn) {\n   var watcher = {\n       watchFn: watchFn,\n       listenerFn: listenerFn || function() { },\n       last: initWatchVal  // initWatchVal is typically undefined\n   };\n   this.$$watchers.push(watcher); // pushing the Watcher Object to Watchers  \n};\n</code></pre>\n\n<p>There is an interesting thing in Angular called Digest Cycle. The $digest cycle starts as a result of a call to $scope.$digest(). Assume that you change a $scope model in a handler function through the ng-click directive. In that case AngularJS automatically triggers a $digest cycle by calling $digest().In addition to ng-click, there are several other built-in directives/services that let you change models (e.g. ng-model, $timeout, etc) and automatically trigger a $digest cycle.  The rough implementation of $digest looks like this.</p>\n\n<pre><code>Scope.prototype.$digest = function() {\n      var dirty;\n      do {\n          dirty = this.$$digestOnce();\n      } while (dirty);\n}\nScope.prototype.$$digestOnce = function() {\n   var self = this;\n   var newValue, oldValue, dirty;\n   _.forEach(this.$$watchers, function(watcher) {\n          newValue = watcher.watchFn(self);\n          oldValue = watcher.last;   // It just remembers the last value for dirty checking\n          if (newValue !== oldValue) { //Dirty checking of References \n   // For Deep checking the object , code of Value     \n   // based checking of Object should be implemented here\n             watcher.last = newValue;\n             watcher.listenerFn(newValue,\n                  (oldValue === initWatchVal ? newValue : oldValue),\n                   self);\n          dirty = true;\n          }\n     });\n   return dirty;\n };\n</code></pre>\n\n<p>If we use JavaScript’s <strong>setTimeout()</strong> function to update a scope model, Angular has no way of knowing what you might change. In this case it’s our responsibility to call $apply() manually, which triggers a $digest cycle. Similarly, if you have a directive that sets up a DOM event listener and changes some models inside the handler function, you need to call $apply() to ensure the changes take effect. The big idea of $apply is that we can execute some code that isn't aware of Angular, that code may still change things on the scope. If we wrap that code in $apply , it will take care of calling $digest(). Rough implementation of $apply().</p>\n\n<pre><code>Scope.prototype.$apply = function(expr) {\n       try {\n         return this.$eval(expr); //Evaluating code in the context of Scope\n       } finally {\n         this.$digest();\n       }\n};\n</code></pre>\n",
    "score": 13,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5173119,
      "name": "Sasank Sunkavalli",
      "reputation": 715
    }
  },
  {
    "soID": 38854309,
    "parentID": 5062614,
    "url": "https://stackoverflow.com/q/38854309",
    "title": null,
    "body": "<p>I can share few points where&amp;why to use node js.</p>\n\n<ol>\n<li>For realtime applications like chat,collaborative editing better we go with nodejs as it is event base where fire event and data to clients from server. </li>\n<li>Simple and easy to understand as it is javascript base where most of people have idea.</li>\n<li>Most of current web applications going towards  angular js&amp;backbone, with node it is easy to interact with client side code as both will use json data. </li>\n<li>Lot of plugins available.</li>\n</ol>\n\n<p>Drawbacks:-</p>\n\n<ol>\n<li>Node will support most of databases but best is mongodb which won't support complex joins and others.</li>\n<li>Compilation Errors...developer should handle each and every exceptions other wise if any error accord application will stop working  where again we need to go and start it manually or using  any automation tool. </li>\n</ol>\n\n<p>Conclusion:- \nNodejs best to use for simple and real time applications..if you have very big business logic and complex functionality better should not use nodejs.\nIf you want to build an application along with chat and any collaborative functionality.. node can be used in specific parts and remain should go with your convenience technology.</p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5293976,
      "name": "BEJGAM SHIVA PRASAD",
      "reputation": 396
    }
  },
  {
    "soID": 43219800,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/43219800",
    "title": null,
    "body": "<p>If you need this to work in a textarea the accepted solution will not work.</p>\n\n<p><code>&lt;textarea id='textarea'&gt;&lt;/textarea&gt;</code></p>\n\n<p><code>$(\"#textarea\").append(formatJSON(JSON.stringify(jsonobject),true));</code>   </p>\n\n<pre><code>function formatJSON(json,textarea) {\n    var nl;\n    if(textarea) {\n        nl = \"&amp;#13;&amp;#10;\";\n    } else {\n        nl = \"&lt;br&gt;\";\n    }\n    var tab = \"&amp;#160;&amp;#160;&amp;#160;&amp;#160;\";\n    var ret = \"\";\n    var numquotes = 0;\n    var betweenquotes = false;\n    var firstquote = false;\n    for (var i = 0; i &lt; json.length; i++) {\n        var c = json[i];\n        if(c == '\"') {\n            numquotes ++;\n            if((numquotes + 2) % 2 == 1) {\n                betweenquotes = true;\n            } else {\n                betweenquotes = false;\n            }\n            if((numquotes + 3) % 4 == 0) {\n                firstquote = true;\n            } else {\n                firstquote = false;\n            }\n        }\n\n        if(c == '[' &amp;&amp; !betweenquotes) {\n            ret += c;\n            ret += nl;\n            continue;\n        }\n        if(c == '{' &amp;&amp; !betweenquotes) {\n            ret += tab;\n            ret += c;\n            ret += nl;\n            continue;\n        }\n        if(c == '\"' &amp;&amp; firstquote) {\n            ret += tab + tab;\n            ret += c;\n            continue;\n        } else if (c == '\"' &amp;&amp; !firstquote) {\n            ret += c;\n            continue;\n        }\n        if(c == ',' &amp;&amp; !betweenquotes) {\n            ret += c;\n            ret += nl;\n            continue;\n        }\n        if(c == '}' &amp;&amp; !betweenquotes) {\n            ret += nl;\n            ret += tab;\n            ret += c;\n            continue;\n        }\n        if(c == ']' &amp;&amp; !betweenquotes) {\n            ret += nl;\n            ret += c;\n            continue;\n        }\n        ret += c;\n    } // i loop\n    return ret;\n}\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5361412,
      "name": "Kolob Canyon",
      "reputation": 544
    }
  },
  {
    "soID": 41891156,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/41891156",
    "title": null,
    "body": "<p>You can use <a href=\"https://github.com/sebmarkbage/ecmascript-rest-spread\" rel=\"noreferrer\">object spread properties</a>—currently a stage 3 ECMAScript proposal.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"true\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const obj1 = { food: 'pizza', car: 'ford' };\r\nconst obj2 = { animal: 'dog' };\r\n\r\nconst obj3 = { ...obj1, ...obj2 };\r\nconsole.log(obj3);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 15,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 45223653,
    "parentID": 4351521,
    "url": "https://stackoverflow.com/q/45223653",
    "title": null,
    "body": "<p>I've created for my need very simple module: <a href=\"https://www.npmjs.com/package/get-arguments\" rel=\"nofollow noreferrer\"><strong>get-arguments</strong></a>. It returns an object with <code>command</code> and <code>args</code> properties passed in command line by user. It recognize <code>-f</code> and <code>--flag</code> and values attached to them and behaves similarly to eg. npm cli commands and their arguments.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5388390,
      "name": "Paweł",
      "reputation": 853
    }
  },
  {
    "soID": 41760841,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/41760841",
    "title": null,
    "body": "<p>Use closure structure, this would reduce your extra for loop. You can do it in single for loop.</p>\n\n<pre><code>var funcs = [];\nfor (var i = 0; i &lt; 3; i++) {     \n  (funcs[i] = function() {         \n    console.log(\"My value: \" + i); \n  })(i);\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5413192,
      "name": "Vikash Singh",
      "reputation": 58
    }
  },
  {
    "soID": 41345925,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/41345925",
    "title": null,
    "body": "<p>imagine you have this array below: </p>\n\n<pre><code>var arr = [1,2,3,4,5];\n</code></pre>\n\n<p>Javascript (new and older browsers):</p>\n\n<pre><code>function isArray(arr) {\n  return arr.constructor.toString().indexOf(\"Array\") &gt; -1;\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>function isArray(arr) {\n  return arr instanceof Array;\n}\n</code></pre>\n\n<p>or </p>\n\n<pre><code>function isArray(arr) {\n  return Object.prototype.toString.call(arr) === '[object Array]';\n}\n</code></pre>\n\n<p>then call it like this:</p>\n\n<pre><code>isArray(arr);\n</code></pre>\n\n<p>Javascript (IE9+, Ch5+, FF4+, Saf5+, Opera10.5+) </p>\n\n<pre><code>Array.isArray(arr);\n</code></pre>\n\n<p>jQuery:</p>\n\n<pre><code>$.isArray(arr);\n</code></pre>\n\n<p>Angular:</p>\n\n<pre><code>angular.isArray(arr);\n</code></pre>\n\n<p>Underscore and Lodash:</p>\n\n<pre><code>_.isArray(arr);\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 43888738,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/43888738",
    "title": null,
    "body": "<p><strong>OK,</strong> for example you having the Array below:</p>\n\n<pre><code>var num = [1, 2, 3, 4, 5];\n</code></pre>\n\n<p>And we want to delete number 4, you can simply do the below code:</p>\n\n<pre><code>num.splice(num.indexOf(4), 1); //num will be [1, 2, 3, 5];\n</code></pre>\n\n<p>If you reusing this function, you write a reusable function which will be attached to Native array function like below:</p>\n\n<pre><code>Array.prototype.remove = Array.prototype.remove || function(x) {\n  this.splice(this.indexOf(x), 1); //num.remove(5) === [1, 2, 3];\n}\n</code></pre>\n\n<p>But how about if you having the below array instead with few [5] in the Array?</p>\n\n<pre><code>var num = [5, 6, 5, 4, 5, 1, 5];\n</code></pre>\n\n<p>We need a loop to check, so we can write a function which use filter like below instead:</p>\n\n<pre><code>var _removeValue = function(arr, x) {\n  return arr.filter(function(n){ return n!==x });\n  //_removeValue([1, 2, 3, 4, 5, 5, 6, 5], 5) //return [1, 2, 3, 4, 6]\n}\n</code></pre>\n\n<p>Also there are third parties libraries which do help you to do this, like Lodash or Underscore, for more info look at lodash _.pull, _.pullAt or _.without.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 43895482,
    "parentID": 9329446,
    "url": "https://stackoverflow.com/q/43895482",
    "title": null,
    "body": "<p>There are <strong>a few ways</strong> to loop through an array in JavaScript, as below:</p>\n\n<p><strong>for</strong> - it's the most common one. Full block of code for looping<br></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var languages = [\"JAVA\", \"JavaScript\", \"C#\", \"Python\"];\r\nvar i, len, text;\r\nfor (i = 0, len = languages.length, text = \"\"; i &lt; len; i++) {\r\n    text += languages[i] + \"&lt;br&gt;\";\r\n}\r\ndocument.getElementById(\"example\").innerHTML = text;</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p id=\"example\"&gt;&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>while</strong> - loop while a condition is through. It seems to be the fastest loop<br></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var text = \"\";\r\nvar i = 0;\r\nwhile (i &lt; 10) {\r\n    text +=  i + \") something&lt;br&gt;\";\r\n    i++;\r\n}\r\ndocument.getElementById(\"example\").innerHTML = text;</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p id=\"example\"&gt;&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>do/while</strong> - also loop through a block of code while the condition is true<br></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var text = \"\"\r\nvar i = 0;\r\ndo {\r\n    text += i + \") something &lt;br&gt;\";\r\n    i++;\r\n}\r\nwhile (i &lt; 10);\r\ndocument.getElementById(\"example\").innerHTML = text;</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p id=\"example\"&gt;&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>Asynchronous loops</strong> - forEach, map function, filter, also reduce (they loop through the function, but used if you need to do something with your arraym, etc.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// For example, in this case we loop through the number and double them up using the map function\r\nvar numbers = [65, 44, 12, 4];\r\ndocument.getElementById(\"example\").innerHTML = numbers.map(function(num){return num * 2});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p id=\"example\"&gt;&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>For more information and examples about asynchronous functions on arrays, look at the blog post <em><a href=\"http://cryto.net/~joepie91/blog/2015/05/04/functional-programming-in-javascript-map-filter-reduce/\" rel=\"nofollow noreferrer\">Functional programming in JavaScript: map, filter and reduce</a></em>.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 44631269,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/44631269",
    "title": null,
    "body": "<p>How about something like this for shorter text? </p>\n\n<p>It could even works for longer characters if you do something loop and repeating over the characters with javascript, anyway the result is something like this:</p>\n\n<p><a href=\"https://i.stack.imgur.com/IjKUY.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/IjKUY.png\" alt=\"Is it possible to apply CSS to half of a character?\"></a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>p.char {\r\n  position: relative;\r\n  display: inline-block;\r\n  font-size: 60px;\r\n  color: red;\r\n}\r\n\r\np.char:before {\r\n  position: absolute;\r\n  content: attr(char);\r\n  width: 50%;\r\n  overflow: hidden;\r\n  color: black;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p class=\"char\" char=\"S\"&gt;S&lt;/p&gt;\r\n&lt;p class=\"char\" char=\"t\"&gt;t&lt;/p&gt;\r\n&lt;p class=\"char\" char=\"a\"&gt;a&lt;/p&gt;\r\n&lt;p class=\"char\" char=\"c\"&gt;c&lt;/p&gt;\r\n&lt;p class=\"char\" char=\"k\"&gt;k&lt;/p&gt;\r\n&lt;p class=\"char\" char=\"o\"&gt;o&lt;/p&gt;\r\n&lt;p class=\"char\" char=\"v\"&gt;v&lt;/p&gt;\r\n&lt;p class=\"char\" char=\"e\"&gt;e&lt;/p&gt;\r\n&lt;p class=\"char\" char=\"r\"&gt;r&lt;/p&gt;\r\n&lt;p class=\"char\" char=\"f\"&gt;f&lt;/p&gt;\r\n&lt;p class=\"char\" char=\"l\"&gt;l&lt;/p&gt;\r\n&lt;p class=\"char\" char=\"o\"&gt;o&lt;/p&gt;\r\n&lt;p class=\"char\" char=\"w\"&gt;w&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 44084113,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/44084113",
    "title": null,
    "body": "<p>I see most of the answers here are not accurate as they should be, they check element length, it can be correct in many cases, but not 100%, imagine if number pass to the function instead, so I prototype a function which check all conditions and return the answer as it should be:</p>\n\n<pre><code>$.fn.exists = $.fn.exists || function() { \n  return !!(this.length &amp;&amp; (this[0] instanceof HTMLDocument || this[0] instanceof HTMLElement)); \n}\n</code></pre>\n\n<p>This will check both length and type, Now you can check it this way:</p>\n\n<pre><code>$(1980).exists(); //return false\n$([1,2,3]).exists(); //return false\n$({name: 'stackoverflow', url: 'http://www.stackoverflow.com'}).exists(); //return false\n$([{nodeName: 'foo'}]).exists() // returns false\n$('div').exists(); //return true\n$('.header').exists(); //return true\n$(document).exists(); //return true\n$('body').exists(); //return true\n</code></pre>\n",
    "score": 9,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 44113082,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/44113082",
    "title": null,
    "body": "<p>\"use strict\" makes JavaScript code to run in a <code>strict mode</code>, which basically means everything need to be defined before using them, the  main reason for <code>strict mode</code> is avoiding accidental global usages of any <code>undefined</code> methods.</p>\n\n<p>Also in strict mode, things run faster, some warning or silents warnings, throw fatal errors, it's better always use it to make a neater code.</p>\n\n<p>\"use strict\" is widely need to be used in ECMA5, <strong>in ECMA6 it's part of javascript by default</strong>, so don't need to be added if you using ES6.</p>\n\n<p>Look at these statements and examples from MDN:</p>\n\n<blockquote>\n  <p><strong>The \"use strict\" Directive</strong><br> The \"use strict\" directive is new in\n  JavaScript 1.8.5 (ECMAScript version 5). It is not a statement, but a\n  literal expression, ignored by earlier versions of JavaScript. The\n  purpose of \"use strict\" is to indicate that the code should be\n  executed in \"strict mode\". With strict mode, you can not, for example,\n  use undeclared variables.</p>\n  \n  <p><strong>Examples of using \"use strict\":</strong><br>\n  Strict mode for functions: Likewise, to invoke strict mode for a\n  function, put the exact statement \"use strict\"; (or 'use strict';) in\n  the function's body before any other statements.</p>\n</blockquote>\n\n<p><strong>1) strict mode in functions</strong> </p>\n\n<pre><code> function strict() {\n      // Function-level strict mode syntax\n      'use strict';\n      function nested() { return 'And so am I!'; }\n      return \"Hi!  I'm a strict mode function!  \" + nested();\n    }\n    function notStrict() { return \"I'm not strict.\"; }\n\n    console.log(strict(), notStrict());\n</code></pre>\n\n<p><strong>2) whole-script strict mode</strong> </p>\n\n<pre><code>'use strict';\nvar v = \"Hi! I'm a strict mode script!\";\nconsole.log(v);\n</code></pre>\n\n<p><strong>3) Assignment to a non-writable global</strong></p>\n\n<pre><code>'use strict';\n\n// Assignment to a non-writable global\nvar undefined = 5; // throws a TypeError\nvar Infinity = 5; // throws a TypeError\n\n// Assignment to a non-writable property\nvar obj1 = {};\nObject.defineProperty(obj1, 'x', { value: 42, writable: false });\nobj1.x = 9; // throws a TypeError\n\n// Assignment to a getter-only property\nvar obj2 = { get x() { return 17; } };\nobj2.x = 5; // throws a TypeError\n\n// Assignment to a new property on a non-extensible object\nvar fixed = {};\nObject.preventExtensions(fixed);\nfixed.newProp = 'ohai'; // throws a TypeError\n</code></pre>\n\n<p>For more info, visit this page <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" rel=\"nofollow noreferrer\">here</a></p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 44243730,
    "parentID": 195951,
    "url": "https://stackoverflow.com/q/44243730",
    "title": null,
    "body": "<p>OK, I think in this case you should use jQuery or write your own Methods in pure javascript, my preference is adding my own methods rather than injecting all jQuery to my application if I don't need that for other reasons.</p>\n\n<p>I'd like to do something like below as methods to my javascript framework to add few functionalities which handle adding classes, deleting classes, etc similar to jQuery, this is fully supported in IE9+, also my code is written in ES6, so you need to make sure your browser support it or you using something like babel, otherwise need to use ES5 syntax in your code, also in this way, we finding element via ID, which means the element needs to have an ID to be selected:</p>\n\n<pre><code>//simple javascript utils for class management in ES6\nvar classUtil = {\n\n  addClass: (id, cl) =&gt; {\n    document.getElementById(id).classList.add(cl);\n  },\n\n  removeClass: (id, cl) =&gt; {\n    document.getElementById(id).classList.remove(cl);\n  },\n\n  hasClass: (id, cl) =&gt; {\n    return document.getElementById(id).classList.contains(cl);\n  },\n\n  toggleClass: (id, cl) =&gt; {\n    document.getElementById(id).classList.toggle(cl);\n  }\n\n}\n</code></pre>\n\n<p>and you can simply call use them as below, imagine your element has id of 'id' and class of 'class', make sure you pass them as a string, you can use the util as below:</p>\n\n<pre><code>classUtil.addClass('myId', 'myClass');\nclassUtil.removeClass('myId', 'myClass');\nclassUtil.hasClass('myId', 'myClass');\nclassUtil.toggleClass('myId', 'myClass');\n</code></pre>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5423108,
      "name": "Alireza",
      "reputation": 5956
    }
  },
  {
    "soID": 41407737,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/41407737",
    "title": null,
    "body": "<p>If you need a deep merge that will also \"merge\" arrays by concatenating them in the result, then this ES6 function might be what you need:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function deepMerge(a, b) {\r\n    // If neither is an object, return one of them:\r\n    if (Object(a) !== a &amp;&amp; Object(b) !== b) return b || a;\r\n    // Replace remaining primitive by empty object/array\r\n    if (Object(a) !== a) a = Array.isArray(b) ? [] : {};\r\n    if (Object(b) !== b) b = Array.isArray(a) ? [] : {};\r\n    // Treat arrays differently:\r\n    if (Array.isArray(a) &amp;&amp; Array.isArray(b)) {\r\n        // Merging arrays is interpreted as concatenation of their deep clones:\r\n        return [...a.map(v =&gt; deepMerge(v)), ...b.map(v =&gt; deepMerge(v))];\r\n    } else {\r\n        // Get the keys that exist in either object\r\n        var keys = new Set([...Object.keys(a),...Object.keys(b)]);\r\n        // Recurse and assign to new object\r\n        return Object.assign({}, ...Array.from(keys,\r\n            key =&gt; ({ [key]: deepMerge(a[key], b[key]) }) ));\r\n    }\r\n}\r\n\r\n// Sample data for demo:\r\nvar a = {\r\n    groups: [{\r\n        group: [{\r\n            name: 'John',\r\n            age: 12\r\n        },{\r\n            name: 'Mary',\r\n            age: 20\r\n        }],\r\n        groupName: 'Pair'\r\n    }],\r\n    config: {\r\n        color: 'blue',\r\n        range: 'far'\r\n    }\r\n};\r\n\r\n\r\nvar b = {\r\n    groups: [{\r\n        group: [{\r\n            name: 'Bill',\r\n            age: 15\r\n        }],\r\n        groupName: 'Loner'\r\n    }],\r\n    config: {\r\n        range: 'close',\r\n        strength: 'average'\r\n    }\r\n};\r\n\r\nvar merged = deepMerge(a, b);\r\n\r\nconsole.log(merged);</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper { max-height: 100% !important; top: 0; }</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Note that if only one argument is passed to this function, it acts as a deep clone function.</p>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 42353210,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/42353210",
    "title": null,
    "body": "<p>Just wanted to add some more points.</p>\n\n<p>The Reason to Use Strict Mode---></p>\n\n<ul>\n<li><p>Strict mode makes it easier to write \"secure\" JavaScript.</p></li>\n<li><p>Strict mode changes previously accepted \"bad syntax\" into real<br>\nerrors.</p></li>\n<li><p>As an example, in normal JavaScript, mistyping a variable name<br>\ncreates a new global variable.</p></li>\n<li><p>In strict mode, this will throw an       error, making it impossible\nto accidentally create a global variable.</p></li>\n<li><p>In strict mode, any assignment to a non-writable property, a<br>\ngetter-only property, a non-existing property, a non-existing<br>\nvariable, or a non-existing object, will throw an error.</p></li>\n</ul>\n\n<p>The things that will throw errors in Strict Mode\nUsing a variable, without declaring it, is not allowed:</p>\n\n<pre><code>\"use strict\";\n x = 3.14;                // This will cause an error\n</code></pre>\n\n<p>Objects are variables too.</p>\n\n<p>Using an object, without declaring it, is not allowed:</p>\n\n<pre><code>  \"use strict\";\n  x = {p1:10, p2:20};      // This will cause an error\n</code></pre>\n\n<p>Deleting a variable (or object) is not allowed.</p>\n\n<pre><code>  \"use strict\";\n   var x = 3.14;\n   delete x;                // This will cause an error\n</code></pre>\n\n<p>For security reasons, eval() is not allowed to create variables in the scope from which it was called:</p>\n\n<pre><code>\"use strict\";\n eval (\"var x = 2\");\n alert (x);               // This will cause an error\n</code></pre>\n\n<p>In function calls like f(), the this value was the global object. In strict mode, it is now undefined.</p>\n\n<p>\"use strict\"  is only recognized at the beginning of a script.</p>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5471920,
      "name": "Adds",
      "reputation": 182
    }
  },
  {
    "soID": 39069120,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/39069120",
    "title": null,
    "body": "<p>Small example to compare:</p>\n\n<p>Non-strict mode:</p>\n\n<pre><code>for (i of [1,2,3]) console.log(i)\n\n// output:\n// 1\n// 2\n// 3\n</code></pre>\n\n<p>Strict mode:</p>\n\n<pre><code>'use strict';\nfor (i of [1,2,3]) console.log(i)\n\n// output:\n// Uncaught ReferenceError: i is not defined\n</code></pre>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5606916,
      "name": "Tân Nguyễn",
      "reputation": 1
    }
  },
  {
    "soID": 43854346,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/43854346",
    "title": null,
    "body": "<p><strong>2017-05-08</strong></p>\n\n<p>Most of the given answers work for strict comparison, meaning that both objects reference the exact same object in memory (or are primitive types), but often you want to remove a non-primitive object from an array that has a certain value. For instance, if you make a call to a server and want to check a retrieved object against a local object.</p>\n\n<pre><code>const a = {'field': 2} // Non-primitive object\nconst b = {'field': 2} // Non-primitive object with same value\nconst c = a            // Non-primitive object that reference the same object as \"a\"\n\nassert(a !== b) // Don't reference the same item, but have same value\nassert(a === c) // Do reference the same item, and have same value (naturally)\n\n//Note: there are many alternative implementations for valueCompare,\n// this one is versatile but might be too slow.\nfunction valueCompare (x, y) {\n   return  JSON.stringify(x) === JSON.stringify(y)\n}\n\nfunction removeFromArray(arr, toDelete){\n    return arr.filter(target =&gt; {!valueCompare(toDelete, target)})\n}\n\nconst exampleArray = [a, b, b, c, a, {'field': 2}, {'field': 90}];\nconst resultArray = removeFromArray(exampleArray, a);\n\n//resultArray = [{'field':90}]\n</code></pre>\n\n<p>There are alternative methods for valueCompare, but this does the job. You can also use a custom comparator if you have a specific field to check (for example, some retrieved UUID vs a local UUID).</p>\n\n<p>Also note that this is a functional operation, meaning that it does not mutate the original array.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5666034,
      "name": "Aidan Hoolachan",
      "reputation": 414
    }
  },
  {
    "soID": 40088411,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/40088411",
    "title": null,
    "body": "<p>Use Strict is used to show common and repeated errors so that it is handled differently , and changes the way java script runs , such changes are :</p>\n\n<ul>\n<li><p>Prevents accidental globals</p></li>\n<li><p>No duplicates</p></li>\n<li><p>Eliminates with</p></li>\n<li><p>Eliminates this coercion</p></li>\n<li><p>Safer eval()</p></li>\n<li><p>Errors for immutables</p></li>\n</ul>\n\n<p>you can also read this <a href=\"https://www.nczonline.net/blog/2012/03/13/its-time-to-start-using-javascript-strict-mode/\" rel=\"noreferrer\">article</a> for the details </p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5723127,
      "name": "Wesam Ziadat",
      "reputation": 147
    }
  },
  {
    "soID": 35154320,
    "parentID": 203198,
    "url": "https://stackoverflow.com/q/35154320",
    "title": null,
    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var myElement = $('&lt;button/&gt;', {\r\n    text: 'Go to Google!'\r\n});\r\n\r\nmyElement.bind( 'click', goToGoogle);\r\nmyElement.append('body');\r\n\r\n\r\nfunction goToGoogle(event){\r\n  window.location.replace(\"http://www.google.com\");\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5824173,
      "name": "Autumnswind",
      "reputation": 639
    }
  },
  {
    "soID": 43526198,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/43526198",
    "title": null,
    "body": "<h2>The Merge Of JSON Compatible JavaScript Objects</h2>\n\n<p>I encourage the use and utilization of nondestructive methods that don't modify the original source, 'Object.assign' is a <em>destructive method</em> and it also happens to be not so <em>production friendly</em> because it stops working on earlier browsers and you have no way of patching it cleanly, with an alternative.</p>\n\n<p>Merging JS Objects will always be out of reach, or incomplete, whatever the solution. But merging JSON compliant compatible objects is just one step away from being able to write a simple and portable piece of code of a nondestructive method of merging series of JS Objects into a returned master containing all the unique property-names and their corresponding values synthesized in a single master object for the intended purpose.</p>\n\n<p>Having in mind that MSIE8 is the first browser to have added a native support for the JSON object is a great relief, and reusing the already existing technology, is always a welcomed opportunity.</p>\n\n<p>Restricting your code to JSON complant standard objects, is more of an advantage, than a restriction - since these objects can also be transmitted over the Internet. And of course for those who would like a deeper backward compatibility there's always a json plug., whose methods can easily be assigned to a JSON variable in the outer code without having to modify or rewrite the method in use.</p>\n\n<pre><code>function Merge( ){\n    var a = [].slice.call( arguments ), i = 0;\n        while( a[i] )a[i] = JSON.stringify( a[i++] ).slice( 1,-1 );\n        return JSON.parse( \"{\"+ a.join() +\"}\" );\n    }\n</code></pre>\n\n<p>(Of course one can always give it a more meaningful name, which I haven't decided yet; should probably name it JSONmerge)</p>\n\n<p>The use case:</p>\n\n<pre><code>var master = Merge( obj1, obj2, obj3, ...objn );\n</code></pre>\n\n<p>Now, contrary to the <code>Object.assign</code> this leaves all objects untouched and in their original state (in case you've done something wrong and need to reorder the merging objects or be able to use them separately for some other operation before merging them again).</p>\n\n<p>Tthe number of the Merge arguments is also limited <em>only</em> by the arguments length limit [which is huge]. \nThe natively supported JSON parse / stringify is already machine optimized, meaning: it should be faster than any scripted form of JS loop. \nThe iteration over given arguments, is being done using the <code>while</code> - proven to be the fastest loop in JS. </p>\n\n<p>It doesn't harm to briefly mention the fact we already know that duplicate properties of the unique object labels (keys) will be overwritten by the later object containing the same key label, which means you are in control of which property is taking over the previous by simply ordering or reordering the arguments list. And the benefit of getting a clean and updated master object with no dupes as a final output.</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 40035413,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/40035413",
    "title": null,
    "body": "<p>if you have another variable you can access in <strong>\"td\"</strong> tag like that try this way I hope it would be helpful</p>\n\n<pre><code>var table = $('#yourTableId');\nvar text  = 'My Data in td';\nvar image = 'your/image.jpg'; \nvar tr = (\n  '&lt;tr&gt;' +\n    '&lt;td&gt;'+ text +'&lt;/td&gt;'+\n    '&lt;td&gt;'+ text +'&lt;/td&gt;'+\n    '&lt;td&gt;'+\n      '&lt;img src=\"' + image + '\" alt=\"yourImage\"&gt;'+\n    '&lt;/td&gt;'+\n  '&lt;/tr&gt;'\n);\n\n$('#yourTableId').append(tr);\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5906922,
      "name": "MEAbid",
      "reputation": 256
    }
  },
  {
    "soID": 44436254,
    "parentID": 4775722,
    "url": "https://stackoverflow.com/q/44436254",
    "title": null,
    "body": "<p>There's just one line solution for this question</p>\n\n<pre><code>x instanceof Array\n</code></pre>\n\n<p>where x is the variable it will return true if x is an array and false if it is not.</p>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5949657,
      "name": "Vikash Kumar",
      "reputation": 1290
    }
  },
  {
    "soID": 35939565,
    "parentID": 4907843,
    "url": "https://stackoverflow.com/q/35939565",
    "title": null,
    "body": "<p>I use the following and it works very well!!!</p>\n\n<pre><code>window.open(url, '_blank').focus();\n</code></pre>\n",
    "score": 12,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 5984091,
      "name": "Ezequiel García",
      "reputation": 819
    }
  },
  {
    "soID": 38071922,
    "parentID": 5767325,
    "url": "https://stackoverflow.com/q/38071922",
    "title": null,
    "body": "<p>use <a href=\"http://api.jquery.com/jquery.grep/\" rel=\"nofollow\">jQuery.grep()</a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var y = [1, 2, 3, 9, 4]\r\nvar removeItem = 9;\r\n\r\ny = jQuery.grep(y, function(value) {\r\n  return value != removeItem;\r\n});\r\nconsole.log(y)</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6011619,
      "name": "Mahendra Kulkarni",
      "reputation": 682
    }
  },
  {
    "soID": 42521700,
    "parentID": 750486,
    "url": "https://stackoverflow.com/q/42521700",
    "title": null,
    "body": "<p>Maybe its too late to answer this one, but for the sake of people option I want to share my simple answer.</p>\n\n<p>Another solution is, use your code as it is. \nJust use the variable 'i' on the second loop\nsince all the function created pointing on the same 'i' value.</p>\n\n<pre><code>var q_v = [];\n\nfor( var i = 0; i &lt; 3; i++ ){\n    q_v[i] = function(){\n        console.log('Value of i : '+ i);\n    };\n}\n\nconsole.log( i ); // the value of i = 3\n\nfor( var i = 0; i &lt; 3; i++ ){ // update value of i\n    q_v[i](); // on every loop, it will get the new value of 'i'\n}\n</code></pre>\n",
    "score": -1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6099766,
      "name": "Abz Rockers",
      "reputation": 102
    }
  },
  {
    "soID": 38581695,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/38581695",
    "title": null,
    "body": "<p>Yes The best method of doing this :</p>\n\n<p>By <code>JQuery</code> :</p>\n\n<pre><code>if($(\"selector\").length){\n   //code in the case\n}\n</code></pre>\n\n<p><code>selector</code> can be <code>Element</code> <code>ID</code> OR <code>Element</code> <code>Class</code></p>\n\n<p>OR</p>\n\n<p>If you don't want to use <code>jQuery</code> Library then you can achieve this by using Core <code>JavaScript</code> :</p>\n\n<p>By <code>JavaScript</code> :</p>\n\n<pre><code>if(document.getElementById(\"ElementID\")) {\n    //Do something...\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6116564,
      "name": "Sunil Kumar",
      "reputation": 1565
    }
  },
  {
    "soID": 41777052,
    "parentID": 22343224,
    "url": "https://stackoverflow.com/q/41777052",
    "title": null,
    "body": "<p><strong>One liner explanation</strong></p>\n\n<p>The standard versioning system is major.minor.build (e.g. 2.4.1)</p>\n\n<p>npm checks and fixes the version of a particular package based on these characters</p>\n\n<blockquote>\n  <p><strong>~</strong> : major version is fixed, minor version is fixed, matches any build number</p>\n</blockquote>\n\n<p><em>e.g. : ~2.4.1 means it will check for 2.4.x where x is anything</em></p>\n\n<blockquote>\n  <p><strong>^</strong> : major version is fixed, matches any minor version, matches any build number</p>\n</blockquote>\n\n<p><em>e.g. : ^2.4.1 means it will check for 2.x.x where x is anything</em></p>\n",
    "score": 6,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6173350,
      "name": "Avinash",
      "reputation": 1801
    }
  },
  {
    "soID": 40390784,
    "parentID": 287903,
    "url": "https://stackoverflow.com/q/40390784",
    "title": null,
    "body": "<p>The Alien solution is to make things as simple as possible:</p>\n\n<ol>\n<li>use enum keyword (reserved in javascript)</li>\n<li><p>If enum keyword is just reserved but not implemented in your javascript, define the following</p>\n\n<pre><code>const enumerate = spec =&gt; spec.split(/\\s*,\\s*/)\n  .reduce((e, n) =&gt; Object.assign(e,{[n]:n}), {}) \n</code></pre></li>\n</ol>\n\n<p>Now, you can easily use it</p>\n\n<pre><code>const kwords = enumerate(\"begin,end, procedure,if\")\nconsole.log(kwords, kwords.if, kwords.if == \"if\", kwords.undef)\n</code></pre>\n\n<p>I see no reason to make the enum values explicit variables. The scripts are morphic anyway and it makes no difference if part of your code is a string or valid code. What really matters is that you do not need to deal with tons of quotation marks whenever use or define them. </p>\n",
    "score": 0,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6267925,
      "name": "Little Alien",
      "reputation": 1
    }
  },
  {
    "soID": 44649473,
    "parentID": 31044,
    "url": "https://stackoverflow.com/q/44649473",
    "title": null,
    "body": "<p>You don't have to check if it's greater than <code>0</code> like <code>$(selector).length &gt; 0</code>, <code>$(selector).length</code> it's enough and a elegant way to check the existence of elements. I don't think that is worth to write a function only for this, if you want to do more extra things, yes.</p>\n\n<pre><code>if($(selector).length){\n  // true if length is not 0\n} else {\n  // false if length is 0\n}\n</code></pre>\n",
    "score": 2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6318702,
      "name": "Andrei Todorut",
      "reputation": 722
    }
  },
  {
    "soID": 43774746,
    "parentID": 23569441,
    "url": "https://stackoverflow.com/q/43774746",
    "title": null,
    "body": "<p>You can use below code. Here in this example I have used h1 tag and added an attribute <code>data-title-text=\"Display Text\"</code> which will appear with different color text on h1 tag text element ,which gives effect halfcolored text as shown in below example </p>\n\n<p><a href=\"https://i.stack.imgur.com/yQQha.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/yQQha.png\" alt=\"enter image description here\"></a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>body {\r\n  text-align: center;\r\n  margin: 0;\r\n}\r\n\r\nh1 {\r\n  color: #111;\r\n  font-family: arial;\r\n  position: relative;\r\n  font-family: 'Oswald', sans-serif;\r\n  display: inline-block;\r\n  font-size: 2.5em;\r\n}\r\n\r\nh1::after {\r\n  content: attr(data-title-text);\r\n  color: #e5554e;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  clip: rect(0, 1000px, 30px, 0);\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;h1 data-title-text=\"Display Text\"&gt;Display Text&lt;/h1&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
    "score": 4,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6396645,
      "name": "GSB",
      "reputation": 599
    }
  },
  {
    "soID": 39789894,
    "parentID": 22343224,
    "url": "https://stackoverflow.com/q/39789894",
    "title": null,
    "body": "<p><strong>~ Tilde:</strong></p>\n\n<ul>\n<li><code>~</code> fixes <strong>major and minor numbers.</strong></li>\n<li>It is used when you're ready to accept bug-fixes in your dependency,\nbut don't want any potentially incompatible changes.</li>\n<li>The tilde matches the <strong>most recent minor version</strong> (the middle number).</li>\n<li>~1.2.3 will match all 1.2.x versions, but it will miss 1.3.0.</li>\n<li>Tilde (~) gives you bug fix releases</li>\n</ul>\n\n<p><strong>^ Caret:</strong></p>\n\n<ul>\n<li><code>^</code> fixes the major number only.</li>\n<li>It is used when you're closely watching your dependencies and are ready to quickly change your code if minor release will be incompatible.</li>\n<li>It will update you to the <strong>most recent major version</strong> (the first number).</li>\n<li>^1.2.3 will match any 1.x.x release including 1.3.0, but it will hold off on 2.0.0.</li>\n<li>Caret (^) gives you backwards-compatible new functionality as well.</li>\n</ul>\n",
    "score": 3,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6755093,
      "name": "Lakshmi",
      "reputation": 1476
    }
  },
  {
    "soID": 40706413,
    "parentID": 1335851,
    "url": "https://stackoverflow.com/q/40706413",
    "title": null,
    "body": "<p>Normally java script does not follow strict rules hence increasing chances of errors. After using <code>\"use strict\"</code>, the java script code should follow strict set of rules as like in other programming languages such as use of terminators, declaration before initialization etc. </p>\n\n<p>If <code>\"use strict\"</code> is used then the code should be written by following a strict set of rules hence decreasing the chances of errors and ambiguities.</p>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6773472,
      "name": "Bikash Chapagain",
      "reputation": 61
    }
  },
  {
    "soID": 45204117,
    "parentID": 171027,
    "url": "https://stackoverflow.com/q/45204117",
    "title": null,
    "body": "<p>This is my solution</p>\n\n<pre><code>$('#myTable').append('&lt;tr&gt;&lt;td&gt;'+data+'&lt;/td&gt;&lt;td&gt;'+other data+'&lt;/td&gt;...&lt;/tr&gt;');\n</code></pre>\n",
    "score": 1,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 6830854,
      "name": "Daniel Ortegón",
      "reputation": 31
    }
  },
  {
    "soID": 42002014,
    "parentID": 171251,
    "url": "https://stackoverflow.com/q/42002014",
    "title": null,
    "body": "<p>You can do the following in EcmaScript2016</p>\n\n<p>Correction: it's a stage 3 proposal, still it has always worked for me</p>\n\n<pre><code>const objA = {\n  attrA: 'hello',\n  attrB: true\n}\n\nconst objB = {\n  attrC: 2\n}\n\nconst mergedObj = {...objA, ...objB}\n</code></pre>\n",
    "score": -2,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": null
  },
  {
    "soID": 42536028,
    "parentID": 4810841,
    "url": "https://stackoverflow.com/q/42536028",
    "title": null,
    "body": "<pre><code>var jsonObj = {\"streetLabel\": \"Avenue Anatole France\", \"city\": \"Paris 07\",  \"postalCode\": \"75007\", \"countryCode\": \"FRA\",  \"countryLabel\": \"France\" };\n\n\ndocument.getElementById(\"result-before\").innerHTML = JSON.stringify(jsonObj);\n</code></pre>\n\n<p>// in case of displaying in HTML, you should to add a balise &lt; pre>&lt; /pre></p>\n\n<pre><code>document.getElementById(\"result-after\").innerHTML = \"&lt;pre&gt;\"+JSON.stringify(jsonObj,undefined, 2) +\"&lt;/pre&gt;\"\n</code></pre>\n",
    "score": 5,
    "tags": [

    ],
    "acceptedAnswerID": null,
    "user": {
      "soUserID": 7512406,
      "name": "Adel MANI",
      "reputation": 51
    }
  }
]
